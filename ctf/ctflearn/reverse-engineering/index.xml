<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ingeniería inversa on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/</link><description>Recent content in Ingeniería inversa on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/ctflearn/reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>PIN</title><link>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/pin/</guid><description>&lt;p>Se nos proporciona un binario llamado &lt;code>rev1&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">rev1&lt;/span>
rev1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c5f9af621b132c2028d8e689cbb5b707f3f3cd28, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Si lo ejecutamos, el programa espera un PIN:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./rev1&lt;/span>
Masukan PIN = 1234 
PIN salah !
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Vamos a depurarlo con GDB y a mostrar el código ensamblador del &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">gdb&lt;/span> -q &lt;span class="mtku">rev1&lt;/span>
Reading symbols from &lt;span class="code-dark-green">rev1&lt;/span>...
(No debugging symbols found in &lt;span class="code-dark-green">rev1&lt;/span>)
&lt;span class="code-red">gef➤&lt;/span> disassemble main
Dump of assembler code for function main:
 &lt;span class="code-dark-blue">0x00000000004005d6&lt;/span> &amp;lt;+0&amp;gt;: push rbp
 &lt;span class="code-dark-blue">0x00000000004005d7&lt;/span> &amp;lt;+1&amp;gt;: mov rbp,rsp
 &lt;span class="code-dark-blue">0x00000000004005da&lt;/span> &amp;lt;+4&amp;gt;: sub rsp,0x10
 &lt;span class="code-dark-blue">0x00000000004005de&lt;/span> &amp;lt;+8&amp;gt;: lea rdi,[rip+0xdf] # &lt;span class="code-dark-blue">0x4006c4&lt;/span> 
 &lt;span class="code-dark-blue">0x00000000004005e5&lt;/span> &amp;lt;+15&amp;gt;: mov eax,0x0
 &lt;span class="code-dark-blue">0x00000000004005ea&lt;/span> &amp;lt;+20&amp;gt;: call &lt;span class="code-dark-blue">0x4004a0&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">printf@plt&lt;/span>&amp;gt;
 &lt;span class="code-dark-blue">0x00000000004005ef&lt;/span> &amp;lt;+25&amp;gt;: lea rax,[rbp-0x4]
 &lt;span class="code-dark-blue">0x00000000004005f3&lt;/span> &amp;lt;+29&amp;gt;: mov rsi,rax
 &lt;span class="code-dark-blue">0x00000000004005f6&lt;/span> &amp;lt;+32&amp;gt;: lea rdi,[rip+0xd6] # &lt;span class="code-dark-blue">0x4006d3&lt;/span>
 &lt;span class="code-dark-blue">0x00000000004005fd&lt;/span> &amp;lt;+39&amp;gt;: mov eax,0x0
 &lt;span class="code-dark-blue">0x0000000000400602&lt;/span> &amp;lt;+44&amp;gt;: call &lt;span class="code-dark-blue">0x4004b0&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">__isoc99_scanf@plt&lt;/span>&amp;gt;
 &lt;span class="code-dark-blue">0x0000000000400607&lt;/span> &amp;lt;+49&amp;gt;: mov eax,DWORD PTR [rbp-0x4]
 &lt;span class="code-dark-blue">0x000000000040060a&lt;/span> &amp;lt;+52&amp;gt;: mov edi,eax
 &lt;span class="code-dark-blue">0x000000000040060c&lt;/span> &amp;lt;+54&amp;gt;: call &lt;span class="code-dark-blue">0x4005b6&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">cek&lt;/span>&amp;gt;
 &lt;span class="code-dark-blue">0x0000000000400611&lt;/span> &amp;lt;+59&amp;gt;: test eax,eax
 &lt;span class="code-dark-blue">0x0000000000400613&lt;/span> &amp;lt;+61&amp;gt;: je &lt;span class="code-dark-blue">0x400623&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">main&lt;/span>+77&amp;gt;
 &lt;span class="code-dark-blue">0x0000000000400615&lt;/span> &amp;lt;+63&amp;gt;: lea rdi,[rip+0xba] # &lt;span class="code-dark-blue">0x4006d6&lt;/span>
 &lt;span class="code-dark-blue">0x000000000040061c&lt;/span> &amp;lt;+70&amp;gt;: call &lt;span class="code-dark-blue">0x400490&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">puts@plt&lt;/span>&amp;gt;
 &lt;span class="code-dark-blue">0x0000000000400621&lt;/span> &amp;lt;+75&amp;gt;: jmp &lt;span class="code-dark-blue">0x40062f&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">main&lt;/span>+89&amp;gt;
 &lt;span class="code-dark-blue">0x0000000000400623&lt;/span> &amp;lt;+77&amp;gt;: lea rdi,[rip+0xba] # &lt;span class="code-dark-blue">0x4006e4&lt;/span>
 &lt;span class="code-dark-blue">0x000000000040062a&lt;/span> &amp;lt;+84&amp;gt;: call &lt;span class="code-dark-blue">0x400490&lt;/span> &amp;lt;&lt;span class="code-dark-yellow">puts@plt&lt;/span>&amp;gt;
 &lt;span class="code-dark-blue">0x000000000040062f&lt;/span> &amp;lt;+89&amp;gt;: mov eax,0x0
 &lt;span class="code-dark-blue">0x0000000000400634&lt;/span> &amp;lt;+94&amp;gt;: leave
 &lt;span class="code-dark-blue">0x0000000000400635&lt;/span> &amp;lt;+95&amp;gt;: ret
End of assembler dump.
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Aquí vemos que nuestros datos de entrada se pasan a &lt;code>cek&lt;/code>, por lo que vamos a mostrar esta función:&lt;/p></description></item><item><title>Reykjavik</title><link>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/reykjavik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/reykjavik/</guid><description>&lt;p>Se nos proporciona un binario de 64 bits llamado &lt;code>Reykjavik&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">Reykjavik&lt;/span>
Reykjavik: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9bc04368dbcefb4491573ac8feea3a32e31ed59f, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Si lo ejecutamos, vemos que necesita un argumento de línea de comandos:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./Reykjavik&lt;/span>
Usage: Reykjavik CTFlearn{flag}

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./Reykjavik&lt;/span> &lt;span class="code-dark-yellow">'CTFlearn{flag}'&lt;/span>
Welcome to the CTFlearn Reversing Challenge Reykjavik v2: CTFlearn{flag} 
Compile Options: ${CMAKE_CXX_FLAGS} -O0 -fno-stack-protector -mno-sse

Sorry Dude, 'CTFlearn{flag}' is not the flag :-(
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Vamos a usar GDB para depurar el programa. Primero, podemos mostrar el desensamblado de la función &lt;code>main&lt;/code>:&lt;/p></description></item></channel></rss>