<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mobile on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/</link><description>Recent content in Mobile on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/htb-challenges/mobile/index.xml" rel="self" type="application/rss+xml"/><item><title>Anchored</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/anchored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/anchored/</guid><description>&lt;p>Se nos proporciona un archivo APK (&lt;code>Manager.apk&lt;/code>) y un archivo &lt;code>README.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google Play)).

1. Install this application in a non-rooted device (i.e. In Android Studio AVD Manager select an image that includes (Google Play)). 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="ingeniería-inversa">Ingeniería inversa&lt;/h2>
&lt;p>Lo primero que podemos hacer es descompilar el archivo APK y leer código fuente en Java.&lt;/p>
&lt;h3 id="descomilación-de-apk">Descomilación de APK&lt;/h3>
&lt;p>Si cargamos el APK en &lt;a target="_blank" href="http://www.javadecompilers.com/apk">www.javadecompilers.com&lt;/a> y seleccione &amp;ldquo;&lt;em>APK decompiler&lt;/em>&amp;rdquo;, veremos este código para &lt;code>MainActivity.java&lt;/code> (&lt;code>sources/com/example/anchored/MainActivity.java&lt;/code>), donde he comentado algunas partes que no son relevantes:&lt;/p></description></item><item><title>APKrypt</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/apkrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/apkrypt/</guid><description>&lt;p>Se nos proporciona un archivo APK (&lt;code>APKrypt.apk&lt;/code>). Tenemos que encontrar un código VIP en el archivo APK. Por tanto, utilizaremos &lt;code>d2j-dex2jar&lt;/code> para conseguir un archivo JAR:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">d2j-dex2jar&lt;/span> &lt;span class="mtku">APKrypt.apk&lt;/span>
dex2jar APKrypt.apk -> ./APKrypt-dex2jar.jar 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>Ahora podemos subir el archivo JAR a &lt;a target="_blank" href="http://www.javadecompilers.com">www.javadecompilers.com&lt;/a> y seleccionar Jadx como descompilador.&lt;/p>
&lt;p>El archivo principal es &lt;code>sources/com/example/apkrypt/MainActivity.java&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">package&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">com.example.apkrypt&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.app.Activity&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.os.Bundle&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.util.Base64&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.view.View&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.widget.Button&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.widget.EditText&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.widget.Toast&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.security.Key&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.security.MessageDigest&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.security.NoSuchAlgorithmException&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">javax.crypto.Cipher&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">javax.crypto.spec.SecretKeySpec&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">MainActivity&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">extends&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtki mtku">Activity&lt;/span>&lt;span class="mtk1"> {&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">/* renamed from: b1 */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Button&lt;/span>&lt;span class="mtk1"> f77b1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">EditText&lt;/span>&lt;span class="mtk1"> ed1;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">str&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">throws&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Key&lt;/span>&lt;span class="mtk1"> generateKey &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">generateKey&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Cipher&lt;/span>&lt;span class="mtk1"> instance &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> Cipher.&lt;/span>&lt;span class="mtk8">getInstance&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"AES"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">init&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, generateKey);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">String&lt;/span>&lt;span class="mtk1">(instance.&lt;/span>&lt;span class="mtk8">doFinal&lt;/span>&lt;span class="mtk1">(Base64.&lt;/span>&lt;span class="mtk8">decode&lt;/span>&lt;span class="mtk1">(str, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)), &lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">str&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">throws&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Key&lt;/span>&lt;span class="mtk1"> generateKey &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">generateKey&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Cipher&lt;/span>&lt;span class="mtk1"> instance &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> Cipher.&lt;/span>&lt;span class="mtk8">getInstance&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"AES"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">init&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, generateKey);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> Base64.&lt;/span>&lt;span class="mtk8">encodeToString&lt;/span>&lt;span class="mtk1">(instance.&lt;/span>&lt;span class="mtk8">doFinal&lt;/span>&lt;span class="mtk1">(str.&lt;/span>&lt;span class="mtk8">getBytes&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">)), &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">generateKey&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">throws&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">SecretKeySpec&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Dgu8Trf6Ge4Ki9Lb"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">getBytes&lt;/span>&lt;span class="mtk1">(), &lt;/span>&lt;span class="mtk4">"AES"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">md5&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">str&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">MessageDigest&lt;/span>&lt;span class="mtk1"> instance &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> MessageDigest.&lt;/span>&lt;span class="mtk8">getInstance&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"MD5"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">update&lt;/span>&lt;span class="mtk1">(str.&lt;/span>&lt;span class="mtk8">getBytes&lt;/span>&lt;span class="mtk1">());&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">[] digest &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">digest&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">StringBuffer&lt;/span>&lt;span class="mtk1"> stringBuffer &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">StringBuffer&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1"> b &lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> digest) {&lt;/span>
&lt;span class="mtk1"> stringBuffer.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(Integer.&lt;/span>&lt;span class="mtk8">toHexString&lt;/span>&lt;span class="mtk1">(b &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">255&lt;/span>&lt;span class="mtk1">));&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> stringBuffer.&lt;/span>&lt;span class="mtk8">toString&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">catch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">NoSuchAlgorithmException&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">e&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> e.&lt;/span>&lt;span class="mtk8">printStackTrace&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">/* access modifiers changed from: protected */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">onCreate&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">Bundle&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">bundle&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">super&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">onCreate&lt;/span>&lt;span class="mtk1">(bundle);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setContentView&lt;/span>&lt;span class="mtk1">(C0535R.layout.activity_main);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">this&lt;/span>&lt;span class="mtk1">.f77b1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (Button) &lt;/span>&lt;span class="mtk8">findViewById&lt;/span>&lt;span class="mtk1">(C0535R.C0538id.button);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">this&lt;/span>&lt;span class="mtk1">.ed1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (EditText) &lt;/span>&lt;span class="mtk8">findViewById&lt;/span>&lt;span class="mtk1">(C0535R.C0538id.editTextVipCode);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">this&lt;/span>&lt;span class="mtk1">.f77b1.&lt;/span>&lt;span class="mtk8">setOnClickListener&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> View.&lt;/span>&lt;span class="mtk8">OnClickListener&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">onClick&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">View&lt;/span>&lt;span class="mtk1"> view) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (MainActivity.&lt;/span>&lt;span class="mtk8">md5&lt;/span>&lt;span class="mtk1">(MainActivity.this.ed1.&lt;/span>&lt;span class="mtk8">getText&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">toString&lt;/span>&lt;span class="mtk1">()).&lt;/span>&lt;span class="mtk8">equals&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"735c3628699822c4c1c09219f317a8e9"&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk1"> Toast.&lt;/span>&lt;span class="mtk8">makeText&lt;/span>&lt;span class="mtk1">(MainActivity.this.&lt;/span>&lt;span class="mtk8">getApplicationContext&lt;/span>&lt;span class="mtk1">(), MainActivity.&lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZToz&lt;/span>&lt;span class="mtk4">BWPn2lExQYDHH1l"&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">show&lt;/span>&lt;span class="mtk1">();&lt;/span> 
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> Toast.&lt;/span>&lt;span class="mtk8">makeText&lt;/span>&lt;span class="mtk1">(MainActivity.this.&lt;/span>&lt;span class="mtk8">getApplicationContext&lt;/span>&lt;span class="mtk1">(), &lt;/span>&lt;span class="mtk4">"Wrong VIP code!"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">show&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">catch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">e&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> e.&lt;/span>&lt;span class="mtk8">printStackTrace&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> });&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Lo primero que hace es preguntar por el código VIP en &lt;code>onCreate&lt;/code> y mira si su &lt;em>hash&lt;/em> MD5 coincide con &lt;code>735c3628699822c4c1c09219f317a8e9&lt;/code>. Si usamos &lt;a target="_blank" href="https://crackstation.net">crackstation.net&lt;/a> no encontraremos ninguna coincidencia:&lt;/p></description></item><item><title>Don't Overreact</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/dont-overreact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/dont-overreact/</guid><description>&lt;p>Se nos proporciona un archivo APK (&lt;code>app-release.apk&lt;/code>).&lt;/p>
&lt;h2 id="extracción-de-apk">Extracción de APK&lt;/h2>
&lt;p>Del nombre del reto, podemos pensar en React Native para desarrollo de aplicaciones móviles. De momento, vamos a extraer el contenido del archivo APK con &lt;code>apktool&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">apktool&lt;/span> d &lt;span class="mtku">app-release.apk&lt;/span>
I: Using Apktool 2.6.1 on app-release.apk
I: Loading resource table...
I: Decoding AndroidManifest.xml with resources...
I: Loading resource table from file: ~/.local/share/apktool/framework/1.apk
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Baksmaling classes.dex...
I: Copying assets and libs...
I: Copying unknown files...
I: Copying original files...

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">cd&lt;/span> &lt;span class="mtku">app-release&lt;/span>

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ls&lt;/span>
AndroidManifest.xml apktool.yml &lt;span class="code-blue">assets lib original res smali unknown&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Como esperábamos, dentro de &lt;code>assets&lt;/code> encontramos un archivo llamado &lt;code>index.android.bundle&lt;/code>, que es el código JavaScript minificado de la aplicación:&lt;/p></description></item><item><title>Manager</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/manager/</guid><description>&lt;p>Se nos proporciona un archivo APK (&lt;code>Manager.apk&lt;/code>) y un archivo &lt;code>README.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)).

1. In order to connect to the server when first running the application, insert the IP and PORT that you are provided in the description. 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Como se puede ver, la aplicación Android se conectará a un servidor remoto, por lo que probablemente analizaremos esa comunicación.&lt;/p></description></item><item><title>Pinned</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/pinned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/pinned/</guid><description>&lt;p>Se nos proporciona un archivo APK (&lt;code>pinned.apk&lt;/code>) y un archivo &lt;code>README.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)). 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="análisis-dinámico">Análisis dinámico&lt;/h2>
&lt;p>Vamos a arrancar &lt;a target="_blank" href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF&lt;/a> y Genymotion hacer un análisis dinámico:&lt;/p>
&lt;p>&lt;img alt="Pinned 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Mobile-Pinned-1.webp">&lt;/p>
&lt;p>Simplemente muestra un formulario de inicio de sesión con las credenciales ya escritas. No pude leer la contraseña desde ahí. Si pinchamos en el botón, veremos un mensaje exitoso:&lt;/p>
&lt;p>&lt;img alt="Pinned 2" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Mobile-Pinned-2.webp">&lt;/p></description></item><item><title>SeeTheSharpFlag</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/seethesharpflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/seethesharpflag/</guid><description>&lt;p>Se nos proporciona un archivo APK (&lt;code>com.companyname.seethesharpflag-x86.apk&lt;/code>). A partir del nombre del reto, podemos pensar en C# para desarrollo móvil. Podemos comenzar ejecutando &lt;a target="_blank" href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF&lt;/a>. Una vez que tenemos el archivo APK cargado, tenemos esta pantalla:&lt;/p>
&lt;p>&lt;img alt="SeeTheSharpFlag 1" src="https://7rocky.github.io/images-draft/HTB-Challenges/HTB-Mobile-SeeTheSharpFlag-1.webp">&lt;/p>
&lt;h2 id="xamarin-forms">Xamarin Forms&lt;/h2>
&lt;p>Aquí se ve que está desarrollada con Xamarin Forms (C# por detrás). Los archivos descompilados en Java están ofuscados, por lo que necesitamos encontrar otra manera de realizar ingeniería inversa:&lt;/p>
&lt;p>&lt;img alt="SeeTheSharpFlag 2" src="https://7rocky.github.io/images-draft/HTB-Challenges/HTB-Mobile-SeeTheSharpFlag-2.webp">&lt;/p></description></item></channel></rss>