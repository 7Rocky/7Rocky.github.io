<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reversing on 7Rocky</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/</link><description>Recent content in Reversing on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/htb-challenges/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>Baby RE</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/baby-re/</guid><description>Se nos proporciona un binario llamado baby:
$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped Si lo ejecutamos, pregunta por una clave:
$ ./baby Insert key: Podemos introducir una clave y ver que no es correcta:
$ ./baby Insert key: 1234 Try again later. Podemos hacer uso de ltrace para ver las llamadas a funciones externas (funciones que pertenecen a librerías como Glibc):</description></item><item><title>Bypass</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/bypass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/bypass/</guid><description>Se nos proporciona un binario de 32 bits llamado Bypass.exe que es un archivo Windows PE:
$ file Bypass.exe Bypass.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows Si lo ejecutamos en una máquina Windows, nos preguntará por usuario y contraseña.
Un análisis de código estático con Ghidra no es útil. Por tanto, vamos a utilizar un depurador como x32dbg para depurar el binario. Una vez abierto, vemos el hilo principal:</description></item></channel></rss>