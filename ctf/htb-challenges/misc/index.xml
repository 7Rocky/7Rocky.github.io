<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Misc on 7Rocky</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/</link><description>Recent content in Misc on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/htb-challenges/misc/index.xml" rel="self" type="application/rss+xml"/><item><title>0ld is g0ld</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/0ld-is-g0ld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/0ld-is-g0ld/</guid><description>Se nos proporciona un archivo PDF llamado 0ld is g0ld.pdf, pero está protegido con contraseña
Para obtener la contraseña, podemos usar pdf2john para extraer nu hash y pasárselo a john para romperlo con un ataque de diccionario usando rockyou.txt:
$ pdf2john 0ld\ is\ g0ld.pdf | tee hash 0ld is g0ld.pdf:$pdf$4*4*128*-1060*1*16*5c8f37d2a45eb64e9dbbf71ca3e86861*32*9cba5cfb1c536f1384bba7458aae3f8100000000000000000000000000000000*32*702cc7ced92b595274b7918dcb6dc74bedef6ef851b4b4b5b8c88732ba4dac0c $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) Cost 1 (revision) is 4 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status jumanji69 (0ld is g0ld.</description></item><item><title>BitsNBytes</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/bitsnbytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/bitsnbytes/</guid><description>Se nos proporcionan dos imágenes PNG intercepted.png y original.png:
$ file intercepted.png intercepted.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced $ file original.png original.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced Ambas imágenes parecen iguales visualmente:
Pero realmente son diferentes porque sus hashes MD5 no coinciden:
$ md5sum intercepted.png 88e9b5b97e4a615f1aa26d11dbcdec0d intercepted.png $ md5sum original.png 04e2562c19e680b6493b2a31d65c51e3 original.png Entonces, podemos deducir que hay algún tipo de esteganografía aplicada en intercepted.</description></item><item><title>Compressor</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/compressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/compressor/</guid><description>Para este reto solamente tenemos una instancia remota a la que conectarnos:
$ nc 157.245.33.77 31001 [*] Directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv Component List: +===============+ | | | 1. Head 🤖 | | 2. Torso 🦴 | | 3. Hands 💪 | | 4. Legs 🦵 | | | +===============+ [*] Choose component: Podemos elegir el primero, por ejemplo:
[*] Choose component: 1 [*] Sub-directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv/Head Actions: 1.</description></item><item><title>Da Vinci</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/da-vinci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/da-vinci/</guid><description>Se nos proporcionan tres imágenes JPEG:
monalisa.jpg: Plans.jpg: Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg: $ file monalisa.jpg monalisa.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 300x300, segment length 16, comment: "CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 92", comment: "Optimized by JPEGmini 3.9.20.0L Internal 0x8c97c7da", baseline, precision 8, 1280x1936, components 3 $ file Plans.jpg Plans.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 100x100, segment length 16, baseline, precision 8, 800x600, components 3 $ file Thepassword_is_the_small_name_of_the_actor_named_Hanks.</description></item><item><title>Emdee five for life</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/emdee-five-for-life/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/emdee-five-for-life/</guid><description>Tenemos la siguiente página web:
Parece que tenemos que calcular el hash MD5 de la cadena de texto mostrada y enviarla:
$ echo -n Vzf9GeB5zAFDZ2M3oKSa | md5sum c03463878fee34e249962c4aef9af84c - Pero hemos sido muy lentos&amp;hellip;
Por tanto, tendremos que programar un script que envíe la petición lo más rápido posible. Una cosa importante a tener en cuenta es mantener la cookie PHPSESSID configurada por el servidor:
$ curl -I 134.209.187.167:31212/ HTTP/1.</description></item><item><title>fs0ciety</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/fs0ciety/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/fs0ciety/</guid><description>Se nos proporciona un archivo ZIP llamado fsociety.zip:
$ unzip -v fsociety.zip Archive: fsociety.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 729 Defl:N 186 75% 08-15-2017 17:44 e126a116 sshcreds_datacenter.txt -------- ------- --- ------- 729 186 75% 1 file Vemos que está protegido con contraseña:
$ unzip fsociety.zip Archive: fsociety.zip [fsociety.zip] sshcreds_datacenter.txt password: Por tanto, podemos probar a realizar un ataque de fuerza bruta usando rockyou.</description></item><item><title>Hackerman</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/hackerman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/hackerman/</guid><description>Se nos proporciona una imagen JPEG llamada hackerman.jpg:
$ file hackerman.jpg hackerman.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 960x540, components 3 Como es una imagen JPEG, podemos pensar en esteganografía usando steghide. Pero no parece que funcione de momento.
Si miramos los caracteres imprimibles de la imagen, veremos una cadena de texto que parece un hash MD5 (32 dígitos hexadecimales):</description></item><item><title>Insane Bolt</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/insane-bolt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/insane-bolt/</guid><description>Tenemos este juego:
$ nc 206.189.125.243 30182 1. Instructions 2. Play &amp;gt; 1 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 [*] Help the 🤖 reach the 💎. 🔩 🔩 [*] You need to find the shortest route. 🔩 🔩 [*] You need to collect 500 💎 and at least 5000 🔩.</description></item><item><title>Milkshake</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/milkshake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/milkshake/</guid><description>Se nos proporciona un archivo MP3 llamado Milkshake.mp3. Podemos echar un vistazo a las cadenas de caracteres imprimibles o los metadatos:
$ file Milkshake.mp3 Milkshake.mp3: Audio file with ID3 version 2.4.0, extended header, contains:MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo $ strings -20 Milkshake.mp3 The Neptunes Present-Clones-ADTRCK 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CCOMM 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CTPE1 Chad Hugo/Pharrell Williams !</description></item><item><title>Pusheen Loves Graphs</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/pusheen-loves-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/pusheen-loves-graphs/</guid><description>Se nos proporciona un archivo binario llamado Pusheen. Si lo ejecutamos, veremos un dibujo de un gato:
$ ./Pusheen ▐▀▄ ▄▀▌ ▄▄▄▄▄▄▄ ▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄█▒█ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▒█▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌ ▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀ Si miramos las cadenas de caracteres imprimibles, vemos que hay muchas que empiezan por e_ (de hecho, hay desde e_0_0 hasta e_66_100). Podemos contarlas de esta manera:
$ strings Pusheen | wc -l 6767 Estas cadenas de caracteres pueden ser nombres de funciones, ya que el binario no ha sido despojado de sus símbolos:</description></item><item><title>The secret of a Queen</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/the-secret-of-a-queen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/the-secret-of-a-queen/</guid><description>Se nos proporciona una imagen con unos símbolos raros:
El nombre del reto es una pista, ya que se está utilizando el cifrado de la reina María de Escocia. El cifrado se basa en la sustitución de letras por símbolos utilizando el siguiente alfabeto:
Si traducimos cada símbolo de la imagen a una letra, obtenemos la flag: HTB{THEBABINGTONPLOT}.</description></item></channel></rss>