<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stego on 7Rocky</title><link>https://7rocky.github.io/ctf/htb-challenges/stego/</link><description>Recent content in Stego on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/htb-challenges/stego/index.xml" rel="self" type="application/rss+xml"/><item><title>Digital Cube</title><link>https://7rocky.github.io/ctf/htb-challenges/stego/digital-cube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/stego/digital-cube/</guid><description>Se nos proporciona un archivo de texto llamado digitalcube.txt que contiene una ristra de 0 y 1:
$ cat digitalcube.txtodríamos pensar que es ASCII en formato binario, pero no. Podemos mostrar el chorro de bits en formato hexadecimal con Python:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; hex(0bxfffcfccc0fffffff3f3303fffc00cfc00cc00f0033f0033003cfcccf330cfcf3f333ccc33f3cfccf30c0cfcf3f33cc3033f3cfcc003fccfcf3f3000ff33f3c00cc3fc0c00f00330ff03003fffccccccfffffff333333fff000030cf000000000c33c0000f0fc033c033ffc3f00cf00cff00c3fcc3c0c0c030ff30f030300ccc3ffcff0003330fff3fc0ff030f333c0f3fc0c3cccf03cfc0f0cf0fc3fff03c33c3f0ffc0c0f03f30cff0303c0fcc33f000cfc03030000033f00c0c000300c0ccf00f00c030333c03cffcff33cfff03ff3fccf3ffc00000c0c3c0c0c0003030f0303fffc33fccccc3fff0cff33330c00cc333c0cc300330ccf0330cfccfcf0fff0f3f33f3c3ffc3cfcc0c3c3f03f3f3030f0fc0fcfcc0c00c03333f30300300ccc00cc0cf0fcf30033033c3f3cfffccf3f3033ffff33cfcc0cf' No vemos bytes válidos en ASCII; por lo que este no es el camino a seguir.
Vamos a contar el número de caracteres en el archivo (es decir, el número de 0 y 1):</description></item><item><title>Forest</title><link>https://7rocky.github.io/ctf/htb-challenges/stego/forest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/stego/forest/</guid><description>Se nos proporciona una imagen JPEG llamada forest.jpg:
Si jugamos con el brillo de la imagen, veremos un texto oculto:
Dice IsJuS1Af0r3sTbR0. Esto parece una passphrase para steghide, vamos a ver si podemos extraer algo de imformación de aquí (podemos utilizar https://futureboy.us/stegano/decinput.html):
Muestra un texto extraño. Al final, se ve UGO{NzNm1aTfXvyYmMOe0}. esta debe ser la flag, pero debería ser de la forma HTB{...}. El texto también es ininteligible, por lo que tiene que haber algún tipo de cifrado, posiblemente un algoritmo de sustitución como ROT13.</description></item></channel></rss>