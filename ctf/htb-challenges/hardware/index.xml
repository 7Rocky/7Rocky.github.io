<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hardware on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/</link><description>Recent content in Hardware on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/htb-challenges/hardware/index.xml" rel="self" type="application/rss+xml"/><item><title>Gawk</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/gawk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/gawk/</guid><description>Se nos dice que alguien necesita ayuda con una impresora. Solo tenemos una dirección IP y un puerto. nmap no muestra información útil:
$ nmap -Pn -sV 167.99.207.74 -p 32108 Starting Nmap 7.93 ( https://nmap.org ) Nmap scan report for 167.99.207.74 Host is up (0.079s latency). PORT STATE SERVICE VERSION 32108/tcp open unknown Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.</description></item><item><title>Secure Digital</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/secure-digital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/secure-digital/</guid><description>Se nos dice que alguien ha leído la clave maestra de una tarjeta microSD, y se nos dan las trazas de las señales en un archivo trace_captured.sal.
Análisis de señales Podemos usar la lógica de saleae 2 para analizar los rastros, y tenemos esto:
SPI Si investigamos un poco, descubriremos que las tarjetas microSD usan Serial Peripheral Interface (SPI) como protocolo de comunicación. Comparando las señales que tenemos con las que vemos en SPI Analyzer - User Guide, podemos concluir que el Channel 0 y el Channel 1 son MISO o MOSI, el Channel 2 es Enable y el Channel 3 es Clock, por lo que podemos añadir el analizador:</description></item><item><title>Unique</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/unique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/unique/</guid><description>Se nos dice que un vehículo estaba enviando el VIN (Vehicle Identification Number) y guardaron la captura de la señal en un archivo (trace_captured.sal). Necesitamos encontrar el VIN.
Reconocimiento inicial Podemos abrir trace_captured.sal con Saleae Logic2:
Al principio, podemos seleccionar &amp;ldquo;Async Serial&amp;rdquo; y probar algunos bitrates:
Como podemos ver, los puntos no se ajustan a los pulsos de la señal. Podemos hacer algún cálculo para ver cuál es la tasa de bits correcta:</description></item><item><title>Walkie Hackie</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/walkie-hackie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/walkie-hackie/</guid><description>Se nos proporcionan cuatro capturas de señales de radiofrecuencia (desde 1.complex hasta 4.complex) y un sitio web para probar códigos:
Además, esta es la descripción del reto:
Our agents got caught during a mission and found that the guards are using old walkie-talkies for their communication. The field team captured their transmissions. Can you interrupt their communication to help our agents escape from the guards?
Análisis de radiofrecuencia Aunque hay una pista en el código HTML del sitio web que apunta a Universal Radio Hacker, prefiero usar inspectrum.</description></item><item><title>Watch Tower</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/watch-tower/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/watch-tower/</guid><description>Se nos dice que alguien ha estado recopilando y alterando información en la red. Además, se nos da un archivo llamado tower_logs.pcapng.
Análisis de tráfico de red Si abrimos el archivo PCAP en Wireshark, veremos muchos paquetes Modbus:
Modbus Algo interesante a mirar es el código de función. Hay tres códigos de función involucrados en esta captura de red (más información en Wikipedia):
Write Multiple Coils Read Coil Write Multiple Registers El que parece relevante es Write Multiple Registers porque solamente hay 2 paquetes con Write Multiple Coils y los paquetes de Read Coil no parecen contener ningún dato.</description></item></channel></rss>