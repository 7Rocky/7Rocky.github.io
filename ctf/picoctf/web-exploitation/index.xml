<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Explotación web on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/</link><description>Recent content in Explotación web on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/picoctf/web-exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>Cookies</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/cookies/</guid><description>Se nos proporciona una página web que pregunta por una cookie:
Mirando en las herramientas de desarrollador, vemos que tenemos una cookie name=-1. Si ponemos snickerdoodle como el campo de texto sugiere, la cookie cambiará a name=0:
Vamos a modificar el valor de la cookie usando curl y mostrar solo el mensaje:
$ curl mercury.picoctf.net:27177/check -sH 'Cookie: name=0' | grep -oE '&amp;lt;b&amp;gt;.*?&amp;lt;/b&amp;gt;' &amp;lt;b&amp;gt;I love snickerdoodle cookies!&amp;lt;/b&amp;gt; Ahora vamos a usar un bucle en Bash para ver si algo cambia al poner otro valor como cookie:</description></item><item><title>GET aHEAD</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/get-ahead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/get-ahead/</guid><description>Se nos proporciona una página web que muestra dos colores de fondo:
El botón rojo utiliza una petición GET y el azul usa una petición POST. Pero no vemos nada más.
Como el nombre del reto incluye HEAD, vamos a ver si qué pasa si hacemos petición HEAD con curl:
$ curl -I mercury.picoctf.net:47967 HTTP/1.1 200 OK flag: picoCTF{r3j3ct_th3_du4l1ty_cca66bd3} Content-type: text/html; charset=UTF-8</description></item><item><title>Insp3ct0r</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/insp3ct0r/</guid><description>Se nos proporciona una página web como esta:
Como sugiere la página, tenemos que inspeccionar el código HTML de la página web (atajo: Ctrl + U):
Podemos ver un trozo de la flag. Vamos a inspeccionar el archivo CSS (mycss.css):
Genial, tenemos otra pieza. Vamos a echar un vistazo al archivo JS (myjs.js):
Perfecto, podemos juntar todas las piezas y formar la flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}.</description></item><item><title>where are the robots</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/where-are-the-robots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/where-are-the-robots/</guid><description>Se nos proporciona una página web como esta:
La página habla de robots. Existe un archivo especial llamado robots.txt que previene a crawlers y arañas web que accedan a ciertas rutas listadas en el archivo. Vamos a echar un vistazo:
Genial, hay una línea Disallow: /8028f.html, que no significa que no podamos entrar (solamente dice a los escáneres automáticos que no entren). Este es /8028f.html:
Y ahí está la flag:</description></item></channel></rss>