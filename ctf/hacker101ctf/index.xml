<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hacker101CTF on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/hacker101ctf/</link><description>Recent content in Hacker101CTF on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/hacker101ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>A little something to get you started</title><link>https://7rocky.github.io/ctf/hacker101ctf/a-little-something-to-get-you-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/a-little-something-to-get-you-started/</guid><description>&lt;p>Tenemos una simple página web como esta:&lt;/p>
&lt;p>&lt;img alt="Página web" src="https://7rocky.github.io/images/Hacker101CTF/ALSTGYS-1.png">&lt;/p>
&lt;p>Podemos leer el código HTML de la página, que es el siguiente:&lt;/p>
&lt;p>&lt;img alt="Código fuente de la página web" src="https://7rocky.github.io/images/Hacker101CTF/ALSTGYS-2.png">&lt;/p>
&lt;p>Hay una imagen llamada &lt;code>background.png&lt;/code>, Pero no observamos nada en la página web. Podemos acceder a ella utilizando &lt;code>curl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">curl&lt;/span> http://35.190.155.168/9a968e7787/background.png
^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Y obtenemos la &lt;em>flag&lt;/em>.&lt;/p></description></item><item><title>H1 Thermostat</title><link>https://7rocky.github.io/ctf/hacker101ctf/h1-thermostat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/h1-thermostat/</guid><description>&lt;p>Tenemos un archivo APK de Android llamado &lt;code>thermostat.apk&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">thermostat.apk&lt;/span>
thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Como se muestram un archivo APK es solo un archivo ZIP. Por tanto, podemos extraer su contenido:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">7z&lt;/span> x &lt;span class="mtku">thermostat.apk&lt;/span>
Scanning the drive for archives:
1 file, 2595443 bytes (2535 KiB)

Extracting archive: thermostat.apk
--
Path = thermostat.apk
Type = zip
Physical Size = 2595443

Everything is Ok

Files: 569
Size: 4968479
Compressed: 2595443

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ls&lt;/span>
AndroidManifest.xml &lt;span class="code-dark-blue">META-INF&lt;/span> classes.dex &lt;span class="code-dark-blue">res&lt;/span> resources.arsc thermostat.apk 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Este reto es tan fácil que las &lt;em>flags&lt;/em> se encuentran dentro de los archivos extraídos. Podemos utilizar &lt;code>grep&lt;/code> de manera recursiva, no hay necesidad de utilizar &lt;code>apktool&lt;/code> o descompiladores a código Java:&lt;/p></description></item><item><title>Hello World!</title><link>https://7rocky.github.io/ctf/hacker101ctf/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/hello-world/</guid><description>&lt;p>Se nos proporciona un binario de 64 bits llamado &lt;code>vulnerable&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Si ejecutamos el binario, parece que no hace nada:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vulnerable&lt;/span> 
asdf
fdsa
1
2
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Si insertamos datos desde la entrada estándar (&lt;code>stdin&lt;/code>), vemos que el programa funciona:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">echo&lt;/span> asdf | &lt;span class="code-dark-green">./vulnerable&lt;/span> 
Hello asdf
!
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Vamos a enviar 100 caracteres utilizando Python para ver si falla:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vulnerable&lt;/span> &lt;&lt;&lt; &lt;span class="code-dark-magenta">$(&lt;/span>&lt;span class="code-dark-green">python3&lt;/span> -c &lt;span class="code-dark-yellow">'print("A" * 100)'&lt;/span>&lt;span class="code-dark-magenta">)&lt;/span>
Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 
!
zsh: segmentation fault (core dumped)
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Perfecto, parece que el binario es vulnerable a &lt;em>Buffer Overflow&lt;/em>.&lt;/p></description></item><item><title>Micro-CMS v1</title><link>https://7rocky.github.io/ctf/hacker101ctf/micro-cms-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/micro-cms-v1/</guid><description>&lt;p>Tenemos una página web sencilla que nos permite editar y crear artículos en Markdown:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/Micro-CMS-v1-1.png">&lt;/p>
&lt;p>Vamos a pinchar en &amp;ldquo;Testing&amp;rdquo;:&lt;/p>
&lt;p>&lt;img alt="Testing post" src="https://7rocky.github.io/images/Hacker101CTF/Micro-CMS-v1-2.png">&lt;/p>
&lt;p>Ahora, podemos intentar editar el artículo actual. Se nos muestra una caja de texto para escribir el código Markdown ahí:&lt;/p>
&lt;p>&lt;img alt="Filtered XSS payload" src="https://7rocky.github.io/images/Hacker101CTF/Micro-CMS-v1-3.png">&lt;/p>
&lt;p>Markdown es un lenguaje de marcado similar a HTML pero más sencillo. Además, Markdown soporta el uso de etiquetas HTML. Por tanto, podemos intentar a poner un &lt;em>payload&lt;/em> de &lt;em>Cross-Site Scripting&lt;/em> (XSS) como este:&lt;/p></description></item><item><title>Model E1337 - Rolling Code Lock</title><link>https://7rocky.github.io/ctf/hacker101ctf/model-e1337---rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/model-e1337---rolling-code-lock/</guid><description>&lt;p>Tenemos una simple página web que solicita un código para desbloquear:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/Rolling-Code-1.png">&lt;/p>
&lt;p>Podemos poner cualquier número y, después de unos segundos, veremos que es incorrecto:&lt;/p>
&lt;p>&lt;img alt="Wrong code" src="https://7rocky.github.io/images/Hacker101CTF/Rolling-Code-2.png">&lt;/p>
&lt;p>No hay nada en el código fuente de la página. En este punto, podemos aplicar &lt;em>fuzzing&lt;/em> para enumerar más rutas existentes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ffuf&lt;/span> -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ 
&lt;span class="code-dark-green">admin [Status: 200, Size: 287, Words: 25, Lines: 11]&lt;/span>
&lt;span class="code-dark-yellow">unlock [Status: 405, Size: 178, Words: 20, Lines: 5]&lt;/span>
&lt;span class="code-dark-green"> [Status: 200, Size: 302, Words: 16, Lines: 13]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Existe una ruta &lt;code>/admin&lt;/code>:&lt;/p></description></item><item><title>Model E1337 v2 - Hardened Rolling Code Lock</title><link>https://7rocky.github.io/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</guid><description>&lt;p>Este reto está muy relacionado a &lt;a target="_blank" href="../model-e1337---rolling-code-lock/">Model E1337 - Rolling Code Lock&lt;/a>, especialmente en la parte de criptoanálisis. Se recomienda leerlo si no se ha hecho antes.&lt;/p>
&lt;p>Como en el reto anterior, tenemos una simple página web que solicita un código para desbloquear:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/Hardened-Rolling-Code-1.png">&lt;/p>
&lt;p>Podemos poner cualquier número y veremos que es incorrecto:&lt;/p>
&lt;p>&lt;img alt="Wrong code" src="https://7rocky.github.io/images/Hacker101CTF/Hardened-Rolling-Code-2.png">&lt;/p>
&lt;p>La diferencia con el primer reto es la longitud del número, esta vez es de 64 bits.&lt;/p></description></item></channel></rss>