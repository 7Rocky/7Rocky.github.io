<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ECSC 2023 on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/</link><description>Recent content in ECSC 2023 on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/other/ecsc-2023/index.xml" rel="self" type="application/rss+xml"/><item><title>Blind</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/blind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/blind/</guid><description>&lt;blockquote>
&lt;p>&lt;em>Is this what people mean by &amp;ldquo;message blinding&amp;rdquo;?&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_f5aa4fd35f4c817ec1866c7f1d74fa6f.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/blind_37e06f044bca133267473011e5e5908c.sage">&lt;code>blind.sage&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>Se nos proporciona un &lt;em>script&lt;/em> largo de SageMath que usa ECDSA para firmar la clave que cifra la &lt;em>flag&lt;/em> (en realidad, una clave utilizada para derivar una clave AES con &lt;code>bcrypt.kdf&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">encrypt_flag&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">secrets&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">token_bytes&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">k2&lt;/span>&lt;span class="mtk5">//&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">bcrypt&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">kdf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">"ICC_CHALLENGE"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">31337&lt;/span>&lt;span class="mtk1">)&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">cipher&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">AES&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">new&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">key&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8 mtku">AES&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">MODE_CTR&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">nonce&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">with&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"rb"&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">cipher&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>So, the value &lt;code>k&lt;/code> En la función anterior es &lt;code>_k&lt;/code> en &lt;code>main&lt;/code>, y está firmado con ECDSA, donde $x$ es la clave privada e $Y = -x \cdot G$ es la clave pública ($G$ es un punto generador de la curva elíptica):&lt;/p></description></item><item><title>Hide and seek</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/hide-and-seek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/hide-and-seek/</guid><description>&lt;blockquote>
&lt;p>&lt;em>I have hidden my flag among the elliptic curve points. Go seek!&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_5058c28a109d275ad4f16a27a5330d28.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/hide_and_seek_50ecd7a9d6a2fcd37f227b408d83d3f0.sage">&lt;code>hide_and_seek.sage&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>Se nos proporciona un &lt;em>script&lt;/em> de SageMath que usa criptografía de curva elíptica para cifrar la &lt;em>flag&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>
&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"rb"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">()[&lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"ECSC{"&lt;/span>&lt;span class="mtk1">):&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1">proof.arithmetic(&lt;/span>&lt;span class="mtk6">False&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">17898504337425668039996599611020710187085880959967&lt;/span>&lt;span class="mtk6">84752439608585988988036381340404632423562593&lt;/span> 
&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">62150203092456938230366891668382702110196631396589&lt;/span>&lt;span class="mtk6">305390157506915312399058961554609342345998&lt;/span>
&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">10058202168438049187127289183053967680004928216564&lt;/span>&lt;span class="mtk6">53232969553225956348680715987662653812284211&lt;/span>
&lt;span class="mtk1">F&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> GF(&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">E.&lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1">G&lt;/span>&lt;span class="mtk5">&amp;gt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> EllipticCurve(F, [a, b])&lt;/span>
&lt;span class="mtk5">assert&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> G.order()&lt;/span>
&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> randrange(G.order())&lt;/span>
&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> G&lt;/span>
&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>

&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">42&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> randrange(G.order())&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> randrange(G.order())&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Tenemos los parámetros de la curva $a, b, p$, por lo que podemos obtener el punto generador $G$. Luego, para cifrar la &lt;em>flag&lt;/em>, el &lt;em>script&lt;/em> toma un número aleatorio $k$ y calcula $P = k \cdot G$. Después de eso, el &lt;em>script&lt;/em> toma la &lt;em>flag&lt;/em> (sin &lt;code>ECSC{}&lt;/code>) como número decimal y calcula $Q = \mathrm{FLAG} \cdot P$.&lt;/p></description></item><item><title>Irish Flan</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/irish-flan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/irish-flan/</guid><description>&lt;blockquote>
&lt;p>&lt;em>Yum, time for dessert.&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_258aece3f0028897e45f735c1a500fdf.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/irish_flan_0318660e05fe0a097277d6858c1194e1.py">&lt;code>irish_flan.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Se nos proporciona un &lt;em>script&lt;/em> en Python que usa cuaterniones para ocultar una clave AES utilizada para cifrar la &lt;em>flag&lt;/em>. La implementación de los cuaterniones se basa en clases de Python. Podemos suponer que la implementación es correcta (aunque hay un error en la potencia de un cuaternión, pero no es intencionado).&lt;/p>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>La parte relevante del &lt;em>script&lt;/em> es:&lt;/p></description></item><item><title>Kernel searcher</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/kernel-searcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/kernel-searcher/</guid><description>&lt;blockquote>
&lt;p>&lt;em>I have a super secret isogeny. Wanna know where your point ends up? Just send me your favourite coordinates.&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/Dockerfile">&lt;code>Dockerfile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/entry.sh">&lt;code>entry.sh&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/kernel_searcher.sage">&lt;code>kernel_searcher.sage&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/kernel_searcher.xinetd">&lt;code>kernel_searcher.xinetd&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Se nos proporciona un &lt;em>script&lt;/em> en SageMath que oculta la &lt;em>flag&lt;/em> bajo una isogenia y nos permite evaluar la isogenia en cualquier punto que deseemos.&lt;/p>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>La parte relevante del &lt;em>script&lt;/em> es esta:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>
&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>

&lt;span class="mtk1">proof.all(&lt;/span>&lt;span class="mtk6">False&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">A&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">B&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk6">216&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk6">137&lt;/span>
&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">A&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">B&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>

&lt;span class="mtk1">F.&lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk5">&amp;gt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> GF(p&lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">modulus&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> EllipticCurve(F, [&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">])&lt;/span>

&lt;span class="mtk3"># Torsion Basis for E[A]&lt;/span>
&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">canonical_torsion_basis&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">A&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>
&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">environ&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">get&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"FLAG"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"ECSC&lt;/span>&lt;span class="mtk6">{fake_flag_for_testing}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1">ker&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">Q&lt;/span>
&lt;span class="mtk1">challenge_isogeny&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">.isogeny(&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">ker&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">algorithm&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk4">"factored"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">model&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk4">"montgomery"&lt;/span>
&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">accept_point&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">loads&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">x0&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"x0"&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">x1&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"x1"&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">x&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> F([&lt;/span>&lt;span class="mtk1">x0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">x1&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">except&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Exception&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">e&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">e&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk4">"error"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk4">"Invalid Fp2 value"&lt;/span>&lt;span class="mtk1">}&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">not&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">.is_x_coord(&lt;/span>&lt;span class="mtk1">x&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk4">"error"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk4">"Invalid Point"&lt;/span>&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">.lift_x(&lt;/span>&lt;span class="mtk1">x&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">imP&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">challenge_isogeny&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">dumps&lt;/span>&lt;span class="mtk1">({&lt;/span>&lt;span class="mtk4">"x0"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">imP&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">]), &lt;/span>&lt;span class="mtk4">"x1"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">imP&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])})&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">f&lt;/span>&lt;span class="mtk4">"Welcome to my isogeny factory!"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">f&lt;/span>&lt;span class="mtk4">"My isogeny is so secret, I'll let you evaluate an&lt;/span>&lt;span class="mtk4">y point you like!"&lt;/span>&lt;span class="mtk1">)&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">input&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Send the point you wish to evaluate: "&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">accept_point&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"__main__"&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Básicamente, el servidor usa una curva elíptica dada $E$ sobre $\mathbb{F}_{p^2}$, donde $p = 2^{216} \, 3^{137} - 1$.&lt;/p></description></item><item><title>not crypto</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/not-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/not-crypto/</guid><description>&lt;blockquote>
&lt;p>&lt;em>This is the not crypto flag which is totaly not crypto, but crypto! Can we get a clap from the team for excessive crypto usage?&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Se nos proporciona el siguiente &lt;em>script&lt;/em> en Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">base64&lt;/span>

&lt;span class="mtk1">input_string&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"REMOVED"&lt;/span>


&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">secret&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">raw_string&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">raw_string&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'a'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'z'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'a'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">chr&lt;/span>&lt;span class="mtk1">(((&lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">13&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">26&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">elif&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'A'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'Z'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'A'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">chr&lt;/span>&lt;span class="mtk1">(((&lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">13&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">26&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">''&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">join&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">)&lt;/span>


&lt;span class="mtk1">encoded_bytes&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">base64&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">b64encode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">input_string&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1">encoded&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">encoded_bytes&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">decode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">lower&lt;/span>&lt;span class="mtk1">()&lt;/span>

&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">secret&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">encoded&lt;/span>&lt;span class="mtk1">))&lt;/span>

&lt;span class="mtk3"># ehagd3gzmjrmajvkamx5mql4zqdmmgewa2z5a2iymqx2zjdm&lt;/span>&lt;span class="mtk3">z2h2lwyuzjmubtzjbqwvbqowbgpkbgxmazv5mgmwagavsd==&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>La salida del &lt;em>script&lt;/em> es el comentario en la parte inferior.&lt;/p></description></item><item><title>Put a ring on it</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/put-a-ring-on-it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/put-a-ring-on-it/</guid><description>&lt;blockquote>
&lt;p>&lt;em>Ring Signatures are used in some cryptocurrencies to provide anonymity for who has signed a transaction or sent money. Can you break the anonymity of the ring signatures?&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/ed25519_47f2b0b21c6de8177aa298f1b91bf525.py">&lt;code>ed25519.py&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/data_8067cb731187767faec8c856d097645d.json">&lt;code>data.json&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/chal_2793a920b969de9b65bc1bdbb6398c0f.py">&lt;code>chal.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Se nos proporciona una implementación de un protocolo de &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Ring_signature">firma de anillo&lt;/a>, que se supone que es un algoritmo en el que unas partes pueden validar los mensajes firmados pero no pueden determinar quién lo ha firmado, proporcionando anonimato a las firmas.&lt;/p></description></item><item><title>RRSSAA</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/rrssaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/rrssaa/</guid><description>&lt;blockquote>
&lt;p>&lt;em>My primes are prefectly random. I wonder if you can find them.&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_db592c010295033ed6308f623264ba63.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/RRSSAA_635b87d91cadb308f7196cd21e3012e3.py">&lt;code>RRSSAA.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>Se nos proporciona el siguiente &lt;em>script&lt;/em> de Python que usa RSA para cifrar la &lt;em>flag&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"rb"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk5">assert&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">128&lt;/span>
&lt;span class="mtk1">N&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">prod&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">get_prime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">)))&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">N&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk7 mtki">0x&lt;/span>&lt;span class="mtk6">10001&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">N&lt;/span>&lt;span class="mtk1">)))&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>La configuración de RSA no es la habitual. Esta vez, tenemos una configuración de RSA multiprimo, donde cada factor primo del módulo $n$ se calcula con &lt;code>get_prime&lt;/code>:&lt;/p></description></item><item><title>Tough decisions</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/tough-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/tough-decisions/</guid><description>&lt;blockquote>
&lt;p>&lt;em>Champagne for my real friends, real pain for my sham friends.&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_aed711a6531a00aa881de4f42a893c06.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/tough_decisions_1584d1f0375406a0f4e56aa730ff791c.py">&lt;code>tough_decisions.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>Se nos proporciona un &lt;em>script&lt;/em> en Python que toma la &lt;em>flag&lt;/em> como bits y, por cada bit, imprime 6 salidas de una de las funciones &lt;code>real&lt;/code> (bit &lt;code>0&lt;/code>) o &lt;code>fake&lt;/code> (bit &lt;code>1&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"__main__"&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">s&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sample_key&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_flag&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">([[&lt;/span>&lt;span class="mtk8">real&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">fake&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1">](&lt;/span>&lt;span class="mtk1">s&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">)])&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Por lo tanto, el objetivo es encontrar una manera de diferenciar entre resultados de &lt;code>real&lt;/code> y &lt;code>fake&lt;/code> para obtener los bits de la &lt;em>flag&lt;/em>.&lt;/p></description></item><item><title>Twist and shout</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/twist-and-shout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/twist-and-shout/</guid><description>&lt;blockquote>
&lt;p>&lt;em>I&amp;rsquo;ll shout about my curve all day, it&amp;rsquo;s totally secure. You&amp;rsquo;ll have to pull the solution from my cold dead hands!&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;em>Connect at&lt;/em> &lt;code>archive.cryptohack.org 11718&lt;/code>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/twist_and_shout_1477ac70b0ba9fc5bf5e5366ee6d3efa.py">&lt;code>twist_and_shout.py&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/Dockerfile_1355e8b381a2401356f8301c3587cb41">&lt;code>Dockerfile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/twist_and_shout_dcc501ec132189fbdfc40fddd844f95e.xinetd">&lt;code>twist_and_shout.xinetd&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Se nos proporciona un servidor que usa una curva elíptica para cifrar la &lt;em>flag&lt;/em>.&lt;/p>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>Tenemos los parámetros de la curva:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk4">"""&lt;/span>
&lt;span class="mtk4">Define the elliptic curve&lt;/span>

&lt;span class="mtk4">E: y^2 = x^3 + a*x + b&lt;/span>

&lt;span class="mtk4">With order&lt;/span>

&lt;span class="mtk4">n = 340282366920938463465004184633952524077&lt;/span> 
&lt;span class="mtk4"> = 2^128 - 1629577202184312621&lt;/span>
&lt;span class="mtk4">"""&lt;/span>
&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk6">128&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">159&lt;/span>
&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1494&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Se nos permite ingresar a una coordenada $\mathrm{x}$ de un punto de la curva elíptica. El servidor usará esa coordenada $\mathrm{x}$ Para multiplicar la &lt;em>flag&lt;/em> por dicho punto la curva (es decir, cifra la &lt;em>flag&lt;/em>) y se nos da la coordenada $\mathrm{x}$ resultante:&lt;/p></description></item><item><title>WOTS Up</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up/</guid><description>&lt;blockquote>
&lt;p>&lt;em>With the need to find post-quantum schemes, hash-based signatures are cool again.&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/data_fd54ee361e446499d28fb7c04c0669f4.json">&lt;code>data.json&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/chal_dd02099acd9ffe4e8821daf5fc3b583c.py">&lt;code>chal.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Se nos da una clase llamada &lt;code>Winternitz&lt;/code> que implementa un protocolo de firma basado en el &lt;em>hash&lt;/em> SHA256. En realidad, WOTS significa Winternitz &lt;em>One-Time Signature&lt;/em> y es un algoritmo post-cuántico de firma, que se explica perfectamente en &lt;a target="_blank" href="https://www.codingninjas.com/studio/library/winternitz-signature-scheme">www.codingninjas.com&lt;/a>.&lt;/p>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>En primer lugar, la clase crea una lista de claves privadas:&lt;/p></description></item><item><title>WOTS Up 2</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up-2/</guid><description>&lt;blockquote>
&lt;p>&lt;em>I fixed the problem with my last scheme, now I can confidently sign my WOTScoin transactions.&lt;/em>&lt;/p>
&lt;p>&lt;em>Challenge contributed by&lt;/em> &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Challenge files&lt;/em>:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/data_c1cf7f9624cc5c43e06c5c10b551a0e3.json">&lt;code>data.json&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/chal_99f81d23763da3c9f53a73900954639f.py">&lt;code>chal.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Este es otro reto que implementa WOTS (más información en &lt;a target="_blank" href="https://www.codingninjas.com/studio/library/winternitz-signature-scheme">www.codingninjas.com&lt;/a>).&lt;/p>
&lt;h2 id="análisis-del-código-fuente">Análisis del código fuente&lt;/h2>
&lt;p>La clase &lt;code>Winternitz&lt;/code> es un poco diferente de la primera parte del reto, en la generación de teclas:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Winternitz&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">__init__&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">priv_key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">KEY_LEN&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">priv_seed&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">urandom&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">KEY_LEN&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">priv_key&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">priv_seed&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">gen_pubkey&lt;/span>&lt;span class="mtk1">()&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">gen_pubkey&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">pub_key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">KEY_LEN&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">hash&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">priv_key&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">])&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">BYTE_MAX&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">hash&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">pub_key&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">hash&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">sha256&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">digest&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Ahora, cada elemento de la lista de claves privadas es un valor aleatorio de 32 bytes. Entonces, cada elemento de la clave pública es el &lt;em>hash&lt;/em> $\mathrm{SHA256}^{(256)}$ de cada elemento de la lista de claves privadas. Nuevamente, no es fácil encontrar las claves privadas a partir de las claves públicas.&lt;/p></description></item></channel></rss>