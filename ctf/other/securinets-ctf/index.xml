<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Securinets CTF on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/other/securinets-ctf/</link><description>Recent content in Securinets CTF on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/other/securinets-ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Farfour Post Quantom</title><link>https://7rocky.github.io/ctf/other/securinets-ctf/farfour-post-quantom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/securinets-ctf/farfour-post-quantom/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import hashlib from os import urandom from random import SystemRandom from sympy import GF from sympy.polys.matrices import DomainMatrix import json from hashlib import md5 random=SystemRandom() shuffle=random.shuffle randint=random.randint randrange=random.randrange uniform = lambda: randrange(257//2) - 257//2 P=GF(257) secret=open("Secret.txt",'rb').read() assert len(secret)==16 flag=open("flag.txt","rb").read() def encrypt_flag(secret): key = hashlib.sha256(secret).digest()[-16:] iv = urandom(16) cipher = AES.new(key, AES.MODE_CBC, iv) enc_flag=cipher.</description></item><item><title>scrambler</title><link>https://7rocky.github.io/ctf/other/securinets-ctf/scrambler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/securinets-ctf/scrambler/</guid><description>Se nos proporciona un binario de 64 bits llamado scrambler:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) También tenemos el binario de Glibc (libc.so_1.6) de la instancia remota, por lo que podemos usar pwninit para parchear el binario y usar esta librería, de manera que el exploit sea igual en local y en remoto:
$ pwninit --libc libc.so_1.6 --bin scrambler --no-template bin: scrambler libc: libc.</description></item></channel></rss>