<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack.lu CTF on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/other/hack.lu-ctf/</link><description>Recent content in Hack.lu CTF on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/other/hack.lu-ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Lucky Number</title><link>https://7rocky.github.io/ctf/other/hack.lu-ctf/lucky-number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hack.lu-ctf/lucky-number/</guid><description>Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/env python #hacklu23 Baby Crypyo Challenge import math import random from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import base64 import os def add(e): return e+(length-len(e)%length)*chr(length-len(e)%length) def remove(e): return e[0:-ord(e[-1:])] length=16 def main(): flag= os.environ["FLAG"] print("Starting Challenge") key=get_random_bytes(32) message=add(flag) iv=get_random_bytes(length) cipher=AES.new(key,AES.MODE_CBC,iv) cipher_bytes=base64.b64encode(iv+cipher.encrypt(message.encode("utf8"))) print(cipher_bytes.decode()) for l in range(0,5): A=[] print("You know the moment when you have this special number that gives you luck?</description></item><item><title>Spooky Safebox</title><link>https://7rocky.github.io/ctf/other/hack.lu-ctf/spooky-safebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hack.lu-ctf/spooky-safebox/</guid><description>Se nos proporciona el código fuente del servidor en Python. Este archivo es app.py:
#!/usr/bin/env python3 import secrets import os, sys, hmac import cryptod from proofofwork import challenge_proof_of_work FLAG = os.environ.get("FLAG", "flag{FAKE_FLAG}") if "flag" in os.environ.get("FLAG","") else "flag{FAKE_FLAG}" def main(): print("Welcome to the Spooky Safebox!") if not challenge_proof_of_work(): return kpriv, kpub = cryptod.make_keys() order = cryptod.get_order() encrypted_flag = cryptod.encrypt(kpub, FLAG) print("Here is the encrypted flag:", encrypted_flag) print("You've got 9 signatures, try to recover Satoshi's private key!</description></item></channel></rss>