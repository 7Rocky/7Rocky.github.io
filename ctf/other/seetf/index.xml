<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SEETF on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/other/seetf/</link><description>Recent content in SEETF on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/other/seetf/index.xml" rel="self" type="application/rss+xml"/><item><title>babyreeee</title><link>https://7rocky.github.io/ctf/other/seetf/babyreeee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seetf/babyreeee/</guid><description>&lt;p>Se nos proporciona un binario llamado &lt;code>chall&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">chall&lt;/span>
chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=151528987cd274999ec93665ef2d6a7678c5107b, for GNU/Linux 3.2.0, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Si lo ejecutamos, nos pregunta por la &lt;em>flag&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./chall&lt;/span>
Hello! Welcome to SEETF. Please enter the flag. 
SEE{asdf}
Flag wrong. Try again.
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Vamos a abrir el binario en Ghidra para analizar el código en C descompilado. Esta es la función &lt;code>main&lt;/code>. Puede parecer muy compleja porque hay muchas asignaciones:&lt;/p></description></item><item><title>Close Enough</title><link>https://7rocky.github.io/ctf/other/seetf/close-enough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seetf/close-enough/</guid><description>&lt;p>Se nos dice que una implementación de RSA utiliza un número primo y el siguiente número primo. Tenemos el texto cifrado:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Y también el código fuente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">from&lt;/span> &lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span> &lt;span class="mtk5">import&lt;/span> &lt;span class="mtk8">getPrime&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">bytes_to_long&lt;/span> 
&lt;span class="mtk5">from&lt;/span> &lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">PublicKey&lt;/span> &lt;span class="mtk5">import&lt;/span> &lt;span class="mtk8 mtku">RSA&lt;/span>
&lt;span class="mtk5">from&lt;/span> &lt;span class="mtk1">secret&lt;/span> &lt;span class="mtk5">import&lt;/span> &lt;span class="mtk1">flag,&lt;/span> &lt;span class="mtk1">getNextPrime&lt;/span>

&lt;span class="mtk1">p&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">getPrime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1024&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">q&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">getNextPrime(&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">n&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">p&lt;/span> &lt;span class="mtk5">*&lt;/span> &lt;span class="mtk1">q&lt;/span>
&lt;span class="mtk1">e&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">65537&lt;/span>

&lt;span class="mtk1">key&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8 mtku">RSA&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">construct&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">n&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">e&lt;/span>&lt;span class="mtk1">)).&lt;/span>&lt;span class="mtk8">export_key&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">decode&lt;/span>&lt;span class="mtk1">()&lt;/span>

&lt;span class="mtk5">with&lt;/span> &lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"key"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk4">"w"&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk5">as&lt;/span> &lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">key&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">m&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(flag.encode())&lt;/span>
&lt;span class="mtk1">c&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">m&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">e&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">n&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">f&lt;/span>&lt;span class="mtk4">"c&lt;/span> &lt;span class="mtk4">=&lt;/span> &lt;span class="mtk6">{&lt;/span>&lt;span class="mtk1">c&lt;/span>&lt;span class="mtk6">}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Nótese que no tenemos la función &lt;code>getNextPrime&lt;/code>. Además, se nos proporciona la clave pública en formato PEM:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">-----BEGIN PUBLIC KEY-----
MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBKS/xOueb8SyhYskLwm2DT 
hofceXDq73pNlu7CAwf1rTYFfYUgbiaKqkOfyTDurLOVXhWnwcmCRo9HwUUEyHG3
swXS5OoSGmHHplMv8crTLlY+/hCpEFnLSPDcnl7HI7a/oprKpCgeiZOphEiIhm8x
UQqivWqZvGzeV9EfjeaAaPlztu3nuRyfccMjqozreU20f8SNSa9wD6vKqtAgvjv3
VapvlRVHRfPvlWCr09VE8W1qzdWvk0XWnyihd+3ssCgKBXpirylAT1WWZk6d3Ryq
bh7biTpeVqzovEFZpQrm2T8Ym6TMRkbImLo9ObEOyVvP3TyUOUtalgDh1iaqHWkn
AgMBAAE=
-----END PUBLIC KEY-----
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Podemos extraer $n$ y $e$ de este archivo (aunque ya sabemos que $e = 65537$). Luego, la idea es calcular $\sqrt{n}$, ya que sabemos que $n = p \cdot q$ y $p$ y $q$ son cercanos (podemos deducir que son números primos consecutivos).&lt;/p></description></item></channel></rss>