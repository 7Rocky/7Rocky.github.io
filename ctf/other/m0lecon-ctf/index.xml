<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>m0leCon CTF on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/ctf/other/m0lecon-ctf/</link><description>Recent content in m0leCon CTF on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><atom:link href="https://7rocky.github.io/ctf/other/m0lecon-ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Sweep</title><link>https://7rocky.github.io/ctf/other/m0lecon-ctf/go-sweep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/m0lecon-ctf/go-sweep/</guid><description>Se nos proporciona un binario llamado GoSweep:
$ file GoSweep GoSweep: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, Go BuildID=E8AKvGNouZccNMS4QzKx/gv5u3Bl0aF1q0beXnu2L/ZgB_HzVs3SKcdMITee5O/W5Hg19NTpamr0Is20WCh, stripped El binario ejecuta un servidor web para jugar al buscaminas. Tenemos una buena interfaz de usuario en la URL remota:
Se trata de un binario despojado (stripped) compilado en Go, por lo que será un poco difícil realizar ingeniería inversa. Vale la pena mencionar que este reto estaba clasificado como Reversing/Web, aunque creo que cuadra más en Reversing.</description></item><item><title>Quadratic Leak</title><link>https://7rocky.github.io/ctf/other/m0lecon-ctf/quadratic-leak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/m0lecon-ctf/quadratic-leak/</guid><description>Se nos proporciona el código fuente de Python para cifrar la flag:
from Crypto.PublicKey import RSA from Crypto.Util.number import long_to_bytes, bytes_to_long flag = b'ptm{REDACTED}' flag = bytes_to_long(flag) key = RSA.generate(2048) n = key.n e = key.e p, q = key.p, key.q leak = (p**2 + q**2 - p - q)%key.n ciph = pow(flag, key.e, key.n) ciph = long_to_bytes(ciph) print(f'{n = }') print(f'{e = }') print(f'{ciph = }') print(f'{leak = }') Y tenemos la salida del script en output.</description></item></channel></rss>