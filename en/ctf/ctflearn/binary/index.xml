<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/</link><description>Recent content in Binary on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/ctflearn/binary/index.xml" rel="self" type="application/rss+xml"/><item><title>Blackbox</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/</guid><description>&lt;p>We are given a server to connect using SSH. There is a binary called &lt;code>blackbox&lt;/code> that is SGID:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-green">blackbox@ubuntu-512mb-nyc3-01&lt;/span>:&lt;span class="code-blue">~&lt;/span>$ ls -l
total 16
---x--s--x 1 root blackbox_pwn 8936 Jan 31 2019 &lt;span class="code-black code-bg-dark-yellow">blackbox&lt;/span>
-r--r----- 1 root blackbox_pwn 33 Oct 9 2017 flag.txt
&lt;span class="code-green">blackbox@ubuntu-512mb-nyc3-01&lt;/span>:&lt;span class="code-blue">~&lt;/span>$ file blackbox
blackbox: setgid executable, regular file, no read permission 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>As it can be seen, we have no read permission, so we cannot transfer the file to our machine, or decompile it, or debug it. The only thing we can do is run it:&lt;/p></description></item><item><title>Favorite Color</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/</guid><description>&lt;p>We are given a server to connect using SSH. There is a 32-bit binary called &lt;code>color&lt;/code> that is SGID:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-green">color@ubuntu-512mb-nyc3-01&lt;/span>:&lt;span class="code-blue">~&lt;/span>$ ls -l
total 20
-r--r--r-- 1 root root 714 Sep 12 2017 Makefile
-r-xr-sr-x 1 root color_pwn 7672 Sep 12 2017 &lt;span class="code-bg-dark-yellow code-black">color&lt;/span>
-r--r--r-- 1 root root 722 Sep 12 2017 color.c
-r--r----- 1 root color_pwn 24 Sep 12 2017 flag.txt
&lt;span class="code-green">color@ubuntu-512mb-nyc3-01&lt;/span>:&lt;span class="code-blue">~&lt;/span>$ file color
color: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e9a1c78d69ac7f50ffbf21b1075902cea8407db3, not stripped 
&lt;span class="code-green">color@ubuntu-512mb-nyc3-01&lt;/span>:&lt;span class="code-blue">~&lt;/span>$ checksec color
[&lt;span class="code-blue">*&lt;/span>] '/home/color/color'
 Arch: i386-32-little
 RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
 Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
 NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
 PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the C source code. Basically, what the program does is call function &lt;code>gets&lt;/code>, which is vulnerable to Buffer Overflow. Then the variable &lt;code>buf&lt;/code> is used inside a &lt;code>for&lt;/code> loop, resulting in &lt;code>good = 0&lt;/code>, because it is using XOR operations and AND operations to get a zero in &lt;code>good&lt;/code>, so that &lt;code>vuln&lt;/code> functions returns 0 and &lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code> is not executed:&lt;/p></description></item><item><title>Lazy Game Challenge</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/</guid><description>&lt;p>We are given a service that consists of a betting system. We bet a certain amount of money and we need to guess a number between 1 and 10 in less than 10 attempts. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">nc&lt;/span> thekidofarcrania.com 10001
&lt;span class="code-dark-cyan">Welcome to the Game of Luck !.&lt;/span>

&lt;span class="code-dark-red">Rules of the Game :&lt;/span>
(1) You will be Given 500$
(2) Place a Bet
(3) Guess the number what computer thinks of !
(4) computer's number changes every new time !.
(5) You have to guess a number between 1-10
(6) You have only 10 tries !.
(7) If you guess a number > 10, it still counts as a Try !
(8) Put your mind, Win the game !..
(9) If you guess within the number of tries, you win money ! 
(10) Good Luck !..

theKidOfArcrania:
 I bet you cannot get past $1000000!


Are you ready? Y/N : y

&lt;span class="code-dark-red">Money you have&lt;/span> : &lt;span class="code-dark-green">500$&lt;/span>
Place a Bet : 500

Loading : ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛ 100%
The Game is On, Good Luck !..

Make a Guess : 3

Computer's number : 7
Your Guess : 3
Sorry Wrong Guess, Try Again !. -_-

Make a Guess : 3

Computer's number : 3
Your Guess : 3
Sorry Wrong Guess, Try Again !. -_-

You made it !.
You won JACKPOT !..
You thought of what computer thought !.
Your balance has been updated !


&lt;span class="code-dark-red">Current balance&lt;/span> : &lt;span class="code-dark-green">1500$&lt;/span>
Want to play again? Y/N : n
&lt;span class="code-dark-cyan">Thank you for playing !&lt;/span>
&lt;span class="code-dark-yellow">Made by John_123&lt;/span>
&lt;span class="code-dark-red">Small mods by theKidOfArcrania&lt;/span>
&lt;span class="code-cyan">Give it a (+1) if you like !..&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>However, if we lose the game, out balance will decrease:&lt;/p></description></item><item><title>Poor Login</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>login&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the C source code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"***&lt;/span> &lt;span class="mtk4">WINBLOWS&lt;/span> &lt;span class="mtk4">LOGIN&lt;/span> &lt;span class="mtk4">*********&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>
 &lt;span class="mtk4">"1.&lt;/span> &lt;span class="mtk4">Login&lt;/span> &lt;span class="mtk4">into&lt;/span> &lt;span class="mtk4">user.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>
 &lt;span class="mtk4">"2.&lt;/span> &lt;span class="mtk4">Sign&lt;/span> &lt;span class="mtk4">out.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>
 &lt;span class="mtk4">"3.&lt;/span> &lt;span class="mtk4">Print&lt;/span> &lt;span class="mtk4">flag.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>
 &lt;span class="mtk4">"4.&lt;/span> &lt;span class="mtk4">Lock&lt;/span> &lt;span class="mtk4">user.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>
 &lt;span class="mtk4">"5.&lt;/span> &lt;span class="mtk4">Restore&lt;/span> &lt;span class="mtk4">user.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>
 &lt;span class="mtk4">"&amp;gt;&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">resp&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">resp);&lt;/span>
 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk5">!=&lt;/span> &lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk1">resp;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">creds&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">padding;&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">name[&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">admin;&lt;/span>
&lt;span class="mtk1">};&lt;/span>

&lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">creds&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">curr;&lt;/span>
&lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">creds&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">save;&lt;/span>

&lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">fake_flag;&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">buff[&lt;/span>&lt;span class="mtk6">64&lt;/span>&lt;span class="mtk1">];&lt;/span>

 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdout,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdin,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">switch&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">())&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">:&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Login&lt;/span>
 &lt;span class="mtk1">curr&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">curr));&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Username:&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(curr&lt;/span>&lt;span class="mtk5">-&amp;gt;&lt;/span>&lt;span class="mtk1">name&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(curr&lt;/span>&lt;span class="mtk5">-&amp;gt;&lt;/span>&lt;span class="mtk1">name),&lt;/span> &lt;span class="mtk1">stdin);&lt;/span>
 &lt;span class="mtk8">strtok&lt;/span>&lt;span class="mtk1">(curr&lt;/span>&lt;span class="mtk5">-&amp;gt;&lt;/span>&lt;span class="mtk1">name&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk1">curr-&amp;gt;admin&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">:&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Sign&lt;/span> &lt;span class="mtk3">out&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">!&lt;/span>&lt;span class="mtk1">curr)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span> &lt;span class="mtk4">are&lt;/span> &lt;span class="mtk4">not&lt;/span> &lt;span class="mtk4">logged&lt;/span> &lt;span class="mtk4">in!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk8">free&lt;/span>&lt;span class="mtk1">(curr);&lt;/span>
 &lt;span class="mtk1">curr&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span> &lt;span class="mtk4">have&lt;/span> &lt;span class="mtk4">been&lt;/span> &lt;span class="mtk4">successfully&lt;/span> &lt;span class="mtk4">logged&lt;/span> &lt;span class="mtk4">out."&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">:&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Print&lt;/span> &lt;span class="mtk3">flag&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(curr&lt;/span> &lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span> &lt;span class="mtk1">curr&lt;/span>&lt;span class="mtk5">-&amp;gt;&lt;/span>&lt;span class="mtk1">admin)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Here's&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">flag:"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">system&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/bin/cat&lt;/span> &lt;span class="mtk4">/flag.txt"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">!&lt;/span>&lt;span class="mtk1">fake_flag)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span> &lt;span class="mtk4">are&lt;/span> &lt;span class="mtk4">not&lt;/span> &lt;span class="mtk4">admin.&lt;/span> &lt;span class="mtk4">Would&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">like&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">create&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">new&lt;/span> &lt;span class="mtk4">flag&lt;/span> &lt;span class="mtk4">instead?"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(buff,&lt;/span> &lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(buff),&lt;/span> &lt;span class="mtk1">stdin);&lt;/span>
 &lt;span class="mtk1">fake_flag&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">strdup&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Here's&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">flag:&lt;/span> &lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">fake_flag);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">:&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Lock&lt;/span> &lt;span class="mtk3">user&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(curr&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span> &lt;span class="mtk4">are&lt;/span> &lt;span class="mtk4">not&lt;/span> &lt;span class="mtk4">logged&lt;/span> &lt;span class="mtk4">in!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"User&lt;/span> &lt;span class="mtk4">has&lt;/span> &lt;span class="mtk4">been&lt;/span> &lt;span class="mtk4">locked&lt;/span> &lt;span class="mtk4">now."&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">save&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">curr;&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">:&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Restore&lt;/span> &lt;span class="mtk3">user&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(curr&lt;/span> &lt;span class="mtk5">!=&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span> &lt;span class="mtk4">are&lt;/span> &lt;span class="mtk4">already&lt;/span> &lt;span class="mtk4">logged.&lt;/span> &lt;span class="mtk4">Sign&lt;/span> &lt;span class="mtk4">out&lt;/span> &lt;span class="mtk4">first!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(save&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"No&lt;/span> &lt;span class="mtk4">user&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">currently&lt;/span> &lt;span class="mtk4">locked!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome&lt;/span> &lt;span class="mtk4">back,&lt;/span> &lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">save-&amp;gt;name);&lt;/span>
 &lt;span class="mtk1">curr&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">save;&lt;/span>
 &lt;span class="mtk1">save&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">default&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Invalid choice"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The program has five options:&lt;/p>
&lt;ol>
&lt;li>Login as a new user&lt;/li>
&lt;li>Log out&lt;/li>
&lt;li>Print the flag or enter a fake flag&lt;/li>
&lt;li>Backup a user&lt;/li>
&lt;li>Restore backup&lt;/li>
&lt;/ol>
&lt;p>Some key things about the program:&lt;/p>
&lt;ul>
&lt;li>Users are stored on the heap because it is using &lt;code>malloc&lt;/code>&lt;/li>
&lt;li>There are two pointers to a &lt;code>struct cred&lt;/code>, which are: &lt;code>curr&lt;/code> and &lt;code>save&lt;/code>&lt;/li>
&lt;li>If we log out (2), then &lt;code>curr&lt;/code> will be released using &lt;code>free&lt;/code> and set to &lt;code>NULL&lt;/code>&lt;/li>
&lt;li>If we print the flag (3) and we are not &lt;code>admin&lt;/code>, then we can enter a &lt;code>fake_flag&lt;/code> that will be saved using &lt;code>strdup&lt;/code>&lt;/li>
&lt;li>If we print the flag (3) and we are &lt;code>admin&lt;/code>, we get the real flag&lt;/li>
&lt;li>We can backup a user stored in &lt;code>curr&lt;/code> into &lt;code>save&lt;/code> if we are authenticated&lt;/li>
&lt;li>We can restore a user from &lt;code>save&lt;/code> to &lt;code>curr&lt;/code> if we are not authenticated&lt;/li>
&lt;/ul>
&lt;p>This program is vulnerable to Use After Free, which consists of releasing an object on the heap and use it again after.&lt;/p></description></item><item><title>RIP my bof</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>server&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the C source code. Basically, what the program does is call function &lt;code>gets&lt;/code>, which is vulnerable to Buffer Overflow:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>

&lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Defined&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">a&lt;/span> &lt;span class="mtk3">separate&lt;/span> &lt;span class="mtk3">source&lt;/span> &lt;span class="mtk3">file&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">simplicity.&lt;/span>
&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">init_visualize&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk9 mtki">buff&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">visualize&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk9 mtki">buff&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">win&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">system&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/bin/cat&lt;/span> &lt;span class="mtk4">/flag.txt"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">padding[&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">buff[&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">];&lt;/span>

 &lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(buff,&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(buff));&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Zero-out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">buffer.&lt;/span>
 &lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(padding,&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">FF&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(padding));&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Mark&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">padding&lt;/span> &lt;span class="mtk3">with&lt;/span> &lt;span class="mtk3">0xff.&lt;/span> 

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Initializes&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">stack&lt;/span> &lt;span class="mtk3">visualization.&lt;/span> &lt;span class="mtk3">Don't&lt;/span> &lt;span class="mtk3">worry&lt;/span> &lt;span class="mtk3">about&lt;/span> &lt;span class="mtk3">it!&lt;/span>
 &lt;span class="mtk8">init_visualize&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Prints&lt;/span> &lt;span class="mtk3">out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">stack&lt;/span> &lt;span class="mtk3">before&lt;/span> &lt;span class="mtk3">modification&lt;/span>
 &lt;span class="mtk8">visualize&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Input&lt;/span> &lt;span class="mtk4">some&lt;/span> &lt;span class="mtk4">text:&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(buff);&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">This&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">a&lt;/span> &lt;span class="mtk3">vulnerable&lt;/span> &lt;span class="mtk3">call!&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Prints&lt;/span> &lt;span class="mtk3">out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">stack&lt;/span> &lt;span class="mtk3">after&lt;/span> &lt;span class="mtk3">modification&lt;/span>
 &lt;span class="mtk8">visualize&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdout,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdin,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The aim of the challenge is to redirect the program execution to call function &lt;code>win&lt;/code> by exploiting the Buffer Overflow vulnerability. In fact, the program is built to show the stack before and after calling &lt;code>gets&lt;/code>:&lt;/p></description></item><item><title>Shell time!</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/</guid><description>&lt;p>This challenge is the continuation of &lt;a target="_blank" href="../rip-my-bof">RIP my bof&lt;/a>. Check it our first if you have not done it yet.&lt;/p>
&lt;p>Now, the flag is stored at &lt;code>/flag2.txt&lt;/code>, so we must do something more than redirect the program execution to &lt;code>system(&amp;quot;cat /flag.txt&amp;quot;)&lt;/code>, as in &lt;a target="_blank" href="../rip-my-bof">RIP my bof&lt;/a>.&lt;/p>
&lt;p>The first thing I came up with was ret2libc. The idea is to obtain a shell by calling &lt;code>system&lt;/code> inside Glibc with &lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code> as argument.&lt;/p>
&lt;p>For that purpose, we need to bypass ASLR, because Glibc is a system library and is affected by address randomization if ASLR is enabled (likely). This can be done leaking the address of a function inside Glibc during program execution. With this information, we are able to extract the last three hexadecimal digits and search for a certain Glibc version. Once we have it, we need to figure out the offset for &lt;code>system&lt;/code> and the string &lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code>. This will be explained later in more detail.&lt;/p></description></item><item><title>Simple bof</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/</guid><description>&lt;p>We have the C source code of a binary and a remote instance to connect to. Basically, what the program does is call function &lt;code>gets&lt;/code>, which is vulnerable to Buffer Overflow, and then compare a local variable with a certain value:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>

&lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Defined&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">a&lt;/span> &lt;span class="mtk3">separate&lt;/span> &lt;span class="mtk3">source&lt;/span> &lt;span class="mtk3">file&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">simplicity.&lt;/span>
&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">init_visualize&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk9 mtki">buff&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">visualize&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk9 mtki">buff&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">safeguard&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">print_flag&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">padding[&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">buff[&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">notsecret&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">ffffff00&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">secret&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">deadbeef&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(buff,&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(buff));&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Zero-out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">buffer.&lt;/span>
 &lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(padding,&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">FF&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(padding));&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Zero-out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">padding.&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Initializes&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">stack&lt;/span> &lt;span class="mtk3">visualization.&lt;/span> &lt;span class="mtk3">Don't&lt;/span> &lt;span class="mtk3">worry&lt;/span> &lt;span class="mtk3">about&lt;/span> &lt;span class="mtk3">it!&lt;/span>
 &lt;span class="mtk8">init_visualize&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Prints&lt;/span> &lt;span class="mtk3">out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">stack&lt;/span> &lt;span class="mtk3">before&lt;/span> &lt;span class="mtk3">modification&lt;/span>
 &lt;span class="mtk8">visualize&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Input&lt;/span> &lt;span class="mtk4">some&lt;/span> &lt;span class="mtk4">text:&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(buff);&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">This&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">a&lt;/span> &lt;span class="mtk3">vulnerable&lt;/span> &lt;span class="mtk3">call!&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Prints&lt;/span> &lt;span class="mtk3">out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">stack&lt;/span> &lt;span class="mtk3">after&lt;/span> &lt;span class="mtk3">modification&lt;/span>
 &lt;span class="mtk8">visualize&lt;/span>&lt;span class="mtk1">(buff);&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Check&lt;/span> &lt;span class="mtk3">if&lt;/span> &lt;span class="mtk3">secret&lt;/span> &lt;span class="mtk3">has&lt;/span> &lt;span class="mtk3">changed.&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(secret&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">67616c66&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span> &lt;span class="mtk4">did&lt;/span> &lt;span class="mtk4">it!&lt;/span> &lt;span class="mtk4">Congratuations!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">print_flag&lt;/span>&lt;span class="mtk1">();&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Print&lt;/span> &lt;span class="mtk3">out&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">flag.&lt;/span> &lt;span class="mtk3">You&lt;/span> &lt;span class="mtk3">deserve&lt;/span> &lt;span class="mtk3">it.&lt;/span>
 &lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(notsecret&lt;/span> &lt;span class="mtk5">!=&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">ffffff00&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Uhmm...&lt;/span> &lt;span class="mtk4">maybe&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">overflowed&lt;/span> &lt;span class="mtk4">too&lt;/span> &lt;span class="mtk4">much.&lt;/span> &lt;span class="mtk4">Try&lt;/span> &lt;span class="mtk4">deleting&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">few&lt;/span> &lt;span class="mtk4">characters."&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(secret&lt;/span> &lt;span class="mtk5">!=&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">deadbeef&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Wow&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">overflowed&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">secret&lt;/span> &lt;span class="mtk4">value!&lt;/span> &lt;span class="mtk4">Now&lt;/span> &lt;span class="mtk4">try&lt;/span> &lt;span class="mtk4">controlling&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">value&lt;/span> &lt;span class="mtk4">of&lt;/span> &lt;span class="mtk4">it!"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Maybe&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">haven't&lt;/span> &lt;span class="mtk4">overflowed&lt;/span> &lt;span class="mtk4">enough&lt;/span> &lt;span class="mtk4">characters?&lt;/span> &lt;span class="mtk4">Try&lt;/span> &lt;span class="mtk4">again?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdout,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdin,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">safeguard&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The aim of the challenge is to modify the variable &lt;code>secret&lt;/code> so that it is equal to &lt;code>0x67616c66&lt;/code> and we enter in the &lt;code>if&lt;/code> clause that calls &lt;code>print_flag&lt;/code>.&lt;/p></description></item></channel></rss>