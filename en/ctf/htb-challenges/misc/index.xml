<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Misc on 7Rocky</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/</link><description>Recent content in Misc on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/misc/index.xml" rel="self" type="application/rss+xml"/><item><title>0ld is g0ld</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/0ld-is-g0ld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/0ld-is-g0ld/</guid><description>We are given a PDF file called 0ld is g0ld.pdf, but it is protected with a password.
In order to obtain the password, we can use pdf2john to extract a hash and pass it to john to perform a dictionary attack using rockyou.txt:
$ pdf2john 0ld\ is\ g0ld.pdf | tee hash 0ld is g0ld.pdf:$pdf$4*4*128*-1060*1*16*5c8f37d2a45eb64e9dbbf71ca3e86861*32*9cba5cfb1c536f1384bba7458aae3f8100000000000000000000000000000000*32*702cc7ced92b595274b7918dcb6dc74bedef6ef851b4b4b5b8c88732ba4dac0c $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) Cost 1 (revision) is 4 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status jumanji69 (0ld is g0ld.</description></item><item><title>Art</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/art/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/art/</guid><description>We are given a PNG image called art.png:
$ file art.png art.png: PNG image data, 300 x 300, 8-bit/color RGBA, non-interlaced We might think that the flag is somehow encoded in the colors that appear in the image. Actually, after a bit of research, we can find out that there is an esoteric language called npiet that encodes text in images with colors:
The examples look similar to what we have, so let&amp;rsquo;s try it:</description></item><item><title>BitsNBytes</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/bitsnbytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/bitsnbytes/</guid><description>We are given two PNG images called intercepted.png and original.png:
$ file intercepted.png intercepted.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced $ file original.png original.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced Both images look the same visually:
But they are different because their MD5 hashes do not coincide:
$ md5sum intercepted.png 88e9b5b97e4a615f1aa26d11dbcdec0d intercepted.png $ md5sum original.png 04e2562c19e680b6493b2a31d65c51e3 original.png Hence, we might think that there is some kind of steganography being used on intercepted.</description></item><item><title>Chainsmoker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/chainsmoker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/chainsmoker/</guid><description>We are given a Python script called cli.py that is intended to interact with the remote instance. Moreover, we have some Python source code that are related to Blockchain and might be running in the server.
Another file we have is bot_wallet.txt, which contains a Blockchain wallet:
LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Finally, there&amp;rsquo;s a README.txt file that says:
The flag is located at /app/flag.txt Recognition The remote server is probably running a Flask application (notice that the response status message is in capital letters, and also the Server header):</description></item><item><title>Compressor</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/compressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/compressor/</guid><description>For this challenge we are only given a remote instance to connect to:
$ nc 157.245.33.77 31001 [*] Directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv Component List: +===============+ | | | 1. Head 🤖 | | 2. Torso 🦴 | | 3. Hands 💪 | | 4. Legs 🦵 | | | +===============+ [*] Choose component: We can choose the first one, for example:
[*] Choose component: 1 [*] Sub-directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv/Head Actions: 1.</description></item><item><title>Da Vinci</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/da-vinci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/da-vinci/</guid><description>We are given three JPEG images:
monalisa.jpg: Plans.jpg: Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg: $ file monalisa.jpg monalisa.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 300x300, segment length 16, comment: "CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 92", comment: "Optimized by JPEGmini 3.9.20.0L Internal 0x8c97c7da", baseline, precision 8, 1280x1936, components 3 $ file Plans.jpg Plans.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 100x100, segment length 16, baseline, precision 8, 800x600, components 3 $ file Thepassword_is_the_small_name_of_the_actor_named_Hanks.</description></item><item><title>Emdee five for life</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/emdee-five-for-life/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/emdee-five-for-life/</guid><description>We have this website:
It seems that we need to compute the MD5 hash of the string and submit it:
$ echo -n Vzf9GeB5zAFDZ2M3oKSa | md5sum c03463878fee34e249962c4aef9af84c - But we were too slow&amp;hellip;
Hence we will need to script our solution in order to send the request as quick as possible. One important thing to keep in mind is to preserve the PHPSESSID cookie set by the server:
$ curl -I 134.</description></item><item><title>fs0ciety</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/fs0ciety/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/fs0ciety/</guid><description>We are given a ZIP file called fsociety.zip:
$ unzip -v fsociety.zip Archive: fsociety.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 729 Defl:N 186 75% 08-15-2017 17:44 e126a116 sshcreds_datacenter.txt -------- ------- --- ------- 729 186 75% 1 file We see that it is password-protected:
$ unzip fsociety.zip Archive: fsociety.zip [fsociety.zip] sshcreds_datacenter.txt password: Hence, we can try to perform a brute force attack using rockyou.</description></item><item><title>Hackerman</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/hackerman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/hackerman/</guid><description>We are given a JPEG image called hackerman.jpg:
$ file hackerman.jpg hackerman.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 960x540, components 3 Since it is a JPEG image, we can think of steganography using steghide. But it does not seem to work for the moment.
If we check the printable strings that are inside the image file, we will see a string that seems to be an MD5 hash (32 hexadecimal digits):</description></item><item><title>Insane Bolt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/insane-bolt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/insane-bolt/</guid><description>We have this game:
$ nc 206.189.125.243 30182 1. Instructions 2. Play &amp;gt; 1 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 [*] Help the 🤖 reach the 💎. 🔩 🔩 [*] You need to find the shortest route. 🔩 🔩 [*] You need to collect 500 💎 and at least 5000 🔩.</description></item><item><title>Milkshake</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/milkshake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/milkshake/</guid><description>We are given an MP3 file called Milkshake.mp3. We can take a look at the printable strings or metadata:
$ file Milkshake.mp3 Milkshake.mp3: Audio file with ID3 version 2.4.0, extended header, contains:MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo $ strings -20 Milkshake.mp3 The Neptunes Present-Clones-ADTRCK 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CCOMM 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CTPE1 Chad Hugo/Pharrell Williams !</description></item><item><title>Pusheen Loves Graphs</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/pusheen-loves-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/pusheen-loves-graphs/</guid><description>We are given a binary file called Pusheen. It we execute it, we will see a picture of a cat:
$ ./Pusheen ▐▀▄ ▄▀▌ ▄▄▄▄▄▄▄ ▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄█▒█ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▒█▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌ ▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀ If we check the printable strings inside the file, there are a lot that start with e_ (actually, they run from e_0_0 to e_66_100). We can count them like this:</description></item><item><title>Sigma Technology</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/sigma-technology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/sigma-technology/</guid><description>We are given a webpage where we can modify the color of five pixels from a dog image. We can choose the position of the pixels (x, y) and the color (RGB values) and the image has 32x32 pixels:
The robot classifies the image as some of these objects:
airplane automobile bird cat deer dog frog horse ship truck The classification is handled with a Machine Learning algorithm (using tensorflow).</description></item><item><title>The secret of a Queen</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/</guid><description>We are given an image with some weird symbols:
The name of the challenge is actually a hint, because there is a cipher used by Mary, Queen of Scots. The cipher is based in a substitution of letters by symbols using this alphabet:
If we translate every symbol on the given image to a letter, we capture the flag: HTB{THEBABINGTONPLOT}.</description></item><item><title>Tree of Danger</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/tree-of-danger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/tree-of-danger/</guid><description>We are given the Python source code that is being run by the remote instance (util.py):
#!/usr/bin/env python3.10 importast importmath fromtypingimportUnion defis_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool: matchtype(node): caseast.Constant: returnTrue caseast.List|ast.Tuple|ast.Set: returnis_sequence_safe(node) caseast.Dict: returnis_dict_safe(node) caseast.Name: returnnode.id =="math"andisinstance(node.ctx, ast.Load) caseast.UnaryOp: returnis_expression_safe(node.operand) caseast.BinOp: returnis_expression_safe(node.left) andis_expression_safe(node.right) caseast.Call: returnis_call_safe(node) caseast.Attribute: returnis_expression_safe(node.value) case_: returnFalse defis_sequence_safe(node: Union[ast.List, ast.Tuple, ast.Set]): returnall(map(is_expression_safe, node.elts)) defis_dict_safe(node: ast.Dict) -&amp;gt; bool: fork, vinzip(node.keys, node.values): ifnotis_expression_safe(k) andis_expression_safe(v): returnFalse returnTrue defis_call_safe(node: ast.Call) -&amp;gt; bool: ifnotis_expression_safe(node.func): returnFalse ifnotall(map(is_expression_safe, node.</description></item></channel></rss>