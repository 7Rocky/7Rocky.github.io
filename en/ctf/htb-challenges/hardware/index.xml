<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hardware on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/</link><description>Recent content in Hardware on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/hardware/index.xml" rel="self" type="application/rss+xml"/><item><title>Gawk</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/gawk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/gawk/</guid><description>We are told that someone needs help with a printer. We only have an IP address and a port. nmap does not show any useful information:
$ nmap -Pn -sV 167.99.207.74 -p 32108 Starting Nmap 7.93 ( https://nmap.org ) Nmap scan report for 167.99.207.74 Host is up (0.079s latency). PORT STATE SERVICE VERSION 32108/tcp open unknown Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.</description></item><item><title>Secure Digital</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/secure-digital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/secure-digital/</guid><description>We are told that someone has read the master key of a microSD card, and we are given the signal traces in a trace_captured.sal file.
Signal analysis We can use Saleae Logic 2 to analyze the traces, and we have this:
SPI If we research a bit, we will find out that microSD cards use Serial Peripheral Interface (SPI) as a communication protocol. Comparing the signals we have to the ones we see in SPI Analyzer - User Guide, we can guess that Channel 0 and Channel 1 are MISO or MOSI, Channel 2 is Enable and Channel 3 is Clock, so we can add the analyzer:</description></item><item><title>Unique</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/unique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/unique/</guid><description>We are told that a vehicle is sending the VIN (Vehicle Identificacion Number) and they saved the signal capture in a file (trace_captured.sal). We need to find the VIN.
Initial recognition We can open trace_captured.sal with Saleae Logic2:
At first, we can select &amp;ldquo;Async Serial&amp;rdquo; and test some bitrates:
As we can see, the dots don&amp;rsquo;t fit with the signal pulses. We can do some calculation to see what is the correct bitrate:</description></item><item><title>Walkie Hackie</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/walkie-hackie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/walkie-hackie/</guid><description>We are given four radiofrequency signal captures (1.complex to 4.complex) and a website to test codes:
Moreover, this is the description of the challenge:
Our agents got caught during a mission and found that the guards are using old walkie-talkies for their communication. The field team captured their transmissions. Can you interrupt their communication to help our agents escape from the guards?
Radiofrequency analysis Although there is a hint in the HTML source code of the website pointing to Universal Radio Hacker, I prefer using inspectrum.</description></item><item><title>Watch Tower</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/watch-tower/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/watch-tower/</guid><description>We are told that someone has been collecting and altering information in the network. Plus, we are given a file called tower_logs.pcapng.
Network traffic analysis If we open the PCAP file in Wireshark, we will see a lot of Modbus packets:
Modbus One thing to notice is the function code. There are three function codes involved in this trace (more information in Wikipedia):
Write Multiple Coils Read Coil Write Multiple Registers The one that looks relevant is Write Multiple Registers because there are only 2 packets with Write Multiple Coils and Read Coil packets do not seem to hold any data.</description></item></channel></rss>