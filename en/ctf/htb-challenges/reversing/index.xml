<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reversing on 7Rocky</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/</link><description>Recent content in Reversing on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>Baby RE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</guid><description>We have a binary called baby:
$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped If we run it, it asks for a key:
$ ./baby Insert key: We can introduce something and see that it is not correct:
$ ./baby Insert key: 1234 Try again later. We can make use of ltrace to see every call to external functions (functions that belong to a library as Glibc):</description></item><item><title>Find The Easy Pass</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/</guid><description>We have a 32-bit binary called EasyPass.exe which is a Windows PE file:
$ file EasyPass.exe EasyPass.exe: PE32 executable (GUI) Intel 80386, for MS Windows If we execute the binary in a Windows machine, it will a password:
Since the password is wrong, we will see a message &amp;ldquo;Wrong Password!&amp;rdquo;:
A static code analysis with Ghidra won&amp;rsquo;t be useful. Hence, let&amp;rsquo;s use a debugger like x32dbg to debug the binary.</description></item><item><title>Rebuilding</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/</guid><description>We have a binary called rebuilding:
$ file rebuilding rebuilding: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c7a145f3a4b213cf895a735e2b26adffc044c190, not stripped If we run it, it requires to use a command line argument:
$ ./rebuilding Preparing secret keys Missing required argument Let&amp;rsquo;s open it in Ghidra and decompile it. This is the main function:
undefined8 main(intargc, longargv) { int__c; size_tlength; undefined8 ret; intchecks; inti; intj; if(argc !</description></item><item><title>Snakecode</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/</guid><description>We are given a binary file called chall.pyc, so we know it is a binary compiled using Python:
$ file chall.pyc chall.pyc: python 2.7 byte-compiled First of all, we can extract the Python source code using uncompyle6. Since it is compiled with python2.7, we can use a Docker container for that purpose:
$ docker run -v "$PWD":/ctf -it python:2.7 bash root@11d1f884672f:~# cd /ctf root@11d1f884672f:/ctf# pip install uncompyle6 DEPRECATION: Python 2.</description></item><item><title>Teleport</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/</guid><description>We have a binary called teleport:
$ file teleport teleport: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1f87fe68fd7d1deaffefcf08ed2b30d660ee2d0b, stripped If we run it, it asks for a password:
$ ./teleport Missing password We can try to add it as a command line argument:
$ ./teleport asdf Something's wrong... $ ./teleport 'HTB{asdf}' Something's wrong... Using ltrace we see that the input is copied at some memory address and then there are a lot of jumps (44 calls to _setjmp):</description></item><item><title>WIDE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/</guid><description>We are given a 64-bit binary file called wide and another file called db.ex with some strings:
$ file wide wide: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=13869bb7ce2c22f474b95ba21c9d7e9ff74ecc3f, not stripped $ strings db.ex Primus people breathe variety practice Our home dimension Cheagaz scene control river importance The Ice Dimension Byenoovia fighting cast it parallel The Berserk Dimension Cloteprea facing motor unusual heavy The Hungry Dimension Maraqa stomach motion sale valuable The Water Dimension Aidor feathers stream sides gate The Bone Dimension Flaggle Alpha admin secret power hidden HOt* 0ANe If we run the binary we have this:</description></item></channel></rss>