<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reversing on 7Rocky</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/</link><description>Recent content in Reversing on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>Baby RE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</guid><description>We have a binary called baby:
$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped If we run it, it asks for a key:
$ ./baby Insert key: We can introduce something and see that it is not correct:
$ ./baby Insert key: 1234 Try again later. We can make use of ltrace to see every call to external functions (functions that belong to a library as Glibc):</description></item><item><title>Bypass</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/bypass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/bypass/</guid><description>We have a 32-bit binary called Bypass.exe which is a Windows PE file:
$ file Bypass.exe Bypass.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows If we execute the binary in a Windows machine, it will ask for username and password.
A static code analysis with Ghidra won&amp;rsquo;t be useful. Hence, let&amp;rsquo;s use a debugger like x32dbg to debug the binary. Once it is open, we see the main thread:</description></item></channel></rss>