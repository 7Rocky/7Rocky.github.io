<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reversing on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/</link><description>Recent content in Reversing on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>Alien Saboteaur</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/alien-saboteaur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/alien-saboteaur/</guid><description>&lt;p>We are given a binary file called &lt;code>vm&lt;/code> and a program called &lt;code>bin&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="code-dark-blue">*&lt;/span>
bin: data
vm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=10fb238b19d3a82b46536b51e47396525086a09c, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="setup-environment">Setup environment&lt;/h2>
&lt;p>The binary needs a recent version of Glibc in order to run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vm&lt;/span>
./vm: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./vm) 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>To solve this issue, we can run Ubuntu 22.04 in a Docker container and take the library and loader and patch the binary:&lt;/p></description></item><item><title>Anti Flag</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/anti-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/anti-flag/</guid><description>&lt;p>We have a binary called &lt;code>anti_flag&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">anti_flag&lt;/span>
anti_flag: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=b8de97bc12c627606510140e43fc13e2efffcee5, for GNU/Linux 3.2.0, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">/* WARNING: Removing unreachable block (ram,0x0010&lt;/span>&lt;span class="mtk3">1525) */&lt;/span>

&lt;span class="mtk1">undefined8 &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_1&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_2&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_3&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_4&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_5&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_6&lt;/span>&lt;span class="mtk1">) {&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">size_t&lt;/span>&lt;span class="mtk1"> sVar1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> lVar2;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> sVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strlen&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00102011);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(sVar1 &lt;/span>&lt;span class="mtk5">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> lVar2 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ptrace&lt;/span>&lt;span class="mtk1">(PTRACE_TRACEME, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, param_5, param_6, param_2);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (lVar2 &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Well done!!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"No flag for you :("&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, it is using &lt;code>ptrace&lt;/code> to see if the program is being run within a debugger or not. So we have two different behaviors:&lt;/p></description></item><item><title>Baby Crypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-crypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-crypt/</guid><description>&lt;p>We have a binary called &lt;code>baby_crypt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">baby_crypt&lt;/span>
baby_crypt: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=24af7e68eab982022ea63c1828813c3bfa671b51, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">key;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> i;&lt;/span>
&lt;span class="mtk1"> undefined8 local_38;&lt;/span>
&lt;span class="mtk1"> undefined8 local_30;&lt;/span>
&lt;span class="mtk1"> undefined8 local_28;&lt;/span>
&lt;span class="mtk1"> undefined2 local_20;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Give me the key and I&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">ll give you the flag: "&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> key &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(key, &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">, stdin);&lt;/span>

&lt;span class="mtk1"> local_38 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">6f0547480c35643f&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_30 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28130304026f0446&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_28 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">5000f4358280e52&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_20 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">4d56&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1a&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(byte &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) ((&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_38 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) i) &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(byte &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) ((&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_38 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) i) &lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk1"> key[i &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">];&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%.26s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_38);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (canary &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__stack_chk_fail&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, it asks for a 3-byte key and then performs a XOR cipher. Since the expected output is the flag and we know the format (&lt;code>HTB{...}&lt;/code>), we can reverse the XOR cipher and get the expected key.&lt;/p></description></item><item><title>Baby RE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</guid><description>&lt;p>We have a binary called &lt;code>baby&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">baby&lt;/span>
baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run it, it asks for a key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./baby&lt;/span>
Insert key: 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can introduce something and see that it is not correct:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./baby&lt;/span>
Insert key:
1234
Try again later. 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can make use of &lt;code>ltrace&lt;/code> to see every call to external functions (functions that belong to a library like Glibc):&lt;/p></description></item><item><title>ChromeMiner</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/chromeminer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/chromeminer/</guid><description>&lt;p>We have a Discord scam website that looks like this:&lt;/p>
&lt;p>&lt;img alt="ChromeMiner 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Reversing-ChromeMiner-1.webp">&lt;/p>
&lt;h2 id="c-net-decompilation">C# .NET decompilation&lt;/h2>
&lt;p>If we click in &amp;ldquo;Login&amp;rdquo; we will download a Windows executable called &lt;code>DiscurdNitru.exe&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">DiscurdNitru.exe&lt;/span>
DiscurdNitru.exe: PE32+ executable (console) x86-64 Mono/.Net assembly, for MS Windows 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we analyze printable strings, we will see that the executable is compiled from C# .NET:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">strings&lt;/span> &lt;span class="mtku">DiscurdNitru.exe&lt;/span> | &lt;span class="code-dark-green">grep&lt;/span> .NET 
&lt;span class="code-red">.NET&lt;/span>Framework,Version=v4.6
&lt;span class="code-red">.NET&lt;/span> Framework 4.6
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Therefore, we can use JetBrains dotPeek to decompile the file:&lt;/p></description></item><item><title>Curse Breaker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/curse-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/curse-breaker/</guid><description>&lt;p>We are given a binary called &lt;code>breaker&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">breaker&lt;/span>
breaker: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=203d702c3e6cc789e148886f986713f7cf21e2c2, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Using Ghidra, we can read the decompiled source code in C. This is the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">size_t&lt;/span>&lt;span class="mtk1"> newline_index;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> i5;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> magic_word[&lt;/span>&lt;span class="mtk6">50&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1"> i;&lt;/span>

&lt;span class="mtk1"> magic_word._0_8_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> magic_word._8_8_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> magic_word._16_8_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> magic_word._24_8_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> magic_word._32_8_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> magic_word._40_8_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> magic_word._48_2_ &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Say the magic word: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(magic_word, &lt;/span>&lt;span class="mtk6">50&lt;/span>&lt;span class="mtk1">, stdin);&lt;/span>
&lt;span class="mtk1"> newline_index &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strcspn&lt;/span>&lt;span class="mtk1">(magic_word, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> magic_word[newline_index] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">install_filter&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> i5 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) (i &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (magic_word[i5] &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">syscall&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">258&lt;/span>&lt;span class="mtk1">, (ulong) i, (ulong) (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) magic_word[i5], (ulong) (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) magic_word[i5 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">], (ulong) (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) magic_word[i5 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">], (ulong) (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) magic_word[i5 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">], (ulong) (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) magic_word[i5 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">]);&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Free at last!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, the program asks for a magic word, then calls &lt;code>install_filter&lt;/code> and finally executes weird &lt;code>syscall&lt;/code> instructions.&lt;/p></description></item><item><title>Eat the Cake!</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/eat-the-cake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/eat-the-cake/</guid><description>&lt;p>We have a Windows PE called &lt;code>cake.exe&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">cake.exe&lt;/span>
cake.exe: PE32 executable (console) Intel 80386, for MS Windows, UPX compressed 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompression">Decompression&lt;/h2>
&lt;p>As can be seen, it is compressed with UPX, so let&amp;rsquo;s decompress it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">upx&lt;/span> -d &lt;span class="mtku">cake.exe&lt;/span>
 Ultimate Packer for eXecutables
 Copyright (C) 1996 - 2023
UPX 4.0.2 Markus Oberhumer, Laszlo Molnar &amp; John Reiser Jan 30th 2023 

 File size Ratio Format Name
 -------------------- ------ ----------- -----------
 15872 &amp;lt;- 9216 58.06% win32/pe cake.exe

Unpacked 1 file.

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">cake.exe&lt;/span>
cake.exe: PE32 executable (console) Intel 80386, for MS Windows
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>Let&amp;rsquo;s open it in Ghidra and decompile it. The &lt;code>entry&lt;/code> function does not give any hint on what to look:&lt;/p></description></item><item><title>Encryption Bot</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/encryption-bot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/encryption-bot/</guid><description>&lt;p>We have a binary called &lt;code>chall&lt;/code> and the output &lt;code>flag.enc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">chall&lt;/span>
chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=581371f680358611dc4e8d77b03858bd4c780174, for GNU/Linux 3.2.0, stripped 

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">cat&lt;/span> &lt;span class="mtku">flag.enc&lt;/span>
9W8TLp4k7t0vJW7n3VvMCpWq9WzT3C8pZ9Wz

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">xxd&lt;/span> &lt;span class="mtku">flag.enc&lt;/span>
00000000: 3957 3854 4c70 346b 3774 3076 4a57 376e 9W8TLp4k7t0vJW7n
00000010: 3356 764d 4370 5771 3957 7a54 3343 3870 3VvMCpWq9WzT3C8p
00000020: 5a39 577a Z9Wz
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function (renamed from &lt;code>FUN_0010163e&lt;/code>, since the binary is stripped):&lt;/p></description></item><item><title>Find The Easy Pass</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/</guid><description>&lt;p>We have a 32-bit binary called &lt;code>EasyPass.exe&lt;/code> which is a Windows PE file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">EasyPass.exe&lt;/span>
EasyPass.exe: PE32 executable (GUI) Intel 80386, for MS Windows 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute the binary in a Windows machine, it will a password:&lt;/p>
&lt;p>&lt;img alt="Find The Easy Pass 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Reversing-Find-The-Easy-Pass-1.webp">&lt;/p>
&lt;p>Since the password is wrong, we will see a message &amp;ldquo;Wrong Password!&amp;rdquo;:&lt;/p>
&lt;p>&lt;img alt="Find The Easy Pass 2" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Reversing-Find-The-Easy-Pass-2.webp">&lt;/p>
&lt;p>A static code analysis with Ghidra won&amp;rsquo;t be useful. Hence, let&amp;rsquo;s use a debugger like x32dbg to debug the binary. Once it is open, we can search for the previous error string:&lt;/p></description></item><item><title>FlagCasino</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/flagcasino/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/flagcasino/</guid><description>&lt;p>We have a binary called &lt;code>casino&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">casino&lt;/span>
casino: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7618b017ef4299337610a90a0a6ccb7f9efc44a4, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">undefined8 &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">{&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> iVar1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> local_d;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1"> local_c;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"[ ** WELCOME TO ROBO CASINO **]"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">" , ,&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> (&lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4">____/)&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> (_oo_)&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> (O)&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> __||__ &lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4">)&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> []/______&lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4">[] /&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> / &lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4">______/ &lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4">/&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"> / /__&lt;/span>&lt;span class="mtk6">\\\n&lt;/span>&lt;span class="mtk4">(&lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4"> /&lt;/span> 
&lt;span class=""> &lt;/span>&lt;span class="mtk4">____&lt;/span>&lt;span class="mtk6">\\\n&lt;/span>&lt;span class="mtk4">---------------------"&lt;/span>
&lt;span class="mtk1"> );&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"[*** PLEASE PLACE YOUR BETS ***]"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> local_c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1">( &lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1"> ) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1d&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> local_c) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"[ ** HOUSE BALANCE $0 - PLEASE COME BACK LATER **&lt;/span>&lt;span class="mtk4"> ]"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> iVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001020fc,&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_d);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (iVar1 &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">srand&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">)local_d);&lt;/span>
&lt;span class="mtk1"> iVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">rand&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (iVar1 &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)(check &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">)(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">)local_c &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"[ * INCORRECT * ]"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"[ *** ACTIVATING SECURITY SYSTEM - PLEASE VACATE &lt;/span>&lt;span class="mtk4">*** ]"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"[ * CORRECT *]"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> local_c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> local_c &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Although it is a simple code, let&amp;rsquo;s rename and retype some variables to make the code easier to read:&lt;/p></description></item><item><title>Headache</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/headache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/headache/</guid><description>&lt;p>We have a binary called &lt;code>headache&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">headache&lt;/span>
headache: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="basic-reconnaissance">Basic reconnaissance&lt;/h2>
&lt;p>When we run it, it starts writing &lt;code>Initialising&lt;/code> and after some seconds, we are asked to enter a key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./headache&lt;/span>
Initialising.....
Enter the key: asdf 
Login Failed!
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Let&amp;rsquo;s debug a bit using GDB. Once we are prompted to enter the key, we can hit &lt;code>^C&lt;/code> and set a breakpoint after the &lt;code>read&lt;/code> instruction:&lt;/p></description></item><item><title>Hissss</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hissss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hissss/</guid><description>&lt;p>We have a binary called &lt;code>auth&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">auth&lt;/span>
auth: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=3507aa01d32c34dc8e8c6462b764adb90a82768d, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>If we look at the strings of the binary, we will find a lot of references to Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">strings&lt;/span> &lt;span class="mtku">auth&lt;/span> | &lt;span class="code-dark-green">grep&lt;/span> python
b_asyncio.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_bisect.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_blake2.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_bz2.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_codecs_cn.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_codecs_hk.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_codecs_iso2022.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_codecs_jp.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_codecs_kr.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_codecs_tw.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_contextvars.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_csv.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_ctypes.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_datetime.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_decimal.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_hashlib.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_heapq.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_lzma.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_md5.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_multibytecodec.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_multiprocessing.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_opcode.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_pickle.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_posixshmem.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_posixsubprocess.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_queue.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_random.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_sha1.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_sha256.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_sha3.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_sha512.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_socket.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_ssl.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
b_struct.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
barray.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bbinascii.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bgrp.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
blib&lt;span class="code-red">python&lt;/span>3.8.so.1.0
bmath.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bmmap.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bpyexpat.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
breadline.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bresource.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bselect.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
btermios.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bunicodedata.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
bzlib.c&lt;span class="code-red">python&lt;/span>-38-x86_64-linux-gnu.so
xinclude/&lt;span class="code-red">python&lt;/span>3.8/pyconfig.h
xlib/&lt;span class="code-red">python&lt;/span>3.8/config-3.8-x86_64-linux-gnu/Makefile 
&amp;lib&lt;span class="code-red">python&lt;/span>3.8.so.1.0
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Therefore, this binary is compiled from Python. Usually, the way to extract Python code is using &lt;a target="_blank" href="https://github.com/extremecoders-re/pyinstxtractor/">pyinstxtractor&lt;/a> to obtain bytecode and then &lt;a target="_blank" href="https://pypi.org/project/uncompyle6/">&lt;code>uncompyle6&lt;/code>&lt;/a> to get the source code. However, this time &lt;a target="_blank" href="https://pypi.org/project/uncompyle6/">&lt;code>uncompyle6&lt;/code>&lt;/a> was not successful.&lt;/p></description></item><item><title>Hunting License</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hunting-license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hunting-license/</guid><description>&lt;p>We have a binary called &lt;code>license&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">license&lt;/span>
license: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=5be88c3ed329c1570ab807b55c1875d429a581a7, for GNU/Linux 3.2.0, not stripped 

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ldd&lt;/span> &lt;span class="mtku">license&lt;/span>
	linux-vdso.so.1 (0x00007ffe18bb1000)
	libreadline.so.8 => /lib/x86_64-linux-gnu/libreadline.so.8 (0x00007f430a30a000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f430a118000)
	libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007f430a0e8000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f430a366000)
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> cVar1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> iVar2;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"So, you want to be a relic hunter?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"First, you&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">re going to need your license, and for that you ne&lt;/span>&lt;span class="mtk4">ed to pass the exam."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"It&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s short, but it&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s not for the faint of heart. Are you up to the ch&lt;/span>&lt;span class="mtk4">allenge?! (y/n)"&lt;/span>&lt;span class="mtk1">);&lt;/span> 

&lt;span class="mtk1"> iVar2 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> cVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">) iVar2;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (((cVar1 &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'y'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (cVar1 &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'Y'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (cVar1 &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Not many are..."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exam&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Well done hunter - consider yourself certified!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>As can be seen, we need to enter &lt;code>y&lt;/code> and then the program calls &lt;code>exam&lt;/code>:&lt;/p></description></item><item><title>Impossible Password</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/impossible-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/impossible-password/</guid><description>&lt;p>We have a binary called &lt;code>impossible_password.bin&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">impossible_password.bin&lt;/span>
impossible_password.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ba116ba1912a8c3779ddeb579404e2fdf34b1568, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="dynamic-analysis">Dynamic analysis&lt;/h2>
&lt;p>If we run it, it waits for user input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./impossible_password.bin&lt;/span> 
* asdf
[asdf]
&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="strings">Strings&lt;/h3>
&lt;p>Using &lt;code>strings&lt;/code> to how printable characters of the binary we can see &lt;code>SuperSeKretKey&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">strings&lt;/span> &lt;span class="mtku">impossible_password.bin&lt;/span>
/lib64/ld-linux-x86-64.so.2
libc.so.6
exit
srand
__isoc99_scanf
time
putchar
printf
malloc
strcmp
__libc_start_main
__gmon_start__
GLIBC_2.7
GLIBC_2.2.5
UH-x
UH-x
=1
[]A\A]A^A_
SuperSeKretKey
%20s
[%s]
;*3$"
GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-11) 
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got
.got.plt
.data
.bss
.comment
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we provide this key, we get another user input:&lt;/p></description></item><item><title>IRCware</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ircware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ircware/</guid><description>&lt;p>We have a binary called &lt;code>ircware&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">ircware&lt;/span>
ircware: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="basic-analysis">Basic analysis&lt;/h2>
&lt;p>If we open it in Ghidra straight away, the decompiled C code will be very difficult to understand because the binary is stripped (there are not symbols). Instead, we can try to execute it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./ircware&lt;/span>
EXCEPTION! ABORT 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Well, nothing useful. With &lt;code>ltrace&lt;/code> we can log all external function calls:&lt;/p></description></item><item><title>Ouija</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ouija/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ouija/</guid><description>&lt;p>We are given a binary file called &lt;code>ouija&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">ouija&lt;/span>
ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=53a9e0435f7c7041c557e9d4a8418cb6a916f339, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this decompiled &lt;code>main&lt;/code> function in C:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> undefined8 local_78;&lt;/span>
&lt;span class="mtk1"> undefined8 local_70;&lt;/span>
&lt;span class="mtk1"> undefined8 local_68;&lt;/span>
&lt;span class="mtk1"> undefined4 local_60;&lt;/span>
&lt;span class="mtk1"> undefined2 local_5c;&lt;/span>
&lt;span class="mtk1"> undefined local_5a;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> key_copy;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> r;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> m;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> o;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> n;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> q;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> p;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> l;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> k;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> j;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> i;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> local_78 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">6877644b7b544c5a&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_70 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">665f6b615f796661&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_68 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">6b6d7874675f6c67&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_60 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">616c7375&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_5c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">6667&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_5a &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">7d&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> enc_flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strdup&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_78);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Retrieving key."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1e&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> key_copy &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> key;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Hmm, I don&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">t like that one. Let&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s pick a new one."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (j &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; j &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1e&lt;/span>&lt;span class="mtk1">; j &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> j &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (j &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> key_copy &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> key_copy &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Yes, 18 will do nicely."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (k &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; k &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">14&lt;/span>&lt;span class="mtk1">; k &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> k &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (k &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Let&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s get ready to start. This might take a while!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (l &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; l &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">; l &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> l &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (l &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (; &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">; enc_flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> enc_flag &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> ((&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'a'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">||&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk4">'z'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag)) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> ((&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'A'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">||&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk4">'Z'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag)) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"We can leave this one alone."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (m &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; m &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">; m &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> m &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (m &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"This one&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s an uppercase letter!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (n &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; n &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">14&lt;/span>&lt;span class="mtk1">; n &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> n &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (n &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> key_copy &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">41&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Wrapping it round..."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (o &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; o &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">; o &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> o &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (o &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\x1a&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">) key_copy;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"This one&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s a lowercase letter"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (p &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; p &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">14&lt;/span>&lt;span class="mtk1">; p &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> p &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (p &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> key_copy &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">61&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Wrapping it round..."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (q &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; q &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">; q &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> q &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (q &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\x1a&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">) key_copy;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Okay, let&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s write down this letter! This is a pretty complex&lt;/span>&lt;span class="mtk4"> operation, you might want to check back later."&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (r &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">; r &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">300&lt;/span>&lt;span class="mtk1">; r &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> r &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (r &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4"> "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">" done!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%c\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, (ulong) (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">enc_flag);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">re still here?"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The program will take this string:&lt;/p></description></item><item><title>Potion Master</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/potion-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/potion-master/</guid><description>&lt;p>We are given a Haskell script called &lt;code>potion.hs&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">import&lt;/span> Data.Char (&lt;span class="mtk8">ord&lt;/span>)
&lt;span class="mtk5">import&lt;/span> Data.Bits (&lt;span class="mtk8">xor&lt;/span>)

&lt;span class="mtk3">-- Complete the incantation...&lt;/span>
flag &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk4">"HTB{XXX}"&lt;/span>

&lt;span class="mtk8">extractFlag&lt;/span> &lt;span class="mtk5">::&lt;/span> &lt;span class="mtk7">String&lt;/span> &lt;span class="mtk5">-&amp;gt;&lt;/span> &lt;span class="mtk7">String&lt;/span>
extractFlag (s&lt;span class="mtk5">:&lt;/span>rest)
 &lt;span class="mtk5">|&lt;/span> s &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'H'&lt;/span> &lt;span class="mtk5">||&lt;/span> s &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'T'&lt;/span> &lt;span class="mtk5">||&lt;/span> s &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'B'&lt;/span>
 &lt;span class="mtk5">=&lt;/span> extractFlag rest
 &lt;span class="mtk5">|&lt;/span> s &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'{'&lt;/span> &lt;span class="mtk5">&amp;&amp;&lt;/span> last rest &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'}'&lt;/span>
 &lt;span class="mtk5">=&lt;/span> init rest
 &lt;span class="mtk5">|&lt;/span> otherwise &lt;span class="mtk5">=&lt;/span> error (&lt;span class="mtk4">"Invalid format"&lt;/span>)

&lt;span class="mtk8">chunks&lt;/span> &lt;span class="mtk5">::&lt;/span> &lt;span class="mtk7">Int&lt;/span> &lt;span class="mtk5">-&amp;gt;&lt;/span> [a] &lt;span class="mtk5">-&amp;gt;&lt;/span> [[a]]
chunks n l
 &lt;span class="mtk5">|&lt;/span> n &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span> &lt;span class="mtk5">=&lt;/span> []
 &lt;span class="mtk5">|&lt;/span> n &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">1&lt;/span> &lt;span class="mtk5">=&lt;/span> [[x] &lt;span class="mtk5">|&lt;/span> x &lt;span class="mtk5">&amp;lt;-&lt;/span> l]
 &lt;span class="mtk5">|&lt;/span> length l &lt;span class="mtk5">&amp;lt;=&lt;/span> n &lt;span class="mtk5">=&lt;/span> [l]
 &lt;span class="mtk5">|&lt;/span> otherwise &lt;span class="mtk5">=&lt;/span> [take n l] &lt;span class="mtk5">++&lt;/span> (chunks n (drop n l))

&lt;span class="mtk8">takeLast&lt;/span> &lt;span class="mtk5">::&lt;/span> &lt;span class="mtk7">Int&lt;/span> &lt;span class="mtk5">-&amp;gt;&lt;/span> [a] &lt;span class="mtk5">-&amp;gt;&lt;/span> [a]
takeLast n &lt;span class="mtk5">=&lt;/span> reverse &lt;span class="mtk5">.&lt;/span> take n &lt;span class="mtk5">.&lt;/span> reverse

a &lt;span class="mtk5">=&lt;/span> [&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">43&lt;/span>, &lt;span class="mtk6">61&lt;/span>, &lt;span class="mtk6">58&lt;/span>, &lt;span class="mtk6">5&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">4&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">11&lt;/span>, &lt;span class="mtk6">64&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">40&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">43&lt;/span>, &lt;span class="mtk6">61&lt;/span>, &lt;span class="mtk6">62&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">51&lt;/span>, &lt;span class="mtk6">46&lt;/span>, &lt;span class="mtk6">15&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">49&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">44&lt;/span>, &lt;span class="mtk6">47&lt;/span>, &lt;span class="mtk6">4&lt;/span>, &lt;span class="mtk6">6&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">7&lt;/span>, &lt;span class="mtk6">47&lt;/span>, &lt;span class="mtk6">7&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">59&lt;/span>, &lt;span class="mtk6">52&lt;/span>, &lt;span class="mtk6">17&lt;/span>, &lt;span class="mtk6">11&lt;/span>, -&lt;span class="mtk6">56&lt;/span>, &lt;span class="mtk6">61&lt;/span>, -&lt;span class="mtk6">74&lt;/span>, &lt;span class="mtk6">52&lt;/span>, &lt;span class="mtk6">63&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">21&lt;/span>, &lt;span class="mtk6">53&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">17&lt;/span>, &lt;span class="mtk6">66&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">10&lt;/span>, &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">58&lt;/span>, &lt;span class="mtk6">0&lt;/span>] 
b &lt;span class="mtk5">=&lt;/span> [&lt;span class="mtk6">6&lt;/span>, &lt;span class="mtk6">106&lt;/span>, &lt;span class="mtk6">10&lt;/span>, &lt;span class="mtk6">0&lt;/span>, &lt;span class="mtk6">119&lt;/span>, &lt;span class="mtk6">52&lt;/span>, &lt;span class="mtk6">51&lt;/span>, &lt;span class="mtk6">101&lt;/span>, &lt;span class="mtk6">0&lt;/span>, &lt;span class="mtk6">0&lt;/span>, &lt;span class="mtk6">15&lt;/span>, &lt;span class="mtk6">48&lt;/span>, &lt;span class="mtk6">116&lt;/span>, &lt;span class="mtk6">22&lt;/span>, &lt;span class="mtk6">10&lt;/span>, &lt;span class="mtk6">58&lt;/span>, &lt;span class="mtk6">93&lt;/span>, &lt;span class="mtk6">59&lt;/span>, &lt;span class="mtk6">106&lt;/span>, &lt;span class="mtk6">43&lt;/span>, &lt;span class="mtk6">30&lt;/span>, &lt;span class="mtk6">47&lt;/span>, &lt;span class="mtk6">93&lt;/span>, &lt;span class="mtk6">62&lt;/span>, &lt;span class="mtk6">97&lt;/span>, &lt;span class="mtk6">63&lt;/span>]
c &lt;span class="mtk5">=&lt;/span> [&lt;span class="mtk6">304&lt;/span>, &lt;span class="mtk6">357&lt;/span>, &lt;span class="mtk6">303&lt;/span>, &lt;span class="mtk6">320&lt;/span>, &lt;span class="mtk6">304&lt;/span>, &lt;span class="mtk6">307&lt;/span>, &lt;span class="mtk6">349&lt;/span>, &lt;span class="mtk6">305&lt;/span>, &lt;span class="mtk6">257&lt;/span>, &lt;span class="mtk6">337&lt;/span>, &lt;span class="mtk6">340&lt;/span>, &lt;span class="mtk6">309&lt;/span>, &lt;span class="mtk6">396&lt;/span>, &lt;span class="mtk6">333&lt;/span>, &lt;span class="mtk6">320&lt;/span>, &lt;span class="mtk6">380&lt;/span>, &lt;span class="mtk6">362&lt;/span>, &lt;span class="mtk6">368&lt;/span>, &lt;span class="mtk6">286&lt;/span>]
d &lt;span class="mtk5">=&lt;/span> [&lt;span class="mtk6">52&lt;/span>, &lt;span class="mtk6">52&lt;/span>, &lt;span class="mtk6">95&lt;/span>, &lt;span class="mtk6">95&lt;/span>, &lt;span class="mtk6">110&lt;/span>, &lt;span class="mtk6">49&lt;/span>, &lt;span class="mtk6">51&lt;/span>, &lt;span class="mtk6">51&lt;/span>, &lt;span class="mtk6">95&lt;/span>, &lt;span class="mtk6">110&lt;/span>, &lt;span class="mtk6">110&lt;/span>, &lt;span class="mtk6">53&lt;/span>, &lt;span class="mtk6">116&lt;/span>, &lt;span class="mtk6">51&lt;/span>, &lt;span class="mtk6">98&lt;/span>, &lt;span class="mtk6">63&lt;/span>]

&lt;span class="mtk8">checkFlag&lt;/span> &lt;span class="mtk5">::&lt;/span> &lt;span class="mtk7">String&lt;/span> &lt;span class="mtk5">-&amp;gt;&lt;/span> &lt;span class="mtk7">Bool&lt;/span>
checkFlag flag &lt;span class="mtk5">=&lt;/span>
 length content &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">76&lt;/span> &lt;span class="mtk5">&amp;&amp;&lt;/span>
 all (&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk6">True&lt;/span>) (map (&lt;span class="mtk5">\&lt;/span> (l,r) &lt;span class="mtk5">-&amp;gt;&lt;/span> l &lt;span class="mtk5">==&lt;/span> r) (zip one a)) &lt;span class="mtk5">&amp;&amp;&lt;/span>
 all (&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk6">True&lt;/span>) (map (&lt;span class="mtk5">\&lt;/span> (l,r) &lt;span class="mtk5">-&amp;gt;&lt;/span> l &lt;span class="mtk5">==&lt;/span> r) (zip two b)) &lt;span class="mtk5">&amp;&amp;&lt;/span>
 all (&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk6">True&lt;/span>) (map (&lt;span class="mtk5">\&lt;/span> (l,r) &lt;span class="mtk5">-&amp;gt;&lt;/span> l &lt;span class="mtk5">==&lt;/span> r) (zip three c)) &lt;span class="mtk5">&amp;&amp;&lt;/span>
 all (&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk6">True&lt;/span>) (map (&lt;span class="mtk5">\&lt;/span> (l,r) &lt;span class="mtk5">-&amp;gt;&lt;/span> l &lt;span class="mtk5">==&lt;/span> r) (zip four d))
 &lt;span class="mtk5">where&lt;/span> content &lt;span class="mtk5">=&lt;/span> map ord (extractFlag flag)
 one &lt;span class="mtk5">=&lt;/span> map (&lt;span class="mtk5">\&lt;/span> [l, r] &lt;span class="mtk5">-&amp;gt;&lt;/span> (l &lt;span class="mtk5">-&lt;/span> r)) (chunks &lt;span class="mtk6">2&lt;/span> content)
 two &lt;span class="mtk5">=&lt;/span> map (foldr xor &lt;span class="mtk6">0&lt;/span>) (chunks &lt;span class="mtk6">3&lt;/span> content)
 three &lt;span class="mtk5">=&lt;/span> map (foldr (+) &lt;span class="mtk6">0&lt;/span>) (chunks &lt;span class="mtk6">4&lt;/span> content)
 four &lt;span class="mtk5">=&lt;/span> map head (chunks &lt;span class="mtk6">5&lt;/span> content)

main &lt;span class="mtk5">=&lt;/span> putStrLn (&lt;span class="mtk5">if&lt;/span> (checkFlag flag)
 &lt;span class="mtk5">then&lt;/span> &lt;span class="mtk4">"The spell went off without a hitch!"&lt;/span>
 &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk4">"You disappear in a puff of smoke!"&lt;/span>
 )
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="running-haskell">Running Haskell&lt;/h2>
&lt;p>Haskell is a programming language for functional programming. I have never used Haskell, so let&amp;rsquo;s start by running the official Docker image of Haskell and run the above script:&lt;/p></description></item><item><title>Ransom</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ransom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ransom/</guid><description>&lt;p>We have a Windows PE called &lt;code>windows_update.exe&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">windows_update.exe&lt;/span>
windows_update.exe: PE32+ executable (console) x86-64, for MS Windows 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, there is another file that looks encrypted from &lt;code>login.xlsx&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">login.xlsx.enc&lt;/span> 
login.xlsx.enc: data
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>If we open the Windows PE in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> __cdecl &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">_Argc&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk9 mtki">_Argv&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk9 mtki">_Env&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">filename;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__main&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (_Argc &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> filename &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"C:&lt;/span>&lt;span class="mtk6">\\&lt;/span>&lt;span class="mtk4">Users"&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (_Argc &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> filename &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> _Argv[&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Usage: &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> &amp;lt;filename&amp;gt;&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">_Argv);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ftw&lt;/span>&lt;span class="mtk1">(filename, (_func_int_char_ptr_stat_ptr_int &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">list, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span> 

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It is calling &lt;code>ftw&lt;/code>:&lt;/p></description></item><item><title>Rebuilding</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/</guid><description>&lt;p>We have a binary called &lt;code>rebuilding&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">rebuilding&lt;/span>
rebuilding: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c7a145f3a4b213cf895a735e2b26adffc044c190, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run it, it requires to use a command line argument:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./rebuilding&lt;/span>
Preparing secret keys
Missing required argument 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Let&amp;rsquo;s open it in Ghidra and decompile it. This is the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">undefined8 &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">argc&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">argv&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> __c;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">size_t&lt;/span>&lt;span class="mtk1"> length;&lt;/span>
&lt;span class="mtk1"> undefined8 ret;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> checks;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> i;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> j;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (argc &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Missing required argument"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> checks &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strlen&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk1">) (argv &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">));&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (length &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\r&lt;/span>&lt;span class="mtk4">Calculating"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (j &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; j &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">; j &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> j &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (j &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> __c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">2e&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> __c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">20&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">putchar&lt;/span>&lt;span class="mtk1">(__c);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
&lt;span class="mtk1"> checks &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> checks &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1">) ((byte) (encrypted[i] &lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk1"> key[i &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">]) &lt;/span>&lt;span class="mtk5">==&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(byte &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) ((&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) i &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (argv &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">)));&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">usleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">200000&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (checks &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"The password is correct"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"The password is incorrect"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">ffffffff&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Password length is incorrect"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">ffffffff&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> ret;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>First thing to notice is that the argument must be 32 bytes long, let&amp;rsquo;s verify it:&lt;/p></description></item><item><title>RiseFromTheDead</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/risefromthedead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/risefromthedead/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>rise&lt;/code> and also a core file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="code-blue">*&lt;/span>
core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './rise flag', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: './rise', platform: 'x86_64'
rise: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8341bf2064b7903b6e87d69c63a1849338d3f1e6, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The core file corresponds to an execution of &lt;code>rise&lt;/code> (actually, the command was &lt;code>./rise flag&lt;/code>).&lt;/p></description></item><item><title>Secured Transfer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/secured-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/secured-transfer/</guid><description>&lt;p>We are given a binary file called &lt;code>securetransfer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">securetransfer&lt;/span>
securetransfer: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0457997eda987eb100de85a2954fc8b8fc660a53, for GNU/Linux 3.2.0, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have a network capture file called &lt;code>trace.pcap&lt;/code>.&lt;/p>
&lt;h2 id="traffic-analysis">Traffic analysis&lt;/h2>
&lt;p>Starting with &lt;code>trace.pcap&lt;/code>, we can use Wireshark to analyze the network capture file:&lt;/p>
&lt;p>&lt;img alt="Secured Transfer 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Reversing-Secured-Transfer-1.webp">&lt;/p>
&lt;p>There is only one TCP segment that has data:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">17275a3d9163b2798392813bf5e6826657bd11426076c910a38b68c2bcbbd3a5 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>We can use Ghidra to read the decompiled source code in C. This is the &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Sekure Decrypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/sekure-decrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/sekure-decrypt/</guid><description>&lt;p>We are given a binary called &lt;code>dec&lt;/code>, the C source code (&lt;code>src.c&lt;/code>) and a core file (&lt;code>core&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">dec&lt;/span>
dec: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=daf03fccbc32333244dc0f36e874e27457110af1, for GNU/Linux 3.2.0, with debug_info, not stripped 

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">core&lt;/span>
core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './dec', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: './dec', platform: 'x86_64'
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>Since we have the source code, let&amp;rsquo;s analyze it:&lt;/p></description></item><item><title>Shattered Tablet</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/shattered-tablet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/shattered-tablet/</guid><description>&lt;p>We have a binary called &lt;code>tablet&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">tablet&lt;/span>
tablet: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=71ad3ff9f7e5fbf0edc75446337a0a68deb7ecd6, for GNU/Linux 3.2.0, not stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">/* WARNING: Could not reconcile some variable over&lt;/span>&lt;span class="mtk3">laps */&lt;/span>

&lt;span class="mtk1">undefined8 &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">{&lt;/span>
&lt;span class="mtk1"> undefined8 local_48;&lt;/span>
&lt;span class="mtk1"> undefined8 local_40;&lt;/span>
&lt;span class="mtk1"> undefined8 local_38;&lt;/span>
&lt;span class="mtk1"> undefined8 local_30;&lt;/span>
&lt;span class="mtk1"> undefined8 local_28;&lt;/span>
&lt;span class="mtk1"> undefined8 local_20;&lt;/span>
&lt;span class="mtk1"> undefined8 local_18;&lt;/span>
&lt;span class="mtk1"> undefined8 local_10;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> local_48 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_40 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_38 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_30 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_28 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_20 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_18 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_10 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Hmmmm... I think the tablet says: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_48,&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">40&lt;/span>&lt;span class="mtk1">,stdin);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (((((local_28._2_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'4'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_38._4_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_28._4_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'r'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((((local_48._1_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'T'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_38._5_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'v'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((local_48._6_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'0'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> ((local_28._7_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'}'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_28._6_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">)))))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (local_30._7_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'r'&lt;/span>&lt;span class="mtk1">)))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((((((local_30._5_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> ((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)local_40 &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_38._6_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((local_28._3_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'1'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_48._5_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'r'&lt;/span>&lt;span class="mtk1">)))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)local_48 &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'H'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)local_28 &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_38._2_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">)))))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (((((local_40._5_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'4'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (((((local_48._3_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'{'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_40._2_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'_'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> ((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)local_38 &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((local_48._4_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'b'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_48._7_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'k'&lt;/span>&lt;span class="mtk1">)))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_40._7_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'t'&lt;/span>&lt;span class="mtk1">)))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (((local_40._6_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'r'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_38._3_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((local_30._1_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'t'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (((local_38._1_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'.'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_40._1_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_30._6_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'_'&lt;/span>&lt;span class="mtk1">)))))))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span> 
&lt;span class="mtk1"> (((local_30._2_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'0'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> ((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)local_30 &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'_'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_40._4_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'p'&lt;/span>&lt;span class="mtk1">)))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((((local_38._7_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'r'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_30._4_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'b'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> ((local_28._1_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'p'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (((local_48._2_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'B'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_30._3_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'_'&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (local_40._3_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'4'&lt;/span>&lt;span class="mtk1">)))))) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="mtk1"> (local_28._5_1_ &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">)))))))) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Yes! That&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s right!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"No... not that"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It looks a bit strange, but we can tell Ghidra that &lt;code>local_48&lt;/code> is actually of type &lt;code>char[64]&lt;/code> and rename the variable to &lt;code>data&lt;/code> (also, format a bit the code):&lt;/p></description></item><item><title>Snakecode</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/</guid><description>&lt;p>We are given a binary file called &lt;code>chall.pyc&lt;/code>, so we know it is a binary compiled using Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">chall.pyc&lt;/span>
chall.pyc: python 2.7 byte-compiled 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>First of all, we can extract the Python source code using &lt;code>uncompyle6&lt;/code>. Since it is compiled with &lt;code>python2.7&lt;/code>, we can use a Docker container for that purpose:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">docker&lt;/span> run -v &lt;span class="code-dark-yellow">"&lt;span class="code-dark-cyan">$PWD&lt;/span>"&lt;/span>:/ctf -it python:2.7 bash
root@11d1f884672f:~# cd /ctf
root@11d1f884672f:/ctf# pip install uncompyle6
&lt;span class="code-dark-yellow">DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support&lt;/span> 
Collecting uncompyle6
 Downloading uncompyle6-3.8.0-py2-none-any.whl (317 kB)
 |████████████████████████████████| 317 kB 3.6 MB/s
Collecting spark-parser&amp;lt;1.9.0,&amp;gt;=1.8.9
 Downloading spark_parser-1.8.9-py2-none-any.whl (17 kB)
Collecting xdis&amp;lt;6.1.0,&amp;gt;=6.0.2
 Downloading xdis-6.0.3-py2-none-any.whl (137 kB)
 |████████████████████████████████| 137 kB 9.8 MB/s
Collecting click
 Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)
 |████████████████████████████████| 82 kB 1.5 MB/s
Installing collected packages: click, spark-parser, xdis, uncompyle6
Successfully installed click-7.1.2 spark-parser-1.8.9 uncompyle6-3.8.0 xdis-6.0.3
&lt;span class="code-dark-yellow">WARNING: You are using pip version 20.0.2; however, version 20.3.4 is available.&lt;/span>
&lt;span class="code-dark-yellow">You should consider upgrading via the '/usr/local/bin/python -m pip install --upgrade pip' command.&lt;/span>
root@11d1f884672f:/ctf# uncompyle6 chall.pyc &amp;gt; chall.py
root@11d1f884672f:/ctf# cat chall.py
&lt;/code>&lt;/pre>&lt;/div>

&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">uncompyle6&lt;/span> &lt;span class="mtk3">version&lt;/span> &lt;span class="mtk3">3.8.0&lt;/span>
&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">Python&lt;/span> &lt;span class="mtk3">bytecode&lt;/span> &lt;span class="mtk3">2.7&lt;/span> &lt;span class="mtk3">(62211)&lt;/span>
&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">Decompiled&lt;/span> &lt;span class="mtk3">from:&lt;/span> &lt;span class="mtk3">Python&lt;/span> &lt;span class="mtk3">2.7.18&lt;/span> &lt;span class="mtk3">(default,&lt;/span> &lt;span class="mtk3">Apr&lt;/span> &lt;span class="mtk3">21&lt;/span> &lt;span class="mtk3">2020,&lt;/span> &lt;span class="mtk3">09:53:40)&lt;/span>
&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">[GCC&lt;/span> &lt;span class="mtk3">8.3.0]&lt;/span>
&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">Warning:&lt;/span> &lt;span class="mtk3">this&lt;/span> &lt;span class="mtk3">version&lt;/span> &lt;span class="mtk3">of&lt;/span> &lt;span class="mtk3">Python&lt;/span> &lt;span class="mtk3">has&lt;/span> &lt;span class="mtk3">problems&lt;/span> &lt;span class="mtk3">handling&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">Python&lt;/span> &lt;span class="mtk3">3&lt;/span> &lt;span class="mtk3">byte&lt;/span> &lt;span class="mtk3">type&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">constants&lt;/span> &lt;span class="mtk3">properly.&lt;/span>

&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">Embedded&lt;/span> &lt;span class="mtk3">file&lt;/span> &lt;span class="mtk3">name:&lt;/span> &lt;span class="mtk3">./snake_obf.py&lt;/span>
&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">Compiled&lt;/span> &lt;span class="mtk3">at:&lt;/span> &lt;span class="mtk3">2022-01-17&lt;/span> &lt;span class="mtk3">22:16:46&lt;/span>
&lt;span class="mtk5">import&lt;/span> &lt;span class="mtk8 mtku">marshal&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8 mtku">types&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8 mtku">time&lt;/span>
&lt;span class="mtk1">ll&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8 mtku">types&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">FunctionType&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">marshal&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">loads&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk4">'YwEAAAABAAAABQAAAEMAAABzNAAAAHQAAGoBAHQCAGoDAHQEA&lt;/span>&lt;span class="mtk4">GQBAIMBAGoFAHwAAGoGAGQCAIMB&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">AIMBAIMBAHQHAIMAAIMCAFMoAwAAAE50BAAAAHpsaWJ0BgAAAG&lt;/span>&lt;span class="mtk4">Jhc2U2NCgIAAAAdAUAAAB0eXBl&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">c3QMAAAARnVuY3Rpb25UeXBldAcAAABtYXJzaGFsdAUAAABsb2&lt;/span>&lt;span class="mtk4">Fkc3QKAAAAX19pbXBvcnRfX3QK&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">AAAAZGVjb21wcmVzc3QGAAAAZGVjb2RldAcAAABnbG9iYWxzKA&lt;/span>&lt;span class="mtk4">EAAAB0AQAAAHMoAAAAACgAAAAA&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">cwcAAAA8c3RkaW4+dAoAAABsb2FkTGFtYmRhAQAAAHQAAAAA&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">).decode(&lt;/span>&lt;span class="mtk4">'base64'&lt;/span>&lt;span class="mtk1">)),&lt;/span> &lt;span class="mtk8">globals&lt;/span>&lt;span class="mtk1">())&lt;/span> 
&lt;span class="mtk1">i0&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5JFiXkp+&lt;/span>&lt;span class="mtk4">bkajCB5kKL4+Mzcgvyikvh4DZAB&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">CKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGAC+nBJh&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">i1&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5LJpUXFq&lt;/span>&lt;span class="mtk4">cUajCB5kKL4+Mzcgvyikvh4DZAB&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">CKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGADEORJ1&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f0&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYABhJiB2BuJiXiBRw8CQxcCQwsjQzMgQrAGS8ssEE&lt;/span>&lt;span class="mtk4">gwaIJUl7CAiMzc1v7QEIsAMJMoz&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">8zTASkBEMUiJTXFJSmaeXQkHiJ2TmJuUkmgHVg5SAQBjWRD5&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f1&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYIBhZyAu5gISNQwMWQwMzQwMwRogcT8wWcIKJNJTS&lt;/span>&lt;span class="mtk4">5IzIFxmIFGemacBpBjARDE7kLAp&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">LknJzLMr4QCxcxJzk1IS7cDKQSoAvuUPJw==&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f2&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJx1kL1uwkAQhOfOBsxPQZUmL+DOEnWUBghEQQbFIESVglUkY&lt;/span>&lt;span class="mtk4">5ECX+lHoMz7Jrt7HCgSOWlGO/rm&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">1tbtIwBBY1b9zdYYkEFlcRqiAQoWxaginDJhjcUBijNQy+O24j&lt;/span>&lt;span class="mtk4">xgfzsHdTxOFB8DtoqPoK7HPcXn&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">gCPFZ1BfcUGsdMA/lpc/fEqeUBq21Mp0L0rv/3grX/f5aELlbr&lt;/span>&lt;span class="mtk4">yVYzbXZnub7j42K5dcxslym7vu&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Jby/zubrK1pMX9apPLOTraReqe9T3SlWd9ieakfl17OTb36OpF&lt;/span>&lt;span class="mtk4">E/CDQDE5vHv7K/FKBNmA==&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f3&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxVj00KAjEMhV+b8Q9040IZT9C9WxHEvRvBC1iFUhhk2sUII&lt;/span>&lt;span class="mtk4">wgexLWn1KQzI9qSl/DlhaZHDSDj&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">II4tR3ix1IBVyK1GXitImt/0l1JDSSih1rAZfIZyI4x9BRIkeK&lt;/span>&lt;span class="mtk4">A8SLeF1Dl9clIHG+c9OakdZ35O&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">T/o+yiciZI2Hgvpt702Pt925Nx/HFZwSGbIYqaL87FS5aKSIgi&lt;/span>&lt;span class="mtk4">5JbZR/F1WTrkZmk4QByypE64p1&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">ap6X4g8LaaoZ3zFGfzFVE/UBTuovhA==&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f4&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJw1zDsKgEAMBNCJilb2drZ7AEuxsbfxBOIHFFkWNqWdF3eyY&lt;/span>&lt;span class="mtk4">JEXkgxZcwB/jazYkkdwUeAVCAcV&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">W3F4MjTt7ISZyWVUS7KEsPtN7cW9e2ddLeKTIXk7gkSsSB91O/&lt;/span>&lt;span class="mtk4">2g9uToLBELO0otH2W6Ez8=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f5&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxdjr0OwjAMhM9J+as6M7HTF0AsiKV7F54ACJUKVaiSjOnEi&lt;/span>&lt;span class="mtk4">2MbISQGf4rtu3OuMwBSBVfDFQdG&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">BhzwMAgNMsER1s58+wJ3Hlm4Ai/z33YGE+A1IrNljnBBtiLYT1&lt;/span>&lt;span class="mtk4">ZSf2sr6lMt19u+ZPYQkGDJqA0j&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">ycfap7+lBT/C2bveJ/UkEQ7KqByTGMbPKNQSpojiPMTEzqNKup&lt;/span>&lt;span class="mtk4">2aKlnShramopJW5g2ipyUM&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f6&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxdjTEOglAQRB98iMbEKxhLbkBjaLSwsrHWBEUJCRKULTT5V&lt;/span>&lt;span class="mtk4">Fzc3W9nMS+zk93ZqwNS1UK1VQ17&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">RQ0CVcQUsTvljO4vWjEmSIRP8A4PXn3MlHKOea4DlxyzWMsOjX&lt;/span>&lt;span class="mtk4">UHK/bpVXb1TWy855kF2gN9SPo2&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">DD9+At8Zdm4YZorNIFXTFTI335aPS1UWtie28QV3xx4p&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f7&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxtjz8LwjAQxV/S1mrRxcnZKat/qyAuOrv0E4ilIJRS2hsUC&lt;/span>&lt;span class="mtk4">g7OfmcvubZTIe/97nKPcHkEADpd&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">WPWPjYCGj0Kj0fjIfHwVqiWIbzxbJ6SHEleQ1yf8ocQHFLSJqg&lt;/span>&lt;span class="mtk4">KN+nTYVUUEGndNCiRG8UY3M7F7&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">abb7TrAS7AVrQSw4CDaCreBo7CfJPvdy/nZeummZuyY3bHBWh2&lt;/span>&lt;span class="mtk4">ynmtJncXaRLLaJem6HaqGiVlMV&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">6Zn+Azn/L1k=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">f8&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJwljr0KAkEMhCf3o2hrIb7BlWIhFiKC1jYWViKHe+qKnHob0&lt;/span>&lt;span class="mtk4">GKt7sVNcsV8ZDeTSc45gJ5oINqI&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">wkkQgTvQAvRdgwmO0BK2xxl+uTUTxBwugUtxT8EZIiHKZ4o21d&lt;/span>&lt;span class="mtk4">ZE7FLRe4yD+nMLixlchvG+0KU7&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">PxR6EVjhSVDoKazt86MqG6uasr5WrI3SucCNbJPEp685keIy57&lt;/span>&lt;span class="mtk4">6aqktThVs3r0kf48s8r4c9Ogaj&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">L3SnIej8MrDz9aqLXJhPzwMNaURT4R/aUC0X&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a1&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcWwNIMGiAmGB+D&lt;/span>&lt;span class="mtk4">oQPIorZgYRNcUlKZp5dCQeInZOY&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">m5SSaAdWDFIBALI0C1U=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a2&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcWQNIMGiAmGB+D&lt;/span>&lt;span class="mtk4">oQPIorZgYRNcUlKZp5dCQeInZOY&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">m5SSaAdWDFIBALBMC00=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a3&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJw10EtLw0AUBeAzTWLqo74bML8gSyFdiotm40rEZF+kRyVtC&lt;/span>&lt;span class="mtk4">GKmqzar/nHvHBDmfty5c+fBrB2A&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">iUVuUVkMG4MOnIARGIMJeAKm4BQ8Bc9UsfwcvABn/5VL8Aq81t&lt;/span>&lt;span class="mtk4">INeAveKb/Hd47R4WDDTp5j7hEm&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">R4fsoS4yu+7Vh1e8yEYu5V7WciffZCl/5UpW8l162cuF3Mq1fJ&lt;/span>&lt;span class="mtk4">SUY5uYhTZFRvfZF+EvfOCnU89X&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">gdATGFLjafBs+2e1fJShY4jDomvcH1q4K9U=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a4&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcRQNIMGiAmGB+D&lt;/span>&lt;span class="mtk4">oQPIorZgYRNcUlKZp5dCQeInZOY&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">m5SSaAdWDFIBALCJC04=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a5&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxNzTELwjAQBeCXS4r6TzKJP6DUgruLq0s1S7BKIRkqJP/dd&lt;/span>&lt;span class="mtk4">3Hp8D4ex3H3NAA6xjEXJo2kAHeH&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">alAF1aI6FINg8BIsZxTZdM5lM2/95i2PXCNBPBCvzeubLOR4yv&lt;/span>&lt;span class="mtk4">p2bX6bS3P+LyppR/qUQ/wMea99&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">nt6PMA26l/SKxQ/XGxky&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a6&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJwlzLsKwkAQheF/L0afw2qr4AOENOnT2NpEgyDGENgtFHbfP&lt;/span>&lt;span class="mtk4">TNrcT6G4cw8DHCQeMkgiWchw81T&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">DMVSHMWTDdnytGTHu+Ea9G4MAkHPkxXaS9L1t/qrbtXlX1TiUe&lt;/span>&lt;span class="mtk4">himl9rn046L9PnPk+99qJ+cewN&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">xxM9&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a7&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJwlzLEKwjAQxvF/rhF9jk6Zig8gXdy7uLq0FqFYRUiGFpJ39&lt;/span>&lt;span class="mtk4">y4O34/j+O4eDjhovOaqia2S4e4p&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">jiKUhuLJjiw8hex5Cbdgd0NQCHaeROnOydZbda9+q+u/aMSjco&lt;/span>&lt;span class="mtk4">lpXj59Otm8ju9pHnvrRfvS8AMM&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">qhM6&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a8&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYABhJiB2BuJiPiBRw8CQwsgglsLEkM3EEKzBDBTyy&lt;/span>&lt;span class="mtk4">2QFkplAzKABJkCaSkBEjgZcsJgd&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">SNgUl6Rk5tmVcIDYOYm5SSmJdmDFIBUAVDAM/Q==&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">a9&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcQQNIMGiAmGB+D&lt;/span>&lt;span class="mtk4">oQPIorZgYRNcUlKZp5dCQeInZOY&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">m5SSaAdWDFIBAK+VC0o=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">m0&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJw1jTELwjAUhC9Jq/0VzhldBAfr4u7i6mYpFFSKCXRJp/7x3&lt;/span>&lt;span class="mtk4">rsi5L5Avnsvrx0AS8PcmNQSGSg8&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">DsWjBJQKS42nxwzMQSog09b/gsrs9AGP6LjhHr3tMfSn7TpH+y&lt;/span>&lt;span class="mtk4">ebfYtJHGXH7eknTpGAkPbEJeVu&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">+F5V/Bw1Wpl0B7cCYGsZOw==&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">m1&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJw1zUEKAjEMBdCfdMQreIRuRwU3Mhv3bjzCDAOCitCAm7rqx&lt;/span>&lt;span class="mtk4">U1+cZGX0v408wbAvy5e5eQYUAUm&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">qAnNHdASvsJLhSVUBpryoPG6Km5ZfPaah/hBnXXf29jbsbdDjl&lt;/span>&lt;span class="mtk4">0W2Tdd6IN+6JwdkLJ1zsWW+2vi&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">/HOMRIklkJ38AF2QGOk=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">m2&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">ll&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'eJxNjj8LAjEMxV96fz+Fk0NHdT5c3F1cD5c7BEHlsAWXdrov7&lt;/span>&lt;span class="mtk4">kuKICS/0LyXpFMP4JcnZrgSEUgM&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">QXJIDVKLtcHokAWZKvsVUm0eGjr1rC3GCplBW/03Xpy2hM5bj4&lt;/span>&lt;span class="mtk4">sXnjh7p4cUz30pO6+fiKouxtn6&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">y8MehcH4MU7GtydgCB0xhDjfX8ey8mAzrYqyka18AW5IIKw=&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span> &lt;span class="mtk8">snake&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">w&lt;/span>&lt;span class="mtk1">):&lt;/span>
 &lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">i0&lt;/span>&lt;span class="mtk1">()&lt;/span>
 &lt;span class="mtk1">c&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">i1&lt;/span>&lt;span class="mtk1">()&lt;/span>
 &lt;span class="mtk1">f0&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">w&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk1">d&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk1">p&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">[(&lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">)]&lt;/span>
 &lt;span class="mtk1">pl&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">1&lt;/span>
 &lt;span class="mtk1">s&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>
 &lt;span class="mtk1">l&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">None&lt;/span>
 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">d&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">pl&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">l&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">s&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk9 mtki">w&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">c&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">m2&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">d&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">pl&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">l&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">s&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk9 mtki">w&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">c&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">r&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk8 mtku">time&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0.4&lt;/span>&lt;span class="mtk1">)&lt;/span>

 &lt;span class="mtk5">return&lt;/span>


&lt;span class="mtk1">i1&lt;/span>&lt;span class="mtk1">().wrapper(&lt;/span>&lt;span class="mtk8">snake&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk3">#&lt;/span> &lt;span class="mtk3">okay&lt;/span> &lt;span class="mtk3">decompiling&lt;/span> &lt;span class="mtk3">chall.pyc&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Ok, it is a bit obfuscated with &lt;code>marshal&lt;/code>&amp;hellip; Let&amp;rsquo;s run the script and see what we have:&lt;/p></description></item><item><title>SpellBrewery</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/spellbrewery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/spellbrewery/</guid><description>&lt;p>We are given the following files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="code-dark-blue">*&lt;/span>
SpellBrewery: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=0ee68cb419f7329a3bd027c947654385d416143a, not stripped 
SpellBrewery.deps.json: JSON data
SpellBrewery.dll: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows
SpellBrewery.runtimeconfig.json: JSON data
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>There is an ELF binary and a Windows DLL. If we look at the strings of the binary, we will see that it loads the DLL:&lt;/p></description></item><item><title>Tear or Dear</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/tear-or-dear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/tear-or-dear/</guid><description>&lt;p>We have a Windows PE file called &lt;code>TearOrDear.exe&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">TearOrDear.exe&lt;/span>
TearOrDear.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute it on a Windows machine, we will see this window form:&lt;/p>
&lt;p>&lt;img alt="Tear or Dear 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Reversing-Tear-or-Dear-1.webp">&lt;/p>
&lt;h2 id="c-net-decompilation">C# .NET decompilation&lt;/h2>
&lt;p>Since it is compiled from C# .NET, we can use tools like JetBrains dotPeek, &lt;a target="_blank" href="https://github.com/dnSpy/dnSpy">dnSpy&lt;/a> or &lt;a target="_blank" href="https://github.com/icsharpcode/ILSpy">ILSpy&lt;/a> to decompile the executable and get almost the original C# source code.&lt;/p>
&lt;p>This time, the code is really ugly (I&amp;rsquo;ll leave it here, but it&amp;rsquo;s not necessary to understand everything):&lt;/p></description></item><item><title>Teleport</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/</guid><description>&lt;p>We have a binary called &lt;code>teleport&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">teleport&lt;/span>
teleport: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1f87fe68fd7d1deaffefcf08ed2b30d660ee2d0b, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run it, it asks for a password:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./teleport&lt;/span>
Missing password 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can try to add it as a command line argument:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./teleport&lt;/span> asdf
Something's wrong...

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./teleport&lt;/span> &lt;span class="code-dark-yellow">'HTB{asdf}'&lt;/span> 
Something's wrong...
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Using &lt;code>ltrace&lt;/code> we see that the input is copied at some memory address and then there are a lot of jumps (44 calls to &lt;code>_setjmp&lt;/code>):&lt;/p></description></item><item><title>The Vault</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/the-vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/the-vault/</guid><description>&lt;p>We are given a binary called &lt;code>vault&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">vault&lt;/span>
vault: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 4.4.0, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="decompilation">Decompilation&lt;/h2>
&lt;p>Let&amp;rsquo;s open it in Ghidra and decompile it. This is the &lt;code>entry&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> processEntry &lt;/span>&lt;span class="mtk8">entry&lt;/span>&lt;span class="mtk1">(undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_1&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> undefined auStack_8[&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">];&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__libc_start_main&lt;/span>&lt;span class="mtk1">(FUN_0010c450, param_2, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">stack0x00000008, FUN_0010d460, FUN_0010d4d0, param&lt;/span>&lt;span class="mtk1">_1, auStack_8);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">do&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">// WARNING: Do nothing block with infinite loop&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>So, the &amp;ldquo;main&amp;rdquo; function is &lt;code>FUN_0010c450&lt;/code> (the function name is its address because the binary is stripped), which just calls another one:&lt;/p></description></item><item><title>Up a Stream</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/up-a-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/up-a-stream/</guid><description>&lt;p>We have a JAR file called &lt;code>stream.jar&lt;/code> and an &lt;code>output.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">cat&lt;/span> &lt;span class="mtku">output.txt&lt;/span>
b71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8O 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run the JAR file, we have a different output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">java&lt;/span> -jar &lt;span class="mtku">stream.jar&lt;/span>
3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="java-decompilation">Java decompilation&lt;/h2>
&lt;p>We will need to decompile the JAR file and obtain a readable Java source file. We can go to &lt;a target="_blank" href="http://www.javadecompilers.com">www.javadecompilers.com&lt;/a> and select CFR as decompiler. Then, we will have this source code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">/*&lt;/span>
&lt;span class="mtk3"> * Decompiled with CFR 0.150.&lt;/span>
&lt;span class="mtk3"> */&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.util.Arrays&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.util.List&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.util.stream.Collectors&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Challenge&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1">[] &lt;/span>&lt;span class="mtk9 mtki">arrstring&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> string &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"FLAG"&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> Challenge.&lt;/span>&lt;span class="mtk8">dunkTheFlag&lt;/span>&lt;span class="mtk1">(string).&lt;/span>&lt;span class="mtk8">stream&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">forEach&lt;/span>&lt;span class="mtk1">(System.out&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk1">println);&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">List&lt;/span>&lt;span class="mtk1">&amp;lt;&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1">&amp;gt; &lt;/span>&lt;span class="mtk8">dunkTheFlag&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">string3&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> Arrays.&lt;/span>&lt;span class="mtk8">asList&lt;/span>&lt;span class="mtk1">(&lt;/span>
&lt;span class="mtk1"> string3.&lt;/span>&lt;span class="mtk8">chars&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">mapToObj&lt;/span>&lt;span class="mtk1">(n &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> Character.&lt;/span>&lt;span class="mtk8">valueOf&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)n))&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">collect&lt;/span>&lt;span class="mtk1">(Collectors.&lt;/span>&lt;span class="mtk8">toList&lt;/span>&lt;span class="mtk1">())&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">stream&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">peek&lt;/span>&lt;span class="mtk1">(c &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> Challenge.&lt;/span>&lt;span class="mtk8">hydrate&lt;/span>&lt;span class="mtk1">(c))&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(c &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> c.&lt;/span>&lt;span class="mtk8">toString&lt;/span>&lt;span class="mtk1">())&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">reduce&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">, (string, string2) &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> string2 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> string)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">chars&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">mapToObj&lt;/span>&lt;span class="mtk1">(n &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> Character.&lt;/span>&lt;span class="mtk8">valueOf&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)n))&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">collect&lt;/span>&lt;span class="mtk1">(Collectors.&lt;/span>&lt;span class="mtk8">toList&lt;/span>&lt;span class="mtk1">())&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">stream&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(c &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> c.&lt;/span>&lt;span class="mtk8">toString&lt;/span>&lt;span class="mtk1">())&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">reduce&lt;/span>&lt;span class="mtk1">(String&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk1">concat)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">get&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">chars&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">mapToObj&lt;/span>&lt;span class="mtk1">(n &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> n)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">collect&lt;/span>&lt;span class="mtk1">(Collectors.&lt;/span>&lt;span class="mtk8">toList&lt;/span>&lt;span class="mtk1">())&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">stream&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(n &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> Challenge.&lt;/span>&lt;span class="mtk8">moisten&lt;/span>&lt;span class="mtk1">(n))&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(n &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">)n)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(Challenge&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk1">drench)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">peek&lt;/span>&lt;span class="mtk1">(Challenge&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk1">waterlog)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(Challenge&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk1">dilute)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">map&lt;/span>&lt;span class="mtk1">(Integer&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk1">toHexString)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">reduce&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">, (string, string2) &lt;/span>&lt;span class="mtk7 mtki">-&amp;gt;&lt;/span>&lt;span class="mtk1"> string &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> string2 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"O"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> .&lt;/span>&lt;span class="mtk8">repeat&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> );&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">hydrate&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">Character&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">c&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> c.&lt;/span>&lt;span class="mtk8">charValue&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\u&lt;/span>&lt;span class="mtk4">0001'&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">moisten&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">n&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">)(n &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">?&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">double&lt;/span>&lt;span class="mtk1">)n &lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> Math.&lt;/span>&lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(n, &lt;/span>&lt;span class="mtk6">2.0&lt;/span>&lt;span class="mtk1">));&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">drench&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">n&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> n &lt;/span>&lt;span class="mtk5">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">dilute&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">n&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> n &lt;/span>&lt;span class="mtk5">/&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> n;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">waterlog&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">Integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">n&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> n &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> ((n &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">87&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">17362&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">?&lt;/span>&lt;span class="mtk1"> n &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> n &lt;/span>&lt;span class="mtk5">/&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> n.&lt;/span>&lt;span class="mtk8">byteValue&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It is using functional programming with streams, which means that it applies a function to all the elements of the stream at once (map), or applies reduction functions (reduce).&lt;/p></description></item><item><title>WIDE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/</guid><description>&lt;p>We are given a 64-bit binary file called &lt;code>wide&lt;/code> and another file called &lt;code>db.ex&lt;/code> with some strings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">wide&lt;/span>
wide: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=13869bb7ce2c22f474b95ba21c9d7e9ff74ecc3f, not stripped 

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">strings&lt;/span> &lt;span class="mtku">db.ex&lt;/span>
Primus
people breathe variety practice
Our home dimension
Cheagaz
scene control river importance
The Ice Dimension
Byenoovia
fighting cast it parallel
The Berserk Dimension
Cloteprea
facing motor unusual heavy
The Hungry Dimension
Maraqa
stomach motion sale valuable
The Water Dimension
Aidor
feathers stream sides gate
The Bone Dimension
Flaggle Alpha
admin secret power hidden
HOt*
0ANe
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run the binary we have this:&lt;/p></description></item><item><title>You Cant C Me</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/you-cant-c-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/you-cant-c-me/</guid><description>&lt;p>We have a binary called &lt;code>auth&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">auth&lt;/span>
auth: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run it, it asks for a key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./auth&lt;/span> 
Welcome!
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can introduce something and see that it is not correct:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./baby&lt;/span>
Insert key:
asdf
I said, you can't c me! 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can make use of &lt;code>ltrace&lt;/code> to see every call to external functions (functions that belong to a library like Glibc):&lt;/p></description></item></channel></rss>