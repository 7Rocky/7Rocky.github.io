<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on 7Rocky</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/</link><description>Recent content in Web on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Amidst Us</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/</guid><description>We have the following website, that mimics the game Among Us:
There is a button to select a color with a color picker:
If we analyze the given source code, we have a Flask application (in Python). This is application/blueprints/routes.py:
from&amp;nbsp;flask&amp;nbsp;import&amp;nbsp;Blueprint,&amp;nbsp;request,&amp;nbsp;render_template,&amp;nbsp;abort from&amp;nbsp;application.util&amp;nbsp;import&amp;nbsp;make_alpha web&amp;nbsp;=&amp;nbsp;Blueprint('web',&amp;nbsp;__name__) api&amp;nbsp;=&amp;nbsp;Blueprint('api',&amp;nbsp;__name__) @web.route('/') def&amp;nbsp;index(): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;render_template('index.html') @api.route('/alphafy',&amp;nbsp;methods=['POST']) def&amp;nbsp;alphafy(): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;request.is_json&amp;nbsp;or&amp;nbsp;'image'&amp;nbsp;not&amp;nbsp;in&amp;nbsp;request.json: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;abort(400) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make_alpha(request.json) The function make_alpha is defined in application/util.py:
import&amp;nbsp;os,&amp;nbsp;base64 from&amp;nbsp;PIL&amp;nbsp;import&amp;nbsp;Image,&amp;nbsp;ImageMath from&amp;nbsp;io&amp;nbsp;import&amp;nbsp;BytesIO generate&amp;nbsp;=&amp;nbsp;lambda&amp;nbsp;x:&amp;nbsp;os.urandom(x).hex() def&amp;nbsp;make_alpha(data): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;color&amp;nbsp;=&amp;nbsp;data.get('background',&amp;nbsp;[255,255,255]) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dec_img&amp;nbsp;=&amp;nbsp;base64.b64decode(data.get('image').encode()) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image&amp;nbsp;=&amp;nbsp;Image.open(BytesIO(dec_img)).convert('RGBA') &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;img_bands&amp;nbsp;=&amp;nbsp;[band.convert('F')&amp;nbsp;for&amp;nbsp;band&amp;nbsp;in&amp;nbsp;image.split()] &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alpha&amp;nbsp;=&amp;nbsp;ImageMath.</description></item><item><title>baby CachedView</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/</guid><description>We have a Flask web application that allows us to render other websites inside it as an image:
Behind the hoods, the server is launching a Headless Chrome with selenium, accessing the site we provided and taking a screenshot to show it. Here is an example:
The objective is to reach the endpoint /flag:
@web.route('/flag') @is_from_localhost def flag(): return send_file('flag.png') However, it is protected by checking that the request is done from 127.</description></item><item><title>baby ninja jinja</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/</guid><description>We are provided with this web page:
There is an HTML comment on the index.html that points to a debugging URL (/debug):
In this /debug endpoint, the source code is found:
$ curl 157.245.33.77:31650/debug from flask import Flask, session, render_template, request, Response, render_template_string, g import functools, sqlite3, os app = Flask(__name__) app.config['SECRET_KEY'] = os.urandom(120) acc_tmpl = '''{% extends 'index.html' %} {% block content %} &amp;lt;h3&amp;gt;baby_ninja joined, total number of rebels: reb_num&amp;lt;br&amp;gt; {% endblock %} ''' def get_db(): db = getattr(g, '_database', None) if db is None: db = g.</description></item><item><title>BlinkerFluids</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/</guid><description>We have a website where we can write Markdown and transform the document to PDF:
By default, we have this Markdown content:
As we have a Node.js project, if we read package.json we can see the versions of the third-party dependencies:
{ &amp;nbsp;&amp;nbsp;"name":&amp;nbsp;"blinker-fluids", &amp;nbsp;&amp;nbsp;"version":&amp;nbsp;"1.0.0", &amp;nbsp;&amp;nbsp;"description":&amp;nbsp;"", &amp;nbsp;&amp;nbsp;"main":&amp;nbsp;"index.js", &amp;nbsp;&amp;nbsp;"scripts":&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"start":&amp;nbsp;"node&amp;nbsp;index.js" &amp;nbsp;&amp;nbsp;}, &amp;nbsp;&amp;nbsp;"keywords":&amp;nbsp;[], &amp;nbsp;&amp;nbsp;"author":&amp;nbsp;"rayhan0x01", &amp;nbsp;&amp;nbsp;"license":&amp;nbsp;"ISC", &amp;nbsp;&amp;nbsp;"dependencies":&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"express":&amp;nbsp;"4.17.3", &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"md-to-pdf":&amp;nbsp;"4.1.0", &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nunjucks":&amp;nbsp;"3.2.3", &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"sqlite-async":&amp;nbsp;"1.1.3", &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"uuid":&amp;nbsp;"8.3.2" &amp;nbsp;&amp;nbsp;}, &amp;nbsp;&amp;nbsp;"devDependencies":&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nodemon":&amp;nbsp;"^1.19.1" &amp;nbsp;&amp;nbsp;} } We notice that md-to-pdf version 4.1.0 has a critical vulnerability (snyk.</description></item><item><title>Gunship</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/</guid><description>We have a website with a nice style:
There is only one user input:
This is a Node.js application that uses pug as a template renderer (as shown in the available files from the challenge).
It also uses flat to parse JSON data, as shown in the following file called routes/index.js:
const path = require('path') const express = require('express') const pug = require('pug') const { unflatten } = require('flat') const router = express.</description></item><item><title>Intergalactic Post</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/</guid><description>We are given a PHP web application with a single functionality, that is to post an email address.
We can start by analyzing the source code. The file index.php shows that there are only two endpoints (GET and POST):
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $database = new Database('/tmp/challenge.db'); $router = new Router(); $router-&amp;gt;new('GET', '/', 'IndexController@index'); $router-&amp;gt;new('POST', '/subscribe', 'SubsController@store'); die($router-&amp;gt;match()); We can see that Database.</description></item><item><title>Mutation Lab</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/</guid><description>We are given a website like this:
We must register a new account and login to view a nice dashboard:
The only functionality we have is to export the SVG images we see as PNG files. We can capture the request with Burp Suite:
After some research, we can see that there is a vulnerability regarding SVG conversion that leads to Local File Read (more information at security.snyk.io).
We will need to use the following payload to read /etc/passwd as a PNG image:</description></item><item><title>Red Island</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/</guid><description>We are given a website like this:
We can register a new account and then login to see this functionality:
This time we don&amp;rsquo;t have the source code for the web application, so we must find a clear vulnerability or get the source code somehow.
We can start thinking of Server-Side Request Forgery (SSRF). As in other challenges, we know that the web server listens on port 1337, so let&amp;rsquo;s try and get http://127.</description></item><item><title>Slippy</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</guid><description>We have a simple web back-end that allows us to upload a .tar.gz file. As we have a Dockerfile, let&amp;rsquo;s use a Docker container locally:
On the source code we have a simple Python Flask application:
@api.route('/unslippy', methods=['POST']) def cache(): if 'file' not in request.files: return abort(400) extraction = extract_from_archive(request.files['file']) if extraction: return {'list': extraction}, 200 return '', 204 The file is being extracted and written to /tmp:
import tarfile, tempfile, os from application import main generate = lambda x: os.</description></item></channel></rss>