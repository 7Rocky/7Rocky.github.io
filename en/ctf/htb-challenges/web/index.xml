<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/</link><description>Recent content in Web on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/web/index.xml" rel="self" type="application/rss+xml"/><item><title>AbuseHumanDB</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/abusehumandb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/abusehumandb/</guid><description>We have a website that allows us to enter URL. Then a bot will access it:
Source code analysis On the source code we have an Express JS application. This is the routes/index.js file:
const bot = require('../bot') const path = require('path') const express = require('express') const router = express.Router() const response = data =&amp;gt; ({ message: data }) const isLocalhost = req =&amp;gt; (req.ip == '127.0.0.1' &amp;amp;&amp;amp; req.headers.host == '127.</description></item><item><title>Amidst Us</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/</guid><description>We have the following website, that mimics the game Among Us:
There is a button to select a color with a color picker:
If we analyze the given source code, we have a Flask application (in Python). This is application/blueprints/routes.py:
from flask import Blueprint, request, render_template, abort from application.util import make_alpha web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @api.route('/alphafy', methods=['POST']) def alphafy(): if not request.</description></item><item><title>baby auth</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-auth/</guid><description>We are provided with this webpage:
First, we can register a new account (asdf as username):
And we are told that we are not admin. In fact, the authentication is handled with session cookies:
The session cookie looks encoded in Base64, so let&amp;rsquo;s try to decode it (beware of URL encoding):
$ echo eyJ1c2VybmFtZSI6ImFzZGYifQ== | base64 -d {"username":"asdf"} It shows our username, so maybe we can modify the cookie and get access as admin:</description></item><item><title>baby BoneChewerCon</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-bonechewercon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-bonechewercon/</guid><description>We are provided with this webpage:
At the bottom of the page we have a text input. Let&amp;rsquo;s enter something and submit.
It shows an error in the Laravel debugger (a PHP framework):
This is a bad practice and a security issue, since debuggers might contain sensitive information and most of them provide ways to execute code.
Flag Indeed, we can find the flag in an environment variable named APP_KEY:</description></item><item><title>baby breaking grad</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-breaking-grad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-breaking-grad/</guid><description>We are provided with this webpage:
Let&amp;rsquo;s click in the button:
Source code analysis Alright, since we are provided with source code, let&amp;rsquo;s take a look. It is a Node.js project using Express JS. This is index.js:
const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const routes = require('./routes'); const path = require('path'); app.use(bodyParser.json()); app.set('views','./views'); app.use('/static', express.static(path.resolve('static'))); app.use(routes); app.all('*', (req, res) =&amp;gt; { return res.status(404).send('404 page not found'); }); app.</description></item><item><title>baby CachedView</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/</guid><description>We have a Flask web application that allows us to render other websites inside it as an image:
Behind the hoods, the server is launching a Headless Chrome with selenium, accessing the site we provided and taking a screenshot to show it. Here is an example:
The objective is to reach the endpoint /flag:
@web.route('/flag') @is_from_localhost def flag(): return send_file('flag.png') However, it is protected by checking that the request is done from 127.</description></item><item><title>baby interdimensional internet</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-interdimensional-internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-interdimensional-internet/</guid><description>We are provided with this webpage:
If we look into the HTML source code, we see /debug:
And there we can find the source code of the web application:
from flask import Flask, Response, request, render_template, request from random import choice, randint from string import lowercase from functools import wraps app = Flask(__name__) def calc(recipe): global garage garage = {} try: exec(recipe, garage) except: pass def GCR(func): # Great Calculator of the observable universe and it's infinite timelines @wraps(func) def federation(*args, **kwargs): ingredient = ''.</description></item><item><title>baby nginxatsu</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-nginxatsu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-nginxatsu/</guid><description>We are provided with this webpage:
After registering an account and logging in, we have this feature:
Basically, we can create nginx configuration files.
nginx exploitation Notice that the location field is /storage. Let&amp;rsquo;s create the default configuration and see what we have:
We have this configuration:
user www; pid /run/nginx.pid; error_log /dev/stderr info; events { worker_connections 1024; } http { server_tokens off; charset utf-8; keepalive_timeout 20s; sendfile on; tcp_nopush on; client_max_body_size 2M; include /etc/nginx/mime.</description></item><item><title>baby ninja jinja</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/</guid><description>We are provided with this web page:
There is an HTML comment on the index.html that points to a debugging URL (/debug):
In this /debug endpoint, the source code is found:
$ curl 157.245.33.77:31650/debug from flask import Flask, session, render_template, request, Response, render_template_string, g import functools, sqlite3, os app = Flask(__name__) app.config['SECRET_KEY'] = os.urandom(120) acc_tmpl = '''{% extends 'index.html' %} {% block content %} &amp;lt;h3&amp;gt;baby_ninja joined, total number of rebels: reb_num&amp;lt;br&amp;gt; {% endblock %} ''' def get_db(): db = getattr(g, '_database', None) if db is None: db = g.</description></item><item><title>baby todo or not todo</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-todo-or-not-todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-todo-or-not-todo/</guid><description>We are provided with this webpage:
Source code analysis We are also provided with the source code, which is a Flask application (Python). This is application/app.py:
from flask import Flask, session, g from flask.json import JSONEncoder from application.blueprints.routes import main, api from application.util import generate from application.database import get_db from application.models import todo import time class toJSON(JSONEncoder): def default(self, obj): if isinstance(obj, todo): return { 'id' : obj.id, 'name' : obj.</description></item><item><title>baby WAFfles order</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-waffles-order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-waffles-order/</guid><description>We are provided with this webpage:
Static code analysis We also have the PHP source code. This is index.php:
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } include_once "${name}.php"; }); $router = new Router(); $router-&amp;gt;new('GET', '/', fn($router) =&amp;gt; $router-&amp;gt;view('menu')); $router-&amp;gt;new('POST', '/api/order', 'OrderController@order'); die($router-&amp;gt;match()); Here we only see two routes. The one that is most interesting is the one handled by OrderController.php:
&amp;lt;?php class OrderController { public function order($router) { $body = file_get_contents('php://input'); if ($_SERVER['HTTP_CONTENT_TYPE'] === 'application/json') { $order = json_decode($body); if (!</description></item><item><title>baby website rick</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-website-rick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-website-rick/</guid><description>We are provided with this webpage:
Analyzing the website This time, we don&amp;rsquo;t have any source code to analyze. However, the above image shows something suspicious:
&lt;__main__.anti_pickle_serum object at 0x7f0ed62d1810> This looks like a Python class:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; class Test(): ... pass ... &amp;gt;&amp;gt;&amp;gt; Test() &amp;lt;__main__.Test object at 0x1007fbd30&amp;gt; Moreover, we have a cookie named plan_b:
This looks like a Base64-encoded string:
&amp;gt;&amp;gt;&amp;gt; from base64 import b64encode as b64e, b64decode as b64d &amp;gt;&amp;gt;&amp;gt; b64d('KGRwMApTJ3NlcnVtJwpwMQpjY29weV9yZWcKX3JlY29uc3RydWN0b3IKcDIKKGNfX21haW5fXwphbnRpX3BpY2tsZV9zZXJ1bQpwMwpjX19idWlsdGluX18Kb2JqZWN0CnA0Ck50cDUKUnA2CnMu') b"</description></item><item><title>BatchCraft Potions</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/batchcraft-potions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/batchcraft-potions/</guid><description>We are given this website:
Static code analysis We are provided with the JavaScript source code of the web application, built with Node.js and Express JS. This is index.js:
const express = require('express'); const app = express(); const path = require('path'); const cookieParser = require('cookie-parser'); const nunjucks = require('nunjucks'); const routes = require('./routes'); const Database = require('./database'); global.db = new Database(); app.use(express.json()); app.use(cookieParser()); nunjucks.configure('views', { autoescape: true, express: app }); app.</description></item><item><title>BlinkerFluids</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/</guid><description>We have a website where we can write Markdown and transform the document to PDF:
By default, we have this Markdown content:
As we have a Node.js project, if we read package.json we can see the versions of the third-party dependencies:
{ "name": "blinker-fluids", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "node index.js" }, "keywords": [], "author": "rayhan0x01", "license": "ISC", "dependencies": { "express": "4.17.3", "md-to-pdf": "4.1.0", "nunjucks": "3.2.3", "</description></item><item><title>CurlAsAService</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/curlasaservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/curlasaservice/</guid><description>We are provided with this webpage, which allows us to execute curl:
Source code analysis We also have the PHP source code. This is index.php:
&amp;lt;?php date_default_timezone_set('UTC'); spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $router = new Router(); $router-&amp;gt;new('GET', '/', 'CurlController@index'); $router-&amp;gt;new('POST', '/api/curl', 'CurlController@execute' ); $response = $router-&amp;gt;match(); die($response); Here we only see two routes. The one that is most interesting is handled by CurlController.</description></item><item><title>Cursed Secret Party</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/cursed-secret-party/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/cursed-secret-party/</guid><description>We are given this website:
Static code analysis We are provided with the JavaScript source code of the web application, built in Node.js with Express JS. This is routes/index.js:
const express = require('express'); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require('../middleware/AuthMiddleware'); const bot = require('../bot'); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.render('index.html'); }); router.post('/api/submit', (req, res) =&amp;gt; { const { halloween_name, email, costume_type, trick_or_treat } = req.</description></item><item><title>Didactic Octo Paddles</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/didactic-octo-paddles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/didactic-octo-paddles/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. After reading some files, one that stands out is middlewares/AdminMiddleware.js:
const jwt = require("jsonwebtoken"); const { tokenKey } = require("../utils/authorization"); const db = require("../utils/database"); const AdminMiddleware = async (req, res, next) =&amp;gt; { try { const sessionCookie = req.cookies.session; if (!sessionCookie) { return res.redirect("/login"); } const decoded = jwt.</description></item><item><title>E.Tree</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/e.tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/e.tree/</guid><description>We are given this website:
We are also given the source code of the project in Python (Flask).
Source code analysis The application has three endpoints in blueprints/routes.py:
from flask import Blueprint, render_template, request from application.util import leaderboard, search_staff web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @web.route('/leaderboard') def web_leaderboard(): return render_template('leaderboard.html', leaderboard=leaderboard('DSC-N-1547')) @api.route('/search', methods=['POST']) def api_search(): name = request.json.get('search', '') return search_staff(name) The relevant one is /search, which calls a function search_staff that is defined in util.</description></item><item><title>emoji voting</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/emoji-voting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/emoji-voting/</guid><description>We are given this website:
We are also given the source code of the project in Node.js (Express).
Source code analysis The available endpoints are in routes/index.js:
const path = require('path'); const express = require('express'); const router = express.Router(); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.sendFile(path.resolve('views/index.html')); }); router.post('/api/vote', (req, res) =&amp;gt; { let { id } = req.body; if (id) { return db.</description></item><item><title>ExpressionalRebel</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/expressionalrebel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/expressionalrebel/</guid><description>We have a website that evaluates some given Content Security Policy (CSP) restrictions:
Source code analysis We also have the source project, which is a Node.js Express web application. We can see some routes in routes/api.js:
const express = require('express') const router = express.Router() const { evaluateCsp } = require('../utils') router.post('/evaluate', async (req, res) =&amp;gt; { const { csp } = req.body try { const cspIssues = await evaluateCsp(csp) res.json(cspIssues) } catch (error) { res.</description></item><item><title>Full Stack Conf</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/full-stack-conf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/full-stack-conf/</guid><description>We are provided with this webpage:
At the bottom of the page we have a text input:
If we provide some data, we see a message:
However, the website tells us to pop an alert(). This is usually a proof of concept for Cross-Site Scripting (XSS) payloads. One of the simplest payloads for XSS is:
&amp;lt;img src=x onerror=alert(1)&amp;gt; If we use it, we will see the flag in the alert (HTB{p0p.</description></item><item><title>Gunship</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/</guid><description>We have a website with a nice style:
There is only one user input:
This is a Node.js application that uses pug as a template renderer (as shown in the available files from the challenge).
It also uses flat to parse JSON data, as shown in the following file called routes/index.js:
const path = require('path') const express = require('express') const pug = require('pug') const { unflatten } = require('flat') const router = express.</description></item><item><title>Horror Feeds</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/horror-feeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/horror-feeds/</guid><description>We are given this website:
Static code analysis We are also given the Python source code of the web application, built in Flask. Since we are dealing with a login form, let&amp;rsquo;s take a look at the database interaction (application/database.py):
from colorama import Cursor from application.util import generate_password_hash, verify_hash, generate_token from flask_mysqldb import MySQL mysql = MySQL() def query_db(query, args=(), one=False): with open('/tmp/log', 'a') as f: f.write(query + '\n') cursor = mysql.</description></item><item><title>HTBank</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/htbank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/htbank/</guid><description>We are given this website:
This time we don&amp;rsquo;t have source code available, so we must poke around with the website.
Registering a new account First of all, we can register a new account:
And then we can log in to access our dashboard:
Analyzing JavaScript files We can withdraw money clicking the button:
But we can&amp;rsquo;t add money because the other button is not working.
Looking at the JavaScript files (/static/js/home.</description></item><item><title>Intergalactic Post</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/</guid><description>We are given a PHP web application with a single functionality, that is to post an email address.
We can start by analyzing the source code. The file index.php shows that there are only two endpoints (GET and POST):
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $database = new Database('/tmp/challenge.db'); $router = new Router(); $router-&amp;gt;new('GET', '/', 'IndexController@index'); $router-&amp;gt;new('POST', '/subscribe', 'SubsController@store'); die($router-&amp;gt;match()); We can see that Database.</description></item><item><title>Juggling facts</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/juggling-facts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/juggling-facts/</guid><description>We are given this website:
Static code analysis We also have the PHP source code of the web application. The relevant part is in controllers/IndexController.php:
&amp;lt;?php class IndexController extends Controller { public function __construct() { parent::__construct(); } public function index($router) { $router-&amp;gt;view('index'); } public function getfacts($router) { $jsondata = json_decode(file_get_contents('php://input'), true); if ( empty($jsondata) || !array_key_exists('type', $jsondata)) { return $router-&amp;gt;jsonify(['message' =&amp;gt; 'Insufficient parameters!']); } if ($jsondata['type'] === 'secrets' &amp;amp;&amp;amp; $_SERVER['REMOTE_ADDR'] !</description></item><item><title>Kryptos Support</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/kryptos-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/kryptos-support/</guid><description>We are provided with this webpage:
It allows us to send messages that will be reviewed by an administrator:
Enumeration Since we don&amp;rsquo;t have any source code, let&amp;rsquo;s start using ffuf to enumerate some routes:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://188.166.146.25:32282/FUZZ [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 46ms] * FUZZ: login [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 37ms] * FUZZ: admin [Status: 301, Size: 179, Words: 7, Lines: 11, Duration: 39ms] * FUZZ: static [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 41ms] * FUZZ: Login [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 37ms] * FUZZ: logout [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 36ms] * FUZZ: settings [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 39ms] * FUZZ: tickets [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 68ms] * FUZZ: Admin [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 39ms] * FUZZ: Logout [Status: 301, Size: 179, Words: 7, Lines: 11, Duration: 39ms] * FUZZ: Static [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 62ms] * FUZZ: Tickets [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 36ms] * FUZZ: SETTINGS [Status: 200, Size: 2067, Words: 934, Lines: 54, Duration: 39ms] * FUZZ: [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %C0 [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 41ms] * FUZZ: LogIn [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 42ms] * FUZZ: LOGIN [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %CF [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %CD [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %CE [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %D8 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %CC [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %CB [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %CA [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %D0 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 38ms] * FUZZ: %D1 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 36ms] * FUZZ: %D7 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %D6 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %D5 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %D4 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 37ms] * FUZZ: %C2 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %C8 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %C9 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %C1 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 48ms] * FUZZ: %D2 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 48ms] * FUZZ: %D3 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %C6 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %C7 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 38ms] * FUZZ: %C4 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %C5 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %C3 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %D9 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %DD [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %DE [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %DF [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %DB We see that we have a login page:</description></item><item><title>Lazy Ballot</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/lazy-ballot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/lazy-ballot/</guid><description>We are given a website like this:
We are also given the server source code in Node.js.
Source code analysis This is routes/index.js:
const express = require("express"); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require("../middleware/auth"); let db; const response = (data) =&amp;gt; ({ resp: data }); router.get("/", (req, res) =&amp;gt; { return res.render("index.pug"); }); router.get("/login", async (req, res) =&amp;gt; { if (req.session.authenticated) { return res.redirect("/dashboard"); } return res.</description></item><item><title>Letter Dispair</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/letter-dispair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/letter-dispair/</guid><description>We are provided with this webpage:
It shows a directory listing. If we go to /mailer.php we will have this website to send emails:
The mailer.zip file contains the mailer.php source code. It is quite large to insert it here.
The key thing is that it uses PHPMailer, which is vulnerable to CVE-2016-10033 and CVE-2016-10045. In fact, there are public exploits like the one in www.exploit-db.com.
Basically, the exploit says to enter this payload as the email:</description></item><item><title>looking glass</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/looking-glass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/looking-glass/</guid><description>We are provided with this webpage:
There is a feature to use ping command:
The problem might be related to command injection, because probably the server does something like this:
&amp;lt;?php $cmd = 'ping -c 4 ' . $_POST['ip_address']; system($cmd); Maybe not in PHP, but the concept is the same. Hence, we can try and add a semicolon to inject another system command (; id):
There it is, the server is vulnerable to command injection, which derives in Remote Code Execution (RCE).</description></item><item><title>Mutation Lab</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/</guid><description>We are given a website like this:
We must register a new account and login to view a nice dashboard:
The only functionality we have is to export the SVG images we see as PNG files. We can capture the request with Burp Suite:
After some research, we can see that there is a vulnerability regarding SVG conversion that leads to Local File Read (more information at security.snyk.io).
We will need to use the following payload to read /etc/passwd as a PNG image:</description></item><item><title>Orbital</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/orbital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/orbital/</guid><description>We are given a website like this:
We also have the source code in Python.
Source code analysis The web application is built with Flask. A clear SQL injection (SQLi) vulnerability can be found at database.py:
from colorama import Cursor from application.util import createJWT, passwordVerify from flask_mysqldb import MySQL mysql = MySQL() def query(query, args=(), one=False): cursor = mysql.connection.cursor() cursor.execute(query, args) rv = [dict((cursor.description[idx][0], value) for idx, value in enumerate(row)) for row in cursor.</description></item><item><title>Passman</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/passman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/passman/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. A relevant file is routes/index.js:
const express = require('express'); const router = express.Router(); const { graphqlHTTP } = require('express-graphql'); const AuthMiddleware = require('../middleware/AuthMiddleware'); const GraphqlSchema = require('../helpers/GraphqlHelper'); router.get('/', (req, res) =&amp;gt; { return res.render('login.html'); }); router.get('/register', (req, res) =&amp;gt; { return res.render('register.html'); }); router.use('/graphql', AuthMiddleware, graphqlHTTP({ schema: GraphqlSchema, graphiql: false })); router.</description></item><item><title>Red Island</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/</guid><description>We are given a website like this:
We can register a new account and then login to see this functionality:
This time we don&amp;rsquo;t have the source code for the web application, so we must find a clear vulnerability or get the source code somehow.
We can start thinking of Server-Side Request Forgery (SSRF). As in other challenges, we know that the web server listens on port 1337, so let&amp;rsquo;s try and get http://127.</description></item><item><title>sanitize</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/sanitize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/sanitize/</guid><description>We are provided with this webpage:
If we look into the HTML source code, we see /debug:
And there we can find the source code of the web application:
from flask import Flask, request, render_template, Response, url_for, g from sqlite3 import dbapi2 as sqlite3 from functools import wraps app = Flask(__name__) def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(':memory:', isolation_level=None) db.row_factory = sqlite3.</description></item><item><title>Slippy</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</guid><description>We have a simple web back-end that allows us to upload a .tar.gz file. As we have a Dockerfile, let&amp;rsquo;s use a Docker container locally:
Source code analysis On the source code we have a simple Python Flask application:
@api.route('/unslippy', methods=['POST']) def cache(): if 'file' not in request.files: return abort(400) extraction = extract_from_archive(request.files['file']) if extraction: return {'list': extraction}, 200 return '', 204 The file is being extracted and written to /tmp:</description></item><item><title>Spiky Tamagotchi</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spiky-tamagotchi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spiky-tamagotchi/</guid><description>We are given the source code of a Node.js web project using Express JS and MySQL.
Source code analysis In the Dockerfile an entrypoint.sh script is run:
#!/bin/ash # Secure entrypoint chmod 600 /entrypoint.sh # Initialize &amp;amp; Start MariaDB mkdir -p /run/mysqld chown -R mysql:mysql /run/mysqld mysql_install_db --user=mysql --ldata=/var/lib/mysql mysqld --user=mysql --console --skip-name-resolve --skip-networking=0 &amp;amp; # Wait for mysql to start while ! mysqladmin ping -h'localhost' --silent; do echo "mysqld is not yet alive"</description></item><item><title>Spookifier</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spookifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spookifier/</guid><description>We are given this website:
We can enter some string and it will be shown in different fonts:
Static code analysis We are provided with the Python source code of the web application, built with Flask. This is application/blueprints/routes.py:
from flask import Blueprint, request from flask_mako import render_template from application.util import spookify web = Blueprint('web', __name__) @web.route('/') def index(): text = request.args.get('text') if text: converted = spookify(text) return render_template('index.html', output=converted) return render_template('index.</description></item><item><title>Spybug</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spybug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spybug/</guid><description>We are given a website like this:
We also have the source code of the web application in Node.js and the source code of an agent in Go.
Source code analysis The web application is built with Express JS. In index.js we can see a Content Security Policy (CSP) header and a function visitPanel that runs every minute:
application.use((req, res, next) =&amp;gt; { res.setHeader("Content-Security-Policy", "script-src 'self'; frame-ancestors 'none'; object-src 'none'; base-uri 'none';"</description></item><item><title>Templated</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/templated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/templated/</guid><description>We are given a website built with Flask:
If we try a random route, it is reflected in the HTML document:
So, if might be probably vulnerable to a Server-Side Template Injection (SSTI). Let&amp;rsquo;s try with {{7*7}}:
And indeed it is vulnerable, because we see 49. Now, we can go to PayloadsAllTheThings and use another SSTI payload to obtain Remote Code Execution (RCE) on the server:
And finally, we get the flag (HTB{t3mpl4t3s_4r3_m0r3_p0w3rfu1_th4n_u_th1nk!</description></item><item><title>The Magic Informer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/the-magic-informer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/the-magic-informer/</guid><description>We are given this website:
This time we don&amp;rsquo;t have source code available, so we must poke around with the website.
Registering a new account At the bottom of the page we can find a link to a registration form:
So we can register and then log in:
And we get access to our dashboard:
Directory Traversal and Local File Read We can try common injections in the above form. The key is in the file upload input.</description></item><item><title>Toxic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/toxic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/toxic/</guid><description>We are given a website like this:
We are also given the server source code in PHP.
Source code analysis This is index.php:
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); if (empty($_COOKIE['PHPSESSID'])) { $page = new PageModel; $page-&amp;gt;file = '/www/index.html'; setcookie( 'PHPSESSID', base64_encode(serialize($page)), time()+60*60*24, '/' ); } $cookie = base64_decode($_COOKIE['PHPSESSID']); unserialize($cookie); As we can see, the server encodes a page (/www/index.html by default) in the PHPSESSID cookie, and it is also serialized:</description></item><item><title>Trapped Source</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/trapped-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/trapped-source/</guid><description>We are given this website:
It looks like a panel where we must enter a PIN.
Inspecting HTML code If we press Ctrl-U on the keyboard, we will see the HTML code of the website:
Surprise! The expected pin is there in clear text: 1425. Let&amp;rsquo;s put it:
Flag And there&amp;rsquo;s the flag:
HTB{vi3w_cli13nt_s0urc3_S3cr3ts!}</description></item><item><title>TrapTrack</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/traptrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/traptrack/</guid><description>We are given a website like this:
We are also given the source code of the project.
Website functionality The web application allows us to enter URLs that will be stored in a SQLite3 database. Just reading the code from challenge/application/config.py, we have valid credentials (admin:admin):
from application.util import generate import os class Config(object): SECRET_KEY = generate(50) ADMIN_USERNAME = 'admin' ADMIN_PASSWORD = 'admin' SESSION_PERMANENT = False SESSION_TYPE = 'filesystem' SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/database.</description></item><item><title>Userland City</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/userland-city/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/userland-city/</guid><description>We are provided with this webpage:
Enumeration It shows a login form. Fortunately, we are given credentials in the challenge description: lxkid02:8rsNN9ohfLp69cVRFEgk4Qzs. Hence, we can use them to access:
It is a simple web page for some fake online store for cybercriminals.
The description of the challenge is quite long. The important things are the already used credentials and that it uses Laravel with debug mode activated.
Finding a CVE There is a known exploit for Laravel when debug is on: CVE-2021-3129.</description></item><item><title>Watersnake</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/watersnake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/watersnake/</guid><description>We are given a website like this:
We also have the source code in Java (SpringBoot).
Source code analysis This is the main application file (Application.java):
package com.lean.watersnake; import java.util.Arrays; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } We can find the available endpoints at Controller.java:
package com.lean.watersnake; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import org.</description></item><item><title>Wild Goose Hunt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/wild-goose-hunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/wild-goose-hunt/</guid><description>We are given this website:
We are also given the source code of the project in Node.js (Express).
Source code analysis This is index.js:
const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const routes = require('./routes'); const mongoose = require('mongoose'); mongoose.connect('mongodb://localhost:27017/heros', { useNewUrlParser: true , useUnifiedTopology: true }); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: true })); app.use(express.static('static')); app.set('view engine', 'pug'); app.use(routes); app.all('*', (req, res) =&amp;gt; { return res.status(404).send({ message: '404 page not found' }); }); app.</description></item></channel></rss>