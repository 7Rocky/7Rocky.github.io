<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crypto on 7Rocky</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/</link><description>Recent content in Crypto on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/crypto/index.xml" rel="self" type="application/rss+xml"/><item><title>Down the Rabinhole</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/down-the-rabinhole/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/down-the-rabinhole/</guid><description>We are given a Python code to encrypt the flag, and the corresponding out.txt file:
from Crypto.Util.number import getPrime, isPrime, bytes_to_long from Crypto.Util.Padding import pad import os FLAG = b"HTB{--REDACTED--}" def getPrimes(coefficient): while True: a = getPrime(512) p = 3 * coefficient * a + 2 if isPrime(p): break while True: b = getPrime(512) q = 3 * coefficient * b + 2 if isPrime(q): break return p, q def encrypt(message, coefficient): p, q = getPrimes(coefficient) n = p * q padded_message = bytes_to_long(pad(message, 256)) message = bytes_to_long(message) c1 = (message * (message + coefficient)) % n c2 = (padded_message * (padded_message + coefficient)) % n return (n, c1, c2) def main(): coefficient = getPrime(128) out = "</description></item><item><title>How The Columns Have Turned</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/how-the-columns-have-turned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/how-the-columns-have-turned/</guid><description>We are given a Python code to encrypt the flag (source.py), and we are also given dialog.txt and encrypted_messages.txt:
import&amp;nbsp;os with&amp;nbsp;open('super_secret_messages.txt',&amp;nbsp;'r')&amp;nbsp;as&amp;nbsp;f: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SUPER_SECRET_MESSAGES&amp;nbsp;=&amp;nbsp;[msg.strip()&amp;nbsp;for&amp;nbsp;msg&amp;nbsp;in&amp;nbsp;f.readlines()] def&amp;nbsp;deriveKey(key): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;derived_key&amp;nbsp;=&amp;nbsp;[] &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;i,&amp;nbsp;char&amp;nbsp;in&amp;nbsp;enumerate(key): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;previous_letters&amp;nbsp;=&amp;nbsp;key[:i] &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_number&amp;nbsp;=&amp;nbsp;1 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;j,&amp;nbsp;previous_char&amp;nbsp;in&amp;nbsp;enumerate(previous_letters): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;previous_char&amp;nbsp;&amp;gt;&amp;nbsp;char: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;derived_key[j]&amp;nbsp;+=&amp;nbsp;1 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_number&amp;nbsp;+=&amp;nbsp;1 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;derived_key.append(new_number) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;derived_key def&amp;nbsp;transpose(array): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;[row&amp;nbsp;for&amp;nbsp;row&amp;nbsp;in&amp;nbsp;map(list,&amp;nbsp;zip(*array))] def&amp;nbsp;flatten(array): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"".join([i&amp;nbsp;for&amp;nbsp;sub&amp;nbsp;in&amp;nbsp;array&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;sub]) def&amp;nbsp;twistedColumnarEncrypt(pt,&amp;nbsp;key): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;derived_key&amp;nbsp;=&amp;nbsp;deriveKey(key) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;width&amp;nbsp;=&amp;nbsp;len(key) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blocks&amp;nbsp;=&amp;nbsp;[pt[i:i&amp;nbsp;+&amp;nbsp;width]&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;range(0,&amp;nbsp;len(pt),&amp;nbsp;width)] &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blocks&amp;nbsp;=&amp;nbsp;transpose(blocks) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ct&amp;nbsp;=&amp;nbsp;[blocks[derived_key.index(i&amp;nbsp;+&amp;nbsp;1)][::-1]&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;range(width)] &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ct&amp;nbsp;=&amp;nbsp;flatten(ct) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;ct class&amp;nbsp;PRNG: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;def&amp;nbsp;__init__(self,&amp;nbsp;seed): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.p&amp;nbsp;=&amp;nbsp;0x2ea250216d705 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.a&amp;nbsp;=&amp;nbsp;self.p &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.b&amp;nbsp;=&amp;nbsp;int.from_bytes(os.urandom(16),&amp;nbsp;'big') &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.rn&amp;nbsp;=&amp;nbsp;seed &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;def&amp;nbsp;next(self): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.rn&amp;nbsp;=&amp;nbsp;((self.a&amp;nbsp;*&amp;nbsp;self.rn)&amp;nbsp;+&amp;nbsp;self.b)&amp;nbsp;%&amp;nbsp;self.p &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;self.rn def&amp;nbsp;main(): &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;seed&amp;nbsp;=&amp;nbsp;int.from_bytes(os.urandom(16),&amp;nbsp;'big') &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rng&amp;nbsp;=&amp;nbsp;PRNG(seed) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cts&amp;nbsp;=&amp;nbsp;"" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;message&amp;nbsp;in&amp;nbsp;SUPER_SECRET_MESSAGES: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;str(rng.next()) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ct&amp;nbsp;=&amp;nbsp;twistedColumnarEncrypt(message,&amp;nbsp;key) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cts&amp;nbsp;+=&amp;nbsp;ct&amp;nbsp;+&amp;nbsp;"\n" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with&amp;nbsp;open('encrypted_messages.txt',&amp;nbsp;'w')&amp;nbsp;as&amp;nbsp;f: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.write(cts) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dialog&amp;nbsp;=&amp;nbsp;"Miyuki&amp;nbsp;says:\n" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dialog&amp;nbsp;+=&amp;nbsp;"Klaus&amp;nbsp;it's&amp;nbsp;your&amp;nbsp;time&amp;nbsp;to&amp;nbsp;sign!\n" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dialog&amp;nbsp;+=&amp;nbsp;"All&amp;nbsp;we&amp;nbsp;have&amp;nbsp;is&amp;nbsp;the&amp;nbsp;last&amp;nbsp;key&amp;nbsp;of&amp;nbsp;this&amp;nbsp;wierd&amp;nbsp;encryption&amp;nbsp;scheme.\n" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dialog&amp;nbsp;+=&amp;nbsp;"Please&amp;nbsp;do&amp;nbsp;your&amp;nbsp;magic,&amp;nbsp;we&amp;nbsp;need&amp;nbsp;to&amp;nbsp;gather&amp;nbsp;more&amp;nbsp;information&amp;nbsp;if&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;defeat&amp;nbsp;Draeger.\n" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dialog&amp;nbsp;+=&amp;nbsp;f"The&amp;nbsp;key&amp;nbsp;is:&amp;nbsp;{str(key)}\n" &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with&amp;nbsp;open('dialog.</description></item></channel></rss>