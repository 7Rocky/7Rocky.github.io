<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwn on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/</link><description>Recent content in Pwn on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>Antidote</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/antidote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/antidote/</guid><description>&lt;p>We are given an ARM 32-bit binary called &lt;code>antidote&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: arm-32-little
RELRO: &lt;span class="code-dark-red">No RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span> 
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8000)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> undefined data[&lt;/span>&lt;span class="mtk6">64&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> undefined message[&lt;/span>&lt;span class="mtk6">152&lt;/span>&lt;span class="mtk1">];&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stdout, (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">memcpy&lt;/span>&lt;span class="mtk1">(message, &lt;/span>&lt;span class="mtk4">"Bzzzzzzz... Bzzzzzzzzzzzzzzz... Damn those bugs!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Come on, hurry up analyzing that bug&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s DNA! I can&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">t wait to get out of here!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Careful there! That hurt!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1"> , &lt;/span>&lt;span class="mtk6">152&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, message, &lt;/span>&lt;span class="mtk6">152&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, data, &lt;/span>&lt;span class="mtk6">300&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="buffer-overflow-vulnerability">Buffer Overflow vulnerability&lt;/h3>
&lt;p>The binary is vulnerable to Buffer Overflow since there is a variable called &lt;code>data&lt;/code> that has 64 bytes assigned as buffer, but the program is reading up to 300 bytes from &lt;code>stdin&lt;/code> and storing the data into &lt;code>data&lt;/code>, overflowing the reserved buffer if the size of the input data is greater than 64 bytes.&lt;/p></description></item><item><title>Auth-or-out</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/auth-or-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/auth-or-out/</guid><description>&lt;p>We have a 64-bit binary called &lt;code>auth-or-out&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute it, we have a menu for a typical heap exploitation challenge:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./auth-or-out&lt;/span>
*** Welcome to DZONERZY authors editor v0.11.2 *** 
1 - Add Author
2 - Modify Author
3 - Print Author
4 - Delete Author
5 - Exit

Choice:
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Let&amp;rsquo;s use Ghidra to obtain decompiled source code in C. This is &lt;code>main&lt;/code>:&lt;/p></description></item><item><title>Bat Computer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>batcomputer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we use Ghidra, we will see the decompiled source code in C for the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> res;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> option;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> password[&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> command[&lt;/span>&lt;span class="mtk6">76&lt;/span>&lt;span class="mtk1">];&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(password, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome to your BatComputer, Batman. What would y&lt;/span>&lt;span class="mtk4">ou like to do?&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">1. Track Joker&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">2. Cha se Joker&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">option);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"It was very hard, but Alfred managed to locate hi&lt;/span>&lt;span class="mtk4">m: &lt;/span>&lt;span class="mtk6">%p\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, command);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Ok. Let&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s do this. Enter the password: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%15s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, password);&lt;/span>
&lt;span class="mtk1"> res &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strcmp&lt;/span>&lt;span class="mtk1">(password, &lt;/span>&lt;span class="mtk4">"b4tp@$$w0rd!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (res &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"The password is wrong.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">I can&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">t give you access to the BatMobile!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Access Granted. &lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Enter the navigation commands: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, command, &lt;/span>&lt;span class="mtk6">137&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Roger that!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Too bad, now who&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s gonna save Gotham? Alfred?"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We have two options:&lt;/p></description></item><item><title>Blacksmith</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>blacksmith&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">size_t&lt;/span>&lt;span class="mtk1"> length;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> answer;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> option;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">message_1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">message_2;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> message_1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"You are worthy to carry this Divine Weapon and br&lt;/span>&lt;span class="mtk4">ing peace to our homeland!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> message_2 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"This in not a weapon! Do not try to mock me!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Traveler, I need some materials to fuse in order &lt;/span>&lt;span class="mtk4">to create something really powerful!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Do you have the materials I need to craft the Ult&lt;/span>&lt;span class="mtk4">imate Weapon?&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">1. Yes, everything is here! &lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">2. No, I did not manage to bring them all!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">answer);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (answer &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Farewell traveler! Come back when you have all th&lt;/span>&lt;span class="mtk4">e materials!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">22&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">menu);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">option);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sec&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sword&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">shield&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bow&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strlen&lt;/span>&lt;span class="mtk1">(message_2);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, message_2, length);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does not &lt;/span>&lt;span class="mtk3">return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">105&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (canary &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__stack_chk_fail&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It shows a menu with some options:&lt;/p></description></item><item><title>Bon-nie-appetit</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bon-nie-appetit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bon-nie-appetit/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>bon-nie-appetit&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we also have the binary patched with the remote Glibc library and loader:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ldd&lt;/span> &lt;span class="mtku">bon-nie-appetit&lt;/span>
 linux-vdso.so.1 (0x00007fff11ae1000)
 libc.so.6 =&amp;gt; ./glibc/libc.so.6 (0x00007f96fdaab000)
 ./glibc/ld-linux-x86-64.so.2 =&amp;gt; /lib64/ld-linux-x86-64.so.2 (0x00007f96fe0a1000) 

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./glibc/ld-linux-x86-64.so.2&lt;/span> &lt;span class="mtku">./glibc/libc.so.6&lt;/span>
GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.5) stable release version 2.27.
Copyright (C) 2018 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 7.5.0.
libc ABIs: UNIQUE IFUNC
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Let&amp;rsquo;s open the binary in Ghidra to analyze the decompiled C code:&lt;/p></description></item><item><title>Control Room</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/control-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/control-room/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>control_room&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="setup-environment">Setup environment&lt;/h2>
&lt;p>We are also provided with the remote Glibc library:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./libc.so.6&lt;/span>
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. 
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">md5sum&lt;/span> &lt;span class="mtku">libc.so.6&lt;/span>
3d7240354d70ebbd11911187f1acd6e8 libc.so.6
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>First of all, it is useful to patch the binary so that it uses the provided Glibc. That way, when developing the exploit, it will presumably work on remote without any issue. Glibc 2.35 appears in Ubuntu 22.04. The best way to get the loader is to use Docker:&lt;/p></description></item><item><title>CRSid</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/</guid><description>&lt;p>We have a 64-bit binary called &lt;code>crsid&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute it, we need to enter a &lt;code>CRSid&lt;/code> and then we have this menu:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./crsid&lt;/span>

 ██████╗██████╗ ███████╗██╗██████╗
██╔════╝██╔══██╗██╔════╝██║██╔══██╗ 
██║ ██████╔╝███████╗██║██║ ██║
██║ ██╔══██╗╚════██║██║██║ ██║
╚██████╗██║ ██║███████║██║██████╔╝
 ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝╚═════╝

[i] Enter your CRSid: asdf
=========================
[1] Create username
[2] Delete username
[3] Edit username
[4] Show username
[5] Change your CRSid
[6] Exit
=========================
[#]
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>It is a typical heap challenge. The reverse engineering process is quite simple, despite the fact that the binary is stripped. This is the &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Dragon Army</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dragon-army/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dragon-army/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>da&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we have this Glibc version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">glibc/ld-linux-x86-64.so.2&lt;/span> &lt;span class="mtku">glibc/libc.so.6&lt;/span>
GNU C Library (GNU libc) stable release version 2.30.
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE.
Compiled by GNU CC version 7.5.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;http://www.gnu.org/software/libc/bugs.html&amp;gt;.
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>This time, Ghidra didn&amp;rsquo;t work very well, so I tried Binary Ninja on the &lt;a target="_blank" href="https://cloud.binary.ninja">cloud&lt;/a>. This is the &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Dream Diary: Chapter 3</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dream-diary-chapter-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dream-diary-chapter-3/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>diary3&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we also have the remote Glibc library and loader:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./ld-2.29.so&lt;/span> &lt;span class="mtku">libc.so.6&lt;/span>
GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. 
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 9.4.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The binary is already patched to used these files, so no actions needed:&lt;/p></description></item><item><title>echoland</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/echoland/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/echoland/</guid><description>&lt;p>We are given a remote instance to connect to. At first glance, it seems to be vulnerable to Buffer Overflow:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">nc&lt;/span> 206.189.21.29 32084

🦇 Inside the dark cave. 🦇
1. Scream.
2. Run outside.
> 1
>> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 
/home/ctf/run_challenge.sh: line 2: 30 Segmentation fault ./echoland


Ncat: Broken pipe.
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>And there is no stack canary because &lt;code>*** stack smashing detected ***&lt;/code> does not appear as error message. But it also has a Format String vulnerability:&lt;/p></description></item><item><title>Entity</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/entity/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>chall&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we connect to the remote instance, we see this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">nc&lt;/span> 134.122.106.203 30576

Something strange is coming out of the TV.. 

(T)ry to turn it off
(R)un
(C)ry

&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Nothing really explanatory&amp;hellip;&lt;/p>
&lt;h2 id="static-code-analysis">Static code analysis&lt;/h2>
&lt;p>This time, we are given the original C source code (&lt;code>chall.c&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>

&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">union&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">unsigned&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">integer&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">string&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1">} &lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">typedef&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">enum&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STORE_GET&lt;/span>&lt;span class="mtk1">,&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STORE_SET&lt;/span>&lt;span class="mtk1">,&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>
&lt;span class="mtk1">} &lt;/span>&lt;span class="mtk8 mtku">action_t&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">typedef&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">enum&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">INTEGER&lt;/span>&lt;span class="mtk1">,&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STRING&lt;/span>
&lt;span class="mtk1">} &lt;/span>&lt;span class="mtk8 mtku">field_t&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">typedef&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">struct&lt;/span>&lt;span class="mtk1"> { &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">action_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">act&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">field_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">field&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">} &lt;/span>&lt;span class="mtk8 mtku">menu_t&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk8 mtku">menu_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">menu_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> { &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1"> };&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> { &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1"> };&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">(T)ry to turn it off&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">(R)un&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">(C)ry&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk8">strcspn&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">)] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">switch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">]) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'T'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">act&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STORE_SET&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'R'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">act&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STORE_GET&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'C'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">act&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">default&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">What's this nonsense?!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">This does not seem to work.. (L)ie down or (S)crea&lt;/span>&lt;span class="mtk4">m&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk8">strcspn&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">)] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">switch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">]) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'L'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">field&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">INTEGER&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'S'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">field&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STRING&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">default&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">You are doomed!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">set_field&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">field_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">f&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">32&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">};&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Maybe try a ritual?&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">switch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk9 mtki">f&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">INTEGER&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sscanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%llu&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">integer&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">13371337&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">What's this nonsense?!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STRING&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">memcpy&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">string&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">string&lt;/span>&lt;span class="mtk1">));&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_field&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">field_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">f&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Anything else to try?&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">switch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk9 mtki">f&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">INTEGER&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%llu\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">integer&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STRING&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%.8s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">string&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_flag&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">integer&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">13371337&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">system&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"cat flag.txt"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Sorry, this will not work!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdout&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">_IONBF&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bzero&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">DataStore&lt;/span>&lt;span class="mtk1">));&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Something strange is coming out of the TV..&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">menu_t&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">switch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">act&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STORE_SET&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">set_field&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">field&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">STORE_GET&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_field&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">field&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_flag&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, there&amp;rsquo;s a menu where we can select whether to set a field, get the field or get the flag.&lt;/p></description></item><item><title>FileStorage</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/filestorage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/filestorage/</guid><description>&lt;p>This challenge was made by me for Hack The Box. We are given a 64-bit binary called &lt;code>file_storage&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We see that it has NX enabled, so we cannot execute custom shellcode on the stack directly. Moreover, it has Partial RELRO, which means that the Global Offset Table (GOT) can be modified in some ways.&lt;/p>
&lt;p>There is no PIE or Stack canaries, so fewer steps to perform the exploitation. Probably, we will only need to bypass ASLR.&lt;/p></description></item><item><title>Finale</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/finale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/finale/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>finale&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="environment-setup">Environment setup&lt;/h2>
&lt;p>It might happen that we don&amp;rsquo;t have a version of Glibc that is accepted by the program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./finale&lt;/span>
./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale) 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Luckily, in &lt;a target="_blank" href="../spooky-time">Spooky Time&lt;/a> we were provided with a library and a loader, version 2.35:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">../pwn_spooky_time/glibc/ld-linux-x86-64.so.2&lt;/span> &lt;span class="mtku">../pwn_spooky_time/glibc/libc.so.6&lt;/span> 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>So, we can copy that directory in the current environment and use &lt;a target="_blank" href="https://github.com/io12/pwninit">&lt;code>pwninit&lt;/code>&lt;/a> to patch the binary and use this new Glibc version:&lt;/p></description></item><item><title>Fleet Management</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>fleet_management&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open it in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> Fleet Management System &lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001023e5, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001020e9, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001023e0);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[*] Loading . . .&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001020f1, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001020e9);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It calls &lt;code>menu&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> undefined8 uVar1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> local_13 [&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> undefined8 canary;&lt;/span>

&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(undefined8 &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(local_13, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">do&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">-_-_-_-_-_-_-_-_-_-_-_-_-&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| [1] View the Fleet |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| [2] Control Panel |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| [3] User Settings |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| [4] Exit |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1b&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"-_-_-_-_-_-_-_-_-_-_-_-_-&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1a&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">[*] What do you want to do? "&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1d&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, local_13, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">switch&lt;/span>&lt;span class="mtk1">(local_13[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">]) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'1'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[*] Connecting to the Encrypted channel . . .&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020f1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[*] Fetching Data . . .&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020f1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> uVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">10166a&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">=============================&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1f&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> PDS Thanatos - &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">[&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">Active&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">]&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102180&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020f1&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">, uVar1);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> CS Meteor - &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">[&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">Active&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">]&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102180&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020f1&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> LWS Proximo - &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">[&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">Active&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">]&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> |&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102180&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020f1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> STS Goliath - &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">[&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">Inactive&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">]&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102180&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102211&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102178&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"=============================&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1e&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Key:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">PDS: Planet Destroyer Ship&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102180&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"CS: Combat Spaceship&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">15&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fwrite&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"LWS: Light Weight Spaceship&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1c&lt;/span>&lt;span class="mtk1">, stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"STS: Space Transportation Ship&lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'2'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[*] Authenticating . . .&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020f1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[!] Error: You are not member of an authorized gro&lt;/span>&lt;span class="mtk4">up.&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102211&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[!] Error: You should authenticate first.&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102211&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'4'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">[*] Bye! &lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102380&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">case&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'9'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">beta_feature&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">default&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[!] Error: Invalid Option.&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_00102211&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk9 mtki">DAT_001020e9&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>This is a fairly large function, but the only option that seems to be insteresting is &lt;code>beta_feature&lt;/code> (option &lt;code>9&lt;/code>):&lt;/p></description></item><item><title>Format</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>format&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>After executing it, we see that the program only echoes what we enter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./format&lt;/span> 
asdf
asdf
fdsa
fdsa
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Using Ghidra, we can reverse engineer the source code and see what the program is doing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(EVP_PKEY_CTX &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk9 mtki">param_1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>

&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">init&lt;/span>&lt;span class="mtk1">(param_1);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">echo&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (canary &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__stack_chk_fail&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The &lt;code>main&lt;/code> function calls &lt;code>echo&lt;/code>, which is the one responding with the same message we enter:&lt;/p></description></item><item><title>Getting Started</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/getting-started/</guid><description>&lt;p>We are asked to exploit a basic Buffer Overflow vulnerability. We are given some indications and examples as well:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">nc&lt;/span> 178.62.11.21 31609


&lt;span class="code-blue mtku">Stack frame layout&lt;/span>

&lt;span class="code-blue">| . | &amp;lt;- Higher addresses&lt;/span>
&lt;span class="code-blue">| . |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| | &amp;lt;- 64 bytes&lt;/span>
&lt;span class="code-blue">| Return addr |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| | &amp;lt;- 56 bytes&lt;/span>
&lt;span class="code-blue">| RBP |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| | &amp;lt;- 48 bytes&lt;/span>
&lt;span class="code-blue">| target |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| | &amp;lt;- 40 bytes&lt;/span>
&lt;span class="code-blue">| alignment |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| | &amp;lt;- 32 bytes&lt;/span>
&lt;span class="code-blue">| Buffer[31] |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| . |&lt;/span>
&lt;span class="code-blue">| . |&lt;/span>
&lt;span class="code-blue">|_____________|&lt;/span>
&lt;span class="code-blue">| |&lt;/span>
&lt;span class="code-blue">| Buffer[0] |&lt;/span>
&lt;span class="code-blue">|_____________| &amp;lt;- Lower addresses&lt;/span>


&lt;span class="code-blue"> [Addr] | [Value]&lt;/span>
&lt;span class="code-blue">-------------------+-------------------&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbd0 | &lt;span class="code-green">0x0000000000000000&lt;span class="code-blue"> &amp;lt;- &lt;span class="code-green">Start of buffer&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbd8 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbe0 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbe8 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbf0 | 0x6969696969696969 &amp;lt;- Dummy value for alignment&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbf8 | &lt;span class="code-red">0x00000000deadbeef&lt;span class="code-blue"> &amp;lt;- &lt;span class="code-red">Target to change&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc00 | 0x000055a7c5e33800 &amp;lt;- Saved rbp&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc08 | 0x00007f339c259c87 &amp;lt;- Saved return address&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc10 | 0x0000000000000001&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc18 | 0x00007ffe1d81dce8&lt;/span>


&lt;span class="code-blue">After we insert 4 "A"s, (the hex representation of A is 0x41), the stack layout like this:&lt;/span>


&lt;span class="code-blue"> [Addr] | [Value]&lt;/span>
&lt;span class="code-blue">-------------------+-------------------&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbd0 | &lt;span class="code-green">0x0000000041414141&lt;span class="code-blue"> &amp;lt;- &lt;span class="code-green">Start of buffer&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbd8 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbe0 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbe8 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbf0 | 0x6969696969696969 &amp;lt;- Dummy value for alignment&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbf8 | &lt;span class="code-red">0x00000000deadbeef&lt;span class="code-blue"> &amp;lt;- &lt;span class="code-red">Target to change&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc00 | 0x000055a7c5e33800 &amp;lt;- Saved rbp&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc08 | 0x00007f339c259c87 &amp;lt;- Saved return address&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc10 | 0x0000000000000001&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc18 | 0x00007ffe1d81dce8&lt;/span>


&lt;span class="code-blue">After we insert 4 "B"s, (the hex representation of B is 0x42), the stack layout looks like this:&lt;/span>


&lt;span class="code-blue"> [Addr] | [Value]&lt;/span>
&lt;span class="code-blue">-------------------+-------------------&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbd0 | &lt;span class="code-green">0x4242424241414141&lt;span class="code-blue"> &amp;lt;- &lt;span class="code-green">Start of buffer&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbd8 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbe0 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbe8 | 0x0000000000000000&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbf0 | 0x6969696969696969 &amp;lt;- Dummy value for alignment&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dbf8 | &lt;span class="code-red">0x00000000deadbeef&lt;span class="code-blue"> &amp;lt;- &lt;span class="code-red">Target to change&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc00 | 0x000055a7c5e33800 &amp;lt;- Saved rbp&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc08 | 0x00007f339c259c87 &amp;lt;- Saved return address&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc10 | 0x0000000000000001&lt;/span>
&lt;span class="code-blue">0x00007ffe1d81dc18 | 0x00007ffe1d81dce8&lt;/span>

&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span> 
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Fill the 32-byte buffer, overwrite the alginment address and the "target's" 0xdeadbeef value. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, they show how our input data is stored on the stack and they ask us to modify the values &lt;code>0x6969696969696969&lt;/code> and &lt;code>0x00000000deadbeef&lt;/code> that are present in the stack by exploiting a Buffer Overflow vulnerability. If we count the number of bytes needed, we will get &lt;code>48&lt;/code> (&lt;code>6 * 8&lt;/code>). So, we will need to enter exactly &lt;code>48&lt;/code> characters, for instance, &lt;code>A&lt;/code> letters:&lt;/p></description></item><item><title>Great Old Talisman</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/great-old-talisman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/great-old-talisman/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>great_old_talisman&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this decompiled C source code for the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> n;&lt;/span>
&lt;span class="mtk1"> undefined8 canary;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(undefined8 &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">banner&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">This Great Old Talisman will protect you from the &lt;/span>&lt;span class="mtk4">evil powers of zombies!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">Do you want to enchant it with a powerful spell? (&lt;/span>&lt;span class="mtk4">1 -&amp;gt; Yes, 0 -&amp;gt; No)&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">n);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Spell: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, talis &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1">) n &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">// WARNING: Subroutine does not return&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">520&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The function is so simple, it asks for an integer number &lt;code>n&lt;/code> (supposed to be just &lt;code>0&lt;/code> or &lt;code>1&lt;/code>) and then allows us to enter 2 bytes at &lt;code>talis + 8 * n&lt;/code>. The variable &lt;code>talis&lt;/code> is global, and after that, the program calls &lt;code>exit&lt;/code>.&lt;/p></description></item><item><title>Hellhound</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/hellhound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/hellhound/</guid><description>&lt;p>We have a 64-bit binary called &lt;code>hellound&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./.glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute it, we have the possibility to perform some weird actions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./hellhound&lt;/span>

&lt;span class="code-blue">This is what it used to look before the modifications..&lt;/span> 

&lt;span class="code-blue"> _&lt;/span>
&lt;span class="code-blue"> / \ _-'&lt;/span>
&lt;span class="code-blue"> _/| \-''- _ /&lt;/span>
&lt;span class="code-blue">__-' { | \&lt;/span>
&lt;span class="code-blue"> / \&lt;/span>
&lt;span class="code-blue"> / 'o. |o }&lt;/span>
&lt;span class="code-blue"> | \ ;&lt;/span>
&lt;span class="code-blue"> ',&lt;/span>
&lt;span class="code-blue"> \_ __\&lt;/span>
&lt;span class="code-blue"> ''-_ \.//&lt;/span>
&lt;span class="code-blue"> / '-____'&lt;/span>
&lt;span class="code-blue"> /&lt;/span>
&lt;span class="code-blue"> _'&lt;/span>
&lt;span class="code-blue"> _-'&lt;/span>


&lt;span class="code-green">[*] Interaction with Hellhound:&lt;/span>

&lt;span class="code-green">1. Analyze chipset 🔩&lt;/span>
&lt;span class="code-green">2. Modify hardware ⚒️&lt;/span>
&lt;span class="code-green">3. Check results ❓&lt;/span>
&lt;span class="code-green">&amp;gt;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Let&amp;rsquo;s use Ghidra to obtain decompiled source code in C:&lt;/p></description></item><item><title>HTB Console</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>htb-console&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we use Ghidra, we will see the following &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> command[&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">];&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome HTB Console Version 0.1 Beta."&lt;/span>&lt;span class="mtk1">);&lt;/span> 

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">do&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(command, &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">, stdin);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">console&lt;/span>&lt;span class="mtk1">(command);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(command, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The above code only asks for user input and passes the string to &lt;code>console&lt;/code>:&lt;/p></description></item><item><title>Hunting</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/hunting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/hunting/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>hunting&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The challenge says that the objective is to read the flag, not to get a shell. Moreover, the name of the challenge (&amp;ldquo;Hunting&amp;rdquo;) recalls to a technique known as Egg Hunter. This one is used to find some payload in memory when having code execution, and the way to ensure that the payload is found is using an egg (4 bytes).&lt;/p></description></item><item><title>Jeeves</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>jeeves&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> name[&lt;/span>&lt;span class="mtk6">44&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> fd;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">data;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1"> code;&lt;/span>

&lt;span class="mtk1"> code &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">deadc0d3&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Hello, good sir!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">May I have your name? "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(name);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Hello &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">, hope you have a good day!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, name);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (code &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1337bab3&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> data &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> fd &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(fd, data, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Pleased to make your acquaintance. Here&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s a small gift: &lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, data);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">close&lt;/span>&lt;span class="mtk1">(fd);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The binary is vulnerable to Buffer Overflow since there is a variable called &lt;code>name&lt;/code> that has 44 bytes assigned as buffer, but the program is using &lt;code>gets&lt;/code>, which is an insecure function because it does not limit the length of the input data, thus overflowing the reserved buffer if the size of the input data is greater than 44 bytes.&lt;/p></description></item><item><title>Kernel Adventures: Part 1</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/kernel-adventures-part-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/kernel-adventures-part-1/</guid><description>&lt;p>We are given a Linux file system and some other files common in kernel exploitation challenges:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-red">#&lt;/span> &lt;span class="code-dark-green">ls&lt;/span> -lh
total 12M
-rw-r--r-- 1 root root 8,1M dic 11 2019 bzImage
-rw-r--r-- 1 root root 84 dic 11 2019 notes.txt
-rw-r--r-- 1 root root 3,2M dic 11 2019 &lt;span class="code-red">rootfs.cpio.gz&lt;/span>
-rwxr-xr-x 1 root root 262 dic 11 2019 &lt;span class="code-green">run.sh&lt;/span>

&lt;span class="code-red">#&lt;/span> &lt;span class="code-dark-green">cat&lt;/span> &lt;span class="mtku">notes.txt&lt;/span>
I removed the password hashes in the file I gave you. They're not supposed to be 0. 

&lt;span class="code-red">#&lt;/span> &lt;span class="code-dark-green">cat&lt;/span> &lt;span class="mtku">run.sh&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">#!/bin/bash&lt;/span>

&lt;span class="mtk1">qemu-system-x86_64&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-m&lt;/span> &lt;span class="mtk1">128M&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-nographic&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-kernel&lt;/span> &lt;span class="mtk1">./bzImage&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-append&lt;/span> &lt;span class="mtk4">'console=ttyS0&lt;/span> &lt;span class="mtk4">loglevel=3&lt;/span> &lt;span class="mtk4">oops=panic&lt;/span> &lt;span class="mtk4">panic=1&lt;/span> &lt;span class="mtk4">kaslr'&lt;/span> &lt;span class="mtk1">\&lt;/span> 
 &lt;span class="mtk1">-monitor&lt;/span> &lt;span class="mtk1">/dev/null&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-initrd&lt;/span> &lt;span class="mtk1">./rootfs.cpio.gz&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-no-kvm&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-cpu&lt;/span> &lt;span class="mtk1">qemu64&lt;/span> &lt;span class="mtk1">\&lt;/span>
 &lt;span class="mtk1">-smp&lt;/span> &lt;span class="mtk1">cores=2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="setup-environment">Setup environment&lt;/h2>
&lt;p>First of all, we must extract the Linux file system:&lt;/p></description></item><item><title>knote</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/knote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/knote/</guid><description>&lt;p>We are given a Linux file system and some other files common in kernel exploitation challenges:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">tree&lt;/span>
.
├── debug
│   ├── bzImage
│   ├── qemu-cmd
│   └── rootfs.img
├── knote.c
└── knote.ko

1 directory, 5 files 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>This is &lt;code>debug/qemu-cmd&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">#!/bin/bash&lt;/span>

&lt;span class="mtk1">timeout --foreground 35 qemu-system-x86_64 \&lt;/span>
&lt;span class="mtk1"> -m 128M \&lt;/span>
&lt;span class="mtk1"> -nographic \&lt;/span>
&lt;span class="mtk1"> -kernel /home/ctf/bzImage \&lt;/span>
&lt;span class="mtk1"> -append &lt;/span>&lt;span class="mtk4">'console=ttyS0 loglevel=3 oops=panic panic=1 kaslr&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1"> \&lt;/span> 
&lt;span class="mtk1"> -monitor /dev/null \&lt;/span>
&lt;span class="mtk1"> -initrd /home/ctf/rootfs.img \&lt;/span>
&lt;span class="mtk1"> -no-kvm \&lt;/span>
&lt;span class="mtk1"> -cpu qemu64 \&lt;/span>
&lt;span class="mtk1"> -smp cores=2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It is basically a large command to run the kernel image with &lt;code>qemu&lt;/code>. As can be seen, KASLR is enabled, but there is no SMEP, SMAP or KPTI. All these knowledge comes from &lt;a target="_blank" href="https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/">Learning Linux Kernel Exploitation - Part 1&lt;/a>.&lt;/p></description></item><item><title>Leet Test</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>leet_test&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open it in Ghidra, we find this decompiled source code in C:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1"> winner &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">cafebabe&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1"> random;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> urandom_fd;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> flag_fd;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">flag;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> name[&lt;/span>&lt;span class="mtk6">280&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>

&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">initialize&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> urandom_fd &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/dev/urandom"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(urandom_fd, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">random, &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">close&lt;/span>&lt;span class="mtk1">(urandom_fd);&lt;/span>
&lt;span class="mtk1"> random &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> random &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">ffff&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome to HTB!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Please enter your name: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(name, &lt;/span>&lt;span class="mtk6">256&lt;/span>&lt;span class="mtk1">, stdin);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Hello, "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(name);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (random &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1337c0de&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> winner) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Sorry! You aren&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">t 1337 enough :(&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Please come back later&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">------------------------"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> flag_fd &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> flag &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">256&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(flag_fd, flag, &lt;/span>&lt;span class="mtk6">256&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">close&lt;/span>&lt;span class="mtk1">(flag_fd);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Come right in! &lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, flag);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Here we have a Format String vulnerability since there is a call to &lt;code>printf&lt;/code> using as first argument a variable controlled by the user. Hence, we can insert formats and potentially dump values from the stack and also write in arbitrary memory addresses. Let&amp;rsquo;s test it:&lt;/p></description></item><item><title>Lesson</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/lesson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/lesson/</guid><description>&lt;p>We are given a binary file called &lt;code>main&lt;/code> and its source code in C:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">under_construction&lt;/span>&lt;span class="mtk1">(){&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"This is under development&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print_msg&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk9 mtki">user&lt;/span>&lt;span class="mtk1">){&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> formatter[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">20&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">strncpy&lt;/span>&lt;span class="mtk1">(formatter, user, &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">size_t&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">; i&lt;/span>&lt;span class="mtk5">++&lt;/span>&lt;span class="mtk1">) formatter[i] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">tolower&lt;/span>&lt;span class="mtk1">(formatter[i]);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">strncmp&lt;/span>&lt;span class="mtk1">(formatter, &lt;/span>&lt;span class="mtk4">"admin"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">?&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Welcome admin!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Welcome user!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">); &lt;/span> 
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">argc&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk9 mtki">argv&lt;/span>&lt;span class="mtk1">){&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> name[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">20&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">};&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">unsigned&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> x, y;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Enter your name: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, name);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print_msg&lt;/span>&lt;span class="mtk1">(name);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We are asked to answer some questions about binary exploitation.&lt;/p></description></item><item><title>Math Door</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/math-door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/math-door/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>math-door&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'.'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="setup-environment">Setup environment&lt;/h2>
&lt;p>We are also provided with the remote Glibc library and loader:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./ld.so&lt;/span> &lt;span class="mtku">./libc.so.6&lt;/span>
GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. 
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 9.4.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ldd&lt;/span> &lt;span class="mtku">math-door&lt;/span>
 linux-vdso.so.1 (0x00007ffed83e6000)
 libc.so.6 =&amp;gt; ./libc.so.6 (0x00007f39ce44c000)
 ld.so =&amp;gt; /lib64/ld-linux-x86-64.so.2 (0x00007f39ce647000)
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The binary is already prepared to use the remote library and loader, so there&amp;rsquo;s nothing more left to do.&lt;/p></description></item><item><title>Maze of Mist</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/maze-of-mist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/maze-of-mist/</guid><description>&lt;p>We are given a compressed &lt;code>vmlinuz-linux&lt;/code> kernel image, an &lt;code>initramfs.cpio.gz&lt;/code> filesystem and a &lt;code>run.sh&lt;/code> script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">unzip&lt;/span> -l &lt;span class="mtku">pwn_maze_of_mist.zip&lt;/span>
Archive: pwn_maze_of_mist.zip
 Length Date Time Name
--------- ---------- ----- ----
 0 2024-02-06 09:30 maze_of_mist/
 1347202 2024-02-06 09:29 maze_of_mist/initramfs.cpio.gz 
 291 2024-02-06 09:26 maze_of_mist/run.sh
 12886816 2024-02-06 09:26 maze_of_mist/vmlinuz-linux
--------- -------
 14234309 4 files

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">unzip&lt;/span> &lt;span class="mtku">pwn_maze_of_mist.zip&lt;/span>
Archive: pwn_maze_of_mist.zip
 creating: maze_of_mist/
 inflating: maze_of_mist/initramfs.cpio.gz
 inflating: maze_of_mist/run.sh
 inflating: maze_of_mist/vmlinuz-linux
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we decompress the filesystem, we find a 32-bit binary called &lt;code>target&lt;/code>:&lt;/p></description></item><item><title>Nightmare</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nightmare/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>nightmare&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-red">No RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Using Ghidra, we can read the decompiled source code in C. This is the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> option;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> option_char;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">do&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> option_char &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> option &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">)option_char;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Seriously? We told you that it&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s impossible to exit!"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'4'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">LAB_001014e5:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"No can do"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'1'&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">scream&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'2'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">goto&lt;/span>&lt;span class="mtk1"> LAB_001014e5;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">escape&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The &lt;code>main&lt;/code> function calls &lt;code>menu&lt;/code>, which gives us two options. The first one is &lt;code>scream&lt;/code>:&lt;/p></description></item><item><title>No Return</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>no-return&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-red">No RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>The binary is statically compiled and is so small that we can print the full assembly here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">objdump&lt;/span> -M intel -d &lt;span class="mtku">no-return&lt;/span>

no-return: file format elf64-x86-64


Disassembly of section .text:

0000000000401000 &amp;lt;.text&amp;gt;:
 401000: 5c pop rsp
 401001: 5f pop rdi
 401002: 5e pop rsi
 401003: 5d pop rbp
 401004: 5a pop rdx
 401005: 59 pop rcx
 401006: 5b pop rbx
 401007: 48 31 c0 xor rax,rax
 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1]
 40100d: 48 ff c0 inc rax
 401010: de f1 fdivrp st(1),st
 401012: ff 22 jmp QWORD PTR [rdx]
 401014: 48 2b 74 24 10 sub rsi,QWORD PTR [rsp+0x10]
 401019: f5 cmc
 40101a: ff 22 jmp QWORD PTR [rdx]
 40101c: 48 89 e1 mov rcx,rsp
 40101f: fd std
 401020: ff 22 jmp QWORD PTR [rdx]
 401022: 48 8d 0c d9 lea rcx,[rcx+rbx*8]
 401026: fd std
 401027: ff 21 jmp QWORD PTR [rcx]
 401029: 48 31 d5 xor rbp,rdx
 40102c: 0f 95 c4 setne ah
 40102f: ff a5 00 00 44 e8 jmp QWORD PTR [rbp-0x17bc0000]
 401035: 48 01 f4 add rsp,rsi
 401038: de f9 fdivp st(1),st
 40103a: ff 22 jmp QWORD PTR [rdx]
 40103c: 48 01 dd add rbp,rbx
 40103f: 9b fwait
 401040: ff 65 c7 jmp QWORD PTR [rbp-0x39]
 401043: 88 a7 00 00 44 e8 mov BYTE PTR [rdi-0x17bc0000],ah 
 401049: f9 stc
 40104a: ff 22 jmp QWORD PTR [rdx]
 40104c: 59 pop rcx
 40104d: 48 89 d1 mov rcx,rdx
 401050: 5a pop rdx
 401051: ff 21 jmp QWORD PTR [rcx]
 401053: 48 ff c1 inc rcx
 401056: de f1 fdivrp st(1),st
 401058: ff 22 jmp QWORD PTR [rdx]
 40105a: 48 92 xchg rdx,rax
 40105c: de f9 fdivp st(1),st
 40105e: ff 21 jmp QWORD PTR [rcx]
 401060: 48 ff c3 inc rbx
 401063: de f1 fdivrp st(1),st
 401065: ff 22 jmp QWORD PTR [rdx]
 401067: 48 87 cf xchg rdi,rcx
 40106a: fd std
 40106b: ff 22 jmp QWORD PTR [rdx]
 40106d: 54 push rsp
 40106e: 48 31 c0 xor rax,rax
 401071: 48 ff c0 inc rax
 401074: 48 31 ff xor rdi,rdi
 401077: 48 ff c7 inc rdi
 40107a: 48 89 e6 mov rsi,rsp
 40107d: ba 08 00 00 00 mov edx,0x8
 401082: 0f 05 syscall
 401084: 48 81 ee b0 00 00 00 sub rsi,0xb0
 40108b: 48 31 c0 xor rax,rax
 40108e: 48 31 ff xor rdi,rdi
 401091: 48 8d 36 lea rsi,[rsi]
 401094: ba c0 00 00 00 mov edx,0xc0
 401099: 0f 05 syscall
 40109b: 48 83 c4 08 add rsp,0x8
 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8]
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>This time, the binary is just built for exploitation, there is no realistic functionality.&lt;/p></description></item><item><title>Nowhere to go</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nowhere-to-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nowhere-to-go/</guid><description>&lt;p>We are given compressed filesystem, a kernel image and a &lt;code>qemu&lt;/code> script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-red">#&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="code-dark-blue">*&lt;/span>
bzImage: Linux kernel x86 boot executable bzImage, version 5.9.16 (buildroot@a7f111e5c8c1) #1 SMP Thu Apr 22 11:04:47 UTC 2021, RO-rootFS, swap_dev 0X8, Normal VGA 
rootfs.cpio.gz: gzip compressed data, max compression, from Unix, original size modulo 2^32 5115392
run.sh: Bourne-Again shell script, ASCII text executable
&lt;/code>&lt;/pre>&lt;/div>

&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">#!/bin/bash&lt;/span>

&lt;span class="mtk8">qemu-system-x86_64&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-m&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">128M&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-cpu&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">qemu64&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-nographic&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-monitor&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">/dev/null&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-kernel&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">./bzImage&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-initrd&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">./rootfs.cpio.gz&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-append&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'noapic console=ttyS0 loglevel=3 oops=panic panic=&lt;/span>&lt;span class="mtk4">1 kaslr'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-net&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">user,hostfwd=tcp::5555-:5555&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">\&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">-net&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">nic&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we are told that the remote kernel image is different from the provided one (which does not make sense for the moment).&lt;/p></description></item><item><title>Old Bridge</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/old-bridge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/old-bridge/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>oldbridge&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We have almost all protetions enabled, so we must perform several bypasses to exploit the binary.&lt;/p>
&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>As in most binary exploitation challenges, we must do a reverse engineering step to obtain the assembly instructions or the C source code of the binary to determine what it is doing and how we can exploit it.&lt;/p></description></item><item><title>Optimistic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/optimistic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/optimistic/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>optimistic&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we use Ghidra, we will see the decompiled source code in C for the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> number;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">ssize_t&lt;/span>&lt;span class="mtk1"> read_length;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">uint&lt;/span>&lt;span class="mtk1"> length;&lt;/span>
&lt;span class="mtk1"> undefined4 local_80;&lt;/span>
&lt;span class="mtk1"> undefined2 local_7c;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> option;&lt;/span>
&lt;span class="mtk1"> undefined local_79;&lt;/span>
&lt;span class="mtk1"> undefined email[&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> undefined age[&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> name[&lt;/span>&lt;span class="mtk6">96&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">initialize&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome to the positive community!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"We help you embrace optimism."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Would you like to enroll yourself? (y/n): "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> number &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> option &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">) number;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'y'&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Too bad, see you next time :("&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> local_79 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">6e&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Great! Here&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s a small welcome gift: &lt;/span>&lt;span class="mtk6">%p\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">stack0xfffffffffffffff8);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please provide your details."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Email: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> read_length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, email, &lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> local_7c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (undefined2) read_length;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Age: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> read_length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, age, &lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> local_80 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (undefined4) read_length;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Length of name: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">length);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">64&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) length) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Woah there! You shouldn&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">t be too optimistic."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Name: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> read_length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, name, (ulong) length);&lt;/span>
&lt;span class="mtk1"> length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> ((&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) read_length &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">9&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) length) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Thank you! We&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">ll be in touch soon."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> number &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">isalpha&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) name[(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) length]);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> ((number &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">&amp;amp;&amp;amp;&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">9&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) name[(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1">) length] &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">30&lt;/span>&lt;span class="mtk5">U&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> length &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> length &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Sorry, that&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s an invalid name."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>First of all, we need to enter &lt;code>&amp;quot;y&amp;quot;&lt;/code> to continue with the program. Then, we are given a stack address as a gift. After some data, we are told to enter the length of our name, and it is stored as an integer number.&lt;/p></description></item><item><title>Oxidized ROP</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/oxidized-rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/oxidized-rop/</guid><description>&lt;p>We have a 64-bit binary called &lt;code>oxidized-rop&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we have the source code in Rust, so no need to reverse-engineer the binary.&lt;/p>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>This is &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">fn&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print_banner&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">let&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">mut&lt;/span>&lt;span class="mtk1"> feedback &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Feedback&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> statement&lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> [&lt;/span>&lt;span class="mtk6">0_&lt;/span>&lt;span class="mtk8 mtku">u8&lt;/span>&lt;span class="mtk1">; &lt;/span>&lt;span class="mtk6">INPUT_SIZE&lt;/span>&lt;span class="mtk1">],&lt;/span>
&lt;span class="mtk1"> submitted&lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">false&lt;/span>&lt;span class="mtk1">,&lt;/span>
&lt;span class="mtk1"> };&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">let&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">mut&lt;/span>&lt;span class="mtk1"> login_pin&lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">u32&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0x11223344&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">loop&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print_menu&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">match&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_option&lt;/span>&lt;span class="mtk1">()&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">expect&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Invalid Option"&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">MenuOption&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk8 mtku">Survey&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&amp;gt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">present_survey&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;mut&lt;/span>&lt;span class="mtk1"> feedback),&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">MenuOption&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk8 mtku">ConfigPanel&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&amp;gt;&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">PIN_ENTRY_ENABLED&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">let&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">mut&lt;/span>&lt;span class="mtk1"> input &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">String&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk8">new&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print!&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Enter configuration PIN: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">io&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk8">stdout&lt;/span>&lt;span class="mtk1">()&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">flush&lt;/span>&lt;span class="mtk1">()&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">unwrap&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">io&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">()&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">read_line&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;mut&lt;/span>&lt;span class="mtk1"> input)&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">unwrap&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> login_pin &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> input&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">parse&lt;/span>&lt;span class="mtk1">()&lt;/span>&lt;span class="mtk5">.&lt;/span>&lt;span class="mtk8">expect&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Invalid Pin"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">println!&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Config panel login has been disabled by the admini&lt;/span>&lt;span class="mtk4">strator."&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">present_config_panel&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">login_pin);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">MenuOption&lt;/span>&lt;span class="mtk5">::&lt;/span>&lt;span class="mtk8 mtku">Exit&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&amp;gt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">,&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The program defines a &lt;code>feedback&lt;/code> structure with a &lt;code>statement&lt;/code> array of 200 (&lt;code>INPUT_SIZE&lt;/code>) &lt;code>u8&lt;/code> values (initialized to &lt;code>0&lt;/code>), and a flag &lt;code>submitted&lt;/code> set to &lt;code>false&lt;/code>. Then, we have a hard-coded pin (&lt;code>0x11223344&lt;/code>).&lt;/p></description></item><item><title>Picture Magic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/picture-magic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/picture-magic/</guid><description>&lt;p>We have a 64-bit binary called &lt;code>picture_magic&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'.'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute it, we need to enter a name and then we have this menu:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./picture_magic&lt;/span>
Welcome to...

 ██████╗ ██╗ ██████╗████████╗██╗ ██╗██████╗ ███████╗ ███╗ ███╗ █████╗ ██████╗ ██╗ ██████╗██╗
 ██╔══██╗██║██╔════╝╚══██╔══╝██║ ██║██╔══██╗██╔════╝ ████╗ ████║██╔══██╗██╔════╝ ██║██╔════╝██║
 ██████╔╝██║██║ ██║ ██║ ██║██████╔╝█████╗ ██╔████╔██║███████║██║ ███╗██║██║ ██║
 ██╔═══╝ ██║██║ ██║ ██║ ██║██╔══██╗██╔══╝ ██║╚██╔╝██║██╔══██║██║ ██║██║██║ ╚═╝
 ██║ ██║╚██████╗ ██║ ╚██████╔╝██║ ██║███████╗ ██║ ╚═╝ ██║██║ ██║╚██████╔╝██║╚██████╗██╗
 ╚═╝ ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═╝ ╚═╝╚══════╝ ╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚═╝ ╚═════╝╚═╝

Your all-in-one tool for creating, viewing, modifying and selling digital pictures on the internet. Let your creativity overflow! 

Before creating your masterpiece, please enter your artist name: asdf

+------------------------------+
| Picture Magic |
+------------------------------+
| 1. Create picture |
| 2. Transform picture |
| 3. Show picture |
| 4. Sell picture |
| 5. Change artist name |
| 6. Exit |
+------------------------------+
-&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>It is a typical heap challenge. The reverse engineering process is quite simple, although it is handy to define a structure like this:&lt;/p></description></item><item><title>Pixel Audio</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pixel-audio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pixel-audio/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we have the Python source code of a Flask web server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">#!/usr/bin/python3&lt;/span>

&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">subprocess&lt;/span>

&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">flask&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Flask&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">render_template&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">redirect&lt;/span>

&lt;span class="mtk1">app&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Flask&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">CMD_PATH&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">getenv&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"CMD_PATH"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"./main"&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk8">@&lt;/span>&lt;span class="mtk1">app&lt;/span>&lt;span class="mtk8">.&lt;/span>&lt;span class="mtk8">route&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'/'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">index&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">render_template&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'index.html'&lt;/span>&lt;span class="mtk1">)&lt;/span>


&lt;span class="mtk8">@&lt;/span>&lt;span class="mtk1">app&lt;/span>&lt;span class="mtk8">.&lt;/span>&lt;span class="mtk8">route&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/upload"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">methods&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"POST"&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">upload&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"file"&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">not&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">files&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"File not in request"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">400&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">file&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">files&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"file"&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">is_mp3&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">file&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">filename&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">endswith&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">".mp3"&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">not&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">is_mp3&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"File is not mp3"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">400&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">filepath&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">path&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">join&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/tmp"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"test.mp3"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">file&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">save&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">filepath&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">redirect&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/"&lt;/span>&lt;span class="mtk1">)&lt;/span>


&lt;span class="mtk8">@&lt;/span>&lt;span class="mtk1">app&lt;/span>&lt;span class="mtk8">.&lt;/span>&lt;span class="mtk8">route&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/play"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">methods&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"GET"&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">play&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">sp&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">subprocess&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">run&lt;/span>&lt;span class="mtk1">([&lt;/span>&lt;span class="mtk1">CMD_PATH&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk9 mtki">capture_output&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">text&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">)&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">sp&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">stdout&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">200&lt;/span>


&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'__main__'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">app&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">run&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">host&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk4">"0.0.0.0"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">port&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">1337&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">debug&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The web server allows us to upload a file with &lt;code>.mp3&lt;/code> extension and it will be saved as &lt;code>/tmp/test.mp3&lt;/code>. Also, we can use &lt;code>/play&lt;/code> to execute the &lt;code>main&lt;/code> binary and see the output of the program.&lt;/p></description></item><item><title>PwnShop</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pwnshop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pwnshop/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>pwnshop&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>We can use Ghidra to analyze the binary and look at the decompiled source code in C:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">undefined[&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> option_char;&lt;/span>
&lt;span class="mtk1"> ulong in_RCX;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> option;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"========= HTB PwnShop ==========="&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"What do you wanna do?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"1&amp;gt; Buy&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">2&amp;gt; Sell&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">3&amp;gt; Exit&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">&amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> option_char &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> option &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1">) option_char;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'2'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sell&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'1'&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">buy&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please try again."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ZEXT816&lt;/span>&lt;span class="mtk1">(in_RCX) &lt;/span>&lt;span class="mtk5">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">40&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The first option is &lt;code>buy&lt;/code>:&lt;/p></description></item><item><title>Questionnaire</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/questionnaire/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/questionnaire/</guid><description>&lt;p>We are asked to answer these questions about binary exploitation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">nc&lt;/span> 161.35.34.21 30758
&lt;span class="code-blue">This is a simple questionnaire to get started with the basics.&lt;/span>

&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span> 
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ When compiling C/C++ source code in Linux, an ELF (Executable and Linkable Format) file is created. ◉&lt;/span>
&lt;span class="code-blue">◉ The flags added when compiling can affect the binary in various ways, like the protections. ◉&lt;/span>
&lt;span class="code-blue">◉ Another thing affected can be the architecture and the way it's linked. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ If the system in which the challenge is compiled is x86_64 and no flag is specified, ◉&lt;/span>
&lt;span class="code-blue">◉ the ELF would be x86-64 / 64-bit. If it's compiled with a flag to indicate the system, ◉&lt;/span>
&lt;span class="code-blue">◉ it can be x86 / 32-bit binary. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ To reduce its size and make debugging more difficult, the binary can be stripped or not stripped. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-green">Dynamic linking&lt;span class="code-blue">: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ A pointer to the linked file is included in the executable, and the file contents are not included ◉&lt;/span>
&lt;span class="code-blue">◉ at link time. These files are used when the program is run. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-yellow">Static linking&lt;span class="code-blue">: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The code for all the routines called by your program becomes part of the executable file. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-red">Stripped&lt;span class="code-blue">: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The binary does not contain debugging information. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-magenta">Not Stripped&lt;span class="code-blue">: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The binary contains debugging information. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The most common protections in a binary are: ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-red">Canary&lt;span class="code-blue">: A random value that is generated, put on the stack, and checked before that function is ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ left again. If the canary value is not correct-has been changed or overwritten, the application will ◉&lt;/span>
&lt;span class="code-blue">◉ immediately stop. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-green">NX&lt;span class="code-blue">: Stands for non-executable segments, meaning we cannot write and execute code on the stack. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-yellow">PIE&lt;span class="code-blue">: Stands for Position Independent Executable, which randomizes the base address of the binary ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ as it tells the loader which virtual address it should use. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-magenta">RelRO&lt;span class="code-blue">: Stands for Relocation Read-Only. The headers of the binary are marked as read-only. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Run the '&lt;span class="code-magenta">file&lt;span class="code-blue">' command in the terminal and '&lt;span class="code-magenta">checksec&lt;span class="code-blue">' inside the debugger. ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The output of '&lt;span class="code-magenta">file&lt;span class="code-blue">' command: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ ✗ file test ◉&lt;/span>
&lt;span class="code-blue">◉ test: ELF &lt;span class="code-red">64-bit&lt;span class="code-blue"> LSB executable, x86-64, version 1 (SYSV), &lt;span class="code-yellow">dynamically linked&lt;span class="code-blue">, ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=5a83587fbda6ad7b1aeee2d59f027a882bf2a429, ◉&lt;/span>
&lt;span class="code-blue">◉ for GNU/Linux 3.2.0, &lt;span class="code-white">not stripped&lt;span class="code-blue">. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The output of '&lt;span class="code-magenta">checksec&lt;span class="code-blue">' command: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ gef➤ checksec ◉&lt;/span>
&lt;span class="code-blue">◉ Canary : &lt;span class="code-red">✘&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ NX : &lt;span class="code-green">✓&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ PIE : &lt;span class="code-red">✘&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ Fortify : &lt;span class="code-red">✘&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ RelRO : &lt;span class="code-yellow">Partial&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span>

&lt;span class="code-blue">[*] Question number 0x1:&lt;/span>

&lt;span class="code-blue">Is this a '32-bit' or '64-bit' ELF? (e.g. 1337-bit)&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; 64-bit&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0x2:&lt;/span>

&lt;span class="code-blue">What's the linking of the binary? (e.g. static, dynamic)&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; dynamic&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0x3:&lt;/span>

&lt;span class="code-blue">Is the binary 'stripped' or 'not stripped'?&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; not stripped&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0x4:&lt;/span>

&lt;span class="code-blue">Which protections are enabled (Canary, NX, PIE, Fortify)?&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; NX&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-green">Great job&lt;span class="code-blue"> so far! Now it's time to see some C code and a binary file. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ In the &lt;span class="code-red">pwn_questionnaire.zip&lt;span class="code-blue"> there are two files: ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ 1. test.c ◉&lt;/span>
&lt;span class="code-blue">◉ 2. test ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The 'test.c' is the source code and 'test' is the output binary. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Let's start by analyzing the code. ◉&lt;/span>
&lt;span class="code-blue">◉ First of all, let's focus on the '&lt;span class="code-cyan">#include &amp;lt;stdio.h&amp;gt;&lt;span class="code-blue">' line. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ It includes the '&lt;span class="code-cyan">stdio.h&lt;span class="code-blue">' header file to use some of the standard functions like '&lt;span class="code-cyan">printf()&lt;span class="code-blue">'. ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ The same principle applies for the '&lt;span class="code-cyan">#include &amp;lt;stdlib.h&amp;gt;&lt;span class="code-blue">' line, for other functions like '&lt;span class="code-cyan">system()&lt;span class="code-blue">'. ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Now, let's take a closer look at: ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">void&lt;span class="code-green"> main&lt;span class="code-white">(){&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">vuln&lt;span class="code-white">();&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-white">}&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ By default, a binary file starts executing from the '&lt;span class="code-cyan">main()&lt;span class="code-blue">' function. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ In this case, '&lt;span class="code-cyan">main()&lt;span class="code-blue">' only calls another function, '&lt;span class="code-cyan">vuln()&lt;span class="code-blue">'. ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ The function '&lt;span class="code-cyan">vuln()&lt;span class="code-blue">' has 3 lines. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">void&lt;span class="code-green"> vuln&lt;span class="code-white">(){&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">char&lt;span class="code-white"> buffer[&lt;span class="code-magenta">0x20&lt;span class="code-white">] = {&lt;span class="code-magenta">0&lt;span class="code-white">};&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">fprintf&lt;span class="code-white">(stdout, "&lt;span class="code-magenta">\n&lt;span class="code-white">Enter payload here: ");&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">fgets&lt;span class="code-white">(buffer, &lt;span class="code-magenta">0x100&lt;span class="code-white">, stdin);&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-white">}&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ The first line declares a &lt;span class="code-magenta">0x20-byte&lt;span class="code-blue"> buffer of characters and fills it with zeros. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ The second line calls '&lt;span class="code-cyan">fprintf()&lt;span class="code-blue">' to print a message to stdout. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ Finally, the third line calls '&lt;span class="code-cyan">fgets()&lt;span class="code-blue">' to read &lt;span class="code-magenta">0x100&lt;span class="code-blue"> bytes from stdin and store them to the ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ aformentioned buffer. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Then, there is a custom '&lt;span class="code-cyan">gg()&lt;span class="code-blue">' function which calls the standard '&lt;span class="code-cyan">system()&lt;span class="code-blue">' function to print the ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ flag. This function is never called by default. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">void&lt;span class="code-green"> gg&lt;span class="code-white">(){&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-cyan">system&lt;span class="code-white">("cat flag.txt");&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-white">}&lt;span class="code-blue"> ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Run the 'man &amp;lt;function_name&amp;gt;' command to see the manual page of a standard function (e.g. man fgets).◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span>

&lt;span class="code-blue">[*] Question number 0x5:&lt;/span>

&lt;span class="code-blue">What is the name of the custom function the gets called inside `main()`? (e.g. vulnerable_function())&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; vuln&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0x6:&lt;/span>

&lt;span class="code-blue">What is the size of the 'buffer' (in hex or decimal)?&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; 0x20&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0x7:&lt;/span>

&lt;span class="code-blue">Which custom function is never called? (e.g. vuln())&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; gg&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-green">Excellent&lt;span class="code-blue">! Now it's time to talk about &lt;span class="code-yellow">Buffer Overflows&lt;span class="code-blue">. ◉&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ &lt;span class="code-yellow">Buffer Overflow&lt;span class="code-blue"> means there is a buffer of characters, integers or any other type of variables, ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ and someone inserts into this buffer more bytes than it can store. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ If the user inserts more bytes than the buffer's size, they will be stored somewhere in the memory ◉&lt;/span>
&lt;span class="code-blue">◉ after the address of the buffer, overwriting important addresses for the flow of the program. ◉&lt;/span>
&lt;span class="code-blue">◉ This, in most cases, will make the program crash. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ When a function is called, the program knows where to return because of the '&lt;span class="code-cyan">return address&lt;span class="code-blue">'. If the ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ player overwrites this address, they can redirect the flow of the program wherever they want. ◉&lt;/span>
&lt;span class="code-blue">◉ To print a function's address, run '&lt;span class="code-magenta">p &amp;lt;function_name&amp;gt;&lt;span class="code-blue">' inside 'gdb'. (e.g. p main) ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ gef➤ p gg ◉&lt;/span>
&lt;span class="code-blue">◉ $1 = {&amp;lt;text variable, no debug info&amp;gt;} &lt;span class="code-green">0x401176&lt;span class="code-blue"> &amp;lt;gg&amp;gt; ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ To perform a &lt;span class="code-yellow">Buffer Overflow&lt;span class="code-blue"> in the simplest way, we take these things into consideration. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ 1. &lt;span class="code-red">Canary&lt;span class="code-blue"> is disabled so it won't quit after the canary address is overwritten. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ 2. &lt;span class="code-yellow">PIE&lt;span class="code-blue"> is disabled so the addresses of the binary functions are not randomized and the user knows ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ where to return after overwritting the return address. ◉&lt;/span>
&lt;span class="code-blue">◉ 3. There is a buffer with N size. ◉&lt;/span>
&lt;span class="code-blue">◉ 4. There is a function that reads to this buffer more than N bytes. ◉&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Run &lt;span class="code-cyan">printf 'A%.0s' {1..30} | ./test&lt;span class="code-blue"> to enter 30*"A" into the program. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉ Run the program manually with "&lt;span class="code-magenta">./test&lt;span class="code-blue">" and insert 30*A, then 39, then 40 and see what happens. ◉&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-blue">◉ ◉&lt;/span>
&lt;span class="code-blue">◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉&lt;/span>

&lt;span class="code-blue">[*] Question number 0x8:&lt;/span>

&lt;span class="code-blue">What is the name of the standard function that could trigger a Buffer Overflow? (e.g. fprintf())&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; fgets&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0x9:&lt;/span>

&lt;span class="code-blue">Insert 30, then 39, then 40 'A's in the program and see the output.&lt;/span>

&lt;span class="code-blue">After how many bytes a Segmentation Fault occurs (in hex or decimal)?&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; 40&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">[*] Question number 0xa:&lt;/span>

&lt;span class="code-blue">What is the address of 'gg()' in hex? (e.g. 0x401337)&lt;/span>

&lt;span class="code-blue">&amp;gt;&amp;gt; 0x401176&lt;/span>

&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ Correct ♠&lt;/span>
&lt;span class="code-green">♠ ♠&lt;/span>
&lt;span class="code-green">♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠ ♠&lt;/span>

&lt;span class="code-blue">Great job! It's high time you solved your first challenge! Here is the flag!&lt;/span>

&lt;span class="code-blue">HTB{l34rn_th3_b451c5_b3f0r4_u_5t4rt}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reg</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>reg&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">run&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Let&amp;rsquo;s see &lt;code>run&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">run&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> local_38[&lt;/span>&lt;span class="mtk6">48&lt;/span>&lt;span class="mtk1">];&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">initialize&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Enter your name : "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(local_38);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Registered!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The binary is vulnerable to Buffer Overflow since there is a variable called &lt;code>local_38&lt;/code> that has 48 bytes assigned as buffer, but the program is using &lt;code>gets&lt;/code>, which is an insecure function because it does not limit the length of the input data, thus overflowing the reserved buffer if the size of the input data is greater than 48 bytes.&lt;/p></description></item><item><title>Regularity</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/regularity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/regularity/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>regularity&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-red">No RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-yellow">NX unknown - GNU_STACK missing&lt;/span> 
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span>
Stack: &lt;span class="code-dark-red">Executable&lt;/span>
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span>
Stripped: &lt;span class="code-dark-red">No&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>The binary is so small, that we can work using &lt;code>objdump&lt;/code> and directly analyze the assembly code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">objdump&lt;/span> -M intel -d &lt;span class="mtku">regularity&lt;/span>

regularity:	file format elf64-x86-64

Disassembly of section .text:

0000000000401000 &amp;lt;_start&amp;gt;:
 401000: bf 01 00 00 00 	mov	edi, 1
 401005: 48 be 00 20 40 00 00 00 00 00	movabs	rsi, 4202496
 40100f: ba 2a 00 00 00 	mov	edx, 42
 401014: e8 2a 00 00 00 	call	0x401043 &amp;lt;write&amp;gt; 
 401019: e8 2d 00 00 00 	call	0x40104b &amp;lt;read&amp;gt;
 40101e: bf 01 00 00 00 	mov	edi, 1
 401023: 48 be 2a 20 40 00 00 00 00 00	movabs	rsi, 4202538
 40102d: ba 27 00 00 00 	mov	edx, 39
 401032: e8 0c 00 00 00 	call	0x401043 &amp;lt;write&amp;gt;
 401037: 48 be 6f 10 40 00 00 00 00 00	movabs	rsi, 4198511
 401041: ff e6 	jmp	rsi

0000000000401043 &amp;lt;write&amp;gt;:
 401043: b8 01 00 00 00 	mov	eax, 1
 401048: 0f 05 	syscall
 40104a: c3 	ret

000000000040104b &amp;lt;read&amp;gt;:
 40104b: 48 81 ec 00 01 00 00 	sub	rsp, 256
 401052: b8 00 00 00 00 	mov	eax, 0
 401057: bf 00 00 00 00 	mov	edi, 0
 40105c: 48 8d 34 24 	lea	rsi, [rsp]
 401060: ba 10 01 00 00 	mov	edx, 272
 401065: 0f 05 	syscall
 401067: 48 81 c4 00 01 00 00 	add	rsp, 256
 40106e: c3 	ret

000000000040106f &amp;lt;exit&amp;gt;:
 40106f: b8 3c 00 00 00 	mov	eax, 60
 401074: 31 ff 	xor	edi, edi
 401076: 0f 05 	syscall
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, the program simply writes a message to &lt;code>stdout&lt;/code>, reads from &lt;code>stdin&lt;/code> and prints another message:&lt;/p></description></item><item><title>Robot Factory</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/robot-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/robot-factory/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>robot_factory&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we also have the remote Glibc library (&lt;code>libc.so.6&lt;/code>). Let&amp;rsquo;s patch the binary with &lt;a target="_blank" href="https://github.com/io12/pwninit">&lt;code>pwninit&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">pwninit&lt;/span> --bin &lt;span class="mtku">robot_factory&lt;/span> --libc &lt;span class="mtku">libc.so.6&lt;/span> --no-template
&lt;span class="code-dark-blue">bin&lt;/span>: &lt;span class="code-blue">robot_factory&lt;/span>
&lt;span class="code-dark-yellow">libc&lt;/span>: &lt;span class="code-yellow">libc.so.6&lt;/span>

&lt;span class="code-green">fetching linker&lt;/span>
&lt;span class="code-green">https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.31-0ubuntu9.2_amd64.deb&lt;/span>
&lt;span class="code-yellow">unstripping libc&lt;/span>
&lt;span class="code-green">https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.31-0ubuntu9.2_amd64.deb&lt;/span>
&lt;span class="code-magenta">warning: failed unstripping libc: failed running eu-unstrip, please install elfutils: No such file or directory (os error 2)&lt;/span> 
&lt;span class="code-dark-green">setting &lt;span class="code-green">./ld-2.31.so&lt;span class="code-dark-green"> executable&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-dark-green">copying &lt;span class="code-green">robot_factory&lt;span class="code-dark-green"> to &lt;span class="code-green">robot_factory_patched&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-dark-green">running patchelf on &lt;span class="code-green">robot_factory_patched&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Let&amp;rsquo;s open the binary in Ghidra to analyze the decompiled C code. This is &lt;code>main&lt;/code>:&lt;/p></description></item><item><title>Sacred Scrolls: Revenge</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>sacred_scrolls&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this decompiled C source code for the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> undefined8 &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">puVar1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> i;&lt;/span>
&lt;span class="mtk1"> byte bVar2;&lt;/span>
&lt;span class="mtk1"> undefined wizard_tag[&lt;/span>&lt;span class="mtk6">1528&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> undefined8 uStack_110;&lt;/span>
&lt;span class="mtk1"> undefined8 target;&lt;/span>
&lt;span class="mtk1"> undefined8 local_100;&lt;/span>
&lt;span class="mtk1"> undefined8 local_f8;&lt;/span>
&lt;span class="mtk1"> undefined8 local_f0;&lt;/span>
&lt;span class="mtk1"> undefined8 local_e8;&lt;/span>
&lt;span class="mtk1"> undefined8 local_e0;&lt;/span>
&lt;span class="mtk1"> undefined8 local_d8;&lt;/span>
&lt;span class="mtk1"> undefined8 local_d0;&lt;/span>
&lt;span class="mtk1"> undefined8 local_c8;&lt;/span>
&lt;span class="mtk1"> undefined8 local_c0;&lt;/span>
&lt;span class="mtk1"> undefined8 local_b8;&lt;/span>
&lt;span class="mtk1"> undefined8 local_b0;&lt;/span>
&lt;span class="mtk1"> undefined8 local_a8;&lt;/span>
&lt;span class="mtk1"> undefined8 local_a0;&lt;/span>
&lt;span class="mtk1"> undefined8 local_98;&lt;/span>
&lt;span class="mtk1"> undefined8 local_90;&lt;/span>
&lt;span class="mtk1"> undefined8 local_88;&lt;/span>
&lt;span class="mtk1"> undefined8 local_80;&lt;/span>
&lt;span class="mtk1"> undefined8 local_78;&lt;/span>
&lt;span class="mtk1"> undefined8 local_70;&lt;/span>
&lt;span class="mtk1"> undefined8 local_68;&lt;/span>
&lt;span class="mtk1"> undefined8 local_60;&lt;/span>
&lt;span class="mtk1"> undefined8 local_58;&lt;/span>
&lt;span class="mtk1"> undefined8 local_50;&lt;/span>
&lt;span class="mtk1"> undefined8 local_48;&lt;/span>
&lt;span class="mtk1"> undefined &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">wizard_tag_copy;&lt;/span>
&lt;span class="mtk1"> undefined8 local_38;&lt;/span>
&lt;span class="mtk1"> undefined4 local_2c;&lt;/span>

&lt;span class="mtk1"> bVar2 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> uStack_110 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">400efa&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> uStack_110 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">400eff&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">banner&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> uStack_110 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">400f09&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">clean&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> uStack_110 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">400f1a&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Enter your wizard tag: "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> local_2c &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">600&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> local_38 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">5ff&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> wizard_tag_copy &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> wizard_tag;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, wizard_tag, &lt;/span>&lt;span class="mtk6">1535&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Interact with magic library &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, wizard_tag_copy);&lt;/span> 
&lt;span class="mtk1"> puVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">target;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">25&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; i&lt;/span>&lt;span class="mtk5">--&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">puVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> puVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1 &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> (ulong)bVar2 &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">(), i &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> puVar1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (undefined8 &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk8">spell_read&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> target &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">puVar1;&lt;/span>
&lt;span class="mtk1"> local_100 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_f8 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_f0 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_e8 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_e0 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">5&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_d8 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_d0 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">7&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_c8 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_c0 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">9&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_b8 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_b0 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">b&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_a8 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">c&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_a0 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">d&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_98 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">e&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_90 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">f&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_88 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_80 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">11&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_78 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">12&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_70 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">13&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_68 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">14&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_60 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">15&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_58 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_50 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">17&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> local_48 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> puVar1[&lt;/span>&lt;span class="mtk6">24&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00401f80,&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">target);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (i &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">spell_upload&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">spell_save&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">target);&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Here we are asked to enter wizard tag and then we have menu with three options:&lt;/p></description></item><item><title>Shooting star</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/shooting-star/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/shooting-star/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>shooting_star&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>We can use Ghidra to analyze the binary and look at the decompiled source code in C:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">message, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">5b&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">star&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>This function calls &lt;code>star&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">star&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> option[&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> undefined input_data[&lt;/span>&lt;span class="mtk6">64&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, option, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'1'&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk4">"&amp;gt;&amp;gt; "&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, input_data, &lt;/span>&lt;span class="mtk6">512&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">May your wish come true!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1a&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'2'&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"Isn&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">t the sky amazing?!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">18&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'3'&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">write&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"A star is an astronomical object consisting of a &lt;/span>&lt;span class="mtk4">luminous spheroid of plasma held together by its o&lt;/span>&lt;span class="mtk4">wn gravity. The nearest star to Earth is the Sun. &lt;/span>&lt;span class="mtk4">Many other stars are visible to the naked eye from&lt;/span>&lt;span class="mtk4"> Earth during the night, appearing as a multitude &lt;/span>&lt;span class="mtk4">of fixed luminous points in the sky due to their i&lt;/span>&lt;span class="mtk4">mmense distance from Earth. Historically, the most&lt;/span>&lt;span class="mtk4"> prominent stars were grouped into constellations &lt;/span>&lt;span class="mtk4">and asterisms, the brightest of which gained prope&lt;/span>&lt;span class="mtk4">r names. Astronomers have assembled star catalogue&lt;/span>&lt;span class="mtk4">s that identify the known stars and provide standa&lt;/span>&lt;span class="mtk4">rdized stellar designations.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">242&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="buffer-overflow-vulnerability">Buffer Overflow vulnerability&lt;/h3>
&lt;p>The binary is vulnerable to Buffer Overflow since there is a variable called &lt;code>input_data&lt;/code> that has 64 bytes assigned as buffer, but the program is reading up to 512 bytes from &lt;code>stdin&lt;/code> and storing the data into &lt;code>input_data&lt;/code>, overflowing the reserved buffer if the size of the input data is greater than 64 bytes.&lt;/p></description></item><item><title>Sound of Silence</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sound-of-silence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sound-of-silence/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>sound_of_silence&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the remote Glibc library and loader:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">glibc/ld-linux-x86-64.so.2&lt;/span> &lt;span class="mtku">glibc/libc.so.6&lt;/span>
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.4) stable release version 2.35. 
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.4.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this simple &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Space</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>space&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-red">No RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It has no protections, so we can potentially run custom shellcode on the stack if we exploit a Buffer Overflow vulnerability.&lt;/p>
&lt;h2 id="buffer-overflow-vulnerability">Buffer Overflow vulnerability&lt;/h2>
&lt;p>If we execute the binary, we have only a prompt to enter data, and then exit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./space&lt;/span>
> A

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./space&lt;/span>
> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 
zsh: segmentation fault (core dumped) ./space
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We notice that there is a segmentation fault (maybe because of a Buffer Overflow). Let&amp;rsquo;s run GDB to calculate the offset to control the &lt;code>$eip&lt;/code> register using a pattern string:&lt;/p></description></item><item><title>Space pirate: Entrypoint</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>sp_entrypoint&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can run it to view two options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./sp_entrypoint&lt;/span>


 &lt;span class="code-green"> Authentication System&lt;/span>

&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span> 
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░▒▓▓▓░░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓▒░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▒░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒░░░▓▓░░░▓▓▒░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒░░░▒▓▓░░░▓▓▒ ░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░░░░░▓▓░░░▓▓▓ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▓▓▓▒░░░░▓▓▒ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░▒░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓░▒▓▓▓░░░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒░▓▓▓░░░░ ▓▓ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-green">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>


&lt;span class="code-green">1. Scan card 💳&lt;/span>
&lt;span class="code-green">2. Insert password &lt;/span>
&lt;span class="code-green">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we decompile the binary with Ghidra, we see the &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Space pirate: Going Deeper</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>sp_going_deeper&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run it, we will see three options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./sp_going_deeper&lt;/span>


&lt;span class="code-yellow"> Trying to leak information from the pc.. 🖥️&lt;/span>


&lt;span class="code-yellow"> ____________________________________________________&lt;/span>
&lt;span class="code-yellow"> / \&lt;/span>
&lt;span class="code-yellow"> | _____________________________________________ |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | | goldenfang@d12:$ history | |&lt;/span>
&lt;span class="code-yellow"> | | 1 ls | |&lt;/span>
&lt;span class="code-yellow"> | | 2 mv secret_pass.txt flag.txt | |&lt;/span>
&lt;span class="code-yellow"> | | 3 chmod -x missile_launcher.py | |&lt;/span>
&lt;span class="code-yellow"> | | 4 ls | |&lt;/span>
&lt;span class="code-yellow"> | | 5 history | |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | | | |&lt;/span>
&lt;span class="code-yellow"> | |_____________________________________________| |&lt;/span>
&lt;span class="code-yellow"> | |&lt;/span>
&lt;span class="code-yellow"> \_____________________________________________________/&lt;/span>
&lt;span class="code-yellow"> \_______________________________________/&lt;/span>
&lt;span class="code-yellow"> _______________________________________________&lt;/span>
&lt;span class="code-yellow"> _-' .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. --- `-_&lt;/span>
&lt;span class="code-yellow"> _-'.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--. .-.-.`-_&lt;/span>
&lt;span class="code-yellow"> _-'.-.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-`__`. .-.-.-.`-_&lt;/span>
&lt;span class="code-yellow"> _-'.-.-.-.-. .-----.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-----. .-.-.-.-.`-_&lt;/span>
&lt;span class="code-yellow"> _-'.-.-.-.-.-. .---.-. .-----------------------------. .-.---. .---.-.-.-.`-_&lt;/span>
&lt;span class="code-yellow">:-----------------------------------------------------------------------------:&lt;/span> 
&lt;span class="code-yellow">`---._.-----------------------------------------------------------------._.---'&lt;/span>


&lt;span class="code-blue">[*] Safety mechanisms are enabled!&lt;/span>
&lt;span class="code-blue">[*] Values are set to: a = [1], b = [2], c = [3].&lt;/span>
&lt;span class="code-blue">[*] If you want to continue, disable the mechanism or login as admin.&lt;/span>

&lt;span class="code-blue">1. Disable mechanisms ⚙️&lt;/span>
&lt;span class="code-blue">2. Login ✅&lt;/span>
&lt;span class="code-blue">3. Exit 🏃&lt;/span>
&lt;span class="code-blue">&amp;gt;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>At this point, let&amp;rsquo;s open the binary in Ghidra to analyze decompiled source code in C. This is the &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Space pirate: Retribution</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-retribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-retribution/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>sp_retribution&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> local_b[&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">];&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">banner&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00101f68, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00100d78);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, local_b, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (local_b[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'1'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">show_missiles&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (local_b[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'2'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">missile_launcher&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[-] Invalid option! Exiting..&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00100d70);&lt;/span> 
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">520&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, we have two options:&lt;/p></description></item><item><title>Spellbook</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spellbook/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>spellbook&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this decompiled C source code for the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">size_t&lt;/span>&lt;span class="mtk1"> option;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">banner&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">(), option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">show&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">edit&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">goto&lt;/span>&lt;span class="mtk1"> LAB_001010e9;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">delete&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">add&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1">LAB_001010e9:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">[-] You are not a wizard! You are a muggle!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_001017f7);&lt;/span> 
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run the binary, it shows a typical menu for a heap exploitation challenge:&lt;/p></description></item><item><title>Spooky Time</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spooky-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spooky-time/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>spooky_time&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-red">No RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra we will see this &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> first_input[&lt;/span>&lt;span class="mtk6">12&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> second_input[&lt;/span>&lt;span class="mtk6">312&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>

&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">banner&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"It&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s your chance to scare those little kids, say some&lt;/span>&lt;span class="mtk4">thing scary!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%11s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, first_input);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Seriously?? I bet you can do better than "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(first_input);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Anyway, here comes another bunch of kids, let&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s try one more time.."&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%299s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, second_input);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Ok, you are not good with that, do you think that &lt;/span>&lt;span class="mtk4">was scary??&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(second_input);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Better luck next time!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (canary &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__stack_chk_fail&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="format-string-vulnerability">Format String vulnerability&lt;/h3>
&lt;p>There are two Format String vulnerabilities since we can provide two strings that will be used as first parameter for &lt;code>printf&lt;/code>. The first parameter of &lt;code>printf&lt;/code> is supposed to be a format string to parse subsequent parameters as integers (&lt;code>%d&lt;/code>), hexadecimal values (&lt;code>%x&lt;/code>), characters (&lt;code>%c&lt;/code>), strings (&lt;code>%s&lt;/code>)&amp;hellip;&lt;/p></description></item><item><title>Trick or Deal</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/trick-or-deal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/trick-or-deal/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>trick_or_deal&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we use Ghidra, we will find the following decompiled source code for function &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">undefined8 &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_1&lt;/span>&lt;span class="mtk1">, undefined8 &lt;/span>&lt;span class="mtk9 mtki">param_2&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> undefined8 in_R9;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> &lt;/span>&lt;span class="mtk6">%s&lt;/span>&lt;span class="mtk4"> Welcome to the Intergalactic Weapon Black Market &lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_0010123c, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00101241, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_0010123c, in_R9, param_2);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">Loading the latest weaponry . . .&lt;/span>&lt;span class="mtk6">\n%s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_0010128b, &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">DAT_00101241);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sleep&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">update_weapons&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">menu&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It is calling &lt;code>update_weapons&lt;/code>:&lt;/p></description></item><item><title>Vault-breaker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/</guid><description>&lt;p>We have a 64-bit binary called &lt;code>vault-breaker&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./.glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute it, we have two options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vault-breaker&lt;/span>


&lt;span class="code-blue">Current status: &lt;span class="code-green">Unlocked&lt;span class="code-blue"> 🔓&lt;/span>&lt;/span>&lt;/span>

&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span> 
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▒▒▓▓▓▓▒▒▒▒▒▒░░&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒░░▒▒░░████▓▓████░░▒▒▓▓▓▓▓▓▓▓▓▓░░▒▒░░ ░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▒▒▓▓░░▓▓▒▒▒▒▒▒░░░░▒▒▓▓██▒▒▒▒▓▓▓▓▓▓░░░░ ░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒▓▓░░▓▓░░██▓▓▓▓▓▓▒▒▒▒██░░▓▓▓▓▒▒▒▒ ░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓░░░░▓▓▒▒░░▒▒██░░██▒▒▒▒▒▒▒▒██▒▒▒▒██▓▓▒▒▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓░░░░▒▒▓▓▒▒▓▓░░▒▒▓▓▒▒▒▒░░░░░░▒▒██░░██▒▒▒▒ ▒▒▒▒▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▒▒░░░░▓▓▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░▒▒▓▓▓▓▓▓▒▒ ░░▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▒▒▒▒▒▒▓▓░░▓▓░░░░░░░░▒▒▒▒██▒▒██▒▒ ▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▓▓▒▒░░▒▒▓▓░░░░░░░░░░▒▒▒▒▓▓▒▒██░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▓▓▒▒░░▒▒▓▓░░▒▒░░░░░░░░░░▓▓▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░▒▒▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▓▒▒▒▒░░▓▓▒▒░░░░▒▒░░▒▒▒▒▓▓▒▒▓▓░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▒▒▓▓▓▓▒▒▓▓░░░░░░▒▒░░▒▒▓▓▓▓██▒▒ ░░▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓▓▓██▒▒░░▒▒▒▒▓▓▒▒░░░░▒▒▒▒▓▓▓▓▒▒░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓██▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒██▒▒██▒▒░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▓▓▒▒▒▒░░▓▓▒▒▒▒▒▒▓▓▒▒██▒▒▓▓▓▓░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓██▓▓▒▒██▒▒░░▒▒▒▒▒▒▓▓▓▓▓▓▒▒▓▓▓▓▓▓░░░░ ░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▓▓██▓▓████▒▒▒▒▓▓▓▓▓▓▓▓▓▓░░░░░░░░ ░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓██▒▒▓▓▒▒▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>
&lt;span class="code-blue">▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓&lt;/span>


&lt;span class="code-green">[+] Random secure encryption key has been generated!&lt;/span>

&lt;span class="code-blue">1. Generate new key 🆕&lt;/span>
&lt;span class="code-blue">2. Secure the Vault 🔒&lt;/span>

&lt;span class="code-blue">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we use Ghidra to decompile the binary, we can see this &lt;code>main&lt;/code> function:&lt;/p></description></item><item><title>Void</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/void/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>void&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we use Ghidra, we will find this decompiled C code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> data[&lt;/span>&lt;span class="mtk6">64&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, data, &lt;/span>&lt;span class="mtk6">200&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The code is very short and there is only a single point to enter data.&lt;/p>
&lt;h2 id="buffer-overflow-vulnerability">Buffer Overflow vulnerability&lt;/h2>
&lt;p>There&amp;rsquo;s a clear Buffer Overflow vulnerability since &lt;code>data&lt;/code> is a &lt;code>char&lt;/code> array of &lt;code>64&lt;/code> bytes, and &lt;code>read&lt;/code> is reading up to &lt;code>200&lt;/code> bytes and storing the information at &lt;code>data&lt;/code>. Therefore, we can modify values that come after the buffer reserved for &lt;code>data&lt;/code> and control the execution flow of the program.&lt;/p></description></item><item><title>Zombiedote</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombiedote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombiedote/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>zombiedote&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>We have a typical menu for a heap exploitation challenge:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./zombiedote&lt;/span>
&lt;span class="code-white">[ BioShield Solutions Research Institute ]&lt;/span>
&lt;span class="code-blue">Virus Concentration Levels Logging - Manual Mode: &lt;/span>&lt;span class="code-green">ON&lt;/span> 

&lt;span class="code-blue">[ MANUAL MODE LOGGING ]&lt;/span>
&lt;span class="code-white">[1] Create log&lt;/span>
&lt;span class="code-white">[2] Insert into log&lt;/span>
&lt;span class="code-white">[3] Delete log&lt;/span>
&lt;span class="code-white">[4] Edit log&lt;/span>
&lt;span class="code-white">[5] Inspect log&lt;/span>
&lt;span class="code-white">&amp;gt;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open the binary in Ghidra, we will see the decompiled C scource code for program. After setting up variable names and types and understanding the log structure, we can define the following &lt;code>struct&lt;/code> in Ghidra to improve code readability:&lt;/p></description></item><item><title>Zombienator</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombienator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombienator/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>zombienator&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
RUNPATH: &lt;span class="code-dark-red">b'./glibc/'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this decompiled C source code for the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> ulong option;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">banner&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">##########################&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"># #&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"># 1. Create Zombienator #&lt;/span>&lt;span class="mtk10">\ &lt;/span>&lt;span class="mtk4">n# 2. Remove Zombienator #&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"># 3. Display Zombienator #&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"># 4. Attack #&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"># 5. Exit #&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4"># #&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">##########################&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">&amp;gt; &amp;gt; "&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> option &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read_num&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">attack&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> option) &lt;/span>&lt;span class="mtk5">goto&lt;/span>&lt;span class="mtk1"> LAB_00101a2a;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">display&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> option) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">create&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (option &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">removez&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1">LAB_00101a2a:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Good luck!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">// WARNING: Subroutine does not return&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">520&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>What we have is a typical menu from a heap exploitation challenge:&lt;/p></description></item></channel></rss>