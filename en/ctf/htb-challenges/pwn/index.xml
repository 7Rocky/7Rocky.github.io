<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwn on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/</link><description>Recent content in Pwn on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>Bat Computer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/</guid><description>We are given a 64-bit binary called batcomputer:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Reverse engineering If we use Ghidra, we will see the decompiled source code in C for the main function:
int main() { int res; int option; char password[16]; char command[76]; setup(); while(true) { while(true) { memset(password, 0, 16); printf("Welcome to your BatComputer, Batman. What would you like to do?</description></item><item><title>Blacksmith</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/</guid><description>We are given a 64-bit binary called blacksmith:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments If we open it in Ghidra, we will see this main function:
void main() { size_t length; long in_FS_OFFSET; int answer; int option; char *message_1; char *message_2; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); message_1 = "You are worthy to carry this Divine Weapon and bring peace to our homeland!</description></item><item><title>CRSid</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/</guid><description>We have a 64-bit binary called crsid:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' If we execute it, we need to enter a CRSid and then we have this menu:
$ ./crsid ██████╗██████╗ ███████╗██╗██████╗ ██╔════╝██╔══██╗██╔════╝██║██╔══██╗ ██║ ██████╔╝███████╗██║██║ ██║ ██║ ██╔══██╗╚════██║██║██║ ██║ ╚██████╗██║ ██║███████║██║██████╔╝ ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝╚═════╝ [i] Enter your CRSid: asdf ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] Reverse engineering It is a typical heap challenge.</description></item><item><title>Entity</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/entity/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled If we connect to the remote instance, we see this:
$ nc 134.122.106.203 30576 Something strange is coming out of the TV.. (T)ry to turn it off (R)un (C)ry &amp;gt;&amp;gt; Nothing really explanatory&amp;hellip;
Static code analysis This time, we are given the original C source code (chall.c):</description></item><item><title>Finale</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/finale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/finale/</guid><description>We are given a 64-bit binary called finale:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Environment setup It might happen that we don&amp;rsquo;t have a version of Glibc that is accepted by the program:
$ ./finale ./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale) Luckily, in Spooky Time we were provided with a library and a loader, version 2.35:
$ .</description></item><item><title>Fleet Management</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/</guid><description>We are given a 64-bit binary called fleet_management:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled If we open it in Ghidra, we will see this main function:
int main() { setup(); fprintf(stdout, "%s %s Fleet Management System %s\n", &amp;amp;DAT_001023e5, &amp;amp;DAT_001020e9, &amp;amp;DAT_001023e0); fprintf(stdout, "\n%s[*] Loading . . .\n%s", &amp;amp;DAT_001020f1, &amp;amp;DAT_001020e9); sleep(2); menu(); return 0; } It calls menu:
void menu() { long in_FS_OFFSET; undefined8 uVar1; char local_13 [3]; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); memset(local_13, 0, 3); do { fwrite("</description></item><item><title>Format</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/</guid><description>We are given a 64-bit binary called format:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Reverse engineering After executing it, we see that the program only echoes what we enter:
$ ./format asdf asdf fdsa fdsa Using Ghidra, we can reverse engineer the source code and see what the program is doing:
int main(EVP_PKEY_CTX *param_1) { long canary; long in_FS_OFFSET; canary = *(long *) (in_FS_OFFSET + 0x28); init(param_1); echo(); if (canary !</description></item><item><title>HTB Console</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/</guid><description>We are given a 64-bit binary called htb-console:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering If we use Ghidra, we will see the following main function:
void main() { char command[16]; setup(); puts("Welcome HTB Console Version 0.1 Beta."); do { printf("&amp;gt;&amp;gt; "); fgets(command, 16, stdin); console(command); memset(command, 0, 16); } while(true); } The above code only asks for user input and passes the string to console:</description></item><item><title>Jeeves</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/</guid><description>We are given a 64-bit binary called jeeves:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:
int main() { char name[44]; int fd; void *data; uint code; code = 0xdeadc0d3; printf("Hello, good sir!\nMay I have your name? "); gets(name); printf("Hello %s, hope you have a good day!</description></item><item><title>Leet Test</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/</guid><description>We are given a 64-bit binary called leet_test:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) If we open it in Ghidra, we find this decompiled source code in C:
uint winner = 0xcafebabe; void main() { long in_FS_OFFSET; uint random; int urandom_fd; int flag_fd; void *flag; char name[280]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); initialize(); urandom_fd = open("/dev/urandom", 0); read(urandom_fd, &amp;amp;random, 4); close(urandom_fd); random = random &amp;amp; 0xffff; while (true) { printf("</description></item><item><title>Nightmare</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nightmare/</guid><description>We are given a 64-bit binary called nightmare:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Reverse engineering Using Ghidra, we can read the decompiled source code in C. This is the main function:
void main() { char option; int option_char; setup(); do { while (true) { while (true) { menu(); option_char = getchar(); option = (char)option_char; getchar(); if (option != '3') break; puts("Seriously? We told you that it\'s impossible to exit!</description></item><item><title>No Return</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/</guid><description>We are given a 64-bit binary called no-return:
Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering The binary is statically compiled and is so small that we can print the full assembly here:
$ objdump -M intel -d no-return no-return: file format elf64-x86-64 Disassembly of section .text: 0000000000401000 &amp;lt;.text&amp;gt;: 401000: 5c pop rsp 401001: 5f pop rdi 401002: 5e pop rsi 401003: 5d pop rbp 401004: 5a pop rdx 401005: 59 pop rcx 401006: 5b pop rbx 401007: 48 31 c0 xor rax,rax 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1] 40100d: 48 ff c0 inc rax 401010: de f1 fdivrp st(1),st 401012: ff 22 jmp QWORD PTR [rdx] 401014: 48 2b 74 24 10 sub rsi,QWORD PTR [rsp+0x10] 401019: f5 cmc 40101a: ff 22 jmp QWORD PTR [rdx] 40101c: 48 89 e1 mov rcx,rsp 40101f: fd std 401020: ff 22 jmp QWORD PTR [rdx] 401022: 48 8d 0c d9 lea rcx,[rcx+rbx*8] 401026: fd std 401027: ff 21 jmp QWORD PTR [rcx] 401029: 48 31 d5 xor rbp,rdx 40102c: 0f 95 c4 setne ah 40102f: ff a5 00 00 44 e8 jmp QWORD PTR [rbp-0x17bc0000] 401035: 48 01 f4 add rsp,rsi 401038: de f9 fdivp st(1),st 40103a: ff 22 jmp QWORD PTR [rdx] 40103c: 48 01 dd add rbp,rbx 40103f: 9b fwait 401040: ff 65 c7 jmp QWORD PTR [rbp-0x39] 401043: 88 a7 00 00 44 e8 mov BYTE PTR [rdi-0x17bc0000],ah 401049: f9 stc 40104a: ff 22 jmp QWORD PTR [rdx] 40104c: 59 pop rcx 40104d: 48 89 d1 mov rcx,rdx 401050: 5a pop rdx 401051: ff 21 jmp QWORD PTR [rcx] 401053: 48 ff c1 inc rcx 401056: de f1 fdivrp st(1),st 401058: ff 22 jmp QWORD PTR [rdx] 40105a: 48 92 xchg rdx,rax 40105c: de f9 fdivp st(1),st 40105e: ff 21 jmp QWORD PTR [rcx] 401060: 48 ff c3 inc rbx 401063: de f1 fdivrp st(1),st 401065: ff 22 jmp QWORD PTR [rdx] 401067: 48 87 cf xchg rdi,rcx 40106a: fd std 40106b: ff 22 jmp QWORD PTR [rdx] 40106d: 54 push rsp 40106e: 48 31 c0 xor rax,rax 401071: 48 ff c0 inc rax 401074: 48 31 ff xor rdi,rdi 401077: 48 ff c7 inc rdi 40107a: 48 89 e6 mov rsi,rsp 40107d: ba 08 00 00 00 mov edx,0x8 401082: 0f 05 syscall 401084: 48 81 ee b0 00 00 00 sub rsi,0xb0 40108b: 48 31 c0 xor rax,rax 40108e: 48 31 ff xor rdi,rdi 401091: 48 8d 36 lea rsi,[rsi] 401094: ba c0 00 00 00 mov edx,0xc0 401099: 0f 05 syscall 40109b: 48 83 c4 08 add rsp,0x8 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8] This time, the binary is just built for exploitation, there is no realistic functionality.</description></item><item><title>Optimistic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/optimistic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/optimistic/</guid><description>We are given a 64-bit binary called optimistic:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Reverse engineering If we use Ghidra, we will see the decompiled source code in C for the main function:
void main() { int number; ssize_t read_length; uint length; undefined4 local_80; undefined2 local_7c; char option; undefined local_79; undefined email[8]; undefined age[8]; char name[96]; initialize(); puts("</description></item><item><title>PwnShop</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pwnshop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pwnshop/</guid><description>We are given a 64-bit binary called pwnshop:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Reverse engineering We can use Ghidra to analyze the binary and look at the decompiled source code in C:
undefined[16] main() { int option_char; ulong in_RCX; char option; setup(); puts("========= HTB PwnShop ==========="); while (true) { while (true) { puts("What do you wanna do?"); printf("1&amp;gt; Buy\n2&amp;gt; Sell\n3&amp;gt; Exit\n&amp;gt; "</description></item><item><title>Reg</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/</guid><description>We are given a 64-bit binary called reg:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:
int main() { run(); return 0; } Let&amp;rsquo;s see run:
void run() { char local_38[48]; initialize(); printf("Enter your name : "); gets(local_38); puts("Registered!"); return; } The binary is vulnerable to Buffer Overflow since there is a variable called local_38 that has 48 bytes assigned as buffer, but the program is using gets, which is an insecure function because it does not limit the length of the input data, thus overflowing the reserved buffer if the size of the input data is greater than 48 bytes.</description></item><item><title>Sacred Scrolls: Revenge</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</guid><description>We are given a 64-bit binary called sacred_scrolls:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { undefined8 *puVar1; long i; byte bVar2; undefined wizard_tag[1528]; undefined8 uStack_110; undefined8 target; undefined8 local_100; undefined8 local_f8; undefined8 local_f0; undefined8 local_e8; undefined8 local_e0; undefined8 local_d8; undefined8 local_d0; undefined8 local_c8; undefined8 local_c0; undefined8 local_b8; undefined8 local_b0; undefined8 local_a8; undefined8 local_a0; undefined8 local_98; undefined8 local_90; undefined8 local_88; undefined8 local_80; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined8 local_60; undefined8 local_58; undefined8 local_50; undefined8 local_48; undefined *wizard_tag_copy; undefined8 local_38; undefined4 local_2c; bVar2 = 0; uStack_110 = 0x400efa; setup(); uStack_110 = 0x400eff; banner(); uStack_110 = 0x400f09; clean(); uStack_110 = 0x400f1a; printf("</description></item><item><title>Shooting star</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/shooting-star/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/shooting-star/</guid><description>We are given a 64-bit binary called shooting_star:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering We can use Ghidra to analyze the binary and look at the decompiled source code in C:
void main() { setup(); write(1, &amp;amp;message, 0x5b); star(); return; } This function calls star:
void star() { char option[2]; undefined input_data[64]; read(0, option, 2); if (option[0] == '1') { write(1,"</description></item><item><title>Space</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space/</guid><description>We are given a 32-bit binary called space:
Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments It has no protections, so we can potentially run custom shellcode on the stack if we exploit a Buffer Overflow vulnerability.
Buffer Overflow vulnerability If we execute the binary, we have only a prompt to enter data, and then exit:
$ ./space > A $ .</description></item><item><title>Space pirate: Entrypoint</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/</guid><description>We are given a 64-bit binary called sp_entrypoint:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' We can run it to view two options:
$ ./sp_entrypoint Authentication System ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░▒▓▓▓░░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓▒░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▒░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒░░░▓▓░░░▓▓▒░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒░░░▒▓▓░░░▓▓▒ ░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░░░░░▓▓░░░▓▓▓ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▓▓▓▒░░░░▓▓▒ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░▒░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓░▒▓▓▓░░░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒░▓▓▓░░░░ ▓▓ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 1.</description></item><item><title>Space pirate: Going Deeper</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/</guid><description>We are given a 64-bit binary called sp_going_deeper:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' If we run it, we will see three options:
$ ./sp_going_deeper Trying to leak information from the pc.. 🖥️ ____________________________________________________ / \ | _____________________________________________ | | | | | | | goldenfang@d12:$ history | | | | 1 ls | | | | 2 mv secret_pass.</description></item><item><title>Space pirate: Retribution</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-retribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-retribution/</guid><description>We are given a 64-bit binary called sp_retribution:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra we will see this main function:
void main() { char local_b[3]; setup(); banner(); while (true) { while (true) { printf(&amp;amp;DAT_00101f68, &amp;amp;DAT_00100d78); read(0, local_b, 2); if (local_b[0] != '1') break; show_missiles(); } if (local_b[0] != '2') break; missile_launcher(); } printf("</description></item><item><title>Spellbook</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spellbook/</guid><description>We are given a 64-bit binary called spellbook:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { size_t option; setup(); banner(); while (true) { while (true) { while (option = menu(), option == 2) { show(); } if (option &amp;lt; 3) break; if (option == 3) { edit(); } else { if (option !</description></item><item><title>Spooky Time</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spooky-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spooky-time/</guid><description>We are given a 64-bit binary called spooky_time:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra we will see this main function:
void main() { long in_FS_OFFSET; char first_input[12]; char second_input[312]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); banner(); puts("It\'s your chance to scare those little kids, say something scary!\n"); __isoc99_scanf("</description></item><item><title>Trick or Deal</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/trick-or-deal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/trick-or-deal/</guid><description>We are given a 64-bit binary called trick_or_deal:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we use Ghidra, we will find the following decompiled source code for function main:
undefined8 main(undefined8 param_1, undefined8 param_2) { undefined8 in_R9; setup(); fprintf(stdout, "%s %s Welcome to the Intergalactic Weapon Black Market %s\n", &amp;amp;DAT_0010123c, &amp;amp;DAT_00101241, &amp;amp;DAT_0010123c, in_R9, param_2); fprintf(stdout, "\n%sLoading the latest weaponry .</description></item><item><title>Vault-breaker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/</guid><description>We have a 64-bit binary called vault-breaker:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./.glibc/' If we execute it, we have two options:
$ ./vault-breaker Current status: Unlocked 🔓 ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▒▒▓▓▓▓▒▒▒▒▒▒░░ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒░░▒▒░░████▓▓████░░▒▒▓▓▓▓▓▓▓▓▓▓░░▒▒░░ ░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▒▒▓▓░░▓▓▒▒▒▒▒▒░░░░▒▒▓▓██▒▒▒▒▓▓▓▓▓▓░░░░ ░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒▓▓░░▓▓░░██▓▓▓▓▓▓▒▒▒▒██░░▓▓▓▓▒▒▒▒ ░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░▓▓▒▒░░▒▒██░░██▒▒▒▒▒▒▒▒██▒▒▒▒██▓▓▒▒▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▒▒▓▓▒▒▓▓░░▒▒▓▓▒▒▒▒░░░░░░▒▒██░░██▒▒▒▒ ▒▒▒▒▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒░░░░▓▓▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░▒▒▓▓▓▓▓▓▒▒ ░░▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▒▒▒▒▒▒▓▓░░▓▓░░░░░░░░▒▒▒▒██▒▒██▒▒ ▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▓▓▒▒░░▒▒▓▓░░░░░░░░░░▒▒▒▒▓▓▒▒██░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▓▓▒▒░░▒▒▓▓░░▒▒░░░░░░░░░░▓▓▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░▒▒▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▓▒▒▒▒░░▓▓▒▒░░░░▒▒░░▒▒▒▒▓▓▒▒▓▓░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▒▒▓▓▓▓▒▒▓▓░░░░░░▒▒░░▒▒▓▓▓▓██▒▒ ░░▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓▓▓██▒▒░░▒▒▒▒▓▓▒▒░░░░▒▒▒▒▓▓▓▓▒▒░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓██▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒██▒▒██▒▒░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▓▓▒▒▒▒░░▓▓▒▒▒▒▒▒▓▓▒▒██▒▒▓▓▓▓░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓██▓▓▒▒██▒▒░░▒▒▒▒▒▒▓▓▓▓▓▓▒▒▓▓▓▓▓▓░░░░ ░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▓▓██▓▓████▒▒▒▒▓▓▓▓▓▓▓▓▓▓░░░░░░░░ ░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓██▒▒▓▓▒▒▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ [+] Random secure encryption key has been generated!</description></item></channel></rss>