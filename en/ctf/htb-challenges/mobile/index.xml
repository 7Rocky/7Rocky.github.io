<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mobile on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/</link><description>Recent content in Mobile on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/htb-challenges/mobile/index.xml" rel="self" type="application/rss+xml"/><item><title>Anchored</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/anchored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/anchored/</guid><description>&lt;p>We are given an APK file (&lt;code>Anchored.apk&lt;/code>) and a &lt;code>README.txt&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google Play)).

1. Install this application in a non-rooted device (i.e. In Android Studio AVD Manager select an image that includes (Google Play)). 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>The first thing we can do is to decompile de APK file and read Java source code.&lt;/p>
&lt;h3 id="apk-decompilation">APK decompilation&lt;/h3>
&lt;p>If we load the APK in &lt;a target="_blank" href="http://www.javadecompilers.com/apk">www.javadecompilers.com&lt;/a> and select &amp;ldquo;APK decompiler&amp;rdquo;, we will see this code for the &lt;code>MainActivity.java&lt;/code> (&lt;code>sources/com/example/anchored/MainActivity.java&lt;/code>), where I have commented some parts that are not relevant:&lt;/p></description></item><item><title>APKrypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/apkrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/apkrypt/</guid><description>&lt;p>We are given an APK file (&lt;code>APKrypt.apk&lt;/code>). We need to find a VIP code inside the APK file. Hence, we will use &lt;code>d2j-dex2jar&lt;/code> to get a JAR file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">d2j-dex2jar&lt;/span> &lt;span class="mtku">APKrypt.apk&lt;/span>
dex2jar APKrypt.apk -> ./APKrypt-dex2jar.jar 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>Now we upload the JAR file into &lt;a target="_blank" href="http://www.javadecompilers.com">www.javadecompilers.com&lt;/a> and select Jadx as decompiler.&lt;/p>
&lt;p>The main file is at &lt;code>sources/com/example/apkrypt/MainActivity.java&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">package&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">com.example.apkrypt&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.app.Activity&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.os.Bundle&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.util.Base64&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.view.View&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.widget.Button&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.widget.EditText&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">android.widget.Toast&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.security.Key&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.security.MessageDigest&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">java.security.NoSuchAlgorithmException&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">javax.crypto.Cipher&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">javax.crypto.spec.SecretKeySpec&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">MainActivity&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">extends&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtki mtku">Activity&lt;/span>&lt;span class="mtk1"> {&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">/* renamed from: b1 */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Button&lt;/span>&lt;span class="mtk1"> f77b1;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">EditText&lt;/span>&lt;span class="mtk1"> ed1;&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">str&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">throws&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Key&lt;/span>&lt;span class="mtk1"> generateKey &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">generateKey&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Cipher&lt;/span>&lt;span class="mtk1"> instance &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> Cipher.&lt;/span>&lt;span class="mtk8">getInstance&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"AES"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">init&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, generateKey);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">String&lt;/span>&lt;span class="mtk1">(instance.&lt;/span>&lt;span class="mtk8">doFinal&lt;/span>&lt;span class="mtk1">(Base64.&lt;/span>&lt;span class="mtk8">decode&lt;/span>&lt;span class="mtk1">(str, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)), &lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">str&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">throws&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Key&lt;/span>&lt;span class="mtk1"> generateKey &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">generateKey&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Cipher&lt;/span>&lt;span class="mtk1"> instance &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> Cipher.&lt;/span>&lt;span class="mtk8">getInstance&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"AES"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">init&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, generateKey);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> Base64.&lt;/span>&lt;span class="mtk8">encodeToString&lt;/span>&lt;span class="mtk1">(instance.&lt;/span>&lt;span class="mtk8">doFinal&lt;/span>&lt;span class="mtk1">(str.&lt;/span>&lt;span class="mtk8">getBytes&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">)), &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">generateKey&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">throws&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">SecretKeySpec&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Dgu8Trf6Ge4Ki9Lb"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">getBytes&lt;/span>&lt;span class="mtk1">(), &lt;/span>&lt;span class="mtk4">"AES"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">static&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">md5&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">String&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">str&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">MessageDigest&lt;/span>&lt;span class="mtk1"> instance &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> MessageDigest.&lt;/span>&lt;span class="mtk8">getInstance&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"MD5"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">update&lt;/span>&lt;span class="mtk1">(str.&lt;/span>&lt;span class="mtk8">getBytes&lt;/span>&lt;span class="mtk1">());&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">[] digest &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> instance.&lt;/span>&lt;span class="mtk8">digest&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">StringBuffer&lt;/span>&lt;span class="mtk1"> stringBuffer &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">StringBuffer&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1"> b &lt;/span>&lt;span class="mtk5">:&lt;/span>&lt;span class="mtk1"> digest) {&lt;/span>
&lt;span class="mtk1"> stringBuffer.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(Integer.&lt;/span>&lt;span class="mtk8">toHexString&lt;/span>&lt;span class="mtk1">(b &lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">255&lt;/span>&lt;span class="mtk1">));&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> stringBuffer.&lt;/span>&lt;span class="mtk8">toString&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">catch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">NoSuchAlgorithmException&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">e&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> e.&lt;/span>&lt;span class="mtk8">printStackTrace&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">/* access modifiers changed from: protected */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">onCreate&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">Bundle&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">bundle&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">super&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">onCreate&lt;/span>&lt;span class="mtk1">(bundle);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setContentView&lt;/span>&lt;span class="mtk1">(C0535R.layout.activity_main);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">this&lt;/span>&lt;span class="mtk1">.f77b1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (Button) &lt;/span>&lt;span class="mtk8">findViewById&lt;/span>&lt;span class="mtk1">(C0535R.C0538id.button);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">this&lt;/span>&lt;span class="mtk1">.ed1 &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> (EditText) &lt;/span>&lt;span class="mtk8">findViewById&lt;/span>&lt;span class="mtk1">(C0535R.C0538id.editTextVipCode);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9">this&lt;/span>&lt;span class="mtk1">.f77b1.&lt;/span>&lt;span class="mtk8">setOnClickListener&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">new&lt;/span>&lt;span class="mtk1"> View.&lt;/span>&lt;span class="mtk8">OnClickListener&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">onClick&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">View&lt;/span>&lt;span class="mtk1"> view) {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (MainActivity.&lt;/span>&lt;span class="mtk8">md5&lt;/span>&lt;span class="mtk1">(MainActivity.this.ed1.&lt;/span>&lt;span class="mtk8">getText&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">toString&lt;/span>&lt;span class="mtk1">()).&lt;/span>&lt;span class="mtk8">equals&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"735c3628699822c4c1c09219f317a8e9"&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk1"> Toast.&lt;/span>&lt;span class="mtk8">makeText&lt;/span>&lt;span class="mtk1">(MainActivity.this.&lt;/span>&lt;span class="mtk8">getApplicationContext&lt;/span>&lt;span class="mtk1">(), MainActivity.&lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZToz&lt;/span>&lt;span class="mtk4">BWPn2lExQYDHH1l"&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">show&lt;/span>&lt;span class="mtk1">();&lt;/span> 
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> Toast.&lt;/span>&lt;span class="mtk8">makeText&lt;/span>&lt;span class="mtk1">(MainActivity.this.&lt;/span>&lt;span class="mtk8">getApplicationContext&lt;/span>&lt;span class="mtk1">(), &lt;/span>&lt;span class="mtk4">"Wrong VIP code!"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">show&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> } &lt;/span>&lt;span class="mtk5">catch&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk7 mtki">Exception&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">e&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> e.&lt;/span>&lt;span class="mtk8">printStackTrace&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> });&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>First, it asks for a VIP code in &lt;code>onCreate&lt;/code> and checks its MD5 hash with &lt;code>735c3628699822c4c1c09219f317a8e9&lt;/code>. If we use &lt;a target="_blank" href="https://crackstation.net">crackstation.net&lt;/a> we won&amp;rsquo;t find any match:&lt;/p></description></item><item><title>Don't Overreact</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/dont-overreact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/dont-overreact/</guid><description>&lt;p>We are given an APK file (&lt;code>app-release.apk&lt;/code>).&lt;/p>
&lt;h2 id="apk-extraction">APK extraction&lt;/h2>
&lt;p>From the name of the challenge, we might think of React Native for mobile development. For the moment, let&amp;rsquo;s extract the APK file contents with &lt;code>apktool&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">apktool&lt;/span> d &lt;span class="mtku">app-release.apk&lt;/span>
I: Using Apktool 2.6.1 on app-release.apk
I: Loading resource table...
I: Decoding AndroidManifest.xml with resources...
I: Loading resource table from file: ~/.local/share/apktool/framework/1.apk
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Baksmaling classes.dex...
I: Copying assets and libs...
I: Copying unknown files...
I: Copying original files...

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">cd&lt;/span> &lt;span class="mtku">app-release&lt;/span>

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ls&lt;/span>
AndroidManifest.xml apktool.yml &lt;span class="code-blue">assets lib original res smali unknown&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>As expected, inside &lt;code>assets&lt;/code> we find a file called &lt;code>index.android.bundle&lt;/code>, which is minified JavaScript code for the app:&lt;/p></description></item><item><title>Manager</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/manager/</guid><description>&lt;p>We are given an APK file (&lt;code>Manager.apk&lt;/code>) and a &lt;code>README.txt&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)).

2. In order to connect to the server when first running the application, insert the IP and PORT that you are provided in the description. 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>As can be seen, the Android application will connect to a remote server, so probably we will be analyzing that communication.&lt;/p></description></item><item><title>Pinned</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/pinned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/pinned/</guid><description>&lt;p>We are given an APK file (&lt;code>pinned.apk&lt;/code>) and a &lt;code>README.txt&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)). 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="dynamic-analysis">Dynamic analysis&lt;/h2>
&lt;p>Let&amp;rsquo;s start &lt;a target="_blank" href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF&lt;/a> and Genymotion to do a dynamic analysis:&lt;/p>
&lt;p>&lt;img alt="Pinned 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Mobile-Pinned-1.webp">&lt;/p>
&lt;p>It simply shows a login form with the credentials already written. I was not able to read the password from there. If we click the button, we will see a successful message:&lt;/p></description></item><item><title>SeeTheSharpFlag</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/seethesharpflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/seethesharpflag/</guid><description>&lt;p>We are given an APK file (&lt;code>com.companyname.seethesharpflag-x86.apk&lt;/code>). From the name of the challenge, we might think of C# for mobile development. We can start by running &lt;a target="_blank" href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF&lt;/a>. Once the APK is loaded, we have this screen:&lt;/p>
&lt;p>&lt;img alt="SeeTheSharpFlag 1" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Mobile-SeeTheSharpFlag-1.webp">&lt;/p>
&lt;h2 id="xamarin-forms">Xamarin Forms&lt;/h2>
&lt;p>We see that is is built using Xamarin Forms (C# under the hoods). The Java decompiled files are obfuscated, so we need to find another way to reverse the app:&lt;/p>
&lt;p>&lt;img alt="SeeTheSharpFlag 2" src="https://7rocky.github.io/images/HTB-Challenges/HTB-Mobile-SeeTheSharpFlag-2.webp">&lt;/p></description></item></channel></rss>