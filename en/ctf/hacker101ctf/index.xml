<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hacker101CTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/</link><description>Recent content in Hacker101CTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/hacker101ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>A little something to get you started</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</guid><description>&lt;p>We have a simple website like this one:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/ALSTGYS-1.png">&lt;/p>
&lt;p>We can read the HTML source code of the website, which is:&lt;/p>
&lt;p>&lt;img alt="Website source code" src="https://7rocky.github.io/images/Hacker101CTF/ALSTGYS-2.png">&lt;/p>
&lt;p>There is an image called &lt;code>background.png&lt;/code>, but we did not observe any image on the website. We can try to access it using &lt;code>curl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">curl&lt;/span> http://35.190.155.168/9a968e7787/background.png
^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>And we have the flag.&lt;/p></description></item><item><title>H1 Thermostat</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</guid><description>&lt;p>We have an Android APK file called &lt;code>thermostat.apk&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">thermostat.apk&lt;/span>
thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>As it is shown an APK file is just a ZIP archive. Therefore, we can extract its contents:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">7z&lt;/span> x &lt;span class="mtku">thermostat.apk&lt;/span>
Scanning the drive for archives:
1 file, 2595443 bytes (2535 KiB)

Extracting archive: thermostat.apk
--
Path = thermostat.apk
Type = zip
Physical Size = 2595443

Everything is Ok

Files: 569
Size: 4968479
Compressed: 2595443

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ls&lt;/span>
AndroidManifest.xml &lt;span class="code-dark-blue">META-INF&lt;/span> classes.dex &lt;span class="code-dark-blue">res&lt;/span> resources.arsc thermostat.apk 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>This challenge is so easy that the flags are inside the extracted files. We can use &lt;code>grep&lt;/code> recursively, no need to use &lt;code>apktool&lt;/code> or decompilers to Java code:&lt;/p></description></item><item><title>Hello World!</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>vulnerable&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we execute the binary, it seems that it does nothing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vulnerable&lt;/span> 
asdf
fdsa
1
2
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we insert data from standard input (&lt;code>stdin&lt;/code>), we make the program work:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">echo&lt;/span> asdf | &lt;span class="code-dark-green">./vulnerable&lt;/span> 
Hello asdf
!
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Let&amp;rsquo;s send 100 characters using Python and check if it crashes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vulnerable&lt;/span> &lt;&lt;&lt; &lt;span class="code-dark-magenta">$(&lt;/span>&lt;span class="code-dark-green">python3&lt;/span> -c &lt;span class="code-dark-yellow">'print("A" * 100)'&lt;/span>&lt;span class="code-dark-magenta">)&lt;/span>
Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 
!
zsh: segmentation fault (core dumped)
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Great, the binary seems vulnerable to Buffer Overflow.&lt;/p></description></item><item><title>Micro-CMS v1</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</guid><description>&lt;p>We have a simple website that allows us to edit and create posts using Markdown:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/Micro-CMS-v1-1.png">&lt;/p>
&lt;p>Let&amp;rsquo;s click on &amp;ldquo;Testing&amp;rdquo;:&lt;/p>
&lt;p>&lt;img alt="Testing post" src="https://7rocky.github.io/images/Hacker101CTF/Micro-CMS-v1-2.png">&lt;/p>
&lt;p>Now, we can try to edit the current post. A text area is shown in order to write Markdown code:&lt;/p>
&lt;p>&lt;img alt="Filtered XSS payload" src="https://7rocky.github.io/images/Hacker101CTF/Micro-CMS-v1-3.png">&lt;/p>
&lt;p>Markdown is a markup language similar to HTML but simpler and easier. Furthermore, Markdown supports the use of HTML tags as well. Hence, let&amp;rsquo;s try a Cross-Site Scripting (XSS) payload like:&lt;/p></description></item><item><title>Model E1337 - Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337---rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337---rolling-code-lock/</guid><description>&lt;p>We have a simple website that requests a code to unlock:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/Rolling-Code-1.png">&lt;/p>
&lt;p>We can put any number we want, and after a few seconds, we see it is incorrect:&lt;/p>
&lt;p>&lt;img alt="Wrong code" src="https://7rocky.github.io/images/Hacker101CTF/Rolling-Code-2.png">&lt;/p>
&lt;p>There is nothing in the source code of the website. At this point, we can apply fuzzing to enumerate more routes if they exist:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ffuf&lt;/span> -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ 
&lt;span class="code-dark-green">admin [Status: 200, Size: 287, Words: 25, Lines: 11]&lt;/span>
&lt;span class="code-dark-yellow">unlock [Status: 405, Size: 178, Words: 20, Lines: 5]&lt;/span>
&lt;span class="code-dark-green"> [Status: 200, Size: 302, Words: 16, Lines: 13]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>There is an &lt;code>/admin&lt;/code> route:&lt;/p></description></item><item><title>Model E1337 v2 - Hardened Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</guid><description>&lt;p>This challenge is extremely related to &lt;a target="_blank" href="../model-e1337---rolling-code-lock/">Model E1337 - Rolling Code Lock&lt;/a>, specially for the cryptanalysis part. Go and check it if you have not done yet.&lt;/p>
&lt;p>As in the previous challenge, we have a simple website that requests a code to unlock:&lt;/p>
&lt;p>&lt;img alt="Website" src="https://7rocky.github.io/images/Hacker101CTF/Hardened-Rolling-Code-1.png">&lt;/p>
&lt;p>We can put any number we want and we see it is incorrect:&lt;/p>
&lt;p>&lt;img alt="Wrong code" src="https://7rocky.github.io/images/Hacker101CTF/Hardened-Rolling-Code-2.png">&lt;/p>
&lt;p>The difference with the first challenge is the length of the number, this time it is 64-bit long.&lt;/p></description></item></channel></rss>