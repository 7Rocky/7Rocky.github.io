<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hacker101CTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/</link><description>Recent content in Hacker101CTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/hacker101ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>A little something to get you started</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</guid><description>We have a simple website like this one:
We can read the HTML source code of the website, which is:
There is an image called background.png, but we did not observe any image on the website. We can try to access it using curl:
$ curl http://35.190.155.168/9a968e7787/background.png ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ And we have the flag.</description></item><item><title>H1 Thermostat</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</guid><description>We have an Android APK file called thermostat.apk:
$ file thermostat.apk thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate As it is shown an APK file is just a ZIP archive. Therefore, we can extract its contents:
$ 7z x thermostat.apk Scanning the drive for archives: 1 file, 2595443 bytes (2535 KiB) Extracting archive: thermostat.apk -- Path = thermostat.apk Type = zip Physical Size = 2595443 Everything is Ok Files: 569 Size: 4968479 Compressed: 2595443 $ ls AndroidManifest.</description></item><item><title>Hello World!</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</guid><description>We are given a 64-bit binary called vulnerable:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments If we execute the binary, it seems that it does nothing:
$ ./vulnerable asdf fdsa 1 2 If we insert data from standard input (stdin), we make the program work:
$ echo asdf | ./vulnerable Hello asdf ! Let&amp;rsquo;s send 100 characters using Python and check if it crashes:</description></item><item><title>Micro-CMS v1</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</guid><description>We have a simple website that allows us to edit and create posts using Markdown:
Let&amp;rsquo;s click on &amp;ldquo;Testing&amp;rdquo;:
Now, we can try to edit the current post. A text area is shown in order to write Markdown code:
Markdown is a markup language similar to HTML but simpler and easier. Furthermore, Markdown supports the use of HTML tags as well. Hence, let&amp;rsquo;s try a Cross-Site Scripting (XSS) payload like:</description></item><item><title>Model E1337 - Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-rolling-code-lock/</guid><description>We have a simple website that requests a code to unlock:
We can put any number we want, and after a few seconds, we see it is incorrect:
There is nothing in the source code of the website. At this point, we can apply fuzzing to enumerate more routes if they exist:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ admin [Status: 200, Size: 287, Words: 25, Lines: 11] unlock [Status: 405, Size: 178, Words: 20, Lines: 5] [Status: 200, Size: 302, Words: 16, Lines: 13] There is an /admin route:</description></item><item><title>Model E1337 v2 - Hardened Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2-hardened-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2-hardened-rolling-code-lock/</guid><description>This challenge is extremely related to Model E1337 - Rolling Code Lock, specially for the cryptanalysis part. Go and check it if you have not done yet.
As in the previous challenge, we have a simple website that requests a code to unlock:
We can put any number we want and we see it is incorrect:
The difference with the first challenge is the length of the number, this time it is 64-bit long.</description></item></channel></rss>