<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Exploitation on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/</link><description>Recent content in Web Exploitation on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/picoctf/web-exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>Cookies</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/</guid><description>&lt;p>We are given a website that asks for a cookie:&lt;/p>
&lt;p>&lt;img alt="Red" src="https://7rocky.github.io/images/picoCTF/cookie.webp">&lt;/p>
&lt;p>Looking at the developer tools, we can see that we have a cookie &lt;code>name=-1&lt;/code>. If we send &lt;code>snickerdoodle&lt;/code> as the placeholder suggests, the cookie will change to &lt;code>name=0&lt;/code>:&lt;/p>
&lt;p>&lt;img alt="Blue" src="https://7rocky.github.io/images/picoCTF/cookie-snickerdoodle.webp">&lt;/p>
&lt;p>Let&amp;rsquo;s modify the value of the cookie using &lt;code>curl&lt;/code> and show only the message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">curl&lt;/span> mercury.picoctf.net:27177/check -sH &lt;span class="code-dark-yellow">'Cookie: name=0'&lt;/span> | &lt;span class="code-dark-green">grep&lt;/span> -oE &lt;span class="code-dark-yellow">'&amp;lt;b&amp;gt;.*?&amp;lt;/b&amp;gt;'&lt;/span> 
&lt;span class="code-red">&amp;lt;b&amp;gt;I love snickerdoodle cookies!&amp;lt;/b&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Now let&amp;rsquo;s use a loop in Bash to see if something change if we use another value as cookie:&lt;/p></description></item><item><title>GET aHEAD</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/</guid><description>&lt;p>We are given a website that shows two background colors:&lt;/p>
&lt;p>&lt;img alt="Red" src="https://7rocky.github.io/images/picoCTF/get-ahead-red.webp">&lt;/p>
&lt;p>&lt;img alt="Blue" src="https://7rocky.github.io/images/picoCTF/get-ahead-blue.webp">&lt;/p>
&lt;p>The red button uses a GET request and the blue one uses a POST request. We do not see anything.&lt;/p>
&lt;p>Since the challenge name includes HEAD, let&amp;rsquo;s see if we can perform a HEAD request using &lt;code>curl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">curl&lt;/span> -I mercury.picoctf.net:47967
HTTP/1.1 200 OK
&lt;span class="code-white">flag&lt;/span>: picoCTF{r3j3ct_th3_du4l1ty_cca66bd3} 
&lt;span class="code-white">Content-type&lt;/span>: text/html; charset=UTF-8
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Insp3ct0r</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/</guid><description>&lt;p>We are given a website like this:&lt;/p>
&lt;p>&lt;img alt="Insp3ct0r 1" src="https://7rocky.github.io/images/picoCTF/Insp3ct0r-1.webp">&lt;/p>
&lt;p>As the page suggests, we must inspect the HTML code of the website (shortcut: &lt;code>Ctrl + U&lt;/code>):&lt;/p>
&lt;p>&lt;img alt="Insp3ct0r 2" src="https://7rocky.github.io/images/picoCTF/Insp3ct0r-2.webp">&lt;/p>
&lt;p>We can see a piece of the flag. Let&amp;rsquo;s inspect the CSS file (&lt;code>mycss.css&lt;/code>):&lt;/p>
&lt;p>&lt;img alt="Insp3ct0r 3" src="https://7rocky.github.io/images/picoCTF/Insp3ct0r-3.webp">&lt;/p>
&lt;p>Alright, we got another piece. We can take a look at the JS file (&lt;code>myjs.js&lt;/code>):&lt;/p>
&lt;p>&lt;img alt="Insp3ct0r 4" src="https://7rocky.github.io/images/picoCTF/Insp3ct0r-4.webp">&lt;/p>
&lt;p>Perfect, we can join all pieces to form the flag: &lt;code>picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}&lt;/code>.&lt;/p></description></item><item><title>where are the robots</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/</guid><description>&lt;p>We are given a website like this:&lt;/p>
&lt;p>&lt;img alt="where are the robots 1" src="https://7rocky.github.io/images/picoCTF/where-are-the-robots-1.webp">&lt;/p>
&lt;p>The page talks about robots. There is a special file called &lt;code>robots.txt&lt;/code> that prevents web crawlers and spiders to access some routes listed on the file. Let&amp;rsquo;s take a look:&lt;/p>
&lt;p>&lt;img alt="where are the robots 2" src="https://7rocky.github.io/images/picoCTF/where-are-the-robots-2.webp">&lt;/p>
&lt;p>Alright, there is a &lt;code>Disallow: /8028f.html&lt;/code>, which does not mean that we cannot enter (it only tells automatic scanners not to enter). This is &lt;code>/8028f.html&lt;/code>:&lt;/p></description></item></channel></rss>