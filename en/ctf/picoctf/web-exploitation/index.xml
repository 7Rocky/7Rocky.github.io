<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Exploitation on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/</link><description>Recent content in Web Exploitation on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/picoctf/web-exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>Cookies</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/</guid><description>We are given a website that asks for a cookie:
Looking at the developer tools, we can see that we have a cookie name=-1. If we send snickerdoodle as the placeholder suggests, the cookie will change to name=0:
Let&amp;rsquo;s modify the value of the cookie using curl and show only the message:
$ curl mercury.picoctf.net:27177/check -sH 'Cookie: name=0' | grep -oE '&amp;lt;b&amp;gt;.*?&amp;lt;/b&amp;gt;' &amp;lt;b&amp;gt;I love snickerdoodle cookies!&amp;lt;/b&amp;gt; Now let&amp;rsquo;s use a loop in Bash to see if something change if we use another value as cookie:</description></item><item><title>GET aHEAD</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/</guid><description>We are given a website that shows two background colors:
The red button uses a GET request and the blue one uses a POST request. We do not see anything.
Since the challenge name includes HEAD, let&amp;rsquo;s see if we can perform a HEAD request using curl:
$ curl -I mercury.picoctf.net:47967 HTTP/1.1 200 OK flag: picoCTF{r3j3ct_th3_du4l1ty_cca66bd3} Content-type: text/html; charset=UTF-8</description></item><item><title>Insp3ct0r</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/</guid><description>We are given a website like this:
As the page suggests, we must inspect the HTML code of the website (shortcut: Ctrl + U):
We can see a piece of the flag. Let&amp;rsquo;s inspect the CSS file (mycss.css):
Alright, we got another piece. We can take a look at the JS file (myjs.js):
Perfect, we can join all pieces to form the flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}.</description></item><item><title>where are the robots</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/</guid><description>We are given a website like this:
The page talks about robots. There is a special file called robots.txt that prevents web crawlers and spiders to access some routes listed on the file. Let&amp;rsquo;s take a look:
Alright, there is a Disallow: /8028f.html, which does not mean that we cannot enter (it only tells automatic scanners not to enter). This is /8028f.html:
And there&amp;rsquo;s the flag:
picoCTF{ca1cu1at1ng_Mach1n3s_8028f}</description></item></channel></rss>