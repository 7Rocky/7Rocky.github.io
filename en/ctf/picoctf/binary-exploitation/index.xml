<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary Exploitation on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/</link><description>Recent content in Binary Exploitation on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>basic-file-exploit</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/basic-file-exploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/basic-file-exploit/</guid><description>&lt;p>We are given the C source code of a program that runs remotely:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdbool.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdint.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;ctype.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;sys/time.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;sys/types.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">WAIT&lt;/span> &lt;span class="mtk6">60&lt;/span>

&lt;span class="mtk5">static&lt;/span> &lt;span class="mtk5">const&lt;/span> &lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk1">flag&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk4">"[REDACTED]"&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk5">static&lt;/span> &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk5">static&lt;/span> &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">input_lengths&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk5">static&lt;/span> &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">inputs&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">tgetinput&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk9 mtki">input&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk7 mtki">unsigned&lt;/span> &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk9 mtki">l&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8 mtku">fd_set&lt;/span> &lt;span class="mtk1">input_set&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk8 mtku">timeval&lt;/span> &lt;span class="mtk1">timeout&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">ready_for_reading&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">read_bytes&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">l&lt;/span> &lt;span class="mtk5">&amp;lt;=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"'l'&lt;/span> &lt;span class="mtk4">for&lt;/span> &lt;span class="mtk4">tgetinput&lt;/span> &lt;span class="mtk4">must&lt;/span> &lt;span class="mtk4">be&lt;/span> &lt;span class="mtk4">greater&lt;/span> &lt;span class="mtk4">than&lt;/span> &lt;span class="mtk4">0&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">Empty&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">FD&lt;/span> &lt;span class="mtk3">Set&lt;/span> &lt;span class="mtk3">*/&lt;/span>
 &lt;span class="mtk8">FD_ZERO&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">input_set&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">Listen&lt;/span> &lt;span class="mtk3">to&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">input&lt;/span> &lt;span class="mtk3">descriptor&lt;/span> &lt;span class="mtk3">*/&lt;/span>
 &lt;span class="mtk8">FD_SET&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">STDIN_FILENO&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">input_set&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">Waiting&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">some&lt;/span> &lt;span class="mtk3">seconds&lt;/span> &lt;span class="mtk3">*/&lt;/span>
 &lt;span class="mtk1">timeout&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">tv_sec&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">WAIT&lt;/span>&lt;span class="mtk1">;&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">WAIT&lt;/span> &lt;span class="mtk3">seconds&lt;/span>
 &lt;span class="mtk1">timeout&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">tv_usec&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span> &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">0&lt;/span> &lt;span class="mtk3">milliseconds&lt;/span>

 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">Listening&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">input&lt;/span> &lt;span class="mtk3">stream&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">any&lt;/span> &lt;span class="mtk3">activity&lt;/span> &lt;span class="mtk3">*/&lt;/span>
 &lt;span class="mtk1">ready_for_reading&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">select&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">input_set&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">timeout&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">Here,&lt;/span> &lt;span class="mtk3">first&lt;/span> &lt;span class="mtk3">parameter&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">number&lt;/span> &lt;span class="mtk3">of&lt;/span> &lt;span class="mtk3">FDs&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">set,&lt;/span>
 &lt;span class="mtk3">*&lt;/span> &lt;span class="mtk3">second&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">our&lt;/span> &lt;span class="mtk3">FD&lt;/span> &lt;span class="mtk3">set&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">reading,&lt;/span>
 &lt;span class="mtk3">*&lt;/span> &lt;span class="mtk3">third&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">FD&lt;/span> &lt;span class="mtk3">set&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">which&lt;/span> &lt;span class="mtk3">any&lt;/span> &lt;span class="mtk3">write&lt;/span> &lt;span class="mtk3">activity&lt;/span> &lt;span class="mtk3">needs&lt;/span> &lt;span class="mtk3">to&lt;/span> &lt;span class="mtk3">updated,&lt;/span>
 &lt;span class="mtk3">*&lt;/span> &lt;span class="mtk3">which&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">not&lt;/span> &lt;span class="mtk3">required&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">this&lt;/span> &lt;span class="mtk3">case.&lt;/span>
 &lt;span class="mtk3">*&lt;/span> &lt;span class="mtk3">Fourth&lt;/span> &lt;span class="mtk3">is&lt;/span> &lt;span class="mtk3">timeout&lt;/span>
 &lt;span class="mtk3">*/&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">ready_for_reading&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">Some&lt;/span> &lt;span class="mtk3">error&lt;/span> &lt;span class="mtk3">has&lt;/span> &lt;span class="mtk3">occured&lt;/span> &lt;span class="mtk3">in&lt;/span> &lt;span class="mtk3">input&lt;/span> &lt;span class="mtk3">*/&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Unable&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">read&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">input&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">ready_for_reading&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">read_bytes&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk9 mtki">input&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk9 mtki">l&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">input&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">read_bytes&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">]&lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">){&lt;/span>
 &lt;span class="mtk5">--&lt;/span>&lt;span class="mtk1">read_bytes&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk9 mtki">input&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">read_bytes&lt;/span>&lt;span class="mtk1">]&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">read_bytes&lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">){&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"No&lt;/span> &lt;span class="mtk4">data&lt;/span> &lt;span class="mtk4">given.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Timed&lt;/span> &lt;span class="mtk4">out&lt;/span> &lt;span class="mtk4">waiting&lt;/span> &lt;span class="mtk4">for&lt;/span> &lt;span class="mtk4">user&lt;/span> &lt;span class="mtk4">input.&lt;/span> &lt;span class="mtk4">Press&lt;/span> &lt;span class="mtk4">Ctrl-C&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">disconnect&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk5">static&lt;/span> &lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">data_write&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">input&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">len&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">length&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">r&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">enter&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">data:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">tgetinput&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">input&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Timeout&lt;/span> &lt;span class="mtk3">on&lt;/span> &lt;span class="mtk3">user&lt;/span> &lt;span class="mtk3">input&lt;/span>
 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Goodbye!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">true&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">enter&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">length&lt;/span> &lt;span class="mtk4">of&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">data:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">tgetinput&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">len&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Timeout&lt;/span> &lt;span class="mtk3">on&lt;/span> &lt;span class="mtk3">user&lt;/span> &lt;span class="mtk3">input&lt;/span>
 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Goodbye!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">length&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">strtol&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">len&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">))&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">put&lt;/span> &lt;span class="mtk4">in&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">valid&lt;/span> &lt;span class="mtk4">length"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">inputs&lt;/span> &lt;span class="mtk5">&amp;gt;&lt;/span> &lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">inputs&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk8">strcpy&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">inputs&lt;/span>&lt;span class="mtk1">],&lt;/span> &lt;span class="mtk1">input&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">input_lengths&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">inputs&lt;/span>&lt;span class="mtk1">]&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">length&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Your&lt;/span> &lt;span class="mtk4">entry&lt;/span> &lt;span class="mtk4">number&lt;/span> &lt;span class="mtk4">is:&lt;/span> &lt;span class="mtk6">%d\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">inputs&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">inputs&lt;/span>&lt;span class="mtk5">++&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk5">static&lt;/span> &lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">data_read&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">entry&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">entry_number&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">r&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">memset&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">enter&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">entry&lt;/span> &lt;span class="mtk4">number&lt;/span> &lt;span class="mtk4">of&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">data:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">tgetinput&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">entry&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Timeout&lt;/span> &lt;span class="mtk3">on&lt;/span> &lt;span class="mtk3">user&lt;/span> &lt;span class="mtk3">input&lt;/span>
 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Goodbye!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">entry_number&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">strtol&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">entry&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">))&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fseek&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">SEEK_END&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk1">entry_number&lt;/span>&lt;span class="mtk5">--&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">strncpy&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">entry_number&lt;/span>&lt;span class="mtk1">],&lt;/span> &lt;span class="mtk1">input_lengths&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">entry_number&lt;/span>&lt;span class="mtk1">]);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk9 mtki">argc&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">**&lt;/span> &lt;span class="mtk9 mtki">argv&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">input&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">]&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">{&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">};&lt;/span>
 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">command&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">r&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Hi,&lt;/span> &lt;span class="mtk4">welcome&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">my&lt;/span> &lt;span class="mtk4">echo&lt;/span> &lt;span class="mtk4">chamber!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Type&lt;/span> &lt;span class="mtk4">'1'&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">enter&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">phrase&lt;/span> &lt;span class="mtk4">into&lt;/span> &lt;span class="mtk4">our&lt;/span> &lt;span class="mtk4">database"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Type&lt;/span> &lt;span class="mtk4">'2'&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">echo&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">phrase&lt;/span> &lt;span class="mtk4">in&lt;/span> &lt;span class="mtk4">our&lt;/span> &lt;span class="mtk4">database"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Type&lt;/span> &lt;span class="mtk4">'3'&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">exit&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">program"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">true&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">tgetinput&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">input&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Timeout&lt;/span> &lt;span class="mtk3">on&lt;/span> &lt;span class="mtk3">user&lt;/span> &lt;span class="mtk3">input&lt;/span>
 &lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">r&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Goodbye!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">command&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">strtol&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">input&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">))&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">put&lt;/span> &lt;span class="mtk4">in&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">valid&lt;/span> &lt;span class="mtk4">number"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">command&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">data_write&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Write&lt;/span> &lt;span class="mtk4">successful,&lt;/span> &lt;span class="mtk4">would&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">like&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">do&lt;/span> &lt;span class="mtk4">anything&lt;/span> &lt;span class="mtk4">else?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">command&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">inputs&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"No&lt;/span> &lt;span class="mtk4">data&lt;/span> &lt;span class="mtk4">yet"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">continue&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk8">data_read&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Read&lt;/span> &lt;span class="mtk4">successful,&lt;/span> &lt;span class="mtk4">would&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">like&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">do&lt;/span> &lt;span class="mtk4">anything&lt;/span> &lt;span class="mtk4">else?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">command&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">3&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">type&lt;/span> &lt;span class="mtk4">either&lt;/span> &lt;span class="mtk4">1,&lt;/span> &lt;span class="mtk4">2&lt;/span> &lt;span class="mtk4">or&lt;/span> &lt;span class="mtk4">3"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Maybe&lt;/span> &lt;span class="mtk4">breaking&lt;/span> &lt;span class="mtk4">boundaries&lt;/span> &lt;span class="mtk4">elsewhere&lt;/span> &lt;span class="mtk4">will&lt;/span> &lt;span class="mtk4">be&lt;/span> &lt;span class="mtk4">helpful"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="static-code-analysis">Static code analysis&lt;/h2>
&lt;p>The important part is here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please&lt;/span> &lt;span class="mtk4">enter&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">entry&lt;/span> &lt;span class="mtk4">number&lt;/span> &lt;span class="mtk4">of&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">data:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span> 

&lt;span class="mtk3">// ...&lt;/span>

&lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">entry_number&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">strtol&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">entry&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">))&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fseek&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">SEEK_END&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="flag">Flag&lt;/h2>
&lt;p>So, if we enter &lt;code>0&lt;/code> as the &amp;ldquo;entry number your data&amp;rdquo;, we will get the flag. We need to add data before printing the flag:&lt;/p></description></item><item><title>Bizz Fuzz</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>vuln&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We do not have the source code of the binary, and it is stripped:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">vuln&lt;/span>
vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=836e2f666bd53c2307bff4801d330e444556a006, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>Reversing the binary will be more challenging because we do not have the names of the functions. However, if we open it in Ghidra, we can easily identify the &lt;code>main&lt;/code> function (the one called by &lt;code>__libc_start_main&lt;/code>, inside a function usually named by Ghidra as &lt;code>entry&lt;/code>):&lt;/p></description></item><item><title>Cache Me Outside</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cache-me-outside/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cache-me-outside/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>heapedit&lt;/code> and a &lt;code>libc.so.6&lt;/code> file as external library:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run the binary we will get a segmentation fault:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">chmod&lt;/span> +x &lt;span class="mtku">heapedit&lt;/span>

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./heapedit&lt;/span>
zsh: segmentation fault (core dumped) ./heapedit 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It is configured to use Glibc at the current directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ldd&lt;/span> &lt;span class="mtku">heapedit&lt;/span>
 linux-vdso.so.1 (0x00007ffe8397e000)
 libc.so.6 => ./libc.so.6 (0x00007f9f134b0000)
 /lib64/ld-linux-x86-64.so.2 (0x00007f9f138a3000) 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We will use &lt;a target="_blank" href="https://github.com/io12/pwninit">&lt;code>pwninit&lt;/code>&lt;/a> to patch the binary so that it works:&lt;/p></description></item><item><title>clutter-overflow</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>chall&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the C source code. Basically, what the program does is call function &lt;code>gets&lt;/code> and after that compare a local variable (&lt;code>code&lt;/code>) with the value of a global variable (&lt;code>GOAL&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">SIZE&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">100&lt;/span>
&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">GOAL&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">deadbeef&lt;/span>

&lt;span class="mtk5">const&lt;/span> &lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk1">HEADER&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk4">"..."&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">code&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">clutter[SIZE];&lt;/span>

 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdout,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdin,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stderr,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(HEADER);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"My&lt;/span> &lt;span class="mtk4">room&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">so&lt;/span> &lt;span class="mtk4">cluttered..."&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"What&lt;/span> &lt;span class="mtk4">do&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">see?"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(clutter);&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(code&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk1">GOAL)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"code&lt;/span> &lt;span class="mtk4">==&lt;/span> &lt;span class="mtk4">0x&lt;/span>&lt;span class="mtk6">%llx&lt;/span>&lt;span class="mtk4">:&lt;/span> &lt;span class="mtk4">how&lt;/span> &lt;span class="mtk4">did&lt;/span> &lt;span class="mtk4">that&lt;/span> &lt;span class="mtk4">happen??&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">GOAL);&lt;/span> 
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"take&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">flag&lt;/span> &lt;span class="mtk4">for&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">troubles"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">system&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"cat&lt;/span> &lt;span class="mtk4">flag.txt"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"code&lt;/span> &lt;span class="mtk4">==&lt;/span> &lt;span class="mtk4">0x&lt;/span>&lt;span class="mtk6">%llx\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">code);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"code&lt;/span> &lt;span class="mtk4">!=&lt;/span> &lt;span class="mtk4">0x&lt;/span>&lt;span class="mtk6">%llx&lt;/span> &lt;span class="mtk4">:(&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">GOAL);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The idea is simple: &lt;code>gets&lt;/code> is vulnerable to Buffer Overflow, so we can write values on the stack. That way, we can overwrite the value of variable &lt;code>code&lt;/code>:&lt;/p></description></item><item><title>CVE-XXXX-XXXX</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/</guid><description>&lt;p>We have this challenge statement:&lt;/p>
&lt;blockquote>
&lt;p>The CVE we&amp;rsquo;re looking for is the first recorded remote code execution (RCE) vulnerability in 2021 in the Windows Print Spooler Service, which is available across desktop and server versions of Windows operating systems. The service is used to manage printers and print servers.&lt;/p>
&lt;/blockquote>
&lt;p>We are told to search a CVE identifier for the first RCE vulnerability in Windows Print Spooler Service in 2021. This vulnerability is known as PrintNightmare, and it corresponds to several CVE. But the one that the challenge is expecting is &lt;a target="_blank" href="https://nvd.nist.gov/vuln/detail/CVE-2021-34527">CVE-2021-34527&lt;/a>, so the flag is &lt;code>picoCTF{CVE-2021-34527}&lt;/code>.&lt;/p></description></item><item><title>fermat-strings</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>chall&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="static-code-analysis">Static code analysis&lt;/h2>
&lt;p>We also have the C source code. Basically, what the program does is request two numbers and try to find one that breaks Fermat&amp;rsquo;s Last Theorem.&lt;/p>
&lt;p>As a reminder, Fermat&amp;rsquo;s Last Theorem claims that there are no positive integers $a$, $b$, $c$, that satisfy the equation:&lt;/p>
&lt;p class="scroll">
$$
a ^ n + b ^ n = z ^ n
$$
&lt;/p></description></item><item><title>filtered-shellcode</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>fun&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-red">NX disabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
RWX: &lt;span class="code-dark-red">Has RWX segments&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We do not have the C source code. This time, instead of reversing the binary using tools like Ghidra, we will analyze it with GDB.&lt;/p>
&lt;p>First let&amp;rsquo;s execute the program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./fun&lt;/span>
Give me code to run:
asdf
zsh: segmentation fault (core dumped) ./fun 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It seems that the program is requesting code and it will run it. It crashed because &lt;code>asdf&lt;/code> is not a valid instruction.&lt;/p></description></item><item><title>Guessing Game 1</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/</guid><description>&lt;p>We are given a 64-bit static binary called &lt;code>vuln&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="static-code-analysis">Static code analysis&lt;/h2>
&lt;p>We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;sys/types.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;sys/stat.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">BUFSIZE&lt;/span> &lt;span class="mtk6">100&lt;/span>


&lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk8">increment&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk9 mtki">in&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk1">in&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk8">get_random&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk8">rand&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk5">%&lt;/span> &lt;span class="mtk1">BUFSIZE;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">do_stuff&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">ans&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">get_random&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk1">ans&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">increment&lt;/span>&lt;span class="mtk1">(ans);&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">res&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"What&lt;/span> &lt;span class="mtk4">number&lt;/span> &lt;span class="mtk4">would&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">like&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">guess?&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">guess[BUFSIZE];&lt;/span>
 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(guess,&lt;/span> &lt;span class="mtk1">BUFSIZE,&lt;/span> &lt;span class="mtk1">stdin);&lt;/span>

 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">g&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">atol&lt;/span>&lt;span class="mtk1">(guess);&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">!&lt;/span>&lt;span class="mtk1">g)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"That's&lt;/span> &lt;span class="mtk4">not&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">valid&lt;/span> &lt;span class="mtk4">number!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(g&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk1">ans)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Congrats!&lt;/span> &lt;span class="mtk4">You&lt;/span> &lt;span class="mtk4">win!&lt;/span> &lt;span class="mtk4">Your&lt;/span> &lt;span class="mtk4">prize&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">this&lt;/span> &lt;span class="mtk4">print&lt;/span> &lt;span class="mtk4">statement!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
 &lt;span class="mtk1">res&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Nope!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk1">res;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">win&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">winner[BUFSIZE];&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"New&lt;/span> &lt;span class="mtk4">winner!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Name?&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(winner,&lt;/span> &lt;span class="mtk6">360&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">stdin);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Congrats&lt;/span> &lt;span class="mtk6">%s\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">winner);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk9 mtki">argc&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">**&lt;/span>&lt;span class="mtk9 mtki">argv&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stdout,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">_IONBF,&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Set&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">gid&lt;/span> &lt;span class="mtk3">to&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">effective&lt;/span> &lt;span class="mtk3">gid&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">this&lt;/span> &lt;span class="mtk3">prevents&lt;/span> &lt;span class="mtk3">/bin/sh&lt;/span> &lt;span class="mtk3">from&lt;/span> &lt;span class="mtk3">dropping&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">privileges&lt;/span>
 &lt;span class="mtk7 mtki">gid_t&lt;/span> &lt;span class="mtk1">gid&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">getegid&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">setresgid&lt;/span>&lt;span class="mtk1">(gid,&lt;/span> &lt;span class="mtk1">gid,&lt;/span> &lt;span class="mtk1">gid);&lt;/span>

 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">res;&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">my&lt;/span> &lt;span class="mtk4">guessing&lt;/span> &lt;span class="mtk4">game!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">res&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">do_stuff&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(res)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">win&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>First of all, we notice that the &lt;code>get_random&lt;/code> function is calling &lt;code>rand&lt;/code> and computing the remainder when dividing by 100 (&lt;code>BUFSIZE&lt;/code>). Since the seed is the same when the process starts, we can perform a trial-error procedure until we obtain the correct number (iterating from 0 to 99).&lt;/p></description></item><item><title>Guessing Game 2</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>vuln&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="static-code-analysis">Static code analysis&lt;/h2>
&lt;p>We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;sys/types.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;sys/stat.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">BUFSIZE&lt;/span> &lt;span class="mtk6">512&lt;/span>


&lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk8">get_random&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk1">rand;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">get_version&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">do_stuff&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">ans&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">get_random&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk5">%&lt;/span> &lt;span class="mtk6">4096&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">res&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"What&lt;/span> &lt;span class="mtk4">number&lt;/span> &lt;span class="mtk4">would&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">like&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">guess?&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">guess[BUFSIZE];&lt;/span>
 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(guess,&lt;/span> &lt;span class="mtk1">BUFSIZE,&lt;/span> &lt;span class="mtk1">stdin);&lt;/span>

 &lt;span class="mtk7 mtki">long&lt;/span> &lt;span class="mtk1">g&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">atol&lt;/span>&lt;span class="mtk1">(guess);&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">!&lt;/span>&lt;span class="mtk1">g)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"That's&lt;/span> &lt;span class="mtk4">not&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">valid&lt;/span> &lt;span class="mtk4">number!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(g&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk1">ans)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Congrats!&lt;/span> &lt;span class="mtk4">You&lt;/span> &lt;span class="mtk4">win!&lt;/span> &lt;span class="mtk4">Your&lt;/span> &lt;span class="mtk4">prize&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">this&lt;/span> &lt;span class="mtk4">print&lt;/span> &lt;span class="mtk4">statement!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
 &lt;span class="mtk1">res&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Nope!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk1">res;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">win&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">winner[BUFSIZE];&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"New&lt;/span> &lt;span class="mtk4">winner!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Name?&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(winner);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Congrats:&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(winner);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk9 mtki">argc&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">**&lt;/span>&lt;span class="mtk9 mtki">argv&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stdout,&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">_IONBF,&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">Set&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">gid&lt;/span> &lt;span class="mtk3">to&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">effective&lt;/span> &lt;span class="mtk3">gid&lt;/span>
 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">this&lt;/span> &lt;span class="mtk3">prevents&lt;/span> &lt;span class="mtk3">/bin/sh&lt;/span> &lt;span class="mtk3">from&lt;/span> &lt;span class="mtk3">dropping&lt;/span> &lt;span class="mtk3">the&lt;/span> &lt;span class="mtk3">privileges&lt;/span>
 &lt;span class="mtk7 mtki">gid_t&lt;/span> &lt;span class="mtk1">gid&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">getegid&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">setresgid&lt;/span>&lt;span class="mtk1">(gid,&lt;/span> &lt;span class="mtk1">gid,&lt;/span> &lt;span class="mtk1">gid);&lt;/span>

 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">res;&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">my&lt;/span> &lt;span class="mtk4">guessing&lt;/span> &lt;span class="mtk4">game!&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Version:&lt;/span> &lt;span class="mtk6">%x\n\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">get_version&lt;/span>&lt;span class="mtk1">());&lt;/span>

 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">res&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">do_stuff&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(res)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">win&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The code is pretty similar to the one on challenge &lt;a target="_blank" href="../guessing-game-1">Guessing Game 1&lt;/a> (take a look at that challenge before continuing).&lt;/p></description></item><item><title>Here's a LIBC</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/heres-a-libc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/heres-a-libc/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>vuln&lt;/code> and a &lt;code>libc.so.6&lt;/code> file as external library:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we run the binary we will get a segmentation fault:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">chmod&lt;/span> +x &lt;span class="mtku">vuln&lt;/span>

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./vuln&lt;/span>
zsh: segmentation fault (core dumped) ./vuln 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>It is configured to use Glibc at the current directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">ldd&lt;/span> &lt;span class="mtku">vuln&lt;/span>
 linux-vdso.so.1 (0x00007ffdc3195000)
 libc.so.6 => ./libc.so.6 (0x00007ff93c204000)
 /lib64/ld-linux-x86-64.so.2 (0x00007ff93c5f7000) 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We will use &lt;a target="_blank" href="https://github.com/io12/pwninit">&lt;code>pwninit&lt;/code>&lt;/a> to patch the binary so that it works:&lt;/p></description></item><item><title>SaaS</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/saas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/saas/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>chall&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="static-code-analysis">Static code analysis&lt;/h2>
&lt;p>We also have the original C source code (&lt;code>chall.c&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;errno.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;error.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;fcntl.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;seccomp.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;sys/mman.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;sys/syscall.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">SIZE&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">100&lt;/span>

&lt;span class="mtk3">// &lt;/span>&lt;span class="mtk3 detected-link">http://shell-storm.org/online/Online-Assembler-and&lt;/span>&lt;span class="mtk3 detected-link">-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C&lt;/span>&lt;span class="mtk3 detected-link">+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+r&lt;/span>&lt;span class="mtk3 detected-link">di%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%&lt;/span>&lt;span class="mtk3 detected-link">0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+r&lt;/span>&lt;span class="mtk3 detected-link">dx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%&lt;/span>&lt;span class="mtk3 detected-link">0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r&lt;/span>&lt;span class="mtk3 detected-link">8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0&lt;/span>&lt;span class="mtk3 detected-link">Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2&lt;/span>&lt;span class="mtk3 detected-link">C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0&lt;/span>&lt;span class="mtk3 detected-link">A&amp;amp;arch=x86-64&amp;amp;as_format=inline#assembly&lt;/span> 
&lt;span class="mtk5">#define&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">HEADER&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\x48\x31\xc0\x48\x89\xe7\x48\x81\xe7\x00\xf0\xff\x&lt;/span>&lt;span class="mtk6">ff\x48\x81\xef\x00\x20\x00\x00\x48\xc7\xc1\x00\x06&lt;/span>&lt;span class="mtk6">\x00\x00\xf3\x48\xab\x48\x31\xdb\x48\x31\xc9\x48\x&lt;/span>&lt;span class="mtk6">31\xd2\x48\x31\xe4\x48\x31\xed\x48\x31\xf6\x48\x31&lt;/span>&lt;span class="mtk6">\xff\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\x&lt;/span>&lt;span class="mtk6">db\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff&lt;/span>&lt;span class="mtk4">"&lt;/span>

&lt;span class="mtk5">#define&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">FLAG_SIZE&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">64&lt;/span>

&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> flag[FLAG_SIZE];&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">load_flag&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> fd;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> ((fd &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, O_RDONLY)) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">error&lt;/span>&lt;span class="mtk1">(EXIT_FAILURE, errno, &lt;/span>&lt;span class="mtk4">"open flag"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(fd, flag, FLAG_SIZE) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">error&lt;/span>&lt;span class="mtk1">(EXIT_FAILURE, errno, &lt;/span>&lt;span class="mtk4">"read flag"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (&lt;/span>&lt;span class="mtk8">close&lt;/span>&lt;span class="mtk1">(fd) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">error&lt;/span>&lt;span class="mtk1">(EXIT_FAILURE, errno, &lt;/span>&lt;span class="mtk4">"close flag"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> scmp_filter_ctx ctx;&lt;/span>
&lt;span class="mtk1"> ctx &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">seccomp_init&lt;/span>&lt;span class="mtk1">(SCMP_ACT_KILL);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (ctx &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">) {&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">|=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">seccomp_rule_add&lt;/span>&lt;span class="mtk1">(ctx, SCMP_ACT_ALLOW, &lt;/span>&lt;span class="mtk8">SCMP_SYS&lt;/span>&lt;span class="mtk1">(write), &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">,&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">SCMP_A0&lt;/span>&lt;span class="mtk1">(SCMP_CMP_EQ, STDOUT_FILENO));&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">|=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">seccomp_rule_add&lt;/span>&lt;span class="mtk1">(ctx, SCMP_ACT_ALLOW, &lt;/span>&lt;span class="mtk8">SCMP_SYS&lt;/span>&lt;span class="mtk1">(exit), &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">|=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">seccomp_rule_add&lt;/span>&lt;span class="mtk1">(ctx, SCMP_ACT_ALLOW, &lt;/span>&lt;span class="mtk8">SCMP_SYS&lt;/span>&lt;span class="mtk1">(exit_group), &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> ret &lt;/span>&lt;span class="mtk5">|=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">seccomp_load&lt;/span>&lt;span class="mtk1">(ctx);&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">seccomp_release&lt;/span>&lt;span class="mtk1">(ctx);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (ctx &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">||&lt;/span>&lt;span class="mtk1"> ret)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">error&lt;/span>&lt;span class="mtk1">(EXIT_FAILURE, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"seccomp"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1">{&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stdin, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(stderr, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">load_flag&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome to Shellcode as a Service!"&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> addr &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">mmap&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1000&lt;/span>&lt;span class="mtk1">, PROT_EXEC &lt;/span>&lt;span class="mtk5">|&lt;/span>&lt;span class="mtk1"> PROT_READ &lt;/span>&lt;span class="mtk5">|&lt;/span>&lt;span class="mtk1"> PROT_WRITE, MAP_PRIVATE &lt;/span>&lt;span class="mtk5">|&lt;/span>&lt;span class="mtk1"> MAP_ANON, &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">memcpy&lt;/span>&lt;span class="mtk1">(addr, HEADER, &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(HEADER));&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, addr &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(HEADER) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, SIZE);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setup&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">goto&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">addr;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We see that the &lt;code>main&lt;/code> function loads the flag in a global variable called &lt;code>flag&lt;/code> using function &lt;code>load_flag&lt;/code>, then it prepares a memory region to let us enter low-level instructions that will be executed. However, before running our code, the program adds &lt;code>seccomp&lt;/code> rules in &lt;code>setup&lt;/code>.&lt;/p></description></item><item><title>seed-sPRiNG</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>seed_spring&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span> 
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>This time we do not have the source code. However, we can use a reversing tool like Ghidra to decompile the binary into somewhat readable C source code. Here we have the &lt;code>main&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">uint&lt;/span> &lt;span class="mtk1">local_20;&lt;/span>
 &lt;span class="mtk7 mtki">uint&lt;/span> &lt;span class="mtk1">local_1c;&lt;/span>
 &lt;span class="mtk7 mtki">uint&lt;/span> &lt;span class="mtk1">local_18;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">local_14;&lt;/span>
 &lt;span class="mtk1">undefined&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">local_10;&lt;/span>

 &lt;span class="mtk1">local_10&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">stack0x00000004;&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"..."&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome!&lt;/span> &lt;span class="mtk4">The&lt;/span> &lt;span class="mtk4">game&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">easy:&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">jump&lt;/span> &lt;span class="mtk4">on&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">sPRiNG."&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"How&lt;/span> &lt;span class="mtk4">high&lt;/span> &lt;span class="mtk4">will&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">fly?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
 &lt;span class="mtk1">local_18&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">time&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk7 mtki">time_t&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">srand&lt;/span>&lt;span class="mtk1">(local_18);&lt;/span>
 &lt;span class="mtk1">local_14&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>

 &lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">true&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">1e&lt;/span> &lt;span class="mtk5">&amp;lt;&lt;/span> &lt;span class="mtk1">local_14)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Congratulation!&lt;/span> &lt;span class="mtk4">You&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">ve&lt;/span> &lt;span class="mtk4">won!&lt;/span> &lt;span class="mtk4">Here&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">flag:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
 &lt;span class="mtk8">get_flag&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"LEVEL&lt;/span> &lt;span class="mtk4">(&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">/30)&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">local_14);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">local_1c&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">rand&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk1">local_1c&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">local_1c&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span> &lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">f&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Guess&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">height:&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
 &lt;span class="mtk8">__isoc99_scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">local_20);&lt;/span>
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdin);&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(local_1c&lt;/span> &lt;span class="mtk5">!=&lt;/span> &lt;span class="mtk1">local_20)&lt;/span> &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">local_14&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">local_14&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"WRONG!&lt;/span> &lt;span class="mtk4">Sorry,&lt;/span> &lt;span class="mtk4">better&lt;/span> &lt;span class="mtk4">luck&lt;/span> &lt;span class="mtk4">next&lt;/span> &lt;span class="mtk4">time!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(stdout);&lt;/span>
 &lt;span class="mtk3">/*&lt;/span> &lt;span class="mtk3">WARNING:&lt;/span> &lt;span class="mtk3">Subroutine&lt;/span> &lt;span class="mtk3">does&lt;/span> &lt;span class="mtk3">not&lt;/span> &lt;span class="mtk3">return&lt;/span> &lt;span class="mtk3">*/&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>What the program does is set a seed for a Pseudo Random Number Generator (PRNG) and then call &lt;code>rand&lt;/code> 30 times. The AND operation with &lt;code>0xf&lt;/code> will be applied to the value returned from &lt;code>rand&lt;/code>, and after that the program checks if the user input is equal to the result of the AND operation. If the result is correct, we continue to the next level. If not, the program exits.&lt;/p></description></item><item><title>Stonks</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/</guid><description>&lt;p>We are given the C source code of a binary. The source code is relatively large, so the most interesting function is this one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;time.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">FLAG_BUFFER&lt;/span> &lt;span class="mtk6">128&lt;/span>
&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">MAX_SYM_LEN&lt;/span> &lt;span class="mtk6">4&lt;/span>

&lt;span class="mtk5">typedef&lt;/span> &lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">Stonks&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">shares;&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">symbol[MAX_SYM_LEN&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">Stonks&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">next;&lt;/span>
&lt;span class="mtk1">}&lt;/span> &lt;span class="mtk1">Stonk;&lt;/span>

&lt;span class="mtk5">typedef&lt;/span> &lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">Portfolios&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">money;&lt;/span>
 &lt;span class="mtk1">Stonk&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">head;&lt;/span>
&lt;span class="mtk1">}&lt;/span> &lt;span class="mtk1">Portfolio;&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">buy_stonks&lt;/span>&lt;span class="mtk1">(Portfolio&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk9 mtki">p&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">!&lt;/span>&lt;span class="mtk1">p)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">api_buf[FLAG_BUFFER];&lt;/span>
 &lt;span class="mtk1">FILE&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">f&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">fopen&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"api"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk4">"r"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">!&lt;/span>&lt;span class="mtk1">f)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Flag&lt;/span> &lt;span class="mtk4">file&lt;/span> &lt;span class="mtk4">not&lt;/span> &lt;span class="mtk4">found.&lt;/span> &lt;span class="mtk4">Contact&lt;/span> &lt;span class="mtk4">an&lt;/span> &lt;span class="mtk4">admin.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(api_buf,&lt;/span> &lt;span class="mtk1">FLAG_BUFFER,&lt;/span> &lt;span class="mtk1">f);&lt;/span>

 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">money&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">p-&amp;gt;money;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">shares&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">Stonk&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">temp&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Using&lt;/span> &lt;span class="mtk4">patented&lt;/span> &lt;span class="mtk4">AI&lt;/span> &lt;span class="mtk4">algorithms&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">buy&lt;/span> &lt;span class="mtk4">stonks&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(money&lt;/span> &lt;span class="mtk5">&amp;gt;&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">shares&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">rand&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk5">%&lt;/span> &lt;span class="mtk1">money)&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">temp&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">pick_symbol_with_AI&lt;/span>&lt;span class="mtk1">(shares);&lt;/span>
 &lt;span class="mtk1">temp-&amp;gt;next&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">p-&amp;gt;head;&lt;/span>
 &lt;span class="mtk1">p-&amp;gt;head&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">temp;&lt;/span>
 &lt;span class="mtk1">money&lt;/span> &lt;span class="mtk5">-=&lt;/span> &lt;span class="mtk1">shares;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Stonks&lt;/span> &lt;span class="mtk4">chosen&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">TODO:&lt;/span> &lt;span class="mtk3">Figure&lt;/span> &lt;span class="mtk3">out&lt;/span> &lt;span class="mtk3">how&lt;/span> &lt;span class="mtk3">to&lt;/span> &lt;span class="mtk3">read&lt;/span> &lt;span class="mtk3">token&lt;/span> &lt;span class="mtk3">from&lt;/span> &lt;span class="mtk3">file,&lt;/span> &lt;span class="mtk3">for&lt;/span> &lt;span class="mtk3">now&lt;/span> &lt;span class="mtk3">just&lt;/span> &lt;span class="mtk3">ask&lt;/span> 

 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">user_buf&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">300&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"What&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">API&lt;/span> &lt;span class="mtk4">token?&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%300s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">user_buf);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Buying&lt;/span> &lt;span class="mtk4">stonks&lt;/span> &lt;span class="mtk4">with&lt;/span> &lt;span class="mtk4">token:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(user_buf);&lt;/span>

 &lt;span class="mtk3">//&lt;/span> &lt;span class="mtk3">TODO:&lt;/span> &lt;span class="mtk3">Actually&lt;/span> &lt;span class="mtk3">use&lt;/span> &lt;span class="mtk3">key&lt;/span> &lt;span class="mtk3">to&lt;/span> &lt;span class="mtk3">interact&lt;/span> &lt;span class="mtk3">with&lt;/span> &lt;span class="mtk3">API&lt;/span>

 &lt;span class="mtk8">view_portfolio&lt;/span>&lt;span class="mtk1">(p);&lt;/span>

 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Here we have a Format String vulnerability:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">user_buf&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">300&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"What&lt;/span> &lt;span class="mtk4">is&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">API&lt;/span> &lt;span class="mtk4">token?&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk8">scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%300s&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">user_buf);&lt;/span>
&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Buying&lt;/span> &lt;span class="mtk4">stonks&lt;/span> &lt;span class="mtk4">with&lt;/span> &lt;span class="mtk4">token:&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(user_buf);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Let&amp;rsquo;s try it on the remote instance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">nc&lt;/span> mercury.picoctf.net 16439
Welcome back to the trading app!

What would you like to do?
1) Buy some stonks!
2) View my portfolio
1
Using patented AI algorithms to buy stonks
Stonks chosen
What is your API token?
%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x
Buying stonks with token:
940c4b0.804b000.80489c3.f7f0ad80.ffffffff.1.940a160.f7f18110.f7f0adc7.0.940b180.1 
Portfolio


1 shares of NXZ
1 shares of RZ
7 shares of V
8 shares of Q
1 shares of NOC
10 shares of PW
6 shares of BC
34 shares of AS
64 shares of MB
71 shares of VD
46 shares of F
73 shares of WM
145 shares of IPA
1395 shares of L
Goodbye!
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>These hexadecimal numbers are values leaked from the stack:&lt;/p></description></item><item><title>The Office</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>the_office&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The challenge says that they have implemented a secure heap using canaries.&lt;/p>
&lt;p>We do not have the C source code. Hence, we need to use a reversing tool like Ghidra.&lt;/p>
&lt;p>Although the file is stripped:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">file&lt;/span> &lt;span class="mtku">the_office&lt;/span>
the_office: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=dd5f440d82f17865303f292401c3e1ea843a0e25, stripped 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We can identify the &lt;code>main&lt;/code> function because it is the argument of &lt;code>__libc_start_main&lt;/code>:&lt;/p></description></item><item><title>Unsubscriptions Are Free</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</guid><description>&lt;p>We are given a 32-bit binary called &lt;code>vuln&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: i386-32-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x8048000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the C source code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdint.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;stdlib.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;string.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;unistd.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;fcntl.h&amp;gt;&lt;/span>
&lt;span class="mtk5">#include&lt;/span> &lt;span class="mtk4">&amp;lt;ctype.h&amp;gt;&lt;/span>

&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">FLAG_BUFFER&lt;/span> &lt;span class="mtk6">200&lt;/span>
&lt;span class="mtk5">#define&lt;/span> &lt;span class="mtk8">LINE_BUFFER_SIZE&lt;/span> &lt;span class="mtk6">20&lt;/span>

&lt;span class="mtk5">typedef&lt;/span> &lt;span class="mtk7 mtki">struct&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8 mtku">uintptr_t&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">whatToDo&lt;/span>&lt;span class="mtk1">)();&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">username&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span> &lt;span class="mtk8 mtku">cmd&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk8 mtku">cmd&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">;&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">hahaexploitgobrrr&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk8">FLAG_BUFFER&lt;/span>&lt;span class="mtk1">];&lt;/span>
 &lt;span class="mtk8 mtku">FILE&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">f&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">fopen&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk4">"r"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fgets&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">FLAG_BUFFER&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fprintf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdout&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">%s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">buf&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">fflush&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdout&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk8">getsline&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">getchar&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">line&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">),&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">linep&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">line&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8 mtku">size_t&lt;/span> &lt;span class="mtk1">lenmax&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">len&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">lenmax&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk1">c&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">line&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">for&lt;/span> &lt;span class="mtk1">(;;)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">c&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">fgetc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdin&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">c&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk8">EOF&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">--&lt;/span>&lt;span class="mtk1">len&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">len&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">lenmax&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">linen&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">realloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">linep&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">lenmax&lt;/span> &lt;span class="mtk5">*=&lt;/span> &lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">);&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">linen&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">free&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">linep&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk1">line&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">linen&lt;/span> &lt;span class="mtk5">+&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">line&lt;/span> &lt;span class="mtk5">-&lt;/span> &lt;span class="mtk1">linep&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">linep&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">linen&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>

 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">((&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">line&lt;/span>&lt;span class="mtk5">++&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">c&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">line&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\0&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk1">linep;&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">doProcess&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">cmd&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk9 mtki">obj&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk9 mtki">obj&lt;/span>&lt;span class="mtk1">-&amp;gt;&lt;/span>&lt;span class="mtk1">whatToDo)();&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">s&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"OOP!&lt;/span> &lt;span class="mtk4">Memory&lt;/span> &lt;span class="mtk4">leak...&lt;/span>&lt;span class="mtk6">%p\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">hahaexploitgobrrr&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Thanks&lt;/span> &lt;span class="mtk4">for&lt;/span> &lt;span class="mtk4">subsribing!&lt;/span> &lt;span class="mtk4">I&lt;/span> &lt;span class="mtk4">really&lt;/span> &lt;span class="mtk4">recommend&lt;/span> &lt;span class="mtk4">becoming&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">premium&lt;/span> &lt;span class="mtk4">member!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">p&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Membership&lt;/span> &lt;span class="mtk4">pending...&lt;/span> &lt;span class="mtk4">(There's&lt;/span> &lt;span class="mtk4">also&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">super-subscription&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">can&lt;/span> &lt;span class="mtk4">also&lt;/span> &lt;span class="mtk4">get&lt;/span> &lt;span class="mtk4">for&lt;/span> &lt;span class="mtk4">twice&lt;/span> &lt;span class="mtk4">the&lt;/span> &lt;span class="mtk4">price!)"&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">m&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Account&lt;/span> &lt;span class="mtk4">created."&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">leaveMessage&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"I&lt;/span> &lt;span class="mtk4">only&lt;/span> &lt;span class="mtk4">read&lt;/span> &lt;span class="mtk4">premium&lt;/span> &lt;span class="mtk4">member&lt;/span> &lt;span class="mtk4">messages&lt;/span> &lt;span class="mtk4">but&lt;/span> &lt;span class="mtk4">you&lt;/span> &lt;span class="mtk4">can&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"try&lt;/span> &lt;span class="mtk4">anyways:"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span> &lt;span class="mtk1">msg&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk1">msg&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">i&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk7 mtki">char&lt;/span> &lt;span class="mtk1">response&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"You're&lt;/span> &lt;span class="mtk4">leaving&lt;/span> &lt;span class="mtk4">already(Y/N)?"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span> &lt;span class="mtk6">%c&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">response&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">toupper&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">response&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk5">==&lt;/span> &lt;span class="mtk4">'Y'&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Bye!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">free&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Ok.&lt;/span> &lt;span class="mtk4">Get&lt;/span> &lt;span class="mtk4">premium&lt;/span> &lt;span class="mtk4">membership&lt;/span> &lt;span class="mtk4">please!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">printMenu&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Welcome&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">my&lt;/span> &lt;span class="mtk4">stream!&lt;/span> &lt;span class="mtk4">^W^"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"=========================="&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"(S)ubscribe&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">my&lt;/span> &lt;span class="mtk4">channel"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"(I)nquire&lt;/span> &lt;span class="mtk4">about&lt;/span> &lt;span class="mtk4">account&lt;/span> &lt;span class="mtk4">deletion"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"(M)ake&lt;/span> &lt;span class="mtk4">an&lt;/span> &lt;span class="mtk4">Twixer&lt;/span> &lt;span class="mtk4">account"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"(P)ay&lt;/span> &lt;span class="mtk4">for&lt;/span> &lt;span class="mtk4">premium&lt;/span> &lt;span class="mtk4">membership"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"(l)eave&lt;/span> &lt;span class="mtk4">a&lt;/span> &lt;span class="mtk4">message(with&lt;/span> &lt;span class="mtk4">or&lt;/span> &lt;span class="mtk4">without&lt;/span> &lt;span class="mtk4">logging&lt;/span> &lt;span class="mtk4">in)"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"(e)xit"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span> &lt;span class="mtk8">processInput&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">scanf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span> &lt;span class="mtk6">%c&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk5">&amp;amp;&lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">choice&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">toupper&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">switch&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk4">'S'&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk5">if&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">-&amp;gt;&lt;/span>&lt;span class="mtk1">whatToDo&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk8">s&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk1">}&lt;/span> &lt;span class="mtk5">else&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Not&lt;/span> &lt;span class="mtk4">logged&lt;/span> &lt;span class="mtk4">in!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk4">'P'&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">-&amp;gt;&lt;/span>&lt;span class="mtk1">whatToDo&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk8">p&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk4">'I'&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">-&amp;gt;&lt;/span>&lt;span class="mtk1">whatToDo&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk8">i&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk4">'M'&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">-&amp;gt;&lt;/span>&lt;span class="mtk1">whatToDo&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk8">m&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"==========================="&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Registration:&lt;/span> &lt;span class="mtk4">Welcome&lt;/span> &lt;span class="mtk4">to&lt;/span> &lt;span class="mtk4">Twixer!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Enter&lt;/span> &lt;span class="mtk4">your&lt;/span> &lt;span class="mtk4">username:&lt;/span> &lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">-&amp;gt;&lt;/span>&lt;span class="mtk1">username&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk8">getsline&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk4">'L'&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk8">leaveMessage&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1">;&lt;/span>
 &lt;span class="mtk5">case&lt;/span> &lt;span class="mtk4">'E'&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk5">default&lt;/span>&lt;span class="mtk1">:&lt;/span>
 &lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Invalid&lt;/span> &lt;span class="mtk4">option!"&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk8">exit&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span> &lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">setbuf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">stdout&lt;/span>&lt;span class="mtk1">,&lt;/span> &lt;span class="mtk8">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">user&lt;/span> &lt;span class="mtk5">=&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">cmd&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk8">malloc&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk5">sizeof&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">));&lt;/span>
 &lt;span class="mtk5">while&lt;/span> &lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span> &lt;span class="mtk1">{&lt;/span>
 &lt;span class="mtk8">printMenu&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">processInput&lt;/span>&lt;span class="mtk1">();&lt;/span>
 &lt;span class="mtk8">doProcess&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">user&lt;/span>&lt;span class="mtk1">);&lt;/span>
 &lt;span class="mtk1">}&lt;/span>
 &lt;span class="mtk5">return&lt;/span> &lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, the program has four functionalities:&lt;/p>
&lt;ul>
&lt;li>Leak the address of the function &lt;code>hahaexploitgobrrr&lt;/code> (S)&lt;/li>
&lt;li>Add an account (M)&lt;/li>
&lt;li>Delete an account (I)&lt;/li>
&lt;li>Leave a message (L)&lt;/li>
&lt;/ul>
&lt;p>The key here is that the &lt;code>user&lt;/code> variable can be reset using &lt;code>free&lt;/code>, but the pointer to the variable is not changed. Moreover, the message (L) is saved again in the heap calling &lt;code>malloc&lt;/code>.&lt;/p></description></item><item><title>zero_to_hero</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/zero_to_hero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/zero_to_hero/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>zero_to_hero&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-red">No PIE (0x400000)&lt;/span> 
RUNPATH: &lt;span class="code-dark-red">b'./'&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have the Glibc shared library and the loader (version 2.29):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">./ld-2.29.so&lt;/span> &lt;span class="mtku">./libc.so.6&lt;/span>
GNU C Library (Ubuntu GLIBC 2.29-0ubuntu2) stable release version 2.29. 
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 8.3.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
&lt;/code>&lt;/pre>&lt;/div>

&lt;h2 id="reverse-engineering">Reverse engineering&lt;/h2>
&lt;p>If we open the binary in Ghidra, we will see this &lt;code>main&lt;/code> function:&lt;/p></description></item></channel></rss>