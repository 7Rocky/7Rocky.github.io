<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cryptography on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/</link><description>Recent content in Cryptography on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/picoctf/cryptography/index.xml" rel="self" type="application/rss+xml"/><item><title>Mind your Ps and Qs</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/mind-your-ps-and-qs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/mind-your-ps-and-qs/</guid><description>We are given the output of an RSA encryption:
Decrypt my super sick RSA: c: 240986837130071017759137533082982207147971245672412893755780400885108149004760496 n: 831416828080417866340504968188990032810316193533653516022175784399720141076262857 e: 65537 RSA background RSA works so that, given a message $m$ in decimal format, we can encrypt it as follows:
$$ c = m^e \pmod{n} $$ And the decryption needs two more values: $\phi(n) = (p - 1) (q - 1)$ and $d = e^{-1} \pmod{\phi(n)}$, so that:
$$ m = c^d \pmod{n} $$ Vulnerability The modulus $n$ is quite short, and thus it can be factored easily.</description></item><item><title>Mod 26</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/</guid><description>We are given a ciphertext:
cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX} We see that the message has more or less the format of a picoCTF flag (picoCTF{...}), due to the fact that there are 4 lowercase and 3 uppercase letters before {, and ends with }. Moreover, there are several _.
It seems clear that the encryption is based on a substitution algorithm (Caesar cipher). The most common algorithm is ROT13. Using CyberChef, we can decrypt the message using ROT13 and read the flag:</description></item><item><title>Sum-O-Primes</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/sum-o-primes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/sum-o-primes/</guid><description>We are given the output of an RSA encryption:
x = 17fef88f46a58da13be8083b814caf6cd8d494dd6c21ad7bf399e521e14466d51a74f51ad5499731018b6a437576e72bd397c4bb07bfbb699c1a35f1f4fa1b86dee2a1702670e9cea45aa7062f9569279d6d4b964f3df2ff8e38cf029faad57e42b831bde21132303e127cba4e80cd3c9ff6a7bad5b399a18252dc35460471ea8 n = 85393637a04ec36e699796ac16979c51ecea41cfd8353c2a241193d1d40d02701b34e9cd4deaf2b13b6717757f178ff75249f3d675448ec928aef41c39e4be1c8ba2ba79c4ada36c607763d7dc8543103acfe1027245acda2208f22fcabe0f37bdadf077e4f943c4f4178cedeb5279a4ebc86323356e23a58b6666ac6ffbf4f1c8229117ffb9071a94dfb724957f10d6664e4ee02e16bed29eb922f126e2082e2f73b5c5b7817e0543155eb9673f4de3de8c91707c1261e8ba6e7348d930293f7796679218c2b1dabe41527eccd72ec3e7284344622eff81ae0541769fb70b6146b54bd092c2dfbe7f8e9653cad80d0fb4f3ef288778927b3852f9ff3a4076d7 c = 42cafbc77ed8396a681dac328701ee02cd746488ae084f15a3e6a5b8f666c595a372a69bbca0dae934fd5ed2292d4393912ee10a22a3b57de9cee2f30b5dc7c67f574b0453f6074171cca37bd407529cb30ba17f152ef5b2484d94b38cf0a513a723255d725e5c3b3f3c985f9223095be3fa148afedf91e4ed37720c3d97dd29cf07830efa8a557a9da68d3095fc3b31f3763e030b62c70d94c3d2951e163e48683f3b9611d562ea06bf1e5d8465e8bf5a6345050a5e7b0c175faf136562cf2a196fdb61ac6503446616cffa9ed85015b86dda73f6eda4d688d3e719a07439d98f95fb5dcf675948ec58d9af83fa29afa4375213ec48f09a6c8cbc431cfe7c6a We are also given the source code to generate this output. There, we can see that $x = p + q$, $n = p q$ and $c$ is the ciphertext. The exponent $e = 65537$.
RSA background RSA works so that, given a message $m$ in decimal format, we can encrypt it as follows:</description></item><item><title>Tapping</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/tapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/tapping/</guid><description>We are given a strange message from nc:
$ nc jupiter.challenges.picoctf.org 9422 .--. .. -.-. --- -.-. - ..-. { -- ----- .-. ... ...-- -.-. ----- -.. ...-- .---- ... ..-. ..- -. ..--- -.... ---.. ...-- ---.. ..--- ....- -.... .---- ----- } Ncat: Broken pipe. We see that the message has only . and - (and also braces, indicating that the message might be the flag). In fact, the message is Morse code.</description></item></channel></rss>