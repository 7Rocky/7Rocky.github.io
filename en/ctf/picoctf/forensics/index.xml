<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/</link><description>Recent content in Forensics on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/picoctf/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Enhance!</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/enhance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/enhance/</guid><description>We have a file called drawing.flag.svg that has an image in SVG format:
At first glance, we don&amp;rsquo;t see anything, but if we inspect the XML code inside the SVG file, we will see the flag characters:
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&amp;gt; &amp;lt;!-- Created with Inkscape (http://www.inkscape.org/) --&amp;gt; &amp;lt;svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" width="210mm" height="297mm" viewBox="0 0 210 297" version="1.1" id="svg8" inkscape:version="0.92.5 (2060ec1f9f, 2020-04-08)" sodipodi:docname="drawing.svg"&amp;gt; &amp;lt;defs id="defs2" /&amp;gt; &amp;lt;sodipodi:namedview id="</description></item><item><title>Glory of the Garden</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/</guid><description>We are given a JPEG image called garden.jpg:
The file is recognized as a proper JPEG image:
$ file garden.jpg garden.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 2999x2249, components 3 However, if we show printable strings inside the file contents, we capture the flag (we can specify the length of the string to output):
$ strings -50 garden.jpg Here is a flag "</description></item><item><title>information</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/information/</guid><description>We are given a JPEG image called cat.jpg:
The file is recognized as a proper JPEG image:
$ file cat.jpg cat.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 2560x1598, components 3 However, if we extract the file metadata, we will see something strange:
$ exiftool cat.jpg ExifTool Version Number : 12.30 File Name : cat.jpg Directory : . File Size : 858 KiB File Modification Date/Time : File Access Date/Time : File Inode Change Date/Time : File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description></item><item><title>Lookey here</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/lookey-here/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/lookey-here/</guid><description>We are given a large text file called anthem.flag.txt:
$ wc -l anthem.flag.txt 2146 anthem.flag.txt 2146 are a lot to search the flag by hand. Instead, we can use grep to find the flag given that they have a special format format (picoCTF{...}):
$ grep picoCTF anthem.flag.txt we think that the men of picoCTF{gr3p_15_@w3s0m3_4c479940}</description></item><item><title>Redaction gone wrong</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/redaction-gone-wrong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/redaction-gone-wrong/</guid><description>We are given a PDF file called Financial_Report_for_ABC_Labs.pdf. It shows some text:
But there are some words that where hidden using a kind of black &amp;ldquo;background color&amp;rdquo;. However, we can still select the whole text using the mouse, and there is the flag:
Financial Report for ABC Labs, Kigali, Rwanda for the year 2021. Breakdown - Just painted over in MS word. Cost Benefit Analysis Credit Debit This is not the flag, keep looking Expenses from the picoCTF{C4n_Y0u_S33_m3_fully} Redacted document.</description></item><item><title>St3g0</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/st3g0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/st3g0/</guid><description>We have a PNG image called pico.flag.png:
Since the challenge name is St3g0, it seems that the image has hidden data using steganography. We can use zsteg to show the flag:
$ zsteg pico.flag.png b1,r,lsb,xy .. text: "~__B>wV_G@" b1,rgb,lsb,xy .. text: "picoCTF{7h3r3_15_n0_5p00n_96ae0ac1}$t3g0" b1,abgr,lsb,xy .. text: "E2A5q4E%uSA" b2,b,lsb,xy .. text: "AAPAAQTAAA" b2,b,msb,xy .. text: "HWUUUUUU" b2,a,lsb,xy .. file: Matlab v4 mat-file (little endian) &amp;gt;&amp;lt;?P, numeric, rows 0, columns 0 b2,a,msb,xy .. file: Matlab v4 mat-file (little endian) | &amp;lt;?</description></item></channel></rss>