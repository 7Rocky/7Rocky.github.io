<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plaid CTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/plaid-ctf/</link><description>Recent content in Plaid CTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/plaid-ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>DHCPPP</title><link>https://7rocky.github.io/en/ctf/other/plaid-ctf/dhcppp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/plaid-ctf/dhcppp/</guid><description>We are given the Python source code of the server that has the flag:
import time, zlib import secrets import hashlib import requests from Crypto.Cipher import ChaCha20_Poly1305 import dns.resolver CHACHA_KEY = secrets.token_bytes(32) TIMEOUT = 1e-1 def encrypt_msg(msg, nonce): # In case our RNG nonce is repeated, we also hash # the message in. This means the worst-case scenario # is that our nonce reflects a hash of the message # but saves the chance of a nonce being reused across # different messages nonce = sha256(msg[:32] + nonce[:32])[:12] cipher = ChaCha20_Poly1305.</description></item><item><title>Paranormial Commitment Scheme</title><link>https://7rocky.github.io/en/ctf/other/plaid-ctf/paranormial-commitment-scheme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/plaid-ctf/paranormial-commitment-scheme/</guid><description>We are given the Rust source code of the project that is used to encrypt the flag.
This is the main file (src/bin/paranormial.rs):
use pairing_ce::{ bls12_381::{Fr, G1Affine}, ff::{Field, PrimeField}, CurveAffine, GenericCurveProjective, }; use paranormial::{Polynomial, Setup}; use primitive_types::U256; use rand::{OsRng, Rng}; use std::{ fs::File, io::Read, }; const DEGREE: usize = 256; const ALPHA: &amp;amp;str = "1337133713371337133713371337133713371337133713371337133713371337133713371337"; const NUM_POINTS: usize = 512; const PARANOMIAL_RATE: u32 = 3; fn main() { let setup_path = std::env::args().</description></item></channel></rss>