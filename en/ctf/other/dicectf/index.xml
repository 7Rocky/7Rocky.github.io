<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DiceCTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/dicectf/</link><description>Recent content in DiceCTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/dicectf/index.xml" rel="self" type="application/rss+xml"/><item><title>baby-talk</title><link>https://7rocky.github.io/en/ctf/other/dicectf/baby-talk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/dicectf/baby-talk/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled The program gives us four options:
$ ./chall 1. str 2. tok 3. del 4. exit &amp;gt; Reverse engineering If we open the binary in Ghidra, we will see the following decompiled C code. The main function manages the options and calls the corresponding function:
int main() { ulong option; setbuf(stdout, NULL); do { while (true) { while (true) { print_menu(); printf("</description></item></channel></rss>