<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ECSC 2023 on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/</link><description>Recent content in ECSC 2023 on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/ecsc-2023/index.xml" rel="self" type="application/rss+xml"/><item><title>Blind</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/blind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/blind/</guid><description>&lt;blockquote>
&lt;p>Is this what people mean by &amp;ldquo;message blinding&amp;rdquo;?&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_f5aa4fd35f4c817ec1866c7f1d74fa6f.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/blind_37e06f044bca133267473011e5e5908c.sage">&lt;code>blind.sage&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>We are given a large SageMath script that uses ECDSA to sign the key to encrypt the flag (actually, a key used to derive an AES key with &lt;code>bcrypt.kdf&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">encrypt_flag&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">secrets&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">token_bytes&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">k2&lt;/span>&lt;span class="mtk5">//&lt;/span>&lt;span class="mtk6">8&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">bcrypt&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">kdf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">"ICC_CHALLENGE"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">31337&lt;/span>&lt;span class="mtk1">)&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">cipher&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">AES&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">new&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">key&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8 mtku">AES&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">MODE_CTR&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">nonce&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">""&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">with&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"rb"&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">cipher&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>So, the value &lt;code>k&lt;/code> in the above function is &lt;code>_k&lt;/code> in &lt;code>main&lt;/code>, and it is signed with ECDSA, where $x$ is the private key and $Y = -x \cdot G$ is the public key ($G$ is a generator point of the elliptic curve):&lt;/p></description></item><item><title>Hide and seek</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/hide-and-seek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/hide-and-seek/</guid><description>&lt;blockquote>
&lt;p>I have hidden my flag among the elliptic curve points. Go seek!&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_5058c28a109d275ad4f16a27a5330d28.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/hide_and_seek_50ecd7a9d6a2fcd37f227b408d83d3f0.sage">&lt;code>hide_and_seek.sage&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>We are given a SageMath script that uses Elliptic Curve Cryptography to encrypt the flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>
&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"rb"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">()[&lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"ECSC{"&lt;/span>&lt;span class="mtk1">):&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1">proof.arithmetic(&lt;/span>&lt;span class="mtk6">False&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">17898504337425668039996599611020710187085880959967&lt;/span>&lt;span class="mtk6">84752439608585988988036381340404632423562593&lt;/span> 
&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">62150203092456938230366891668382702110196631396589&lt;/span>&lt;span class="mtk6">305390157506915312399058961554609342345998&lt;/span>
&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">10058202168438049187127289183053967680004928216564&lt;/span>&lt;span class="mtk6">53232969553225956348680715987662653812284211&lt;/span>
&lt;span class="mtk1">F&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> GF(&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1">E.&lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1">G&lt;/span>&lt;span class="mtk5">&amp;gt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> EllipticCurve(F, [a, b])&lt;/span>
&lt;span class="mtk5">assert&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> G.order()&lt;/span>
&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> randrange(G.order())&lt;/span>
&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> G&lt;/span>
&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>

&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">42&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> randrange(G.order())&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> randrange(G.order())&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">res&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We have the curve parameters $a, b, p$, so we can get the generator point $G$. Then, to encrypt the flag, the script takes a random number $k$ and computes $P = k \cdot G$. After that, the script takes the flag (without &lt;code>ECSC{}&lt;/code>) as a decimal number and computes $Q = \mathrm{FLAG} \cdot P$.&lt;/p></description></item><item><title>Irish Flan</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/irish-flan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/irish-flan/</guid><description>&lt;blockquote>
&lt;p>Yum, time for dessert.&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_258aece3f0028897e45f735c1a500fdf.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/irish_flan_0318660e05fe0a097277d6858c1194e1.py">&lt;code>irish_flan.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>We are given a Python script that uses quaternions to hide an AES key used to encrypt the flag. The quaternion implementation is based on Python classes. We can assume that the implementation is correct (although there is a bug in the power of a quaternion, but it is not intended).&lt;/p>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>The relevant part of the script is:&lt;/p></description></item><item><title>Kernel searcher</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/kernel-searcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/kernel-searcher/</guid><description>&lt;blockquote>
&lt;p>I have a super secret isogeny. Wanna know where your point ends up? Just send me your favourite coordinates.&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/Dockerfile">&lt;code>Dockerfile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/entry.sh">&lt;code>entry.sh&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/kernel_searcher.sage">&lt;code>kernel_searcher.sage&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://raw.githubusercontent.com/cryptohack/ctf_archive/d1d0e1f91b7a8e0b27f967df54de2acf3ef7ece5/ecsc2023-kernel-searcher/server_files/kernel_searcher.xinetd">&lt;code>kernel_searcher.xinetd&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>We are given a SageMath script that hides the flag under an isogeny and allows us to evaluate the isogeny in any point we desire.&lt;/p>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>The relevant part of the script is this one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>
&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>

&lt;span class="mtk1">proof.all(&lt;/span>&lt;span class="mtk6">False&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">A&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">B&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk6">216&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">3&lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk6">137&lt;/span>
&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">A&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">B&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>

&lt;span class="mtk1">F.&lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk5">&amp;gt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> GF(p&lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">modulus&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> EllipticCurve(F, [&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">])&lt;/span>

&lt;span class="mtk3"># Torsion Basis for E[A]&lt;/span>
&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">canonical_torsion_basis&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">A&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>
&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">environ&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">get&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"FLAG"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"ECSC&lt;/span>&lt;span class="mtk6">{fake_flag_for_testing}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1">ker&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">Q&lt;/span>
&lt;span class="mtk1">challenge_isogeny&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">.isogeny(&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">ker&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">algorithm&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk4">"factored"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">model&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk4">"montgomery"&lt;/span>
&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">accept_point&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">loads&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">x0&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"x0"&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">x1&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">"x1"&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk6">16&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">x&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> F([&lt;/span>&lt;span class="mtk1">x0&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">x1&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">except&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Exception&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">e&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">e&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk4">"error"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk4">"Invalid Fp2 value"&lt;/span>&lt;span class="mtk1">}&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">not&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">.is_x_coord(&lt;/span>&lt;span class="mtk1">x&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk4">"error"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk4">"Invalid Point"&lt;/span>&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">E&lt;/span>&lt;span class="mtk1">.lift_x(&lt;/span>&lt;span class="mtk1">x&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">imP&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">challenge_isogeny&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">dumps&lt;/span>&lt;span class="mtk1">({&lt;/span>&lt;span class="mtk4">"x0"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">imP&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">]), &lt;/span>&lt;span class="mtk4">"x1"&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">imP&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])})&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">f&lt;/span>&lt;span class="mtk4">"Welcome to my isogeny factory!"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">f&lt;/span>&lt;span class="mtk4">"My isogeny is so secret, I'll let you evaluate an&lt;/span>&lt;span class="mtk4">y point you like!"&lt;/span>&lt;span class="mtk1">)&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">input&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Send the point you wish to evaluate: "&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">accept_point&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">output&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"__main__"&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Basically, the server uses a given elliptic curve $E$ on $\mathbb{F}_{p^2}$, where $p = 2^{216} \, 3^{137} - 1$.&lt;/p></description></item><item><title>not crypto</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/not-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/not-crypto/</guid><description>&lt;blockquote>
&lt;p>This is the not crypto flag which is totaly not crypto, but crypto! Can we get a clap from the team for excessive crypto usage?&lt;/p>
&lt;/blockquote>
&lt;p>We are given the following Python script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">base64&lt;/span>

&lt;span class="mtk1">input_string&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"REMOVED"&lt;/span>


&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">secret&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">raw_string&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">raw_string&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'a'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'z'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'a'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">chr&lt;/span>&lt;span class="mtk1">(((&lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">13&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">26&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">elif&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'A'&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'Z'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'A'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">chr&lt;/span>&lt;span class="mtk1">(((&lt;/span>&lt;span class="mtk8">ord&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">13&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">26&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">offset&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">char&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">''&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">join&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">result&lt;/span>&lt;span class="mtk1">)&lt;/span>


&lt;span class="mtk1">encoded_bytes&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">base64&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">b64encode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">input_string&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1">encoded&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">encoded_bytes&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">decode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"utf-8"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">lower&lt;/span>&lt;span class="mtk1">()&lt;/span>

&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">secret&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">encoded&lt;/span>&lt;span class="mtk1">))&lt;/span>

&lt;span class="mtk3"># ehagd3gzmjrmajvkamx5mql4zqdmmgewa2z5a2iymqx2zjdm&lt;/span>&lt;span class="mtk3">z2h2lwyuzjmubtzjbqwvbqowbgpkbgxmazv5mgmwagavsd==&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The output of the script is the comment at the bottom.&lt;/p></description></item><item><title>Put a ring on it</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/put-a-ring-on-it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/put-a-ring-on-it/</guid><description>&lt;blockquote>
&lt;p>Ring Signatures are used in some cryptocurrencies to provide anonymity for who has signed a transaction or sent money. Can you break the anonymity of the ring signatures?&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/ed25519_47f2b0b21c6de8177aa298f1b91bf525.py">&lt;code>ed25519.py&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/data_8067cb731187767faec8c856d097645d.json">&lt;code>data.json&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/chal_2793a920b969de9b65bc1bdbb6398c0f.py">&lt;code>chal.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>We are given an implementation of a &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Ring_signature">ring signature&lt;/a> protocol, which is supposed to be an algorithm where a set of parties can validate signed messages but cannot determine who has signed it, providing anonymity to the signatures.&lt;/p></description></item><item><title>RRSSAA</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/rrssaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/rrssaa/</guid><description>&lt;blockquote>
&lt;p>My primes are prefectly random. I wonder if you can find them.&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_db592c010295033ed6308f623264ba63.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/RRSSAA_635b87d91cadb308f7196cd21e3012e3.py">&lt;code>RRSSAA.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>We are given the following Python script that uses RSA to encrypt the flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"flag.txt"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">"rb"&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">strip&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk5">assert&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">128&lt;/span>
&lt;span class="mtk1">N&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">prod&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">get_prime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">)))&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">N&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk8">hex&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">bytes_to_long&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk7 mtki">0x&lt;/span>&lt;span class="mtk6">10001&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">N&lt;/span>&lt;span class="mtk1">)))&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The RSA setup is not the usual one. This time, we have a multi-prime RSA setup, where each prime factor of the modulus $n$ is computed with &lt;code>get_prime&lt;/code>:&lt;/p></description></item><item><title>Tough decisions</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/tough-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/tough-decisions/</guid><description>&lt;blockquote>
&lt;p>Champagne for my real friends, real pain for my sham friends.&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/output_aed711a6531a00aa881de4f42a893c06.txt">&lt;code>output.txt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/tough_decisions_1584d1f0375406a0f4e56aa730ff791c.py">&lt;code>tough_decisions.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>We are fiven a Python script that takes the flag as bits and, for each bit, it prints 6 outputs of either the &lt;code>real&lt;/code> function (bit &lt;code>0&lt;/code>) or the &lt;code>fake&lt;/code> function (bit &lt;code>1&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"__main__"&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">s&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sample_key&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_flag&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">([[&lt;/span>&lt;span class="mtk8">real&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">fake&lt;/span>&lt;span class="mtk1">][&lt;/span>&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1">](&lt;/span>&lt;span class="mtk1">s&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">6&lt;/span>&lt;span class="mtk1">)])&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Therefore, the objective is to find a way to differentiate between &lt;code>real&lt;/code> and &lt;code>fake&lt;/code> outputs in order to learn the bits of the flag.&lt;/p></description></item><item><title>Twist and shout</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/twist-and-shout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/twist-and-shout/</guid><description>&lt;blockquote>
&lt;p>I&amp;rsquo;ll shout about my curve all day, it&amp;rsquo;s totally secure. You&amp;rsquo;ll have to pull the solution from my cold dead hands!&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>Connect at &lt;code>archive.cryptohack.org 11718&lt;/code>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/twist_and_shout_1477ac70b0ba9fc5bf5e5366ee6d3efa.py">&lt;code>twist_and_shout.py&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/Dockerfile_1355e8b381a2401356f8301c3587cb41">&lt;code>Dockerfile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/twist_and_shout_dcc501ec132189fbdfc40fddd844f95e.xinetd">&lt;code>twist_and_shout.xinetd&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>We are given a server that uses an elliptic curve to encrypt the flag.&lt;/p>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>We have the curve parameters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk4">"""&lt;/span>
&lt;span class="mtk4">Define the elliptic curve&lt;/span>

&lt;span class="mtk4">E: y^2 = x^3 + a*x + b&lt;/span>

&lt;span class="mtk4">With order&lt;/span>

&lt;span class="mtk4">n = 340282366920938463465004184633952524077&lt;/span> 
&lt;span class="mtk4"> = 2^128 - 1629577202184312621&lt;/span>
&lt;span class="mtk4">"""&lt;/span>
&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk5">**&lt;/span>&lt;span class="mtk6">128&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">159&lt;/span>
&lt;span class="mtk1">a&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1">b&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1494&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We are allowed to enter an $\mathrm{x}$ coordinate for a point in the elliptic curve. The server will use that $\mathrm{x}$ coordinate to multiply the flag times the point in the curve (that is, it encrypts the flag) and we are given the resulting $\mathrm{x}$ coordinate:&lt;/p></description></item><item><title>WOTS Up</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up/</guid><description>&lt;blockquote>
&lt;p>With the need to find post-quantum schemes, hash-based signatures are cool again.&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/data_fd54ee361e446499d28fb7c04c0669f4.json">&lt;code>data.json&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/chal_dd02099acd9ffe4e8821daf5fc3b583c.py">&lt;code>chal.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>We are given a class called &lt;code>Winternitz&lt;/code> that implements some sort of signing protocol based on SHA256 hashes. Actually, WOTS stands for Winternitz One-Time Signature and it is a post-quantum signature algorithm, which is perfectly explained at &lt;a target="_blank" href="https://www.codingninjas.com/studio/library/winternitz-signature-scheme">www.codingninjas.com&lt;/a>.&lt;/p>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>First of all, the class creates a list of private keys:&lt;/p></description></item><item><title>WOTS Up 2</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up-2/</guid><description>&lt;blockquote>
&lt;p>I fixed the problem with my last scheme, now I can confidently sign my WOTScoin transactions.&lt;/p>
&lt;p>Challenge contributed by &lt;a target="_blank" href="https://cryptohack.org/user/CryptoHack">CryptoHack&lt;/a>&lt;/p>
&lt;p>&lt;strong>Challenge files:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/data_c1cf7f9624cc5c43e06c5c10b551a0e3.json">&lt;code>data.json&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a target="_blank" href="https://cryptohack.org/static/challenges/chal_99f81d23763da3c9f53a73900954639f.py">&lt;code>chal.py&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>This is another challenge that implements WOTS (more information at &lt;a target="_blank" href="https://www.codingninjas.com/studio/library/winternitz-signature-scheme">www.codingninjas.com&lt;/a>).&lt;/p>
&lt;h2 id="source-code-analysis">Source code analysis&lt;/h2>
&lt;p>The &lt;code>Winternitz&lt;/code> class is a bit different from the first part of the challenge, in the keys generation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Winternitz&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">__init__&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">priv_key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">KEY_LEN&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">priv_seed&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">urandom&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">KEY_LEN&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">priv_key&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">priv_seed&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">gen_pubkey&lt;/span>&lt;span class="mtk1">()&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">gen_pubkey&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">pub_key&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">KEY_LEN&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">hash&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">priv_key&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">])&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">BYTE_MAX&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">hash&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">pub_key&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">append&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">pub_item&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">hash&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">sha256&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">digest&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Now, each element of the private keys list is a 32-byte random value. Then, each element of the public key is the $\mathrm{SHA256}^{(256)}$ hash of each element of the private key list. Again, it is not easy to find the private keys from the public keys.&lt;/p></description></item></channel></rss>