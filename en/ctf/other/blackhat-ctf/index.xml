<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BlackHat CTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/</link><description>Recent content in BlackHat CTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/blackhat-ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>fno-stack-protector</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/fno-stack-protector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/fno-stack-protector/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-red">No canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open the binary in Ghidra we see these functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">bad_function&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">execve&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"/bin/sh"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> data[&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, data, &lt;/span>&lt;span class="mtk6">170&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stderr, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">vuln&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>There exists a Buffer Overflow vulnerability. Notice that &lt;code>data&lt;/code> is a character array of 10 bytes, and the program reads up to 170 bytes. Hence, we are able to overwrite values on the stack (for instance, the return address).&lt;/p></description></item><item><title>Hope you know JS</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/hope-you-know-js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/hope-you-know-js/</guid><description>&lt;p>We are given an obfuscated JavaScript file called &lt;code>good-luck.js&lt;/code>. When running it on a simple HTML document it will show a prompt to validate the flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk1">&amp;lt;!&lt;/span>&lt;span class="mtk5">doctype&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">html&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1">&amp;lt;&lt;/span>&lt;span class="mtk5">html&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">lang&lt;/span>&lt;span class="mtk1">=&lt;/span>&lt;span class="mtk4">"en"&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1"> &amp;lt;&lt;/span>&lt;span class="mtk5">head&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1"> &amp;lt;&lt;/span>&lt;span class="mtk5">meta&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">charset&lt;/span>&lt;span class="mtk1">=&lt;/span>&lt;span class="mtk4">"UTF-8"&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1"> &amp;lt;&lt;/span>&lt;span class="mtk5">title&lt;/span>&lt;span class="mtk1">&amp;gt;Hope you know JS&amp;lt;/&lt;/span>&lt;span class="mtk5">title&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1"> &amp;lt;/&lt;/span>&lt;span class="mtk5">head&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1"> &amp;lt;&lt;/span>&lt;span class="mtk5">body&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1"> &amp;lt;&lt;/span>&lt;span class="mtk5">script&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">src&lt;/span>&lt;span class="mtk1">=&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk4 detected-link">good-luck.js&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="mtk5">script&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span> 
&lt;span class="mtk1"> &amp;lt;/&lt;/span>&lt;span class="mtk5">body&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;span class="mtk1">&amp;lt;/&lt;/span>&lt;span class="mtk5">html&lt;/span>&lt;span class="mtk1">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Making use of Visual Studio Code Prettier formatter, I was able to find some patterns that where repeated along the code. For example, I started substituting expressions like &lt;code>+!![]&lt;/code> or &lt;code>![]&lt;/code> by their final value.&lt;/p></description></item><item><title>Robot Factory</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/robot-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/robot-factory/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little
RELRO: &lt;span class="code-dark-yellow">Partial RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">No PIE (0x400000)&lt;/span> 
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We are given a &lt;code>Dockerfile&lt;/code> that starts with &lt;code>FROM ubuntu:18.04&lt;/code>, so we take Glibc from the container and use &lt;a target="_blank" href="https://github.com/io12/pwninit">&lt;code>pwninit&lt;/code>&lt;/a> to patch the binary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">docker&lt;/span> run --rm -v &lt;span class="code-dark-yellow">"&lt;span class="code-dark-magenta">$(&lt;span class="code-dark-green">pwd&lt;/span>)&lt;/span>":/home/rocky&lt;/span> -it ubuntu:18.04 bash
root@c591782492e6:/# ldd /bin/sh
 linux-vdso.so.1 (0x00007ffde1fb3000)
 libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbcde5ef000)
 /lib64/ld-linux-x86-64.so.2 (0x00007fbcdec00000)
root@c591782492e6:/# /lib64/ld-linux-x86-64.so.2 /lib/x86_64-linux-gnu/libc.so.6
GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.6) stable release version 2.27.
Copyright (C) 2018 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 7.5.0.
libc ABIs: UNIQUE IFUNC
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
root@c591782492e6:/# cp /lib64/ld-linux-x86-64.so.2 /lib/x86_64-linux-gnu/libc.so.6 /home/rocky 
root@c591782492e6:/# exit
exit

&lt;span class="code-cyan">$&lt;/span> &lt;span class="code-dark-green">pwninit&lt;/span> --libc &lt;span class="mtku">libc.so.6&lt;/span> --ld &lt;span class="mtku">ld-linux-x86-64.so.2&lt;/span> --bin &lt;span class="mtku">main&lt;/span> --no-template
&lt;span class="code-dark-blue">bin&lt;/span>: &lt;span class="code-blue">main&lt;/span>
&lt;span class="code-dark-yellow">libc&lt;/span>: &lt;span class="code-yellow">libc.so.6&lt;/span>
&lt;span class="code-dark-green">ld&lt;/span>: &lt;span class="code-green">ld-linux-x86-64.so.2&lt;/span>

&lt;span class="code-yellow">unstripping libc&lt;/span>
&lt;span class="code-green">https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1.6_amd64.deb&lt;/span>
&lt;span class="code-dark-green">copying &lt;span class="code-green">main&lt;span class="code-dark-green"> to &lt;span class="code-green">main_patched&lt;/span>&lt;/span>&lt;/span>&lt;/span>
&lt;span class="code-dark-green">running patchelf on &lt;span class="code-green">main_patched&lt;/span>&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open the binary in Ghidra we see these functions with a typical heap exploitation menu:&lt;/p></description></item><item><title>Secret Note</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/secret-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/secret-note/</guid><description>&lt;p>We are given a 64-bit binary called &lt;code>main&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000!important;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">Arch: amd64-64-little 
RELRO: &lt;span class="code-dark-green">Full RELRO&lt;/span>
Stack: &lt;span class="code-dark-green">Canary found&lt;/span>
NX: &lt;span class="code-dark-green">NX enabled&lt;/span>
PIE: &lt;span class="code-dark-green">PIE enabled&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>If we open the binary in Ghidra we see these functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk7 mtki">void&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_name&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> name[&lt;/span>&lt;span class="mtk6">40&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Please fill in your name:"&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">, name, &lt;/span>&lt;span class="mtk6">30&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Thank you "&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">printf&lt;/span>&lt;span class="mtk1">(name);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (canary &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__stack_chk_fail&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk7 mtki">int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> in_FS_OFFSET;&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">char&lt;/span>&lt;span class="mtk1"> secret[&lt;/span>&lt;span class="mtk6">56&lt;/span>&lt;span class="mtk1">];&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> canary;&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> canary &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stderr, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">setvbuf&lt;/span>&lt;span class="mtk1">(stdout, &lt;/span>&lt;span class="mtk6">NULL&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">get_name&lt;/span>&lt;span class="mtk1">();&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"So let&lt;/span>&lt;span class="mtk6">\'&lt;/span>&lt;span class="mtk4">s get into business, give me a secret to exploit m&lt;/span>&lt;span class="mtk4">e :)."&lt;/span>&lt;span class="mtk1">);&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">gets&lt;/span>&lt;span class="mtk1">(secret);&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">puts&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"Bye, good luck next time :D "&lt;/span>&lt;span class="mtk1">);&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> (canary &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7 mtki">long&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">) (in_FS_OFFSET &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">0x&lt;/span>&lt;span class="mtk6">28&lt;/span>&lt;span class="mtk1">)) {&lt;/span>
&lt;span class="mtk3"> /* WARNING: Subroutine does no&lt;/span>&lt;span class="mtk3">t return */&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">__stack_chk_fail&lt;/span>&lt;span class="mtk1">();&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">;&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>There are two vulnerabilities: a Buffer Overflow because of the use of &lt;code>gets&lt;/code>, and a Format String vulnerability because of the use of &lt;code>printf&lt;/code> with a controlled variable as first parameter.&lt;/p></description></item><item><title>Ursa Minor</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/ursa-minor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/ursa-minor/</guid><description>&lt;p>We are given the following source code and an instance to connect to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk3">#!/usr/local/bin/python&lt;/span>
&lt;span class="mtk3">#&lt;/span>
&lt;span class="mtk3"># Polymero&lt;/span>
&lt;span class="mtk3">#&lt;/span>

&lt;span class="mtk3"># Imports&lt;/span>
&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">isPrime&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">getPrime&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8">inverse&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8 mtku">time&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>

&lt;span class="mtk3"># Local import&lt;/span>
&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">os&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">environ&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">get&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'FLAG'&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">()&lt;/span>


&lt;span class="mtk7 mtki">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">URSA&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3"># Upgraded RSA (faster and with cheap key cycling)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">__init__&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">pbit&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">prime_gen&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">pbit&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk7 mtki">0x&lt;/span>&lt;span class="mtk6">10001&lt;/span>&lt;span class="mtk1">}&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> {&lt;/span>&lt;span class="mtk4">'p'&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">'q'&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">'f'&lt;/span>&lt;span class="mtk1">: (&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">), &lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">: &lt;/span>&lt;span class="mtk8">inverse&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">], (&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">)&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">))}&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">prime_gen&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">pbit&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3"># Smooth primes are FAST primes ~ !&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">qlst&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> [&lt;/span>&lt;span class="mtk8">getPrime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">pbit&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">//&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">)]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">qlst&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">set&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">qlst&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">continue&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">ql&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">qlst&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">ql&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">q&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">isPrime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">Q&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">plst&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> [&lt;/span>&lt;span class="mtk8">getPrime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">_&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">pbit&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">//&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">lbit&lt;/span>&lt;span class="mtk1">)]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">plst&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">len&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">set&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">plst&lt;/span>&lt;span class="mtk1">)) &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">continue&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pl&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">plst&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pl&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">isPrime&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">P&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk1">Q&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">update_key&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3"># Prime generation is expensive, so we'll just upd&lt;/span>&lt;span class="mtk3">ate d and e instead ^w^&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">^=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">from_bytes&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">sha512&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk8 mtku">str&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">]) &lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">str&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">time&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">time&lt;/span>&lt;span class="mtk1">())).&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">()).&lt;/span>&lt;span class="mtk8">digest&lt;/span>&lt;span class="mtk1">(), &lt;/span>&lt;span class="mtk4">'big'&lt;/span>&lt;span class="mtk1">)&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">%=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'f'&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">inverse&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'f'&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">m_int&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">c_lst&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">m_int&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">c_lst&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+=&lt;/span>&lt;span class="mtk1"> [&lt;/span>&lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">m_int&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">])]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">m_int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">//=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">c_lst&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">c_int&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">m_lst&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> []&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">c_int&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">m_lst&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+=&lt;/span>&lt;span class="mtk1"> [&lt;/span>&lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">c_int&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">private&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">], &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">])]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">c_int&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">//=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">m_lst&lt;/span>


&lt;span class="mtk3"># Challenge setup&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"""|&lt;/span>
&lt;span class="mtk4">| ~ Welcome to URSA decryption services&lt;/span>
&lt;span class="mtk4">| Press enter to start key generation..."""&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk8">input&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|"&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"""|&lt;/span>
&lt;span class="mtk4">| Please hold on while we generate your primes.&lt;/span>&lt;span class="mtk4">..&lt;/span>
&lt;span class="mtk4">|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">|"""&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">URSA&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">256&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">12&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| ~ You are connected to an URSA-256-12 service,&lt;/span>&lt;span class="mtk4"> public key ::"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| id = &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">sha256&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">str&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">]).&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">()).&lt;/span>&lt;span class="mtk8">hexdigest&lt;/span>&lt;span class="mtk1">()))&lt;/span>
&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| e = &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">]))&lt;/span>

&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Here is a free flag sample, enjoy ::"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">from_bytes&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">FLAG&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk4">'big'&lt;/span>&lt;span class="mtk1">)):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">))&lt;/span>


&lt;span class="mtk1">MENU&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"""|&lt;/span>
&lt;span class="mtk4">| ~ Menu (key updated after &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4"> requests)::&lt;/span>
&lt;span class="mtk4">| [E]ncrypt&lt;/span>
&lt;span class="mtk4">| [D]ecrypt&lt;/span>
&lt;span class="mtk4">| [U]pdate key&lt;/span>
&lt;span class="mtk4">| [Q]uit&lt;/span>
&lt;span class="mtk4">|"""&lt;/span>

&lt;span class="mtk3"># Server loop&lt;/span>
&lt;span class="mtk1">CYCLE&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>
&lt;span class="mtk5">while&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">True&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1">:&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">CYCLE&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">%&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">MENU&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">4&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">CYCLE&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">input&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| &amp;gt; "&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'u'&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">lower&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">msg&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">input&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| &amp;gt; (int) "&lt;/span>&lt;span class="mtk1">))&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Encryption ::"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">msg&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">))&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">elif&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">lower&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'d'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">cip&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8">input&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| &amp;gt; (int) "&lt;/span>&lt;span class="mtk1">))&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Decryption ::"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">cip&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">i&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">elif&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">lower&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'u'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">update_key&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Key updated succesfully ::"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| id = &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">sha256&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">str&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'n'&lt;/span>&lt;span class="mtk1">]).&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">()).&lt;/span>&lt;span class="mtk8">hexdigest&lt;/span>&lt;span class="mtk1">()))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"| e = &lt;/span>&lt;span class="mtk6">{}&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">format&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">oracle&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">public&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'e'&lt;/span>&lt;span class="mtk1">]))&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">CYCLE&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">elif&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">choice&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">lower&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'q'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Closing services...&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">|"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ ERROR - Unknown command"&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">CYCLE&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">+=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">1&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">except&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">KeyboardInterrupt&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Closing services...&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">|"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">break&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">except&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">print&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"|&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">| ~ Please do NOT abuse our services.&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">|"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>The server will generate two &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Smooth_number">smooth&lt;/a> prime numbers $p$ and $q$ (which means that $p - 1$ and $q - 1$ can be factorized easily in small factors). However, we are not provided with $n = p \cdot q$, but with the SHA256 hash of $n$. Moreover, $e = 65537$, as usually. The flag is encrypted with RSA and the generated parameters.&lt;/p></description></item></channel></rss>