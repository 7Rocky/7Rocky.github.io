<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CrewCTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/crewctf/</link><description>Recent content in CrewCTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/crewctf/index.xml" rel="self" type="application/rss+xml"/><item><title>4ES</title><link>https://7rocky.github.io/en/ctf/other/crewctf/4es/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/crewctf/4es/</guid><description>This challenge was made by me for CrewCTF 2024 as a member of thehackerscrew. We are provided with the Python source code to encrypt the flag:
#!/usr/bin/env python3 from hashlib import sha256 from random import choices from Crypto.Cipher import AES from Crypto.Util.Padding import pad with open('flag.txt', 'rb') as f: FLAG = f.read().strip() chars = b'crew_AES*4=$!?' L = 3 w, x, y, z = ( bytes(choices(chars, k=L)), bytes(choices(chars, k=L)), bytes(choices(chars, k=L)), bytes(choices(chars, k=L)), ) k1 = sha256(w).</description></item><item><title>Format muscle</title><link>https://7rocky.github.io/en/ctf/other/crewctf/format-muscle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/crewctf/format-muscle/</guid><description>This challenge was made by me for CrewCTF 2024 as a member of thehackerscrew. We are given a binary called format-muscle:
$ checksec format-muscle [*] './format-muscle' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' Reverse engineering The reverse-engineering step is quite simple. This is the original C code:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main() { char data[256]; setbuf(stdout, NULL); do { fgets(data, sizeof(data), stdin); printf(data); } while (strncmp(data, "</description></item><item><title>Read between the lines</title><link>https://7rocky.github.io/en/ctf/other/crewctf/read-between-the-lines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/crewctf/read-between-the-lines/</guid><description>This challenge was made by me for CrewCTF 2024 as a member of thehackerscrew. We are provided with the Python source code to encrypt the flag:
#!/usr/bin/env python3 from random import shuffle from Crypto.Util.number import getPrime with open('flag.txt', 'rb') as f: FLAG = f.read().strip() assert len(FLAG) &amp;lt; 100 encoded_flag = [] for i, b in enumerate(FLAG): encoded_flag.extend([i + 0x1337] * b) shuffle(encoded_flag) e = 65537 p, q = getPrime(1024), getPrime(1024) n = p * q c = sum(pow(m, e, n) for m in encoded_flag) % n with open('output.</description></item></channel></rss>