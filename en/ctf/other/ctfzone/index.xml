<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTFZone on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/ctfzone/</link><description>Recent content in CTFZone on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/ctfzone/index.xml" rel="self" type="application/rss+xml"/><item><title>Come on feel the nonce</title><link>https://7rocky.github.io/en/ctf/other/ctfzone/come-on-feel-the-nonce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ctfzone/come-on-feel-the-nonce/</guid><description>&lt;p>We are given source code in Go:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">package&lt;/span>&lt;span class="mtk1"> main&lt;/span>

&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> (&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"crypto/elliptic"&lt;/span>
&lt;span class="mtk1"> cryptorand &lt;/span>&lt;span class="mtk4">"crypto/rand"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"crypto/sha256"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"encoding/base64"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"fmt"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"log"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"math"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"math/big"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"math/rand"&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">"os"&lt;/span>
&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">func&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">randInt64&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk7 mtki">int64&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> n, err &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> cryptorand.&lt;/span>&lt;span class="mtk7">Int&lt;/span>&lt;span class="mtk1">(cryptorand.Reader, big.&lt;/span>&lt;span class="mtk7">NewInt&lt;/span>&lt;span class="mtk1">(math.MaxInt64))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> err &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">nil&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">panic&lt;/span>&lt;span class="mtk1">(err)&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> n.&lt;/span>&lt;span class="mtk7">Int64&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk5">func&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">encrypt&lt;/span>&lt;span class="mtk1">(data, priv []&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk7 mtki">string&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> res &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">make&lt;/span>&lt;span class="mtk1">([]&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> st &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> sha256.&lt;/span>&lt;span class="mtk7">Sum256&lt;/span>&lt;span class="mtk1">(priv)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> i, b &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">range&lt;/span>&lt;span class="mtk1"> data {&lt;/span>
&lt;span class="mtk1"> res &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">append&lt;/span>&lt;span class="mtk1">(res, b&lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk1">st[i])&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> base64.StdEncoding.&lt;/span>&lt;span class="mtk7">EncodeToString&lt;/span>&lt;span class="mtk1">(res)&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk5">func&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">decrypt&lt;/span>&lt;span class="mtk1">(enc &lt;/span>&lt;span class="mtk7 mtki">string&lt;/span>&lt;span class="mtk1">, priv []&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk7 mtki">string&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> res &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">make&lt;/span>&lt;span class="mtk1">([]&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> data, _ &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> base64.StdEncoding.&lt;/span>&lt;span class="mtk7">DecodeString&lt;/span>&lt;span class="mtk1">(enc)&lt;/span>
&lt;span class="mtk1"> st &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> sha256.&lt;/span>&lt;span class="mtk7">Sum256&lt;/span>&lt;span class="mtk1">(priv)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> i, b &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">range&lt;/span>&lt;span class="mtk1"> data {&lt;/span>
&lt;span class="mtk1"> res &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">append&lt;/span>&lt;span class="mtk1">(res, b&lt;/span>&lt;span class="mtk5">^&lt;/span>&lt;span class="mtk1">st[i])&lt;/span>
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">string&lt;/span>&lt;span class="mtk1">(res)&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk5">func&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">main&lt;/span>&lt;span class="mtk1">() {&lt;/span>
&lt;span class="mtk1"> flag &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> os.&lt;/span>&lt;span class="mtk7">Getenv&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"FLAG"&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1"> curve &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> elliptic.&lt;/span>&lt;span class="mtk7">P256&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> priv, _, _, err &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> elliptic.&lt;/span>&lt;span class="mtk7">GenerateKey&lt;/span>&lt;span class="mtk1">(curve, cryptorand.Reader)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> err &lt;/span>&lt;span class="mtk5">!=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">nil&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> log.&lt;/span>&lt;span class="mtk7">Fatal&lt;/span>&lt;span class="mtk1">(err)&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> fmt.&lt;/span>&lt;span class="mtk7">Printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"enc_flag = &lt;/span>&lt;span class="mtk6">%q\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, &lt;/span>&lt;span class="mtk7">encrypt&lt;/span>&lt;span class="mtk1">([]&lt;/span>&lt;span class="mtk7">byte&lt;/span>&lt;span class="mtk1">(flag), priv))&lt;/span>

&lt;span class="mtk1"> rand.&lt;/span>&lt;span class="mtk7">Seed&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk7">randInt64&lt;/span>&lt;span class="mtk1">())&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">int64&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">); i &lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">randInt64&lt;/span>&lt;span class="mtk1">(); i&lt;/span>&lt;span class="mtk5">++&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> rand.&lt;/span>&lt;span class="mtk7">Uint64&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> i &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1">; i &lt;/span>&lt;span class="mtk5">&amp;lt;=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">607&lt;/span>&lt;span class="mtk1">; i&lt;/span>&lt;span class="mtk5">++&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> msg &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> fmt.&lt;/span>&lt;span class="mtk7">Sprintf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"msg_&lt;/span>&lt;span class="mtk6">%d&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, i)&lt;/span>
&lt;span class="mtk1"> hash &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> sha256.&lt;/span>&lt;span class="mtk7">Sum256&lt;/span>&lt;span class="mtk1">([]&lt;/span>&lt;span class="mtk7">byte&lt;/span>&lt;span class="mtk1">(msg))&lt;/span>
&lt;span class="mtk1"> h &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">new&lt;/span>&lt;span class="mtk1">(big.Int).&lt;/span>&lt;span class="mtk7">SetBytes&lt;/span>&lt;span class="mtk1">(hash[:])&lt;/span>

&lt;span class="mtk1"> r, s &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">Sign&lt;/span>&lt;span class="mtk1">(curve, rand.&lt;/span>&lt;span class="mtk7">Uint64&lt;/span>&lt;span class="mtk1">(), priv, h)&lt;/span>

&lt;span class="mtk1"> fmt.&lt;/span>&lt;span class="mtk7">Printf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"h[&lt;/span>&lt;span class="mtk6">%[1]d&lt;/span>&lt;span class="mtk4">] = &lt;/span>&lt;span class="mtk6">%[2]s\n&lt;/span>&lt;span class="mtk4">r[&lt;/span>&lt;span class="mtk6">%[1]d&lt;/span>&lt;span class="mtk4">] = &lt;/span>&lt;span class="mtk6">%[3]s\n&lt;/span>&lt;span class="mtk4">s[&lt;/span>&lt;span class="mtk6">%[1]d&lt;/span>&lt;span class="mtk4">] = &lt;/span>&lt;span class="mtk6">%[4]s\n&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk1">, i, h, r, s)&lt;/span> 
&lt;span class="mtk1"> }&lt;/span>
&lt;span class="mtk1">}&lt;/span>

&lt;span class="mtk5">func&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">Sign&lt;/span>&lt;span class="mtk1">(curve elliptic.Curve, nonce &lt;/span>&lt;span class="mtk7 mtki">uint64&lt;/span>&lt;span class="mtk1">, priv []&lt;/span>&lt;span class="mtk7 mtki">byte&lt;/span>&lt;span class="mtk1">, h &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">big.Int) (&lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">big.Int, &lt;/span>&lt;span class="mtk5">*&lt;/span>&lt;span class="mtk1">big.Int) {&lt;/span>
&lt;span class="mtk1"> r &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">new&lt;/span>&lt;span class="mtk1">(big.Int)&lt;/span>
&lt;span class="mtk1"> s &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">new&lt;/span>&lt;span class="mtk1">(big.Int)&lt;/span>
&lt;span class="mtk1"> d &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">new&lt;/span>&lt;span class="mtk1">(big.Int).&lt;/span>&lt;span class="mtk7">SetBytes&lt;/span>&lt;span class="mtk1">(priv)&lt;/span>
&lt;span class="mtk1"> k &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">new&lt;/span>&lt;span class="mtk1">(big.Int).&lt;/span>&lt;span class="mtk7">SetUint64&lt;/span>&lt;span class="mtk1">(nonce)&lt;/span>

&lt;span class="mtk1"> x, _ &lt;/span>&lt;span class="mtk5">:=&lt;/span>&lt;span class="mtk1"> curve.&lt;/span>&lt;span class="mtk7">ScalarBaseMult&lt;/span>&lt;span class="mtk1">(k.&lt;/span>&lt;span class="mtk7">Bytes&lt;/span>&lt;span class="mtk1">())&lt;/span>
&lt;span class="mtk1"> r.&lt;/span>&lt;span class="mtk7">Mod&lt;/span>&lt;span class="mtk1">(x, curve.&lt;/span>&lt;span class="mtk7">Params&lt;/span>&lt;span class="mtk1">().P)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> r.&lt;/span>&lt;span class="mtk7">Sign&lt;/span>&lt;span class="mtk1">() &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">0&lt;/span>&lt;span class="mtk1"> {&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7">panic&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">"bad nonce"&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> }&lt;/span>

&lt;span class="mtk1"> s.&lt;/span>&lt;span class="mtk7">Mul&lt;/span>&lt;span class="mtk1">(r, d)&lt;/span>
&lt;span class="mtk1"> s.&lt;/span>&lt;span class="mtk7">Mod&lt;/span>&lt;span class="mtk1">(s, curve.&lt;/span>&lt;span class="mtk7">Params&lt;/span>&lt;span class="mtk1">().N)&lt;/span>
&lt;span class="mtk1"> s.&lt;/span>&lt;span class="mtk7">Add&lt;/span>&lt;span class="mtk1">(s, h)&lt;/span>
&lt;span class="mtk1"> s.&lt;/span>&lt;span class="mtk7">Mod&lt;/span>&lt;span class="mtk1">(s, curve.&lt;/span>&lt;span class="mtk7">Params&lt;/span>&lt;span class="mtk1">().N)&lt;/span>
&lt;span class="mtk1"> k.&lt;/span>&lt;span class="mtk7">ModInverse&lt;/span>&lt;span class="mtk1">(k, curve.&lt;/span>&lt;span class="mtk7">Params&lt;/span>&lt;span class="mtk1">().N)&lt;/span>
&lt;span class="mtk1"> s.&lt;/span>&lt;span class="mtk7">Mul&lt;/span>&lt;span class="mtk1">(s, k)&lt;/span>
&lt;span class="mtk1"> s.&lt;/span>&lt;span class="mtk7">Mod&lt;/span>&lt;span class="mtk1">(s, curve.&lt;/span>&lt;span class="mtk7">Params&lt;/span>&lt;span class="mtk1">().N)&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> r, s&lt;/span>
&lt;span class="mtk1">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>Moreover, we are given a file called &lt;code>log.txt&lt;/code> with a total of 608 signatures and the encrypted flag:&lt;/p></description></item><item><title>Right Decision</title><link>https://7rocky.github.io/en/ctf/other/ctfzone/right-decision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ctfzone/right-decision/</guid><description>&lt;p>We are given the Python source code of the server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#1d1e19;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="no-highlight">&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">random&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">string&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">Crypto&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">Util&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">number&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">numpy&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">np&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">socketserver&lt;/span>
&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">galois&lt;/span>
&lt;span class="mtk5">from&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">hashlib&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">import&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">md5&lt;/span>

&lt;span class="mtk1">PORT&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">31339&lt;/span>

&lt;span class="mtk5">with&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'params.txt'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">params&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">load&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">params&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'galois_p'&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">params&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'k'&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1">n&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">params&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'RSA_n'&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1">gf&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">galois&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">GF&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">p&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk9 mtki">verify&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">False&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk9 mtki">primitive_element&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">with&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'votes.txt'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">votes&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">load&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">)&lt;/span>

&lt;span class="mtk5">with&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">open&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'flag.txt'&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">as&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">flag&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">f&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">read&lt;/span>&lt;span class="mtk1">()&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">check_secret&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">s&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">#check if secret is real phi for public key n&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk6">2&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk9 mtki">s&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk1">n&lt;/span>&lt;span class="mtk1">)&lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk6">1&lt;/span>

&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">parse_new_vote&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">all_votes&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">votes&lt;/span>&lt;span class="mtk1">.copy()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">all_votes&lt;/span>&lt;span class="mtk1">.append(&lt;/span>&lt;span class="mtk8 mtku">json&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">loads&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">data&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">#check if we have k true votes&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">true_votes&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">sum&lt;/span>&lt;span class="mtk1">([&lt;/span>&lt;span class="mtk1">v&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'vote'&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">v&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">all_votes&lt;/span>&lt;span class="mtk1">])&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">true_votes&lt;/span>&lt;span class="mtk5">&amp;lt;&lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'bad vote!'&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3">#calculate Shamir's shared secret&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">matrix&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> [[ &lt;/span>&lt;span class="mtk1">gf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">vote&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'i'&lt;/span>&lt;span class="mtk1">])&lt;/span>&lt;span class="mtk7">**&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk1">j&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">) &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">j&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">range&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">k&lt;/span>&lt;span class="mtk1">)] &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">vote&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">all_votes&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">values&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> [&lt;/span>&lt;span class="mtk1">vote&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk4">'value'&lt;/span>&lt;span class="mtk1">] &lt;/span>&lt;span class="mtk5">for&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">vote&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">in&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">all_votes&lt;/span>&lt;span class="mtk1">]&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">matrix&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">gf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">matrix&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">values&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">gf&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">values&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">r&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">np&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">linalg&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">solve&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">matrix&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk1">values&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">for_test&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">int&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">r&lt;/span>&lt;span class="mtk1">[&lt;/span>&lt;span class="mtk5">-&lt;/span>&lt;span class="mtk6">1&lt;/span>&lt;span class="mtk1">])&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3"># ok, now check that secret is correct&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">check_secret&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">for_test&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">flag&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'bad vote!'&lt;/span>



&lt;span class="mtk7 mtki">class&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">CheckHandler&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">socketserver&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">BaseRequestHandler&lt;/span>&lt;span class="mtk1">):&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">check_pow&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">prefix&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">''&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">join&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">random&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">choices&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">string&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">ascii_letters&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk9 mtki">k&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk6">10&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">pow_size&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">7&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk3"># 3.5 byte&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">hash_bytes&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">''&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">join&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk8 mtku">random&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">choices&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'abcdef1234567890'&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk9 mtki">k&lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1">pow_size&lt;/span>&lt;span class="mtk1">))&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.sendall((&lt;/span>&lt;span class="mtk4">"Welcome! Please provide proof of work. &lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Prefix: "&lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1">prefix&lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk4">"&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Target hash starts with:"&lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1">hash_bytes&lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">Enter: '&lt;/span>&lt;span class="mtk1">).&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'utf-8'&lt;/span>&lt;span class="mtk1">))&lt;/span> 
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">response&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.recv(&lt;/span>&lt;span class="mtk6">100&lt;/span>&lt;span class="mtk1">).decode(&lt;/span>&lt;span class="mtk4">'utf-8'&lt;/span>&lt;span class="mtk1">).strip()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">md5&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk1">prefix&lt;/span>&lt;span class="mtk5">+&lt;/span>&lt;span class="mtk1">response&lt;/span>&lt;span class="mtk1">).encode(&lt;/span>&lt;span class="mtk4">'utf-8'&lt;/span>&lt;span class="mtk1">)).&lt;/span>&lt;span class="mtk8">hexdigest&lt;/span>&lt;span class="mtk1">().&lt;/span>&lt;span class="mtk8">startswith&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">hash_bytes&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.sendall(&lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">'Proof of work confirmed. Go on!&lt;/span>&lt;span class="mtk6">\n\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">True&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">else&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.sendall(&lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">'Proof of work is bad. Bye!'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk6">False&lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk7 mtki">def&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">handle&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">):&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">not&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">check_pow&lt;/span>&lt;span class="mtk1">():&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">return&lt;/span>&lt;span class="mtk1"> &lt;/span>

&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.sendall(&lt;/span>&lt;span class="mtk7 mtki">b&lt;/span>&lt;span class="mtk4">'Present your vote: &lt;/span>&lt;span class="mtk6">\n&lt;/span>&lt;span class="mtk4">'&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.recv(&lt;/span>&lt;span class="mtk6">10000&lt;/span>&lt;span class="mtk1">).strip()&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">try&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">resp&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8">parse_new_vote&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk1">data&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">except&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">resp&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'bad vote!'&lt;/span>
&lt;span class="mtk1"> &lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk9 mtki">self&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk1">request&lt;/span>&lt;span class="mtk1">.sendall(&lt;/span>&lt;span class="mtk1">resp&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">encode&lt;/span>&lt;span class="mtk1">(&lt;/span>&lt;span class="mtk4">'utf-8'&lt;/span>&lt;span class="mtk1">))&lt;/span>

&lt;span class="mtk5">if&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">__name__&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">==&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk4">'__main__'&lt;/span>&lt;span class="mtk1">:&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">server&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk5">=&lt;/span>&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk8 mtku">socketserver&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8 mtku">TCPServer&lt;/span>&lt;span class="mtk1">((&lt;/span>&lt;span class="mtk4">'0.0.0.0'&lt;/span>&lt;span class="mtk1">,&lt;/span>&lt;span class="mtk1">PORT&lt;/span>&lt;span class="mtk1">),&lt;/span>&lt;span class="mtk8 mtku">CheckHandler&lt;/span>&lt;span class="mtk1">)&lt;/span>
&lt;span class="mtk1"> &lt;/span>&lt;span class="mtk1">server&lt;/span>&lt;span class="mtk1">.&lt;/span>&lt;span class="mtk8">serve_forever&lt;/span>&lt;span class="mtk1">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>

&lt;p>We also have a file called &lt;code>params.txt&lt;/code>:&lt;/p></description></item></channel></rss>