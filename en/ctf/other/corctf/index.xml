<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>corCTF on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/corctf/</link><description>Recent content in corCTF on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://7rocky.github.io/en/ctf/other/corctf/index.xml" rel="self" type="application/rss+xml"/><item><title>eyes</title><link>https://7rocky.github.io/en/ctf/other/corctf/eyes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/eyes/</guid><description>We are given the source code in SageMath that was used to encrypt the flag:
from Crypto.Util.number import bytes_to_long, getPrime # my NEW and IMPROVED secret sharing scheme!! (now with multivariate quadratics) with open('flag.txt', 'rb') as f: flag = f.read() s = bytes_to_long(flag) p = getPrime(len(bin(s))) print(p) F = GF(p) N = 1024 conv = lambda n: matrix(F, N, 1, [int(i) for i in list(bin(n)[2:][::-1].ljust(N, '0'))]) A = random_matrix(F, N, N) for i in range(0, N): for j in range(0, i): A[i, j] = 0 B = random_matrix(F, N, 1) C = matrix(F, [F(s)]) fn = lambda x: (x.</description></item><item><title>fizzbuzz100</title><link>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz100/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz100/</guid><description>We are given the Python source code that is running on a server:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) print(f"{n = }") print(f"{e = }") print(f"{ct = }") while True: ct = int(input("</description></item><item><title>fizzbuzz101</title><link>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz101/</guid><description>We are given the Python source code that is running on a server:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) print(f"{n = }") print(f"{e = }") print(f"{ct = }") while True: ct = int(input("</description></item></channel></rss>