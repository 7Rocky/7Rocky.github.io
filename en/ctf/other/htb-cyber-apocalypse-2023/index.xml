<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTB Cyber Apocalypse 2023 on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/</link><description>Recent content in HTB Cyber Apocalypse 2023 on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/index.xml" rel="self" type="application/rss+xml"/><item><title>Alien Saboteaur</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/alien-saboteaur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/alien-saboteaur/</guid><description>Coming soon</description></item><item><title>Artifacts of Dangerous Sights</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/artifacts-of-dangerous-sights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/artifacts-of-dangerous-sights/</guid><description>Coming soon</description></item><item><title>Bashic Ransomware</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/bashic-ransomware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/bashic-ransomware/</guid><description>Coming soon</description></item><item><title>Biased Heritage</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/biased-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/biased-heritage/</guid><description>Coming soon</description></item><item><title>Calibrator</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/calibrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/calibrator/</guid><description>Coming soon</description></item><item><title>Colliding Heritage</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/colliding-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/colliding-heritage/</guid><description>Coming soon</description></item><item><title>Control Room</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/control-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/control-room/</guid><description>Coming soon</description></item><item><title>Converging Visions</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/converging-visions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/converging-visions/</guid><description>Coming soon</description></item><item><title>Didactic Octo Paddles</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/didactic-octo-paddles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/didactic-octo-paddles/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. After reading some files, one that stands out is middlewares/AdminMiddleware.js:
const jwt = require("jsonwebtoken"); const { tokenKey } = require("../utils/authorization"); const db = require("../utils/database"); const AdminMiddleware = async (req, res, next) =&amp;gt; { try { const sessionCookie = req.cookies.session; if (!sessionCookie) { return res.redirect("/login"); } const decoded = jwt.</description></item><item><title>Elliptic Labyrinth</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/elliptic-labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/elliptic-labyrinth/</guid><description>Coming soon</description></item><item><title>Elliptic Labyrinth Revenge</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/elliptic-labyrinth-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/elliptic-labyrinth-revenge/</guid><description>Coming soon</description></item><item><title>Hijack</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/hijack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/hijack/</guid><description>We are given a remote instance to connect to:
$ nc 167.71.143.44 31614 &amp;lt;------[TCS]------&amp;gt; [1] Create config [2] Load config [3] Exit &amp;gt; Basic recognition We have two options. Using the first one, we can set some configuration and the output is a Base64-encoded string:
$ nc 165.232.100.46 31251 &amp;lt;------[TCS]------&amp;gt; [1] Create config [2] Load config [3] Exit &amp;gt; 1 - Creating new config - Temperature units (F/C/K): C Propulsion Components Target Temperature : 13 Solar Array Target Temperature : 37 Infrared Spectrometers Target Temperature : 0 Auto Calibration (ON/OFF) : ON Serialized config: ISFweXRob24vb2JqZWN0Ol9fbWFpbl9fLkNvbmZpZyB7SVJfc3BlY3Ryb21ldGVyX3RlbXA6ICcwJywgYXV0b19jYWxpYnJhdGlvbjogJ09OJywKICBwcm9wdWxzaW9uX3RlbXA6ICcxMycsIHNvbGFyX2FycmF5X3RlbXA6ICczNycsIHVuaXRzOiBDfQo= Uploading to ship.</description></item><item><title>HM74</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/hm74/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/hm74/</guid><description>Coming soon</description></item><item><title>Inside The Matrix</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/inside-the-matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/inside-the-matrix/</guid><description>We are given the source code of the server in Python:
from sage.all_cmdline import * # from utils import ascii_print import os FLAG = b"HTB{????????????????????}" assert len(FLAG) == 25 class Book: def __init__(self): self.size = 5 self.prime = None def parse(self, pt: bytes): pt = [b for b in pt] return matrix(GF(self.prime), self.size, self.size, pt) def generate(self): key = os.urandom(self.size**2) return self.parse(key) def rotate(self): self.prime = random_prime(2**6, False, 2**4) def encrypt(self, message: bytes): self.</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/interstellar-c2/</guid><description>Coming soon</description></item><item><title>Janken</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/janken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/janken/</guid><description>We are given a binary file called janken and a remote instance to connect to:
$ file janken janken: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter ./.glibc/ld-linux-x86-64.so.2, BuildID[sha1]=56b54cdae265aa352fe2ebb016f86af831fd58d3, for GNU/Linux 3.2.0, not stripped If is a Rock-Paper-Scissors game:
$ nc 167.99.86.8 31902 ▛▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▜ ▌ じ ゃ ん 拳 ▐ ▙▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▟ 1. ℙ ∟ ₳ Ұ 2. ℜ ℧ ∟ Ӗ ⅀ &amp;gt;&amp;gt; 2 ▛▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▜ ▚ [*] Rock is called "</description></item><item><title>Labyrinth</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/labyrinth/</guid><description>Coming soon</description></item><item><title>Math Door</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/math-door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/math-door/</guid><description>Coming soon</description></item><item><title>Multipage Recyclings</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/multipage-recyclings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/multipage-recyclings/</guid><description>Coming soon</description></item><item><title>nehebkaus trap</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/nehebkaus-trap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/nehebkaus-trap/</guid><description>We are given a remote instance to connect to:
$ nc 167.71.143.44 32139 __ {00} \__/ /^/ ( ( \_\_____ (_______) (_________()Ooo. [ Nehebkau's Trap ] You are trapped! Can you escape? &amp;gt; Basic recognition We are allowed to enter some information, but it shows an error:
&amp;gt; asdf [*] Input accepted! Error: name 'asdf' is not defined The error message looks familiar to a Python REPL:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; asdf Traceback (most recent call last): File "</description></item><item><title>Orbital</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/orbital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/orbital/</guid><description>We are given a website like this:
We also have the source code in Python.
Source code analysis The web application is built with Flask. A clear SQL injection (SQLi) vulnerability can be found at database.py:
from colorama import Cursor from application.util import createJWT, passwordVerify from flask_mysqldb import MySQL mysql = MySQL() def query(query, args=(), one=False): cursor = mysql.connection.cursor() cursor.execute(query, args) rv = [dict((cursor.description[idx][0], value) for idx, value in enumerate(row)) for row in cursor.</description></item><item><title>Pandora's Bane</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/pandoras-bane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/pandoras-bane/</guid><description>Coming soon</description></item><item><title>Pandora's Box</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/pandoras-box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/pandoras-box/</guid><description>Coming soon</description></item><item><title>Passman</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/passman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/passman/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. A relevant file is routes/index.js:
const express = require('express'); const router = express.Router(); const { graphqlHTTP } = require('express-graphql'); const AuthMiddleware = require('../middleware/AuthMiddleware'); const GraphqlSchema = require('../helpers/GraphqlHelper'); router.get('/', (req, res) =&amp;gt; { return res.render('login.html'); }); router.get('/register', (req, res) =&amp;gt; { return res.render('register.html'); }); router.use('/graphql', AuthMiddleware, graphqlHTTP({ schema: GraphqlSchema, graphiql: false })); router.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/relic-maps/</guid><description>We have this description for the challenge:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows?Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Restricted</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/restricted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/restricted/</guid><description>We are given a remote instance to connect to:
$ nc 64.227.41.83 30543 SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 Invalid SSH identification string. Ncat: Broken pipe. It looks like we must access via SSH.
SSH Connection We are also given some files:
$ tree . ├── Dockerfile ├── build_docker.sh └── src ├── bash_profile ├── flag.txt └── sshd_config 2 directories, 5 files Loooking at the Dockerfile, we see that the user is named restricted and we will be using rbash (restricted Bash):</description></item><item><title>Roten</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/roten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/roten/</guid><description>Coming soon</description></item><item><title>Small StEps</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/small-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/small-steps/</guid><description>We are given a remote instance to connect to:
$ nc 188.166.152.84 32213 This is the second level of training. [E]ncrypt the flag. [A]bort training. &amp;gt; We are also provided with the server&amp;rsquo;s Python source code:
from Crypto.Util.number import getPrime, bytes_to_long FLAG = b"HTB{???????????????}" assert len(FLAG) == 20 class RSA: def __init__(self): self.q = getPrime(256) self.p = getPrime(256) self.n = self.q * self.p self.e = 3 def encrypt(self, plaintext): plaintext = bytes_to_long(plaintext) return pow(plaintext, self.</description></item><item><title>SpyBug</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/spybug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/spybug/</guid><description>We are given a website like this:
We also have the source code of the web application in Node.js and the source code of an agent in Go.
Source code analysis The web application is built with Express JS. In index.js we can see a Content Security Policy (CSP) header and a function visitPanel that runs every minute:
application.use((req, res, next) =&amp;gt; { res.setHeader("Content-Security-Policy", "script-src 'self'; frame-ancestors 'none'; object-src 'none'; base-uri 'none';"</description></item><item><title>TrapTrack</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/traptrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/traptrack/</guid><description>We are given a website like this:
We are also given the source code of the project.
Website functionality The web application allows us to enter URLs that will be stored in a SQLite database. Just reading the code from challenge/application/config.py, we have valid credentials (admin:admin):
from application.util import generate import os class Config(object): SECRET_KEY = generate(50) ADMIN_USERNAME = 'admin' ADMIN_PASSWORD = 'admin' SESSION_PERMANENT = False SESSION_TYPE = 'filesystem' SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/database.</description></item><item><title>Void</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/void/</guid><description>We are given a binary called void:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we use Ghidra, we will find this decmpiled C code:
void vuln() { char data[64]; read(0, data, 200); } int main() { vuln(); return 0; } The code is very short and there is only a single point to enter data.
Buffer Overflow vulnerability There&amp;rsquo;s a clear Buffer Overflow vulnerability since data is a char array of 64 bytes, and read is reading up to 200 bytes and storing the information at data.</description></item></channel></rss>