<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7Rocky</title><link>https://7rocky.github.io/en/</link><description>Recent content on 7Rocky</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sat, 05 Feb 2022 00:00:00 +0100</lastBuildDate><atom:link href="https://7rocky.github.io/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Horizontall</title><link>https://7rocky.github.io/en/htb/horizontall/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/horizontall/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that hides a valid subdomain that contains a Strapi webapp vulnerable to RCE. There is also an internal Laravel webapp vulnerable to RCE. Some knowledge about JavaScript, PHP and Python, as well as port forwarding techniques, are needed to compromise this machine. This write-up uses a custom script that chains two exploits for Strapi needed to obtain RCE</description></item><item><title>Forge</title><link>https://7rocky.github.io/en/htb/forge/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/forge/</guid><description>Hack The Box. Linux. Medium machine. This machine has a Server-Side Request Forgery (SSRF) vulnerability from a subdomain to an FTP server. After that, there are sudo permissions to run a Python script with a debugger. Basic web pentesting bypassing techniques are needed to compromise this machine. This write-up uses a custom Python script to exploit the SSRF</description></item><item><title>NodeBlog</title><link>https://7rocky.github.io/en/htb/nodeblog/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/nodeblog/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a blog that is vulnerable to NoSQL injection, then to XML External Entity (XXE) injection and finally to insecure deserialization to get Remote Code Execution. Advanced web pentesting techniques and scripting skills are needed in order to compromise this machine. This write-up uses custom scripts in Bash, Python and Node.js to exploit all vulnerabilities</description></item><item><title>Previse</title><link>https://7rocky.github.io/en/htb/previse/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/previse/</guid><description>Hack The Box. Linux. Easy machine. This machine has a webpage vulnerable to command injection after bypassing redirects and managing to register a new account. After that, a hash must be cracked to login as a low privileged user and perform a PATH hijacking using sudo. Common web pentesting and Burp Suite skills, as well as common privilege escalation techniques are needed to compromise the machine. This write-up uses a custom Go program to automate the foothold process</description></item><item><title>Static</title><link>https://7rocky.github.io/en/htb/static/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/static/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that exposes a corrupted Gzip file that must be patched to get a TOTP key and download a VPN file. Then there are some PHP vulnerable services that can be compromised and get to an internal server that contains a binary executable file having a Format String vulnerability. Deep knowledge about pivoting and port forwarding techniques, network enumeration and PHP exploitation, as well as Format String exploitation are needed to compromise this machine. This write-up uses a custom Ruby script to automate the process of downloading the VPN file, a Python script gain RCE over a PHP web server and another Python script to exploit a binary using Format String</description></item><item><title>Writer</title><link>https://7rocky.github.io/en/htb/writer/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/writer/</guid><description>Hack The Box. Linux. Medium machine. This machine contains a website that is vulnerable to SQL injection. This allows to read the source code of the server and find a vulnerability. Then some command injection techniques to escalate privileges. Some scripting for automating a SQLi exploit, SMB, SMTP and Cron tasks are needed to compromise the machine. This write-up uses custom Python scripts for SQLi and for the foothold</description></item><item><title>Pikaboo</title><link>https://7rocky.github.io/en/htb/pikaboo/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/pikaboo/</guid><description>Hack The Box. Linux. Hard machine. This machine uses nginx and Apache web servers with a misconfiguration that derives in directory path traversal and afterwards in local file inclusion. There are credentials for FTP in LDAP and a Cron job that is vulnerable to command injection. Web enumeration, knowledge about nginx and LDAP, file inclusion techniques and command injection tricks are needed to compromise this machine. This write-up uses a custom Python script to compromise the entire machine from scratch</description></item><item><title>LogForge</title><link>https://7rocky.github.io/en/htb/logforge/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/logforge/</guid><description>Hack The Box. Linux. Medium machine. This machine uses Log4j in a Tomcat server that is vulnerable to JNDI lookup. Then there is an FTP server made in Java that also uses Log4j, but this time it is only vulnerable to information disclosure. Knowlegde about Log4j exploitation, Tomcat, FTP and Wireshark are needed in order to compromise this machine</description></item><item><title>Intelligence</title><link>https://7rocky.github.io/en/htb/intelligence/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/intelligence/</guid><description>Hack The Box. Windows. Medium machine. This machine presents an Active Directory (AD) environment to perform user enumeration, network poisoning and a Silver Ticket attack. Some scripting, DNS operations, AD attacks and BloodHound basics are needed to compromise this machine. This write-up uses a custom Go script to fuzz for files in a web server</description></item><item><title>Union</title><link>https://7rocky.github.io/en/htb/union/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/union/</guid><description>Hack The Box. Linux. Medium machine. This machine contains Union-based SQL injection (SQLi) and command injection vulnerabilities. Some SQLi bypassing techniques and source code analysis skills are needed to compromise this machine. This write-up uses a custom Java program to automate a SQLi attack</description></item><item><title>BountyHunter</title><link>https://7rocky.github.io/en/htb/bountyhunter/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/bountyhunter/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that is vulnerable to XML External Entity (XXE) injection and that has sudo permissions configured. Some knowledge about XXE, PHP and Python is needed to compromise this machine. This write-up uses a custom Bash script to read files from the server exploiting XXE</description></item><item><title>Seal</title><link>https://7rocky.github.io/en/htb/seal/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/seal/</guid><description>Hack The Box. Linux. Medium machine. This machine contains a Tomcat website on top of nginx, which has a configuration vulnerability that leads to Remote Code Execution (RCE), then it has some misconfigurations related to file permissions and sudo commands. Knowledge about Tomcat exploitation and Linux file system is needed to compromise this machine</description></item><item><title>Nunchucks</title><link>https://7rocky.github.io/en/htb/nunchucks/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/nunchucks/</guid><description>Hack The Box. Linux. Easy machine. This machine has a webpage vulnerable to Server-Side Template Injection (SSTI) and system capabilities set, but with some protections. Knowledge about Node.js templates and Perl are needed to compromise this machine</description></item><item><title>Explore</title><link>https://7rocky.github.io/en/htb/explore/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/explore/</guid><description>Hack The Box. Android. Easy machine. This is a mobile device that uses a vulnerable application that exposes files that provide access via SSH. Some port scanning, port forwarding and Android skills are needed to compromise this device</description></item><item><title>Spider</title><link>https://7rocky.github.io/en/htb/spider/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/spider/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Server-Side Template Injection (SSTI) in two fields and SQL injection (SQLi), and an internal website that is vulnerable to XML External Entity (XXE) injection. Advanced knowledge on SSTI and bypassing techniques, SQLi, XXE and port forwarding skills are needed to compromise the machine. This write-up uses a Python script to exploit SSTI and a Bash script to read file using XXE</description></item><item><title>dynstr</title><link>https://7rocky.github.io/en/htb/dynstr/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/dynstr/</guid><description>Hack The Box. Linux. Medium machine. This machine uses a dynamic DNS service vulnerable to command injection and then the machine has sudo permissions for a command that uses a wildard. DNS knowledge, command injection techniques and wildcard abusing skills are needed to compromise this machine</description></item><item><title>Monitors</title><link>https://7rocky.github.io/en/htb/monitors/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/monitors/</guid><description>Hack The Box. Linux. Hard machine. This machine has a Wordpress web site with a plugin vulnerable to Directory Path Traversal, another website vulnerable to SQL injection, and yet another webpage vulnerable to Insecure Deserialization running inside a Docker container with system capabilities enabled. Deep knowledge about web enumeration, vulnerabilities and exploitation techniques, as well as port forwarding and Docker escaping methods are needed to compromise this machine. This write-up uses a custom Bash script to exploit Insecure Deserialization</description></item><item><title>Cap</title><link>https://7rocky.github.io/en/htb/cap/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/cap/</guid><description>Hack The Box. Linux. Easy machine. This machine contains Insecure Direct Object Reference (IDOR) and system capabilities. Reading capture files in Wireshark and capabilities enumeration skills are needed to compromise this machine</description></item><item><title>Antique</title><link>https://7rocky.github.io/en/htb/antique/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/antique/</guid><description>Hack The Box. Linux. Easy machine. This machine is a HP JetDirect printer that exposes its password through SNMP and has an arbritrary file read vulnerability. SNMP enumeration and port forwarding techniques are needed to compromise this machine. This write-up uses a custom Python script to obtain a clear-text password</description></item><item><title>Knife</title><link>https://7rocky.github.io/en/htb/knife/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/knife/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a webpage built on PHP with a version that has a backdoor and sudo permissions configured. Knowledge of the PHP version and basic privilege escalation skills are needed to compromise this machine</description></item><item><title>Forest</title><link>https://7rocky.github.io/en/htb/forest/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/forest/</guid><description>Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment to perform MS RPC enumeration, AS-REProasting, password decrypting, DCSync and Pass the Hash. Basic AD enumeration and exploitation skills, as well as BloodHound knowledge, are needed to compromise this machine</description></item><item><title>Active</title><link>https://7rocky.github.io/en/htb/active/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/active/</guid><description>Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment to perform SMB enumeration, password decrypting and Kerberoasting. Basic AD enumeration and exploitation skills are needed to compromise this machine</description></item><item><title>A little something to get you started</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</guid><description>We have a simple website like this one:
We can read the HTML source code of the website, which is:
There is an image called background.png, but we did not observe any image on the website. We can try to access it using curl:
$ curl http://35.190.155.168/9a968e7787/background.png ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ And we have the flag.</description></item><item><title>Baby RE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</guid><description>We have a binary called baby:
$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped If we run it, it asks for a key:
$ ./baby Insert key: We can introduce something and see that it is not correct:
$ ./baby Insert key: 1234 Try again later. We can make use of ltrace to see every call to external functions (functions that belong to a library as Glibc):</description></item><item><title>Base 2 2 the 6</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/base-2-2-the-6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/base-2-2-the-6/</guid><description>We are given this string:
Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K
Since it has numbers, lowercase letters and uppercase letters, it seems to be encoded in Base64.
Actually, the name of the challenge is &amp;ldquo;2 2 the 6&amp;rdquo; (&amp;ldquo;2 to the 6&amp;rdquo;), so $2^6 = 64$.
We can decode it using a shell:
$ echo Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K | base64 -d CTFlearn{FlaggyWaggyRaggy}</description></item><item><title>Bizz Fuzz</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/</guid><description>We are given a 32-bit binary called vuln:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) We do not have the source code of the binary, and it is stripped:
$ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=836e2f666bd53c2307bff4801d330e444556a006, stripped Reversing the binary will be more challenging because we do not have the names of the functions.</description></item><item><title>Blackbox</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/</guid><description>We are given a server to connect using SSH. There is a binary called blackbox that is SGID:
blackbox@ubuntu-512mb-nyc3-01:~$ ls -l total 16 ---x--s--x 1 root blackbox_pwn 8936 Jan 31 2019 blackbox -r--r----- 1 root blackbox_pwn 33 Oct 9 2017 flag.txt blackbox@ubuntu-512mb-nyc3-01:~$ file blackbox blackbox: setgid executable, regular file, no read permission As it can be seen, we have no read permission, so we cannot transfer the file to our machine, or decompile it, or debug it.</description></item><item><title>BruXOR</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/bruxor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/bruxor/</guid><description>We are given this sequence of characters:
TCQ{rveyln&amp;#39;bH_varHuebcrqxetrHOXEj We are told that the encryption type is XOR, but we need to guess the key. For that purpose, we can perform a brute force attack using &amp;ldquo;XOR Brute Force&amp;rdquo; module from CyberChef. If we filter by CTFlearn, we get the key and the flag:
Flag: CTFlearn{y0u_Have_bruteforce_XOR}</description></item><item><title>Character Encoding</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/character-encoding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/character-encoding/</guid><description>We are given these characters:
43 54 46 6C 65 61 72 6E 7B 34 35 43 31 31 5F 31 35 5F 55 35 33 46 55 4C 7D Since they are numbers and letters between A and F, they seem to be ASCII characters in hexadecimal representation.
For instance, 0x43 is the code for C, 0x54 for T and 0x46 for F.
To decode all the characters, we can use the following &amp;ldquo;one-liner&amp;rdquo;:</description></item><item><title>clutter-overflow</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) We also have the C source code. Basically, what the program does is call function gets and after that compare a local variable (code) with the value of a global variable (GOAL):
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define SIZE 0x100 #define GOAL 0xdeadbeef const char* HEADER = &amp;#34;.</description></item><item><title>Favorite Color</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/</guid><description>We are given a server to connect using SSH. There is a 32-bit binary called color that is SGID:
color@ubuntu-512mb-nyc3-01:~$ ls -l total 20 -r--r--r-- 1 root root 714 Sep 12 2017 Makefile -r-xr-sr-x 1 root color_pwn 7672 Sep 12 2017 color -r--r--r-- 1 root root 722 Sep 12 2017 color.c -r--r----- 1 root color_pwn 24 Sep 12 2017 flag.txt color@ubuntu-512mb-nyc3-01:~$ file color color: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.</description></item><item><title>fermat-strings</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) We also have the C source code. Basically, what the program does is request two numbers and try to find one that breaks Fermat&amp;rsquo;s Last Theorem.
As a reminder, Fermat&amp;rsquo;s Last Theorem claims that there are no positive integers $a$, $b$, $c$, that satisfy the equation:</description></item><item><title>filtered-shellcode</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/</guid><description>We are given a 32-bit binary called fun:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments We do not have the C source code. This time, instead of reversing the binary using tools like Ghidra, we will analyze it with GDB.
First let&amp;rsquo;s execute the program:
$ ./fun Give me code to run: asdf zsh: segmentation fault (core dumped) .</description></item><item><title>Glory of the Garden</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/</guid><description>We are given a ciphertext:
cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX} We see that the message has more or less the format of a picoCTF flag (picoCTF{...}), due to the fact that there are 4 lowercase and 3 uppercase letters before {, and ends with }. Moreover, there are several _.
It seems clear that the encryption is based on a substitution algorithm (Caesar cipher). The most common algorithm is ROT13. Using CyberChef, we can decrypt the message using ROT13 and read the flag:</description></item><item><title>Glory of the Garden</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/</guid><description>We are given a JPEG image called garden.jpg:
The file is recognized as a proper JPEG image:
$ file garden.jpg garden.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 2999x2249, components 3 However, if we show printable strings inside the file contents, we capture the flag (we can specify the length of the string to output):
$ strings -50 garden.jpg Here is a flag "</description></item><item><title>Guessing Game 1</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/</guid><description>We are given a 64-bit static binary called vuln:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt; #define BUFSIZE 100 long increment(long in) { return in + 1; } long get_random() { return rand() % BUFSIZE; } int do_stuff() { long ans = get_random(); ans = increment(ans); int res = 0; printf(&amp;#34;What number would you like to guess?</description></item><item><title>Guessing Game 2</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/</guid><description>We are given a 32-bit binary called vuln:
Arch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt; #define BUFSIZE 512 long get_random() { return rand; } int get_version() { return 2; } int do_stuff() { long ans = (get_random() % 4096) + 1; int res = 0; printf(&amp;#34;What number would you like to guess?</description></item><item><title>H1 Thermostat</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</guid><description>We have an Android APK file called thermostat.apk:
$ file thermostat.apk thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate As it is shown an APK file is just a ZIP archive. Therefore, we can extract its contents:
$ 7z x thermostat.apk Scanning the drive for archives: 1 file, 2595443 bytes (2535 KiB) Extracting archive: thermostat.apk -- Path = thermostat.apk Type = zip Physical Size = 2595443 Everything is Ok Files: 569 Size: 4968479 Compressed: 2595443 $ ls AndroidManifest.</description></item><item><title>Hello World!</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</guid><description>We are given a 64-bit binary called vulnerable:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments If we execute the binary, it seems that it does nothing:
$ ./vulnerable asdf fdsa 1 2 If we insert data from standard input (stdin), we make the program work:
$ echo asdf | ./vulnerable Hello asdf ! Let&amp;rsquo;s send 100 characters using Python and check if it crashes:</description></item><item><title>IMC 1999, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-1999/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-1999/</guid><description> getProblemPdf('en', '1999', '1')</description></item><item><title>IMC 1999, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-1999/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-1999/</guid><description> getProblemPdf('en', '1999', '7')</description></item><item><title>IMC 2000, Problem 3</title><link>https://7rocky.github.io/en/imc/problem-3-2000/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-3-2000/</guid><description> getProblemPdf('en', '2000', '3')</description></item><item><title>IMC 2004, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-2004/</guid><description> getProblemPdf('en', '2004', '7')</description></item><item><title>IMC 2004, Problem 8</title><link>https://7rocky.github.io/en/imc/problem-8-2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-8-2004/</guid><description> getProblemPdf('en', '2004', '8')</description></item><item><title>IMC 2005, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2005/</guid><description> getProblemPdf('en', '2005', '1')</description></item><item><title>IMC 2005, Problem 8</title><link>https://7rocky.github.io/en/imc/problem-8-2005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-8-2005/</guid><description> getProblemPdf('en', '2005', '8')</description></item><item><title>IMC 2006, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2006/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2006/</guid><description> getProblemPdf('en', '2006', '1')</description></item><item><title>IMC 2007, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-2007/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-2007/</guid><description> getProblemPdf('en', '2007', '7')</description></item><item><title>IMC 2010, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2010/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2010/</guid><description> getProblemPdf('en', '2010', '1')</description></item><item><title>IMC 2012, Problem 2</title><link>https://7rocky.github.io/en/imc/problem-2-2012/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-2-2012/</guid><description> getProblemPdf('en', '2012', '2')</description></item><item><title>IMC 2013, Problem 6</title><link>https://7rocky.github.io/en/imc/problem-6-2013/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-6-2013/</guid><description> getProblemPdf('en', '2013', '6')</description></item><item><title>IMC 2017, Problem 6</title><link>https://7rocky.github.io/en/imc/problem-6-2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-6-2017/</guid><description> getProblemPdf('en', '2017', '6')</description></item><item><title>IMC 2018, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2018/</guid><description> getProblemPdf('en', '2018', '1')</description></item><item><title>IMC 2019, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2019/</guid><description> getProblemPdf('en', '2019', '1')</description></item><item><title>IMC 2019, Problem 5</title><link>https://7rocky.github.io/en/imc/problem-5-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-5-2019/</guid><description> getProblemPdf('en', '2019', '5')</description></item><item><title>IMC 2020, Problem 2</title><link>https://7rocky.github.io/en/imc/problem-2-2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-2-2020/</guid><description> getProblemPdf('en', '2020', '2')</description></item><item><title>IMC 2021, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2021/</guid><description> getProblemPdf('en', '2021', '1')</description></item><item><title>Lazy Game Challenge</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/</guid><description>We are given a service that consists of a betting system. We bet a certain amount of money and we need to guess a number between 1 and 10 in less than 10 attempts. For example:
$ nc thekidofarcrania.com 10001 Welcome to the Game of Luck !. Rules of the Game : (1) You will be Given 500$ (2) Place a Bet (3) Guess the number what computer thinks of !</description></item><item><title>Maze</title><link>https://7rocky.github.io/en/ctf/overthewire/maze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/overthewire/maze/</guid><description>This is a lab to practice some exploitation techniques, programming and reverse engineering. The lab consists of 9 levels, using a Linux/x86 architecture (all protections are disabled: NX, PIE, canaries, and even ASLR).
To connect to the first level, we are provided with the SSH credentials for maze0.
The initial recognisement of the machine tells us that we have some SUID binaries that will be exploited to pass to the next level.</description></item><item><title>Micro-CMS v1</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</guid><description>We have a simple website that allows us to edit and create posts using Markdown:
Let&amp;rsquo;s click on &amp;ldquo;Testing&amp;rdquo;:
Now, we can try to edit the current post. A text area is shown in order to write Markdown code:
Markdown is a markup language similar to HTML but simpler and easier. Furthermore, Markdown supports the use of HTML tags as well. Hence, let&amp;rsquo;s try a Cross-Site Scripting (XSS) payload like:</description></item><item><title>Model E1337 - Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-rolling-code-lock/</guid><description>We have a simple website that requests a code to unlock:
We can put any number we want, and after a few seconds, we see it is incorrect:
There is nothing in the source code of the website. At this point, we can apply fuzzing to enumerate more routes if they exist:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ admin [Status: 200, Size: 287, Words: 25, Lines: 11] unlock [Status: 405, Size: 178, Words: 20, Lines: 5] [Status: 200, Size: 302, Words: 16, Lines: 13] There is an /admin route:</description></item><item><title>Model E1337 v2 - Hardened Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2-hardened-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2-hardened-rolling-code-lock/</guid><description>This challenge is extremely related to Model E1337 - Rolling Code Lock, specially for the cryptanalysis part. Go and check it if you have not done yet.
As in the previous challenge, we have a simple website that requests a code to unlock:
We can put any number we want and we see it is incorrect:
The difference with the first challenge is the length of the number, this time it is 64-bit long.</description></item><item><title>Morse Code</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/morse-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/morse-code/</guid><description>We are given this sequence of . and -:
-.-. - ..-. .-.. . .- .-. -. ... .- -- ..- . .-.. -- --- .-. ... . .. ... -.-. --- --- .-.. -... -.-- - .... . .-- .- -.-- .. .-.. .. -.- . -.-. .... . . ... As the title of the challenge suggests, it is Morse code. Hence, we must decode the sequence.
We can do it manually: -.</description></item><item><title>Nice netcat...</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/nice-netcat.../</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/nice-netcat.../</guid><description>We are given host and a port for a remote instance. If we stablish a connection using nc we get a bunch of numbers:
$ nc mercury.picoctf.net 22902 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 100 51 100 102 100 54 100 102 125 10 ^C These numbers seem to be the ASCII decimal representation of some characters.</description></item><item><title>Obedient Cat</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/obedient-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/obedient-cat/</guid><description>We are given a file. The flag is contained inside the file:
$ cat flag picoCTF{s4n1ty_v3r1f13d_28e8376d}</description></item><item><title>Poor Login</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/</guid><description>We are given a 64-bit binary called login:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled We also have the C source code:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int menu() { printf("*** WINBLOWS LOGIN *********\n" "1. Login into user.\n" "2. Sign out.\n" "3. Print flag.\n" "4. Lock user.\n" "5. Restore user.\n" "&amp;gt; "); int resp = 0; scanf("%d", &amp;amp;resp); while (getchar() != '\n'); return resp; } struct creds { void *padding; char name[32]; int admin; }; struct creds *curr; struct creds *save; char *fake_flag; int main() { char buff[64]; setbuf(stdout, NULL); setbuf(stdin, NULL); while (1) { switch (menu()) { case 1: // Login curr = malloc(sizeof(*curr)); printf("</description></item><item><title>Practice Flag</title><link>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/practice-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/practice-flag/</guid><description>This challenge is only an introduction. It shows the flag directly: CTFlearn{4m_1_4_r3al_h4ck3r_y3t}.</description></item><item><title>RIP my bof</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/</guid><description>We are given a 32-bit binary called server:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) We also have the C source code. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void win() { system("</description></item><item><title>seed-sPRiNG</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/</guid><description>We are given a 32-bit binary called seed_spring:
Arch: i386-32-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled This time we do not have the source code. However, we can use a reversing tool like Ghidra to decompile the binary into somewhat readable C source code. Here we have the main function:
void main(void) { uint local_20; uint local_1c; uint local_18; int local_14; undefined *local_10; local_10 = &amp;amp;stack0x00000004; puts(&amp;#34;&amp;#34;); puts(&amp;#34;.</description></item><item><title>Shell time!</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/</guid><description>This challenge is the continuation of RIP my bof. Check it our first if you have not done it yet.
Now, the flag is stored at /flag2.txt, so we must do something more than redirect the program execution to system(&amp;quot;cat /flag.txt&amp;quot;), as in RIP my bof.
The first thing I came up with was Ret2Libc. The idea is to obtain a shell by calling system inside Glibc with &amp;quot;/bin/sh&amp;quot; as argument.</description></item><item><title>Simple bof</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/</guid><description>We have the C source code of a binary and a remote instance to connect to. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow, and then compare a local variable with a certain value:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void safeguard(); void print_flag(); void vuln() { char padding[16]; char buff[32]; int notsecret = 0xffffff00; int secret = 0xdeadbeef; memset(buff, 0, sizeof(buff)); // Zero-out the buffer.</description></item><item><title>Slippy</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</guid><description>We have a simple web back-end that allows us to upload a .tar.gz file. As we have a Dockerfile, let&amp;rsquo;s use a Docker container locally:
On the source code we have a simple Python Flask application:
@api.route(&amp;#39;/unslippy&amp;#39;, methods=[&amp;#39;POST&amp;#39;]) def cache(): if &amp;#39;file&amp;#39; not in request.files: return abort(400) extraction = extract_from_archive(request.files[&amp;#39;file&amp;#39;]) if extraction: return {&amp;#34;list&amp;#34;: extraction}, 200 return &amp;#39;&amp;#39;, 204 The file is being extracted and written to /tmp:
import functools, tarfile, tempfile, os from application import main generate = lambda x: os.</description></item><item><title>Stonks</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/</guid><description>We are given the C source code of a binary. The source code is relatively large, so the most interesting function is this one:
#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;time.h&amp;gt; #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int buy_stonks(Portfolio *p) { if (!p) { return 1; } char api_buf[FLAG_BUFFER]; FILE *f = fopen(&amp;#34;api&amp;#34;, &amp;#34;r&amp;#34;); if (!</description></item><item><title>Taking LS</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/taking-ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/taking-ls/</guid><description>We are given a ZIP file that contains these files and directories:
$ unzip -l The\ Flag.zip Archive: The Flag.zip Length Date Time Name --------- ---------- ----- ---- 0 10-30-2016 14:45 The Flag/ 6148 10-30-2016 14:45 The Flag/.DS_Store 0 10-30-2016 14:46 __MACOSX/ 0 10-30-2016 14:46 __MACOSX/The Flag/ 120 10-30-2016 14:45 __MACOSX/The Flag/._.DS_Store 0 10-30-2016 14:40 The Flag/.ThePassword/ 42 10-30-2016 14:41 The Flag/.ThePassword/ThePassword.txt 16647 10-30-2016 14:45 The Flag/The Flag.pdf 177 10-30-2016 14:45 __MACOSX/The Flag/.</description></item><item><title>The Office</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/</guid><description>We are given a 32-bit binary called the_office:
Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) The challenge says that they have implemented a secure heap using canaries.
We do not have the C source code. Hence, we need to use a reversing tool like Ghidra.
Although the file is stripped:
$ file the_office the_office: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.</description></item><item><title>The secret of a Queen</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/</guid><description>We are given an image with some weird symbols:
The name of the challenge is actually a hint, because there is a cipher used by Mary, Queen of Scots. The cipher is based in a substitution of letters by symbols using this alphabet:
If we translate every symbol on the given image to a letter, we capture the flag: HTB{THEBABINGTONPLOT}.</description></item><item><title>Time Traveller</title><link>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/time-traveller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/time-traveller/</guid><description>In this challenge, we are told to find an email address that was shown in the NASA&amp;rsquo;s website (nasa.gov) on December 31, 1996.
The way to find something in a certain date is going to web.archive.org (WayBack Machine):
Here we search for nasa.gov and get a lot of snapshots of the webpage. Curiously, the oldest snapshot is from December 31, 1996:
If we check this snapshot, we see some information. And here we have the email:</description></item><item><title>Unsubscriptions Are Free</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</guid><description>We are given a 32-bit binary called vuln:
Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) We also have the C source code:
#include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr() { char buf[FLAG_BUFFER]; FILE *f = fopen("</description></item><item><title>what's a net cat?</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/whats-a-net-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/whats-a-net-cat/</guid><description>We are given a remote instance to connect to. If we stablish the connection with nc, we get the flag:
$ nc jupiter.challenges.picoctf.org 25103 You're on your way to becoming the net cat master picoCTF{nEtCat_Mast3ry_d0c64587}</description></item></channel></rss>