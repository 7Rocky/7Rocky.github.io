<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rmi on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/tags/rmi/</link><description>Recent content in Rmi on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 27 Jun 2024 00:41:59 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/en/tags/rmi/index.xml" rel="self" type="application/rss+xml"/><item><title>RegistryTwo</title><link>https://7rocky.github.io/en/htb/registrytwo/</link><pubDate>Sat, 03 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/registrytwo/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a web application that allows to create custom domains with HTML code. Moreover, there is a Docker registry exposed where we can download Docker image blobs after getting a suitable JWT token. The web application is running a WAR file with Tomcat, we can decompile it and see that it queries a RMI server. Since Tomcat is behind an nginx reverse proxy, we can access some sensitive Tomcat &lt;em>servlets&lt;/em> to modify our session and set manager permissions on the web application. We need this to modify the RMI configuration using a mass assignment vulnerability and point the RMI server to us. After that, we can exploit an insecure deserialization vulnerability in Java to get RCE in a container. Then, we can interact with the legitimate RMI server using port forwarding. This server allows us to read arbitrary files with a directory traversal attack. We can find a plaintext password for user &lt;code>developer&lt;/code>, which is reused in SSH. Then, &lt;code>root&lt;/code> is executing a JAR file to analyze files of the hosting website by sending them to a ClamAV server. The problem here is that the JAR calls functions from the RMI register, which is restarted periodically. Therefore, we can craft a malicious RMI registry and exploit win a race condition to take the port, so that &lt;code>root&lt;/code> queries our malicious registry and talks to our fake ClamAV server. The result is that all files at &lt;code>/root&lt;/code> will be quarantined inside a readable directory, which leads to the privilege escalation</description></item></channel></rss>