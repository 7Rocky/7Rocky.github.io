<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/tags/vue/</link><description>Recent content in Vue on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 27 Jun 2024 00:41:59 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/en/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>Intentions</title><link>https://7rocky.github.io/en/htb/intentions/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/intentions/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website with an API that is vulnerable to second-order SQLi. Then, there is an authentication mechanism that just requires the password hash, so we can take a hash from the dumped database and log in as an administrator. Then, there is a vulnerability involving PHP and ImageMagick that leads to RCE. Once in the machine, we can pivot to user &lt;code>greg&lt;/code> by analyzing a Git repository and finding plaintext credentials. After that, we are allowed to run a custom binary that hashes a given length of a file and compares the result with a set of pre-computed MD5 hashes. This binary has a capability that allows to read files as &lt;code>root&lt;/code>, which can be used to extract all the contents of any file after automating the process, which allows to read an SSH private key for &lt;code>root&lt;/code></description></item><item><title>Awkward</title><link>https://7rocky.github.io/en/htb/awkward/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/awkward/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website built in Vue.js that exposes a login form which can be easily bypassed. Then we find an API endpoint that tests connectivity of other websites, which can be exploited using Server-Side Request Forgery to find an internal API documentation. There we have some Node.js code to analyze and see how we can bypass some checks to obtain all the users information and crack a password hash. After that, we can log in, get a valid JWT token and crack it to find the secret. Therefore, we can forge any JWT token, which means we can inject any payload as token information. Using this power, we can read arbitrary files from the server exploiting &lt;code>awk&lt;/code> and find plaintext credentials inside a compressed archive. Next, we can access via SSH and find out another website built with PHP with two vulnerabilities. There is also a Cron task that takes information from a CSV file to send an email. The key here is to inject a malicious parameter in the CSV file so that the &lt;code>mail&lt;/code> command executes a malicious script, which leads to the privilege escalation</description></item><item><title>Horizontall</title><link>https://7rocky.github.io/en/htb/horizontall/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/horizontall/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that hides a valid subdomain that contains a Strapi webapp vulnerable to RCE. There is also an internal Laravel webapp vulnerable to RCE. Some knowledge about JavaScript, PHP and Python, as well as port forwarding techniques, are needed to compromise this machine. This write-up uses a custom script that chains two exploits for Strapi needed to obtain RCE</description></item></channel></rss>