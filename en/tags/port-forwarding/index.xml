<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Port-Forwarding on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/tags/port-forwarding/</link><description>Recent content in Port-Forwarding on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 08 Sep 2024 18:56:03 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/en/tags/port-forwarding/index.xml" rel="self" type="application/rss+xml"/><item><title>RegistryTwo</title><link>https://7rocky.github.io/en/htb/registrytwo/</link><pubDate>Sat, 03 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/registrytwo/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a web application that allows to create custom domains with HTML code. Moreover, there is a Docker registry exposed where we can download Docker image blobs after getting a suitable JWT token. The web application is running a WAR file with Tomcat, we can decompile it and see that it queries a RMI server. Since Tomcat is behind an nginx reverse proxy, we can access some sensitive Tomcat &lt;em>servlets&lt;/em> to modify our session and set manager permissions on the web application. We need this to modify the RMI configuration using a mass assignment vulnerability and point the RMI server to us. After that, we can exploit an insecure deserialization vulnerability in Java to get RCE in a container. Then, we can interact with the legitimate RMI server using port forwarding. This server allows us to read arbitrary files with a directory traversal attack. We can find a plaintext password for user &lt;code>developer&lt;/code>, which is reused in SSH. Then, &lt;code>root&lt;/code> is executing a JAR file to analyze files of the hosting website by sending them to a ClamAV server. The problem here is that the JAR calls functions from the RMI register, which is restarted periodically. Therefore, we can craft a malicious RMI registry and exploit win a race condition to take the port, so that &lt;code>root&lt;/code> queries our malicious registry and talks to our fake ClamAV server. The result is that all files at &lt;code>/root&lt;/code> will be quarantined inside a readable directory, which leads to the privilege escalation</description></item><item><title>RainyDay</title><link>https://7rocky.github.io/en/htb/rainyday/</link><pubDate>Sat, 18 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/rainyday/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website vulnerable to user enumeration. Then we can use brute force a user&amp;rsquo;s password and run containers. Using a container we can access an internal website that has an API that shows sensitive information using Type Juggling and has a feature for matching regular expressions on given files, so that we can read source code and get the secret key for Flask. Then, we can forge a session for user &lt;code>jack&lt;/code> and find out that the Docker containers allow to access process information from the machine, and we can read the private SSH key of this user. Next, we can run a custom Python interpreter and escape the sandbox to get a shell as &lt;code>jack_adm&lt;/code>. Finally, we have a tool to generate hashes with &lt;code>bcrypt&lt;/code>, and we need to exploit a limitation of &lt;code>bcrypt&lt;/code> to extract a secret pepper string and then crack &lt;code>root&lt;/code>&amp;rsquo;s hash in order to escalate privileges</description></item><item><title>Ambassador</title><link>https://7rocky.github.io/en/htb/ambassador/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/ambassador/</guid><description>Hack The Box. Linux. Medium machine. This machine has a Grafana instance that is vulnerable to Directory Path Traversal without authentication. There, we can read files from the server and find the password for Grafana and for MySQL. After that, we can connect to MySQL, which is exposed, and find another password to access via SSH. The machine runs &lt;code>consul&lt;/code> internally with a vulnerable configuration. After finding an authentication token in a Git repository, we can use an exploit to get RCE from &lt;code>consul&lt;/code> and get access as &lt;code>root&lt;/code></description></item><item><title>OpenSource</title><link>https://7rocky.github.io/en/htb/opensource/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/opensource/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website exposes its source code, being vulnerable to Directory Path Traversal. Using this vulnerability we can read the necessary files to compute the PIN for the Flask debug console and get Remote Code Execution in a Docker container. After that, we need to use port forwarding to view a Gitea instance and enter credentials found in a Git repository. Here we have the private SSH key so we can enter as a system user. There is a Cron job that commits new changes of a Git repository and leads to privilege escalation</description></item><item><title>Talkative</title><link>https://7rocky.github.io/en/htb/talkative/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/talkative/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website that exposes a Jamovi application where we can get a reverse shell on a Docker container. Here we find some credentials for a Bolt CMS application, so we get administration access. From here we can modify a template by writing PHP code and get access to another container. This one has connectivity with port 22 of the machine, so we can get access to the machine via SSH reusing credentials. Then, we find that there&amp;rsquo;s another Docker container running MongoDB, which contains the database for a Rocket.Chat server. At this point, we can create a new account on Rocket.Chat and assign us administration role modifying the database entry. After that, we can set a new integration to gain RCE on the container that manages Rocket.Chat. Finally, this container has capability &lt;code>CAP_DAC_READ_SEARCH&lt;/code> enabled, which allows us to read files as &lt;code>root&lt;/code> from the host machine using an exploit. Moreover, the container is also vulnerable to another exploit to write arbitrary files as &lt;code>root&lt;/code> on the host machine</description></item><item><title>OverGraph</title><link>https://7rocky.github.io/en/htb/overgraph/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/overgraph/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Open Redirect, a web application built with AngularJS which is vulnerable to Client-Side Template Injection and XSS, and a GraphQL endpoint. We are able to register a new account bypassing an OTP code using a NoSQLi payload. Then, we can perform a CSRF attack abusing the Open Redirect to inject an XSS payload on the victim&amp;rsquo;s profile in order to get an adminToken stored in localStorage. After that, we are able to upload video files that are processed with ffmpeg, so we can exploit a Server-Side Request Forgery vulnerability to read files from the server. Eventually, we will access as a user to the machine and find a binary that is running as root. Having analyzed the binary, we can obtain a valid token to use the program and exploit a vulnerability to write arbitrary data at an arbitrary address, leading to RCE or write permissions as root</description></item><item><title>Pandora</title><link>https://7rocky.github.io/en/htb/pandora/</link><pubDate>Sat, 21 May 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/pandora/</guid><description>Hack The Box. Linux. Easy machine. This machine exposes sensitive information through SNMP that allows to access the machine. Then we find a local instance of Pandora FMS that has multiple vulnerabilities and they can be exploited to gain RCE as another user. This user is allowed to run a SUID binary that is vulnerable to PATH hijacking, but the attack needs to be performed with an SSH shell. Basic enumeration and pentesting skills are needed in order to compromise this machine</description></item><item><title>Hancliffe</title><link>https://7rocky.github.io/en/htb/hancliffe/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/hancliffe/</guid><description>Hack The Box. Windows. Hard machine. This machine contains a webpage that hides a Nuxeo Java application vulnerable to SSTI by breaking nginx parser logic. Then we find access the machine and find an application that has a public exploit to access as another user. After that, we extract Firefox credentials and use a password generator to login as another user and find a custom Windows PE. Having reversed the binary to obtain the expected credentials, we find a Buffer Overflow vulnerability that must be exploited via Socket Reuse to access as Administrator</description></item><item><title>Horizontall</title><link>https://7rocky.github.io/en/htb/horizontall/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/horizontall/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that hides a valid subdomain that contains a Strapi webapp vulnerable to RCE. There is also an internal Laravel webapp vulnerable to RCE. Some knowledge about JavaScript, PHP and Python, as well as port forwarding techniques, are needed to compromise this machine. This write-up uses a custom script that chains two exploits for Strapi needed to obtain RCE</description></item><item><title>Static</title><link>https://7rocky.github.io/en/htb/static/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/static/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that exposes a corrupted Gzip file that must be patched to get a TOTP key and download a VPN file. Then there are some PHP vulnerable services that can be compromised and get to an internal server that contains a binary executable file having a Format String vulnerability. Deep knowledge about pivoting and port forwarding techniques, network enumeration and PHP exploitation, as well as Format String exploitation are needed to compromise this machine. This write-up uses a custom Ruby script to automate the process of downloading the VPN file, a Python script gain RCE over a PHP web server and another Python script to exploit a binary using Format String</description></item><item><title>Explore</title><link>https://7rocky.github.io/en/htb/explore/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/explore/</guid><description>Hack The Box. Android. Easy machine. This is a mobile device that uses a vulnerable application that exposes files that provide access via SSH. Some port scanning, port forwarding and Android skills are needed to compromise this device</description></item><item><title>Spider</title><link>https://7rocky.github.io/en/htb/spider/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/spider/</guid><description>Hack The Box. Linux. Hard machine. This machine contains a website that is vulnerable to Server-Side Template Injection (SSTI) in two fields and SQL injection (SQLi), and an internal website that is vulnerable to XML External Entity (XXE) injection. Advanced knowledge on SSTI and bypassing techniques, SQLi, XXE and port forwarding skills are needed to compromise the machine. This write-up uses a Python script to exploit SSTI and a Bash script to read file using XXE</description></item><item><title>Monitors</title><link>https://7rocky.github.io/en/htb/monitors/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/monitors/</guid><description>Hack The Box. Linux. Hard machine. This machine has a WordPress web site with a plugin vulnerable to Directory Path Traversal, another website vulnerable to SQL injection, and yet another webpage vulnerable to Insecure Deserialization running inside a Docker container with system capabilities enabled. Deep knowledge about web enumeration, vulnerabilities and exploitation techniques, as well as port forwarding and Docker escaping methods are needed to compromise this machine. This write-up uses a custom Bash script to exploit Insecure Deserialization</description></item><item><title>Antique</title><link>https://7rocky.github.io/en/htb/antique/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/antique/</guid><description>Hack The Box. Linux. Easy machine. This machine is a HP JetDirect printer that exposes its password through SNMP and has an arbritrary file read vulnerability. SNMP enumeration and port forwarding techniques are needed to compromise this machine. This write-up uses a custom Python script to obtain a clear-text password</description></item><item><title>Rope</title><link>https://7rocky.github.io/en/htb/rope/</link><pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/rope/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a custom web server that is vulnerable to Directory Path Traversal so we can read files and discover that it is a binary file. After ananlyzing the binary, we discover that it has a Format String vulnerability that can be exploited to get RCE as &lt;code>john&lt;/code>. This user is able to run another binary as user &lt;code>r4j&lt;/code>. This binary uses an external library that we can modify because of its permissions and gain access as &lt;code>r4j&lt;/code>. Finally, there&amp;rsquo;s another binary that runs a local socket server, we can access the binary and analyze it to find out a Buffer Overflow vulnerability. The binary has all protections set, but it is still exploitable to get RCE as &lt;code>root&lt;/code></description></item></channel></rss>