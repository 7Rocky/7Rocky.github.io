<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nginx on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/tags/nginx/</link><description>Recent content in Nginx on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 27 Jun 2024 00:41:59 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/en/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>RegistryTwo</title><link>https://7rocky.github.io/en/htb/registrytwo/</link><pubDate>Sat, 03 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/registrytwo/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a web application that allows to create custom domains with HTML code. Moreover, there is a Docker registry exposed where we can download Docker image blobs after getting a suitable JWT token. The web application is running a WAR file with Tomcat, we can decompile it and see that it queries a RMI server. Since Tomcat is behind an nginx reverse proxy, we can access some sensitive Tomcat &lt;em>servlets&lt;/em> to modify our session and set manager permissions on the web application. We need this to modify the RMI configuration using a mass assignment vulnerability and point the RMI server to us. After that, we can exploit an insecure deserialization vulnerability in Java to get RCE in a container. Then, we can interact with the legitimate RMI server using port forwarding. This server allows us to read arbitrary files with a directory traversal attack. We can find a plaintext password for user &lt;code>developer&lt;/code>, which is reused in SSH. Then, &lt;code>root&lt;/code> is executing a JAR file to analyze files of the hosting website by sending them to a ClamAV server. The problem here is that the JAR calls functions from the RMI register, which is restarted periodically. Therefore, we can craft a malicious RMI registry and exploit win a race condition to take the port, so that &lt;code>root&lt;/code> queries our malicious registry and talks to our fake ClamAV server. The result is that all files at &lt;code>/root&lt;/code> will be quarantined inside a readable directory, which leads to the privilege escalation</description></item><item><title>Soccer</title><link>https://7rocky.github.io/en/htb/soccer/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/soccer/</guid><description>Hack The Box. Linux. Easy machine. This machine contains a Tiny File Manager application that allows us to upload and execute PHP, so we can obtain a reverse shell as &lt;code>www-data&lt;/code>. In the machine, we can read the configuration for nginx and find another subdomain. This one exposes a WebSocket server that is vulnerable to Boolean-based Blind SQLi. By exploiting SQLi, we can find plaintext credentials that are reused in SSH. Finally, the user is allowed to run &lt;code>dstat&lt;/code> as &lt;code>root&lt;/code> using &lt;code>doas&lt;/code>, and we are able to create a plugin to escalate privileges</description></item><item><title>MetaTwo</title><link>https://7rocky.github.io/en/htb/metatwo/</link><pubDate>Sat, 29 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/metatwo/</guid><description>Hack The Box. Linux. Easy machine. This machine has a WordPress website that uses a plugin that is vulnerable to SQLi. Then we can get password hashes and crack one of them to get access to the WordPress dashboard. The version of WordPress is vulnerable to out-of-band XXE using a WAV file that allows to read files from the server. Using this vulnerability, we can find plaintext credentials for FTP. In this service we have another PHP file with more plaintext credentials that are valid for SSH. Once inside the machine, we can see some PGP keys and messages that can be decrypted to find the password for &lt;code>root&lt;/code></description></item><item><title>Awkward</title><link>https://7rocky.github.io/en/htb/awkward/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/awkward/</guid><description>Hack The Box. Linux. Medium machine. This machine has a website built in Vue.js that exposes a login form which can be easily bypassed. Then we find an API endpoint that tests connectivity of other websites, which can be exploited using Server-Side Request Forgery to find an internal API documentation. There we have some Node.js code to analyze and see how we can bypass some checks to obtain all the users information and crack a password hash. After that, we can log in, get a valid JWT token and crack it to find the secret. Therefore, we can forge any JWT token, which means we can inject any payload as token information. Using this power, we can read arbitrary files from the server exploiting &lt;code>awk&lt;/code> and find plaintext credentials inside a compressed archive. Next, we can access via SSH and find out another website built with PHP with two vulnerabilities. There is also a Cron task that takes information from a CSV file to send an email. The key here is to inject a malicious parameter in the CSV file so that the &lt;code>mail&lt;/code> command executes a malicious script, which leads to the privilege escalation</description></item><item><title>Unicode</title><link>https://7rocky.github.io/en/htb/unicode/</link><pubDate>Sat, 07 May 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/unicode/</guid><description>Hack The Box. Linux. Medium machine. This machine uses JWT tokens with JWKS and JKU that can be forged to arrive to a directory path traversal vulnerability that can be exploited using some Unicode bypassing. After that, there is a Python compiled binary that can be run with sudo and uses curl behind the hoods. Some JWT knowledge, path traversal and command injection bypassing techniques are needed to compromise this machine. This write-up uses a custom Python script to exploit a directory path traversal using JWT with JWKS</description></item><item><title>Hancliffe</title><link>https://7rocky.github.io/en/htb/hancliffe/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/hancliffe/</guid><description>Hack The Box. Windows. Hard machine. This machine contains a webpage that hides a Nuxeo Java application vulnerable to SSTI by breaking nginx parser logic. Then we find access the machine and find an application that has a public exploit to access as another user. After that, we extract Firefox credentials and use a password generator to login as another user and find a custom Windows PE. Having reversed the binary to obtain the expected credentials, we find a Buffer Overflow vulnerability that must be exploited via Socket Reuse to access as Administrator</description></item><item><title>SteamCloud</title><link>https://7rocky.github.io/en/htb/steamcloud/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/steamcloud/</guid><description>Hack The Box. Linux. Easy machine. This machine has a Kubernetes cluster that exposes the kubelet and it is vulnerable to unauthenticated RCE. We are able to extract credentials from a running Pod and use them to create a malicious Pod that mounts the hosts file system. Basic knowledge about pentesting on Kubernetes is needed to compromise this machine</description></item><item><title>Seal</title><link>https://7rocky.github.io/en/htb/seal/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/seal/</guid><description>Hack The Box. Linux. Medium machine. This machine contains a Tomcat website on top of nginx, which has a configuration vulnerability that leads to Remote Code Execution (RCE), then it has some misconfigurations related to file permissions and sudo commands. Knowledge about Tomcat exploitation and Linux file system is needed to compromise this machine</description></item></channel></rss>