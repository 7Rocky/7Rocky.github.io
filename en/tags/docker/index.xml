<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 7Rocky's Blog. Cybersecurity and Maths</title><link>https://7rocky.github.io/en/tags/docker/</link><description>Recent content in Docker on 7Rocky's Blog. Cybersecurity and Maths</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 08 Jul 2024 01:23:16 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/en/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>RegistryTwo</title><link>https://7rocky.github.io/en/htb/registrytwo/</link><pubDate>Sat, 03 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/registrytwo/</guid><description>Hack The Box. Linux. Insane machine. This machine exposes a web application that allows to create custom domains with HTML code. Moreover, there is a Docker registry exposed where we can download Docker image blobs after getting a suitable JWT token. The web application is running a WAR file with Tomcat, we can decompile it and see that it queries a RMI server. Since Tomcat is behind an nginx reverse proxy, we can access some sensitive Tomcat &lt;em>servlets&lt;/em> to modify our session and set manager permissions on the web application. We need this to modify the RMI configuration using a mass assignment vulnerability and point the RMI server to us. After that, we can exploit an insecure deserialization vulnerability in Java to get RCE in a container. Then, we can interact with the legitimate RMI server using port forwarding. This server allows us to read arbitrary files with a directory traversal attack. We can find a plaintext password for user &lt;code>developer&lt;/code>, which is reused in SSH. Then, &lt;code>root&lt;/code> is executing a JAR file to analyze files of the hosting website by sending them to a ClamAV server. The problem here is that the JAR calls functions from the RMI register, which is restarted periodically. Therefore, we can craft a malicious RMI registry and exploit win a race condition to take the port, so that &lt;code>root&lt;/code> queries our malicious registry and talks to our fake ClamAV server. The result is that all files at &lt;code>/root&lt;/code> will be quarantined inside a readable directory, which leads to the privilege escalation</description></item><item><title>MonitorsTwo</title><link>https://7rocky.github.io/en/htb/monitorstwo/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/monitorstwo/</guid><description>Hack The Box. Linux. Easy machine. This machine has a Cacti service that is vulnerable to unauthenticated Remote Code Execution that grants access to a Docker container. Here we can find credentials in the database and reuse them for SSH on the host machine. Then, we find out that the Docker version is vulnerable to a CVE. To exploit this, we need to get &lt;code>root&lt;/code> in the container and configure a SUID binary that will be executed from the host machine via directory traversal to escalate privileges</description></item><item><title>RainyDay</title><link>https://7rocky.github.io/en/htb/rainyday/</link><pubDate>Sat, 18 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/rainyday/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website vulnerable to user enumeration. Then we can use brute force a user&amp;rsquo;s password and run containers. Using a container we can access an internal website that has an API that shows sensitive information using Type Juggling and has a feature for matching regular expressions on given files, so that we can read source code and get the secret key for Flask. Then, we can forge a session for user &lt;code>jack&lt;/code> and find out that the Docker containers allow to access process information from the machine, and we can read the private SSH key of this user. Next, we can run a custom Python interpreter and escape the sandbox to get a shell as &lt;code>jack_adm&lt;/code>. Finally, we have a tool to generate hashes with &lt;code>bcrypt&lt;/code>, and we need to exploit a limitation of &lt;code>bcrypt&lt;/code> to extract a secret pepper string and then crack &lt;code>root&lt;/code>&amp;rsquo;s hash in order to escalate privileges</description></item><item><title>Shoppy</title><link>https://7rocky.github.io/en/htb/shoppy/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/shoppy/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website that is vulnerable to NoSQL injection. Using this vulnerability, we can bypass authentication and list some hashed passwords that can be cracked. Then, we enumerate subdomains and find a MatterMost application in which we can access and find credentials for SSH in the machine. The first user is able to run a custom ELF binary that shows more credentials when using a specific master password. Finally, we can escalate privileges because the second user belongs to group docker</description></item><item><title>OpenSource</title><link>https://7rocky.github.io/en/htb/opensource/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/opensource/</guid><description>Hack The Box. Linux. Easy machine. This machine has a website exposes its source code, being vulnerable to Directory Path Traversal. Using this vulnerability we can read the necessary files to compute the PIN for the Flask debug console and get Remote Code Execution in a Docker container. After that, we need to use port forwarding to view a Gitea instance and enter credentials found in a Git repository. Here we have the private SSH key so we can enter as a system user. There is a Cron job that commits new changes of a Git repository and leads to privilege escalation</description></item><item><title>Talkative</title><link>https://7rocky.github.io/en/htb/talkative/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/talkative/</guid><description>Hack The Box. Linux. Hard machine. This machine has a website that exposes a Jamovi application where we can get a reverse shell on a Docker container. Here we find some credentials for a Bolt CMS application, so we get administration access. From here we can modify a template by writing PHP code and get access to another container. This one has connectivity with port 22 of the machine, so we can get access to the machine via SSH reusing credentials. Then, we find that there&amp;rsquo;s another Docker container running MongoDB, which contains the database for a Rocket.Chat server. At this point, we can create a new account on Rocket.Chat and assign us administration role modifying the database entry. After that, we can set a new integration to gain RCE on the container that manages Rocket.Chat. Finally, this container has capability &lt;code>CAP_DAC_READ_SEARCH&lt;/code> enabled, which allows us to read files as &lt;code>root&lt;/code> from the host machine using an exploit. Moreover, the container is also vulnerable to another exploit to write arbitrary files as &lt;code>root&lt;/code> on the host machine</description></item><item><title>Stacked</title><link>https://7rocky.github.io/en/htb/stacked/</link><pubDate>Sat, 19 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/stacked/</guid><description>Hack The Box. Linux. Insane machine. This machine contains a LocalStack environment that is vulnerable to CSRF and command injection. By discovering an XSS vulnerability in a subdomain, we can use CSRF to exploit the command injection vulnerability and get RCE inside a container. After escalating privileges inside the container by restarting a service and entering a malicious command, we can interact with Docker from the host machine and create a malicious container from scratch that mounts the host file system into the container to get arbitrary file read and write. Web exploitation techniques and deep Docker knowledge is needed in order to compromise this machine</description></item><item><title>GoodGames</title><link>https://7rocky.github.io/en/htb/goodgames/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/goodgames/</guid><description>Hack The Box. Linux. Easy machine. This machine has website that is vulnerable to SQL injection where we can extract a password to access an internal website that is vulnerable to SSTI. Then, we get access to a Docker container that mounts a directory from the machine, so that we can abuse it to escalate privileges. Basic web exploitation skills and Docker breakout techniques are needed in order to compromise this machine. This write-up uses a custom Python script to compromise the entire machine from scratch</description></item><item><title>Bolt</title><link>https://7rocky.github.io/en/htb/bolt/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/bolt/</guid><description>Hack The Box. Linux. Medium machine. This machine has several virtual hosts and a Docker image that contains a lot of information needed to exploit the websites. There is an SSTI vulnerability between two websites interaction. Then we can extract a PGP private key from Google Chrome cache and decrypt a message. Deep knowledge about Docker and basic web exploitation skills are needed in order to compromise this machine</description></item><item><title>Monitors</title><link>https://7rocky.github.io/en/htb/monitors/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/en/htb/monitors/</guid><description>Hack The Box. Linux. Hard machine. This machine has a WordPress web site with a plugin vulnerable to Directory Path Traversal, another website vulnerable to SQL injection, and yet another webpage vulnerable to Insecure Deserialization running inside a Docker container with system capabilities enabled. Deep knowledge about web enumeration, vulnerabilities and exploitation techniques, as well as port forwarding and Docker escaping methods are needed to compromise this machine. This write-up uses a custom Bash script to exploit Insecure Deserialization</description></item></channel></rss>