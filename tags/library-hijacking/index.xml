<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Library-Hijacking on Blog de 7Rocky. Ciberseguridad y Mates</title><link>https://7rocky.github.io/tags/library-hijacking/</link><description>Recent content in Library-Hijacking on Blog de 7Rocky. Ciberseguridad y Mates</description><generator>Hugo</generator><language>es</language><lastBuildDate>Thu, 12 Sep 2024 09:25:25 +0200</lastBuildDate><atom:link href="https://7rocky.github.io/tags/library-hijacking/index.xml" rel="self" type="application/rss+xml"/><item><title>Sandworm</title><link>https://7rocky.github.io/htb/sandworm/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/sandworm/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que permite cifrar, descifrar y verificar firmas con PGP. El sitio web es vulnerable a SSTI en Flask, que es la forma de acceder a la máquina como &lt;code>atlas&lt;/code>. Sin embargo, este entorno es limitado debido a &lt;code>firejail&lt;/code>, pero podemos encontrar una contraseña en texto claro para entrar como &lt;code>silentobserver&lt;/code> por SSH. Como este usuario, podemos modificar un proyecto de Rust que se utiliza en otro proyecto de Rust que se ejecuta periódicamente como &lt;code>atlas&lt;/code>. Con este poder, podemos obtener acceso como &lt;code>atlas&lt;/code> nuevamente, pero fuera de &lt;code>firejail&lt;/code>. Finalmente, dado que &lt;code>firejail&lt;/code> es un binario SUID, podemos usar un &lt;em>exploit&lt;/em> público para convertirnos en &lt;code>root&lt;/code></description></item><item><title>UpDown</title><link>https://7rocky.github.io/htb/updown/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/updown/</guid><description>Hack The Box. Linux. Máquina media. Esta máquina tiene un sitio web que tiene un directorio de desarrollo y expone un repositorio de Git. Usando esto, podemos encontrar alguna funcionalidad que esté oculta excepto para los desarrolladores y que se pueda abusar para obtener RCE después de planificar el ataque y saltarnos las &lt;code>disable_functions&lt;/code> en PHP. En la máquina, hay un binario SUID compilado de un &lt;em>script&lt;/em> en Python, que puede ser abusado con un ataque de &lt;em>library hijacking&lt;/em>. Finalmente, el usuario puede ejecutar &lt;code>easy_install&lt;/code> con &lt;code>sudo&lt;/code>, lo que conduce a la escalada de privilegios</description></item><item><title>Scanned</title><link>https://7rocky.github.io/htb/scanned/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/scanned/</guid><description>Hack The Box. Linux. Máquina insana. Esta máquina tiene una página web que es capaz de analizar malware. Al analizar el código en C del sandbox, se ve que se puede utilizar un archivo de log para exfiltrar información por medio del servidor web, y también abusar de una mala configuración para escapar de chroot. Luego, podemos leer una base de datos SQLite y extraer el hash de una contraseña, que se reutiliza para SSH. Una vez en la máquina, se puede ejecutar un binario SUID desde la sandbox y copiar una librería compartida maliciosa para que el binario SUID ejecute Bash como root. Para comprometer esta máquina se necesitan conocimientos avanzados de Linux, programación en C y Bash, experiencia en auditoría de código y técnicas de evasión. En este write-up se utiliza un script en Bash con un programa en C embebido para listar directorios y leer archivos del servidor y también un programa en Go para romper el hash de una contraseña</description></item><item><title>Rope</title><link>https://7rocky.github.io/htb/rope/</link><pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate><guid>https://7rocky.github.io/htb/rope/</guid><description>Hack The Box. Linux. Máquina insana. Esta máquina expone un servidor web que es vulnerable a navegación de directorios, por lo que podemos leer archivos y descubrir que se trata de un archivo binario. Después de analizar el binario, descubrimos que tiene una vulnerabilidad de &lt;em>Format String&lt;/em> que puede ser explotada para conseguir RCE como &lt;code>john&lt;/code>. Este usuario puede ejecutar otro binario como el usuario &lt;code>r4j&lt;/code>. Este binario utiliza una librería externa que podemos modificar debido a los permisos que tiene y ganar acceso como &lt;code>r4j&lt;/code>. Finalmente, existe otro binario que ejecuta un servidor de &lt;em>socket&lt;/em> en local, podemos acceder al binario y analizarlo para encontrar una vulnerabilidad de &lt;em>Buffer Overflow&lt;/em>. El binario tiene todas las protecciones activas, pero sigue siendo explotable para conseguir RCE como &lt;code>root&lt;/code></description></item></channel></rss>